/**
 * @namespace
*/
dijit={};
/**
 * <b>Summary:</b><blockquote>
 *	 Unregisters listeners on the specified window (either the main<br>
 *	 window or an iframe's window) according to handle returned from registerWin().<br>
 *	 After calling be sure to delete or null out the handle itself.<br>
 * </blockquote>
 * @param {Handle} handle 
*/
dijit.unregisterWin=function(handle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Unregisters listeners on the specified iframe created by registerIframe.<br>
 *	 After calling be sure to delete or null out the handle itself.<br>
 * </blockquote>
 * @param {Object} handle Handle returned by registerIframe()
*/
dijit.unregisterIframe=function(handle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Static method to display tooltip w/specified contents in specified position.<br>
 *	 See description of dijit.Tooltip.defaultPosition for details on position parameter.<br>
 *	 If position is not specified then dijit.Tooltip.defaultPosition is used.<br>
 * </blockquote>
 * @param {String} innerHTML Contents of the tooltip
 * @param {dijit.__Rectangle} aroundNode Specifies that tooltip should be next to this node / area
 * @param {String[]} [position] List of positions to try to position tooltip (ex: [&quot;right&quot;, &quot;above&quot;])
 * @param {Boolean} [rtl] Corresponds to `WidgetBase.dir` attribute, where false means &quot;ltr&quot; and true
 * means &quot;rtl&quot;; specifies GUI direction, not text direction.
 * @param {String} [textDir] Corresponds to `WidgetBase.textdir` attribute; specifies direction of text.
*/
dijit.showTooltip=function(innerHTML, aroundNode, position, rtl, textDir){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets a state on an element.<br>
 * </blockquote>
 * Sets an attribute called "aria-"+state.
 * @param {Element} elem 
 * @param {String} state 
 * @param {String} value 
*/
dijit.setWaiState=function(elem, state, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the role on an element.<br>
 * </blockquote>
 * Replace existing role attribute with new role.
 * @param {Element} elem 
 * @param {String} role 
*/
dijit.setWaiRole=function(elem, role){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select text in the input element argument, from start (default 0), to stop (default end).<br>
 * </blockquote>
 * @param {DomNode} element 
 * @param {Number} [start] 
 * @param {Number} [stop] 
*/
dijit.selectInputText=function(element, start, stop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Scroll the passed node into view, if it is not already.<br>
 *	 Deprecated, use `windowUtils.scrollIntoView` instead.<br>
 * </blockquote>
 * @param {DomNode} node 
 * @param {Object} [pos] 
*/
dijit.scrollIntoView=function(node, pos){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes a state from an element.<br>
 * </blockquote>
 * Sets an attribute called "aria-"+state.
 * @param {Element} elem 
 * @param {String} state 
*/
dijit.removeWaiState=function(elem, state){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the specified role from an element.<br>
 *	 Removes role attribute if no specific role provided (for backwards compat.)<br>
 * </blockquote>
 * @param {Element} elem 
 * @param {String} role 
*/
dijit.removeWaiRole=function(elem, role){};
/**
 * <b>Summary:</b><blockquote>
 *	 Registers listeners on the specified window (either the main<br>
 *	 window or an iframe's window) to detect when the user has clicked somewhere<br>
 *	 or focused somewhere.<br>
 * </blockquote>
 * Users should call registerIframe() instead of this method.
 * @param {Window} [targetWindow] If specified this is the window associated with the iframe,
 * i.e. iframe.contentWindow.
 * @param {DomNode} [effectiveNode] If specified, report any focus events inside targetWindow as
 * an event on effectiveNode, rather than on evt.target.<br>
*/
dijit.registerWin=function(targetWindow, effectiveNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Registers listeners on the specified iframe so that any click<br>
 *	 or focus event on that iframe (or anything in it) is reported<br>
 *	 as a focus/click event on the &amp;lt;iframe&amp;gt; itself.<br>
 * </blockquote>
 * Currently only used by editor.
 * @param {DomNode} iframe 
*/
dijit.registerIframe=function(iframe){};
/**
 * <b>Summary:</b><blockquote>
 *	 Like dijit.placeOnScreenAroundNode(), except that the &amp;quot;around&amp;quot;<br>
 *	 parameter is an arbitrary rectangle on the screen (x, y, width, height)<br>
 *	 instead of a dom node.<br>
 *	 Deprecated, new code should use dijit.place.around() instead.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} aroundRect 
 * @param {mixed} aroundCorners 
 * @param {mixed} layoutNode 
*/
dijit.placeOnScreenAroundRectangle=function(node, aroundRect, aroundCorners, layoutNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Position node adjacent or kitty-corner to aroundNode<br>
 *	 such that it's fully visible in viewport.<br>
 *	 Deprecated, new code should use dijit.place.around() instead.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} aroundNode 
 * @param {mixed} aroundCorners 
 * @param {mixed} layoutNode 
*/
dijit.placeOnScreenAroundNode=function(node, aroundNode, aroundCorners, layoutNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Like dijit.placeOnScreenAroundNode(), except it accepts an arbitrary object<br>
 *	 for the &amp;quot;around&amp;quot; argument and finds a proper processor to place a node.<br>
 *	 Deprecated, new code should use dijit.place.around() instead.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} aroundElement 
 * @param {mixed} aroundCorners 
 * @param {mixed} layoutNode 
 * @param {mixed} aroundNode 
*/
dijit.placeOnScreenAroundElement=function(node, aroundElement, aroundCorners, layoutNode, aroundNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Positions one of the node's corners at specified position<br>
 *	 such that node is fully visible in viewport.<br>
 *	 Deprecated, new code should use dijit.place.at() instead.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} pos 
 * @param {mixed} corners 
 * @param {mixed} padding 
*/
dijit.placeOnScreen=function(node, pos, corners, padding){};
/**
 * <b>Summary:</b><blockquote>
 *	 Moves current selection to a bookmark<br>
 * </blockquote>
 * @param {Object} bookmark This should be a returned object from dijit.getBookmark()
*/
dijit.moveToBookmark=function(bookmark){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tests if an element is tab-navigable<br>
 * </blockquote>
 * @param {Element} elem 
 * @returns {boolean} -
*/
dijit.isTabNavigable=function(elem){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if there is no text selected<br>
 * </blockquote>
*/
dijit.isCollapsed=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Static method to hide the tooltip displayed via showTooltip()<br>
 * </blockquote>
 * @param {mixed} aroundNode 
*/
dijit.hideTooltip=function(aroundNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines if an element has a given state.<br>
 * </blockquote>
 * Checks for an attribute called "aria-"+state.
 * @param {Element} elem 
 * @param {String} state 
*/
dijit.hasWaiState=function(elem, state){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines if an element has a particular role.<br>
 * </blockquote>
 * @param {Element} elem 
 * @param {String} [role] 
*/
dijit.hasWaiRole=function(elem, role){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tests if element is tab-navigable even without an explicit tabIndex setting<br>
 * </blockquote>
 * @param {Element} elem 
*/
dijit.hasDefaultTabStop=function(elem){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the value of a state on an element.<br>
 * </blockquote>
 * Checks for an attribute called "aria-"+state.
 * @param {Element} elem 
 * @param {String} state 
*/
dijit.getWaiState=function(elem, state){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the role for an element (which should be a wai role).<br>
 * </blockquote>
 * @param {Element} elem 
*/
dijit.getWaiRole=function(elem){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated method to return the dimensions and scroll position of the viewable area of a browser window.<br>
 *	 New code should use windowUtils.getBox()<br>
 * </blockquote>
*/
dijit.getViewport=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generates a unique id for a given widgetType<br>
 * </blockquote>
 * @param {String} widgetType 
 * @returns {String} -
*/
dijit.getUniqueId=function(widgetType){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated method, unneeded when using dijit/place directly.<br>
 *	 Transforms the passed array of preferred positions into a format suitable for<br>
 *	 passing as the aroundCorners argument to dijit.placeOnScreenAroundElement.<br>
 * </blockquote>
 * @param {Array} position String[] This variable controls the position of the drop down.
 * It's an array of strings with the following values:<br>
 * <br>
 * * before: places drop down to the left of the target node/widget, or to the right in<br>
 * the case of RTL scripts like Hebrew and Arabic<br>
 * * after: places drop down to the right of the target node/widget, or to the left in<br>
 * the case of RTL scripts like Hebrew and Arabic<br>
 * * above: drop down goes above target node<br>
 * * below: drop down goes below target node<br>
 * <br>
 * The list is positions is tried, in order, until a position is found where the drop down fits<br>
 * within the viewport.
 * @param {Boolean} leftToRight Whether the popup will be displaying in leftToRight mode.
*/
dijit.getPopupAroundAlignment=function(position, leftToRight){};
/**
 * <b>Summary:</b><blockquote>
 *	 Finds the descendant of the specified root node<br>
 *	 that is last in the tabbing order<br>
 * </blockquote>
 * @param {String|DOMNode} root 
 * @returns {DomNode} -
*/
dijit.getLastInTabbingOrder=function(root){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called as getFocus(), this returns an Object showing the current focus<br>
 *	 and selected text.<br>
 *	 <br>
 *	 Called as getFocus(widget), where widget is a (widget representing) a button<br>
 *	 that was just pressed, it returns where focus was before that button<br>
 *	 was pressed.   (Pressing the button may have either shifted focus to the button,<br>
 *	 or removed focus altogether.)   In this case the selected text is not returned,<br>
 *	 since it can't be accurately determined.<br>
 * </blockquote>
 * @param {Widget} [menu] dijit._Widget or {domNode: DomNode} structure
 * The button that was just pressed.  If focus has disappeared or moved<br>
 * to this button, returns the previous focus.  In this case the bookmark<br>
 * information is already lost, and null is returned.
 * @param {Window} [openedForWindow] iframe in which menu was opened
*/
dijit.getFocus=function(menu, openedForWindow){};
/**
 * <b>Summary:</b><blockquote>
 *	 Finds the descendant of the specified root node<br>
 *	 that is first in the tabbing order<br>
 * </blockquote>
 * @param {String|DOMNode} root 
 * @returns {DomNode} -
*/
dijit.getFirstInTabbingOrder=function(root){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the widget whose DOM tree contains the specified DOMNode, or null if<br>
 *	 the node is not contained within the DOM tree of any widget<br>
 * </blockquote>
 * @param {DOMNode} node 
*/
dijit.getEnclosingWidget=function(node){};
/**
 * @param {mixed} doc 
*/
dijit.getDocumentWindow=function(doc){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves a bookmark that can be used with moveToBookmark to return to the same range<br>
 * </blockquote>
 * @returns {Object.|Object} -
*/
dijit.getBookmark=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tracks the currently focused node, and which widgets are currently &amp;quot;active&amp;quot;.<br>
 *	 Access via require([&amp;quot;dijit/focus&amp;quot;], function(focus){ ... }).<br>
 *	 <br>
 *	 A widget is considered active if it or a descendant widget has focus,<br>
 *	 or if a non-focusable node of this widget or a descendant was recently clicked.<br>
 *	 <br>
 *	 Call focus.watch(&amp;quot;curNode&amp;quot;, callback) to track the current focused DOMNode,<br>
 *	 or focus.watch(&amp;quot;activeStack&amp;quot;, callback) to track the currently focused stack of widgets.<br>
 *	 <br>
 *	 Call focus.on(&amp;quot;widget-blur&amp;quot;, func) or focus.on(&amp;quot;widget-focus&amp;quot;, ...) to monitor when<br>
 *	 when widgets become active/inactive<br>
 *	 <br>
 *	 Finally, focus(node) will focus a node, suppressing errors if the node doesn't exist.<br>
 * </blockquote>
 * @param {mixed} node 
*/
dijit.focus=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Search subtree under root returning widgets found.<br>
 *	 Doesn't search for nested widgets (ie, widgets inside other widgets).<br>
 * </blockquote>
 * @param {DOMNode} root 
*/
dijit.findWidgets=function(root){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the widget corresponding to the given DOMNode<br>
 * </blockquote>
 * @param {DOMNode} node 
 * @returns {dijit._Widget} -
*/
dijit.byNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a widget by it's id, or if passed a widget, no-op (like dom.byId())<br>
 * </blockquote>
 * @param {String|dijit._Widget} id 
 * @returns {dijit._Widget} -
*/
dijit.byId=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 A shared instance of a `dijit.DialogUnderlay`<br>
 * </blockquote>
 * A shared instance of a `dijit.DialogUnderlay` created and<br>
 * used by `dijit.Dialog`, though never created until some Dialog<br>
 * or subclass thereof is shown.
 * @param {mixed} kwArgs 
 * @private
*/
dijit._underlay=function(kwArgs){};
/**
 * @param {DomNode} element 
 * @param {Number} [start] 
 * @param {Number} [stop] 
 * @private
*/
dijit._setSelectionRange=function(element, start, stop){};
/**
 * @param {Element} elem 
 * @private
*/
dijit._isElementShown=function(elem){};
/**
 * <b>Summary:</b><blockquote>
 *	 Finds descendants of the specified root node.<br>
 * </blockquote>
 * Finds the following descendants of the specified root node:<br>
 * * the first tab-navigable element in document order<br>
 * without a tabIndex or with tabIndex="0"<br>
 * * the last tab-navigable element in document order<br>
 * without a tabIndex or with tabIndex="0"<br>
 * * the first element in document order with the lowest<br>
 * positive tabIndex value<br>
 * * the last element in document order with the highest<br>
 * positive tabIndex value
 * @param {DOMNode} root 
 * @private
*/
dijit._getTabNavigable=function(root){};
/**
 * <b>Summary:</b><blockquote>
 *	 Code to destroy all widgets and do other cleanup on page unload<br>
 * </blockquote>
 * @private
*/
dijit._destroyAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to supplement _TemplatedMixin when template contains widgets<br>
 * </blockquote>
 * @private
*/
dijit._WidgetsInTemplateMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Future base class for all Dijit widgets.<br>
 * </blockquote>
 * Future base class for all Dijit widgets.<br>
 * _Widget extends this class adding support for various features needed by desktop.<br>
 * <br>
 * Provides stubs for widget lifecycle methods for subclasses to extend, like postMixInProperties(), buildRendering(),<br>
 * postCreate(), startup(), and destroy(), and also public API methods like set(), get(), and watch().<br>
 * <br>
 * Widgets can provide custom setters/getters for widget attributes, which are called automatically by set(name, value).<br>
 * For an attribute XXX, define methods _setXXXAttr() and/or _getXXXAttr().<br>
 * <br>
 * _setXXXAttr can also be a string/hash/array mapping from a widget attribute XXX to the widget's DOMNodes:<br>
 * <br>
 * - DOM node attribute<br>
 * 		_setFocusAttr: {node: "focusNode", type: "attribute"}<br>
 * 		_setFocusAttr: "focusNode"	(shorthand)<br>
 * 		_setFocusAttr: ""		(shorthand, maps to this.domNode)<br>
 * Maps this.focus to this.focusNode.focus, or (last example) this.domNode.focus<br>
 * <br>
 * - DOM node innerHTML<br>
 * 		_setTitleAttr: { node: "titleNode", type: "innerHTML" }<br>
 * Maps this.title to this.titleNode.innerHTML<br>
 * <br>
 * - DOM node innerText<br>
 * 		_setTitleAttr: { node: "titleNode", type: "innerText" }<br>
 * Maps this.title to this.titleNode.innerText<br>
 * <br>
 * - DOM node CSS class<br>
 * 		_setMyClassAttr: { node: "domNode", type: "class" }<br>
 * Maps this.myClass to this.domNode.className<br>
 * <br>
 * If the value of _setXXXAttr is an array, then each element in the array matches one of the<br>
 * formats of the above list.<br>
 * <br>
 * If the custom setter is null, no action is performed other than saving the new value<br>
 * in the widget (in this).<br>
 * <br>
 * If no custom setter is defined for an attribute, then it will be copied<br>
 * to this.focusNode (if the widget defines a focusNode), or this.domNode otherwise.<br>
 * That's only done though for attributes that match DOMNode attributes (title,<br>
 * alt, aria-labelledby, etc.)
 * @param {Object} [params] 
 * @param {DomNode|String} srcNodeRef 
 * @private
*/
dijit._WidgetBase=function(params, srcNodeRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for all Dijit widgets.<br>
 *	 <br>
 *	 Extends _WidgetBase, adding support for:<br>
 *	 - declaratively/programatically specifying widget initialization parameters like<br>
 *	 onMouseMove=&amp;quot;foo&amp;quot; that call foo when this.domNode gets a mousemove event<br>
 *	 - ondijitclick<br>
 *	 Support new data-dojo-attach-event=&amp;quot;ondijitclick: ...&amp;quot; that is triggered by a mouse click or a SPACE/ENTER keypress<br>
 *	 - focus related functions<br>
 *	 In particular, the onFocus()/onBlur() callbacks.   Driven internally by<br>
 *	 dijit/_base/focus.js.<br>
 *	 - deprecated methods<br>
 *	 - onShow(), onHide(), onClose()<br>
 *	 <br>
 *	 Also, by loading code in dijit/_base, turns on:<br>
 *	 - browser sniffing (putting browser id like .dj_ie on &amp;lt;html&amp;gt; node)<br>
 *	 - high contrast mode sniffing (add .dijit_a11y class to &amp;lt;body&amp;gt; if machine is in high contrast mode)<br>
 * </blockquote>
 * @param {mixed} params 
 * @private
*/
dijit._Widget=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 Single node within a tree.   This class is used internally<br>
 *	 by Tree and should not be accessed directly.<br>
 * </blockquote>
*/
dijit._TreeNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A graphical time picker.<br>
 *	 This widget is used internally by other widgets and is not available<br>
 *	 as a standalone widget due to lack of accessibility support.<br>
 * </blockquote>
 * @private
*/
dijit._TimePicker=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets that are instantiated from a template<br>
 * </blockquote>
 * @private
*/
dijit._TemplatedMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated mixin for widgets that are instantiated from a template.<br>
 *	 Widgets should use _TemplatedMixin plus if necessary _WidgetsInTemplateMixin instead.<br>
 * </blockquote>
 * @private
*/
dijit._Templated=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 String<br>
 *	 Localized summary for the palette table<br>
 * </blockquote>
 * A mixin for a grid showing various entities, so the user can pick a certain entity.
 * @private
*/
dijit._PaletteMixin=function(){};
/**
 * @private
*/
dijit._OnDijitClickMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for Menu and MenuBar<br>
 * </blockquote>
 * @private
*/
dijit._MenuBase=function(){};
/**
 * @private
*/
dijit._MenuBarItemMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal widget that holds the actual tooltip markup,<br>
 *	 which occurs once per page.<br>
 *	 Called by Tooltip widgets which are just containers to hold<br>
 *	 the markup<br>
 * </blockquote>
*/
dijit._MasterTooltip=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A _Container with keyboard navigation of its children.<br>
 * </blockquote>
 * To use this mixin, call connectKeyNavHandlers() in<br>
 * postCreate().<br>
 * It provides normalized keyboard and focusing code for Container<br>
 * widgets.
 * @private
*/
dijit._KeyNavContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal widget used by InlineEditBox, displayed when in editing mode<br>
 *	 to display the editor and maybe save/cancel buttons.  Calling code should<br>
 *	 connect to save/cancel methods to detect when editing is finished<br>
 *	 <br>
 *	 Has mainly the same parameters as InlineEditBox, plus these values:<br>
 *	 <br>
 *	 style: Object<br>
 *	 Set of CSS attributes of display node, to replicate in editor<br>
 *	 <br>
 *	 value: String<br>
 *	 Value as an HTML string or plain text string, depending on renderAsHTML flag<br>
 * </blockquote>
*/
dijit._InlineEditor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets that need drop down ability.<br>
 * </blockquote>
 * @private
*/
dijit._HasDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to widget to provide _onFocus() and _onBlur() methods that<br>
 *	 fire when a widget or it's descendants get/lose focus<br>
 * </blockquote>
 * @private
*/
dijit._FocusMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This provides functions useful to Dialog and TooltipDialog<br>
 * </blockquote>
 * @private
*/
dijit._DialogMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A modal dialog Widget<br>
 * </blockquote>
 * Pops up a modal dialog window, blocking access to the screen<br>
 * and also graying out the screen Dialog is extended from<br>
 * ContentPane so it supports all the same parameters (href, etc.)
 * @example
 * 	&lt;div data-dojo-type="dijit.Dialog" data-dojo-props="href: 'test.html'"&gt;&lt;/div&gt;
 * @example
 * 	var foo = new dijit.Dialog({ title: "test dialog", content: "test content" };
 * 	dojo.body().appendChild(foo.domNode);
 * 	foo.startup();
*/
dijit._DialogBase=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets to set CSS classes on the widget DOM nodes depending on hover/mouse press/focus<br>
 *	 state changes, and also higher-level state changes such becoming disabled or selected.<br>
 * </blockquote>
 * By mixing this class into your widget, and setting the this.baseClass attribute, it will automatically<br>
 * maintain CSS classes on the widget root node (this.domNode) depending on hover,<br>
 * active, focus, etc. state.   Ex: with a baseClass of dijitButton, it will apply the classes<br>
 * dijitButtonHovered and dijitButtonActive, as the user moves the mouse over the widget and clicks it.<br>
 * <br>
 * It also sets CSS like dijitButtonDisabled based on widget semantic state.<br>
 * <br>
 * By setting the cssStateNodes attribute, a widget can also track events on subnodes (like buttons<br>
 * within the widget).
 * @private
*/
dijit._CssStateMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets that contain a set of widget children.<br>
 * </blockquote>
 * Use this mixin for widgets that needs to know about and<br>
 * keep track of their widget children. Suitable for widgets like BorderContainer<br>
 * and TabContainer which contain (only) a set of child widgets.<br>
 * <br>
 * It's not suitable for widgets like ContentPane<br>
 * which contains mixed HTML (plain DOM nodes in addition to widgets),<br>
 * and where contained widgets are not necessarily directly below<br>
 * this.containerNode.   In that case calls like addChild(node, position)<br>
 * wouldn't make sense.
 * @private
*/
dijit._Container=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets that are children of a container widget<br>
 * </blockquote>
 * @private
 * @example
 *  	// make a basic custom widget that knows about it's parents
 * 	declare("my.customClass",[dijit._Widget,dijit._Contained],{});
*/
dijit._Contained=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Object associated with each cell in a ColorPalette palette.<br>
 *	 Implements dijit.Dye.<br>
 * </blockquote>
 * @param {String} alias 
 * @param {Number} row 
 * @param {Number} col 
*/
dijit._Color=function(alias, row, col){};
/**
 * <b>Summary:</b><blockquote>
 *	 A set of widgets indexed by id. A default instance of this class is<br>
 *	 available as `dijit.registry`<br>
 * </blockquote>
 * @example
 * Create a small list of widgets:
 * 	var ws = new dijit.WidgetSet();
 * 	ws.add(dijit.byId("one"));
 *  	ws.add(dijit.byId("two"));
 * 	// destroy both:
 * 	ws.forEach(function(w){ w.destroy(); });
 * @example
 * Using dijit.registry:
 * 	dijit.registry.forEach(function(w){ /// do something /// });
*/
dijit.WidgetSet=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This widget displays hierarchical data from a store.<br>
 * </blockquote>
*/
dijit.Tree=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pops up a dialog that appears like a Tooltip<br>
 * </blockquote>
*/
dijit.TooltipDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pops up a tooltip (a help message) when you hover over a node.<br>
 * </blockquote>
*/
dijit.Tooltip=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A spacer between two `dijit.Toolbar` items<br>
 * </blockquote>
*/
dijit.ToolbarSeparator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Toolbar widget, used to hold things like `dijit.Editor` buttons<br>
 * </blockquote>
*/
dijit.Toolbar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A pane with a title on top, that can be expanded or collapsed.<br>
 * </blockquote>
 * An accessible container with a title Heading, and a content<br>
 * section that slides open and closed. TitlePane is an extension to<br>
 * `dijit.layout.ContentPane`, providing all the useful content-control aspects from it.
 * @example
 *  	// load a TitlePane from remote file:
 * 	var foo = new dijit.TitlePane({ href: "foobar.html", title:"Title" });
 * 	foo.startup();
 * @example
 * 	&lt;!-- markup href example: --&gt;
 * 	&lt;div data-dojo-type="dijit.TitlePane" data-dojo-props="href: 'foobar.html', title: 'Title'"&gt;&lt;/div&gt;
 * @example
 * 	&lt;!-- markup with inline data --&gt;
 *  	&lt;div data-dojo-type="dijit.TitlePane" title="Title"&gt;
 * 		&lt;p&gt;I am content&lt;/p&gt;
 * 	&lt;/div&gt;
*/
dijit.TitlePane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A progress indication widget, showing the amount completed<br>
 *	 (often the percentage completed) of a task.<br>
 * </blockquote>
 * @example
 * 	&lt;div data-dojo-type="ProgressBar"
 * 		 places="0"
 * 		 value="..." maximum="..."&gt;
 * 	&lt;/div&gt;
*/
dijit.ProgressBar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An item in a Menu that spawn a drop down (usually a drop down menu)<br>
 * </blockquote>
*/
dijit.PopupMenuItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Item in a MenuBar like &amp;quot;File&amp;quot; or &amp;quot;Edit&amp;quot;, that spawns a submenu when pressed (or hovered)<br>
 * </blockquote>
*/
dijit.PopupMenuBarItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A line between two menu items<br>
 * </blockquote>
*/
dijit.MenuSeparator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A line item in a Menu Widget<br>
 * </blockquote>
*/
dijit.MenuItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Item in a MenuBar that's clickable, and doesn't spawn a submenu when pressed (or hovered)<br>
 * </blockquote>
*/
dijit.MenuBarItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A menu bar, listing menu choices horizontally, like the &amp;quot;File&amp;quot; menu in most desktop applications<br>
 * </blockquote>
*/
dijit.MenuBar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A context menu you can assign to multiple elements<br>
 * </blockquote>
*/
dijit.Menu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An element with in-line edit capabilities<br>
 * </blockquote>
 * Behavior for an existing node (`&lt;p&gt;`, `&lt;div&gt;`, `&lt;span&gt;`, etc.) so that<br>
 * when you click it, an editor shows up in place of the original<br>
 * text.  Optionally, Save and Cancel button are displayed below the edit widget.<br>
 * When Save is clicked, the text is pulled from the edit<br>
 * widget and redisplayed and the edit widget is again hidden.<br>
 * By default a plain Textarea widget is used as the editor (or for<br>
 * inline values a TextBox), but you can specify an editor such as<br>
 * dijit.Editor (for editing HTML) or a Slider (for adjusting a number).<br>
 * An edit widget must support the following API to be used:<br>
 * - displayedValue or value as initialization parameter,<br>
 * and available through set('displayedValue') / set('value')<br>
 * - void focus()<br>
 * - DOM-node focusNode = node containing editable text<br>
*/
dijit.InlineEditBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A rich text Editing widget<br>
 * </blockquote>
 * This widget provides basic WYSIWYG editing features, based on the browser's<br>
 * underlying rich text editing capability, accompanied by a toolbar (`dijit.Toolbar`).<br>
 * A plugin model is available to extend the editor's capabilities as well as the<br>
 * the options available in the toolbar.  Content generation may vary across<br>
 * browsers, and clipboard operations may have different results, to name<br>
 * a few limitations.  Note: this widget should not be used with the HTML<br>
 * &amp;lt;TEXTAREA&amp;gt; tag -- see dijit._editor.RichText for details.
 * @see dijit._editor.RichText
*/
dijit.Editor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Interface for the JS Object associated with a palette cell (i.e. DOMNode)<br>
 * </blockquote>
 * @param {String} alias 
 * @param {mixed} row 
 * @param {mixed} col 
*/
dijit.Dye=function(alias, row, col){};
/**
 * <b>Summary:</b><blockquote>
 *	 A menu, without features for context menu (Meaning, drop down menu)<br>
 * </blockquote>
*/
dijit.DropDownMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The component that blocks the screen behind a `dijit.Dialog`<br>
 * </blockquote>
 * A component used to block input behind a `dijit.Dialog`. Only a single<br>
 * instance of this widget is created by `dijit.Dialog`, and saved as<br>
 * a reference to be shared between all Dialogs as `dijit._underlay`<br>
 * <br>
 * The underlay itself can be styled based on and id:<br>
 * 	#myDialog_underlay { background-color:red; }<br>
 * <br>
 * In the case of `dijit.Dialog`, this id is based on the id of the Dialog,<br>
 * suffixed with _underlay.<br>
*/
dijit.DialogUnderlay=function(){};
/**
*/
dijit.Dialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The Declaration widget allows a developer to declare new widget<br>
 *	 classes directly from a snippet of markup.<br>
 * </blockquote>
*/
dijit.Declaration=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A keyboard accessible color-picking widget<br>
 * </blockquote>
 * Grid showing various colors, so the user can pick a certain color.<br>
 * Can be used standalone, or as a popup.
 * @example
 * 	&lt;div data-dojo-type="dijit.ColorPalette"&gt;&lt;/div&gt;
 * @example
 * 	var picker = new dijit.ColorPalette({ },srcNode);
 * 	picker.startup();
*/
dijit.ColorPalette=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A checkbox-like menu item for toggling on and off<br>
 * </blockquote>
*/
dijit.CheckedMenuItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Lightweight version of Calendar widget aimed towards mobile use<br>
 * </blockquote>
 * A simple GUI for choosing a date in the context of a monthly calendar.<br>
 * This widget can't be used in a form because it doesn't serialize the date to an<br>
 * `&lt;input&gt;` field.  For a form element, use dijit.form.DateTextBox instead.<br>
 * <br>
 * Note that the parser takes all dates attributes passed in the<br>
 * [RFC 3339 format](http://www.faqs.org/rfcs/rfc3339.html), e.g. `2005-06-30T08:05:00-07:00`<br>
 * so that they are serializable and locale-independent.<br>
 * <br>
 * Also note that this widget isn't keyboard accessible; use dijit.Calendar for that
 * @see reference <a href="http://www.faqs.org/rfcs/rfc3339.html),">http://www.faqs.org/rfcs/rfc3339.html),</a>
 * @param {Object} args 
 * @example
 * 	var calendar = new dijit.CalendarLite({}, dojo.byId("calendarNode"));
 * @example
 * 	&lt;div data-dojo-type="dijit.CalendarLite"&gt;&lt;/div&gt;
*/
dijit.CalendarLite=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple GUI for choosing a date in the context of a monthly calendar.<br>
 * </blockquote>
 * See CalendarLite for general description.   Calendar extends CalendarLite, adding:<br>
 * - month drop down list<br>
 * - keyboard navigation<br>
 * - CSS classes for hover/mousepress on date, month, and year nodes<br>
 * - support of deprecated methods (will be removed in 2.0)<br>
*/
dijit.Calendar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 For IE/FF z-index schenanigans. id attribute is required.<br>
 * </blockquote>
 * new dijit.BackgroundIframe(node)<br>
 * Makes a background iframe as a child of node, that fills<br>
 * area (and position) of node
 * @param {DomNode} node 
*/
dijit.BackgroundIframe=function(node){};
/**
 * @namespace
*/
dijit.typematic={};
/**
 * @namespace
*/
dijit.tree={};
/**
 * @namespace
*/
dijit.range={};
/**
 * @namespace
*/
dijit.popup={};
/**
 * @namespace
*/
dijit.place={};
/**
 * @namespace
*/
dijit.layout={};
/**
 * @namespace
*/
dijit.form={};
/**
 * @namespace
 * @private
*/
dijit._tree={};
/**
 * @namespace
 * @private
*/
dijit._editor={};
/**
 * @namespace
 * @private
*/
dijit._base={};
/**
 * <b>Summary:</b><blockquote>
 *	 For IE/FF z-index schenanigans. id attribute is required.<br>
 * </blockquote>
 * new dijit.BackgroundIframe(node)<br>
 * Makes a background iframe as a child of node, that fills<br>
 * area (and position) of node
 * @class
 * @returns {dijit.BackgroundIframe} new instance
*/
dijit.BackgroundIframe=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize the iframe so it's the same size as node.<br>
 *	 Needed on IE6 and IE/quirks because height:100% doesn't work right.<br>
 * </blockquote>
 * @param {mixed} node 
 * @memberOf dijit.BackgroundIframe
*/
dijit.BackgroundIframe.prototype.resize=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 destroy the iframe<br>
 * </blockquote>
 * @memberOf dijit.BackgroundIframe
*/
dijit.BackgroundIframe.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 destroy the iframe<br>
 * </blockquote>
 * @class
 * @returns {dijit.BackgroundIframe.destroy} new instance
*/
dijit.BackgroundIframe.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the focused node and the selection according to argument.<br>
 *	 To set focus to an iframe's content, pass in the iframe itself.<br>
 * </blockquote>
 * @param {Object} handle object returned by get(), or a DomNode
*/
dijit.focus.focus=function(handle){};
/**
 * @param {dijit.popup.__OpenArgs} args 
*/
dijit.popup.open=function(args){};
/**
 * @param {mixed} widget 
 * @private
*/
dijit.popup._createWrapper=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Future base class for all Dijit widgets.<br>
 * </blockquote>
 * Future base class for all Dijit widgets.<br>
 * _Widget extends this class adding support for various features needed by desktop.<br>
 * <br>
 * Provides stubs for widget lifecycle methods for subclasses to extend, like postMixInProperties(), buildRendering(),<br>
 * postCreate(), startup(), and destroy(), and also public API methods like set(), get(), and watch().<br>
 * <br>
 * Widgets can provide custom setters/getters for widget attributes, which are called automatically by set(name, value).<br>
 * For an attribute XXX, define methods _setXXXAttr() and/or _getXXXAttr().<br>
 * <br>
 * _setXXXAttr can also be a string/hash/array mapping from a widget attribute XXX to the widget's DOMNodes:<br>
 * <br>
 * - DOM node attribute<br>
 * 		_setFocusAttr: {node: "focusNode", type: "attribute"}<br>
 * 		_setFocusAttr: "focusNode"	(shorthand)<br>
 * 		_setFocusAttr: ""		(shorthand, maps to this.domNode)<br>
 * Maps this.focus to this.focusNode.focus, or (last example) this.domNode.focus<br>
 * <br>
 * - DOM node innerHTML<br>
 * 		_setTitleAttr: { node: "titleNode", type: "innerHTML" }<br>
 * Maps this.title to this.titleNode.innerHTML<br>
 * <br>
 * - DOM node innerText<br>
 * 		_setTitleAttr: { node: "titleNode", type: "innerText" }<br>
 * Maps this.title to this.titleNode.innerText<br>
 * <br>
 * - DOM node CSS class<br>
 * 		_setMyClassAttr: { node: "domNode", type: "class" }<br>
 * Maps this.myClass to this.domNode.className<br>
 * <br>
 * If the value of _setXXXAttr is an array, then each element in the array matches one of the<br>
 * formats of the above list.<br>
 * <br>
 * If the custom setter is null, no action is performed other than saving the new value<br>
 * in the widget (in this).<br>
 * <br>
 * If no custom setter is defined for an attribute, then it will be copied<br>
 * to this.focusNode (if the widget defines a focusNode), or this.domNode otherwise.<br>
 * That's only done though for attributes that match DOMNode attributes (title,<br>
 * alt, aria-labelledby, etc.)
 * @class
 * @extends dojo.Stateful
 * @private
 * @returns {dijit._WidgetBase} new instance
*/
dijit._WidgetBase=function(){};
/**
 * @namespace
 * @private
*/
dijit._WidgetBase._setClassAttr={};
/**
 * <b>Summary:</b><blockquote>
 *	 Unsubscribes handle created by this.subscribe.<br>
 *	 Also removes handle from this widget's list of subscriptions<br>
 * </blockquote>
 * @param {Object} handle 
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.unsubscribe=function(handle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function. Override to implement custom widget tear-down<br>
 *	 behavior.<br>
 * </blockquote>
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.uninitialize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a string that represents the widget<br>
 * </blockquote>
 * When a widget is cast to a string, this method will be used to generate the<br>
 * output. Currently, it does not implement any sort of reversible<br>
 * serialization.
 * @returns {String} -
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subscribes to the specified topic and calls the specified method<br>
 *	 of this object and registers for unsubscribe() on widget destroy.<br>
 * </blockquote>
 * Provide widget-specific analog to dojo.subscribe, except with the<br>
 * implicit use of this widget as the target object.
 * @param {String} t The topic
 * @param {Function} method The callback
 * @returns {_Widget.Handle} -
 * @example
 * 	var btn = new dijit.form.Button();
 * 	// when /my/topic is published, this button changes its label to
 *	// be the parameter of the topic.
 * 	btn.subscribe("/my/topic", function(v){
 * 		this.set("label", v);
 * 	});
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.subscribe=function(t, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Processing after the DOM fragment is added to the document<br>
 * </blockquote>
 * Called after a widget and its children have been created and added to the page,<br>
 * and all related widgets have finished their create() cycle, up through postCreate().<br>
 * This is useful for composite widgets that need to control or layout sub-widgets.<br>
 * Many layout widgets can use this as a wiring phase.
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set a property on a widget<br>
 * </blockquote>
 * Sets named properties on a widget which may potentially be handled by a<br>
 * setter in the widget.<br>
 * <br>
 * For example, if the widget has properties `foo` and `bar`<br>
 * and a method named `_setFooAttr()`, calling<br>
 * `myWidget.set("foo", "Howdy!")` would be equivalent to calling<br>
 * `widget._setFooAttr("Howdy!")` and `myWidget.set("bar", 3)`<br>
 * would be equivalent to the statement `widget.bar = 3;`<br>
 * <br>
 * set() may also be called with a hash of name/value pairs, ex:<br>
 * <br>
 * 	myWidget.set({<br>
 * 		foo: "Howdy",<br>
 * 		bar: 3<br>
 * 	});<br>
 * <br>
 * This is equivalent to calling `set(foo, "Howdy")` and `set(bar, 3)`
 * @param {The} name property to set.
 * @param {The} value value to set in the property.
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.set=function(name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Kicks off widget instantiation.  See create() for details.<br>
 * </blockquote>
 * @param {Object} [params] 
 * @param {DomNode|String} srcNodeRef 
 * @private
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.postscript=function(params, srcNodeRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called after the parameters to the widget have been read-in,<br>
 *	 but before the widget template is instantiated. Especially<br>
 *	 useful to set properties that are referenced in the widget<br>
 *	 template.<br>
 * </blockquote>
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Processing after the DOM fragment is created<br>
 * </blockquote>
 * Called after the DOM fragment has been created, but not necessarily<br>
 * added to the document.  Do not include any operations which rely on<br>
 * node dimensions or placement.
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Place this widget's domNode reference somewhere in the DOM based<br>
 *	 on standard domConstruct.place conventions, or passing a Widget reference that<br>
 *	 contains and addChild member.<br>
 * </blockquote>
 * A convenience function provided in all _Widgets, providing a simple<br>
 * shorthand mechanism to put an existing (or newly created) Widget<br>
 * somewhere in the dom, and allow chaining.
 * @param {String|DomNode|_Widget} reference The String id of a domNode, a domNode reference, or a reference to a Widget possessing
 * an addChild method.
 * @param {String|Int} [position] If passed a string or domNode reference, the position argument
 * accepts a string just as domConstruct.place does, one of: &quot;first&quot;, &quot;last&quot;,<br>
 * &quot;before&quot;, or &quot;after&quot;.<br>
 * <br>
 * If passed a _Widget reference, and that widget reference has an &quot;.addChild&quot; method,<br>
 * it will be called passing this widget instance into that method, supplying the optional<br>
 * position index passed.
 * @example
 *  	// create a Button with no srcNodeRef, and place it in the body:
 *  	var button = new dijit.form.Button({ label:"click" }).placeAt(win.body());
 *  	// now, 'button' is still the widget reference to the newly created button
 *  	button.on("click", function(e){ console.log('click'); }));
 * @example
 * 	// create a button out of a node with id="src" and append it to id="wrapper":
 *  	var button = new dijit.form.Button({},"src").placeAt("wrapper");
 * @example
 * 	// place a new button as the first element of some div
 * 	var button = new dijit.form.Button({ label:"click" }).placeAt("wrapper","first");
 * @example
 * 	// create a contentpane and add it to a TabContainer
 * 	var tc = dijit.byId("myTabs");
 * 	new dijit.layout.ContentPane({ href:"foo.html", title:"Wow!" }).placeAt(tc)
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.placeAt=function(reference, position){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the widget becomes &amp;quot;active&amp;quot; because<br>
 *	 it or a widget inside of it either has focus, or has recently<br>
 *	 been clicked.<br>
 * </blockquote>
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.onFocus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the widget stops being &amp;quot;active&amp;quot; because<br>
 *	 focus moved to something outside of it, or the user<br>
 *	 clicked somewhere outside of it, or the widget was<br>
 *	 hidden.<br>
 * </blockquote>
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call specified function when event occurs, ex: myWidget.on(&amp;quot;click&amp;quot;, function(){ ... }).<br>
 * </blockquote>
 * Call specified function when event `type` occurs, ex: `myWidget.on("click", function(){ ... })`.<br>
 * Note that the function is not run in any particular scope, so if (for example) you want it to run in the<br>
 * widget's scope you must do `myWidget.on("click", lang.hitch(myWidget, func))`.
 * @param {String} type 
 * @param {Function} func 
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.on=function(type, func){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return this widget's explicit or implicit orientation (true for LTR, false for RTL)<br>
 * </blockquote>
 * @returns {Boolean} -
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.isLeftToRight=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return true if this widget can currently be focused<br>
 *	 and false if not<br>
 * </blockquote>
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.isFocusable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return direction of the text.<br>
 *	 The function overridden in the _BidiSupport module,<br>
 *	 its main purpose is to calculate the direction of the<br>
 *	 text, if was defined by the programmer through textDir.<br>
 * </blockquote>
 * @param {String} text 
 * @param {String} originalDir 
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.getTextDir=function(text, originalDir){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the parent widget of this widget<br>
 * </blockquote>
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.getParent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns all the widgets contained by this, i.e., all widgets underneath this.containerNode.<br>
 *	 Does not return nested widgets, nor widgets that are part of this widget's template.<br>
 * </blockquote>
 * @returns {dijit._Widget[]} -
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.getChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get a property from a widget.<br>
 * </blockquote>
 * Get a named property from a widget. The property may<br>
 * potentially be retrieved via a getter method. If no getter is defined, this<br>
 * just retrieves the object's property.<br>
 * <br>
 * For example, if the widget has properties `foo` and `bar`<br>
 * and a method named `_getFooAttr()`, calling:<br>
 * `myWidget.get("foo")` would be equivalent to calling<br>
 * `widget._getFooAttr()` and `myWidget.get("bar")`<br>
 * would be equivalent to the expression<br>
 * `widget.bar2`
 * @param {The} name property to get.
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.get=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnects handle created by `connect`.<br>
 *	 Also removes handle from this widget's list of connects.<br>
 * </blockquote>
 * @param {mixed} handle 
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.disconnect=function(handle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroys the DOM nodes associated with this widget<br>
 * </blockquote>
 * @param {Boolean} [preserveDom] If true, this method will leave the original DOM structure alone
 * during tear-down. Note: this will not work with _Templated<br>
 * widgets yet.
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.destroyRendering=function(preserveDom){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy this widget and its descendants<br>
 * </blockquote>
 * This is the generic "destructor" function that all widget users<br>
 * should call to cleanly discard with a widget. Once a widget is<br>
 * destroyed, it is removed from the manager object.
 * @param {Boolean} [preserveDom] If true, this method will leave the original DOM structure
 * alone of descendant Widgets. Note: This will NOT work with<br>
 * dijit._Templated widgets.
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.destroyRecursive=function(preserveDom){};
/**
 * <b>Summary:</b><blockquote>
 *	 Recursively destroy the children of this widget and their<br>
 *	 descendants.<br>
 * </blockquote>
 * @param {Boolean} [preserveDom] If true, the preserveDom attribute is passed to all descendant
 * widget's .destroy() method. Not for use with _Templated<br>
 * widgets.
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.destroyDescendants=function(preserveDom){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy this widget, but not its descendants.<br>
 *	 This method will, however, destroy internal widgets such as those used within a template.<br>
 * </blockquote>
 * @param {Boolean} preserveDom If true, this method will leave the original DOM structure alone.
 * Note: This will not yet work with _Templated widgets
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.destroy=function(preserveDom){};
/**
 * <b>Summary:</b><blockquote>
 *	 Kick off the life-cycle of a widget<br>
 * </blockquote>
 * Create calls a number of widget methods (postMixInProperties, buildRendering, postCreate,<br>
 * etc.), some of which of you'll want to override. See http://dojotoolkit.org/reference-guide/dijit/_WidgetBase.html<br>
 * for a discussion of the widget creation lifecycle.<br>
 * <br>
 * Of course, adventurous developers could override create entirely, but this should<br>
 * only be done as a last resort.
 * @see reference <a href="http://dojotoolkit.org/reference-guide/dijit/_WidgetBase.html">http://dojotoolkit.org/reference-guide/dijit/_WidgetBase.html</a>
 * @param {Object} [params] Hash of initialization parameters for widget, including
 * scalar values (like title, duration etc.) and functions,<br>
 * typically callbacks like onClick.
 * @param {DomNode|String} [srcNodeRef] If a srcNodeRef (DOM node) is specified:
 * - use srcNodeRef.innerHTML as my contents<br>
 * - if this is a behavioral widget then apply behavior<br>
 * to that srcNodeRef<br>
 * - otherwise, replace srcNodeRef with my generated DOM<br>
 * tree
 * @private
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.create=function(params, srcNodeRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connects specified obj/event to specified method of this object<br>
 *	 and registers for disconnect() on widget destroy.<br>
 * </blockquote>
 * Provide widget-specific analog to dojo.connect, except with the<br>
 * implicit use of this widget as the target object.<br>
 * Events connected with `this.connect` are disconnected upon<br>
 * destruction.
 * @param {Object|null} obj 
 * @param {String|Function} event 
 * @param {String|Function} method 
 * 
 * @returns {_Widget.Handle} -the widget is destroyed.
 * @example
 * 	var btn = new dijit.form.Button();
 * 	// when foo.bar() is called, call the listener we're going to
 * 	// provide in the scope of btn
 * 	btn.connect(foo, "bar", function(){
 * 		console.debug(this.toString());
 * 	});
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.connect=function(obj, event, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Construct the UI for this widget, setting this.domNode.<br>
 *	 Most widgets will mixin `dijit._TemplatedMixin`, which implements this method.<br>
 * </blockquote>
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The function overridden in the _BidiSupport module,<br>
 *	 originally used for setting element.dir according to this.textDir.<br>
 *	 In this case does nothing.<br>
 * </blockquote>
 * @param {DOMNode} element 
 * @param {String} text 
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype.applyTextDir=function(element, text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the style attribute of the widget according to value,<br>
 *	 which is either a hash like {height: &amp;quot;5px&amp;quot;, width: &amp;quot;3px&amp;quot;}<br>
 *	 or a plain string<br>
 * </blockquote>
 * Determines which node to set the style on based on style setting<br>
 * in attributeMap.
 * @param {String||Object} value 
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype._setStyleAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function to set new value for specified attribute, and call handlers<br>
 *	 registered with watch() if the value has changed.<br>
 * </blockquote>
 * @param {String} name 
 * @param {anything} value 
 * @private
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype._set=function(name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Maps on() type parameter (ex: &amp;quot;mousemove&amp;quot;) to method name (ex: &amp;quot;onMouseMove&amp;quot;)<br>
 * </blockquote>
 * @param {String} type 
 * @private
 * @returns {String} -
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype._onMap=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is where widgets do processing for when they are active,<br>
 *	 such as changing CSS classes.  See onFocus() for more details.<br>
 * </blockquote>
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype._onFocus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is where widgets do processing for when they stop being active,<br>
 *	 such as changing CSS classes.  See onBlur() for more details.<br>
 * </blockquote>
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function for get() and set().<br>
 *	 Caches attribute name values so we don't do the string ops every time.<br>
 * </blockquote>
 * @param {mixed} name 
 * @private
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype._getAttrNames=function(name){};
/**
 * @param {mixed} s 
 * @private
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype._cv=function(s){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reflect a widget attribute (title, tabIndex, duration etc.) to<br>
 *	 the widget DOM, as specified by commands parameter.<br>
 *	 If commands isn't specified then it's looked up from attributeMap.<br>
 *	 Note some attributes like &amp;quot;type&amp;quot;<br>
 *	 cannot be processed this way as they are not mutable.<br>
 * </blockquote>
 * @param {String} attr 
 * @param {String} value 
 * @param {Object} [commands] 
 * @private
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype._attrToDom=function(attr, value, commands){};
/**
 * <b>Summary:</b><blockquote>
 *	 Step during widget creation to copy  widget attributes to the<br>
 *	 DOM according to attributeMap and _setXXXAttr objects, and also to call<br>
 *	 custom _setXXXAttr() methods.<br>
 *	 <br>
 *	 Skips over blank/false attribute values, unless they were explicitly specified<br>
 *	 as parameters to the widget, since those are the default anyway,<br>
 *	 and setting tabIndex=&amp;quot;&amp;quot; is different than not setting tabIndex at all.<br>
 *	 <br>
 *	 For backwards-compatibility reasons attributeMap overrides _setXXXAttr when<br>
 *	 _setXXXAttr is a hash/string/array, but _setXXXAttr as a functions override attributeMap.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._WidgetBase
*/
dijit._WidgetBase.prototype._applyAttributes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple GUI for choosing a date in the context of a monthly calendar.<br>
 * </blockquote>
 * See CalendarLite for general description.   Calendar extends CalendarLite, adding:<br>
 * - month drop down list<br>
 * - keyboard navigation<br>
 * - CSS classes for hover/mousepress on date, month, and year nodes<br>
 * - support of deprecated methods (will be removed in 2.0)
 * @class
 * @extends dijit.CalendarLite
 * @extends dijit._Widget
 * @extends dijit._CssStateMixin
 * @returns {dijit.Calendar} new instance
*/
dijit.Calendar=function(){};
/**
 * @namespace
*/
dijit.Calendar.cssStateNodes={};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   Use set('value', ...) instead.<br>
 * </blockquote>
 * @param {Date} value 
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype.setValue=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   Notification that a date cell was selected.  It may be the same as the previous value.<br>
 * </blockquote>
 * Formerly used by `dijit.form._DateTimeTextBox` (and thus `dijit.form.DateTextBox`)<br>
 * to get notification when the user has clicked a date.  Now onExecute() (above) is used.
 * @param {Date} date 
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype.onValueSelected=function(date){};
/**
 * @param {mixed} value 
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype.onChange=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides keyboard navigation of calendar.<br>
 * </blockquote>
 * Called from _onKeyPress() to handle keypress on a stand alone Calendar,<br>
 * and also from `dijit.form._DateTimeTextBox` to pass a keypress event<br>
 * from the `dijit.form.DateTextBox` to be handled in this widget
 * @param {Event} evt 
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype.handleKey=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 May be overridden to return CSS classes to associate with the date entry for the given dateObject,<br>
 *	 for example to indicate a holiday in specified locale.<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @param {String} [locale] 
 * @returns {String} -
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype.getClassForDate=function(dateObject, locale){};
/**
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for when user selects a month from the drop down list<br>
 * </blockquote>
 * @param {Number} newMonth 
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype._onMonthSelect=function(newMonth){};
/**
 * <b>Summary:</b><blockquote>
 *	 For handling keypress events on a stand alone calendar<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype._onKeyPress=function(evt){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype._onDayMouseUp=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for mouse over events on days, sets hovered style<br>
 * </blockquote>
 * @param {Event} evt 
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype._onDayMouseOver=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for mouse out events on days, clears hovered style<br>
 * </blockquote>
 * @param {Event} evt 
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype._onDayMouseOut=function(evt){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype._onDayMouseDown=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates the drop down button that displays the current month and lets user pick a new one<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Calendar
*/
dijit.Calendar.prototype._createMonthWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 DropDownButton for the current month.	Displays name of current month<br>
 *	 and a list of month names in the drop down<br>
 * </blockquote>
*/
dijit.Calendar._MonthDropDownButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The list-of-months drop down from the MonthDropDownButton<br>
 * </blockquote>
*/
dijit.Calendar._MonthDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 DropDownButton for the current month.	Displays name of current month<br>
 *	 and a list of month names in the drop down<br>
 * </blockquote>
 * @class
 * @extends dijit.form.DropDownButton
 * @returns {dijit.Calendar._MonthDropDownButton} new instance
*/
dijit.Calendar._MonthDropDownButton=function(){};
/**
 * @memberOf dijit.Calendar._MonthDropDownButton
*/
dijit.Calendar._MonthDropDownButton.prototype.postCreate=function(){};
/**
 * @memberOf dijit.Calendar._MonthDropDownButton
*/
dijit.Calendar._MonthDropDownButton.prototype.onMonthSelect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the current month to display as a label<br>
 * </blockquote>
 * @param {mixed} month 
 * @private
 * @memberOf dijit.Calendar._MonthDropDownButton
*/
dijit.Calendar._MonthDropDownButton.prototype._setMonthAttr=function(month){};
/**
 * <b>Summary:</b><blockquote>
 *	 The list-of-months drop down from the MonthDropDownButton<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dijit.Calendar._MonthDropDown} new instance
*/
dijit.Calendar._MonthDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when month is selected from drop down<br>
 * </blockquote>
 * @param {Number} month 
 * @memberOf dijit.Calendar._MonthDropDown
*/
dijit.Calendar._MonthDropDown.prototype.onChange=function(month){};
/**
 * @param {String[]} months 
 * @private
 * @memberOf dijit.Calendar._MonthDropDown
*/
dijit.Calendar._MonthDropDown.prototype._setMonthsAttr=function(months){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dijit.Calendar._MonthDropDown
*/
dijit.Calendar._MonthDropDown.prototype._onMenuHover=function(evt){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dijit.Calendar._MonthDropDown
*/
dijit.Calendar._MonthDropDown.prototype._onClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Lightweight version of Calendar widget aimed towards mobile use<br>
 * </blockquote>
 * A simple GUI for choosing a date in the context of a monthly calendar.<br>
 * This widget can't be used in a form because it doesn't serialize the date to an<br>
 * `&lt;input&gt;` field.  For a form element, use dijit.form.DateTextBox instead.<br>
 * <br>
 * Note that the parser takes all dates attributes passed in the<br>
 * [RFC 3339 format](http://www.faqs.org/rfcs/rfc3339.html), e.g. `2005-06-30T08:05:00-07:00`<br>
 * so that they are serializable and locale-independent.<br>
 * <br>
 * Also note that this widget isn't keyboard accessible; use dijit.Calendar for that
 * @see reference <a href="http://www.faqs.org/rfcs/rfc3339.html),">http://www.faqs.org/rfcs/rfc3339.html),</a>
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._TemplatedMixin
 * @param {Object} args 
 * @returns {dijit.CalendarLite} new instance
 * @example
 * 	var calendar = new dijit.CalendarLite({}, dojo.byId("calendarNode"));
 * @example
 * 	&lt;div data-dojo-type="dijit.CalendarLite"&gt;&lt;/div&gt;
*/
dijit.CalendarLite=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called only when the selected date has changed<br>
 * </blockquote>
 * @param {Date} date 
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype.onChange=function(date){};
/**
 * <b>Summary:</b><blockquote>
 *	 May be overridden to disable certain dates in the calendar e.g. `isDisabledDate=dojo.date.locale.isWeekend`<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @param {String} [locale] 
 * @returns {Boolean} -
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype.isDisabledDate=function(dateObject, locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets calendar's value to today's date<br>
 * </blockquote>
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype.goToToday=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 May be overridden to return CSS classes to associate with the date entry for the given dateObject,<br>
 *	 for example to indicate a holiday in specified locale.<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @param {String} [locale] 
 * @returns {String} -
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype.getClassForDate=function(dateObject, locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus the calendar by focusing one of the calendar cells<br>
 * </blockquote>
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype.focus=function(){};
/**
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Support set(&amp;quot;value&amp;quot;, ...)<br>
 * </blockquote>
 * Set the current date and update the UI.  If the date is disabled, the value will<br>
 * not change, but the display will change to the corresponding month.
 * @param {Date|Number} value Either a Date or the number of seconds since 1970.
 * @param {Boolean} priorityChange 
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype._setValueAttr=function(value, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 This just sets the content of node to the specified text.<br>
 *	 Can't do &amp;quot;node.innerHTML=text&amp;quot; because of an IE bug w/tables, see #3434.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} text 
 * @private
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype._setText=function(node, text){};
/**
 * <b>Summary:</b><blockquote>
 *	 If the calendar currently has focus, then focuses specified date,<br>
 *	 changing the currently displayed month/year if necessary.<br>
 *	 If the calendar doesn't have focus, updates currently<br>
 *	 displayed month/year, and sets the cell that will get focus.<br>
 * </blockquote>
 * @param {Date} date 
 * @param {Boolean} forceFocus If true, will focus() the cell even if calendar itself doesn't have focus
 * @private
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype._setCurrentFocusAttr=function(date, forceFocus){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fills in the calendar grid with each day (1-31)<br>
 * </blockquote>
 * @private
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype._populateGrid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for day clicks, selects the date if appropriate<br>
 * </blockquote>
 * @param {Event} evt 
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype._onDayClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Runs various tests on the value, checking that it's a valid date, rather<br>
 *	 than blank or NaN.<br>
 * </blockquote>
 * @param {Date} value 
 * @private
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype._isValidDate=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extension point so developers can subclass Calendar to<br>
 *	 support multiple (concurrently) selected dates<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @param {String} [locale] 
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype._isSelectedDate=function(dateObject, locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Support get('value')<br>
 * </blockquote>
 * @private
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates the drop down button that displays the current month and lets user pick a new one<br>
 * </blockquote>
 * @private
 * @memberOf dijit.CalendarLite
*/
dijit.CalendarLite.prototype._createMonthWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Displays name of current month padded to the width of the month<br>
 *	 w/the longest name, so that changing months doesn't change width.<br>
 *	 <br>
 *	 Create as new dijit.Calendar._MonthWidget({<br>
 *	 lang: ...,<br>
 *	 dateLocaleModule: ...<br>
 *	 })<br>
 * </blockquote>
*/
dijit.CalendarLite._MonthWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets to set CSS classes on the widget DOM nodes depending on hover/mouse press/focus<br>
 *	 state changes, and also higher-level state changes such becoming disabled or selected.<br>
 * </blockquote>
 * By mixing this class into your widget, and setting the this.baseClass attribute, it will automatically<br>
 * maintain CSS classes on the widget root node (this.domNode) depending on hover,<br>
 * active, focus, etc. state.   Ex: with a baseClass of dijitButton, it will apply the classes<br>
 * dijitButtonHovered and dijitButtonActive, as the user moves the mouse over the widget and clicks it.<br>
 * <br>
 * It also sets CSS like dijitButtonDisabled based on widget semantic state.<br>
 * <br>
 * By setting the cssStateNodes attribute, a widget can also track events on subnodes (like buttons<br>
 * within the widget).
 * @class
 * @private
 * @returns {dijit._CssStateMixin} new instance
*/
dijit._CssStateMixin=function(){};
/**
 * @namespace
*/
dijit._CssStateMixin.stateNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Track mouse/focus events on specified node and set CSS class on that node to indicate<br>
 *	 current state.   Usually not called directly, but via cssStateNodes attribute.<br>
 * </blockquote>
 * Given class=foo, will set the following CSS class on the node<br>
 * - fooActive: if the user is currently pressing down the mouse button while over the node<br>
 * - fooHover: if the user is hovering the mouse over the node, but not pressing down a button<br>
 * - fooFocus: if the node is focused<br>
 * <br>
 * Note that it won't set any classes if the widget is disabled.
 * @param {DomNode} node Should be a sub-node of the widget, not the top node (this.domNode), since the top node
 * is handled specially and automatically just by mixing in this class.
 * @param {String} clazz CSS class name (ex: dijitSliderUpArrow).
 * @private
 * @memberOf dijit._CssStateMixin
*/
dijit._CssStateMixin.prototype._trackMouseState=function(node, clazz){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the visual state of the widget by setting the css classes on this.domNode<br>
 *	 (or this.stateNode if defined) by combining this.baseClass with<br>
 *	 various suffixes that represent the current widget state(s).<br>
 * </blockquote>
 * In the case where a widget has multiple<br>
 * states, it sets the class based on all possible<br>
 * combinations.  For example, an invalid form widget that is being hovered<br>
 * will be "dijitInput dijitInputInvalid dijitInputHover dijitInputInvalidHover".<br>
 * <br>
 * The widget may have one or more of the following states, determined<br>
 * by this.state, this.checked, this.valid, and this.selected:<br>
 * - Error - ValidationTextBox sets this.state to "Error" if the current input value is invalid<br>
 * - Incomplete - ValidationTextBox sets this.state to "Incomplete" if the current input value is not finished yet<br>
 * - Checked - ex: a checkmark or a ToggleButton in a checked state, will have this.checked==true<br>
 * - Selected - ex: currently selected tab will have this.selected==true<br>
 * <br>
 * In addition, it may have one or more of the following states,<br>
 * based on this.disabled and flags set in _onMouse (this.active, this.hovering) and from focus manager (this.focused):<br>
 * - Disabled	- if the widget is disabled<br>
 * - Active		- if the mouse (or space/enter key?) is being pressed down<br>
 * - Focused		- if the widget has focus<br>
 * - Hover		- if the mouse is over the widget
 * @private
 * @memberOf dijit._CssStateMixin
*/
dijit._CssStateMixin.prototype._setStateClass=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets hovering and active properties depending on mouse state,<br>
 *	 which triggers _setStateClass() to set appropriate CSS classes for this.domNode.<br>
 * </blockquote>
 * @param {Event} event 
 * @private
 * @memberOf dijit._CssStateMixin
*/
dijit._CssStateMixin.prototype._cssMouseEvent=function(event){};
/**
 * @private
 * @memberOf dijit._CssStateMixin
*/
dijit._CssStateMixin.prototype._applyAttributes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for all Dijit widgets.<br>
 *	 <br>
 *	 Extends _WidgetBase, adding support for:<br>
 *	 - declaratively/programatically specifying widget initialization parameters like<br>
 *	 onMouseMove=&amp;quot;foo&amp;quot; that call foo when this.domNode gets a mousemove event<br>
 *	 - ondijitclick<br>
 *	 Support new data-dojo-attach-event=&amp;quot;ondijitclick: ...&amp;quot; that is triggered by a mouse click or a SPACE/ENTER keypress<br>
 *	 - focus related functions<br>
 *	 In particular, the onFocus()/onBlur() callbacks.   Driven internally by<br>
 *	 dijit/_base/focus.js.<br>
 *	 - deprecated methods<br>
 *	 - onShow(), onHide(), onClose()<br>
 *	 <br>
 *	 Also, by loading code in dijit/_base, turns on:<br>
 *	 - browser sniffing (putting browser id like .dj_ie on &amp;lt;html&amp;gt; node)<br>
 *	 - high contrast mode sniffing (add .dijit_a11y class to &amp;lt;body&amp;gt; if machine is in high contrast mode)<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._OnDijitClickMixin
 * @extends dijit._FocusMixin
 * @private
 * @param {mixed} params 
 * @returns {dijit._Widget} new instance
*/
dijit._Widget=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use set() instead.<br>
 * </blockquote>
 * @param {String} attr 
 * @param {anything} value 
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.setAttribute=function(attr, value){};
/**
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when this widget becomes the selected pane in a<br>
 *	 `dijit.layout.TabContainer`, `dijit.layout.StackContainer`,<br>
 *	 `dijit.layout.AccordionContainer`, etc.<br>
 *	 <br>
 *	 Also called to indicate display of a `dijit.Dialog`, `dijit.TooltipDialog`, or `dijit.TitlePane`.<br>
 * </blockquote>
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onShow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of when the mouse button is released.<br>
 * </blockquote>
 * @param {mouse} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onMouseUp=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of when the mouse moves onto nodes contained within this widget.<br>
 * </blockquote>
 * @param {mouse} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onMouseOver=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of when the mouse moves off of nodes contained within this widget.<br>
 * </blockquote>
 * @param {mouse} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onMouseOut=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of when the mouse moves over nodes contained within this widget.<br>
 * </blockquote>
 * @param {mouse} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onMouseMove=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of when the mouse moves off of this widget.<br>
 * </blockquote>
 * @param {mouse} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onMouseLeave=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of when the mouse moves onto this widget.<br>
 * </blockquote>
 * @param {mouse} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onMouseEnter=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of when the mouse button is pressed down.<br>
 * </blockquote>
 * @param {mouse} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onMouseDown=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of keys being released.<br>
 * </blockquote>
 * @param {key} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onKeyUp=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of printable keys being typed.<br>
 * </blockquote>
 * @param {key} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onKeyPress=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of keys being pressed down.<br>
 * </blockquote>
 * @param {key} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onKeyDown=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when another widget becomes the selected pane in a<br>
 *	 `dijit.layout.TabContainer`, `dijit.layout.StackContainer`,<br>
 *	 `dijit.layout.AccordionContainer`, etc.<br>
 *	 <br>
 *	 Also called to indicate hide of a `dijit.Dialog`, `dijit.TooltipDialog`, or `dijit.TitlePane`.<br>
 * </blockquote>
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onHide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of mouse double click events.<br>
 * </blockquote>
 * @param {mouse} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onDblClick=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when this widget is being displayed as a popup (ex: a Calendar popped<br>
 *	 up from a DateTextBox), and it is hidden.<br>
 *	 This is called from the dijit.popup code, and should not be called directly.<br>
 *	 <br>
 *	 Also used as a parameter for children of `dijit.layout.StackContainer` or subclasses.<br>
 *	 Callback if a user tries to close the child.   Child will be closed if this function returns true.<br>
 * </blockquote>
 * @returns {Boolean} -
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onClose=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of mouse click events.<br>
 * </blockquote>
 * @param {mouse} event Event
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.onClick=function(event){};
/**
 * @param {String} type 
 * @param {Function} func 
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.on=function(type, func){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns all the widgets contained by this, i.e., all widgets underneath this.containerNode.<br>
 *	 This method should generally be avoided as it returns widgets declared in templates, which are<br>
 *	 supposed to be internal/hidden, but it's left here for back-compat reasons.<br>
 * </blockquote>
 * @returns {dijit._Widget[]} -
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.getDescendants=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set or get properties on a widget instance.<br>
 * </blockquote>
 * This method is deprecated, use get() or set() directly.
 * @param {String|Object} name The property to get or set. If an object is passed here and not
 * a string, its keys are used as names of attributes to be set<br>
 * and the value of the object as values to set in the widget.
 * @param {Object} [value] Optional. If provided, attr() operates as a setter. If omitted,
 * the current value of the named property is returned.
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype.attr=function(name, value){};
/**
 * @param {mixed} val 
 * @private
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype._setFocusedAttr=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal method called when this widget is made visible.<br>
 *	 See `onShow` for details.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._Widget
*/
dijit._Widget.prototype._onShow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets that are instantiated from a template<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit._TemplatedMixin} new instance
*/
dijit._TemplatedMixin=function(){};
/**
 * @memberOf dijit._TemplatedMixin
*/
dijit._TemplatedMixin.prototype.destroyRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Construct the UI for this widget from a template, setting this.domNode.<br>
 * </blockquote>
 * @memberOf dijit._TemplatedMixin
*/
dijit._TemplatedMixin.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Does substitution of ${foo} type properties in template string<br>
 * </blockquote>
 * @param {mixed} tmpl 
 * @private
 * @memberOf dijit._TemplatedMixin
*/
dijit._TemplatedMixin.prototype._stringRepl=function(tmpl){};
/**
 * <b>Summary:</b><blockquote>
 *	 Relocate source contents to templated container node.<br>
 *	 this.containerNode must be able to receive children, or exceptions will be thrown.<br>
 * </blockquote>
 * @param {DomNode} source 
 * @memberOf dijit._TemplatedMixin
*/
dijit._TemplatedMixin.prototype._fillContent=function(source){};
/**
 * @private
 * @memberOf dijit._TemplatedMixin
*/
dijit._TemplatedMixin.prototype._beforeFillContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Iterate through the template and attach functions and nodes accordingly.<br>
 *	 Alternately, if rootNode is an array of widgets, then will process data-dojo-attach-point<br>
 *	 etc. for those widgets.<br>
 * </blockquote>
 * Map widget properties and functions to the handlers specified in<br>
 * the dom node and it's descendants. This function iterates over all<br>
 * nodes and looks for these properties:<br>
 * * dojoAttachPoint/data-dojo-attach-point<br>
 * * dojoAttachEvent/data-dojo-attach-event
 * @param {DomNode|Widget[]} rootNode the node to search for properties. All children will be searched.
 * @param {Function} getAttrFunc a function which will be used to obtain property for a given
 * DomNode/Widget
 * @private
 * @memberOf dijit._TemplatedMixin
*/
dijit._TemplatedMixin.prototype._attachTemplateNodes=function(rootNode, getAttrFunc){};
/**
 * @private
*/
dijit.form.__SelectOption=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin to provide functionality to allow a button that can be in two states (checked or not).<br>
 * </blockquote>
 * @private
*/
dijit.form._ToggleButtonMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin for textbox form input widgets<br>
 * </blockquote>
 * @private
*/
dijit.form._TextBoxMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for validation widgets with a spinner.<br>
 * </blockquote>
 * This class basically (conceptually) extends `dijit.form.ValidationTextBox`.<br>
 * It modifies the template to have up/down arrows, and provides related handling code.
 * @private
*/
dijit.form._Spinner=function(){};
/**
*/
dijit.form._SliderMoverMax=function(){};
/**
*/
dijit.form._SliderMover=function(){};
/**
*/
dijit.form._SliderBarMover=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An internally-used menu for dropdown that allows us a vertical scrollbar<br>
 * </blockquote>
*/
dijit.form._SelectMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to provide widget functionality for an HTML radio button<br>
 * </blockquote>
 * @private
*/
dijit.form._RadioButtonMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Mixin to handle mouse or touch events for a focus-less menu<br>
 *	 Abstract methods that must be defined externally:<br>
 *	 onClick: item was chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)<br>
 * </blockquote>
 * @private
*/
dijit.form._ListMouseMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus-less menu to handle UI events consistently<br>
 *	 Abstract methods that must be defined externally:<br>
 *	 onSelect: item is active (mousedown but not yet mouseup, or keyboard arrow selected but no Enter)<br>
 *	 onDeselect:  cancels onSelect<br>
 * </blockquote>
 * @private
*/
dijit.form._ListBase=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets corresponding to native HTML elements such as &amp;lt;checkbox&amp;gt; or &amp;lt;button&amp;gt;,<br>
 *	 which can be children of a &amp;lt;form&amp;gt; node or a `dijit.form.Form` widget.<br>
 * </blockquote>
 * Represents a single HTML element.<br>
 * All these widgets should have these attributes just like native HTML input elements.<br>
 * You can set them during widget construction or afterwards, via `dijit._Widget.attr`.<br>
 * <br>
 * They also share some common methods.
 * @private
*/
dijit.form._FormWidgetMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets corresponding to native HTML elements such as &amp;lt;checkbox&amp;gt; or &amp;lt;button&amp;gt;,<br>
 *	 which can be children of a &amp;lt;form&amp;gt; node or a `dijit.form.Form` widget.<br>
 * </blockquote>
 * Represents a single HTML element.<br>
 * All these widgets should have these attributes just like native HTML input elements.<br>
 * You can set them during widget construction or afterwards, via `dijit._Widget.attr`.<br>
 * <br>
 * They also share some common methods.
 * @private
*/
dijit.form._FormWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets corresponding to native HTML elements such as &amp;lt;input&amp;gt; or &amp;lt;select&amp;gt; that have user changeable values.<br>
 * </blockquote>
 * Each _FormValueWidget represents a single input value, and has a (possibly hidden) &lt;input&gt; element,<br>
 * to which it serializes it's input value, so that form submission (either normal submission or via FormBind?)<br>
 * works as expected.
 * @private
*/
dijit.form._FormValueWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets corresponding to native HTML elements such as &amp;lt;input&amp;gt; or &amp;lt;select&amp;gt; that have user changeable values.<br>
 * </blockquote>
 * Each _FormValueMixin represents a single input value, and has a (possibly hidden) &lt;input&gt; element,<br>
 * to which it serializes it's input value, so that form submission (either normal submission or via FormBind?)<br>
 * works as expected.
 * @private
*/
dijit.form._FormValueMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extends _FormValueWidget in order to provide &amp;quot;select-specific&amp;quot;<br>
 *	 values - i.e., those values that are unique to &amp;lt;select&amp;gt; elements.<br>
 *	 This also provides the mechanism for reading the elements from<br>
 *	 a store, if desired.<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @private
*/
dijit.form._FormSelectWidget=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for containers of form widgets (i.e. widgets that represent a single value<br>
 *	 and can be children of a &amp;lt;form&amp;gt; node or dijit.form.Form widget)<br>
 * </blockquote>
 * Can extract all the form widgets<br>
 * values and combine them into a single javascript object, or alternately<br>
 * take such an object and set the values for all the contained<br>
 * form widgets
 * @private
*/
dijit.form._FormMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for textarea widgets to add auto-expanding capability<br>
 * </blockquote>
 * @private
*/
dijit.form._ExpandingTextAreaMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for validating, serializable, range-bound date or time text box.<br>
 * </blockquote>
 * @param {Object} args 
 * @private
*/
dijit.form._DateTimeTextBox=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus-less menu for internal use in `dijit.form.ComboBox`<br>
 * </blockquote>
 * @private
*/
dijit.form._ComboBoxMenuMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus-less menu for internal use in `dijit.form.ComboBox`<br>
 *	 Abstract methods that must be defined externally:<br>
 *	 onChange: item was explicitly chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)<br>
 *	 onPage: next(1) or previous(-1) button pressed<br>
 * </blockquote>
 * @private
*/
dijit.form._ComboBoxMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to provide widget functionality corresponding to an HTML checkbox<br>
 * </blockquote>
 * User interacts with real html inputs.<br>
 * On onclick (which occurs by mouse click, space-bar, or<br>
 * using the arrow keys to switch the selected radio button),<br>
 * we update the state of the checkbox/radio.
 * @private
*/
dijit.form._CheckBoxMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin to add a thin standard API wrapper to a normal HTML button<br>
 * </blockquote>
 * A label should always be specified (through innerHTML) or the label attribute.<br>
 * Attach points:<br>
 * focusNode (required): this node receives focus<br>
 * valueNode (optional): this node's value gets submitted with FORM elements<br>
 * containerNode (optional): this node gets the innerHTML assignment for label
 * @private
 * @example
 * 	&lt;button data-dojo-type="dijit.form.Button" onClick="..."&gt;Hello world&lt;/button&gt;
 * @example
 * 	var button1 = new dijit.form.Button({label: "hello world", onClick: foo});
 * 	dojo.body().appendChild(button1.domNode);
*/
dijit.form._ButtonMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin that implements the base functionality for `dijit.form.ComboBox`/`dijit.form.FilteringSelect`<br>
 * </blockquote>
 * All widgets that mix in dijit.form._AutoCompleterMixin must extend `dijit.form._FormValueWidget`.
 * @private
*/
dijit.form._AutoCompleterMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A form widget that allows one to select a value with a vertically draggable handle<br>
 * </blockquote>
*/
dijit.form.VerticalSlider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Labels for the `dijit.form.VerticalSlider`<br>
 * </blockquote>
*/
dijit.form.VerticalRuleLabels=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hash marks for the `dijit.form.VerticalSlider`<br>
 * </blockquote>
*/
dijit.form.VerticalRule=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for textbox widgets with the ability to validate content of various types and provide user feedback.<br>
 * </blockquote>
*/
dijit.form.ValidationTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A templated button widget that can be in two states (checked or not).<br>
 *	 Can be base class for things like tabs or checkbox or radio buttons<br>
 * </blockquote>
*/
dijit.form.ToggleButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound time text box with a drop down time picker<br>
 * </blockquote>
*/
dijit.form.TimeTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A textarea widget that adjusts it's height according to the amount of data.<br>
 * </blockquote>
 * A textarea that dynamically expands/contracts (changing it's height) as<br>
 * the user types, to display all the text without requiring a scroll bar.<br>
 * <br>
 * Takes nearly all the parameters (name, value, etc.) that a vanilla textarea takes.<br>
 * Rows is not supported since this widget adjusts the height.
 * @example
 * 	&lt;textarea data-dojo-type="dijit.form.TextArea"&gt;...&lt;/textarea&gt;
*/
dijit.form.Textarea=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A base class for textbox form inputs<br>
 * </blockquote>
*/
dijit.form.TextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple textarea that degrades, and responds to<br>
 *	 minimal LayoutContainer usage, and works with dijit.form.Form.<br>
 *	 Doesn't automatically size according to input, like Textarea.<br>
 * </blockquote>
 * @example
 * 	&lt;textarea data-dojo-type="dijit.form.SimpleTextarea" name="foo" value="bar" rows=30 cols=40&gt;&lt;/textarea&gt;
 * @example
 * 	new dijit.form.SimpleTextarea({ rows:20, cols:30 }, "foo");
*/
dijit.form.SimpleTextarea=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a &amp;quot;styleable&amp;quot; select box - it is basically a DropDownButton which<br>
 *	 can take a &amp;lt;select&amp;gt; as its input.<br>
 * </blockquote>
*/
dijit.form.Select=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for textbox form widgets which defines a range of valid values.<br>
 * </blockquote>
*/
dijit.form.RangeBoundTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Same as an HTML radio, but with fancy styling.<br>
 * </blockquote>
*/
dijit.form.RadioButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin for all number textboxes<br>
 * </blockquote>
*/
dijit.form.NumberTextBoxMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A TextBox for entering numbers, with formatting and range checking<br>
 * </blockquote>
 * NumberTextBox is a textbox for entering and displaying numbers, supporting<br>
 * the following main features:<br>
 * <br>
 * 1. Enforce minimum/maximum allowed values (as well as enforcing that the user types<br>
 * a number rather than a random string)<br>
 * 2. NLS support (altering roles of comma and dot as "thousands-separator" and "decimal-point"<br>
 * depending on locale).<br>
 * 3. Separate modes for editing the value and displaying it, specifically that<br>
 * the thousands separator character (typically comma) disappears when editing<br>
 * but reappears after the field is blurred.<br>
 * 4. Formatting and constraints regarding the number of places (digits after the decimal point)<br>
 * allowed on input, and number of places displayed when blurred (see `constraints` parameter).<br>
*/
dijit.form.NumberTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extends NumberTextBox to add up/down arrows and pageup/pagedown for incremental change to the value<br>
 * </blockquote>
 * A `dijit.form.NumberTextBox` extension to provide keyboard accessible value selection<br>
 * as well as icons for spinning direction. When using the keyboard, the typematic rules<br>
 * apply, meaning holding the key will gradually increase or decrease the value and<br>
 * accelerate.
 * @example
 *  new dijit.form.NumberSpinner({ constraints:{ max:300, min:100 }}, "someInput");
*/
dijit.form.NumberSpinner=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Widget version of a &amp;lt;select multiple=true&amp;gt; element,<br>
 *	 for selecting multiple options.<br>
 * </blockquote>
*/
dijit.form.MultiSelect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A dijit.form.ValidationTextBox subclass which provides a base class for widgets that have<br>
 *	 a visible formatted display value, and a serializable<br>
 *	 value in a hidden input field which is actually sent to the server.<br>
 * </blockquote>
 * The visible display may<br>
 * be locale-dependent and interactive.  The value sent to the server is stored in a hidden<br>
 * input field which uses the `name` attribute declared by the original widget.  That value sent<br>
 * to the server is defined by the dijit.form.MappedTextBox.serialize method and is typically<br>
 * locale-neutral.<br>
*/
dijit.form.MappedTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A form widget that allows one to select a value with a horizontally draggable handle<br>
 * </blockquote>
*/
dijit.form.HorizontalSlider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Labels for `dijit.form.HorizontalSlider`<br>
 * </blockquote>
*/
dijit.form.HorizontalRuleLabels=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hash marks for `dijit.form.HorizontalSlider`<br>
 * </blockquote>
*/
dijit.form.HorizontalRule=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Widget corresponding to HTML form tag, for validation and serialization<br>
 * </blockquote>
 * @example
 * 	&lt;form data-dojo-type="dijit.form.Form" id="myForm"&gt;
 * 		Name: &lt;input type="text" name="name" /&gt;
 * 	&lt;/form&gt;
 * 	myObj = {name: "John Doe"};
 * 	dijit.byId('myForm').set('value', myObj);
 * 
 * 	myObj=dijit.byId('myForm').get('value');
*/
dijit.form.Form=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An enhanced version of the HTML SELECT tag, populated dynamically<br>
 * </blockquote>
 * An enhanced version of the HTML SELECT tag, populated dynamically. It works<br>
 * very nicely with very large data sets because it can load and page data as needed.<br>
 * It also resembles ComboBox, but does not allow values outside of the provided ones.<br>
 * If OPTION tags are used as the data provider via markup, then the<br>
 * OPTION tag's child text node is used as the displayed value when selected<br>
 * while the OPTION tag's value attribute is used as the widget value on form submit.<br>
 * To set the default value when using OPTION tags, specify the selected<br>
 * attribute on 1 of the child OPTION tags.<br>
 * <br>
 * Similar features:<br>
 * - There is a drop down list of possible values.<br>
 * - You can only enter a value from the drop down list.  (You can't<br>
 * enter an arbitrary value.)<br>
 * - The value submitted with the form is the hidden value (ex: CA),<br>
 * not the displayed value a.k.a. label (ex: California)<br>
 * <br>
 * Enhancements over plain HTML version:<br>
 * - If you type in some text then it will filter down the list of<br>
 * possible values in the drop down list.<br>
 * - List can be specified either as a static list or via a javascript<br>
 * function (that can get the list from a server)<br>
*/
dijit.form.FilteringSelect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A button with a drop down<br>
 * </blockquote>
 * @example
 * 	&lt;button data-dojo-type="dijit.form.DropDownButton"&gt;
 * 		Hello world
 * 		&lt;div data-dojo-type="dijit.Menu"&gt;...&lt;/div&gt;
 * 	&lt;/button&gt;
 * @example
 * 	var button1 = new dijit.form.DropDownButton({ label: "hi", dropDown: new dijit.Menu(...) });
 * 	win.body().appendChild(button1);
*/
dijit.form.DropDownButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound date text box with a drop down calendar<br>
 *	 <br>
 *	 Example:<br>
 *	 	new dijit.form.DateTextBox({value: new Date(2009, 0, 20)})<br>
 *	 <br>
 *	 Example:<br>
 *	 	&amp;lt;input data-dojo-type='dijit.form.DateTextBox' value='2009-01-20'&amp;gt;<br>
 * </blockquote>
*/
dijit.form.DateTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Inefficient but small data store specialized for inlined data via OPTION tags<br>
 * </blockquote>
 * Provides a store for inlined data like:<br>
 * <br>
 * 	&lt;datalist&gt;<br>
 * 		&lt;option value="AL"&gt;Alabama&lt;/option&gt;<br>
 * 		...
 * @param {Object} [params] 
 * @param {DomNode|String} srcNodeRef 
*/
dijit.form.DataList=function(params, srcNodeRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating currency textbox<br>
 * </blockquote>
 * CurrencyTextBox is similar to `dijit.form.NumberTextBox` but has a few<br>
 * extra features related to currency:<br>
 * <br>
 * 1. After specifying the currency type (american dollars, euros, etc.) it automatically<br>
 * sets parse/format options such as how many decimal places to show.<br>
 * 2. The currency mark (dollar sign, euro mark, etc.) is displayed when the field is blurred<br>
 * but erased during editing, so that the user can just enter a plain number.<br>
*/
dijit.form.CurrencyTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A combination button and drop-down button.<br>
 *	 Users can click one side to &amp;quot;press&amp;quot; the button, or click an arrow<br>
 *	 icon to display the drop down.<br>
 * </blockquote>
 * @example
 * 	&lt;button data-dojo-type="dijit.form.ComboButton" onClick="..."&gt;
 * 		&lt;span&gt;Hello world&lt;/span&gt;
 * 		&lt;div data-dojo-type="dijit.Menu"&gt;...&lt;/div&gt;
 * 	&lt;/button&gt;
 * @example
 * 	var button1 = new dijit.form.ComboButton({label: "hello world", onClick: foo, dropDown: "myMenu"});
 * 	dojo.body().appendChild(button1.domNode);
*/
dijit.form.ComboButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides main functionality of ComboBox widget<br>
 * </blockquote>
*/
dijit.form.ComboBoxMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Auto-completing text box<br>
 * </blockquote>
 * The drop down box's values are populated from an class called<br>
 * a data provider, which returns a list of values based on the characters<br>
 * that the user has typed into the input box.<br>
 * If OPTION tags are used as the data provider via markup,<br>
 * then the OPTION tag's child text node is used as the widget value<br>
 * when selected.  The OPTION tag's value attribute is ignored.<br>
 * To set the default value when using OPTION tags, specify the selected<br>
 * attribute on 1 of the child OPTION tags.<br>
 * <br>
 * Some of the options to the ComboBox are actually arguments to the data<br>
 * provider.<br>
*/
dijit.form.ComboBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Same as an HTML checkbox, but with fancy styling.<br>
 * </blockquote>
 * User interacts with real html inputs.<br>
 * On onclick (which occurs by mouse click, space-bar, or<br>
 * using the arrow keys to switch the selected radio button),<br>
 * we update the state of the checkbox/radio.<br>
 * <br>
 * There are two modes:<br>
 * 1. High contrast mode<br>
 * 2. Normal mode<br>
 * <br>
 * In case 1, the regular html inputs are shown and used by the user.<br>
 * In case 2, the regular html inputs are invisible but still used by<br>
 * the user. They are turned quasi-invisible and overlay the background-image.<br>
*/
dijit.form.CheckBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Basically the same thing as a normal HTML button, but with special styling.<br>
 * </blockquote>
 * Buttons can display a label, an icon, or both.<br>
 * A label should always be specified (through innerHTML) or the label<br>
 * attribute.  It can be hidden via showLabel=false.
 * @example
 * 	&lt;button data-dojo-type="dijit.form.Button" onClick="..."&gt;Hello world&lt;/button&gt;
 * @example
 * 	var button1 = new dijit.form.Button({label: "hello world", onClick: foo});
 * 	dojo.body().appendChild(button1.domNode);
*/
dijit.form.Button=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A button with a drop down<br>
 * </blockquote>
 * @class
 * @extends dijit.form.Button
 * @extends dijit._Container
 * @extends dijit._HasDropDown
 * @returns {dijit.form.DropDownButton} new instance
 * @example
 * 	&lt;button data-dojo-type="dijit.form.DropDownButton"&gt;
 * 		Hello world
 * 		&lt;div data-dojo-type="dijit.Menu"&gt;...&lt;/div&gt;
 * 	&lt;/button&gt;
 * @example
 * 	var button1 = new dijit.form.DropDownButton({ label: "hi", dropDown: new dijit.Menu(...) });
 * 	win.body().appendChild(button1);
*/
dijit.form.DropDownButton=function(){};
/**
 * @memberOf dijit.form.DropDownButton
*/
dijit.form.DropDownButton.prototype.startup=function(){};
/**
 * @param {Function} callback 
 * @memberOf dijit.form.DropDownButton
*/
dijit.form.DropDownButton.prototype.loadDropDown=function(callback){};
/**
 * @memberOf dijit.form.DropDownButton
*/
dijit.form.DropDownButton.prototype.isLoaded=function(){};
/**
 * @memberOf dijit.form.DropDownButton
*/
dijit.form.DropDownButton.prototype.isFocusable=function(){};
/**
 * @private
 * @memberOf dijit.form.DropDownButton
*/
dijit.form.DropDownButton.prototype._fillContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Displays name of current month padded to the width of the month<br>
 *	 w/the longest name, so that changing months doesn't change width.<br>
 *	 <br>
 *	 Create as new dijit.Calendar._MonthWidget({<br>
 *	 lang: ...,<br>
 *	 dateLocaleModule: ...<br>
 *	 })<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @returns {dijit.CalendarLite._MonthWidget} new instance
*/
dijit.CalendarLite._MonthWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the current month to display as a label<br>
 * </blockquote>
 * @param {mixed} month 
 * @private
 * @memberOf dijit.CalendarLite._MonthWidget
*/
dijit.CalendarLite._MonthWidget.prototype._setMonthAttr=function(month){};
/**
 * <b>Summary:</b><blockquote>
 *	 A checkbox-like menu item for toggling on and off<br>
 * </blockquote>
 * @class
 * @extends dijit.MenuItem
 * @returns {dijit.CheckedMenuItem} new instance
*/
dijit.CheckedMenuItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 User defined function to handle check/uncheck events<br>
 * </blockquote>
 * @param {Boolean} checked 
 * @memberOf dijit.CheckedMenuItem
*/
dijit.CheckedMenuItem.prototype.onChange=function(checked){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so attr('checked', bool) works.<br>
 *	 Sets the class and state for the check box.<br>
 * </blockquote>
 * @param {Boolean} checked 
 * @private
 * @memberOf dijit.CheckedMenuItem
*/
dijit.CheckedMenuItem.prototype._setCheckedAttr=function(checked){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clicking this item just toggles its state<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.CheckedMenuItem
*/
dijit.CheckedMenuItem.prototype._onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A line item in a Menu Widget<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._Contained
 * @extends dijit._CssStateMixin
 * @returns {dijit.MenuItem} new instance
*/
dijit.MenuItem=function(){};
/**
 * @namespace
 * @private
*/
dijit.MenuItem._setLabelAttr={};
/**
 * @namespace
 * @private
*/
dijit.MenuItem._setIconClassAttr={};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   Use set('label', ...) instead.<br>
 * </blockquote>
 * @param {String} content 
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype.setLabel=function(content){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   Use set('disabled', bool) instead.<br>
 * </blockquote>
 * @param {Boolean} disabled 
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype.setDisabled=function(disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 User defined function to handle clicks<br>
 * </blockquote>
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype.onClick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus on this MenuItem<br>
 * </blockquote>
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype.focus=function(){};
/**
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Indicate that this node is the currently selected one<br>
 * </blockquote>
 * @param {mixed} selected 
 * @private
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype._setSelected=function(selected){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook for attr('disabled', ...) to work.<br>
 *	 Enable or disable this menu item.<br>
 * </blockquote>
 * @param {Boolean} value 
 * @private
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype._setDisabledAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook for attr('accelKey', ...) to work.<br>
 *	 Set accelKey on this menu item.<br>
 * </blockquote>
 * @param {String} value 
 * @private
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype._setAccelKeyAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler when mouse is moved off of menu item,<br>
 *	 possibly to a child menu, or maybe to a sibling<br>
 *	 menuitem or somewhere else entirely.<br>
 * </blockquote>
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype._onUnhover=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler when mouse is moved onto menu item<br>
 * </blockquote>
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype._onHover=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is called by the focus manager when focus<br>
 *	 goes to this MenuItem or a child menu.<br>
 * </blockquote>
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype._onFocus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal handler for click events on MenuItem.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @private
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype._onClick=function(evt){};
/**
 * @param {DomNode} source 
 * @private
 * @memberOf dijit.MenuItem
*/
dijit.MenuItem.prototype._fillContent=function(source){};
/**
 * <b>Summary:</b><blockquote>
 *	 A keyboard accessible color-picking widget<br>
 * </blockquote>
 * Grid showing various colors, so the user can pick a certain color.<br>
 * Can be used standalone, or as a popup.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._PaletteMixin
 * @returns {dijit.ColorPalette} new instance
 * @example
 * 	&lt;div data-dojo-type="dijit.ColorPalette"&gt;&lt;/div&gt;
 * @example
 * 	var picker = new dijit.ColorPalette({ },srcNode);
 * 	picker.startup();
*/
dijit.ColorPalette=function(){};
/**
 * @memberOf dijit.ColorPalette
*/
dijit.ColorPalette._palettes=null;
/**
 * @memberOf dijit.ColorPalette
*/
dijit.ColorPalette.prototype.buildRendering=function(){};
/**
 * @param {mixed} value 
 * @param {mixed} row 
 * @param {mixed} col 
 * @private
 * @memberOf dijit.ColorPalette
*/
dijit.ColorPalette.prototype._dyeFactory=function(value, row, col){};
/**
 * <b>Summary:</b><blockquote>
 *	 Object associated with each cell in a ColorPalette palette.<br>
 *	 Implements dijit.Dye.<br>
 * </blockquote>
 * @class
 * @param {String} alias 
 * @param {Number} row 
 * @param {Number} col 
 * @returns {dijit._Color} new instance
*/
dijit._Color=function(alias, row, col){};
/**
 * @memberOf dijit._Color
*/
dijit._Color._imagePaths=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Note that although dijit._Color is initialized with a value like &amp;quot;white&amp;quot; getValue() always<br>
 *	 returns a hex value<br>
 * </blockquote>
 * @memberOf dijit._Color
*/
dijit._Color.prototype.getValue=function(){};
/**
 * @param {DOMNode} cell 
 * @param {String} blankGif 
 * @memberOf dijit._Color
*/
dijit._Color.prototype.fillCell=function(cell, blankGif){};
/**
 * <b>Summary:</b><blockquote>
 *	 String<br>
 *	 Localized summary for the palette table<br>
 * </blockquote>
 * A mixin for a grid showing various entities, so the user can pick a certain entity.
 * @class
 * @extends dijit._CssStateMixin
 * @private
 * @returns {dijit._PaletteMixin} new instance
*/
dijit._PaletteMixin=function(){};
/**
 * @memberOf dijit._PaletteMixin
*/
dijit._PaletteMixin.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when a cell is selected.<br>
 * </blockquote>
 * @param {String} value Value corresponding to cell.
 * @memberOf dijit._PaletteMixin
*/
dijit._PaletteMixin.prototype.onChange=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus this widget.  Puts focus on the most recently focused cell.<br>
 * </blockquote>
 * @memberOf dijit._PaletteMixin
*/
dijit._PaletteMixin.prototype.focus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This selects a cell. It triggers the onChange event.<br>
 * </blockquote>
 * @param {String} value value of the cell to select
 * @param {Optional} priorityChange parameter used to tell the select whether or not to fire
 * onChange event.
 * @memberOf dijit._PaletteMixin
*/
dijit._PaletteMixin.prototype._setValueAttr=function(value, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets which node is the focused cell.<br>
 * </blockquote>
 * At any point in time there's exactly one<br>
 * cell with tabIndex != -1.   If focus is inside the palette then<br>
 * focus is on that cell.<br>
 * <br>
 * After calling this method, arrow key handlers and mouse click handlers<br>
 * should focus the cell in a setTimeout().
 * @param {DomNode} node 
 * @memberOf dijit._PaletteMixin
*/
dijit._PaletteMixin.prototype._setCurrent=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subclass must call _preparePalette() from postCreate(), passing in the tooltip<br>
 *	 for each cell<br>
 * </blockquote>
 * @param {String[][]} choices id's for each cell of the palette, used to create Dye JS object for each cell
 * @param {String[]} titles Localized tooltip for each cell
 * @private
 * @memberOf dijit._PaletteMixin
*/
dijit._PaletteMixin.prototype._preparePalette=function(choices, titles){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for click, enter key &amp;amp; space key. Selects the cell.<br>
 * </blockquote>
 * @param {Event} evt The event.
 * @private
 * @memberOf dijit._PaletteMixin
*/
dijit._PaletteMixin.prototype._onCellClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is the callback for typematic.<br>
 *	 It changes the focus and the highlighed cell.<br>
 * </blockquote>
 * @param {How} increment much the key is navigated.
 * @param {How} typeCount many times typematic has fired.
 * @private
 * @memberOf dijit._PaletteMixin
*/
dijit._PaletteMixin.prototype._navigateByKey=function(increment, typeCount){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get JS object for given cell DOMNode<br>
 * </blockquote>
 * @param {DomNode} cell 
 * @private
 * @memberOf dijit._PaletteMixin
*/
dijit._PaletteMixin.prototype._getDye=function(cell){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return instance of dijit.Dye for specified cell of palette<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} row 
 * @param {mixed} col 
 * @private
 * @memberOf dijit._PaletteMixin
*/
dijit._PaletteMixin.prototype._dyeFactory=function(value, row, col){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets that are children of a container widget<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit._Contained} new instance
 * @example
 *  	// make a basic custom widget that knows about it's parents
 * 	declare("my.customClass",[dijit._Widget,dijit._Contained],{});
*/
dijit._Contained=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns null if this is the first child of the parent,<br>
 *	 otherwise returns the next element sibling to the &amp;quot;left&amp;quot;.<br>
 * </blockquote>
 * @returns {dijit._Widget} -
 * @memberOf dijit._Contained
*/
dijit._Contained.prototype.getPreviousSibling=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns null if this is the last child of the parent,<br>
 *	 otherwise returns the next element sibling to the &amp;quot;right&amp;quot;.<br>
 * </blockquote>
 * @returns {dijit._Widget} -
 * @memberOf dijit._Contained
*/
dijit._Contained.prototype.getNextSibling=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the index of this widget within its container parent.<br>
 *	 It returns -1 if the parent does not exist, or if the parent<br>
 *	 is not a dijit._Container<br>
 * </blockquote>
 * @returns {int} -
 * @memberOf dijit._Contained
*/
dijit._Contained.prototype.getIndexInParent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns next or previous sibling<br>
 * </blockquote>
 * @param {String} which Either &quot;next&quot; or &quot;previous&quot;
 * @private
 * @returns {dijit._Widget} -
 * @memberOf dijit._Contained
*/
dijit._Contained.prototype._getSibling=function(which){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets that contain a set of widget children.<br>
 * </blockquote>
 * Use this mixin for widgets that needs to know about and<br>
 * keep track of their widget children. Suitable for widgets like BorderContainer<br>
 * and TabContainer which contain (only) a set of child widgets.<br>
 * <br>
 * It's not suitable for widgets like ContentPane<br>
 * which contains mixed HTML (plain DOM nodes in addition to widgets),<br>
 * and where contained widgets are not necessarily directly below<br>
 * this.containerNode.   In that case calls like addChild(node, position)<br>
 * wouldn't make sense.
 * @class
 * @private
 * @returns {dijit._Container} new instance
*/
dijit._Container=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the passed widget instance from this widget but does<br>
 *	 not destroy it.  You can also pass in an integer indicating<br>
 *	 the index within the container to remove<br>
 * </blockquote>
 * @param {Widget|int} widget 
 * @memberOf dijit._Container
*/
dijit._Container.prototype.removeChild=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if widget has children, i.e. if this.containerNode contains something.<br>
 * </blockquote>
 * @returns {Boolean} -
 * @memberOf dijit._Container
*/
dijit._Container.prototype.hasChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the index of the child in this container or -1 if not found<br>
 * </blockquote>
 * @param {dijit._Widget} child 
 * @returns {int} -
 * @memberOf dijit._Container
*/
dijit._Container.prototype.getIndexOfChild=function(child){};
/**
 * @memberOf dijit._Container
*/
dijit._Container.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes the given widget a child of this widget.<br>
 * </blockquote>
 * Inserts specified child widget's dom node as a child of this widget's<br>
 * container node, and possibly does other processing (such as layout).
 * @param {dijit._Widget} widget 
 * @param {int} [insertIndex] 
 * @memberOf dijit._Container
*/
dijit._Container.prototype.addChild=function(widget, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the next or previous widget sibling of child<br>
 * </blockquote>
 * @param {dijit._Widget} child 
 * @param {int} dir if 1, get the next sibling
 * if -1, get the previous sibling
 * @private
 * @returns {dijit._Widget} -
 * @memberOf dijit._Container
*/
dijit._Container.prototype._getSiblingOfChild=function(child, dir){};
/**
 * <b>Summary:</b><blockquote>
 *	 The Declaration widget allows a developer to declare new widget<br>
 *	 classes directly from a snippet of markup.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @returns {dijit.Declaration} new instance
*/
dijit.Declaration=function(){};
/**
 * @namespace
*/
dijit.Declaration.defaults={};
/**
 * @memberOf dijit.Declaration
*/
dijit.Declaration.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to supplement _TemplatedMixin when template contains widgets<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit._WidgetsInTemplateMixin} new instance
*/
dijit._WidgetsInTemplateMixin=function(){};
/**
 * @memberOf dijit._WidgetsInTemplateMixin
*/
dijit._WidgetsInTemplateMixin.prototype.startup=function(){};
/**
 * @private
 * @memberOf dijit._WidgetsInTemplateMixin
*/
dijit._WidgetsInTemplateMixin.prototype._beforeFillContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A modal dialog Widget<br>
 * </blockquote>
 * Pops up a modal dialog window, blocking access to the screen<br>
 * and also graying out the screen Dialog is extended from<br>
 * ContentPane so it supports all the same parameters (href, etc.)
 * @class
 * @extends dijit._TemplatedMixin
 * @extends dijit.form._FormMixin
 * @extends dijit._DialogMixin
 * @extends dijit._CssStateMixin
 * @returns {dijit._DialogBase} new instance
 * @example
 * 	&lt;div data-dojo-type="dijit.Dialog" data-dojo-props="href: 'test.html'"&gt;&lt;/div&gt;
 * @example
 * 	var foo = new dijit.Dialog({ title: "test dialog", content: "test content" };
 * 	dojo.body().appendChild(foo.domNode);
 * 	foo.startup();
*/
dijit._DialogBase=function(){};
/**
 * @namespace
*/
dijit._DialogBase.cssStateNodes={};
/**
 * <b>Summary:</b><blockquote>
 *	 Display the dialog<br>
 * </blockquote>
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype.show=function(){};
/**
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype.postMixInProperties=function(){};
/**
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when data has been loaded from an href.<br>
 *	 Unlike most other callbacks, this function can be connected to (via `dojo.connect`)<br>
 *	 but should *not* be overridden.<br>
 * </blockquote>
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype.onLoad=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Position the Dialog and the underlay<br>
 * </blockquote>
 * @private
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype.layout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide the dialog<br>
 * </blockquote>
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype.hide=function(){};
/**
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If necessary, shrink dialog contents so dialog fits in viewport<br>
 * </blockquote>
 * @private
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype._size=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stuff we need to do before showing the Dialog for the first<br>
 *	 time (but we defer it until right beforehand, for<br>
 *	 performance reasons).<br>
 * </blockquote>
 * @private
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype._setup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Position modal dialog in the viewport. If no relative offset<br>
 *	 in the viewport has been determined (by dragging, for instance),<br>
 *	 center the node. Otherwise, use the Dialog's stored relative offset,<br>
 *	 and position the node to top: left: values based on the viewport.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype._position=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles the keyboard events for accessibility reasons<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @returns {just let it go} -
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype._onKey=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called after dragging the Dialog. Saves the position of the dialog in the viewport,<br>
 *	 and also adjust position to be fully within the viewport, so user doesn't lose access to handle<br>
 * </blockquote>
 * @private
 * @memberOf dijit._DialogBase
*/
dijit._DialogBase.prototype._endDrag=function(){};
/**
 * @class
 * @returns {dijit.Dialog} new instance
*/
dijit.Dialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for containers of form widgets (i.e. widgets that represent a single value<br>
 *	 and can be children of a &amp;lt;form&amp;gt; node or dijit.form.Form widget)<br>
 * </blockquote>
 * Can extract all the form widgets<br>
 * values and combine them into a single javascript object, or alternately<br>
 * take such an object and set the values for all the contained<br>
 * form widgets
 * @class
 * @private
 * @returns {dijit.form._FormMixin} new instance
*/
dijit.form._FormMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns if the form is valid - same as isValid - but<br>
 *	 provides a few additional (ui-specific) features.<br>
 *	 1 - it will highlight any sub-widgets that are not<br>
 *	 valid<br>
 *	 2 - it will call focus() on the first invalid<br>
 *	 sub-widget<br>
 * </blockquote>
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype.validate=function(){};
/**
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype.startup=function(){};
/**
 * @param {mixed} val 
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype.setValues=function(val){};
/**
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to connect to if you want to do something<br>
 *	 (like disable/enable a submit button) when the valid<br>
 *	 state changes on the form as a whole.<br>
 *	 <br>
 *	 Deprecated.  Will be removed in 2.0.  Use watch(&amp;quot;state&amp;quot;, ...) instead.<br>
 * </blockquote>
 * @param {Boolean} isValid 
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype.onValidStateChange=function(isValid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if all of the widgets are valid.<br>
 *	 Deprecated, will be removed in 2.0.  Use get(&amp;quot;state&amp;quot;) instead.<br>
 * </blockquote>
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype.isValid=function(){};
/**
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype.getValues=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove connections to monitor changes to children's value, error state, and disabled state,<br>
 *	 in order to update Form.value and Form.state.<br>
 * </blockquote>
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype.disconnectChildren=function(){};
/**
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Setup connections to monitor changes to children's value, error state, and disabled state,<br>
 *	 in order to update Form.value and Form.state.<br>
 *	 <br>
 *	 You can call this function directly, ex. in the event that you<br>
 *	 programmatically add a widget to the form *after* the form has been<br>
 *	 initialized.<br>
 * </blockquote>
 * @param {Boolean} inStartup 
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype.connectChildren=function(inStartup){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fill in form values from according to an Object (in the format returned by get('value'))<br>
 * </blockquote>
 * @param {Object} obj 
 * @private
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype._setValueAttr=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns Object representing form values.   See description of `value` for details.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Compute what this.state should be based on state of children<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype._getState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns all form widget descendants, searching through non-form child widgets like BorderContainer<br>
 * </blockquote>
 * @param {dijit._WidgetBase[]} [children] 
 * @private
 * @memberOf dijit.form._FormMixin
*/
dijit.form._FormMixin.prototype._getDescendantFormWidgets=function(children){};
/**
 * <b>Summary:</b><blockquote>
 *	 This provides functions useful to Dialog and TooltipDialog<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit._DialogMixin} new instance
*/
dijit._DialogMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when user has pressed the dialog's OK button, to notify container.<br>
 * </blockquote>
 * Developer shouldn't override or connect to this method;<br>
 * it's a private communication device between the TooltipDialog<br>
 * and the thing that opened it (ex: `dijit.form.DropDownButton`)<br>
 * type:<br>
 * protected
 * @memberOf dijit._DialogMixin
*/
dijit._DialogMixin.prototype.onExecute=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when user has pressed the Dialog's cancel button, to notify container.<br>
 * </blockquote>
 * Developer shouldn't override or connect to this method;<br>
 * it's a private communication device between the TooltipDialog<br>
 * and the thing that opened it (ex: `dijit.form.DropDownButton`)<br>
 * type:<br>
 * protected
 * @memberOf dijit._DialogMixin
*/
dijit._DialogMixin.prototype.onCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when the user hits the submit button.<br>
 *	 Override this method to handle Dialog execution.<br>
 * </blockquote>
 * After the user has pressed the submit button, the Dialog<br>
 * first calls onExecute() to notify the container to hide the<br>
 * dialog and restore focus to wherever it used to be.<br>
 * <br>
 * *Then* this method is called.<br>
 * type:<br>
 * callback
 * @param {Object} formContents 
 * @memberOf dijit._DialogMixin
*/
dijit._DialogMixin.prototype.execute=function(formContents){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when user hits submit button<br>
 *	 type:<br>
 *	 protected<br>
 * </blockquote>
 * @private
 * @memberOf dijit._DialogMixin
*/
dijit._DialogMixin.prototype._onSubmit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Finds focusable items in dialog,<br>
 *	 and sets this._firstFocusItem and this._lastFocusItem<br>
 * </blockquote>
 * @memberOf dijit._DialogMixin
*/
dijit._DialogMixin.prototype._getFocusItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The component that blocks the screen behind a `dijit.Dialog`<br>
 * </blockquote>
 * A component used to block input behind a `dijit.Dialog`. Only a single<br>
 * instance of this widget is created by `dijit.Dialog`, and saved as<br>
 * a reference to be shared between all Dialogs as `dijit._underlay`<br>
 * <br>
 * The underlay itself can be styled based on and id:<br>
 * 	#myDialog_underlay { background-color:red; }<br>
 * <br>
 * In the case of `dijit.Dialog`, this id is based on the id of the Dialog,<br>
 * suffixed with _underlay.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dijit.DialogUnderlay} new instance
*/
dijit.DialogUnderlay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the dialog underlay<br>
 * </blockquote>
 * @memberOf dijit.DialogUnderlay
*/
dijit.DialogUnderlay.prototype.show=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Append the underlay to the body<br>
 * </blockquote>
 * @memberOf dijit.DialogUnderlay
*/
dijit.DialogUnderlay.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the background to the size of the viewport<br>
 * </blockquote>
 * Sets the background to the size of the viewport (rather than the size<br>
 * of the document) since we need to cover the whole browser window, even<br>
 * if the document is only a few lines long.
 * @private
 * @memberOf dijit.DialogUnderlay
*/
dijit.DialogUnderlay.prototype.layout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hides the dialog underlay<br>
 * </blockquote>
 * @memberOf dijit.DialogUnderlay
*/
dijit.DialogUnderlay.prototype.hide=function(){};
/**
 * @param {mixed} id 
 * @private
 * @memberOf dijit.DialogUnderlay
*/
dijit.DialogUnderlay.prototype._setDialogIdAttr=function(id){};
/**
 * @param {mixed} clazz 
 * @private
 * @memberOf dijit.DialogUnderlay
*/
dijit.DialogUnderlay.prototype._setClassAttr=function(clazz){};
/**
 * @namespace
*/
dijit.DialogUnderlay.node={};
/**
 * @namespace
*/
dijit.DialogUnderlay.domNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 A menu, without features for context menu (Meaning, drop down menu)<br>
 * </blockquote>
 * @class
 * @extends dijit._MenuBase
 * @extends dijit._OnDijitClickMixin
 * @returns {dijit.DropDownMenu} new instance
*/
dijit.DropDownMenu=function(){};
/**
 * @memberOf dijit.DropDownMenu
*/
dijit.DropDownMenu.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle keyboard based menu navigation.<br>
 * </blockquote>
 * @param {Event} evt 
 * @memberOf dijit.DropDownMenu
*/
dijit.DropDownMenu.prototype._onKeyPress=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for Menu and MenuBar<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._KeyNavContainer
 * @private
 * @returns {dijit._MenuBase} new instance
*/
dijit._MenuBase=function(){};
/**
 * @namespace
*/
dijit._MenuBase.focusedChild={};
/**
 * @namespace
*/
dijit._MenuBase.currentPopup={};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when this menu is opened.<br>
 *	 This is called by the popup manager as notification that the menu<br>
 *	 was opened.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype.onOpen=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback fires when mouse exits a MenuItem<br>
 * </blockquote>
 * @param {MenuItem} item 
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype.onItemUnhover=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when cursor is over a MenuItem.<br>
 * </blockquote>
 * @param {MenuItem} item 
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype.onItemHover=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle clicks on an item.<br>
 * </blockquote>
 * @param {dijit._Widget} item 
 * @param {Event} evt 
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype.onItemClick=function(item, evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Attach point for notification about when a menu item has been executed.<br>
 *	 This is an internal mechanism used for Menus to signal to their parent to<br>
 *	 close them, because they are about to execute the onClick handler.  In<br>
 *	 general developers should not attach to or override this method.<br>
 * </blockquote>
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype.onExecute=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when this menu is closed.<br>
 *	 This is called by the popup manager as notification that the menu<br>
 *	 was closed.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype.onClose=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Attach point for notification about when the user cancels the current menu<br>
 *	 This is an internal mechanism used for Menus to signal to their parent to<br>
 *	 close them.  In general developers should not attach to or override this method.<br>
 * </blockquote>
 * @param {Boolean} closeAll 
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype.onCancel=function(closeAll){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancels the popup timer because the user has stop hovering<br>
 *	 on the MenuItem, etc.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._stopPopupTimer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancels the pending-close timer because the close has been preempted<br>
 * </blockquote>
 * @param {dijit._Widget} popup 
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._stopPendingCloseTimer=function(popup){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancels the pending-focus timer because the menu was closed before focus occured<br>
 * </blockquote>
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._stopFocusTimer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Open the popup to the side of/underneath the current menu item<br>
 * </blockquote>
 * @returns {the focused child lost focus since the timer was started} -
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._openPopup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This handler is called when the mouse moves over the popup.<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._onPopupHover=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when child of this Menu gets focus from:<br>
 *	 1) clicking it<br>
 *	 2) tabbing into it<br>
 *	 3) being opened by a parent menu.<br>
 *	 This is not called just from mouse hover.<br>
 * </blockquote>
 * @param {MenuItem} item 
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._onItemFocus=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when a child MenuItem becomes inactive because focus<br>
 *	 has been removed from the MenuItem *and* it's descendant menus.<br>
 * </blockquote>
 * @param {mixed} item 
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._onChildBlur=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when focus is moved away from this Menu and it's submenus.<br>
 * </blockquote>
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This handles the right arrow key (left arrow key on RTL systems),<br>
 *	 which will either open a submenu, or move to the next item in the<br>
 *	 ancestor MenuBar<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._moveToPopup=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mark this menu's state as inactive.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._markInactive=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mark this menu's state as active.<br>
 *	 Called when this Menu gets focus from:<br>
 *	 1) clicking it (mouse or via space/arrow key)<br>
 *	 2) being opened by a parent menu.<br>
 *	 This is not called just from mouse hover.<br>
 *	 Focusing a menu via TAB does NOT automatically set isActive<br>
 *	 since TAB is a navigation operation and not a selection one.<br>
 *	 For Windows apps, pressing the ALT key focuses the menubar<br>
 *	 menus (similar to TAB navigation) but the menu is not active<br>
 *	 (ie no dropdown) until an item is clicked.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._markActive=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the top menu in this chain of Menus<br>
 * </blockquote>
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._getTopMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when submenu is clicked or focus is lost.  Close hierarchy of menus.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._closeChild=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the user is done with this menu.  Closes hierarchy of menus.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._MenuBase
*/
dijit._MenuBase.prototype._cleanUp=function(){};
/**
 * @class
 * @private
 * @returns {dijit._OnDijitClickMixin} new instance
*/
dijit._OnDijitClickMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connects specified obj/event to specified method of this object<br>
 *	 and registers for disconnect() on widget destroy.<br>
 * </blockquote>
 * Provide widget-specific analog to connect.connect, except with the<br>
 * implicit use of this widget as the target object.<br>
 * This version of connect also provides a special "ondijitclick"<br>
 * event which triggers on a click or space or enter keyup.<br>
 * Events connected with `this.connect` are disconnected upon<br>
 * destruction.
 * @param {Object|null} obj 
 * @param {String|Function} event 
 * @param {String|Function} method 
 * @example
 * 	var btn = new dijit.form.Button();
 * 	// when foo.bar() is called, call the listener we're going to
 * 	// provide in the scope of btn
 * 	btn.connect(foo, "bar", function(){
 * 		console.debug(this.toString());
 * 	});
 * @memberOf dijit._OnDijitClickMixin
*/
dijit._OnDijitClickMixin.prototype.connect=function(obj, event, method){};
/**
 * @param {DomNode} node 
*/
dijit._editor.getNodeHtml=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the html content of a DomNode and children<br>
 * </blockquote>
 * @param {DomNode} dom 
 * @returns {String} -
*/
dijit._editor.getChildrenHtml=function(dom){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds escape sequences for special characters in XML: &amp;amp;&amp;lt;&amp;gt;&amp;quot;'<br>
 *	 Optionally skips escapes for single quotes<br>
 * </blockquote>
 * @param {String} str 
 * @param {Boolean} [noSingleQuotes] 
 * @returns {string} -
*/
dijit._editor.escapeXml=function(str, noSingleQuotes){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for a &amp;quot;plugin&amp;quot; to the editor, which is usually<br>
 *	 a single button on the Toolbar and some associated code<br>
 * </blockquote>
 * @param {Object} [args] 
 * @private
*/
dijit._editor._Plugin=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 dijit._editor.RichText is the core of dijit.Editor, which provides basic<br>
 *	 WYSIWYG editing features.<br>
 * </blockquote>
 * dijit._editor.RichText is the core of dijit.Editor, which provides basic<br>
 * WYSIWYG editing features. It also encapsulates the differences<br>
 * of different js engines for various browsers.  Do not use this widget<br>
 * with an HTML &amp;lt;TEXTAREA&amp;gt; tag, since the browser unescapes XML escape characters,<br>
 * like &amp;lt;.  This can have unexpected behavior and lead to security issues<br>
 * such as scripting attacks.
 * @param {mixed} params 
*/
dijit._editor.RichText=function(params){};
/**
 * @namespace
*/
dijit._editor.selection={};
/**
 * @namespace
*/
dijit._editor.plugins={};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for a &amp;quot;plugin&amp;quot; to the editor, which is usually<br>
 *	 a single button on the Toolbar and some associated code<br>
 * </blockquote>
 * @class
 * @private
 * @param {Object} [args] 
 * @returns {dijit._editor._Plugin} new instance
*/
dijit._editor._Plugin=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Change state of the plugin to respond to events in the editor.<br>
 * </blockquote>
 * This is called on meaningful events in the editor, such as change of selection<br>
 * or caret position (but not simple typing of alphanumeric keys).   It gives the<br>
 * plugin a chance to update the CSS of its button.<br>
 * <br>
 * For example, the "bold" plugin will highlight/unhighlight the bold button depending on whether the<br>
 * characters next to the caret are bold or not.<br>
 * <br>
 * Only makes sense when `useDefaultCommand` is true, as it calls Editor.queryCommandEnabled(`command`).
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tell the plugin to add it's controller widget (often a button)<br>
 *	 to the toolbar.  Does nothing if there is no controller widget.<br>
 * </blockquote>
 * @param {dijit.Toolbar} toolbar 
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype.setToolbar=function(toolbar){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tell the plugin which Editor it is associated with.<br>
 * </blockquote>
 * @param {dijit.Editor} editor 
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set a property on a plugin<br>
 * </blockquote>
 * Sets named properties on a plugin which may potentially be handled by a<br>
 * setter in the plugin.<br>
 * For example, if the plugin has a properties "foo"<br>
 * and "bar" and a method named "_setFooAttr", calling:<br>
 * 	plugin.set("foo", "Howdy!");<br>
 * would be equivalent to writing:<br>
 * 	plugin._setFooAttr("Howdy!");<br>
 * and:<br>
 * 	plugin.set("bar", 3);<br>
 * would be equivalent to writing:<br>
 * 	plugin.bar = 3;<br>
 * <br>
 * set() may also be called with a hash of name/value pairs, ex:<br>
 * 	plugin.set({<br>
 * 		foo: "Howdy",<br>
 * 		bar: 3<br>
 * 	})<br>
 * This is equivalent to calling set(foo, "Howdy") and set(bar, 3)
 * @param {attribute} name The property to set.
 * @param {anything} value The value to set in the property.
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype.set=function(name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the label to use for the button<br>
 * </blockquote>
 * @param {String} key 
 * @private
 * @returns {String} -
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype.getLabel=function(key){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get a property from a plugin.<br>
 * </blockquote>
 * Get a named property from a plugin. The property may<br>
 * potentially be retrieved via a getter method. If no getter is defined, this<br>
 * just retrieves the object's property.<br>
 * For example, if the plugin has a properties "foo"<br>
 * and "bar" and a method named "_getFooAttr", calling:<br>
 * 	plugin.get("foo");<br>
 * would be equivalent to writing:<br>
 * 	plugin._getFooAttr();<br>
 * and:<br>
 * 	plugin.get("bar");<br>
 * would be equivalent to writing:<br>
 * 	plugin.bar;
 * @param {The} name property to get.
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype.get=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy this plugin<br>
 * </blockquote>
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Make a connect.connect() that is automatically disconnected when this plugin is destroyed.<br>
 *	 Similar to `dijit._Widget.connect`.<br>
 * </blockquote>
 * @param {mixed} o 
 * @param {mixed} f 
 * @param {mixed} tf 
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype.connect=function(o, f, tf){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the plugin state and call updateState to make sure the<br>
 *	 button is updated appropriately.<br>
 * </blockquote>
 * @param {mixed} disabled 
 * @private
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype._setDisabledAttr=function(disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function to set new value for specified attribute<br>
 * </blockquote>
 * @param {String} name 
 * @param {anything} value 
 * @private
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype._set=function(name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the button or other widget that will control this plugin.<br>
 *	 This code only works for plugins controlling built-in commands in the editor.<br>
 * </blockquote>
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function for get() and set().<br>
 *	 Caches attribute name values so we don't do the string ops every time.<br>
 * </blockquote>
 * @param {mixed} name 
 * @private
 * @memberOf dijit._editor._Plugin
*/
dijit._editor._Plugin.prototype._getAttrNames=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dropdown to select a format (like paragraph or heading); goes in editor toolbar.<br>
 * </blockquote>
*/
dijit._editor.plugins._FormatBlockDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dropdown to select a font size; goes in editor toolbar.<br>
 * </blockquote>
*/
dijit._editor.plugins._FontSizeDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dropdown to select a font; goes in editor toolbar.<br>
 * </blockquote>
*/
dijit._editor.plugins._FontNameDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets that contains a label (like &amp;quot;Font:&amp;quot;)<br>
 *	 and a FilteringSelect drop down to pick a value.<br>
 *	 Used as Toolbar entry.<br>
 * </blockquote>
*/
dijit._editor.plugins._FontDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a simple view source capability.  When view<br>
 *	 source mode is enabled, it disables all other buttons/plugins on the RTE.<br>
 *	 It also binds to the hotkey: CTRL-SHIFT-F11 for toggling ViewSource mode.<br>
 * </blockquote>
*/
dijit._editor.plugins.ViewSource=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin is used to toggle direction of the edited document,<br>
 *	 independent of what direction the whole page is.<br>
 * </blockquote>
*/
dijit._editor.plugins.ToggleDir=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides dropdown color pickers for setting text color and background color<br>
 * </blockquote>
 * The commands provided by this plugin are:<br>
 * * foreColor - sets the text color<br>
 * * hiliteColor - sets the background color<br>
*/
dijit._editor.plugins.TextColor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin is used to allow the use of the tab and shift-tab keys<br>
 *	 to indent/outdent list items.  This overrides the default behavior<br>
 *	 of moving focus from/to the toolbar<br>
 * </blockquote>
*/
dijit._editor.plugins.TabIndent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides Print capability to the editor.  When<br>
 *	 clicked, the document in the editor frame will be printed.<br>
 * </blockquote>
*/
dijit._editor.plugins.Print=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a simple 'new page' capability.  In other<br>
 *	 words, set content to some default user defined string.<br>
 * </blockquote>
*/
dijit._editor.plugins.NewPage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides the basis for an 'anchor' (link) dialog and an extension of it<br>
 *	 provides the image link dialog.<br>
 * </blockquote>
 * The command provided by this plugin is:<br>
 * * createLink<br>
*/
dijit._editor.plugins.LinkDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin extends LinkDialog and adds in a plugin for handling image links.<br>
 *	 provides the image link dialog.<br>
 * </blockquote>
 * The command provided by this plugin is:<br>
 * * insertImage<br>
*/
dijit._editor.plugins.ImgLinkDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides FullScreen capability to the editor.  When<br>
 *	 toggled on, it will render the editor into the full window and<br>
 *	 overlay everything.  It also binds to the hotkey: CTRL-SHIFT-F11<br>
 *	 for toggling fullscreen mode.<br>
 * </blockquote>
*/
dijit._editor.plugins.FullScreen=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides three drop downs for setting style in the editor<br>
 *	 (font, font size, and format block), as controlled by command.<br>
 * </blockquote>
 * The commands provided by this plugin are:<br>
 * <br>
 * * fontName<br>
 * 		Provides a drop down to select from a list of font names<br>
 * * fontSize<br>
 * 		Provides a drop down to select from a list of font sizes<br>
 * * formatBlock<br>
 * 		Provides a drop down to select from a list of block styles<br>
 * <br>
 * <br>
 * which can easily be added to an editor by including one or more of the above commands<br>
 * in the `plugins` attribute as follows:<br>
 * <br>
 * 	plugins="['fontName','fontSize',...]"<br>
 * <br>
 * It is possible to override the default dropdown list by providing an Array for the `custom` property when<br>
 * instantiating this plugin, e.g.<br>
 * <br>
 * 	plugins="[{name:'dijit._editor.plugins.FontChoice', command:'fontName', custom:['Verdana','Myriad','Garamond']},...]"<br>
 * <br>
 * Alternatively, for `fontName` only, `generic:true` may be specified to provide a dropdown with<br>
 * [CSS generic font families](http://www.w3.org/TR/REC-CSS2/fonts.html#generic-font-families)<br>
 * <br>
 * Note that the editor is often unable to properly handle font styling information defined outside<br>
 * the context of the current editor instance, such as pre-populated HTML.
 * @see reference <a href="http://www.w3.org/TR/REC-CSS2/fonts.html#generic-font-families)">http://www.w3.org/TR/REC-CSS2/fonts.html#generic-font-families)</a>
*/
dijit._editor.plugins.FontChoice=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin tries to make all browsers behave consistently with regard to<br>
 *	 how ENTER behaves in the editor window.  It traps the ENTER key and alters<br>
 *	 the way DOM is constructed in certain cases to try to commonize the generated<br>
 *	 DOM and behaviors across browsers.<br>
 * </blockquote>
 * This plugin has three modes:<br>
 * <br>
 * * blockNodeForEnter=BR<br>
 * * blockNodeForEnter=DIV<br>
 * * blockNodeForEnter=P<br>
 * <br>
 * In blockNodeForEnter=P, the ENTER key starts a new<br>
 * paragraph, and shift-ENTER starts a new line in the current paragraph.<br>
 * For example, the input:<br>
 * <br>
 * 	first paragraph &lt;shift-ENTER&gt;<br>
 * 	second line of first paragraph &lt;ENTER&gt;<br>
 * 	second paragraph<br>
 * <br>
 * will generate:<br>
 * <br>
 * 	&lt;p&gt;<br>
 * 		first paragraph<br>
 * 		&lt;br/&gt;<br>
 * 		second line of first paragraph<br>
 * 	&lt;/p&gt;<br>
 * 	&lt;p&gt;<br>
 * 		second paragraph<br>
 * 	&lt;/p&gt;<br>
 * <br>
 * In BR and DIV mode, the ENTER key conceptually goes to a new line in the<br>
 * current paragraph, and users conceptually create a new paragraph by pressing ENTER twice.<br>
 * For example, if the user enters text into an editor like this:<br>
 * <br>
 * 		one &lt;ENTER&gt;<br>
 * 		two &lt;ENTER&gt;<br>
 * 		three &lt;ENTER&gt;<br>
 * 		&lt;ENTER&gt;<br>
 * 		four &lt;ENTER&gt;<br>
 * 		five &lt;ENTER&gt;<br>
 * 		six &lt;ENTER&gt;<br>
 * <br>
 * It will appear on the screen as two 'paragraphs' of three lines each.  Markupwise, this generates:<br>
 * <br>
 * BR:<br>
 * 		one&lt;br/&gt;<br>
 * 		two&lt;br/&gt;<br>
 * 		three&lt;br/&gt;<br>
 * 		&lt;br/&gt;<br>
 * 		four&lt;br/&gt;<br>
 * 		five&lt;br/&gt;<br>
 * 		six&lt;br/&gt;<br>
 * <br>
 * DIV:<br>
 * 		&lt;div&gt;one&lt;/div&gt;<br>
 * 		&lt;div&gt;two&lt;/div&gt;<br>
 * 		&lt;div&gt;three&lt;/div&gt;<br>
 * 		&lt;div&gt;&amp;nbsp;&lt;/div&gt;<br>
 * 		&lt;div&gt;four&lt;/div&gt;<br>
 * 		&lt;div&gt;five&lt;/div&gt;<br>
 * 		&lt;div&gt;six&lt;/div&gt;
 * @param {mixed} args 
*/
dijit._editor.plugins.EnterKeyHandling=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin is required for Editors in auto-expand mode.<br>
 *	 It handles the auto-expansion as the user adds/deletes text,<br>
 *	 and keeps the editor's toolbar visible even when the top of the editor<br>
 *	 has scrolled off the top of the viewport (usually when editing a long<br>
 *	 document).<br>
 * </blockquote>
 * Specify this in extraPlugins (or plugins) parameter and also set<br>
 * height to "".
 * @example
 * 	&lt;div data-dojo-type="dijit.Editor" height=""
 * 	data-dojo-props="extraPlugins: [dijit._editor.plugins.AlwaysShowToolbar]"&gt;
*/
dijit._editor.plugins.AlwaysShowToolbar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin is required for Editors in auto-expand mode.<br>
 *	 It handles the auto-expansion as the user adds/deletes text,<br>
 *	 and keeps the editor's toolbar visible even when the top of the editor<br>
 *	 has scrolled off the top of the viewport (usually when editing a long<br>
 *	 document).<br>
 * </blockquote>
 * Specify this in extraPlugins (or plugins) parameter and also set<br>
 * height to "".
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dijit._editor.plugins.AlwaysShowToolbar} new instance
 * @example
 * 	&lt;div data-dojo-type="dijit.Editor" height=""
 * 	data-dojo-props="extraPlugins: [dijit._editor.plugins.AlwaysShowToolbar]"&gt;
*/
dijit._editor.plugins.AlwaysShowToolbar=function(){};
/**
 * @param {mixed} e 
 * @memberOf dijit._editor.plugins.AlwaysShowToolbar
*/
dijit._editor.plugins.AlwaysShowToolbar.prototype.setEditor=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for scroll events that bubbled up to &amp;lt;html&amp;gt;<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.AlwaysShowToolbar
*/
dijit._editor.plugins.AlwaysShowToolbar.prototype.globalOnScrollHandler=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enable plugin.  Called when Editor has finished initializing.<br>
 * </blockquote>
 * @param {mixed} d 
 * @private
 * @memberOf dijit._editor.plugins.AlwaysShowToolbar
*/
dijit._editor.plugins.AlwaysShowToolbar.prototype.enable=function(d){};
/**
 * @memberOf dijit._editor.plugins.AlwaysShowToolbar
*/
dijit._editor.plugins.AlwaysShowToolbar.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the height of the editor area to fit the contents.<br>
 * </blockquote>
 * @private
 * @returns {prevent setting height to 0} -
 * @memberOf dijit._editor.plugins.AlwaysShowToolbar
*/
dijit._editor.plugins.AlwaysShowToolbar.prototype._updateHeight=function(){};
/**
 * @namespace
*/
dijit._editor.plugins.AlwaysShowToolbar.editor={};
/**
 * @namespace
*/
dijit._editor.plugins.AlwaysShowToolbar.editor.header={};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin tries to make all browsers behave consistently with regard to<br>
 *	 how ENTER behaves in the editor window.  It traps the ENTER key and alters<br>
 *	 the way DOM is constructed in certain cases to try to commonize the generated<br>
 *	 DOM and behaviors across browsers.<br>
 * </blockquote>
 * This plugin has three modes:<br>
 * <br>
 * * blockNodeForEnter=BR<br>
 * * blockNodeForEnter=DIV<br>
 * * blockNodeForEnter=P<br>
 * <br>
 * In blockNodeForEnter=P, the ENTER key starts a new<br>
 * paragraph, and shift-ENTER starts a new line in the current paragraph.<br>
 * For example, the input:<br>
 * <br>
 * 	first paragraph &lt;shift-ENTER&gt;<br>
 * 	second line of first paragraph &lt;ENTER&gt;<br>
 * 	second paragraph<br>
 * <br>
 * will generate:<br>
 * <br>
 * 	&lt;p&gt;<br>
 * 		first paragraph<br>
 * 		&lt;br/&gt;<br>
 * 		second line of first paragraph<br>
 * 	&lt;/p&gt;<br>
 * 	&lt;p&gt;<br>
 * 		second paragraph<br>
 * 	&lt;/p&gt;<br>
 * <br>
 * In BR and DIV mode, the ENTER key conceptually goes to a new line in the<br>
 * current paragraph, and users conceptually create a new paragraph by pressing ENTER twice.<br>
 * For example, if the user enters text into an editor like this:<br>
 * <br>
 * 		one &lt;ENTER&gt;<br>
 * 		two &lt;ENTER&gt;<br>
 * 		three &lt;ENTER&gt;<br>
 * 		&lt;ENTER&gt;<br>
 * 		four &lt;ENTER&gt;<br>
 * 		five &lt;ENTER&gt;<br>
 * 		six &lt;ENTER&gt;<br>
 * <br>
 * It will appear on the screen as two 'paragraphs' of three lines each.  Markupwise, this generates:<br>
 * <br>
 * BR:<br>
 * 		one&lt;br/&gt;<br>
 * 		two&lt;br/&gt;<br>
 * 		three&lt;br/&gt;<br>
 * 		&lt;br/&gt;<br>
 * 		four&lt;br/&gt;<br>
 * 		five&lt;br/&gt;<br>
 * 		six&lt;br/&gt;<br>
 * <br>
 * DIV:<br>
 * 		&lt;div&gt;one&lt;/div&gt;<br>
 * 		&lt;div&gt;two&lt;/div&gt;<br>
 * 		&lt;div&gt;three&lt;/div&gt;<br>
 * 		&lt;div&gt;&amp;nbsp;&lt;/div&gt;<br>
 * 		&lt;div&gt;four&lt;/div&gt;<br>
 * 		&lt;div&gt;five&lt;/div&gt;<br>
 * 		&lt;div&gt;six&lt;/div&gt;
 * @class
 * @extends dijit._editor._Plugin
 * @param {mixed} args 
 * @returns {dijit._editor.plugins.EnterKeyHandling} new instance
*/
dijit._editor.plugins.EnterKeyHandling=function(args){};
/**
 * @param {mixed} editor 
 * @memberOf dijit._editor.plugins.EnterKeyHandling
*/
dijit._editor.plugins.EnterKeyHandling.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 If last child of container is a &amp;lt;br&amp;gt;, then remove it.<br>
 * </blockquote>
 * @param {mixed} container 
 * @private
 * @memberOf dijit._editor.plugins.EnterKeyHandling
*/
dijit._editor.plugins.EnterKeyHandling.prototype.removeTrailingBr=function(container){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for keypress events.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.EnterKeyHandling
*/
dijit._editor.plugins.EnterKeyHandling.prototype.onKeyPressed=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for enter key events when blockNodeForEnter is DIV or P.<br>
 * </blockquote>
 * Manually handle enter key event to make the behavior consistent across<br>
 * all supported browsers. See class description for details.
 * @param {mixed} e 
 * @private
 * @returns {let browser handle} -
 * @memberOf dijit._editor.plugins.EnterKeyHandling
*/
dijit._editor.plugins.EnterKeyHandling.prototype.handleEnterKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 In the case there are multiple text nodes in a row the offset may not be within the node.  If the offset is larger than the node length, it will attempt to find<br>
 *	 the next text sibling until it locates the text node in which the offset refers to<br>
 * </blockquote>
 * @param {DomNode} node The node to check.
 * @param {Int} offset The position to find within the text node
 * @private
 * @memberOf dijit._editor.plugins.EnterKeyHandling
*/
dijit._editor.plugins.EnterKeyHandling.prototype._adjustNodeAndOffset=function(node, offset){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets that contains a label (like &amp;quot;Font:&amp;quot;)<br>
 *	 and a FilteringSelect drop down to pick a value.<br>
 *	 Used as Toolbar entry.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dijit._editor.plugins._FontDropDown} new instance
*/
dijit._editor.plugins._FontDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to set specific properties.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins._FontDropDown
*/
dijit._editor.plugins._FontDropDown.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the default postCreate action<br>
 *	 This establishes the filtering selects and the like.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins._FontDropDown
*/
dijit._editor.plugins._FontDropDown.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for focus control of this widget.  Delegates focus down to the<br>
 *	 filtering select.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins._FontDropDown
*/
dijit._editor.plugins._FontDropDown.prototype.focus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the default action of setting the<br>
 *	 widget value, maps the input to known values<br>
 * </blockquote>
 * @param {Object|String} value The value to set in the select.
 * @param {Optional} priorityChange parameter used to tell the select whether or not to fire
 * onChange event.
 * @private
 * @memberOf dijit._editor.plugins._FontDropDown
*/
dijit._editor.plugins._FontDropDown.prototype._setValueAttr=function(value, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the button's 'disabled' attribute so that it can be<br>
 *	 disabled programmatically.<br>
 * </blockquote>
 * @param {mixed} value 
 * @private
 * @memberOf dijit._editor.plugins._FontDropDown
*/
dijit._editor.plugins._FontDropDown.prototype._setDisabledAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Allow retrieving the value from the composite select on<br>
 *	 call to button.get(&amp;quot;value&amp;quot;);<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins._FontDropDown
*/
dijit._editor.plugins._FontDropDown.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dropdown to select a font; goes in editor toolbar.<br>
 * </blockquote>
 * @class
 * @returns {dijit._editor.plugins._FontNameDropDown} new instance
*/
dijit._editor.plugins._FontNameDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the default posr mixin control<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins._FontNameDropDown
*/
dijit._editor.plugins._FontNameDropDown.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function used to generate the labels of the format dropdown<br>
 *	 will return a formatted, or plain label based on the value<br>
 *	 of the plainText option.<br>
 * </blockquote>
 * @param {String} value The 'insert value' associated with a name
 * @param {String} name The text name of the value
 * @memberOf dijit._editor.plugins._FontNameDropDown
*/
dijit._editor.plugins._FontNameDropDown.prototype.getLabel=function(value, name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the default action of setting the<br>
 *	 widget value, maps the input to known values<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} priorityChange 
 * @private
 * @memberOf dijit._editor.plugins._FontNameDropDown
*/
dijit._editor.plugins._FontNameDropDown.prototype._setValueAttr=function(value, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dropdown to select a font size; goes in editor toolbar.<br>
 * </blockquote>
 * @class
 * @returns {dijit._editor.plugins._FontSizeDropDown} new instance
*/
dijit._editor.plugins._FontSizeDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function used to generate the labels of the format dropdown<br>
 *	 will return a formatted, or plain label based on the value<br>
 *	 of the plainText option.<br>
 *	 We're stuck using the deprecated FONT tag to correspond<br>
 *	 with the size measurements used by the editor<br>
 * </blockquote>
 * @param {String} value The 'insert value' associated with a name
 * @param {String} name The text name of the value
 * @memberOf dijit._editor.plugins._FontSizeDropDown
*/
dijit._editor.plugins._FontSizeDropDown.prototype.getLabel=function(value, name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the default action of setting the<br>
 *	 widget value, maps the input to known values<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} priorityChange 
 * @private
 * @memberOf dijit._editor.plugins._FontSizeDropDown
*/
dijit._editor.plugins._FontSizeDropDown.prototype._setValueAttr=function(value, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dropdown to select a format (like paragraph or heading); goes in editor toolbar.<br>
 * </blockquote>
 * @class
 * @returns {dijit._editor.plugins._FormatBlockDropDown} new instance
*/
dijit._editor.plugins._FormatBlockDropDown=function(){};
/**
 * @memberOf dijit._editor.plugins._FormatBlockDropDown
*/
dijit._editor.plugins._FormatBlockDropDown.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function used to generate the labels of the format dropdown<br>
 *	 will return a formatted, or plain label based on the value<br>
 *	 of the plainText option.<br>
 * </blockquote>
 * @param {String} value The 'insert value' associated with a name
 * @param {String} name The text name of the value
 * @memberOf dijit._editor.plugins._FormatBlockDropDown
*/
dijit._editor.plugins._FormatBlockDropDown.prototype.getLabel=function(value, name){};
/**
 * <b>Summary:</b><blockquote>
 *	 function to remove the block format node.<br>
 * </blockquote>
 * @param {mixed} editor 
 * @param {The} node block format node to remove (and leave the contents behind)
 * @private
 * @memberOf dijit._editor.plugins._FormatBlockDropDown
*/
dijit._editor.plugins._FormatBlockDropDown.prototype._removeFormat=function(editor, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for default exec-command label.<br>
 *	 Allows us to treat 'none' as special.<br>
 * </blockquote>
 * @param {mixed} editor 
 * @param {mixed} command 
 * @param {mixed} choice 
 * @private
 * @memberOf dijit._editor.plugins._FormatBlockDropDown
*/
dijit._editor.plugins._FormatBlockDropDown.prototype._execCommand=function(editor, command, choice){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides three drop downs for setting style in the editor<br>
 *	 (font, font size, and format block), as controlled by command.<br>
 * </blockquote>
 * The commands provided by this plugin are:<br>
 * <br>
 * * fontName<br>
 * 		Provides a drop down to select from a list of font names<br>
 * * fontSize<br>
 * 		Provides a drop down to select from a list of font sizes<br>
 * * formatBlock<br>
 * 		Provides a drop down to select from a list of block styles<br>
 * <br>
 * <br>
 * which can easily be added to an editor by including one or more of the above commands<br>
 * in the `plugins` attribute as follows:<br>
 * <br>
 * 	plugins="['fontName','fontSize',...]"<br>
 * <br>
 * It is possible to override the default dropdown list by providing an Array for the `custom` property when<br>
 * instantiating this plugin, e.g.<br>
 * <br>
 * 	plugins="[{name:'dijit._editor.plugins.FontChoice', command:'fontName', custom:['Verdana','Myriad','Garamond']},...]"<br>
 * <br>
 * Alternatively, for `fontName` only, `generic:true` may be specified to provide a dropdown with<br>
 * [CSS generic font families](http://www.w3.org/TR/REC-CSS2/fonts.html#generic-font-families)<br>
 * <br>
 * Note that the editor is often unable to properly handle font styling information defined outside<br>
 * the context of the current editor instance, such as pre-populated HTML.
 * @see reference <a href="http://www.w3.org/TR/REC-CSS2/fonts.html#generic-font-families)">http://www.w3.org/TR/REC-CSS2/fonts.html#generic-font-families)</a>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dijit._editor.plugins.FontChoice} new instance
*/
dijit._editor.plugins.FontChoice=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides _Plugin.updateState().  This controls updating the menu<br>
 *	 options to the right values on state changes in the document (that trigger a<br>
 *	 test of the actions.)<br>
 *	 It set value of drop down in toolbar to reflect font/font size/format block<br>
 *	 of text at current caret position.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.FontChoice
*/
dijit._editor.plugins.FontChoice.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides _Plugin._initButton(), to initialize the FilteringSelect+label in toolbar,<br>
 *	 rather than a simple button.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.FontChoice
*/
dijit._editor.plugins.FontChoice.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An enhanced version of the HTML SELECT tag, populated dynamically<br>
 * </blockquote>
 * An enhanced version of the HTML SELECT tag, populated dynamically. It works<br>
 * very nicely with very large data sets because it can load and page data as needed.<br>
 * It also resembles ComboBox, but does not allow values outside of the provided ones.<br>
 * If OPTION tags are used as the data provider via markup, then the<br>
 * OPTION tag's child text node is used as the displayed value when selected<br>
 * while the OPTION tag's value attribute is used as the widget value on form submit.<br>
 * To set the default value when using OPTION tags, specify the selected<br>
 * attribute on 1 of the child OPTION tags.<br>
 * <br>
 * Similar features:<br>
 * - There is a drop down list of possible values.<br>
 * - You can only enter a value from the drop down list.  (You can't<br>
 * enter an arbitrary value.)<br>
 * - The value submitted with the form is the hidden value (ex: CA),<br>
 * not the displayed value a.k.a. label (ex: California)<br>
 * <br>
 * Enhancements over plain HTML version:<br>
 * - If you type in some text then it will filter down the list of<br>
 * possible values in the drop down list.<br>
 * - List can be specified either as a static list or via a javascript<br>
 * function (that can get the list from a server)
 * @class
 * @extends dijit.form.MappedTextBox
 * @extends dijit.form.ComboBoxMixin
 * @returns {dijit.form.FilteringSelect} new instance
*/
dijit.form.FilteringSelect=function(){};
/**
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype.undo=function(){};
/**
 * @returns {#5974} -
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype.isValid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('value', value) works.<br>
 * </blockquote>
 * Sets the value of the select.<br>
 * Also sets the label to the corresponding value by reverse lookup.
 * @param {String} value 
 * @param {Boolean} [priorityChange] 
 * @param {String} [displayedValue] 
 * @param {item} [item] 
 * @private
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype._setValueAttr=function(value, priorityChange, displayedValue, item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the displayed valued in the input box, and the hidden value<br>
 *	 that gets submitted, based on a dojo.data store item.<br>
 * </blockquote>
 * Users shouldn't call this function; they should be calling<br>
 * set('item', value)
 * @param {item} item 
 * @param {Boolean} [priorityChange] 
 * @param {String} [displayedValue] 
 * @private
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype._setItemAttr=function(item, priorityChange, displayedValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('displayedValue', label) works.<br>
 * </blockquote>
 * Sets textbox to display label. Also performs reverse lookup<br>
 * to set the hidden value.  label should corresponding to item.searchAttr.
 * @param {String} label 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype._setDisplayedValueAttr=function(label, priorityChange){};
/**
 * @private
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype._refreshState=function(){};
/**
 * @param {Object} results 
 * @param {Object} query 
 * @param {Object} options 
 * @private
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype._openResultList=function(results, query, options){};
/**
 * @private
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype._isValidSubset=function(){};
/**
 * @private
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype._getValueField=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook for get('value') to work.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype._getValueAttr=function(){};
/**
 * @param {String} text 
 * @private
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype._getDisplayQueryString=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback from dojo.store after lookup of user entered value finishes<br>
 * </blockquote>
 * @param {Array} result 
 * @param {Object} query 
 * @param {Object} options 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form.FilteringSelect
*/
dijit.form.FilteringSelect.prototype._callbackSetLabel=function(result, query, options, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides FullScreen capability to the editor.  When<br>
 *	 toggled on, it will render the editor into the full window and<br>
 *	 overlay everything.  It also binds to the hotkey: CTRL-SHIFT-F11<br>
 *	 for toggling fullscreen mode.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dijit._editor.plugins.FullScreen} new instance
*/
dijit._editor.plugins.FullScreen=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.FullScreen
*/
dijit._editor.plugins.FullScreen.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to allow programmatic toggling of the view.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.FullScreen
*/
dijit._editor.plugins.FullScreen.prototype.toggle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dijit._editor.plugins.FullScreen
*/
dijit._editor.plugins.FullScreen.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to ensure the resize handle gets cleaned up.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.FullScreen
*/
dijit._editor.plugins.FullScreen.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to handle toggling between full screen and<br>
 *	 regular view.<br>
 * </blockquote>
 * @param {mixed} full 
 * @private
 * @memberOf dijit._editor.plugins.FullScreen
*/
dijit._editor.plugins.FullScreen.prototype._setFullScreen=function(full){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to handle resizing the editor as the viewport<br>
 *	 resizes (window scaled)<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.FullScreen
*/
dijit._editor.plugins.FullScreen.prototype._resizeEditor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the resize button.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.FullScreen
*/
dijit._editor.plugins.FullScreen.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is intended as a hook point for setting an<br>
 *	 alternate view node for when in full screen mode and the<br>
 *	 editable iframe is hidden.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.FullScreen
*/
dijit._editor.plugins.FullScreen.prototype._getAltViewNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 When in Full Screen mode, it's good to try and retain focus in the editor<br>
 *	 so this function is intended to try and constrain the TAB key.<br>
 * </blockquote>
 * @param {Event} e The key event.
 * @private
 * @memberOf dijit._editor.plugins.FullScreen
*/
dijit._editor.plugins.FullScreen.prototype._containFocus=function(e){};
/**
 * @namespace
*/
dijit._editor.plugins.FullScreen.editor={};
/**
 * @memberOf dijit._editor.plugins.FullScreen.editor
*/
dijit._editor.plugins.FullScreen.editor.prototype.resize=function(){};
/**
 * @namespace
*/
dijit._editor._Plugin.registry={};
/**
 * @param {mixed} args 
*/
dijit._editor._Plugin.registry.viewsource=function(args){};
/**
*/
dijit._editor._Plugin.registry.viewSource=function(){};
/**
*/
dijit._editor._Plugin.registry.toggleDir=function(){};
/**
*/
dijit._editor._Plugin.registry.tabIndent=function(){};
/**
*/
dijit._editor._Plugin.registry.print=function(){};
/**
 * @param {mixed} args 
*/
dijit._editor._Plugin.registry.newpage=function(args){};
/**
*/
dijit._editor._Plugin.registry.newPage=function(){};
/**
*/
dijit._editor._Plugin.registry.insertImage=function(){};
/**
*/
dijit._editor._Plugin.registry.hiliteColor=function(){};
/**
 * @param {mixed} args 
*/
dijit._editor._Plugin.registry.fullscreen=function(args){};
/**
*/
dijit._editor._Plugin.registry.fullScreen=function(){};
/**
*/
dijit._editor._Plugin.registry.foreColor=function(){};
/**
*/
dijit._editor._Plugin.registry.createLink=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides the basis for an 'anchor' (link) dialog and an extension of it<br>
 *	 provides the image link dialog.<br>
 * </blockquote>
 * The command provided by this plugin is:<br>
 * * createLink
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dijit._editor.plugins.LinkDialog} new instance
*/
dijit._editor.plugins.LinkDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback from the dialog when user presses &amp;quot;set&amp;quot; button.<br>
 * </blockquote>
 * @param {mixed} args 
 * @private
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype.setValue=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper for _initButton above.   Not sure why it's a separate method.<br>
 * </blockquote>
 * @param {mixed} staticPanel 
 * @private
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype._setContent=function(staticPanel){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for when the dialog is opened.<br>
 *	 If the caret is currently in a URL then populate the URL's info into the dialog.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype._onOpenDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to define a behavior on double clicks on the element<br>
 *	 type this dialog edits to select it and pop up the editor<br>
 *	 dialog.<br>
 * </blockquote>
 * @param {Object} e The double-click event.
 * @private
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype._onDblClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for close event on the dialog<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype._onCloseDialog=function(){};
/**
 * @param {mixed} callback 
 * @private
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype._loadDropDown=function(callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to allow validating of the inputs<br>
 *	 for a link to determine if set should be disabled or not<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype._isValid=function(){};
/**
 * @private
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for getting the values to set in the dropdown.<br>
 * </blockquote>
 * @param {The} a anchor/link to process for data for the dropdown.
 * @returns {Object;} -
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype._getCurrentValues=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ridable function that connects tag specific events.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype._connectTagEvents=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to check the values in args and 'fix' them up as needed.<br>
 * </blockquote>
 * @param {Object} args Content being set.
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype._checkValues=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function to listen for onChange events and test the input contents<br>
 *	 for valid information, such as valid urls with http/https/ftp and if<br>
 *	 not present, try and guess if the input url is relative or not, and if<br>
 *	 not, append http:// to it.  Also validates other fields as determined by<br>
 *	 the internal _isValid function.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.LinkDialog
*/
dijit._editor.plugins.LinkDialog.prototype._checkAndFixInput=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin extends LinkDialog and adds in a plugin for handling image links.<br>
 *	 provides the image link dialog.<br>
 * </blockquote>
 * The command provided by this plugin is:<br>
 * * insertImage
 * @class
 * @returns {dijit._editor.plugins.ImgLinkDialog} new instance
*/
dijit._editor.plugins.ImgLinkDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple event handler that lets me select an image if it is clicked on.<br>
 *	 makes it easier to select images in a standard way across browsers.  Otherwise<br>
 *	 selecting an image for edit becomes difficult.<br>
 * </blockquote>
 * @param {Event} e The mousedown event.
 * @private
 * @memberOf dijit._editor.plugins.ImgLinkDialog
*/
dijit._editor.plugins.ImgLinkDialog.prototype._selectTag=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to define a behavior on double clicks on the element<br>
 *	 type this dialog edits to select it and pop up the editor<br>
 *	 dialog.<br>
 * </blockquote>
 * @param {Object} e The double-click event.
 * @private
 * @memberOf dijit._editor.plugins.ImgLinkDialog
*/
dijit._editor.plugins.ImgLinkDialog.prototype._onDblClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for images.  You can have alt text of blank, it is valid.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.ImgLinkDialog
*/
dijit._editor.plugins.ImgLinkDialog.prototype._isValid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for getting the values to set in the dropdown.<br>
 *	 a:<br>
 *	 The anchor/link to process for data for the dropdown.<br>
 * </blockquote>
 * @param {mixed} img 
 * @returns {Object;} -
 * @memberOf dijit._editor.plugins.ImgLinkDialog
*/
dijit._editor.plugins.ImgLinkDialog.prototype._getCurrentValues=function(img){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ridable function that connects tag specific events.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.ImgLinkDialog
*/
dijit._editor.plugins.ImgLinkDialog.prototype._connectTagEvents=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to check the values in args and 'fix' them up as needed<br>
 *	 (special characters in the url or alt text)<br>
 * </blockquote>
 * @param {Object} args Content being set.
 * @memberOf dijit._editor.plugins.ImgLinkDialog
*/
dijit._editor.plugins.ImgLinkDialog.prototype._checkValues=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a simple 'new page' capability.  In other<br>
 *	 words, set content to some default user defined string.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dijit._editor.plugins.NewPage} new instance
*/
dijit._editor.plugins.NewPage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.NewPage
*/
dijit._editor.plugins.NewPage.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tell the plugin which Editor it is associated with.<br>
 * </blockquote>
 * @param {dijit.Editor} editor Object The editor object to attach the newPage capability to.
 * @memberOf dijit._editor.plugins.NewPage
*/
dijit._editor.plugins.NewPage.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the content to blank.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.NewPage
*/
dijit._editor.plugins.NewPage.prototype._newPage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the Print button.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.NewPage
*/
dijit._editor.plugins.NewPage.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides Print capability to the editor.  When<br>
 *	 clicked, the document in the editor frame will be printed.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dijit._editor.plugins.Print} new instance
*/
dijit._editor.plugins.Print=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.Print
*/
dijit._editor.plugins.Print.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tell the plugin which Editor it is associated with.<br>
 * </blockquote>
 * @param {dijit.Editor} editor Object The editor object to attach the print capability to.
 * @memberOf dijit._editor.plugins.Print
*/
dijit._editor.plugins.Print.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to trigger printing of the editor document<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.Print
*/
dijit._editor.plugins.Print.prototype._print=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the Print button.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.Print
*/
dijit._editor.plugins.Print.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin is used to allow the use of the tab and shift-tab keys<br>
 *	 to indent/outdent list items.  This overrides the default behavior<br>
 *	 of moving focus from/to the toolbar<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dijit._editor.plugins.TabIndent} new instance
*/
dijit._editor.plugins.TabIndent=function(){};
/**
 * @memberOf dijit._editor.plugins.TabIndent
*/
dijit._editor.plugins.TabIndent.prototype.updateState=function(){};
/**
 * @private
 * @memberOf dijit._editor.plugins.TabIndent
*/
dijit._editor.plugins.TabIndent.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides dropdown color pickers for setting text color and background color<br>
 * </blockquote>
 * The commands provided by this plugin are:<br>
 * * foreColor - sets the text color<br>
 * * hiliteColor - sets the background color
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dijit._editor.plugins.TextColor} new instance
*/
dijit._editor.plugins.TextColor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides _Plugin.updateState().  This updates the ColorPalette<br>
 *	 to show the color of the currently selected text.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.TextColor
*/
dijit._editor.plugins.TextColor.prototype.updateState=function(){};
/**
 * @private
 * @memberOf dijit._editor.plugins.TextColor
*/
dijit._editor.plugins.TextColor.prototype._initButton=function(){};
/**
 * @namespace
*/
dijit._editor.plugins.TextColor.button={};
/**
 * @param {mixed} callback 
 * @memberOf dijit._editor.plugins.TextColor.button
*/
dijit._editor.plugins.TextColor.button.prototype.loadDropDown=function(callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin is used to toggle direction of the edited document,<br>
 *	 independent of what direction the whole page is.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dijit._editor.plugins.ToggleDir} new instance
*/
dijit._editor.plugins.ToggleDir=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.ToggleDir
*/
dijit._editor.plugins.ToggleDir.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for button click events, to switch the text direction of the editor<br>
 * </blockquote>
 * @param {mixed} rtl 
 * @private
 * @memberOf dijit._editor.plugins.ToggleDir
*/
dijit._editor.plugins.ToggleDir.prototype._setRtl=function(rtl){};
/**
 * @private
 * @memberOf dijit._editor.plugins.ToggleDir
*/
dijit._editor.plugins.ToggleDir.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a simple view source capability.  When view<br>
 *	 source mode is enabled, it disables all other buttons/plugins on the RTE.<br>
 *	 It also binds to the hotkey: CTRL-SHIFT-F11 for toggling ViewSource mode.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dijit._editor.plugins.ViewSource} new instance
*/
dijit._editor.plugins.ViewSource=function(){};
/**
 * @namespace
*/
dijit._editor.plugins.ViewSource.sourceArea={};
/**
 * @namespace
 * @private
*/
dijit._editor.plugins.ViewSource._fsPlugin={};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to allow programmatic toggling of the view.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype.toggle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to set the caret in the sourceArea<br>
 *	 to 0x0<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype.setSourceAreaCaret=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tell the plugin which Editor it is associated with.<br>
 * </blockquote>
 * @param {dijit.Editor} editor Object The editor object to attach the print capability to.
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to remove the node used to correct for IE's<br>
 *	 zoom bug.<br>
 * </blockquote>
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Strips out script tags from the HTML used in editor.<br>
 * </blockquote>
 * @param {String} html The HTML to filter
 * @private
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype._stripScripts=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Strips out iframe tags from the content, to avoid iframe script<br>
 *	 style injection attacks.<br>
 * </blockquote>
 * @param {String} html The HTML to filter
 * @private
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype._stripIFrames=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Strips out comments from the HTML used in editor.<br>
 * </blockquote>
 * @param {String} html The HTML to filter
 * @private
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype._stripComments=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to toggle between the source and RTE views.<br>
 * </blockquote>
 * @param {boolean} source Boolean value indicating if it should be in source mode or not.
 * @private
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype._showSource=function(source){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to resize the source view<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype._resize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the resize button.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to perform some filtering on the HTML.<br>
 * </blockquote>
 * @param {String} html The HTML to filter
 * @private
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype._filter=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for creating the source view area.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.plugins.ViewSource
*/
dijit._editor.plugins.ViewSource.prototype._createSourceView=function(){};
/**
 * @namespace
*/
dijit._editor.plugins.ViewSource.editor={};
/**
 * @param {mixed} cmd 
 * @memberOf dijit._editor.plugins.ViewSource.editor
*/
dijit._editor.plugins.ViewSource.editor.prototype.queryCommandEnabled=function(cmd){};
/**
 * @memberOf dijit._editor.plugins.ViewSource.editor
*/
dijit._editor.plugins.ViewSource.editor.prototype.focus=function(){};
/**
 * @private
 * @memberOf dijit._editor.plugins.ViewSource._fsPlugin
*/
dijit._editor.plugins.ViewSource._fsPlugin.prototype._getAltViewNode=function(){};
/**
 * @param {Window} win 
 * @param {Boolean} [ignoreUpdate] 
*/
dijit.range.getSelection=function(win, ignoreUpdate){};
/**
 * @param {Array} index 
 * @param {DomNode} parent 
 * @returns {terminate array.every|carry on the every loop} -
*/
dijit.range.getNode=function(index, parent){};
/**
 * @param {DomNode} node 
 * @param {DomNode} parent 
*/
dijit.range.getIndex=function(node, parent){};
/**
 * @param {mixed} n1 
 * @param {mixed} n2 
 * @param {mixed} root 
*/
dijit.range.getCommonAncestor=function(n1, n2, root){};
/**
 * @param {DomNode} node 
 * @param {RegEx} [regex] 
 * @param {DomNode} [root] 
*/
dijit.range.getBlockAncestor=function(node, regex, root){};
/**
 * @param {DomNode} node 
 * @param {RegEx} [regex] 
 * @param {DomNode} [root] 
*/
dijit.range.getAncestor=function(node, regex, root){};
/**
 * @param {Window} [window] 
*/
dijit.range.create=function(window){};
/**
 * @param {DomNode} container 
 * @param {DomNode} node 
 * @param {Int} offset 
*/
dijit.range.atEndOfContainer=function(container, node, offset){};
/**
 * @param {DomNode} container 
 * @param {DomNode} node 
 * @param {Int} offset 
*/
dijit.range.atBeginningOfContainer=function(container, node, offset){};
/**
 * @param {mixed} startnode 
 * @param {mixed} next 
*/
dijit.range.adjacentNoneTextNode=function(startnode, next){};
/**
*/
dijit.range.W3CRange=function(){};
/**
 * @namespace
*/
dijit.range.ie={};
/**
 * @class
 * @returns {dijit.range.W3CRange} new instance
*/
dijit.range.W3CRange=function(){};
/**
 * @param {mixed} node 
 * @param {mixed} offset 
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype.setStartBefore=function(node, offset){};
/**
 * @param {mixed} node 
 * @param {mixed} offset 
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype.setStartAfter=function(node, offset){};
/**
 * @param {mixed} node 
 * @param {mixed} offset 
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype.setStart=function(node, offset){};
/**
 * @param {mixed} node 
 * @param {mixed} offset 
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype.setEndBefore=function(node, offset){};
/**
 * @param {mixed} node 
 * @param {mixed} offset 
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype.setEndAfter=function(node, offset){};
/**
 * @param {mixed} node 
 * @param {mixed} offset 
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype.setEnd=function(node, offset){};
/**
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype.getBookmark=function(){};
/**
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype.detach=function(){};
/**
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype.deleteContents=function(){};
/**
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype.cloneRange=function(){};
/**
 * @private
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype._updateInternal=function(){};
/**
 * @param {mixed} what 
 * @param {mixed} node 
 * @param {mixed} offset 
 * @param {mixed} ext 
 * @private
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype._setPoint=function(what, node, offset, ext){};
/**
 * @private
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype._select=function(){};
/**
 * @private
 * @memberOf dijit.range.W3CRange
*/
dijit.range.W3CRange.prototype._getIERange=function(){};
/**
 * @param {mixed} range 
 * @param {mixed} startContainer 
 * @param {mixed} startOffset 
 * @param {mixed} endContainer 
 * @param {mixed} endOffset 
 * @param {mixed} collapsed 
*/
dijit.range.ie.setRange=function(range, startContainer, startOffset, endContainer, endOffset, collapsed){};
/**
 * @param {mixed} range 
 * @param {mixed} container 
 * @param {mixed} offset 
*/
dijit.range.ie.setEndPoint=function(range, container, offset){};
/**
 * @param {mixed} win 
*/
dijit.range.ie.selection=function(win){};
/**
 * @param {mixed} range 
 * @param {mixed} end 
*/
dijit.range.ie.getEndPoint=function(range, end){};
/**
 * @param {mixed} range 
*/
dijit.range.ie.decomposeTextRange=function(range){};
/**
 * @param {mixed} range 
*/
dijit.range.ie.decomposeControlRange=function(range){};
/**
 * @class
 * @returns {dijit.range.ie.selection} new instance
*/
dijit.range.ie.selection=function(){};
/**
*/
dijit.range.ie.selection.removeAllRanges=function(){};
/**
 * @param {mixed} i 
*/
dijit.range.ie.selection.getRangeAt=function(i){};
/**
 * @param {mixed} r 
 * @param {boolean} internal 
*/
dijit.range.ie.selection.addRange=function(r, internal){};
/**
 * @private
*/
dijit.range.ie.selection._getCurrentSelection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 dijit._editor.RichText is the core of dijit.Editor, which provides basic<br>
 *	 WYSIWYG editing features.<br>
 * </blockquote>
 * dijit._editor.RichText is the core of dijit.Editor, which provides basic<br>
 * WYSIWYG editing features. It also encapsulates the differences<br>
 * of different js engines for various browsers.  Do not use this widget<br>
 * with an HTML &amp;lt;TEXTAREA&amp;gt; tag, since the browser unescapes XML escape characters,<br>
 * like &amp;lt;.  This can have unexpected behavior and lead to security issues<br>
 * such as scripting attacks.
 * @class
 * @extends dijit._Widget
 * @extends dijit._CssStateMixin
 * @param {mixed} params 
 * @returns {dijit._editor.RichText} new instance
*/
dijit._editor.RichText=function(params){};
/**
 * @namespace
*/
dijit._editor.RichText.window={};
/**
 * @namespace
*/
dijit._editor.RichText.iframe={};
/**
 * @namespace
*/
dijit._editor.RichText.editNode={};
/**
 * @namespace
*/
dijit._editor.RichText.domNode={};
/**
 * @namespace
*/
dijit._editor.RichText.document={};
/**
 * @namespace
 * @private
*/
dijit._editor.RichText._mozSettingProps={};
/**
 * <b>Summary:</b><blockquote>
 *	 Add some default key handlers<br>
 * </blockquote>
 * Overwrite this to setup your own handlers. The default<br>
 * implementation does not use Editor commands, but directly<br>
 * executes the builtin commands within the underlying browser<br>
 * support.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.setupDefaultShortcuts=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function sets the content. No undo history is preserved.<br>
 *	 Users should use set('value', ...) instead.<br>
 * </blockquote>
 * @param {String} html 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.setValue=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated, use set('disabled', ...) instead.<br>
 * </blockquote>
 * @param {Boolean} disabled 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.setDisabled=function(disabled){};
/**
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function set the content while trying to maintain the undo stack<br>
 *	 (now only works fine with Moz, this is identical to setValue in all<br>
 *	 other browsers)<br>
 * </blockquote>
 * @param {String} html 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.replaceValue=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 remove an external stylesheet for the editing area<br>
 * </blockquote>
 * @param {dojo._Url} uri 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.removeStyleSheet=function(uri){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check the value of a given command. This matters most for<br>
 *	 custom selections and complex values like font value setting.<br>
 * </blockquote>
 * @param {mixed} command 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.queryCommandValue=function(command){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check the state of a given command and returns true or false.<br>
 * </blockquote>
 * @param {mixed} command 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.queryCommandState=function(command){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether a command is enabled or not.<br>
 * </blockquote>
 * @param {String} command The command to execute
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.queryCommandEnabled=function(command){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tests whether a command is supported by the host. Clients<br>
 *	 SHOULD check whether a command is supported before attempting<br>
 *	 to use it, behaviour for unsupported commands is undefined.<br>
 * </blockquote>
 * @param {String} command The command to test for
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.queryCommandAvailable=function(command){};
/**
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Place the cursor at the start of the editing area.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.placeCursorAtStart=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Place the cursor at the end of the editing area.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.placeCursorAtEnd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Transforms the node referenced in this.domNode into a rich text editing<br>
 *	 node.<br>
 * </blockquote>
 * Sets up the editing area asynchronously. This will result in<br>
 * the creation and replacement with an iframe.
 * @param {DomNode} [element] 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.open=function(element){};
/**
 * <b>Summary:</b><blockquote>
 *	 This event is fired every updateInterval ms or more<br>
 * </blockquote>
 * If something needs to happen immediately after a<br>
 * user change, please use onDisplayChanged instead.
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.onNormalizedDisplayChanged=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler after the iframe finishes loading.<br>
 * </blockquote>
 * @param {String} html Editor contents should be set to this value
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.onLoad=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onkeyup event<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.onKeyUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for after the user has pressed a key, and the display has been updated.<br>
 *	 (Runs on a timer so that it runs after the display is updated)<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.onKeyPressed=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the various key events<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.onKeyPress=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onkeydown event<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.onKeyDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This event will be fired every time the display context<br>
 *	 changes and the result needs to be reflected in the UI.<br>
 * </blockquote>
 * If you don't want to have update too often,<br>
 * onNormalizedDisplayChanged should be used instead
 * @param {Event} e 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.onDisplayChanged=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for when the user clicks.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is fired if and only if the editor loses focus and<br>
 *	 the content is changed.<br>
 * </blockquote>
 * @param {mixed} newContent 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.onChange=function(newContent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the current content of the editing area (post filters<br>
 *	 are applied).  Users should call get('value') instead.<br>
 * </blockquote>
 * @param {Boolean} [nonDestructive] defaults to false. Should the post-filtering be run over a copy
 * of the live DOM? Most users should pass &quot;true&quot; here unless they<br>
 * *really* know that none of the installed filters are going to<br>
 * mess up the editing session.
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.getValue=function(nonDestructive){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   Use dijit/_editor/html::_getNodeHtml() instead.<br>
 * </blockquote>
 * @param {DomNode} node 
 * @returns {String} -
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.getNodeHtml=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   Use dijit/_editor/html::getChildrenHtml() instead.<br>
 * </blockquote>
 * @param {DomNode} dom 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.getNodeChildrenHtml=function(dom){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function for obtaining the height of the header node<br>
 * </blockquote>
 * @returns {Number} -
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.getHeaderHeight=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function for obtaining the height of the footer node<br>
 * </blockquote>
 * @returns {Number} -
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.getFooterHeight=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Move focus to this editor<br>
 * </blockquote>
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.focus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Executes a command in the Rich Text area<br>
 * </blockquote>
 * @param {String} command The command to execute
 * @param {An} argument optional argument to the command
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.execCommand=function(command, argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds escape sequences for special characters in XML.<br>
 *	 Optionally skips escapes for single quotes<br>
 * </blockquote>
 * @param {String} str 
 * @param {Boolean} noSingleQuotes 
 * @private
 * @returns {string} -
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.escapeXml=function(str, noSingleQuotes){};
/**
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Kills the editor and optionally writes back the modified contents to the<br>
 *	 element from which it originated.<br>
 * </blockquote>
 * @param {Boolean} [save] Whether or not to save the changes. If false, the changes are discarded.
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.close=function(save){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove focus from this instance.<br>
 * </blockquote>
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.blur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 add an external stylesheet for the editing area<br>
 * </blockquote>
 * @param {dojo._Url} uri A dojo.uri.Uri pointing to the url of the external css file
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.addStyleSheet=function(uri){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a handler for a keyboard shortcut<br>
 * </blockquote>
 * The key argument should be in lowercase if it is a letter character
 * @param {String} key 
 * @param {Boolean} ctrl 
 * @param {Boolean} shift 
 * @param {Function} handler 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype.addKeyHandler=function(key, ctrl, shift, handler){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the unlink of an 'a' tag.<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._unlinkImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the test for if the unlink<br>
 *	 command should be enabled or not.<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._unlinkEnabledImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements an over-ride of the underline command.<br>
 * </blockquote>
 * @param {Not} argument used, operates by selection.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._underlineImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to return the tab names that are associated<br>
 *	 with a particular style.<br>
 * </blockquote>
 * @param {String} command The command to return tags for.
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._tagNamesForCommand=function(command){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements an over-ride of the superscript command.<br>
 * </blockquote>
 * @param {Not} argument used, operates by selection.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._superscriptImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements an over-ride of the superscript command.<br>
 * </blockquote>
 * @param {Not} argument used, operates by selection.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._subscriptImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for stripping out the breaker spans inserted by the formatting command.<br>
 *	 Registered as a filter for IE, handles the breaker spans needed to fix up<br>
 *	 How bold/italic/etc, work when selection is collapsed (single cursor).<br>
 * </blockquote>
 * @param {mixed} node 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._stripBreakerNodes=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements an over-ride of the strikethrough command.<br>
 * </blockquote>
 * @param {Not} argument used, operates by selection.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._strikethroughImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 Registers that attr(&amp;quot;value&amp;quot;, foo) should call setValue(foo)<br>
 * </blockquote>
 * @param {String} value 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._setValueAttr=function(value){};
/**
 * @param {Boolean} value 
 * @private
 * @returns {this method requires init to be complete|! _disabledOK} -
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._setDisabledAttr=function(value){};
/**
 * @param {Boolean} disabled 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._setDisableSpellCheckAttr=function(disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Saves the content in an onunload event if the editor has not been closed<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._saveContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the named method of dijit._editor.selection over the<br>
 *	 current editor instance's window, with the passed args.<br>
 * </blockquote>
 * @param {mixed} name 
 * @param {mixed} args 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._sCall=function(name, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Post filter to remove unwanted HTML attributes generated by webkit<br>
 * </blockquote>
 * @param {String} html 
 * @private
 * @returns {String} -
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._removeWebkitBogus=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to adjust selection range by removing the current<br>
 *	 start node.<br>
 * </blockquote>
 * @param {The} node node to remove from the starting range.
 * @param {The} range range to adapt.
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._removeStartingRangeFromRange=function(node, range){};
/**
 * <b>Summary:</b><blockquote>
 *	 Post filter to remove unwanted HTML attributes generated by mozilla<br>
 * </blockquote>
 * @param {String} html 
 * @private
 * @returns {String} -
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._removeMozBogus=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 See queryCommandAvailable().<br>
 * </blockquote>
 * @param {String} command 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._queryCommandAvailable=function(command){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pre-filter to do fixing to href attributes on &amp;lt;a&amp;gt; and &amp;lt;img&amp;gt; tags<br>
 * </blockquote>
 * @param {String} html 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._preFixUrlAttributes=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Filter the input before setting the content of the editing<br>
 *	 area. DOM pre-filtering may happen after this<br>
 *	 string-based filtering takes place but as of 1.2, this is not<br>
 *	 guaranteed for operations such as the inserthtml command.<br>
 * </blockquote>
 * @param {String} html 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._preFilterContent=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 filter the input's live DOM. All filter operations should be<br>
 *	 considered to be &amp;quot;live&amp;quot; and operating on the DOM that the user<br>
 *	 will be interacting with in their editing session.<br>
 * </blockquote>
 * @param {DomNode} dom 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._preDomFilterContent=function(dom){};
/**
 * <b>Summary:</b><blockquote>
 *	 filter the output after getting the content of the editing area<br>
 * </blockquote>
 * post-filtering allows plug-ins and users to specify any number<br>
 * of transforms over the editor's content, enabling many common<br>
 * use-cases such as transforming absolute to relative URLs (and<br>
 * vice-versa), ensuring conformance with a particular DTD, etc.<br>
 * The filters are registered in the contentDomPostFilters and<br>
 * contentPostFilters arrays. Each item in the<br>
 * contentDomPostFilters array is a function which takes a DOM<br>
 * Node or array of nodes as its only argument and returns the<br>
 * same. It is then passed down the chain for further filtering.<br>
 * The contentPostFilters array behaves the same way, except each<br>
 * member operates on strings. Together, the DOM and string-based<br>
 * filtering allow the full range of post-processing that should<br>
 * be necessaray to enable even the most agressive of post-editing<br>
 * conversions to take place.<br>
 * <br>
 * If nonDestructive is set to "true", the nodes are cloned before<br>
 * filtering proceeds to avoid potentially destructive transforms<br>
 * to the content which may still needed to be edited further.<br>
 * Once DOM filtering has taken place, the serialized version of<br>
 * the DOM which is passed is run through each of the<br>
 * contentPostFilters functions.
 * @param {DomNode|DomNode[]|String} [dom] a node, set of nodes, which to filter using each of the current
 * members of the contentDomPostFilters and contentPostFilters arrays.
 * @param {Boolean} [nonDestructive] defaults to &quot;false&quot;. If true, ensures that filtering happens on
 * a clone of the passed-in content and not the actual node<br>
 * itself.
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._postFilterContent=function(dom, nonDestructive){};
/**
 * <b>Summary:</b><blockquote>
 *	 c<br>
 *	 This function implements the test for if the paste<br>
 *	 command should be enabled or not.<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._pasteEnabledImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 IE only to prevent 2 clicks to focus<br>
 * </blockquote>
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._onIEMouseDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called from focus manager when focus has moved into this editor<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._onFocus=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called from focus manager when focus has moved away from this editor<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._onBlur=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convert 'strong' and 'em' to 'b' and 'i'.<br>
 * </blockquote>
 * Moz can not handle strong/em tags correctly, so to help<br>
 * mozilla and also to normalize output, convert them to 'b' and 'i'.<br>
 * <br>
 * Note the IE generates 'strong' and 'em' rather than 'b' and 'i'
 * @param {String} html 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._normalizeFontStyle=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used as the advice function to map our<br>
 *	 normalized set of commands to those supported by the target<br>
 *	 browser.<br>
 * </blockquote>
 * @param {String} cmd 
 * @param {Anything} [argument] 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._normalizeCommand=function(cmd, argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 When IE is running in a non-English locale, the API actually changes,<br>
 *	 so that we have to say (for example) danraku instead of p (for paragraph).<br>
 *	 Handle that here.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._localizeEditorCommands=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements an over-ride of the italic command.<br>
 * </blockquote>
 * @param {Not} argument used, operates by selection.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._italicImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to test if a node is devoid of real content.<br>
 * </blockquote>
 * @param {The} node node to check.
 * @param {mixed} startOffset 
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._isNodeEmpty=function(node, startOffset){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the insertunorderedlist command<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._insertunorderedlistImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the test for if the inserttable<br>
 *	 command should be enabled or not.<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._inserttableEnabledImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the insertorderedlist command<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._insertorderedlistImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the insertion of HTML content into<br>
 *	 a point on the page.<br>
 * </blockquote>
 * @param {The} argument content to insert, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._inserthtmlImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the insertion of HTML 'HR' tags.<br>
 *	 into a point on the page.  IE doesn't to it right, so<br>
 *	 we have to use an alternate form<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._inserthorizontalruleImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the hilitecolor command<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._hilitecolorImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function handles appplying text color as best it is<br>
 *	 able to do so when the selection is collapsed, making the<br>
 *	 behavior cross-browser consistent. It also handles the name<br>
 *	 and size for IE.<br>
 * </blockquote>
 * @param {The} command command.
 * @param {Any} argument additional arguments.
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._handleTextColorOrProperties=function(command, argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook to make attr(&amp;quot;value&amp;quot;) work<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An internal function for computing the cumulative height of all child nodes of 'node'<br>
 * </blockquote>
 * @param {The} node node to process the children of;
 * @private
 * @returns {Number} -
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._getNodeChildrenHeight=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generates the boilerplate text of the document inside the iframe (ie, &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;...&amp;lt;/head&amp;gt;&amp;lt;body/&amp;gt;&amp;lt;/html&amp;gt;).<br>
 *	 Editor content (if not blank) should be added afterwards.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._getIframeDocTxt=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the forecolor command<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._forecolorImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the fontsize command<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._fontsizeImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the fontname command<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._fontnameImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the test for if the cut<br>
 *	 command should be enabled or not.<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._cutEnabledImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the test for if the create link<br>
 *	 command should be enabled or not.<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._createlinkEnabledImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the test for if the copy<br>
 *	 command should be enabled or not.<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._copyEnabledImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 Implementation to call to the native queryCommandEnabled of the browser.<br>
 * </blockquote>
 * @param {The} command command to check.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._browserQueryCommandEnabled=function(command){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements an over-ride of the bold command.<br>
 * </blockquote>
 * @param {Not} argument used, operates by selection.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._boldImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function implements the backcolor command<br>
 * </blockquote>
 * @param {arguments} argument to the exec command, if any.
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._backcolorImpl=function(argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 apply the specified css files in styleSheets<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._applyEditingAreaStyleSheets=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 In the case there are multiple text nodes in a row the offset may not be within the node.<br>
 *	 If the offset is larger than the node length, it will attempt to find<br>
 *	 the next text sibling until it locates the text node in which the offset refers to<br>
 * </blockquote>
 * @param {DomNode} node The node to check.
 * @param {Int} offset The position to find within the text node
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._adjustNodeAndOffset=function(node, offset){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to adapt the IE range by removing leading 'newlines'<br>
 *	 Needed to fix issue with bold/italics/underline not working if<br>
 *	 range included leading 'newlines'.<br>
 *	 In IE, if a user starts a selection at the very end of a line,<br>
 *	 then the native browser commands will fail to execute correctly.<br>
 *	 To work around the issue,  we can remove all empty nodes from<br>
 *	 the start of the range selection.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._adaptIESelection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function handles normalizing the IE list behavior as<br>
 *	 much as possible.<br>
 * </blockquote>
 * @param {The} command list command to execute.
 * @param {Any} argument additional argument.
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._adaptIEList=function(command, argument){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to handle IE's quirkiness regarding how it handles<br>
 *	 format commands on a word.  This involves a lit of node splitting<br>
 *	 and format cloning.<br>
 * </blockquote>
 * @param {The} command format command, needed to check if the desired
 * command is true or not.
 * @private
 * @memberOf dijit._editor.RichText
*/
dijit._editor.RichText.prototype._adaptIEFormatAreaAndExec=function(command){};
/**
 * @namespace
*/
dijit._editor.RichText.textarea={};
/**
 * <b>Summary:</b><blockquote>
 *	 clear previous selection and select the content of the node<br>
 *	 (excluding the node itself)<br>
 * </blockquote>
 * @param {DomNode} element DOMNode The element you wish to select the children content of.
 * @param {Boolean} [nochangefocus] Boolean to indicate if the foxus should change or not.
*/
dijit._editor.selection.selectElementChildren=function(element, nochangefocus){};
/**
 * <b>Summary:</b><blockquote>
 *	 clear previous selection and select element (including all its children)<br>
 * </blockquote>
 * @param {DomNode} element DOMNode The element to select.
 * @param {Boolean} [nochangefocus] Boolean indicating if the focus should be changed.  IE only.
*/
dijit._editor.selection.selectElement=function(element, nochangefocus){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to delete the currently selected content from the document.<br>
 * </blockquote>
 * @returns {Selection} -
*/
dijit._editor.selection.remove=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to determine if a node is one of an array of tags.<br>
 * </blockquote>
 * @param {DomNode} node The node to inspect.
 * @param {String[]} tags 
 * @returns {String} -
*/
dijit._editor.selection.isTag=function(node, tags){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function determines if 'node' is<br>
 *	 in the current selection.<br>
 * </blockquote>
 * @param {mixed} node 
 * @returns {boolean} -
*/
dijit._editor.selection.inSelection=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether current selection has a  parent element which is<br>
 *	 of type tagName (or one of the other specified tagName)<br>
 * </blockquote>
 * @param {String} tagName The tag name to determine if it has an ancestor of.
 * @returns {Boolean} -
*/
dijit._editor.selection.hasAncestorElement=function(tagName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the selection type (like win.doc.select.type in IE).<br>
 * </blockquote>
 * @returns {String} -
*/
dijit._editor.selection.getType=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the text (no html tags) included in the current selection or null if no text is selected<br>
 * </blockquote>
 * @returns {String} -
*/
dijit._editor.selection.getSelectedText=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the html text of the current selection or null if unavailable<br>
 * </blockquote>
 * @returns {String} -
*/
dijit._editor.selection.getSelectedHtml=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves the selected element (if any), just in the case that<br>
 *	 a single element (object like and image or a table) is<br>
 *	 selected.<br>
 * </blockquote>
*/
dijit._editor.selection.getSelectedElement=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to locate a parent node that matches one of a set of tags<br>
 * </blockquote>
 * @param {DomNode} node The node to inspect.
 * @param {String[]} tags 
 * @returns {DOMNode} -
*/
dijit._editor.selection.getParentOfType=function(node, tags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the parent element of the current selection<br>
 * </blockquote>
*/
dijit._editor.selection.getParentElement=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the parent element of the current selection which is of<br>
 *	 type tagName (or one of the other specified tagName)<br>
 * </blockquote>
 * @param {String} tagName The tag name to determine if it has an ancestor of.
 * @returns {DOMNode} -
*/
dijit._editor.selection.getAncestorElement=function(tagName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to collapse (clear), the current selection<br>
 * </blockquote>
 * @param {Boolean} beginning Boolean to indicate whether to collapse the cursor to the beginning of the selection or end.
*/
dijit._editor.selection.collapse=function(beginning){};
/**
 * <b>Summary:</b><blockquote>
 *	 A rich text Editing widget<br>
 * </blockquote>
 * This widget provides basic WYSIWYG editing features, based on the browser's<br>
 * underlying rich text editing capability, accompanied by a toolbar (`dijit.Toolbar`).<br>
 * A plugin model is available to extend the editor's capabilities as well as the<br>
 * the options available in the toolbar.  Content generation may vary across<br>
 * browsers, and clipboard operations may have different results, to name<br>
 * a few limitations.  Note: this widget should not be used with the HTML<br>
 * &amp;lt;TEXTAREA&amp;gt; tag -- see dijit._editor.RichText for details.
 * @see dijit._editor.RichText
 * @class
 * @returns {dijit.Editor} new instance
*/
dijit.Editor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for editor undo (ex: ctrl-z) operation<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.undo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize the editor to the specified size, see `dijit.layout._LayoutWidget.resize`<br>
 * </blockquote>
 * @see dijit.layout._LayoutWidget
 * @param {mixed} size 
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.resize=function(size){};
/**
 * <b>Summary:</b><blockquote>
 *	 over-ride of replaceValue to support custom undo and stack maintenance.<br>
 * </blockquote>
 * @param {String} html 
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.replaceValue=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for editor redo (ex: ctrl-y) operation<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.redo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if specified editor command is enabled.<br>
 *	 Used by the plugins to know when to highlight/not highlight buttons.<br>
 * </blockquote>
 * @param {mixed} cmd 
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.queryCommandEnabled=function(cmd){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extension to make sure a deferred is in place before certain functions<br>
 *	 execute, like making sure all the plugins are properly inserted.<br>
 * </blockquote>
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.postMixInProperties=function(){};
/**
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onkeydown event.<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.onKeyDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for when editor is clicked<br>
 * </blockquote>
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.onClick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called on IE right before focus is lost.   Saves the selected range.<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.onBeforeDeactivate=function(e){};
/**
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.onBeforeActivate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called from `dijit.layout._LayoutWidget.resize`.  This shouldn't be called directly<br>
 * </blockquote>
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.layout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Main handler for executing any commands to the editor, like paste, bold, etc.<br>
 *	 Called by plugins, but not meant to be called by end users.<br>
 * </blockquote>
 * @param {mixed} cmd 
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.execCommand=function(cmd){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called to note that the user has stopped typing alphanumeric characters, if it's not already noted.<br>
 *	 Deals with saving undo; see editActionInterval parameter.<br>
 * </blockquote>
 * @param {mixed} ignore_caret 
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.endEditing=function(ignore_caret){};
/**
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called to note that the user has started typing alphanumeric characters, if it's not already noted.<br>
 *	 Deals with saving undo; see editActionInterval parameter.<br>
 * </blockquote>
 * @param {mixed} cmd 
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.beginEditing=function(cmd){};
/**
 * <b>Summary:</b><blockquote>
 *	 takes a plugin name as a string or a plugin instance and<br>
 *	 adds it to the toolbar and associates it with this editor<br>
 *	 instance. The resulting plugin is added to the Editor's<br>
 *	 plugins array. If index is passed, it's placed in the plugins<br>
 *	 array at that index. No big magic, but a nice helper for<br>
 *	 passing in plugin names via markup.<br>
 * </blockquote>
 * @param {String||Object||Function} plugin String, args object, plugin instance, or plugin constructor
 * <br>
 * args:<br>
 * This object will be passed to the plugin constructor
 * @param {Integer} [index] Used when creating an instance from
 * something already in this.plugins. Ensures that the new<br>
 * instance is assigned to this.plugins at that index.
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype.addPlugin=function(plugin, index){};
/**
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._setStateClass=function(){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._setDisabledAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Save the currently selected text in _savedSelection attribute<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._saveSelection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Re-select the text specified in _savedSelection attribute;<br>
 *	 see _saveSelection().<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._restoreSelection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride of paste command control to make execCommand cleaner<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._pasteImpl=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 IE only to prevent 2 clicks to focus<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._onIEMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called from focus manager when focus has moved away from this editor<br>
 * </blockquote>
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Selects the text specified in bookmark b<br>
 * </blockquote>
 * @param {mixed} b 
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._moveToBookmark=function(b){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the currently selected text<br>
 * </blockquote>
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._getBookmark=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the user stops typing alphanumeric characters.<br>
 *	 Deals with saving undo; see editActionInterval parameter.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._endEditing=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride of cut command control to make execCommand cleaner<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._cutImpl=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride of copy command control to make execCommand cleaner<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._copyImpl=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to handle processing clipboard commands (or at least try to).<br>
 * </blockquote>
 * @param {mixed} cmd 
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._clipboardCommand=function(cmd){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reverts editor to &amp;quot;to&amp;quot; setting, from the undo stack.<br>
 * </blockquote>
 * @param {mixed} from 
 * @param {mixed} to 
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._changeToStep=function(from, to){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the user starts typing alphanumeric characters.<br>
 *	 Deals with saving undo; see editActionInterval parameter.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Editor
*/
dijit.Editor.prototype._beginEditing=function(){};
/**
 * @namespace
*/
dijit.Editor.document={};
/**
 * <b>Summary:</b><blockquote>
 *	 Registers listeners on the specified window (either the main<br>
 *	 window or an iframe's window) to detect when the user has clicked somewhere<br>
 *	 or focused somewhere.<br>
 * </blockquote>
 * Users should call registerIframe() instead of this method.
 * @param {Window} [targetWindow] If specified this is the window associated with the iframe,
 * i.e. iframe.contentWindow.
 * @param {DOMNode} [effectiveNode] If specified, report any focus events inside targetWindow as
 * an event on effectiveNode, rather than on evt.target.<br>
*/
dijit.focus.registerWin=function(targetWindow, effectiveNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Registers listeners on the specified iframe so that any click<br>
 *	 or focus event on that iframe (or anything in it) is reported<br>
 *	 as a focus/click event on the &amp;lt;iframe&amp;gt; itself.<br>
 * </blockquote>
 * Currently only used by editor.
 * @param {mixed} iframe 
*/
dijit.focus.registerIframe=function(iframe){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to widget to provide _onFocus() and _onBlur() methods that<br>
 *	 fire when a widget or it's descendants get/lose focus<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit._FocusMixin} new instance
*/
dijit._FocusMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin that implements the base functionality for `dijit.form.ComboBox`/`dijit.form.FilteringSelect`<br>
 * </blockquote>
 * All widgets that mix in dijit.form._AutoCompleterMixin must extend `dijit.form._FormValueWidget`.
 * @class
 * @private
 * @returns {dijit.form._AutoCompleterMixin} new instance
*/
dijit.form._AutoCompleterMixin=function(){};
/**
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype.reset=function(){};
/**
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subclasses must call this method from their postCreate() methods<br>
 * </blockquote>
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype.postCreate=function(){};
/**
 * @param {Function} callback 
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype.loadDropDown=function(callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Computes the label to display based on the dojo.data store item.<br>
 * </blockquote>
 * @param {item} item 
 * @param {dojo.store.api.Store} store 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype.labelFunc=function(item, store){};
/**
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype.isLoaded=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Highlights the string entered by the user in the menu.  By default this<br>
 *	 highlights the first occurrence found. Override this method<br>
 *	 to implement your custom highlighting.<br>
 * </blockquote>
 * @param {String} label 
 * @param {String} find 
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype.doHighlight=function(label, find){};
/**
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype.closeDropDown=function(){};
/**
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._startSearchFromInput=function(){};
/**
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._startSearchAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Starts a search for elements matching key (key==&amp;quot;&amp;quot; means to return all items),<br>
 *	 and calls _openResultList() when the search completes, to display the results.<br>
 * </blockquote>
 * @param {String} key 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._startSearch=function(key){};
/**
 * <b>Summary:</b><blockquote>
 *	 Display the drop down if not already displayed, or if it is displayed, then<br>
 *	 reposition it if necessary (reposition may be necessary if drop down's height changed).<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._showResultList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('value', value) works.<br>
 * </blockquote>
 * Sets the value of the select.
 * @param {String} value 
 * @param {Boolean} [priorityChange] 
 * @param {String} [displayedValue] 
 * @param {item} [item] 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._setValueAttr=function(value, priorityChange, displayedValue, item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Setter for textDir, needed for the dropDown's textDir update.<br>
 * </blockquote>
 * Users shouldn't call this function; they should be calling<br>
 * set('textDir', value)
 * @param {String} textDir 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._setTextDirAttr=function(textDir){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the displayed valued in the input box, and the hidden value<br>
 *	 that gets submitted, based on a dojo.data store item.<br>
 * </blockquote>
 * Users shouldn't call this function; they should be calling<br>
 * set('item', value)
 * @param {item} item 
 * @param {Boolean} [priorityChange] 
 * @param {String} [displayedValue] 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._setItemAttr=function(item, priorityChange, displayedValue){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._setDisabledAttr=function(value){};
/**
 * @param {DomNode} element 
 * @param {Number} location 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._setCaretPos=function(element, location){};
/**
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._setBlurValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Menu callback function, called when an item in the menu is selected.<br>
 * </blockquote>
 * @param {DomNode} target 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._selectOption=function(target){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when a search completes.<br>
 * </blockquote>
 * 1. generates drop-down list and calls _showResultList() to display it<br>
 * 2. if this result list is from user pressing "more choices"/"previous choices"<br>
 * then tell screen reader to announce new option
 * @param {Object} results 
 * @param {Object} query 
 * @param {Object} options 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._openResultList=function(results, query, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles keyboard events<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @returns {throw out weird key combinations and spurious events} -
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._onKey=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles paste events<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._onInput=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper for postMixInProperties() to set this.value based on data inlined into the markup.<br>
 *	 Returns the attribute name in the item (in dijit.form._ComboBoxDataStore) to use as the value.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._getValueField=function(){};
/**
 * @param {String} text 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._getQueryString=function(text){};
/**
 * @param {Item} item 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._getMenuLabelFromItem=function(item){};
/**
 * @param {DomNode} element 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._getCaretPos=function(element){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds escape sequences for special characters in XML: &amp;amp;&amp;lt;&amp;gt;&amp;quot;'<br>
 * </blockquote>
 * @param {String} str 
 * @private
 * @returns {string} -
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._escapeHtml=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fill in the textbox with the first item from the drop down<br>
 *	 list, and highlight the characters that were<br>
 *	 auto-completed. For example, if user typed &amp;quot;CA&amp;quot; and the<br>
 *	 drop down list appeared, the textbox would be changed to<br>
 *	 &amp;quot;California&amp;quot; and &amp;quot;ifornia&amp;quot; would be highlighted.<br>
 * </blockquote>
 * @param {String} text 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._autoCompleteText=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 a11y code that puts the highlighted option in the textbox.<br>
 *	 This way screen readers will know what is happening in the<br>
 *	 menu.<br>
 * </blockquote>
 * @param {Node} node 
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._announceOption=function(node){};
/**
 * @private
 * @memberOf dijit.form._AutoCompleterMixin
*/
dijit.form._AutoCompleterMixin.prototype._abortQuery=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Basically the same thing as a normal HTML button, but with special styling.<br>
 * </blockquote>
 * Buttons can display a label, an icon, or both.<br>
 * A label should always be specified (through innerHTML) or the label<br>
 * attribute.  It can be hidden via showLabel=false.
 * @class
 * @extends dijit.form._FormWidget
 * @extends dijit.form._ButtonMixin
 * @returns {dijit.form.Button} new instance
 * @example
 * 	&lt;button data-dojo-type="dijit.form.Button" onClick="..."&gt;Hello world&lt;/button&gt;
 * @example
 * 	var button1 = new dijit.form.Button({label: "hello world", onClick: foo});
 * 	dojo.body().appendChild(button1.domNode);
*/
dijit.form.Button=function(){};
/**
 * @namespace
 * @private
*/
dijit.form.Button._setIconClassAttr={};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use set('label', ...) instead.<br>
 * </blockquote>
 * @param {String} content 
 * @memberOf dijit.form.Button
*/
dijit.form.Button.prototype.setLabel=function(content){};
/**
 * @param {mixed} val 
 * @private
 * @memberOf dijit.form.Button
*/
dijit.form.Button.prototype._setShowLabelAttr=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook for set('label', ...) to work.<br>
 * </blockquote>
 * Set the label (text) of the button; takes an HTML string.<br>
 * If the label is hidden (showLabel=false) then and no title has<br>
 * been specified, then label is also set as title attribute of icon.
 * @param {String} content 
 * @private
 * @memberOf dijit.form.Button
*/
dijit.form.Button.prototype._setLabelAttr=function(content){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to handle click actions<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.form.Button
*/
dijit.form.Button.prototype._onClick=function(e){};
/**
 * @param {DomNode} source 
 * @private
 * @memberOf dijit.form.Button
*/
dijit.form.Button.prototype._fillContent=function(source){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets corresponding to native HTML elements such as &amp;lt;checkbox&amp;gt; or &amp;lt;button&amp;gt;,<br>
 *	 which can be children of a &amp;lt;form&amp;gt; node or a `dijit.form.Form` widget.<br>
 * </blockquote>
 * Represents a single HTML element.<br>
 * All these widgets should have these attributes just like native HTML input elements.<br>
 * You can set them during widget construction or afterwards, via `dijit._Widget.attr`.<br>
 * <br>
 * They also share some common methods.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._CssStateMixin
 * @extends dijit.form._FormWidgetMixin
 * @private
 * @returns {dijit.form._FormWidget} new instance
*/
dijit.form._FormWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use set('value', ...) instead.<br>
 * </blockquote>
 * @param {String} value 
 * @memberOf dijit.form._FormWidget
*/
dijit.form._FormWidget.prototype.setValue=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use set('disabled', ...) instead.<br>
 * </blockquote>
 * @param {Boolean} disabled 
 * @memberOf dijit.form._FormWidget
*/
dijit.form._FormWidget.prototype.setDisabled=function(disabled){};
/**
 * @memberOf dijit.form._FormWidget
*/
dijit.form._FormWidget.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use get('value') instead.<br>
 * </blockquote>
 * @memberOf dijit.form._FormWidget
*/
dijit.form._FormWidget.prototype.getValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin to add a thin standard API wrapper to a normal HTML button<br>
 * </blockquote>
 * A label should always be specified (through innerHTML) or the label attribute.<br>
 * Attach points:<br>
 * focusNode (required): this node receives focus<br>
 * valueNode (optional): this node's value gets submitted with FORM elements<br>
 * containerNode (optional): this node gets the innerHTML assignment for label
 * @class
 * @private
 * @returns {dijit.form._ButtonMixin} new instance
 * @example
 * 	&lt;button data-dojo-type="dijit.form.Button" onClick="..."&gt;Hello world&lt;/button&gt;
 * @example
 * 	var button1 = new dijit.form.Button({label: "hello world", onClick: foo});
 * 	dojo.body().appendChild(button1.domNode);
*/
dijit.form._ButtonMixin=function(){};
/**
 * @memberOf dijit.form._ButtonMixin
*/
dijit.form._ButtonMixin.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback for when button is clicked.<br>
 *	 If type=&amp;quot;submit&amp;quot;, return true to perform submit, or false to cancel it.<br>
 *	 type:<br>
 *	 callback<br>
 * </blockquote>
 * @param {Event} e 
 * @returns {Boolean} -
 * @memberOf dijit.form._ButtonMixin
*/
dijit.form._ButtonMixin.prototype.onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook for set('label', ...) to work.<br>
 * </blockquote>
 * Set the label (text) of the button; takes an HTML string.
 * @param {String} content 
 * @private
 * @memberOf dijit.form._ButtonMixin
*/
dijit.form._ButtonMixin.prototype._setLabelAttr=function(content){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to handle click actions<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.form._ButtonMixin
*/
dijit.form._ButtonMixin.prototype._onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Same as an HTML checkbox, but with fancy styling.<br>
 * </blockquote>
 * User interacts with real html inputs.<br>
 * On onclick (which occurs by mouse click, space-bar, or<br>
 * using the arrow keys to switch the selected radio button),<br>
 * we update the state of the checkbox/radio.<br>
 * <br>
 * There are two modes:<br>
 * 1. High contrast mode<br>
 * 2. Normal mode<br>
 * <br>
 * In case 1, the regular html inputs are shown and used by the user.<br>
 * In case 2, the regular html inputs are invisible but still used by<br>
 * the user. They are turned quasi-invisible and overlay the background-image.
 * @class
 * @extends dijit.form.ToggleButton
 * @extends dijit.form._CheckBoxMixin
 * @returns {dijit.form.CheckBox} new instance
*/
dijit.form.CheckBox=function(){};
/**
 * @memberOf dijit.form.CheckBox
*/
dijit.form.CheckBox.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for value= attribute to constructor, and also calls to<br>
 *	 set('value', val).<br>
 * </blockquote>
 * During initialization, just saves as attribute to the &lt;input type=checkbox&gt;.<br>
 * <br>
 * After initialization,<br>
 * when passed a boolean, controls whether or not the CheckBox is checked.<br>
 * If passed a string, changes the value attribute of the CheckBox (the one<br>
 * specified as "value" when the CheckBox was constructed (ex: &lt;input<br>
 * data-dojo-type="dijit.CheckBox" value="chicken"&gt;)<br>
 * widget.set('value', string) will check the checkbox and change the value to the<br>
 * specified string<br>
 * widget.set('value', boolean) will change the checked state.
 * @param {String|Boolean} newValue 
 * @param {Boolean} priorityChange 
 * @private
 * @memberOf dijit.form.CheckBox
*/
dijit.form.CheckBox.prototype._setValueAttr=function(newValue, priorityChange){};
/**
 * @private
 * @memberOf dijit.form.CheckBox
*/
dijit.form.CheckBox.prototype._onFocus=function(){};
/**
 * @private
 * @memberOf dijit.form.CheckBox
*/
dijit.form.CheckBox.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so get('value') works.<br>
 * </blockquote>
 * If the CheckBox is checked, returns the value attribute.<br>
 * Otherwise returns false.
 * @private
 * @memberOf dijit.form.CheckBox
*/
dijit.form.CheckBox.prototype._getValueAttr=function(){};
/**
 * @private
 * @memberOf dijit.form.CheckBox
*/
dijit.form.CheckBox.prototype._fillContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A templated button widget that can be in two states (checked or not).<br>
 *	 Can be base class for things like tabs or checkbox or radio buttons<br>
 * </blockquote>
 * @class
 * @extends dijit.form.Button
 * @extends dijit.form._ToggleButtonMixin
 * @returns {dijit.form.ToggleButton} new instance
*/
dijit.form.ToggleButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use set('checked', true/false) instead.<br>
 * </blockquote>
 * @param {Boolean} checked 
 * @memberOf dijit.form.ToggleButton
*/
dijit.form.ToggleButton.prototype.setChecked=function(checked){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to provide widget functionality corresponding to an HTML checkbox<br>
 * </blockquote>
 * User interacts with real html inputs.<br>
 * On onclick (which occurs by mouse click, space-bar, or<br>
 * using the arrow keys to switch the selected radio button),<br>
 * we update the state of the checkbox/radio.
 * @class
 * @private
 * @returns {dijit.form._CheckBoxMixin} new instance
*/
dijit.form._CheckBoxMixin=function(){};
/**
 * @memberOf dijit.form._CheckBoxMixin
*/
dijit.form._CheckBoxMixin.prototype.reset=function(){};
/**
 * @memberOf dijit.form._CheckBoxMixin
*/
dijit.form._CheckBoxMixin.prototype.postMixInProperties=function(){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dijit.form._CheckBoxMixin
*/
dijit.form._CheckBoxMixin.prototype._setReadOnlyAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to handle click actions - need to check<br>
 *	 readOnly, since button no longer does that check.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.form._CheckBoxMixin
*/
dijit.form._CheckBoxMixin.prototype._onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Auto-completing text box<br>
 * </blockquote>
 * The drop down box's values are populated from an class called<br>
 * a data provider, which returns a list of values based on the characters<br>
 * that the user has typed into the input box.<br>
 * If OPTION tags are used as the data provider via markup,<br>
 * then the OPTION tag's child text node is used as the widget value<br>
 * when selected.  The OPTION tag's value attribute is ignored.<br>
 * To set the default value when using OPTION tags, specify the selected<br>
 * attribute on 1 of the child OPTION tags.<br>
 * <br>
 * Some of the options to the ComboBox are actually arguments to the data<br>
 * provider.
 * @class
 * @extends dijit.form.ValidationTextBox
 * @extends dijit.form.ComboBoxMixin
 * @returns {dijit.form.ComboBox} new instance
*/
dijit.form.ComboBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for textbox widgets with the ability to validate content of various types and provide user feedback.<br>
 * </blockquote>
 * @class
 * @extends dijit.form.TextBox
 * @returns {dijit.form.ValidationTextBox} new instance
*/
dijit.form.ValidationTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function used to validate the text input against the regular expression.<br>
 * </blockquote>
 * @param {anything} value 
 * @param {dijit.form.ValidationTextBox.__Constraints} constraints 
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype.validator=function(value, constraints){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called by oninit, onblur, and onkeypress.<br>
 * </blockquote>
 * Show missing or invalid messages if appropriate, and highlight textbox field.
 * @param {Boolean} isFocused 
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype.validate=function(isFocused){};
/**
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function used to generate regExp when dependent on constraints.<br>
 *	 Do not specify both regExp and regExpGen.<br>
 * </blockquote>
 * @param {dijit.form.ValidationTextBox.__Constraints} constraints 
 * @returns {String} -
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype.regExpGen=function(constraints){};
/**
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tests if value is valid.<br>
 *	 Can override with your own routine in a subclass.<br>
 * </blockquote>
 * @param {Boolean} isFocused 
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype.isValid=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a hint message to show when widget is first focused<br>
 * </blockquote>
 * @param {Boolean} isFocused 
 * @returns {String} -
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype.getPromptMessage=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an error message to show if appropriate<br>
 * </blockquote>
 * @param {Boolean} isFocused 
 * @returns {String} -
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype.getErrorMessage=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable method to display validation errors/hints.<br>
 *	 By default uses a tooltip.<br>
 * </blockquote>
 * @param {String} message 
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype.displayMessage=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('value', ...) works.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype._setValueAttr=function(){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype._setRequiredAttr=function(value){};
/**
 * @param {String} message 
 * @private
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype._setMessageAttr=function(message){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype._setDisabledAttr=function(value){};
/**
 * @param {Object} constraints 
 * @private
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype._setConstraintsAttr=function(constraints){};
/**
 * @private
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype._refreshState=function(){};
/**
 * @private
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the value is either already valid or could be made valid by appending characters.<br>
 *	 This is used for validation while the user [may be] still typing.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype._isValidSubset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks for whitespace<br>
 * </blockquote>
 * @param {mixed} value 
 * @private
 * @returns {Boolean} -
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype._isEmpty=function(value){};
/**
 * @private
 * @memberOf dijit.form.ValidationTextBox
*/
dijit.form.ValidationTextBox.prototype._computePartialRE=function(){};
/**
 * @private
*/
dijit.form.ValidationTextBox.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides main functionality of ComboBox widget<br>
 * </blockquote>
 * @class
 * @extends dijit._HasDropDown
 * @extends dijit.form._AutoCompleterMixin
 * @returns {dijit.form.ComboBoxMixin} new instance
*/
dijit.form.ComboBoxMixin=function(){};
/**
 * @namespace
*/
dijit.form.ComboBoxMixin.cssStateNodes={};
/**
 * @memberOf dijit.form.ComboBoxMixin
*/
dijit.form.ComboBoxMixin.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 String<br>
 *	 Dropdown widget class used to select a date/time.<br>
 *	 Subclasses should specify this.<br>
 * </blockquote>
*/
dijit.form.ComboBoxMixin.dropDownClass=function(){};
/**
 * @private
 * @memberOf dijit.form.ComboBoxMixin
*/
dijit.form.ComboBoxMixin.prototype._showResultList=function(){};
/**
 * @param {mixed} store 
 * @private
 * @memberOf dijit.form.ComboBoxMixin
*/
dijit.form.ComboBoxMixin.prototype._setStoreAttr=function(store){};
/**
 * @param {Boolean} val 
 * @private
 * @memberOf dijit.form.ComboBoxMixin
*/
dijit.form.ComboBoxMixin.prototype._setHasDownArrowAttr=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus-less menu for internal use in `dijit.form.ComboBox`<br>
 *	 Abstract methods that must be defined externally:<br>
 *	 onChange: item was explicitly chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)<br>
 *	 onPage: next(1) or previous(-1) button pressed<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._TemplatedMixin
 * @extends dijit.form._ListMouseMixin
 * @extends dijit.form._ComboBoxMenuMixin
 * @private
 * @returns {dijit.form._ComboBoxMenu} new instance
*/
dijit.form._ComboBoxMenu=function(){};
/**
 * @memberOf dijit.form._ComboBoxMenu
*/
dijit.form._ComboBoxMenu.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove hover CSS<br>
 * </blockquote>
 * @param {DomNode} node 
 * @memberOf dijit.form._ComboBoxMenu
*/
dijit.form._ComboBoxMenu.prototype.onUnhover=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add selected CSS<br>
 * </blockquote>
 * @param {DomNode} node 
 * @memberOf dijit.form._ComboBoxMenu
*/
dijit.form._ComboBoxMenu.prototype.onSelect=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add hover CSS<br>
 * </blockquote>
 * @param {DomNode} node 
 * @memberOf dijit.form._ComboBoxMenu
*/
dijit.form._ComboBoxMenu.prototype.onHover=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove selected CSS<br>
 * </blockquote>
 * @param {DomNode} node 
 * @memberOf dijit.form._ComboBoxMenu
*/
dijit.form._ComboBoxMenu.prototype.onDeselect=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle keystroke event forwarded from ComboBox, returning false if it's<br>
 *	 a keystroke I recognize and process, true otherwise.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @memberOf dijit.form._ComboBoxMenu
*/
dijit.form._ComboBoxMenu.prototype.handleKey=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles page-up and page-down keypresses<br>
 * </blockquote>
 * @param {Boolean} up 
 * @private
 * @memberOf dijit.form._ComboBoxMenu
*/
dijit.form._ComboBoxMenu.prototype._page=function(up){};
/**
 * @private
 * @memberOf dijit.form._ComboBoxMenu
*/
dijit.form._ComboBoxMenu.prototype._createMenuItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus-less menu for internal use in `dijit.form.ComboBox`<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit.form._ComboBoxMenuMixin} new instance
*/
dijit.form._ComboBoxMenuMixin=function(){};
/**
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.selectLastNode=function(){};
/**
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.selectFirstNode=function(){};
/**
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Notifies ComboBox/FilteringSelect that user clicked to advance to next/previous page.<br>
 * </blockquote>
 * @param {Number} direction 
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.onPage=function(direction){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback from dijit.popup code to this widget, notifying it that it closed<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.onClose=function(){};
/**
 * @param {DomNode} node 
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.onClick=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Notifies ComboBox/FilteringSelect that user selected an option.<br>
 * </blockquote>
 * @param {Number} direction 
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.onChange=function(direction){};
/**
 * <b>Summary:</b><blockquote>
 *	 Highlight the last real item in the list (not More Choices).<br>
 * </blockquote>
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.highlightLastOption=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Highlight the first real item in the list (not Previous Choices).<br>
 * </blockquote>
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.highlightFirstOption=function(){};
/**
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.getHighlightedOption=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fills in the items in the drop down list<br>
 * </blockquote>
 * @param {Array} results of items
 * @param {The} options options to the query function of the store
 * @param {Function} labelFunc to produce a label in the drop down list from a dojo.data item
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.createOptions=function(results, options, labelFunc){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clears the entries in the drop down list, but of course keeps the previous and next buttons.<br>
 * </blockquote>
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.clearResultList=function(){};
/**
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype.buildRendering=function(){};
/**
 * @param {Object} value 
 * @private
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype._setValueAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates an option to appear on the popup menu subclassed by<br>
 *	 `dijit.form.FilteringSelect`.<br>
 * </blockquote>
 * @param {Object} item 
 * @param {mixed} labelFunc 
 * @private
 * @memberOf dijit.form._ComboBoxMenuMixin
*/
dijit.form._ComboBoxMenuMixin.prototype._createOption=function(item, labelFunc){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Mixin to handle mouse or touch events for a focus-less menu<br>
 *	 Abstract methods that must be defined externally:<br>
 *	 onClick: item was chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)<br>
 * </blockquote>
 * @class
 * @extends dijit.form._ListBase
 * @private
 * @returns {dijit.form._ListMouseMixin} new instance
*/
dijit.form._ListMouseMixin=function(){};
/**
 * @memberOf dijit.form._ListMouseMixin
*/
dijit.form._ListMouseMixin.prototype.postCreate=function(){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form._ListMouseMixin
*/
dijit.form._ListMouseMixin.prototype._onMouseUp=function(evt){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form._ListMouseMixin
*/
dijit.form._ListMouseMixin.prototype._onMouseOver=function(evt){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form._ListMouseMixin
*/
dijit.form._ListMouseMixin.prototype._onMouseOut=function(evt){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form._ListMouseMixin
*/
dijit.form._ListMouseMixin.prototype._onMouseDown=function(evt){};
/**
 * @namespace
*/
dijit.form._ComboBoxMenuMixin.previousButton={};
/**
 * @namespace
*/
dijit.form._ComboBoxMenuMixin.nextButton={};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets that need drop down ability.<br>
 * </blockquote>
 * @class
 * @extends dijit._FocusMixin
 * @private
 * @returns {dijit._HasDropDown} new instance
*/
dijit._HasDropDown=function(){};
/**
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.dropDownPosition=null;
/**
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.dropDown=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when the user presses the down arrow button or presses<br>
 *	 the down arrow key to open/close the drop down.<br>
 *	 Toggle the drop-down widget; if it is up, close it, if not, open it<br>
 * </blockquote>
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype.toggleDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set up nodes and connect our mouse and keypress events<br>
 * </blockquote>
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Opens the dropdown for this widget.   To be called only when this.dropDown<br>
 *	 has been created and is ready to display (ie, it's data is loaded).<br>
 * </blockquote>
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype.openDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates the drop down if it doesn't exist, loads the data<br>
 *	 if there's an href and it hasn't been loaded yet, and then calls<br>
 *	 the given callback.<br>
 * </blockquote>
 * @param {Function} loadCallback 
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype.loadDropDown=function(loadCallback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates the drop down if it doesn't exist, loads the data<br>
 *	 if there's an href and it hasn't been loaded yet, and<br>
 *	 then opens the drop down.  This is basically a callback when the<br>
 *	 user presses the down arrow button to open the drop down.<br>
 * </blockquote>
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype.loadAndOpenDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the dropdown exists and it's data is loaded.  This can<br>
 *	 be overridden in order to force a call to loadDropDown().<br>
 * </blockquote>
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype.isLoaded=function(){};
/**
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Closes the drop down on this widget<br>
 * </blockquote>
 * @param {Boolean} focus If true, refocuses the button widget
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype.closeDropDown=function(focus){};
/**
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype.buildRendering=function(){};
/**
 * @private
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype._onKeyUp=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when the user presses a key while focused on the button node<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype._onKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when the user lifts their mouse after mouse down on the arrow icon.<br>
 *	 If the drop down is a simple menu and the mouse is over the menu, we execute it, otherwise, we focus our<br>
 *	 drop down widget.  If the event is missing, then we are not<br>
 *	 a mouseup event.<br>
 *	 <br>
 *	 This is useful for the common mouse movement pattern<br>
 *	 with native browser &amp;lt;select&amp;gt; nodes:<br>
 *	 1. mouse down on the select node (probably on the arrow)<br>
 *	 2. move mouse to a menu item while holding down the mouse button<br>
 *	 3. mouse up.  this selects the menu item as though the user had clicked it.<br>
 * </blockquote>
 * @param {Event} [e] 
 * @private
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype._onDropDownMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when the user mousedown's on the arrow icon<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype._onDropDownMouseDown=function(e){};
/**
 * @param {Event} e 
 * @private
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype._onDropDownClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called magically when focus has shifted away from this widget and it's dropdown<br>
 * </blockquote>
 * @private
 * @memberOf dijit._HasDropDown
*/
dijit._HasDropDown.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A combination button and drop-down button.<br>
 *	 Users can click one side to &amp;quot;press&amp;quot; the button, or click an arrow<br>
 *	 icon to display the drop down.<br>
 * </blockquote>
 * @class
 * @extends dijit.form.DropDownButton
 * @returns {dijit.form.ComboButton} new instance
 * @example
 * 	&lt;button data-dojo-type="dijit.form.ComboButton" onClick="..."&gt;
 * 		&lt;span&gt;Hello world&lt;/span&gt;
 * 		&lt;div data-dojo-type="dijit.Menu"&gt;...&lt;/div&gt;
 * 	&lt;/button&gt;
 * @example
 * 	var button1 = new dijit.form.ComboButton({label: "hello world", onClick: foo, dropDown: "myMenu"});
 * 	dojo.body().appendChild(button1.domNode);
*/
dijit.form.ComboButton=function(){};
/**
 * @namespace
*/
dijit.form.ComboButton.cssStateNodes={};
/**
 * <b>Summary:</b><blockquote>
 *	 Focuses this widget to according to position, if specified,<br>
 *	 otherwise on arrow node<br>
 * </blockquote>
 * @param {String} position &quot;start&quot; or &quot;end&quot;
 * @memberOf dijit.form.ComboButton
*/
dijit.form.ComboButton.prototype.focus=function(position){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for right arrow key when focus is on left part of button<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form.ComboButton
*/
dijit.form.ComboButton.prototype._onButtonKeyPress=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for left arrow key when focus is on right part of button<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form.ComboButton
*/
dijit.form.ComboButton.prototype._onArrowKeyPress=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating currency textbox<br>
 * </blockquote>
 * CurrencyTextBox is similar to `dijit.form.NumberTextBox` but has a few<br>
 * extra features related to currency:<br>
 * <br>
 * 1. After specifying the currency type (american dollars, euros, etc.) it automatically<br>
 * sets parse/format options such as how many decimal places to show.<br>
 * 2. The currency mark (dollar sign, euro mark, etc.) is displayed when the field is blurred<br>
 * but erased during editing, so that the user can just enter a plain number.
 * @class
 * @extends dijit.form.NumberTextBox
 * @returns {dijit.form.CurrencyTextBox} new instance
*/
dijit.form.CurrencyTextBox=function(){};
/**
 * @param {mixed} constraints 
 * @memberOf dijit.form.CurrencyTextBox
*/
dijit.form.CurrencyTextBox.prototype.regExpGen=function(constraints){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parses string value as a Currency, according to the constraints object<br>
 * </blockquote>
 * @param {String} value 
 * @param {Object} constraints 
 * @memberOf dijit.form.CurrencyTextBox
*/
dijit.form.CurrencyTextBox.prototype.parse=function(value, constraints){};
/**
 * @param {Object} constraints 
 * @private
 * @memberOf dijit.form.CurrencyTextBox
*/
dijit.form.CurrencyTextBox.prototype._setConstraintsAttr=function(constraints){};
/**
 * <b>Summary:</b><blockquote>
 *	 Specifies both the rules on valid/invalid values (minimum, maximum,<br>
 *	 number of required decimal places), and also formatting options for<br>
 *	 displaying the value when the field is not focused (currency symbol,<br>
 *	 etc.)<br>
 * </blockquote>
 * Follows the pattern of `dijit.form.NumberTextBox.constraints`.<br>
 * In general developers won't need to set this parameter
 * @private
 * @example
 * To ensure that the user types in the cents (for example, 1.00 instead of just 1):
 * 		{fractional:true}
*/
dijit.form.CurrencyTextBox.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Specifies both the rules on valid/invalid values (minimum, maximum,<br>
 *	 number of required decimal places), and also formatting options for<br>
 *	 displaying the value when the field is not focused (currency symbol,<br>
 *	 etc.)<br>
 * </blockquote>
 * Follows the pattern of `dijit.form.NumberTextBox.constraints`.<br>
 * In general developers won't need to set this parameter
 * @class
 * @extends dijit.form.NumberTextBox.__Constraints
 * @private
 * @returns {dijit.form.CurrencyTextBox.__Constraints} new instance
 * @example
 * To ensure that the user types in the cents (for example, 1.00 instead of just 1):
 * 		{fractional:true}
*/
dijit.form.CurrencyTextBox.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A TextBox for entering numbers, with formatting and range checking<br>
 * </blockquote>
 * NumberTextBox is a textbox for entering and displaying numbers, supporting<br>
 * the following main features:<br>
 * <br>
 * 1. Enforce minimum/maximum allowed values (as well as enforcing that the user types<br>
 * a number rather than a random string)<br>
 * 2. NLS support (altering roles of comma and dot as "thousands-separator" and "decimal-point"<br>
 * depending on locale).<br>
 * 3. Separate modes for editing the value and displaying it, specifically that<br>
 * the thousands separator character (typically comma) disappears when editing<br>
 * but reappears after the field is blurred.<br>
 * 4. Formatting and constraints regarding the number of places (digits after the decimal point)<br>
 * allowed on input, and number of places displayed when blurred (see `constraints` parameter).
 * @class
 * @extends dijit.form.RangeBoundTextBox
 * @extends dijit.form.NumberTextBoxMixin
 * @returns {dijit.form.NumberTextBox} new instance
*/
dijit.form.NumberTextBox=function(){};
/**
 * @param {Boolean} isFocused 
*/
dijit.form.NumberTextBox.isValid=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 Specifies both the rules on valid/invalid values (minimum, maximum,<br>
 *	 number of required decimal places), and also formatting options for<br>
 *	 displaying the value when the field is not focused.<br>
 * </blockquote>
 * @private
 * @example
 * Minimum/maximum:
 * To specify a field between 0 and 120:
 * 		{min:0,max:120}
 * To specify a field that must be an integer:
 * 		{fractional:false}
 * To specify a field where 0 to 3 decimal places are allowed on input:
 * 		{places:'0,3'}
*/
dijit.form.NumberTextBox.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Inefficient but small data store specialized for inlined data via OPTION tags<br>
 * </blockquote>
 * Provides a store for inlined data like:<br>
 * <br>
 * 	&lt;datalist&gt;<br>
 * 		&lt;option value="AL"&gt;Alabama&lt;/option&gt;<br>
 * 		...
 * @class
 * @param {Object} [params] 
 * @param {DomNode|String} srcNodeRef 
 * @returns {dijit.form.DataList} new instance
*/
dijit.form.DataList=function(params, srcNodeRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the option marked as selected, like `&amp;lt;option selected&amp;gt;`.<br>
 *	 Not part of dojo.data API.<br>
 * </blockquote>
 * @memberOf dijit.form.DataList
*/
dijit.form.DataList.prototype.fetchSelectedItem=function(){};
/**
 * @memberOf dijit.form.DataList
*/
dijit.form.DataList.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound date text box with a drop down calendar<br>
 *	 <br>
 *	 Example:<br>
 *	 	new dijit.form.DateTextBox({value: new Date(2009, 0, 20)})<br>
 *	 <br>
 *	 Example:<br>
 *	 	&amp;lt;input data-dojo-type='dijit.form.DateTextBox' value='2009-01-20'&amp;gt;<br>
 * </blockquote>
 * @class
 * @extends dijit.form._DateTimeTextBox
 * @returns {dijit.form.DateTextBox} new instance
*/
dijit.form.DateTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for validating, serializable, range-bound date or time text box.<br>
 * </blockquote>
 * @class
 * @extends dijit.form.RangeBoundTextBox
 * @extends dijit._HasDropDown
 * @private
 * @param {Object} args 
 * @returns {dijit.form._DateTimeTextBox} new instance
*/
dijit.form._DateTimeTextBox=function(args){};
/**
 * @param {anything} val 
 * @param {Object} [options] 
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype.serialize=function(val, options){};
/**
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parses as string as a Date, according to constraints<br>
 * </blockquote>
 * @param {String} value 
 * @param {dojo.date.locale.__FormatOptions} constraints 
 * @returns {Date} -
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype.parse=function(value, constraints){};
/**
 * @param {Function} callback 
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype.openDropDown=function(callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Formats the value as a Date, according to specified locale (second argument)<br>
 * </blockquote>
 * @param {Date} value 
 * @param {dojo.date.locale.__FormatOptions} constraints 
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype.format=function(value, constraints){};
/**
 * @param {Date} val1 
 * @param {Date} val2 
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype.compare=function(val1, val2){};
/**
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the date on this textbox. Note: value can be a JavaScript Date literal or a string to be parsed.<br>
 * </blockquote>
 * @param {Date|String} value 
 * @param {Boolean} [priorityChange] 
 * @param {String} [formattedValue] 
 * @private
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype._setValueAttr=function(value, priorityChange, formattedValue){};
/**
 * @param {Date} val 
 * @private
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype._setDropDownDefaultValueAttr=function(val){};
/**
 * @param {String} value 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype._setDisplayedValueAttr=function(value, priorityChange){};
/**
 * @param {Object} constraints 
 * @private
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype._setConstraintsAttr=function(constraints){};
/**
 * @param {mixed} attr 
 * @param {mixed} value 
 * @private
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype._set=function(attr, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Runs various tests on the value, checking for invalid conditions<br>
 * </blockquote>
 * @param {Date} value 
 * @private
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype._isInvalidDate=function(value){};
/**
 * @private
 * @memberOf dijit.form._DateTimeTextBox
*/
dijit.form._DateTimeTextBox.prototype._getDisplayedValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Specifies both the rules on valid/invalid values (first/last date/time allowed),<br>
 *	 and also formatting options for how the date/time is displayed.<br>
 * </blockquote>
 * @private
 * @example
 * To restrict to dates within 2004, displayed in a long format like "December 25, 2005":
 * 		{min:'2004-01-01',max:'2004-12-31', formatLength:'long'}
*/
dijit.form._DateTimeTextBox.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Specifies both the rules on valid/invalid values (first/last date/time allowed),<br>
 *	 and also formatting options for how the date/time is displayed.<br>
 * </blockquote>
 * @class
 * @extends dijit.form.RangeBoundTextBox.__Constraints
 * @private
 * @returns {dijit.form._DateTimeTextBox.__Constraints} new instance
 * @example
 * To restrict to dates within 2004, displayed in a long format like "December 25, 2005":
 * 		{min:'2004-01-01',max:'2004-12-31', formatLength:'long'}
*/
dijit.form._DateTimeTextBox.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for textbox form widgets which defines a range of valid values.<br>
 * </blockquote>
 * @class
 * @extends dijit.form.MappedTextBox
 * @returns {dijit.form.RangeBoundTextBox} new instance
*/
dijit.form.RangeBoundTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function used to validate the range of the numeric input value.<br>
 * </blockquote>
 * @param {Number} primitive 
 * @param {dijit.form.RangeBoundTextBox.__Constraints} constraints 
 * @memberOf dijit.form.RangeBoundTextBox
*/
dijit.form.RangeBoundTextBox.prototype.rangeCheck=function(primitive, constraints){};
/**
 * @memberOf dijit.form.RangeBoundTextBox
*/
dijit.form.RangeBoundTextBox.prototype.postMixInProperties=function(){};
/**
 * @param {Boolean} isFocused 
 * @memberOf dijit.form.RangeBoundTextBox
*/
dijit.form.RangeBoundTextBox.prototype.isValid=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tests if the value is in the min/max range specified in constraints<br>
 * </blockquote>
 * @param {Boolean} isFocused 
 * @memberOf dijit.form.RangeBoundTextBox
*/
dijit.form.RangeBoundTextBox.prototype.isInRange=function(isFocused){};
/**
 * @param {Boolean} isFocused 
 * @returns {String} -
 * @memberOf dijit.form.RangeBoundTextBox
*/
dijit.form.RangeBoundTextBox.prototype.getErrorMessage=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 The function overridden in the _BidiSupport module,<br>
 *	 originally used for setting element.dir according to this.textDir.<br>
 *	 In this case does nothing.<br>
 * </blockquote>
 * @param {Object} element 
 * @param {String} text 
 * @memberOf dijit.form.RangeBoundTextBox
*/
dijit.form.RangeBoundTextBox.prototype.applyTextDir=function(element, text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('value', ...) works.<br>
 * </blockquote>
 * @param {Number} value 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form.RangeBoundTextBox
*/
dijit.form.RangeBoundTextBox.prototype._setValueAttr=function(value, priorityChange){};
/**
 * @param {Object} constraints 
 * @private
 * @memberOf dijit.form.RangeBoundTextBox
*/
dijit.form.RangeBoundTextBox.prototype._setConstraintsAttr=function(constraints){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides `dijit.form.ValidationTextBox._isValidSubset`.<br>
 *	 Returns true if the input is syntactically valid, and either within<br>
 *	 range or could be made in range by more typing.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form.RangeBoundTextBox
*/
dijit.form.RangeBoundTextBox.prototype._isValidSubset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the value is out of range and will remain<br>
 *	 out of range even if the user types more characters<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form.RangeBoundTextBox
*/
dijit.form.RangeBoundTextBox.prototype._isDefinitelyOutOfRange=function(){};
/**
 * @private
*/
dijit.form.RangeBoundTextBox.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for textarea widgets to add auto-expanding capability<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit.form._ExpandingTextAreaMixin} new instance
*/
dijit.form._ExpandingTextAreaMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resizes the textarea vertically (should be called after a style/value change)<br>
 * </blockquote>
 * @memberOf dijit.form._ExpandingTextAreaMixin
*/
dijit.form._ExpandingTextAreaMixin.prototype.resize=function(){};
/**
 * @memberOf dijit.form._ExpandingTextAreaMixin
*/
dijit.form._ExpandingTextAreaMixin.prototype.postCreate=function(){};
/**
 * @memberOf dijit.form._ExpandingTextAreaMixin
*/
dijit.form._ExpandingTextAreaMixin.prototype.destroy=function(){};
/**
 * @private
 * @memberOf dijit.form._ExpandingTextAreaMixin
*/
dijit.form._ExpandingTextAreaMixin.prototype._setValueAttr=function(){};
/**
 * @private
 * @memberOf dijit.form._ExpandingTextAreaMixin
*/
dijit.form._ExpandingTextAreaMixin.prototype._resizeLater=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form._ExpandingTextAreaMixin
*/
dijit.form._ExpandingTextAreaMixin.prototype._onInput=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Approximate the height when the textarea is invisible with the number of lines in the text.<br>
 *	 Fails when someone calls setValue with a long wrapping line, but the layout fixes itself when the user clicks inside so . . .<br>
 *	 In IE, the resize event is supposed to fire when the textarea becomes visible again and that will correct the size automatically.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._ExpandingTextAreaMixin
*/
dijit.form._ExpandingTextAreaMixin.prototype._estimateHeight=function(){};
/**
 * @namespace
*/
dijit.form._ExpandingTextAreaMixin.textbox={};
/**
 * <b>Summary:</b><blockquote>
 *	 A dijit.form.ValidationTextBox subclass which provides a base class for widgets that have<br>
 *	 a visible formatted display value, and a serializable<br>
 *	 value in a hidden input field which is actually sent to the server.<br>
 * </blockquote>
 * The visible display may<br>
 * be locale-dependent and interactive.  The value sent to the server is stored in a hidden<br>
 * input field which uses the `name` attribute declared by the original widget.  That value sent<br>
 * to the server is defined by the dijit.form.MappedTextBox.serialize method and is typically<br>
 * locale-neutral.
 * @class
 * @extends dijit.form.ValidationTextBox
 * @returns {dijit.form.MappedTextBox} new instance
*/
dijit.form.MappedTextBox=function(){};
/**
 * @namespace
*/
dijit.form.MappedTextBox.valueNode={};
/**
 * @memberOf dijit.form.MappedTextBox
*/
dijit.form.MappedTextBox.prototype.validate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns widget as a printable string using the widget's value<br>
 * </blockquote>
 * @returns {String} -
 * @memberOf dijit.form.MappedTextBox
*/
dijit.form.MappedTextBox.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function used to convert the get('value') result to a canonical<br>
 *	 (non-localized) string.  For example, will print dates in ISO format, and<br>
 *	 numbers the same way as they are represented in javascript.<br>
 * </blockquote>
 * @param {anything} val 
 * @param {Object} [options] 
 * @returns {String} -
 * @memberOf dijit.form.MappedTextBox
*/
dijit.form.MappedTextBox.prototype.serialize=function(val, options){};
/**
 * @memberOf dijit.form.MappedTextBox
*/
dijit.form.MappedTextBox.prototype.reset=function(){};
/**
 * @memberOf dijit.form.MappedTextBox
*/
dijit.form.MappedTextBox.prototype.postMixInProperties=function(){};
/**
 * @memberOf dijit.form.MappedTextBox
*/
dijit.form.MappedTextBox.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Widget corresponding to HTML form tag, for validation and serialization<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit.form._FormMixin
 * @extends dijit.layout._ContentPaneResizeMixin
 * @returns {dijit.form.Form} new instance
 * @example
 * 	&lt;form data-dojo-type="dijit.form.Form" id="myForm"&gt;
 * 		Name: &lt;input type="text" name="name" /&gt;
 * 	&lt;/form&gt;
 * 	myObj = {name: "John Doe"};
 * 	dijit.byId('myForm').set('value', myObj);
 * 
 * 	myObj=dijit.byId('myForm').get('value');
*/
dijit.form.Form=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 programmatically submit form if and only if the `onSubmit` returns true<br>
 * </blockquote>
 * @memberOf dijit.form.Form
*/
dijit.form.Form.prototype.submit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 restores all widget values back to their init values,<br>
 *	 calls onReset() which can cancel the reset by returning false<br>
 * </blockquote>
 * @param {Event} [e] 
 * @memberOf dijit.form.Form
*/
dijit.form.Form.prototype.reset=function(e){};
/**
 * @memberOf dijit.form.Form
*/
dijit.form.Form.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when user submits the form.<br>
 * </blockquote>
 * This method is intended to be over-ridden, but by default it checks and<br>
 * returns the validity of form elements. When the `submit`<br>
 * method is called programmatically, the return value from<br>
 * `onSubmit` is used to compute whether or not submission<br>
 * should proceed
 * @param {Event} [e] 
 * @returns {Boolean} -
 * @memberOf dijit.form.Form
*/
dijit.form.Form.prototype.onSubmit=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when user resets the form. This method is intended<br>
 *	 to be over-ridden. When the `reset` method is called<br>
 *	 programmatically, the return value from `onReset` is used<br>
 *	 to compute whether or not resetting should proceed<br>
 * </blockquote>
 * @param {Event} [e] 
 * @returns {Boolean} -
 * @memberOf dijit.form.Form
*/
dijit.form.Form.prototype.onReset=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated: use onSubmit()<br>
 * </blockquote>
 * @memberOf dijit.form.Form
*/
dijit.form.Form.prototype.onExecute=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated: use submit()<br>
 * </blockquote>
 * @param {Object} formContents 
 * @memberOf dijit.form.Form
*/
dijit.form.Form.prototype.execute=function(formContents){};
/**
 * @param {String} value 
 * @private
 * @memberOf dijit.form.Form
*/
dijit.form.Form.prototype._setEncTypeAttr=function(value){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form.Form
*/
dijit.form.Form.prototype._onSubmit=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form.Form
*/
dijit.form.Form.prototype._onReset=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given the margin-box size of a node, return its content box size.<br>
 *	 Functions like domGeometry.contentBox() but is more reliable since it doesn't have<br>
 *	 to wait for the browser to compute sizes.<br>
 * </blockquote>
 * @param {DomNode} node 
 * @param {Object} mb 
*/
dijit.layout.marginBox2contentBox=function(node, mb){};
/**
 * <b>Summary:</b><blockquote>
 *	 Layout a bunch of child dom nodes within a parent dom node<br>
 * </blockquote>
 * @param {DomNode} container parent node
 * @param {Object} dim {l, t, w, h} object specifying dimensions of container into which to place children
 * @param {Widget[]} children an array of Widgets or at least objects containing:
 * * domNode: pointer to DOM node to position<br>
 * * region or layoutAlign: position to place DOM node<br>
 * * resize(): (optional) method to set size of node<br>
 * * id: (optional) Id of widgets, referenced from resize object, below.
 * @param {String} [changedRegionId] If specified, the slider for the region with the specified id has been dragged, and thus
 * the region's height or width should be adjusted according to changedRegionSize
 * @param {Number} [changedRegionSize] See changedRegionId.
*/
dijit.layout.layoutChildren=function(container, dim, children, changedRegionId, changedRegionSize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Abstract base class for TabContainer.   Must define _makeController() to instantiate<br>
 *	 and return the widget that displays the tab labels<br>
 * </blockquote>
 * A TabContainer is a container that has multiple panes, but shows only<br>
 * one pane at a time.  There are a set of tabs corresponding to each pane,<br>
 * where each tab has the name (aka title) of the pane, and optionally a close button.
 * @private
*/
dijit.layout._TabContainerBase=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A tab (the thing you click to select a pane).<br>
 * </blockquote>
 * Contains the title of the pane, and optionally a close-button to destroy the pane.<br>
 * This is an internal widget and should not be instantiated directly.<br>
*/
dijit.layout._TabButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal widget used by StackContainer.<br>
 * </blockquote>
 * The button-like or tab-like object you click to select or delete a page<br>
*/
dijit.layout._StackButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A draggable spacer between two items in a `dijit.layout.BorderContainer`.<br>
 * </blockquote>
 * This is instantiated by `dijit.layout.BorderContainer`.  Users should not<br>
 * create it directly.<br>
*/
dijit.layout._Splitter=function(){};
/**
*/
dijit.layout._ScrollingTabControllerMenuButton=function(){};
/**
*/
dijit.layout._ScrollingTabControllerButtonMixin=function(){};
/**
*/
dijit.layout._ScrollingTabControllerButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for a _Container widget which is responsible for laying out its children.<br>
 *	 Widgets which mixin this code must define layout() to manage placement and sizing of the children.<br>
 * </blockquote>
 * @private
*/
dijit.layout._LayoutWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Just a spacer div to separate side pane from center pane.<br>
 *	 Basically a trick to lookup the gutter/splitter width from the theme.<br>
 * </blockquote>
 * Instantiated by `dijit.layout.BorderContainer`.  Users should not<br>
 * create directly.<br>
*/
dijit.layout._Gutter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize() functionality of ContentPane.   If there's a single layout widget<br>
 *	 child then it will call resize() with the same dimensions as the ContentPane.<br>
 *	 Otherwise just calls resize on each child.<br>
 *	 <br>
 *	 Also implements basic startup() functionality, where starting the parent<br>
 *	 will start the children<br>
 * </blockquote>
 * @private
*/
dijit.layout._ContentPaneResizeMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal widget placed as direct child of AccordionContainer.containerNode.<br>
 *	 When other widgets are added as children to an AccordionContainer they are wrapped in<br>
 *	 this widget.<br>
 * </blockquote>
*/
dijit.layout._AccordionInnerContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The title bar to click to open up an accordion pane.<br>
 *	 Internal widget used by AccordionContainer.<br>
 * </blockquote>
*/
dijit.layout._AccordionButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set of tabs (the things with titles and a close button, that you click to show a tab panel).<br>
 *	 Used internally by `dijit.layout.TabContainer`.<br>
 * </blockquote>
 * Lets the user select the currently shown pane in a TabContainer or StackContainer.<br>
 * TabController also monitors the TabContainer, and whenever a pane is<br>
 * added or deleted updates itself accordingly.<br>
*/
dijit.layout.TabController=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Container with tabs to select each child (only one of which is displayed at a time).<br>
 * </blockquote>
 * A TabContainer is a container that has multiple panes, but shows only<br>
 * one pane at a time.  There are a set of tabs corresponding to each pane,<br>
 * where each tab has the name (aka title) of the pane, and optionally a close button.<br>
*/
dijit.layout.TabContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set of buttons to select a page in a `dijit.layout.StackContainer`<br>
 * </blockquote>
 * Monitors the specified StackContainer, and whenever a page is<br>
 * added, deleted, or selected, updates itself accordingly.<br>
*/
dijit.layout.StackController=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container that has multiple children, but shows only<br>
 *	 one child at a time<br>
 * </blockquote>
 * A container for widgets (ContentPanes, for example) That displays<br>
 * only one Widget at a time.<br>
 * <br>
 * Publishes topics [widgetId]-addChild, [widgetId]-removeChild, and [widgetId]-selectChild<br>
 * <br>
 * Can be base class for container, Wizard, Show, etc.<br>
*/
dijit.layout.StackContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use `dijit.layout.BorderContainer` instead.<br>
 * </blockquote>
 * A Container widget with sizing handles in-between each child.<br>
 * Contains multiple children widgets, all of which are displayed side by side<br>
 * (either horizontally or vertically); there's a bar between each of the children,<br>
 * and you can adjust the relative size of each child by dragging the bars.<br>
 * <br>
 * You must specify a size (width and height) for the SplitContainer.<br>
*/
dijit.layout.SplitContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set of tabs with left/right arrow keys and a menu to switch between tabs not<br>
 *	 all fitting on a single row.<br>
 *	 Works only for horizontal tabs (either above or below the content, not to the left<br>
 *	 or right).<br>
 * </blockquote>
*/
dijit.layout.ScrollingTabController=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A ContentPane with an href where (when declared in markup)<br>
 *	 the title is specified as innerHTML rather than as a title attribute.<br>
 * </blockquote>
 * LinkPane is just a ContentPane that is declared in markup similarly<br>
 * to an anchor.  The anchor's body (the words between `&lt;a&gt;` and `&lt;/a&gt;`)<br>
 * become the title of the widget (used for TabContainer, AccordionContainer, etc.)
 * @example
 *  &lt;a href="foo.html"&gt;my title&lt;/a&gt;
*/
dijit.layout.LinkPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use `dijit.layout.BorderContainer` instead.<br>
 * </blockquote>
 * Provides Delphi-style panel layout semantics.<br>
 * <br>
 * A LayoutContainer is a box with a specified size (like style="width: 500px; height: 500px;"),<br>
 * that contains children widgets marked with "layoutAlign" of "left", "right", "bottom", "top", and "client".<br>
 * It takes it's children marked as left/top/bottom/right, and lays them out along the edges of the box,<br>
 * and then it takes the child marked "client" and puts it into the remaining space in the middle.<br>
 * <br>
 * Left/right positioning is similar to CSS's "float: left" and "float: right",<br>
 * and top/bottom positioning would be similar to "float: top" and "float: bottom", if there were such<br>
 * CSS.<br>
 * <br>
 * Note that there can only be one client element, but there can be multiple left, right, top,<br>
 * or bottom elements.
 * @example
 * 	&lt;style&gt;
 * 		html, body{ height: 100%; width: 100%; }
 * 	&lt;/style&gt;
 * 	&lt;div data-dojo-type="dijit.layout.LayoutContainer" style="width: 100%; height: 100%"&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="layoutAlign: 'top'"&gt;header text&lt;/div&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="layoutAlign: 'left'" style="width: 200px;"&gt;table of contents&lt;/div&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="layoutAlign: 'client'"&gt;client area&lt;/div&gt;
 * 	&lt;/div&gt;
 * 
 * Lays out each child in the natural order the children occur in.
 * Basically each child is laid out into the "remaining space", where "remaining space" is initially
 * the content area of this widget, but is reduced to a smaller rectangle each time a child is added.
*/
dijit.layout.LayoutContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget containing an HTML fragment, specified inline<br>
 *	 or by uri.  Fragment may include widgets.<br>
 * </blockquote>
 * This widget embeds a document fragment in the page, specified<br>
 * either by uri, javascript generated markup or DOM reference.<br>
 * Any widgets within this content are instantiated and managed,<br>
 * but laid out according to the HTML structure.  Unlike IFRAME,<br>
 * ContentPane embeds a document fragment as would be found<br>
 * inside the BODY tag of a full HTML document.  It should not<br>
 * contain the HTML, HEAD, or BODY tags.<br>
 * For more advanced functionality with scripts and<br>
 * stylesheets, see dojox.layout.ContentPane.  This widget may be<br>
 * used stand alone or as a base class for other widgets.<br>
 * ContentPane is useful as a child of other layout containers<br>
 * such as BorderContainer or TabContainer, but note that those<br>
 * widgets can contain any widget as a child.
 * @see dojox.layout.ContentPane
 * @example
 * Some quick samples:
 * To change the innerHTML: cp.set('content', '&lt;b&gt;new content&lt;/b&gt;')
 * 
 * Or you can send it a NodeList: cp.set('content', dojo.query('div [class=selected]', userSelection))
 * 
 * To do an ajax update: cp.set('href', url)
*/
dijit.layout.ContentPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides layout in up to 5 regions, a mandatory center with optional borders along its 4 sides.<br>
 * </blockquote>
 * A BorderContainer is a box with a specified size, such as style="width: 500px; height: 500px;",<br>
 * that contains a child widget marked region="center" and optionally children widgets marked<br>
 * region equal to "top", "bottom", "leading", "trailing", "left" or "right".<br>
 * Children along the edges will be laid out according to width or height dimensions and may<br>
 * include optional splitters (splitter="true") to make them resizable by the user.  The remaining<br>
 * space is designated for the center region.<br>
 * <br>
 * The outer size must be specified on the BorderContainer node.  Width must be specified for the sides<br>
 * and height for the top and bottom, respectively.  No dimensions should be specified on the center;<br>
 * it will fill the remaining space.  Regions named "leading" and "trailing" may be used just like<br>
 * "left" and "right" except that they will be reversed in right-to-left environments.<br>
 * <br>
 * For complex layouts, multiple children can be specified for a single region.   In this case, the<br>
 * layoutPriority flag on the children determines which child is closer to the edge (low layoutPriority)<br>
 * and which child is closer to the center (high layoutPriority).   layoutPriority can also be used<br>
 * instead of the design attribute to control layout precedence of horizontal vs. vertical panes.
 * @example
 * 	&lt;div data-dojo-type="dijit.layout.BorderContainer" data-dojo-props="design: 'sidebar', gutters: false"
 *			 style="width: 400px; height: 300px;"&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="region: 'top'"&gt;header text&lt;/div&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="region: 'right', splitter: true" style="width: 200px;"&gt;table of contents&lt;/div&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="region: 'center'"&gt;client area&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dijit.layout.BorderContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated widget.   Use `dijit.layout.ContentPane` instead.<br>
 * </blockquote>
*/
dijit.layout.AccordionPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Holds a set of panes where every pane's title is visible, but only one pane's content is visible at a time,<br>
 *	 and switching between panes is visualized by sliding the other panes up/down.<br>
 * </blockquote>
 * @example
 *  	&lt;div data-dojo-type="dijit.layout.AccordionContainer"&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" title="pane 1"&gt;
 * 		&lt;/div&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" title="pane 2"&gt;
 * 			&lt;p&gt;This is some text&lt;/p&gt;
 * 		&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dijit.layout.AccordionContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize() functionality of ContentPane.   If there's a single layout widget<br>
 *	 child then it will call resize() with the same dimensions as the ContentPane.<br>
 *	 Otherwise just calls resize on each child.<br>
 *	 <br>
 *	 Also implements basic startup() functionality, where starting the parent<br>
 *	 will start the children<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit.layout._ContentPaneResizeMixin} new instance
*/
dijit.layout._ContentPaneResizeMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See `dijit.layout._LayoutWidget.startup` for description.<br>
 *	 Although ContentPane doesn't extend _LayoutWidget, it does implement<br>
 *	 the same API.<br>
 * </blockquote>
 * @memberOf dijit.layout._ContentPaneResizeMixin
*/
dijit.layout._ContentPaneResizeMixin.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See `dijit.layout._LayoutWidget.resize` for description.<br>
 *	 Although ContentPane doesn't extend _LayoutWidget, it does implement<br>
 *	 the same API.<br>
 * </blockquote>
 * @param {mixed} changeSize 
 * @param {mixed} resultSize 
 * @memberOf dijit.layout._ContentPaneResizeMixin
*/
dijit.layout._ContentPaneResizeMixin.prototype.resize=function(changeSize, resultSize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize myself, and call resize() on each of my child layout widgets, either now<br>
 *	 (if I'm currently visible) or when I become visible<br>
 * </blockquote>
 * @param {mixed} changeSize 
 * @param {mixed} resultSize 
 * @private
 * @memberOf dijit.layout._ContentPaneResizeMixin
*/
dijit.layout._ContentPaneResizeMixin.prototype._scheduleLayout=function(changeSize, resultSize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the ContentPane is made visible<br>
 * </blockquote>
 * For a plain ContentPane, this is called on initialization, from startup().<br>
 * If the ContentPane is a hidden pane of a TabContainer etc., then it's<br>
 * called whenever the pane is made visible.<br>
 * <br>
 * Does layout/resize of child widget(s)
 * @private
 * @memberOf dijit.layout._ContentPaneResizeMixin
*/
dijit.layout._ContentPaneResizeMixin.prototype._onShow=function(){};
/**
 * @private
 * @memberOf dijit.layout._ContentPaneResizeMixin
*/
dijit.layout._ContentPaneResizeMixin.prototype._layoutChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize myself according to optional changeSize/resultSize parameters, like a layout widget.<br>
 *	 Also, since I am a Container widget, each of my children expects me to<br>
 *	 call resize() or layout() on them.<br>
 *	 <br>
 *	 Should be called on initialization and also whenever we get new content<br>
 *	 (from an href, or from set('content', ...))... but deferred until<br>
 *	 the ContentPane is visible<br>
 * </blockquote>
 * @param {mixed} changeSize 
 * @param {mixed} resultSize 
 * @private
 * @memberOf dijit.layout._ContentPaneResizeMixin
*/
dijit.layout._ContentPaneResizeMixin.prototype._layout=function(changeSize, resultSize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the content is currently shown.<br>
 * </blockquote>
 * If I am a child of a layout widget then it actually returns true if I've ever been visible,<br>
 * not whether I'm currently visible, since that's much faster than tracing up the DOM/widget<br>
 * tree every call, and at least solves the performance problem on page load by deferring loading<br>
 * hidden ContentPanes until they are first shown
 * @private
 * @returns {for TitlePane, etc.} -
 * @memberOf dijit.layout._ContentPaneResizeMixin
*/
dijit.layout._ContentPaneResizeMixin.prototype._isShown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Test if we have exactly one visible widget as a child,<br>
 *	 and if so assume that we are a container for that widget,<br>
 *	 and should propagate startup() and resize() calls to it.<br>
 *	 Skips over things like data stores since they aren't visible.<br>
 * </blockquote>
 * @private
 * @returns {or a regexp for hidden elements like script|area|map|etc..} -
 * @memberOf dijit.layout._ContentPaneResizeMixin
*/
dijit.layout._ContentPaneResizeMixin.prototype._checkIfSingleChild=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extends _FormValueWidget in order to provide &amp;quot;select-specific&amp;quot;<br>
 *	 values - i.e., those values that are unique to &amp;lt;select&amp;gt; elements.<br>
 *	 This also provides the mechanism for reading the elements from<br>
 *	 a store, if desired.<br>
 * </blockquote>
 * @class
 * @extends dijit.form._FormValueWidget
 * @private
 * @param {Object} keywordArgs 
 * @returns {dijit.form._FormSelectWidget} new instance
*/
dijit.form._FormSelectWidget=function(keywordArgs){};
/**
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.options=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the values of the given option.  The option to update<br>
 *	 is matched based on the value of the entered option.  Passing<br>
 *	 in an array of new options will yield better performance since<br>
 *	 the children will only be loaded once.<br>
 * </blockquote>
 * @param {dijit.form.__SelectOption|dijit.form.__SelectOption[]} newOption 
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype.updateOption=function(newOption){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connects in our store, if we have one defined<br>
 * </blockquote>
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the store you would like to use with this select widget.<br>
 *	 The selected value is the value of the new store to set.  This<br>
 *	 function returns the original store, in case you want to reuse<br>
 *	 it or something.<br>
 * </blockquote>
 * @param {dojo.data.api.Identity} store The store you would like to use - it MUST implement dojo.data.api.Identity,
 * and MAY implement dojo.data.api.Notification.
 * @param {anything} [selectedValue] The value that this widget should set itself to *after* the store
 * has been loaded
 * @param {Object} [fetchArgs] The arguments that will be passed to the store's fetch() function
 * @returns {dojo.data.api.Identity} -
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype.setStore=function(store, selectedValue, fetchArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the given option or options.  You can remove by string<br>
 *	 (in which case the value is removed), number (in which case the<br>
 *	 index in the options array is removed), or select option (in<br>
 *	 which case, the select option with a matching value is removed).<br>
 *	 You can also pass in an array of those values for a slightly<br>
 *	 better performance since the children are only loaded once.<br>
 * </blockquote>
 * @param {String|dijit.form.__SelectOption|Number|Array} valueOrIdx 
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype.removeOption=function(valueOrIdx){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets up our event handling that we need for functioning<br>
 *	 as a select<br>
 * </blockquote>
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a function that can be connected to in order to receive a<br>
 *	 notification that the store has finished loading and all options<br>
 *	 from that store are available<br>
 * </blockquote>
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype.onSetStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A callback to do with an onFetch - but before any items are actually<br>
 *	 iterated over (i.e. to filter even further what you want to add)<br>
 * </blockquote>
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype.onFetch=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a given option (or options).<br>
 * </blockquote>
 * @param {anything} valueOrIdx If passed in as a string, that string is used to look up the option
 * in the array of options - based on the value property.<br>
 * (See dijit.form.__SelectOption).<br>
 * <br>
 * If passed in a number, then the option with the given index (0-based)<br>
 * within this select will be returned.<br>
 * <br>
 * If passed in a dijit.form.__SelectOption, the same option will be<br>
 * returned if and only if it exists within this select.<br>
 * <br>
 * If passed an array, then an array will be returned with each element<br>
 * in the array being looked up.<br>
 * <br>
 * If not passed a value, then all options will be returned<br>
 * 
 * @returns {dijit.form.__SelectOption[]|dijit.form.__SelectOption|null} -is returned if any of the following are true:
 * - A string value is passed in which doesn't exist<br>
 * - An index is passed in which is outside the bounds of the array of options<br>
 * - A dijit.form.__SelectOption is passed in which is not a part of the select
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype.getOptions=function(valueOrIdx){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clean up our connections<br>
 * </blockquote>
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype.destroy=function(){};
/**
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds an option or options to the end of the select.  If value<br>
 *	 of the option is empty or missing, a separator is created instead.<br>
 *	 Passing in an array of options will yield slightly better performance<br>
 *	 since the children are only loaded once.<br>
 * </blockquote>
 * @param {dijit.form.__SelectOption|dijit.form.__SelectOption[]} option 
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype.addOption=function(option){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the &amp;quot;selected&amp;quot; class on the item for styling purposes<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._updateSelection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the value of the widget.<br>
 *	 If a string is passed, then we set our value from looking it up.<br>
 * </blockquote>
 * @param {anything} newValue 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._setValueAttr=function(newValue, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function which will set the display for the<br>
 *	 widget.  newDisplay is either a string (in the case of<br>
 *	 single selects) or array of strings (in the case of multi-selects)<br>
 * </blockquote>
 * @param {String} newDisplay or String[]
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._setDisplay=function(newDisplay){};
/**
 * <b>Summary:</b><blockquote>
 *	 User-overridable function which, for the given option, removes<br>
 *	 its item from the select.<br>
 * </blockquote>
 * @param {dijit.form.__SelectOption} option 
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._removeOptionItem=function(option){};
/**
 * <b>Summary:</b><blockquote>
 *	 a function that will &amp;quot;fake&amp;quot; loading children, if needed, and<br>
 *	 if we have set to not load children until the widget opens.<br>
 * </blockquote>
 * @param {item[]} items An array of items that will be loaded, when needed
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._pseudoLoadChildren=function(items){};
/**
 * @param {item} item 
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._onSetItem=function(item){};
/**
 * @param {item} item 
 * @param {Object} [parentInfo] 
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._onNewItem=function(item, parentInfo){};
/**
 * @param {item} item 
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._onDeleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads the children represented by this widget's options.<br>
 *	 reset the menu to make it populatable on the next click<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._loadChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the value of the widget by reading the options for<br>
 *	 the selected flag<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._getValueFromOpts=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 hooks into this.attr to provide a mechanism for getting the<br>
 *	 option items for the current value of the widget.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._getSelectedOptionsAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an option object based off the given item.  The &amp;quot;value&amp;quot;<br>
 *	 of the option item will be the identity of the item, the &amp;quot;label&amp;quot;<br>
 *	 of the option will be the label of the item.  If the item contains<br>
 *	 children, the children value of the item will be set<br>
 * </blockquote>
 * @param {mixed} item 
 * @private
 * @returns {dijit.form.__SelectOption} -
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._getOptionObjForItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the displayed value of the widget<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._getDisplayedValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function to return the children that this widget contains.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._getChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads our options and sets up our dropdown correctly.  We<br>
 *	 don't want any content, so we don't call any inherit chain<br>
 *	 function.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._fillContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 User-overridable function which, for the given option, adds an<br>
 *	 item to the select.  If the option doesn't have a value, then a<br>
 *	 separator is added in that place.  Make sure to store the option<br>
 *	 in the created option widget.<br>
 * </blockquote>
 * @param {dijit.form.__SelectOption} option 
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._addOptionItem=function(option){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates (and adds) the option for the given item<br>
 * </blockquote>
 * @param {item} item 
 * @private
 * @memberOf dijit.form._FormSelectWidget
*/
dijit.form._FormSelectWidget.prototype._addOptionForItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets corresponding to native HTML elements such as &amp;lt;input&amp;gt; or &amp;lt;select&amp;gt; that have user changeable values.<br>
 * </blockquote>
 * Each _FormValueWidget represents a single input value, and has a (possibly hidden) &lt;input&gt; element,<br>
 * to which it serializes it's input value, so that form submission (either normal submission or via FormBind?)<br>
 * works as expected.
 * @class
 * @extends dijit.form._FormWidget
 * @extends dijit.form._FormValueMixin
 * @private
 * @returns {dijit.form._FormValueWidget} new instance
*/
dijit.form._FormValueWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Work around table sizing bugs on IE7 by forcing redraw<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._FormValueWidget
*/
dijit.form._FormValueWidget.prototype._layoutHackIE7=function(){};
/**
 * @class
 * @private
 * @returns {dijit.form.__SelectOption} new instance
*/
dijit.form.__SelectOption=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets corresponding to native HTML elements such as &amp;lt;input&amp;gt; or &amp;lt;select&amp;gt; that have user changeable values.<br>
 * </blockquote>
 * Each _FormValueMixin represents a single input value, and has a (possibly hidden) &lt;input&gt; element,<br>
 * to which it serializes it's input value, so that form submission (either normal submission or via FormBind?)<br>
 * works as expected.
 * @class
 * @extends dijit.form._FormWidgetMixin
 * @private
 * @returns {dijit.form._FormValueMixin} new instance
*/
dijit.form._FormValueMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Restore the value to the last value passed to onChange<br>
 * </blockquote>
 * @memberOf dijit.form._FormValueMixin
*/
dijit.form._FormValueMixin.prototype.undo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reset the widget's value to what it was at initialization time<br>
 * </blockquote>
 * @memberOf dijit.form._FormValueMixin
*/
dijit.form._FormValueMixin.prototype.reset=function(){};
/**
 * @memberOf dijit.form._FormValueMixin
*/
dijit.form._FormValueMixin.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('value', value) works.<br>
 * </blockquote>
 * Sets the value of the widget.<br>
 * If the value has changed, then fire onChange event, unless priorityChange<br>
 * is specified as null (or false?)
 * @param {anything} newValue 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form._FormValueMixin
*/
dijit.form._FormValueMixin.prototype._setValueAttr=function(newValue, priorityChange){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dijit.form._FormValueMixin
*/
dijit.form._FormValueMixin.prototype._setReadOnlyAttr=function(value){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form._FormValueMixin
*/
dijit.form._FormValueMixin.prototype._onKeyDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the value of the widget has changed.  Saves the new value in this.value,<br>
 *	 and calls onChange() if appropriate.   See _FormWidget._handleOnChange() for details.<br>
 * </blockquote>
 * @param {anything} newValue 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form._FormValueMixin
*/
dijit.form._FormValueMixin.prototype._handleOnChange=function(newValue, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets corresponding to native HTML elements such as &amp;lt;checkbox&amp;gt; or &amp;lt;button&amp;gt;,<br>
 *	 which can be children of a &amp;lt;form&amp;gt; node or a `dijit.form.Form` widget.<br>
 * </blockquote>
 * Represents a single HTML element.<br>
 * All these widgets should have these attributes just like native HTML input elements.<br>
 * You can set them during widget construction or afterwards, via `dijit._Widget.attr`.<br>
 * <br>
 * They also share some common methods.
 * @class
 * @private
 * @returns {dijit.form._FormWidgetMixin} new instance
*/
dijit.form._FormWidgetMixin=function(){};
/**
 * @memberOf dijit.form._FormWidgetMixin
*/
dijit.form._FormWidgetMixin.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when this widget's value is changed.<br>
 * </blockquote>
 * @param {mixed} newValue 
 * @memberOf dijit.form._FormWidgetMixin
*/
dijit.form._FormWidgetMixin.prototype.onChange=function(newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tells if this widget is focusable or not.  Used internally by dijit.<br>
 * </blockquote>
 * @memberOf dijit.form._FormWidgetMixin
*/
dijit.form._FormWidgetMixin.prototype.isFocusable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Put focus on this widget<br>
 * </blockquote>
 * @memberOf dijit.form._FormWidgetMixin
*/
dijit.form._FormWidgetMixin.prototype.focus=function(){};
/**
 * @memberOf dijit.form._FormWidgetMixin
*/
dijit.form._FormWidgetMixin.prototype.destroy=function(){};
/**
 * @memberOf dijit.form._FormWidgetMixin
*/
dijit.form._FormWidgetMixin.prototype.create=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Compare 2 values (as returned by get('value') for this widget).<br>
 * </blockquote>
 * @param {anything} val1 
 * @param {anything} val2 
 * @memberOf dijit.form._FormWidgetMixin
*/
dijit.form._FormWidgetMixin.prototype.compare=function(val1, val2){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dijit.form._FormWidgetMixin
*/
dijit.form._FormWidgetMixin.prototype._setDisabledAttr=function(value){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form._FormWidgetMixin
*/
dijit.form._FormWidgetMixin.prototype._onMouseDown=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form._FormWidgetMixin
*/
dijit.form._FormWidgetMixin.prototype._onFocus=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the value of the widget is set.  Calls onChange() if appropriate<br>
 * </blockquote>
 * @param {anything} newValue the new value
 * @param {Boolean} [priorityChange] For a slider, for example, dragging the slider is priorityChange==false,
 * but on mouse up, it's priorityChange==true.  If intermediateChanges==false,<br>
 * onChange is only called form priorityChange=true events.
 * @private
 * @memberOf dijit.form._FormWidgetMixin
*/
dijit.form._FormWidgetMixin.prototype._handleOnChange=function(newValue, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hash marks for `dijit.form.HorizontalSlider`<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dijit.form.HorizontalRule} new instance
*/
dijit.form.HorizontalRule=function(){};
/**
 * @memberOf dijit.form.HorizontalRule
*/
dijit.form.HorizontalRule.prototype.buildRendering=function(){};
/**
 * @param {mixed} pos 
 * @private
 * @memberOf dijit.form.HorizontalRule
*/
dijit.form.HorizontalRule.prototype._genHTML=function(pos){};
/**
 * <b>Summary:</b><blockquote>
 *	 Labels for `dijit.form.HorizontalSlider`<br>
 * </blockquote>
 * @class
 * @extends dijit.form.HorizontalRule
 * @returns {dijit.form.HorizontalRuleLabels} new instance
*/
dijit.form.HorizontalRuleLabels=function(){};
/**
 * @namespace
*/
dijit.form.HorizontalRuleLabels.constraints={};
/**
 * @memberOf dijit.form.HorizontalRuleLabels
*/
dijit.form.HorizontalRuleLabels.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function to return array of labels to use for this slider.<br>
 *	 Can specify a getLabels() method instead of a labels[] array, or min/max attributes.<br>
 * </blockquote>
 * @memberOf dijit.form.HorizontalRuleLabels
*/
dijit.form.HorizontalRuleLabels.prototype.getLabels=function(){};
/**
 * @param {mixed} pos 
 * @param {mixed} ndx 
 * @private
 * @memberOf dijit.form.HorizontalRuleLabels
*/
dijit.form.HorizontalRuleLabels.prototype._genHTML=function(pos, ndx){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the value to be used in HTML for the label as part of the left: attribute<br>
 * </blockquote>
 * @param {mixed} pos 
 * @memberOf dijit.form.HorizontalRuleLabels
*/
dijit.form.HorizontalRuleLabels.prototype._calcPosition=function(pos){};
/**
 * @class
 * @returns {dijit.form._SliderMover} new instance
*/
dijit.form._SliderMover=function(){};
/**
 * @param {mixed} e 
 * @memberOf dijit.form._SliderMover
*/
dijit.form._SliderMover.prototype.onMouseMove=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dijit.form._SliderMover
*/
dijit.form._SliderMover.prototype.destroy=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A form widget that allows one to select a value with a horizontally draggable handle<br>
 * </blockquote>
 * @class
 * @extends dijit.form._FormValueWidget
 * @extends dijit._Container
 * @returns {dijit.form.HorizontalSlider} new instance
*/
dijit.form.HorizontalSlider=function(){};
/**
 * @namespace
*/
dijit.form.HorizontalSlider.cssStateNodes={};
/**
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype.startup=function(){};
/**
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Increment slider<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype.increment=function(e){};
/**
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Decrement slider<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype.decrement=function(e){};
/**
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype.buildRendering=function(){};
/**
 * @param {Number} count 
 * @param {Object} button 
 * @param {Event} e 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._typematicCallback=function(count, button, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('value', value) works.<br>
 * </blockquote>
 * @param {Number} value 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._setValueAttr=function(value, priorityChange){};
/**
 * @param {Number} pixelValue 
 * @param {Number} maxPixels 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._setPixelValue=function(pixelValue, maxPixels, priorityChange){};
/**
 * @param {Event} e 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._onKeyUp=function(e){};
/**
 * @param {Event} e 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._onKeyPress=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._onHandleClick=function(e){};
/**
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._onClkIncBumper=function(){};
/**
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._onClkDecBumper=function(){};
/**
 * @param {mixed} val 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._onClkBumper=function(val){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._onBarClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event handler for mousewheel where supported<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._mouseWheeled=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if direction is from right to left<br>
 * </blockquote>
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._isReversed=function(){};
/**
 * @param {mixed} signedChange 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form.HorizontalSlider
*/
dijit.form.HorizontalSlider.prototype._bumpValue=function(signedChange, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus-less menu to handle UI events consistently<br>
 *	 Abstract methods that must be defined externally:<br>
 *	 onSelect: item is active (mousedown but not yet mouseup, or keyboard arrow selected but no Enter)<br>
 *	 onDeselect:  cancels onSelect<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit.form._ListBase} new instance
*/
dijit.form._ListBase=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select the item just above the current selection.<br>
 *	 If nothing selected, select last node (if<br>
 *	 you select Previous and try to keep scrolling up the list).<br>
 * </blockquote>
 * @memberOf dijit.form._ListBase
*/
dijit.form._ListBase.prototype.selectPreviousNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select the item just below the current selection.<br>
 *	 If nothing selected, select first node.<br>
 * </blockquote>
 * @memberOf dijit.form._ListBase
*/
dijit.form._ListBase.prototype.selectNextNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select the last displayed item in the list<br>
 * </blockquote>
 * @memberOf dijit.form._ListBase
*/
dijit.form._ListBase.prototype.selectLastNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select the first displayed item in the list.<br>
 * </blockquote>
 * @memberOf dijit.form._ListBase
*/
dijit.form._ListBase.prototype.selectFirstNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Does the actual select.<br>
 * </blockquote>
 * @param {DomNode} node 
 * @private
 * @memberOf dijit.form._ListBase
*/
dijit.form._ListBase.prototype._setSelectedAttr=function(node){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form._ListBase
*/
dijit.form._ListBase.prototype._getTarget=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the selected node.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._ListBase
*/
dijit.form._ListBase.prototype._getSelectedAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Widget version of a &amp;lt;select multiple=true&amp;gt; element,<br>
 *	 for selecting multiple options.<br>
 * </blockquote>
 * @class
 * @extends dijit.form._FormValueWidget
 * @returns {dijit.form.MultiSelect} new instance
*/
dijit.form.MultiSelect=function(){};
/**
 * @param {Object} size 
 * @memberOf dijit.form.MultiSelect
*/
dijit.form.MultiSelect.prototype.resize=function(size){};
/**
 * @memberOf dijit.form.MultiSelect
*/
dijit.form.MultiSelect.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Invert the selection<br>
 * </blockquote>
 * @param {Boolean} [onChange] If false, onChange is not fired.
 * @memberOf dijit.form.MultiSelect
*/
dijit.form.MultiSelect.prototype.invertSelection=function(onChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Access the NodeList of the selected options directly<br>
 * </blockquote>
 * @returns {Boolean} -
 * @memberOf dijit.form.MultiSelect
*/
dijit.form.MultiSelect.prototype.getSelected=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Move the selected nodes of a passed Select widget<br>
 *	 instance to this Select widget.<br>
 * </blockquote>
 * @param {dijit.form.MultiSelect} select 
 * @example
 * 	// move all the selected values from "bar" to "foo"
 *  	dijit.byId("foo").addSelected(dijit.byId("bar"));
 * @memberOf dijit.form.MultiSelect
*/
dijit.form.MultiSelect.prototype.addSelected=function(select){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('value', values) works.<br>
 * </blockquote>
 * Set the value(s) of this Select based on passed values
 * @param {Array} values 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form.MultiSelect
*/
dijit.form.MultiSelect.prototype._setValueAttr=function(values, priorityChange){};
/**
 * @private
 * @memberOf dijit.form.MultiSelect
*/
dijit.form.MultiSelect.prototype._onChange=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so get('value') works.<br>
 * </blockquote>
 * Returns an array of the selected options' values.
 * @private
 * @memberOf dijit.form.MultiSelect
*/
dijit.form.MultiSelect.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extends NumberTextBox to add up/down arrows and pageup/pagedown for incremental change to the value<br>
 * </blockquote>
 * A `dijit.form.NumberTextBox` extension to provide keyboard accessible value selection<br>
 * as well as icons for spinning direction. When using the keyboard, the typematic rules<br>
 * apply, meaning holding the key will gradually increase or decrease the value and<br>
 * accelerate.
 * @class
 * @extends dijit.form._Spinner
 * @returns {dijit.form.NumberSpinner} new instance
 * @example
 *  new dijit.form.NumberSpinner({ constraints:{ max:300, min:100 }}, "someInput");
*/
dijit.form.NumberSpinner=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Change Number val by the given amount<br>
 * </blockquote>
 * @param {Object} val 
 * @param {Number} delta 
 * @memberOf dijit.form.NumberSpinner
*/
dijit.form.NumberSpinner.prototype.adjust=function(val, delta){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form.NumberSpinner
*/
dijit.form.NumberSpinner.prototype._onKeyPress=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for validation widgets with a spinner.<br>
 * </blockquote>
 * This class basically (conceptually) extends `dijit.form.ValidationTextBox`.<br>
 * It modifies the template to have up/down arrows, and provides related handling code.
 * @class
 * @extends dijit.form.RangeBoundTextBox
 * @private
 * @returns {dijit.form._Spinner} new instance
*/
dijit.form._Spinner=function(){};
/**
 * @namespace
*/
dijit.form._Spinner.cssStateNodes={};
/**
 * @memberOf dijit.form._Spinner
*/
dijit.form._Spinner.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function used to adjust a primitive value(Number/Date/...) by the delta amount specified.<br>
 *	 The val is adjusted in a way that makes sense to the object type.<br>
 * </blockquote>
 * @param {Object} val 
 * @param {Number} delta 
 * @memberOf dijit.form._Spinner
*/
dijit.form._Spinner.prototype.adjust=function(val, delta){};
/**
 * @param {Number} count 
 * @param {DOMNode} node 
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form._Spinner
*/
dijit.form._Spinner.prototype._typematicCallback=function(count, node, evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mouse wheel listener where supported<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form._Spinner
*/
dijit.form._Spinner.prototype._mouseWheeled=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for arrow button or arrow key being released<br>
 * </blockquote>
 * @param {Node} node 
 * @private
 * @memberOf dijit.form._Spinner
*/
dijit.form._Spinner.prototype._arrowReleased=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for arrow button or arrow key being pressed<br>
 * </blockquote>
 * @param {Node} nodePressed 
 * @param {Number} direction 
 * @param {Number} increment 
 * @private
 * @memberOf dijit.form._Spinner
*/
dijit.form._Spinner.prototype._arrowPressed=function(nodePressed, direction, increment){};
/**
 * <b>Summary:</b><blockquote>
 *	 Specifies both the rules on valid/invalid values (minimum, maximum,<br>
 *	 number of required decimal places), and also formatting options for<br>
 *	 displaying the value when the field is not focused.<br>
 * </blockquote>
 * @class
 * @extends dijit.form.RangeBoundTextBox.__Constraints
 * @private
 * @returns {dijit.form.NumberTextBox.__Constraints} new instance
 * @example
 * Minimum/maximum:
 * To specify a field between 0 and 120:
 * 		{min:0,max:120}
 * To specify a field that must be an integer:
 * 		{fractional:false}
 * To specify a field where 0 to 3 decimal places are allowed on input:
 * 		{places:'0,3'}
*/
dijit.form.NumberTextBox.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin for all number textboxes<br>
 * </blockquote>
 * @class
 * @returns {dijit.form.NumberTextBoxMixin} new instance
*/
dijit.form.NumberTextBoxMixin=function(){};
/**
 * @namespace
*/
dijit.form.NumberTextBoxMixin.editOptions={};
/**
 * <b>Summary:</b><blockquote>
 *	 Convert value (a Number) into a canonical string (ie, how the number literal is written in javascript/java/C/etc.)<br>
 * </blockquote>
 * @param {Number} value 
 * @param {Object} [options] 
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype.serialize=function(value, options){};
/**
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Replaceable function to convert a formatted string to a number value<br>
 * </blockquote>
 * @param {String} value 
 * @param {number.__FormatOptions} constraints 
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype.parse=function(value, constraints){};
/**
 * @param {Boolean} isFocused 
 * @returns {valid exponential number in range} -
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype.isValid=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 Formats the value as a Number, according to constraints.<br>
 * </blockquote>
 * @param {Number} value 
 * @param {dojo.number.__FormatOptions} constraints 
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype.format=function(value, constraints){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is called with both the display value (string), and the actual value (a number).<br>
 *	 When called with the actual value it does corrections so that '' etc. are represented as NaN.<br>
 *	 Otherwise it dispatches to the superclass's filter() method.<br>
 *	 <br>
 *	 See `dijit.form.TextBox.filter` for more details.<br>
 * </blockquote>
 * @param {Number} value 
 * @returns {set('value', null||''|undefined) should fire onChange(NaN)} -
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype.filter=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('value', ...) works.<br>
 * </blockquote>
 * @param {Number} value 
 * @param {Boolean} [priorityChange] 
 * @param {String} [formattedValue] 
 * @private
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype._setValueAttr=function(value, priorityChange, formattedValue){};
/**
 * @param {Object} constraints 
 * @private
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype._setConstraintsAttr=function(constraints){};
/**
 * @private
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype._setBlurValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parses the string value as a Number, according to constraints.<br>
 * </blockquote>
 * @param {String} value String representing a number
 * @param {dojo.number.__ParseOptions} constraints Formatting options
 * @returns {Number} -
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype._parser=function(value, constraints){};
/**
 * @private
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype._onFocus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so get('value') works.<br>
 *	 Returns Number, NaN for '', or undefined for unparseable text<br>
 * </blockquote>
 * @private
 * @returns {return exponential Number or undefined for random text (may not be possible to do with the above RegExp check)|gibberish|Number or NaN for ''} -
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype._getValueAttr=function(){};
/**
 * @private
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype._getDisplayedValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 _formatter() is called by format().  It's the base routine for formatting a number,<br>
 *	 as a string, for example converting 12345 into &amp;quot;12,345&amp;quot;.<br>
 * </blockquote>
 * @param {Number} value The number to be converted into a string.
 * @param {dojo.number.__FormatOptions} [options] Formatting options
 * @returns {String} -
 * @memberOf dijit.form.NumberTextBoxMixin
*/
dijit.form.NumberTextBoxMixin.prototype._formatter=function(value, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Same as an HTML radio, but with fancy styling.<br>
 * </blockquote>
 * @class
 * @extends dijit.form.CheckBox
 * @extends dijit.form._RadioButtonMixin
 * @returns {dijit.form.RadioButton} new instance
*/
dijit.form.RadioButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to provide widget functionality for an HTML radio button<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit.form._RadioButtonMixin} new instance
*/
dijit.form._RadioButtonMixin=function(){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dijit.form._RadioButtonMixin
*/
dijit.form._RadioButtonMixin.prototype._setCheckedAttr=function(value){};
/**
 * @param {Event} e 
 * @private
 * @memberOf dijit.form._RadioButtonMixin
*/
dijit.form._RadioButtonMixin.prototype._onClick=function(e){};
/**
 * @private
 * @memberOf dijit.form._RadioButtonMixin
*/
dijit.form._RadioButtonMixin.prototype._getRelatedWidgets=function(){};
/**
 * @class
 * @private
 * @returns {dijit.form.RangeBoundTextBox.__Constraints} new instance
*/
dijit.form.RangeBoundTextBox.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An internally-used menu for dropdown that allows us a vertical scrollbar<br>
 * </blockquote>
 * @class
 * @extends dijit.Menu
 * @returns {dijit.form._SelectMenu} new instance
*/
dijit.form._SelectMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridden so that we are able to handle resizing our<br>
 *	 internal widget.  Note that this is not a &amp;quot;full&amp;quot; resize<br>
 *	 implementation - it only works correctly if you pass it a<br>
 *	 marginBox.<br>
 * </blockquote>
 * @param {Object} mb The margin box to set this dropdown to.
 * @memberOf dijit.form._SelectMenu
*/
dijit.form._SelectMenu.prototype.resize=function(mb){};
/**
 * <b>Summary:</b><blockquote>
 *	 stop mousemove from selecting text on IE to be consistent with other browsers<br>
 * </blockquote>
 * @memberOf dijit.form._SelectMenu
*/
dijit.form._SelectMenu.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub in our own changes, so that our domNode is not a table<br>
 *	 otherwise, we won't respond correctly to heights/overflows<br>
 * </blockquote>
 * @memberOf dijit.form._SelectMenu
*/
dijit.form._SelectMenu.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a &amp;quot;styleable&amp;quot; select box - it is basically a DropDownButton which<br>
 *	 can take a &amp;lt;select&amp;gt; as its input.<br>
 * </blockquote>
 * @class
 * @extends dijit._FormSelectWidget
 * @extends dijit._HasDropDown
 * @returns {dijit.form.Select} new instance
*/
dijit.form.Select=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called by oninit, onblur, and onkeypress, and whenever required/disabled state changes<br>
 * </blockquote>
 * Show missing or invalid messages if appropriate, and highlight textbox field.<br>
 * Used when a select is initially set to no value and the user is required to<br>
 * set the value.
 * @param {Boolean} isFocused 
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype.validate=function(isFocused){};
/**
 * @param {mixed} preserveDom 
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype.uninitialize=function(preserveDom){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridden so that the state will be cleared.<br>
 * </blockquote>
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the missing message<br>
 * </blockquote>
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 stop mousemove from selecting text on IE to be consistent with other browsers<br>
 * </blockquote>
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 populates the menu<br>
 * </blockquote>
 * @param {Function} loadCallback 
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype.loadDropDown=function(loadCallback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Whether or not this is a valid value.  The only way a Select<br>
 *	 can be invalid is when it's required but nothing is selected.<br>
 * </blockquote>
 * @param {Boolean} isFocused 
 * @returns {handle value is null or undefined} -
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype.isValid=function(isFocused){};
/**
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype.isLoaded=function(){};
/**
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype.closeDropDown=function(){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._setValueAttr=function(value){};
/**
 * @param {String||Object} value 
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._setStyleAttr=function(value){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._setRequiredAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the display for the given value (or values)<br>
 * </blockquote>
 * @param {String} newDisplay 
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._setDisplay=function(newDisplay){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._setDisabledAttr=function(value){};
/**
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._onFocus=function(){};
/**
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resets the menu and the length attribute of the button - and<br>
 *	 ensures that the label is appropriately set.<br>
 * </blockquote>
 * @param {Boolean} loadMenuItems actually loads the child menu items - we only do this when we are
 * populating for showing the dropdown.
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._loadChildren=function(loadMenuItems){};
/**
 * <b>Summary:</b><blockquote>
 *	 For the given option, return the menu item that should be<br>
 *	 used to display it.  This can be overridden as needed<br>
 * </blockquote>
 * @param {dijit.form.__SelectOption} option 
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._getMenuItemForOption=function(option){};
/**
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._getChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the value to be the first, or the selected index<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._fillContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 For the given option, add an option to our dropdown.<br>
 *	 If the option doesn't have a value, then a separator is added<br>
 *	 in that place.<br>
 * </blockquote>
 * @param {dijit.form.__SelectOption} option 
 * @private
 * @memberOf dijit.form.Select
*/
dijit.form.Select.prototype._addOptionItem=function(option){};
/**
 * <b>Summary:</b><blockquote>
 *	 A context menu you can assign to multiple elements<br>
 * </blockquote>
 * @class
 * @extends dijit.DropDownMenu
 * @returns {dijit.Menu} new instance
*/
dijit.Menu=function(){};
/**
 * @memberOf dijit.Menu
*/
dijit.Menu.prototype.uninitialize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Detach menu from given node<br>
 * </blockquote>
 * @param {String|DomNode} nodeName 
 * @memberOf dijit.Menu
*/
dijit.Menu.prototype.unBindDomNode=function(nodeName){};
/**
 * @memberOf dijit.Menu
*/
dijit.Menu.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an array of placeholders with the given label.  There<br>
 *	 can be multiples.<br>
 * </blockquote>
 * @param {String} [label] Label to search for - if not specified, then all placeholders
 * are returned<br>
 * 
 * @returns {dojox.widget.PlaceholderMenuItem[]} -
 * @memberOf dijit.Menu
*/
dijit.Menu.prototype.getPlaceholders=function(label){};
/**
 * <b>Summary:</b><blockquote>
 *	 Attach menu to given node<br>
 * </blockquote>
 * @param {String|DomNode} node 
 * @memberOf dijit.Menu
*/
dijit.Menu.prototype.bindDomNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set timer to display myself.  Using a timer rather than displaying immediately solves<br>
 *	 two problems:<br>
 *	 <br>
 *	 1. IE: without the delay, focus work in &amp;quot;open&amp;quot; causes the system<br>
 *	 context menu to appear in spite of stopEvent.<br>
 *	 <br>
 *	 2. Avoid double-shows on linux, where shift-F10 generates an oncontextmenu event<br>
 *	 even after a event.stop(e).  (Shift-F10 on windows doesn't generate the<br>
 *	 oncontextmenu event.)<br>
 * </blockquote>
 * @param {DomNode} [target] 
 * @param {DomNode} [iframe] 
 * @param {Object} [coords] 
 * @private
 * @memberOf dijit.Menu
*/
dijit.Menu.prototype._scheduleOpen=function(target, iframe, coords){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for opening myself when the user does a right-click or something similar.<br>
 * </blockquote>
 * @param {This} args is an Object containing:
 * * target:<br>
 * The node that is being clicked<br>
 * * iframe:<br>
 * If an &lt;iframe&gt; is being clicked, iframe points to that iframe<br>
 * * coords:<br>
 * Put menu at specified x/y position in viewport, or if iframe is<br>
 * specified, then relative to iframe.<br>
 * <br>
 * _openMyself() formerly took the event object, and since various code references<br>
 * evt.target (after connecting to _openMyself()), using an Object for parameters<br>
 * (so that old code still works).
 * @private
 * @memberOf dijit.Menu
*/
dijit.Menu.prototype._openMyself=function(args){};
/**
 * @private
 * @memberOf dijit.Menu
*/
dijit.Menu.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the window reference of the passed iframe<br>
 * </blockquote>
 * @param {HTMLIFrameElement} iframe_el 
 * @private
 * @memberOf dijit.Menu
*/
dijit.Menu.prototype._iframeContentWindow=function(iframe_el){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a reference to the document object inside iframe_el<br>
 * </blockquote>
 * @param {HTMLIFrameElement} iframe_el 
 * @returns {W3} -
 * @memberOf dijit.Menu
*/
dijit.Menu.prototype._iframeContentDocument=function(iframe_el){};
/**
 * <b>Summary:</b><blockquote>
 *	 A line between two menu items<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._TemplatedMixin
 * @extends dijit._Contained
 * @returns {dijit.MenuSeparator} new instance
*/
dijit.MenuSeparator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override to always return false<br>
 * </blockquote>
 * @returns {Boolean} -
 * @memberOf dijit.MenuSeparator
*/
dijit.MenuSeparator.prototype.isFocusable=function(){};
/**
 * @memberOf dijit.MenuSeparator
*/
dijit.MenuSeparator.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pops up a tooltip (a help message) when you hover over a node.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @returns {dijit.Tooltip} new instance
*/
dijit.Tooltip=function(){};
/**
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype.uninitialize=function(){};
/**
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Detach tooltip from specified node<br>
 * </blockquote>
 * @param {DomNode} node || String
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype.removeTarget=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Display the tooltip; usually not called directly.<br>
 * </blockquote>
 * @param {DomNode} target 
 * @private
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype.open=function(target){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the tooltip is shown<br>
 * </blockquote>
 * @param {mixed} target 
 * @param {mixed} position 
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype.onShow=function(target, position){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the tooltip is hidden<br>
 * </blockquote>
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype.onHide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide the tooltip or cancel timer for show of tooltip<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype.close=function(){};
/**
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Attach tooltip to specified node if it's not already connected<br>
 * </blockquote>
 * @param {DOMNODE} node || String
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype.addTarget=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to specified node(s)<br>
 * </blockquote>
 * @param {String|String[]} newId 
 * @private
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype._setConnectIdAttr=function(newId){};
/**
 * <b>Summary:</b><blockquote>
 *	 Despite the name of this method, it actually handles both mouseleave and blur<br>
 *	 events on the target node, hiding the tooltip.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype._onUnHover=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Despite the name of this method, it actually handles both hover and focus<br>
 *	 events on the target node, setting a timer to show the tooltip.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.Tooltip
*/
dijit.Tooltip.prototype._onHover=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple textarea that degrades, and responds to<br>
 *	 minimal LayoutContainer usage, and works with dijit.form.Form.<br>
 *	 Doesn't automatically size according to input, like Textarea.<br>
 * </blockquote>
 * @class
 * @extends dijit.form.TextBox
 * @returns {dijit.form.SimpleTextarea} new instance
 * @example
 * 	&lt;textarea data-dojo-type="dijit.form.SimpleTextarea" name="foo" value="bar" rows=30 cols=40&gt;&lt;/textarea&gt;
 * @example
 * 	new dijit.form.SimpleTextarea({ rows:20, cols:30 }, "foo");
*/
dijit.form.SimpleTextarea=function(){};
/**
 * @memberOf dijit.form.SimpleTextarea
*/
dijit.form.SimpleTextarea.prototype.postMixInProperties=function(){};
/**
 * @param {String} value 
 * @memberOf dijit.form.SimpleTextarea
*/
dijit.form.SimpleTextarea.prototype.filter=function(value){};
/**
 * @memberOf dijit.form.SimpleTextarea
*/
dijit.form.SimpleTextarea.prototype.buildRendering=function(){};
/**
 * @param {Event} [e] 
 * @private
 * @memberOf dijit.form.SimpleTextarea
*/
dijit.form.SimpleTextarea.prototype._onInput=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A base class for textbox form inputs<br>
 * </blockquote>
 * @class
 * @extends dijit.form._FormValueWidget
 * @extends dijit.form._TextBoxMixin
 * @returns {dijit.form.TextBox} new instance
*/
dijit.form.TextBox=function(){};
/**
 * @namespace
 * @private
*/
dijit.form.TextBox._phspan={};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use set('displayedValue', ...) instead.<br>
 * </blockquote>
 * @param {String} value 
 * @memberOf dijit.form.TextBox
*/
dijit.form.TextBox.prototype.setDisplayedValue=function(value){};
/**
 * @memberOf dijit.form.TextBox
*/
dijit.form.TextBox.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use get('displayedValue') instead.<br>
 * </blockquote>
 * @memberOf dijit.form.TextBox
*/
dijit.form.TextBox.prototype.getDisplayedValue=function(){};
/**
 * @private
 * @memberOf dijit.form.TextBox
*/
dijit.form.TextBox.prototype._updatePlaceHolder=function(){};
/**
 * @param {mixed} value 
 * @param {Boolean} [priorityChange] 
 * @param {String} [formattedValue] 
 * @private
 * @memberOf dijit.form.TextBox
*/
dijit.form.TextBox.prototype._setValueAttr=function(value, priorityChange, formattedValue){};
/**
 * @param {mixed} v 
 * @private
 * @memberOf dijit.form.TextBox
*/
dijit.form.TextBox.prototype._setPlaceHolderAttr=function(v){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form.TextBox
*/
dijit.form.TextBox.prototype._onInput=function(e){};
/**
 * @param {String} by 
 * @private
 * @memberOf dijit.form.TextBox
*/
dijit.form.TextBox.prototype._onFocus=function(by){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form.TextBox
*/
dijit.form.TextBox.prototype._onBlur=function(e){};
/**
*/
dijit.form.TextBox.MozMixin=function(){};
/**
*/
dijit.form.TextBox.IEMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A textarea widget that adjusts it's height according to the amount of data.<br>
 * </blockquote>
 * A textarea that dynamically expands/contracts (changing it's height) as<br>
 * the user types, to display all the text without requiring a scroll bar.<br>
 * <br>
 * Takes nearly all the parameters (name, value, etc.) that a vanilla textarea takes.<br>
 * Rows is not supported since this widget adjusts the height.
 * @class
 * @extends dijit.form.SimpleTextarea
 * @extends dijit.form._ExpandingTextAreaMixin
 * @returns {dijit.form.Textarea} new instance
 * @example
 * 	&lt;textarea data-dojo-type="dijit.form.TextArea"&gt;...&lt;/textarea&gt;
*/
dijit.form.Textarea=function(){};
/**
 * @memberOf dijit.form.Textarea
*/
dijit.form.Textarea.prototype.buildRendering=function(){};
/**
 * @class
 * @returns {dijit.form.TextBox.IEMixin} new instance
*/
dijit.form.TextBox.IEMixin=function(){};
/**
 * @memberOf dijit.form.TextBox.IEMixin
*/
dijit.form.TextBox.IEMixin.prototype.postCreate=function(){};
/**
 * @private
 * @memberOf dijit.form.TextBox.IEMixin
*/
dijit.form.TextBox.IEMixin.prototype._isTextSelected=function(){};
/**
 * @class
 * @returns {dijit.form.TextBox.MozMixin} new instance
*/
dijit.form.TextBox.MozMixin=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form.TextBox.MozMixin
*/
dijit.form.TextBox.MozMixin.prototype._onBlur=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin for textbox form input widgets<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit.form._TextBoxMixin} new instance
*/
dijit.form._TextBoxMixin=function(){};
/**
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype.reset=function(){};
/**
 * @returns {keydown for A-Z can be processed with keypress|if preventDefault was called} -
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Replaceable function to convert a formatted string to a value<br>
 * </blockquote>
 * @param {String} value 
 * @param {Object} constraints 
 * @returns {String} -
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype.parse=function(value, constraints){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect to this function to receive notifications of various user data-input events.<br>
 *	 Return false to cancel the event and prevent it from being processed.<br>
 * </blockquote>
 * @param {keydown} event | keypress | cut | paste | input
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype.onInput=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Replaceable function to convert a value to a properly formatted string.<br>
 * </blockquote>
 * @param {String} value 
 * @param {Object} constraints 
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype.format=function(value, constraints){};
/**
 * <b>Summary:</b><blockquote>
 *	 Auto-corrections (such as trimming) that are applied to textbox<br>
 *	 value on blur or form submit.<br>
 * </blockquote>
 * For MappedTextBox subclasses, this is called twice<br>
 * - once with the display value<br>
 * - once the value as set/returned by set('value', ...)<br>
 * and get('value'), ex: a Number for NumberTextBox.<br>
 * <br>
 * In the latter case it does corrections like converting null to NaN.  In<br>
 * the former case the NumberTextBox.filter() method calls this.inherited()<br>
 * to execute standard trimming code in TextBox.filter().<br>
 * <br>
 * TODO: break this into two methods in 2.0
 * @param {mixed} val 
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype.filter=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('value', ...) works.<br>
 * </blockquote>
 * Sets the value of the widget to "value" which can be of<br>
 * any type as determined by the widget.
 * @param {The} value visual element value is also set to a corresponding,
 * but not necessarily the same, value.
 * @param {Boolean} [priorityChange] If true, an onChange event is fired immediately instead of
 * waiting for the next blur event.
 * @param {String} [formattedValue] If specified, used to set the visual element value,
 * otherwise a computed visual value is used.
 * @private
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype._setValueAttr=function(value, priorityChange, formattedValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Setter for textDir.<br>
 * </blockquote>
 * Users shouldn't call this function; they should be calling<br>
 * set('textDir', value)
 * @param {String} textDir 
 * @private
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype._setTextDirAttr=function(textDir){};
/**
 * @param {DomNode} element 
 * @param {Number} [start] 
 * @param {Number} [stop] 
 * @private
*/
dijit.form._TextBoxMixin._setSelectionRange=function(element, start, stop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('displayedValue', ...) works.<br>
 * </blockquote>
 * Sets the value of the visual element to the string "value".<br>
 * The widget value is also set to a corresponding,<br>
 * but not necessarily the same, value.
 * @param {String} value 
 * @private
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype._setDisplayedValueAttr=function(value){};
/**
 * @private
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype._setBlurValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 After the user types some characters, etc., this method is<br>
 *	 called to check the field for validity etc.  The base method<br>
 *	 in `dijit.form.TextBox` does nothing, but subclasses override.<br>
 * </blockquote>
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype._refreshState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called AFTER the input event has happened<br>
 *	 set text direction according to textDir that was defined in creation<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype._onInput=function(){};
/**
 * @param {String} by 
 * @private
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype._onFocus=function(by){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype._onBlur=function(e){};
/**
 * @private
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype._isTextSelected=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so get('value') works as we like.<br>
 * </blockquote>
 * For `dijit.form.TextBox` this basically returns the value of the &lt;input&gt;.<br>
 * <br>
 * For `dijit.form.MappedTextBox` subclasses, which have both<br>
 * a "displayed value" and a separate "submit value",<br>
 * This treats the "displayed value" as the master value, computing the<br>
 * submit value from it via this.parse().
 * @private
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so get('displayedValue') works.<br>
 * </blockquote>
 * Returns the displayed value (what the user sees on the screen),<br>
 * after filtering (ie, trimming spaces etc.).<br>
 * <br>
 * For some subclasses of TextBox (like ComboBox), the displayed value<br>
 * is different from the serialized value that's actually<br>
 * sent to the server (see dijit.form.ValidationTextBox.serialize)
 * @see dijit.form.ValidationTextBox
 * @private
 * @memberOf dijit.form._TextBoxMixin
*/
dijit.form._TextBoxMixin.prototype._getDisplayedValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound time text box with a drop down time picker<br>
 * </blockquote>
 * @class
 * @extends dijit.form._DateTimeTextBox
 * @returns {dijit.form.TimeTextBox} new instance
*/
dijit.form.TimeTextBox=function(){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dijit.form.TimeTextBox
*/
dijit.form.TimeTextBox.prototype._onKey=function(evt){};
/**
 * @private
*/
dijit.form.TimeTextBox.__Constraints=function(){};
/**
 * @class
 * @extends dijit.form._DateTimeTextBox.__Constraints
 * @extends dijit._TimePicker.__Constraints
 * @private
 * @returns {dijit.form.TimeTextBox.__Constraints} new instance
*/
dijit.form.TimeTextBox.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A graphical time picker.<br>
 *	 This widget is used internally by other widgets and is not available<br>
 *	 as a standalone widget due to lack of accessibility support.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @private
 * @returns {dijit._TimePicker} new instance
*/
dijit._TimePicker=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Used set('value') instead.<br>
 * </blockquote>
 * @param {Date} value 
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype.setValue=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 User overridable function used to convert the attr('value') result to a String<br>
 * </blockquote>
 * @param {Date} val The current value
 * @param {Object} [options] 
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype.serialize=function(val, options){};
/**
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype.postMixInProperties=function(){};
/**
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onmouseover event<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype.onmouseover=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onmouseout event<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype.onmouseout=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Notification that a time was selected.  It may be the same as the previous value.<br>
 * </blockquote>
 * @param {Date} time 
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype.onChange=function(time){};
/**
 * <b>Summary:</b><blockquote>
 *	 May be overridden to disable certain dates in the TimePicker e.g. `isDisabledDate=locale.isWeekend`<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @param {String} [locale] type:
 * extension
 * @returns {Boolean} -
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype.isDisabledDate=function(dateObject, locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called from `dijit.form._DateTimeTextBox` to pass a keypress event<br>
 *	 from the `dijit.form.TimeTextBox` to be handled in this widget<br>
 * </blockquote>
 * @param {Event} e 
 * @returns {true means don't call stopEvent()} -
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype.handleKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Displays the relevant choices in the drop down list<br>
 * </blockquote>
 * @private
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._showText=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('value', ...) works.<br>
 * </blockquote>
 * Set the value of the TimePicker.<br>
 * Redraws the TimePicker around the new date.
 * @param {Date} date 
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._setValueAttr=function(date){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called by TimeTextBox to filter the values shown in my list<br>
 * </blockquote>
 * @param {mixed} val 
 * @private
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._setFilterStringAttr=function(val){};
/**
 * @param {Object} constraints 
 * @private
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._setConstraintsAttr=function(constraints){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when user clicks an option in the drop down list<br>
 * </blockquote>
 * @param {Object} tgt 
 * @private
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._onOptionSelected=function(tgt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for up arrow key.<br>
 * </blockquote>
 * Removes the bottom time and add one to the top
 * @param {mixed} count 
 * @private
 * @returns {typematic end} -
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._onArrowUp=function(count){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for up arrow key.<br>
 * </blockquote>
 * Remove the top time and add one to the bottom
 * @param {mixed} count 
 * @private
 * @returns {typematic end} -
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._onArrowDown=function(count){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the mouse wheel events<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._mouseWheeled=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Turns on/off highlight effect on a node based on mouse out/over event<br>
 * </blockquote>
 * @param {node} node 
 * @param {Boolean} highlight 
 * @private
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._highlightOption=function(node, highlight){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an array of nodes with the filter applied.  At most maxNum nodes<br>
 *	 will be returned - but fewer may be returned as well.  If the<br>
 *	 before parameter is set to true, then it will return the elements<br>
 *	 before the given index<br>
 * </blockquote>
 * @param {number} start 
 * @param {number} maxNum 
 * @param {Boolean} before 
 * @param {DOMnode} lastNode 
 * @private
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._getFilteredNodes=function(start, maxNum, before, lastNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a clickable time option<br>
 * </blockquote>
 * @param {Number} index 
 * @private
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._createOption=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for hover (and unhover) on up/down arrows<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit._TimePicker
*/
dijit._TimePicker.prototype._buttonMouse=function(e){};
/**
 * @private
*/
dijit._TimePicker.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin to provide functionality to allow a button that can be in two states (checked or not).<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit.form._ToggleButtonMixin} new instance
*/
dijit.form._ToggleButtonMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reset the widget's value to what it was at initialization time<br>
 * </blockquote>
 * @memberOf dijit.form._ToggleButtonMixin
*/
dijit.form._ToggleButtonMixin.prototype.reset=function(){};
/**
 * @param {Boolean} value 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.form._ToggleButtonMixin
*/
dijit.form._ToggleButtonMixin.prototype._setCheckedAttr=function(value, priorityChange){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dijit.form._ToggleButtonMixin
*/
dijit.form._ToggleButtonMixin.prototype._onClick=function(evt){};
/**
 * @class
 * @private
 * @returns {dijit.form.ValidationTextBox.__Constraints} new instance
*/
dijit.form.ValidationTextBox.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hash marks for the `dijit.form.VerticalSlider`<br>
 * </blockquote>
 * @class
 * @extends dijit.form.HorizontalRule
 * @returns {dijit.form.VerticalRule} new instance
*/
dijit.form.VerticalRule=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Labels for the `dijit.form.VerticalSlider`<br>
 * </blockquote>
 * @class
 * @extends dijit.form.HorizontalRuleLabels
 * @returns {dijit.form.VerticalRuleLabels} new instance
*/
dijit.form.VerticalRuleLabels=function(){};
/**
 * @param {mixed} pos 
 * @private
 * @memberOf dijit.form.VerticalRuleLabels
*/
dijit.form.VerticalRuleLabels.prototype._calcPosition=function(pos){};
/**
 * <b>Summary:</b><blockquote>
 *	 A form widget that allows one to select a value with a vertically draggable handle<br>
 * </blockquote>
 * @class
 * @extends dijit.form.HorizontalSlider
 * @returns {dijit.form.VerticalSlider} new instance
*/
dijit.form.VerticalSlider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides HorizontalSlider._isReversed.<br>
 *	 Indicates if values are high on top (with low numbers on the bottom).<br>
 * </blockquote>
 * @private
 * @memberOf dijit.form.VerticalSlider
*/
dijit.form.VerticalSlider.prototype._isReversed=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal widget used by InlineEditBox, displayed when in editing mode<br>
 *	 to display the editor and maybe save/cancel buttons.  Calling code should<br>
 *	 connect to save/cancel methods to detect when editing is finished<br>
 *	 <br>
 *	 Has mainly the same parameters as InlineEditBox, plus these values:<br>
 *	 <br>
 *	 style: Object<br>
 *	 Set of CSS attributes of display node, to replicate in editor<br>
 *	 <br>
 *	 value: String<br>
 *	 Value as an HTML string or plain text string, depending on renderAsHTML flag<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dijit._InlineEditor} new instance
*/
dijit._InlineEditor=function(){};
/**
 * @memberOf dijit._InlineEditor
*/
dijit._InlineEditor.prototype.postMixInProperties=function(){};
/**
 * @memberOf dijit._InlineEditor
*/
dijit._InlineEditor.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the [display] value of the edit widget<br>
 * </blockquote>
 * @memberOf dijit._InlineEditor
*/
dijit._InlineEditor.prototype.getValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus the edit widget.<br>
 * </blockquote>
 * @memberOf dijit._InlineEditor
*/
dijit._InlineEditor.prototype.focus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 User overridable function returning a Boolean to indicate<br>
 *	 if the Save button should be enabled or not - usually due to invalid conditions<br>
 * </blockquote>
 * @memberOf dijit._InlineEditor
*/
dijit._InlineEditor.prototype.enableSave=function(){};
/**
 * @memberOf dijit._InlineEditor
*/
dijit._InlineEditor.prototype.destroy=function(){};
/**
 * @memberOf dijit._InlineEditor
*/
dijit._InlineEditor.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for keypress in the edit box in autoSave mode.<br>
 * </blockquote>
 * For autoSave widgets, if Esc/Enter, call cancel/save.
 * @param {mixed} e 
 * @private
 * @memberOf dijit._InlineEditor
*/
dijit._InlineEditor.prototype._onKeyPress=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called for editor widgets that support the intermediateChanges=true flag as a way<br>
 *	 to detect when to enable/disabled the save button<br>
 * </blockquote>
 * @param {mixed} val 
 * @private
 * @memberOf dijit._InlineEditor
*/
dijit._InlineEditor.prototype._onIntermediateChange=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the underlying widget fires an onChange event,<br>
 *	 such as when the user selects a value from the drop down list of a ComboBox,<br>
 *	 which means that the user has finished entering the value and we should save.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._InlineEditor
*/
dijit._InlineEditor.prototype._onChange=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when focus moves outside the editor<br>
 * </blockquote>
 * @private
 * @memberOf dijit._InlineEditor
*/
dijit._InlineEditor.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An element with in-line edit capabilities<br>
 * </blockquote>
 * Behavior for an existing node (`&lt;p&gt;`, `&lt;div&gt;`, `&lt;span&gt;`, etc.) so that<br>
 * when you click it, an editor shows up in place of the original<br>
 * text.  Optionally, Save and Cancel button are displayed below the edit widget.<br>
 * When Save is clicked, the text is pulled from the edit<br>
 * widget and redisplayed and the edit widget is again hidden.<br>
 * By default a plain Textarea widget is used as the editor (or for<br>
 * inline values a TextBox), but you can specify an editor such as<br>
 * dijit.Editor (for editing HTML) or a Slider (for adjusting a number).<br>
 * An edit widget must support the following API to be used:<br>
 * - displayedValue or value as initialization parameter,<br>
 * and available through set('displayedValue') / set('value')<br>
 * - void focus()<br>
 * - DOM-node focusNode = node containing editable text
 * @class
 * @extends dijit._Widget
 * @returns {dijit.InlineEditBox} new instance
*/
dijit.InlineEditBox=function(){};
/**
 * @namespace
*/
dijit.InlineEditBox.wrapperWidget={};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   Use set('value', ...) instead.<br>
 * </blockquote>
 * @param {String} val 
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype.setValue=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   Use set('disabled', ...) instead.<br>
 * </blockquote>
 * @param {Boolean} disabled 
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype.setDisabled=function(disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Save the contents of the editor and revert to display mode.<br>
 * </blockquote>
 * @param {Boolean} focus Focus on the display mode text
 * @private
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype.save=function(focus){};
/**
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set this handler to be notified of changes to value.<br>
 * </blockquote>
 * @param {mixed} value 
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype.onChange=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set this handler to be notified when editing is cancelled.<br>
 * </blockquote>
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype.onCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   Use get('value') instead.<br>
 * </blockquote>
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype.getValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Display the editor widget in place of the original (read only) markup.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype.edit=function(){};
/**
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Revert to display mode, discarding any changes made in the editor<br>
 * </blockquote>
 * @param {Boolean} focus 
 * @private
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype.cancel=function(focus){};
/**
 * <b>Summary:</b><blockquote>
 *	 Revert to display mode, and optionally focus on display node<br>
 * </blockquote>
 * @param {Boolean} focus 
 * @private
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype._showText=function(focus){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook to make set(&amp;quot;value&amp;quot;, ...) work.<br>
 *	 Inserts specified HTML value into this node, or an &amp;quot;input needed&amp;quot; character if node is blank.<br>
 * </blockquote>
 * @param {String} val 
 * @private
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype._setValueAttr=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Setter for textDir.<br>
 * </blockquote>
 * Users shouldn't call this function; they should be calling<br>
 * set('textDir', value)
 * @param {String} textDir 
 * @private
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype._setTextDirAttr=function(textDir){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook to make set(&amp;quot;disabled&amp;quot;, ...) work.<br>
 *	 Set disabled state of widget.<br>
 * </blockquote>
 * @param {Boolean} disabled 
 * @private
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype._setDisabledAttr=function(disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onmouseover and onfocus event.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype._onMouseOver=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onmouseout and onblur event.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype._onMouseOut=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onclick event.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype._onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when focus moves outside the InlineEditBox.<br>
 *	 Performs garbage collection.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.InlineEditBox
*/
dijit.InlineEditBox.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A _Container with keyboard navigation of its children.<br>
 * </blockquote>
 * To use this mixin, call connectKeyNavHandlers() in<br>
 * postCreate().<br>
 * It provides normalized keyboard and focusing code for Container<br>
 * widgets.
 * @class
 * @extends dijit._FocusMixin
 * @extends dijit._Container
 * @private
 * @returns {dijit._KeyNavContainer} new instance
*/
dijit._KeyNavContainer=function(){};
/**
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype.startupKeyNavChildren=function(){};
/**
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus the last focusable node in the previous widget<br>
 *	 (ex: go to the ComboButton icon section rather than button section)<br>
 * </blockquote>
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype.focusPrev=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus the next widget<br>
 * </blockquote>
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype.focusNext=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus the last focusable child in the container.<br>
 * </blockquote>
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype.focusLastChild=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus the first focusable child in the container.<br>
 * </blockquote>
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype.focusFirstChild=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus specified child widget.<br>
 * </blockquote>
 * @param {dijit._Widget} widget Reference to container's child widget
 * @param {Boolean} last If true and if widget has multiple focusable nodes, focus the
 * last one instead of the first one
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype.focusChild=function(widget, last){};
/**
 * <b>Summary:</b><blockquote>
 *	 Default focus() implementation: focus the first child.<br>
 * </blockquote>
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype.focus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call in postCreate() to attach the keyboard handlers<br>
 *	 to the container.<br>
 *	 preKeyCodes: keys[]<br>
 *	 Key codes for navigating to the previous child.<br>
 * </blockquote>
 * @param {keys[]} prevKeyCodes 
 * @param {keys[]} nextKeyCodes Key codes for navigating to the next child.
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype.connectKeyNavHandlers=function(prevKeyCodes, nextKeyCodes){};
/**
 * @param {dijit._Widget} widget 
 * @param {int} [insertIndex] 
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype.addChild=function(widget, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Setup for each child widget<br>
 * </blockquote>
 * Sets tabIndex=-1 on each child, so that the tab key will<br>
 * leave the container rather than visiting each child.
 * @param {dijit._Widget} widget 
 * @private
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype._startupChild=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 When a key is pressed, if it's an arrow key etc. then<br>
 *	 it's handled here.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @private
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype._onContainerKeypress=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for when the container gets focus<br>
 * </blockquote>
 * Initially the container itself has a tabIndex, but when it gets<br>
 * focus, switch focus to first child...
 * @param {mixed} evt 
 * @private
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype._onContainerFocus=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when focus leaves a child widget to go<br>
 *	 to a sibling widget.<br>
 *	 Used by MenuBase.js (TODO: move code there)<br>
 * </blockquote>
 * @param {dijit._Widget} widget 
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype._onChildBlur=function(widget){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype._onBlur=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the next or previous focusable child, compared<br>
 *	 to &amp;quot;child&amp;quot;<br>
 * </blockquote>
 * @param {Widget} child The current widget
 * @param {Integer} dir * 1 = after
 * * -1 = before
 * @private
 * @returns {dijit._Widget} -
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype._getNextFocusableChild=function(child, dir){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns last child that can be focused<br>
 * </blockquote>
 * @private
 * @returns {dijit._Widget} -
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype._getLastFocusableChild=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns first child that can be focused<br>
 * </blockquote>
 * @private
 * @returns {dijit._Widget} -
 * @memberOf dijit._KeyNavContainer
*/
dijit._KeyNavContainer.prototype._getFirstFocusableChild=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The title bar to click to open up an accordion pane.<br>
 *	 Internal widget used by AccordionContainer.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._CssStateMixin
 * @returns {dijit.layout._AccordionButton} new instance
*/
dijit.layout._AccordionButton=function(){};
/**
 * @namespace
 * @private
*/
dijit.layout._AccordionButton._setTitleAttr={};
/**
 * @namespace
 * @private
*/
dijit.layout._AccordionButton._setLabelAttr={};
/**
 * @namespace
 * @private
*/
dijit.layout._AccordionButton._setIconClassAttr={};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the height of the title dom node.<br>
 * </blockquote>
 * @returns {Integer} -
 * @memberOf dijit.layout._AccordionButton
*/
dijit.layout._AccordionButton.prototype.getTitleHeight=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the AccordionContainer parent.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.layout._AccordionButton
*/
dijit.layout._AccordionButton.prototype.getParent=function(){};
/**
 * @memberOf dijit.layout._AccordionButton
*/
dijit.layout._AccordionButton.prototype.buildRendering=function(){};
/**
 * @param {Boolean} isSelected 
 * @private
 * @memberOf dijit.layout._AccordionButton
*/
dijit.layout._AccordionButton.prototype._setSelectedAttr=function(isSelected){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dijit.layout._AccordionButton
*/
dijit.layout._AccordionButton.prototype._onTitleKeyPress=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when someone clicks my title.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.layout._AccordionButton
*/
dijit.layout._AccordionButton.prototype._onTitleClick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal widget placed as direct child of AccordionContainer.containerNode.<br>
 *	 When other widgets are added as children to an AccordionContainer they are wrapped in<br>
 *	 this widget.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._CssStateMixin
 * @returns {dijit.layout._AccordionInnerContainer} new instance
*/
dijit.layout._AccordionInnerContainer=function(){};
/**
 * @memberOf dijit.layout._AccordionInnerContainer
*/
dijit.layout._AccordionInnerContainer.contentWidget=null;
/**
 * @memberOf dijit.layout._AccordionInnerContainer
*/
dijit.layout._AccordionInnerContainer.prototype.startup=function(){};
/**
 * @memberOf dijit.layout._AccordionInnerContainer
*/
dijit.layout._AccordionInnerContainer.prototype.postCreate=function(){};
/**
 * @param {Boolean} preserveDom 
 * @memberOf dijit.layout._AccordionInnerContainer
*/
dijit.layout._AccordionInnerContainer.prototype.destroyDescendants=function(preserveDom){};
/**
 * @memberOf dijit.layout._AccordionInnerContainer
*/
dijit.layout._AccordionInnerContainer.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 || String<br>
 *	 Class to use to instantiate title<br>
 *	 (Wish we didn't have a separate widget for just the title but maintaining it<br>
 *	 for backwards compatibility, is it worth it?)<br>
 * </blockquote>
 * @memberOf dijit.layout._AccordionInnerContainer
*/
dijit.layout._AccordionInnerContainer.prototype.buttonWidget=function(){};
/**
 * @memberOf dijit.layout._AccordionInnerContainer
*/
dijit.layout._AccordionInnerContainer.prototype.buildRendering=function(){};
/**
 * @param {Boolean} isSelected 
 * @private
 * @memberOf dijit.layout._AccordionInnerContainer
*/
dijit.layout._AccordionInnerContainer.prototype._setSelectedAttr=function(isSelected){};
/**
 * <b>Summary:</b><blockquote>
 *	 Holds a set of panes where every pane's title is visible, but only one pane's content is visible at a time,<br>
 *	 and switching between panes is visualized by sliding the other panes up/down.<br>
 * </blockquote>
 * @class
 * @extends dijit.layout.StackContainer
 * @returns {dijit.layout.AccordionContainer} new instance
 * @example
 *  	&lt;div data-dojo-type="dijit.layout.AccordionContainer"&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" title="pane 1"&gt;
 * 		&lt;/div&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" title="pane 2"&gt;
 * 			&lt;p&gt;This is some text&lt;/p&gt;
 * 		&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dijit.layout.AccordionContainer=function(){};
/**
 * @namespace
 * @private
*/
dijit.layout.AccordionContainer._animation={};
/**
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype.startup=function(){};
/**
 * @param {mixed} child 
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype.removeChild=function(child){};
/**
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype.layout=function(){};
/**
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype.getChildren=function(){};
/**
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype.destroy=function(){};
/**
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype.buildRendering=function(){};
/**
 * @param {dijit._Widget} child 
 * @param {Integer} [insertIndex] 
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype.addChild=function(child, insertIndex){};
/**
 * @param {dijit._Widget} [newWidget] 
 * @param {dijit._Widget} [oldWidget] 
 * @param {Boolean} animate 
 * @private
 * @returns {If child has an href, promise that fires when the widget has finished loading} -
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype._transition=function(newWidget, oldWidget, animate){};
/**
 * @param {mixed} child 
 * @private
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype._showChild=function(child){};
/**
 * @param {mixed} child 
 * @private
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype._setupChild=function(child){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle keypress events<br>
 * </blockquote>
 * This is called from a handler on AccordionContainer.domNode<br>
 * (setup in StackContainer), and is also called directly from<br>
 * the click handler for accordion labels
 * @param {Event} e 
 * @param {dijit._Widget} fromTitle 
 * @private
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype._onKeyPress=function(e, fromTitle){};
/**
 * @param {mixed} child 
 * @private
 * @memberOf dijit.layout.AccordionContainer
*/
dijit.layout.AccordionContainer.prototype._hideChild=function(child){};
/**
 * @namespace
*/
dijit.layout.AccordionContainer.selectedChildWidget.containerNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 A container that has multiple children, but shows only<br>
 *	 one child at a time<br>
 * </blockquote>
 * A container for widgets (ContentPanes, for example) That displays<br>
 * only one Widget at a time.<br>
 * <br>
 * Publishes topics [widgetId]-addChild, [widgetId]-removeChild, and [widgetId]-selectChild<br>
 * <br>
 * Can be base class for container, Wizard, Show, etc.
 * @class
 * @extends dijit.layout._LayoutWidget
 * @returns {dijit.layout.StackContainer} new instance
*/
dijit.layout.StackContainer=function(){};
/**
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the given widget (which must be one of my children)<br>
 * </blockquote>
 * @param {dijit._Widget|String} page Reference to child widget or id of child widget
 * @param {Boolean} animate 
 * @returns {If child has an href, promise that fires when the child's href finishes loading} -
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.selectChild=function(page, animate){};
/**
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.resize=function(){};
/**
 * @param {dijit._Widget} page 
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.removeChild=function(page){};
/**
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.postCreate=function(){};
/**
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.layout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Advance to next page.<br>
 * </blockquote>
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.forward=function(){};
/**
 * @param {Boolean} preserveDom 
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.destroyDescendants=function(preserveDom){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when user clicks the [X] to remove a page.<br>
 *	 If onClose() returns true then remove and destroy the child.<br>
 * </blockquote>
 * @param {dijit._Widget} page 
 * @private
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.closeChild=function(page){};
/**
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Go back to previous page.<br>
 * </blockquote>
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.back=function(){};
/**
 * @param {dijit._Widget} child 
 * @param {Integer} [insertIndex] 
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype.addChild=function(child, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide the old widget and display the new widget.<br>
 *	 Subclasses should override this.<br>
 * </blockquote>
 * @param {dijit._Widget} newWidget The newly selected widget.
 * @param {dijit._Widget} oldWidget The previously selected widget.
 * @param {Boolean} animate Used by AccordionContainer to turn on/off slide effect.
 * @returns {If child has an href, promise that fires when the child's href finishes loading} -
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype._transition=function(newWidget, oldWidget, animate){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the specified child by changing it's CSS, and call _onShow()/onShow() so<br>
 *	 it can do any updates it needs regarding loading href's etc.<br>
 * </blockquote>
 * @param {dijit._Widget} page 
 * @private
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype._showChild=function(page){};
/**
 * @param {dijit._Widget} child 
 * @private
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype._setupChild=function(child){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype._onKeyPress=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide the specified child by changing it's CSS, and call _onHide() so<br>
 *	 it's notified.<br>
 * </blockquote>
 * @param {dijit._Widget} page 
 * @private
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype._hideChild=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the next/previous child widget in this container from the current selection.<br>
 * </blockquote>
 * @param {Boolean} forward 
 * @private
 * @returns {dijit._Widget} -
 * @memberOf dijit.layout.StackContainer
*/
dijit.layout.StackContainer.prototype._adjacent=function(forward){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget containing an HTML fragment, specified inline<br>
 *	 or by uri.  Fragment may include widgets.<br>
 * </blockquote>
 * This widget embeds a document fragment in the page, specified<br>
 * either by uri, javascript generated markup or DOM reference.<br>
 * Any widgets within this content are instantiated and managed,<br>
 * but laid out according to the HTML structure.  Unlike IFRAME,<br>
 * ContentPane embeds a document fragment as would be found<br>
 * inside the BODY tag of a full HTML document.  It should not<br>
 * contain the HTML, HEAD, or BODY tags.<br>
 * For more advanced functionality with scripts and<br>
 * stylesheets, see dojox.layout.ContentPane.  This widget may be<br>
 * used stand alone or as a base class for other widgets.<br>
 * ContentPane is useful as a child of other layout containers<br>
 * such as BorderContainer or TabContainer, but note that those<br>
 * widgets can contain any widget as a child.
 * @see dojox.layout.ContentPane
 * @class
 * @extends dijit._Widget
 * @extends dijit.layout._ContentPaneResizeMixin
 * @returns {dijit.layout.ContentPane} new instance
 * @example
 * Some quick samples:
 * To change the innerHTML: cp.set('content', '&lt;b&gt;new content&lt;/b&gt;')
 * 
 * Or you can send it a NodeList: cp.set('content', dojo.query('div [class=selected]', userSelection))
 * 
 * To do an ajax update: cp.set('href', url)
*/
dijit.layout.ContentPane=function(){};
/**
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.uninitialize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call startup() on all children including non _Widget ones like dojo.dnd.Source objects<br>
 * </blockquote>
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   Use set('href', ...) instead.<br>
 * </blockquote>
 * @param {String|Uri} href 
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.setHref=function(href){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   Use set('content', ...) instead.<br>
 * </blockquote>
 * @param {String|DomNode|Nodelist} data 
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.setContent=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 [Re]download contents of href and display<br>
 * </blockquote>
 * 1. cancels any currently in-flight requests<br>
 * 2. posts "loading..." message<br>
 * 3. sends XHR to download new data
 * @returns {If child has an href, promise that fires when refresh is complete} -
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.refresh=function(){};
/**
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event hook, is called before old content is cleared<br>
 * </blockquote>
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.onUnload=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event hook, is called after everything is loaded and widgetified<br>
 * </blockquote>
 * @param {mixed} data 
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.onLoad=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called before download starts.<br>
 * </blockquote>
 * The string returned by this function will be the html<br>
 * that tells the user we are loading something.<br>
 * Override with your own function if you want to change text.
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.onDownloadStart=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when download error occurs.<br>
 *	 <br>
 *	 In order to display an error message in the pane, return<br>
 *	 the error message from this method, as an HTML string.<br>
 *	 <br>
 *	 Default behavior (if this method is not overriden) is to display<br>
 *	 the error message inside the pane.<br>
 * </blockquote>
 * @param {Error} error 
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.onDownloadError=function(error){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when download is finished.<br>
 * </blockquote>
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.onDownloadEnd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called on DOM faults, require faults etc. in content.<br>
 *	 <br>
 *	 In order to display an error message in the pane, return<br>
 *	 the error message from this method, as an HTML string.<br>
 *	 <br>
 *	 By default (if this method is not overriden), it returns<br>
 *	 nothing, so the error message is just printed to the console.<br>
 * </blockquote>
 * @param {Error} error 
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.onContentError=function(error){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy the ContentPane and its contents<br>
 * </blockquote>
 * @param {Boolean} preserveDom 
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.destroyRecursive=function(preserveDom){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy all the widgets inside the ContentPane and empty containerNode<br>
 * </blockquote>
 * @param {Boolean} preserveDom 
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.destroyDescendants=function(preserveDom){};
/**
 * @param {mixed} params 
 * @param {mixed} srcNodeRef 
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.create=function(params, srcNodeRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancels an in-flight download of content<br>
 * </blockquote>
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.cancel=function(){};
/**
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set(&amp;quot;href&amp;quot;, ...) works.<br>
 * </blockquote>
 * Reset the (external defined) content of this pane and replace with new url<br>
 * Note: It delays the download until widget is shown if preload is false.
 * @param {String|Uri} href url to the page you want to get, must be within the same domain as your mainpage
 * @private
 * @returns {Deferred} -
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype._setHrefAttr=function(href){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook to make set(&amp;quot;content&amp;quot;, ...) work.<br>
 *	 Replaces old content with data content, include style classes from old content<br>
 * </blockquote>
 * @param {String|DomNode|Nodelist} data the new Content may be String, DomNode or NodeList
 * <br>
 * if data is a NodeList (or an array of nodes) nodes are copied<br>
 * so you can import nodes from another document implicitly
 * @private
 * @returns {Deferred} -
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype._setContentAttr=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Insert the content into the container node<br>
 * </blockquote>
 * @param {String|DocumentFragment} cont 
 * @param {Boolean} isFakeContent 
 * @private
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype._setContent=function(cont, isFakeContent){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is called whenever the content is being unloaded<br>
 * </blockquote>
 * @private
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype._onUnloadHandler=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the ContentPane is made visible<br>
 * </blockquote>
 * For a plain ContentPane, this is called on initialization, from startup().<br>
 * If the ContentPane is a hidden pane of a TabContainer etc., then it's<br>
 * called whenever the pane is made visible.<br>
 * <br>
 * Does necessary processing, including href download and layout/resize of<br>
 * child widget(s)
 * @private
 * @returns {If child has an href, promise that fires when the load is complete} -
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype._onShow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is called whenever new content is being loaded<br>
 * </blockquote>
 * @param {mixed} data 
 * @private
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype._onLoadHandler=function(data){};
/**
 * @param {mixed} type 
 * @param {mixed} err 
 * @param {mixed} consoleText 
 * @private
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype._onError=function(type, err, consoleText){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load/reload the href specified in this.href<br>
 * </blockquote>
 * @private
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype._load=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook to make get(&amp;quot;content&amp;quot;) work<br>
 * </blockquote>
 * @private
 * @memberOf dijit.layout.ContentPane
*/
dijit.layout.ContentPane.prototype._getContentAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated widget.   Use `dijit.layout.ContentPane` instead.<br>
 * </blockquote>
 * @class
 * @extends dijit.layout.ContentPane
 * @returns {dijit.layout.AccordionPane} new instance
*/
dijit.layout.AccordionPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when this pane is selected<br>
 * </blockquote>
 * @memberOf dijit.layout.AccordionPane
*/
dijit.layout.AccordionPane.prototype.onSelected=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A draggable spacer between two items in a `dijit.layout.BorderContainer`.<br>
 * </blockquote>
 * This is instantiated by `dijit.layout.BorderContainer`.  Users should not<br>
 * create it directly.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dijit.layout._Splitter} new instance
*/
dijit.layout._Splitter=function(){};
/**
 * @memberOf dijit.layout._Splitter
*/
dijit.layout._Splitter.child=null;
/**
 * @memberOf dijit.layout._Splitter
*/
dijit.layout._Splitter.prototype.postMixInProperties=function(){};
/**
 * @memberOf dijit.layout._Splitter
*/
dijit.layout._Splitter.prototype.destroy=function(){};
/**
 * @memberOf dijit.layout._Splitter
*/
dijit.layout._Splitter.prototype.buildRendering=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.layout._Splitter
*/
dijit.layout._Splitter.prototype._stopDrag=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.layout._Splitter
*/
dijit.layout._Splitter.prototype._startDrag=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onmouseenter / onmouseleave events<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dijit.layout._Splitter
*/
dijit.layout._Splitter.prototype._onMouse=function(e){};
/**
 * @param {Event} e 
 * @private
 * @memberOf dijit.layout._Splitter
*/
dijit.layout._Splitter.prototype._onKeyPress=function(e){};
/**
 * @param {mixed} e 
 * @param {mixed} forceResize 
 * @private
 * @memberOf dijit.layout._Splitter
*/
dijit.layout._Splitter.prototype._drag=function(e, forceResize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the maximum size that my corresponding pane can be set to<br>
 * </blockquote>
 * @private
 * @memberOf dijit.layout._Splitter
*/
dijit.layout._Splitter.prototype._computeMaxSize=function(){};
/**
 * @private
 * @memberOf dijit.layout._Splitter
*/
dijit.layout._Splitter.prototype._cleanupHandlers=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Just a spacer div to separate side pane from center pane.<br>
 *	 Basically a trick to lookup the gutter/splitter width from the theme.<br>
 * </blockquote>
 * Instantiated by `dijit.layout.BorderContainer`.  Users should not<br>
 * create directly.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dijit.layout._Gutter} new instance
*/
dijit.layout._Gutter=function(){};
/**
 * @memberOf dijit.layout._Gutter
*/
dijit.layout._Gutter.prototype.postMixInProperties=function(){};
/**
 * @memberOf dijit.layout._Gutter
*/
dijit.layout._Gutter.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides layout in up to 5 regions, a mandatory center with optional borders along its 4 sides.<br>
 * </blockquote>
 * A BorderContainer is a box with a specified size, such as style="width: 500px; height: 500px;",<br>
 * that contains a child widget marked region="center" and optionally children widgets marked<br>
 * region equal to "top", "bottom", "leading", "trailing", "left" or "right".<br>
 * Children along the edges will be laid out according to width or height dimensions and may<br>
 * include optional splitters (splitter="true") to make them resizable by the user.  The remaining<br>
 * space is designated for the center region.<br>
 * <br>
 * The outer size must be specified on the BorderContainer node.  Width must be specified for the sides<br>
 * and height for the top and bottom, respectively.  No dimensions should be specified on the center;<br>
 * it will fill the remaining space.  Regions named "leading" and "trailing" may be used just like<br>
 * "left" and "right" except that they will be reversed in right-to-left environments.<br>
 * <br>
 * For complex layouts, multiple children can be specified for a single region.   In this case, the<br>
 * layoutPriority flag on the children determines which child is closer to the edge (low layoutPriority)<br>
 * and which child is closer to the center (high layoutPriority).   layoutPriority can also be used<br>
 * instead of the design attribute to control layout precedence of horizontal vs. vertical panes.
 * @class
 * @extends dijit.layout._LayoutWidget
 * @returns {dijit.layout.BorderContainer} new instance
 * @example
 * 	&lt;div data-dojo-type="dijit.layout.BorderContainer" data-dojo-props="design: 'sidebar', gutters: false"
 *			 style="width: 400px; height: 300px;"&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="region: 'top'"&gt;header text&lt;/div&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="region: 'right', splitter: true" style="width: 200px;"&gt;table of contents&lt;/div&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="region: 'center'"&gt;client area&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dijit.layout.BorderContainer=function(){};
/**
 * @namespace
*/
dijit.layout.BorderContainer.pe={};
/**
 * @memberOf dijit.layout.BorderContainer
*/
dijit.layout.BorderContainer.prototype.startup=function(){};
/**
 * @param {mixed} newSize 
 * @param {mixed} currentSize 
 * @memberOf dijit.layout.BorderContainer
*/
dijit.layout.BorderContainer.prototype.resize=function(newSize, currentSize){};
/**
 * @param {dijit._Widget} child 
 * @memberOf dijit.layout.BorderContainer
*/
dijit.layout.BorderContainer.prototype.removeChild=function(child){};
/**
 * @memberOf dijit.layout.BorderContainer
*/
dijit.layout.BorderContainer.prototype.postMixInProperties=function(){};
/**
 * @memberOf dijit.layout.BorderContainer
*/
dijit.layout.BorderContainer.prototype.layout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the widget responsible for rendering the splitter associated with region<br>
 * </blockquote>
 * @param {String} region 
 * @memberOf dijit.layout.BorderContainer
*/
dijit.layout.BorderContainer.prototype.getSplitter=function(region){};
/**
 * @memberOf dijit.layout.BorderContainer
*/
dijit.layout.BorderContainer.prototype.getChildren=function(){};
/**
 * @memberOf dijit.layout.BorderContainer
*/
dijit.layout.BorderContainer.prototype.destroyRecursive=function(){};
/**
 * @param {dijit._Widget} child 
 * @param {Integer} [insertIndex] 
 * @memberOf dijit.layout.BorderContainer
*/
dijit.layout.BorderContainer.prototype.addChild=function(child, insertIndex){};
/**
 * @param {dijit._Widget} child 
 * @private
 * @memberOf dijit.layout.BorderContainer
*/
dijit.layout.BorderContainer.prototype._setupChild=function(child){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is the main routine for setting size/position of each child.<br>
 * </blockquote>
 * With no arguments, measures the height of top/bottom panes, the width<br>
 * of left/right panes, and then sizes all panes accordingly.<br>
 * <br>
 * With changedRegion specified (as "left", "top", "bottom", or "right"),<br>
 * it changes that region's width/height to changedRegionSize and<br>
 * then resizes other regions that were affected.
 * @param {String} [changedChildId] Id of the child which should be resized because splitter was dragged.
 * @param {Number} [changedChildSize] The new width/height (in pixels) to make specified child
 * @private
 * @memberOf dijit.layout.BorderContainer
*/
dijit.layout.BorderContainer.prototype._layoutChildren=function(changedChildId, changedChildSize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for a _Container widget which is responsible for laying out its children.<br>
 *	 Widgets which mixin this code must define layout() to manage placement and sizing of the children.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Container
 * @extends dijit._Contained
 * @private
 * @returns {dijit.layout._LayoutWidget} new instance
*/
dijit.layout._LayoutWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called after all the widgets have been instantiated and their<br>
 *	 dom nodes have been inserted somewhere under win.doc.body.<br>
 *	 <br>
 *	 Widgets should override this method to do any initialization<br>
 *	 dependent on other widgets existing, and then call<br>
 *	 this superclass method to finish things off.<br>
 *	 <br>
 *	 startup() in subclasses shouldn't do anything<br>
 *	 size related because the size of the widget hasn't been set yet.<br>
 * </blockquote>
 * @memberOf dijit.layout._LayoutWidget
*/
dijit.layout._LayoutWidget.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call this to resize a widget, or after its size has changed.<br>
 * </blockquote>
 * Change size mode:<br>
 * When changeSize is specified, changes the marginBox of this widget<br>
 * and forces it to relayout its contents accordingly.<br>
 * changeSize may specify height, width, or both.<br>
 * <br>
 * If resultSize is specified it indicates the size the widget will<br>
 * become after changeSize has been applied.<br>
 * <br>
 * Notification mode:<br>
 * When changeSize is null, indicates that the caller has already changed<br>
 * the size of the widget, or perhaps it changed because the browser<br>
 * window was resized.  Tells widget to relayout its contents accordingly.<br>
 * <br>
 * If resultSize is also specified it indicates the size the widget has<br>
 * become.<br>
 * <br>
 * In either mode, this method also:<br>
 * 1. Sets this._borderBox and this._contentBox to the new size of<br>
 * the widget.  Queries the current domNode size if necessary.<br>
 * 2. Calls layout() to resize contents (and maybe adjust child widgets).
 * @param {Object} [changeSize] Sets the widget to this margin-box size and position.
 * May include any/all of the following properties:<br>
 * 	{w: int, h: int, l: int, t: int}
 * @param {Object} [resultSize] The margin-box size of this widget after applying changeSize (if
 * changeSize is specified).  If caller knows this size and<br>
 * passes it in, we don't need to query the browser to get the size.<br>
 * 	{w: int, h: int}
 * @memberOf dijit.layout._LayoutWidget
*/
dijit.layout._LayoutWidget.prototype.resize=function(changeSize, resultSize){};
/**
 * @param {dijit._Widget} child 
 * @memberOf dijit.layout._LayoutWidget
*/
dijit.layout._LayoutWidget.prototype.removeChild=function(child){};
/**
 * <b>Summary:</b><blockquote>
 *	 Widgets override this method to size and position their contents/children.<br>
 *	 When this is called this._contentBox is guaranteed to be set (see resize()).<br>
 *	 <br>
 *	 This is called after startup(), and also when the widget's size has been<br>
 *	 changed.<br>
 * </blockquote>
 * @memberOf dijit.layout._LayoutWidget
*/
dijit.layout._LayoutWidget.prototype.layout=function(){};
/**
 * @memberOf dijit.layout._LayoutWidget
*/
dijit.layout._LayoutWidget.prototype.buildRendering=function(){};
/**
 * @param {dijit._Widget} child 
 * @param {Integer} [insertIndex] 
 * @memberOf dijit.layout._LayoutWidget
*/
dijit.layout._LayoutWidget.prototype.addChild=function(child, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Common setup for initial children and children which are added after startup<br>
 * </blockquote>
 * @param {dijit._Widget} child 
 * @memberOf dijit.layout._LayoutWidget
*/
dijit.layout._LayoutWidget.prototype._setupChild=function(child){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use `dijit.layout.BorderContainer` instead.<br>
 * </blockquote>
 * Provides Delphi-style panel layout semantics.<br>
 * <br>
 * A LayoutContainer is a box with a specified size (like style="width: 500px; height: 500px;"),<br>
 * that contains children widgets marked with "layoutAlign" of "left", "right", "bottom", "top", and "client".<br>
 * It takes it's children marked as left/top/bottom/right, and lays them out along the edges of the box,<br>
 * and then it takes the child marked "client" and puts it into the remaining space in the middle.<br>
 * <br>
 * Left/right positioning is similar to CSS's "float: left" and "float: right",<br>
 * and top/bottom positioning would be similar to "float: top" and "float: bottom", if there were such<br>
 * CSS.<br>
 * <br>
 * Note that there can only be one client element, but there can be multiple left, right, top,<br>
 * or bottom elements.
 * @class
 * @extends dijit.layout._LayoutWidget
 * @returns {dijit.layout.LayoutContainer} new instance
 * @example
 * 	&lt;style&gt;
 * 		html, body{ height: 100%; width: 100%; }
 * 	&lt;/style&gt;
 * 	&lt;div data-dojo-type="dijit.layout.LayoutContainer" style="width: 100%; height: 100%"&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="layoutAlign: 'top'"&gt;header text&lt;/div&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="layoutAlign: 'left'" style="width: 200px;"&gt;table of contents&lt;/div&gt;
 * 		&lt;div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="layoutAlign: 'client'"&gt;client area&lt;/div&gt;
 * 	&lt;/div&gt;
 * 
 * Lays out each child in the natural order the children occur in.
 * Basically each child is laid out into the "remaining space", where "remaining space" is initially
 * the content area of this widget, but is reduced to a smaller rectangle each time a child is added.
*/
dijit.layout.LayoutContainer=function(){};
/**
 * @param {dijit._Widget} widget 
 * @memberOf dijit.layout.LayoutContainer
*/
dijit.layout.LayoutContainer.prototype.removeChild=function(widget){};
/**
 * @memberOf dijit.layout.LayoutContainer
*/
dijit.layout.LayoutContainer.prototype.layout=function(){};
/**
 * @param {dijit._Widget} child 
 * @param {Integer} [insertIndex] 
 * @memberOf dijit.layout.LayoutContainer
*/
dijit.layout.LayoutContainer.prototype.addChild=function(child, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 A ContentPane with an href where (when declared in markup)<br>
 *	 the title is specified as innerHTML rather than as a title attribute.<br>
 * </blockquote>
 * LinkPane is just a ContentPane that is declared in markup similarly<br>
 * to an anchor.  The anchor's body (the words between `&lt;a&gt;` and `&lt;/a&gt;`)<br>
 * become the title of the widget (used for TabContainer, AccordionContainer, etc.)
 * @class
 * @extends dijit.layout.ContentPane
 * @extends dijit._TemplatedMixin
 * @returns {dijit.layout.LinkPane} new instance
 * @example
 *  &lt;a href="foo.html"&gt;my title&lt;/a&gt;
*/
dijit.layout.LinkPane=function(){};
/**
 * @memberOf dijit.layout.LinkPane
*/
dijit.layout.LinkPane.prototype.postMixInProperties=function(){};
/**
 * @private
 * @memberOf dijit.layout.LinkPane
*/
dijit.layout.LinkPane.prototype._fillContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set of tabs with left/right arrow keys and a menu to switch between tabs not<br>
 *	 all fitting on a single row.<br>
 *	 Works only for horizontal tabs (either above or below the content, not to the left<br>
 *	 or right).<br>
 * </blockquote>
 * @class
 * @extends dijit.layout.TabController
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dijit.layout.ScrollingTabController} new instance
*/
dijit.layout.ScrollingTabController=function(){};
/**
 * @namespace
 * @private
*/
dijit.layout.ScrollingTabController._setClassAttr={};
/**
 * <b>Summary:</b><blockquote>
 *	 Hides or displays the buttons used to scroll the tab list and launch the menu<br>
 *	 that selects tabs.<br>
 * </blockquote>
 * @param {mixed} dim 
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype.resize=function(dim){};
/**
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype.onStartup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Smoothly scrolls to a tab when it is selected.<br>
 * </blockquote>
 * @param {dijit._Widget} page 
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype.onSelectChild=function(page){};
/**
 * @param {mixed} page 
 * @param {mixed} insertIndex 
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype.onRemoveChild=function(page, insertIndex){};
/**
 * @param {mixed} page 
 * @param {mixed} insertIndex 
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype.onAddChild=function(page, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Scrolls the menu to the right.<br>
 * </blockquote>
 * @param {Event} e The mouse click event.
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype.doSlideRight=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Scrolls the menu to the left.<br>
 * </blockquote>
 * @param {Event} e The mouse click event.
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype.doSlideLeft=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Scrolls the tab list to the left or right by 75% of the widget width.<br>
 * </blockquote>
 * @param {Number} direction If the direction is 1, the widget scrolls to the right, if it is
 * -1, it scrolls to the left.
 * @param {DomNode} node 
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype.doSlide=function(direction, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a dojo._Animation object that smoothly scrolls the tab list<br>
 *	 either to a fixed horizontal pixel value, or to the selected tab.<br>
 * </blockquote>
 * If an number argument is passed to the function, that horizontal<br>
 * pixel position is scrolled to.  Otherwise the currently selected<br>
 * tab is scrolled to.
 * @param {Integer} [x] An optional pixel value to scroll to, indicating distance from left.
 * @returns {dojo._Animation} -
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype.createSmoothScroll=function(x){};
/**
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disables the left scroll button if the tabs are scrolled all the way to the left,<br>
 *	 or the right scroll button in the opposite case.<br>
 * </blockquote>
 * @param {Number} scroll Integer amount of horizontal scroll
 * @private
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype._setButtonClass=function(scroll){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates the buttons used to scroll to view tabs that<br>
 *	 may not be visible if the TabContainer is too narrow.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype._initButtons=function(){};
/**
 * @private
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype._getTabsWidth=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the scroll value setting so that the selected tab<br>
 *	 will appear in the center<br>
 * </blockquote>
 * @private
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype._getScrollForSelectedTab=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the minimum and maximum scroll setting to show the leftmost and rightmost<br>
 *	 tabs (respectively)<br>
 * </blockquote>
 * @private
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype._getScrollBounds=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the current scroll of the tabs where 0 means<br>
 *	 &amp;quot;scrolled all the way to the left&amp;quot; and some positive number, based on #<br>
 *	 of pixels of possible scroll (ex: 1000) means &amp;quot;scrolled all the way to the right&amp;quot;<br>
 * </blockquote>
 * @private
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype._getScroll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets a button DOM node from a mouse click event.<br>
 * </blockquote>
 * @param {Event} e The mouse click event.
 * @private
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype._getBtnNode=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines if the tabs are wider than the width of the TabContainer, and<br>
 *	 thus that we need to display left/right/menu navigation buttons.<br>
 * </blockquote>
 * @param {mixed} width 
 * @private
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype._enableBtn=function(width){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given a scroll value where 0 means &amp;quot;scrolled all the way to the left&amp;quot;<br>
 *	 and some positive number, based on # of pixels of possible scroll (ex: 1000)<br>
 *	 means &amp;quot;scrolled all the way to the right&amp;quot;, return value to set this.scrollNode.scrollLeft<br>
 *	 to achieve that scroll.<br>
 *	 <br>
 *	 This method is to adjust for RTL funniness in various browsers and versions.<br>
 * </blockquote>
 * @param {mixed} val 
 * @private
 * @memberOf dijit.layout.ScrollingTabController
*/
dijit.layout.ScrollingTabController.prototype._convertToScrollLeft=function(val){};
/**
 * @namespace
*/
dijit.layout.ScrollingTabController.scrollNode={};
/**
 * @class
 * @returns {dijit.layout._ScrollingTabControllerButtonMixin} new instance
*/
dijit.layout._ScrollingTabControllerButtonMixin=function(){};
/**
 * @memberOf dijit.layout._ScrollingTabControllerButtonMixin
*/
dijit.layout._ScrollingTabControllerButtonMixin.prototype.isFocusable=function(){};
/**
 * @class
 * @extends dijit.layout._ScrollingTabControllerButtonMixin
 * @returns {dijit.layout._ScrollingTabControllerButton} new instance
*/
dijit.layout._ScrollingTabControllerButton=function(){};
/**
 * @class
 * @extends dijit._HasDropDown
 * @extends dijit.layout._ScrollingTabControllerButtonMixin
 * @returns {dijit.layout._ScrollingTabControllerMenuButton} new instance
*/
dijit.layout._ScrollingTabControllerMenuButton=function(){};
/**
 * @param {mixed} callback 
 * @memberOf dijit.layout._ScrollingTabControllerMenuButton
*/
dijit.layout._ScrollingTabControllerMenuButton.prototype.loadDropDown=function(callback){};
/**
 * @memberOf dijit.layout._ScrollingTabControllerMenuButton
*/
dijit.layout._ScrollingTabControllerMenuButton.prototype.isLoaded=function(){};
/**
 * @param {Boolean} focus 
 * @memberOf dijit.layout._ScrollingTabControllerMenuButton
*/
dijit.layout._ScrollingTabControllerMenuButton.prototype.closeDropDown=function(focus){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set of tabs (the things with titles and a close button, that you click to show a tab panel).<br>
 *	 Used internally by `dijit.layout.TabContainer`.<br>
 * </blockquote>
 * Lets the user select the currently shown pane in a TabContainer or StackContainer.<br>
 * TabController also monitors the TabContainer, and whenever a pane is<br>
 * added or deleted updates itself accordingly.
 * @class
 * @extends dijit.layout.StackController
 * @returns {dijit.layout.TabController} new instance
*/
dijit.layout.TabController=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 For left/right TabContainer when page is RTL mode, rectify the width of all tabs to be equal, otherwise the tab widths are different in IE<br>
 * </blockquote>
 * @private
 * @memberOf dijit.layout.TabController
*/
dijit.layout.TabController.prototype._rectifyRtlTabList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use `dijit.layout.BorderContainer` instead.<br>
 * </blockquote>
 * A Container widget with sizing handles in-between each child.<br>
 * Contains multiple children widgets, all of which are displayed side by side<br>
 * (either horizontally or vertically); there's a bar between each of the children,<br>
 * and you can adjust the relative size of each child by dragging the bars.<br>
 * <br>
 * You must specify a size (width and height) for the SplitContainer.
 * @class
 * @extends dijit.layout._LayoutWidget
 * @returns {dijit.layout.SplitContainer} new instance
*/
dijit.layout.SplitContainer=function(){};
/**
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove sizer, but only if widget is really our child and<br>
 *	 we have at least one sizer to throw away<br>
 * </blockquote>
 * @param {mixed} widget 
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.removeChild=function(widget){};
/**
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.postMixInProperties=function(){};
/**
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.postCreate=function(){};
/**
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.movePoint=function(){};
/**
 * @param {mixed} a 
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.legaliseSplitPoint=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Do layout of panels<br>
 * </blockquote>
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.layout=function(){};
/**
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.endSizing=function(){};
/**
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.destroy=function(){};
/**
 * @param {mixed} e 
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.changeSizing=function(e){};
/**
 * @param {mixed} e 
 * @param {mixed} i 
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.beginSizing=function(e, i){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a child widget to the container<br>
 * </blockquote>
 * @param {dijit._Widget} child a widget to add
 * @param {Integer} [insertIndex] postion in the &quot;stack&quot; to add the child widget
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype.addChild=function(child, insertIndex){};
/**
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._updateSize=function(){};
/**
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._showSizingLine=function(){};
/**
 * @param {dijit._Widget} child 
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._setupChild=function(child){};
/**
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._saveState=function(){};
/**
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._restoreState=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._onSizerMouseDown=function(e){};
/**
 * @param {mixed} slider 
 * @param {mixed} pos 
 * @param {mixed} size 
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._moveSlider=function(slider, pos, size){};
/**
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._moveSizingLine=function(){};
/**
 * @param {mixed} panel 
 * @param {mixed} pos 
 * @param {mixed} size 
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._movePanel=function(panel, pos, size){};
/**
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._hideSizingLine=function(){};
/**
 * @param {mixed} growth 
 * @param {mixed} pane 
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._growPane=function(growth, pane){};
/**
 * @param {mixed} i 
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._getCookieName=function(i){};
/**
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._checkSizes=function(){};
/**
 * @param {mixed} index 
 * @private
 * @memberOf dijit.layout.SplitContainer
*/
dijit.layout.SplitContainer.prototype._addSizer=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set of buttons to select a page in a `dijit.layout.StackContainer`<br>
 * </blockquote>
 * Monitors the specified StackContainer, and whenever a page is<br>
 * added, deleted, or selected, updates itself accordingly.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._Container
 * @returns {dijit.layout.StackController} new instance
*/
dijit.layout.StackController=function(){};
/**
 * @memberOf dijit.layout.StackController
*/
dijit.layout.StackController.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle keystrokes on the page list, for advancing to next/previous button<br>
 *	 and closing the current page if the page is closable.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.layout.StackController
*/
dijit.layout.StackController.prototype.onkeypress=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called after StackContainer has finished initializing<br>
 * </blockquote>
 * @param {Object} info 
 * @private
 * @memberOf dijit.layout.StackController
*/
dijit.layout.StackController.prototype.onStartup=function(info){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when a page has been selected in the StackContainer, either by me or by another StackController<br>
 * </blockquote>
 * @param {dijit._Widget} page 
 * @private
 * @memberOf dijit.layout.StackController
*/
dijit.layout.StackController.prototype.onSelectChild=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called whenever a page is removed from the container.<br>
 *	 Remove the button corresponding to the page.<br>
 * </blockquote>
 * @param {dijit._Widget} page 
 * @private
 * @memberOf dijit.layout.StackController
*/
dijit.layout.StackController.prototype.onRemoveChild=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when there was a keypress on the container<br>
 * </blockquote>
 * @param {Object} info 
 * @private
 * @memberOf dijit.layout.StackController
*/
dijit.layout.StackController.prototype.onContainerKeyPress=function(info){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called whenever one of my child buttons [X] is pressed in an attempt to close a page<br>
 * </blockquote>
 * @param {dijit._Widget} page 
 * @private
 * @memberOf dijit.layout.StackController
*/
dijit.layout.StackController.prototype.onCloseButtonClick=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called whenever one of my child buttons is pressed in an attempt to select a page<br>
 * </blockquote>
 * @param {dijit._Widget} page 
 * @private
 * @memberOf dijit.layout.StackController
*/
dijit.layout.StackController.prototype.onButtonClick=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called whenever a page is added to the container.<br>
 *	 Create button corresponding to the page.<br>
 * </blockquote>
 * @param {dijit._Widget} page 
 * @param {Integer} [insertIndex] 
 * @private
 * @memberOf dijit.layout.StackController
*/
dijit.layout.StackController.prototype.onAddChild=function(page, insertIndex){};
/**
 * @memberOf dijit.layout.StackController
*/
dijit.layout.StackController.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper for onkeypress to find next/previous button<br>
 * </blockquote>
 * @param {Boolean} forward 
 * @private
 * @returns {dijit._Widget} -
 * @memberOf dijit.layout.StackController
*/
dijit.layout.StackController.prototype.adjacent=function(forward){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal widget used by StackContainer.<br>
 * </blockquote>
 * The button-like or tab-like object you click to select or delete a page
 * @class
 * @extends dijit.form.ToggleButton
 * @returns {dijit.layout._StackButton} new instance
*/
dijit.layout._StackButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 StackContainer connects to this function; if your widget contains a close button<br>
 *	 then clicking it should call this function.<br>
 *	 Note that you shouldn't override this method, but you can connect to it.<br>
 * </blockquote>
 * @param {Event} evt 
 * @memberOf dijit.layout._StackButton
*/
dijit.layout._StackButton.prototype.onClickCloseButton=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is for TabContainer where the tabs are &amp;lt;span&amp;gt; rather than button,<br>
 *	 so need to set focus explicitly (on some browsers)<br>
 *	 Note that you shouldn't override this method, but you can connect to it.<br>
 * </blockquote>
 * @param {Event} evt 
 * @memberOf dijit.layout._StackButton
*/
dijit.layout._StackButton.prototype.onClick=function(evt){};
/**
 * @param {Event} evt 
 * @memberOf dijit.layout._StackButton
*/
dijit.layout._StackButton.prototype.buildRendering=function(evt){};
/**
 * @param {Boolean} value 
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dijit.layout._StackButton
*/
dijit.layout._StackButton.prototype._setCheckedAttr=function(value, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Abstract base class for TabContainer.   Must define _makeController() to instantiate<br>
 *	 and return the widget that displays the tab labels<br>
 * </blockquote>
 * A TabContainer is a container that has multiple panes, but shows only<br>
 * one pane at a time.  There are a set of tabs corresponding to each pane,<br>
 * where each tab has the name (aka title) of the pane, and optionally a close button.
 * @class
 * @extends dijit.layout.StackContainer
 * @extends dijit._TemplatedMixin
 * @private
 * @returns {dijit.layout._TabContainerBase} new instance
*/
dijit.layout._TabContainerBase=function(){};
/**
 * @namespace
*/
dijit.layout._TabContainerBase.tablist={};
/**
 * @memberOf dijit.layout._TabContainerBase
*/
dijit.layout._TabContainerBase.prototype.startup=function(){};
/**
 * @memberOf dijit.layout._TabContainerBase
*/
dijit.layout._TabContainerBase.prototype.postMixInProperties=function(){};
/**
 * @memberOf dijit.layout._TabContainerBase
*/
dijit.layout._TabContainerBase.prototype.layout=function(){};
/**
 * @memberOf dijit.layout._TabContainerBase
*/
dijit.layout._TabContainerBase.prototype.destroy=function(){};
/**
 * @memberOf dijit.layout._TabContainerBase
*/
dijit.layout._TabContainerBase.prototype.buildRendering=function(){};
/**
 * @param {dijit._Widget} tab 
 * @private
 * @memberOf dijit.layout._TabContainerBase
*/
dijit.layout._TabContainerBase.prototype._setupChild=function(tab){};
/**
 * @namespace
*/
dijit.layout._TabContainerBase.tablist.domNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 A Container with tabs to select each child (only one of which is displayed at a time).<br>
 * </blockquote>
 * A TabContainer is a container that has multiple panes, but shows only<br>
 * one pane at a time.  There are a set of tabs corresponding to each pane,<br>
 * where each tab has the name (aka title) of the pane, and optionally a close button.
 * @class
 * @extends dijit.layout._TabContainerBase
 * @returns {dijit.layout.TabContainer} new instance
*/
dijit.layout.TabContainer=function(){};
/**
 * @memberOf dijit.layout.TabContainer
*/
dijit.layout.TabContainer.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Instantiate tablist controller widget and return reference to it.<br>
 *	 Callback from _TabContainerBase.postCreate().<br>
 * </blockquote>
 * @param {DomNode} srcNode 
 * @memberOf dijit.layout.TabContainer
*/
dijit.layout.TabContainer.prototype._makeController=function(srcNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 A tab (the thing you click to select a pane).<br>
 * </blockquote>
 * Contains the title of the pane, and optionally a close-button to destroy the pane.<br>
 * This is an internal widget and should not be instantiated directly.
 * @class
 * @returns {dijit.layout._TabButton} new instance
*/
dijit.layout._TabButton=function(){};
/**
 * @namespace
*/
dijit.layout._TabButton.cssStateNodes={};
/**
 * @memberOf dijit.layout._TabButton
*/
dijit.layout._TabButton.prototype.startup=function(){};
/**
 * @memberOf dijit.layout._TabButton
*/
dijit.layout._TabButton.prototype.destroy=function(){};
/**
 * @memberOf dijit.layout._TabButton
*/
dijit.layout._TabButton.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook for set('label', ...) to work.<br>
 * </blockquote>
 * takes an HTML string.<br>
 * Inherited ToggleButton implementation will Set the label (text) of the button;<br>
 * Need to set the alt attribute of icon on tab buttons if no label displayed
 * @param {String} content 
 * @private
 * @memberOf dijit.layout._TabButton
*/
dijit.layout._TabButton.prototype._setLabelAttr=function(content){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide/show close button<br>
 * </blockquote>
 * @param {Boolean} disp 
 * @private
 * @memberOf dijit.layout._TabButton
*/
dijit.layout._TabButton.prototype._setCloseButtonAttr=function(disp){};
/**
 * @class
 * @private
 * @returns {dijit._MenuBarItemMixin} new instance
*/
dijit._MenuBarItemMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Item in a MenuBar that's clickable, and doesn't spawn a submenu when pressed (or hovered)<br>
 * </blockquote>
 * @class
 * @extends dijit.MenuItem
 * @returns {dijit.MenuBarItem} new instance
*/
dijit.MenuBarItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A menu bar, listing menu choices horizontally, like the &amp;quot;File&amp;quot; menu in most desktop applications<br>
 * </blockquote>
 * @class
 * @extends dijit._MenuBase
 * @returns {dijit.MenuBar} new instance
*/
dijit.MenuBar=function(){};
/**
 * @memberOf dijit.MenuBar
*/
dijit.MenuBar.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle clicks on an item. Cancels a dropdown if already open.<br>
 * </blockquote>
 * @param {dijit._Widget} item 
 * @param {Event} evt 
 * @private
 * @memberOf dijit.MenuBar
*/
dijit.MenuBar.prototype.onItemClick=function(item, evt){};
/**
 * @param {mixed} item 
 * @memberOf dijit.MenuBar
*/
dijit.MenuBar.prototype.focusChild=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle keyboard based menu navigation.<br>
 * </blockquote>
 * @param {Event} evt 
 * @memberOf dijit.MenuBar
*/
dijit.MenuBar.prototype._onKeyPress=function(evt){};

/**
 * @namespace
*/
dijit.MenuItem.accelKeyNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Interface for the JS Object associated with a palette cell (i.e. DOMNode)<br>
 * </blockquote>
 * @class
 * @param {String} alias 
 * @param {mixed} row 
 * @param {mixed} col 
 * @returns {dijit.Dye} new instance
*/
dijit.Dye=function(alias, row, col){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return &amp;quot;value&amp;quot; of cell; meaning of &amp;quot;value&amp;quot; varies by subclass.<br>
 * </blockquote>
 * For example color hex value, emoticon ascii value etc, entity hex value.
 * @memberOf dijit.Dye
*/
dijit.Dye.prototype.getValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add cell DOMNode inner structure<br>
 * </blockquote>
 * @param {DomNode} cell The surrounding cell
 * @param {String} blankGif URL for blank cell image
 * @memberOf dijit.Dye
*/
dijit.Dye.prototype.fillCell=function(cell, blankGif){};
/**
 * <b>Summary:</b><blockquote>
 *	 Positions one of the node's corners at specified position<br>
 *	 such that node is fully visible in viewport.<br>
 * </blockquote>
 * NOTE: node is assumed to be absolutely or relatively positioned.
 * @param {DOMNode} node The node to position
 * @param {dijit.place.__Position} pos Object like {x: 10, y: 20}
 * @param {String[]} corners Array of Strings representing order to try corners in, like [&quot;TR&quot;, &quot;BL&quot;].
 * Possible values are:<br>
 * * &quot;BL&quot; - bottom left<br>
 * * &quot;BR&quot; - bottom right<br>
 * * &quot;TL&quot; - top left<br>
 * * &quot;TR&quot; - top right
 * @param {dijit.place.__Position} [padding] optional param to set padding, to put some buffer around the element you want to position.
 * @example
 * Try to place node's top right corner at (10,20).
 * If that makes node go (partially) off screen, then try placing
 * bottom left corner at (10,20).
 * 	place(node, {x: 10, y: 20}, ["TR", "BL"])
*/
dijit.place.at=function(node, pos, corners, padding){};
/**
 * <b>Summary:</b><blockquote>
 *	 Position node adjacent or kitty-corner to anchor<br>
 *	 such that it's fully visible in viewport.<br>
 * </blockquote>
 * Place node such that corner of node touches a corner of<br>
 * aroundNode, and that node is fully visible.
 * @param {DomNode} node 
 * @param {DomNode} anchor Either a DOMNode or a __Rectangle (object with x, y, width, height).
 * @param {String[]} positions Ordered list of positions to try matching up.
 * * before: places drop down to the left of the anchor node/widget, or to the right in the case<br>
 * of RTL scripts like Hebrew and Arabic; aligns either the top of the drop down<br>
 * with the top of the anchor, or the bottom of the drop down with bottom of the anchor.<br>
 * * after: places drop down to the right of the anchor node/widget, or to the left in the case<br>
 * of RTL scripts like Hebrew and Arabic; aligns either the top of the drop down<br>
 * with the top of the anchor, or the bottom of the drop down with bottom of the anchor.<br>
 * * before-centered: centers drop down to the left of the anchor node/widget, or to the right<br>
 * in the case of RTL scripts like Hebrew and Arabic<br>
 * * after-centered: centers drop down to the right of the anchor node/widget, or to the left<br>
 * in the case of RTL scripts like Hebrew and Arabic<br>
 * * above-centered: drop down is centered above anchor node<br>
 * * above: drop down goes above anchor node, left sides aligned<br>
 * * above-alt: drop down goes above anchor node, right sides aligned<br>
 * * below-centered: drop down is centered above anchor node<br>
 * * below: drop down goes below anchor node<br>
 * * below-alt: drop down goes below anchor node, right sides aligned
 * @param {Boolean} leftToRight True if widget is LTR, false if widget is RTL.   Affects the behavior of &quot;above&quot; and &quot;below&quot;
 * positions slightly.
 * @param {Function} [layoutNode] Function(node, aroundNodeCorner, nodeCorner)
 * For things like tooltip, they are displayed differently (and have different dimensions)<br>
 * based on their orientation relative to the parent.	 This adjusts the popup based on orientation.
 * @example
 * 	placeAroundNode(node, aroundNode, {'BL':'TL', 'TR':'BR'});
 * This will try to position node such that node's top-left corner is at the same position
 * as the bottom left corner of the aroundNode (ie, put node below
 * aroundNode, with left edges aligned).	If that fails it will try to put
 * the bottom-right corner of node where the top right corner of aroundNode is
 * (ie, put node above aroundNode, with right edges aligned)
*/
dijit.place.around=function(node, anchor, positions, leftToRight, layoutNode){};
/**
 * @private
*/
dijit.place.__Rectangle=function(){};
/**
 * @private
*/
dijit.place.__Position=function(){};
/**
 * @class
 * @private
 * @returns {dijit.place.__Position} new instance
*/
dijit.place.__Position=function(){};
/**
 * @class
 * @private
 * @returns {dijit.place.__Rectangle} new instance
*/
dijit.place.__Rectangle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Moves the popup widget off-screen.<br>
 *	 Do not use this method to hide popups when not in use, because<br>
 *	 that will create an accessibility issue: the offscreen popup is<br>
 *	 still in the tabbing order.<br>
 * </blockquote>
 * @param {dijit._WidgetBase} widget The widget
*/
dijit.popup.moveOffScreen=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide this popup widget (until it is ready to be shown).<br>
 *	 Initialization for widgets that will be used as popups<br>
 *	 <br>
 *	 Also puts widget inside a wrapper DIV (if not already in one)<br>
 *	 <br>
 *	 If popup widget needs to layout it should<br>
 *	 do so when it is made visible, and popup._onShow() is called.<br>
 * </blockquote>
 * @param {dijit._WidgetBase} widget The widget
*/
dijit.popup.hide=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Close specified popup and any popups that it parented.<br>
 *	 If no popup is specified, closes all popups.<br>
 *	 widget: dijit._WidgetBase?<br>
 *	 The widget, optional<br>
 * </blockquote>
 * @param {mixed} popup 
*/
dijit.popup.close=function(popup){};
/**
 * @private
*/
dijit.popup.__OpenArgs=function(){};
/**
 * @class
 * @private
 * @returns {dijit.popup.__OpenArgs} new instance
*/
dijit.popup.__OpenArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback when user &amp;quot;executed&amp;quot; on the popup/sub-popup by selecting a menu choice, etc. (top menu only)<br>
 * </blockquote>
*/
dijit.popup.__OpenArgs.onExecute=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback whenever this popup is closed<br>
 * </blockquote>
*/
dijit.popup.__OpenArgs.onClose=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback when user has canceled the popup by<br>
 *	 1. hitting ESC or<br>
 *	 2. by using the popup widget's proprietary cancel mechanism (like a cancel button in a dialog);<br>
 *	 i.e. whenever popupWidget.onCancel() is called, args.onCancel is called<br>
 * </blockquote>
*/
dijit.popup.__OpenArgs.onCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Item in a MenuBar like &amp;quot;File&amp;quot; or &amp;quot;Edit&amp;quot;, that spawns a submenu when pressed (or hovered)<br>
 * </blockquote>
 * @class
 * @extends dijit.PopupMenuItem
 * @extends dijit._MenuBarItemMixin
 * @returns {dijit.PopupMenuBarItem} new instance
*/
dijit.PopupMenuBarItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An item in a Menu that spawn a drop down (usually a drop down menu)<br>
 * </blockquote>
 * @class
 * @extends dijit.MenuItem
 * @returns {dijit.PopupMenuItem} new instance
*/
dijit.PopupMenuItem=function(){};
/**
 * @memberOf dijit.PopupMenuItem
*/
dijit.PopupMenuItem.prototype.startup=function(){};
/**
 * @param {Boolean} preserveDom 
 * @memberOf dijit.PopupMenuItem
*/
dijit.PopupMenuItem.prototype.destroyDescendants=function(preserveDom){};
/**
 * <b>Summary:</b><blockquote>
 *	 When Menu is declared in markup, this code gets the menu label and<br>
 *	 the popup widget from the srcNodeRef.<br>
 * </blockquote>
 * srcNodeRefinnerHTML contains both the menu item text and a popup widget<br>
 * The first part holds the menu item text and the second part is the popup
 * @example
 * 	&lt;div data-dojo-type="dijit.PopupMenuItem"&gt;
 * 		&lt;span&gt;pick me&lt;/span&gt;
 * 		&lt;popup&gt; ... &lt;/popup&gt;
 * 	&lt;/div&gt;
 * @memberOf dijit.PopupMenuItem
*/
dijit.PopupMenuItem.prototype._fillContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A progress indication widget, showing the amount completed<br>
 *	 (often the percentage completed) of a task.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dijit.ProgressBar} new instance
 * @example
 * 	&lt;div data-dojo-type="ProgressBar"
 * 		 places="0"
 * 		 value="..." maximum="..."&gt;
 * 	&lt;/div&gt;
*/
dijit.ProgressBar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal method to change attributes of ProgressBar, similar to set(hash).  Users should call<br>
 *	 set(&amp;quot;value&amp;quot;, ...) rather than calling this method directly.<br>
 * </blockquote>
 * @param {Object} [attributes] May provide progress and/or maximum properties on this parameter;
 * see attribute specs for details.
 * @private
 * @example
 * 	myProgressBar.update({'indeterminate': true});
 * 	myProgressBar.update({'progress': 80});
 * 	myProgressBar.update({'indeterminate': true, label:"Loading ..." })
 * @memberOf dijit.ProgressBar
*/
dijit.ProgressBar.prototype.update=function(attributes){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generates message to show inside progress bar (normally indicating amount of task completed).<br>
 *	 May be overridden.<br>
 * </blockquote>
 * @param {float} percent 
 * @memberOf dijit.ProgressBar
*/
dijit.ProgressBar.prototype.report=function(percent){};
/**
 * @memberOf dijit.ProgressBar
*/
dijit.ProgressBar.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback fired when progress updates.<br>
 * </blockquote>
 * @memberOf dijit.ProgressBar
*/
dijit.ProgressBar.prototype.onChange=function(){};
/**
 * @memberOf dijit.ProgressBar
*/
dijit.ProgressBar.prototype.buildRendering=function(){};
/**
 * @param {mixed} v 
 * @private
 * @memberOf dijit.ProgressBar
*/
dijit.ProgressBar.prototype._setValueAttr=function(v){};
/**
 * @param {mixed} label 
 * @private
 * @memberOf dijit.ProgressBar
*/
dijit.ProgressBar.prototype._setLabelAttr=function(label){};
/**
 * @param {mixed} indeterminate 
 * @private
 * @memberOf dijit.ProgressBar
*/
dijit.ProgressBar.prototype._setIndeterminateAttr=function(indeterminate){};
/**
 * @namespace
*/
doh.robot={};
/**
 * <b>Summary:</b><blockquote>
 *	 Notifies DOH that the doh.robot is about to make a page change in the application it is driving,<br>
 *	 returning a doh.Deferred object the user should return in their runTest function as part of a DOH test.<br>
 * </blockquote>
 * Notifies DOH that the doh.robot is about to make a page change in the application it is driving,<br>
 * returning a doh.Deferred object the user should return in their runTest function as part of a DOH test.<br>
 * Example:<br>
 * runTest:function(){<br>
 * return waitForPageLoad(function(){ doh.robot.keyPress(dojo.keys.ENTER, 500); });<br>
 * }
 * @param {Function} submitActions The doh.robot will execute the actions the test passes into the submitActions argument (like clicking the submit button),
 * expecting these actions to create a page change (like a form submit).<br>
 * After these actions execute and the resulting page loads, the next test will start.<br>
*/
doh.robot.waitForPageToLoad=function(submitActions){};
/**
 * <b>Summary:</b><blockquote>
 *	 Scroll the passed node into view, if it is not.<br>
 * </blockquote>
 * @param {String||DOMNode||Function} node The id of the node, or the node itself, to move the mouse to.
 * If you pass an id or a function that returns a node, the node will not be evaluated until the movement executes.<br>
 * This is useful if you need to move the mouse to an node that is not yet present.
 * @param {Number,} delay Delay, in milliseconds, to wait before firing.
 * The delay is a delta with respect to the previous automation call.<br>
*/
doh.robot.scrollIntoView=function(node, delay){};
/**
 * <b>Summary:</b><blockquote>
 *	 Moves the mouse over the specified node at the specified relative x,y offset.<br>
 * </blockquote>
 * Moves the mouse over the specified node at the specified relative x,y offset.<br>
 * If you do not specify an offset, mouseMove will default to move to the middle of the node.<br>
 * Example: to move the mouse over a ComboBox's down arrow node, call doh.mouseMoveAt(dijit.byId('setvaluetest').downArrowNode);
 * @param {String||DOMNode||Function} node The id of the node, or the node itself, to move the mouse to.
 * If you pass an id or a function that returns a node, the node will not be evaluated until the movement executes.<br>
 * This is useful if you need to move the mouse to an node that is not yet present.
 * @param {Integer,} delay Delay, in milliseconds, to wait before firing.
 * The delay is a delta with respect to the previous automation call.<br>
 * For example, the following code ends after 600ms:<br>
 * doh.robot.mouseClick({left:true}, 100) // first call; wait 100ms<br>
 * doh.robot.typeKeys(&quot;dij&quot;, 500) // 500ms AFTER previous call; 600ms in all
 * @param {Integer,} duration Approximate time Robot will spend moving the mouse
 * The default is 100ms.
 * @param {Number,} offsetX x offset relative to the node, in pixels, to move the mouse. The default is half the node's width.
 * @param {Number,} offsetY y offset relative to the node, in pixels, to move the mouse. The default is half the node's height.
*/
doh.robot.mouseMoveAt=function(node, delay, duration, offsetX, offsetY){};
/**
 * <b>Summary:</b><blockquote>
 *	 Opens the application at the specified URL for testing, redirecting dojo to point to the application environment instead of the test environment.<br>
 * </blockquote>
 * @param {String} url URL to open. Any of the test's dojo.doc calls (e.g. dojo.byId()), and any dijit.registry calls (e.g. dijit.byId()) will point to elements and widgets inside this application.
*/
doh.robot.initRobot=function(url){};
/**
 * @private
*/
doh.robot._updateDocument=function(){};
/**
 * @param {Node} n 
 * @private
*/
doh.robot._scrollIntoView=function(n){};
/**
 * @param {mixed} frame 
 * @private
*/
doh.robot._run=function(frame){};
/**
 * @param {String||DOMNode||Function} n 
 * @private
*/
doh.robot._resolveNode=function(n){};
/**
 * @param {Node} n 
 * @private
*/
doh.robot._position=function(n){};
/**
 * @param {Node} n 
 * @private
*/
doh.robot._getWindowChain=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated mixin for widgets that are instantiated from a template.<br>
 *	 Widgets should use _TemplatedMixin plus if necessary _WidgetsInTemplateMixin instead.<br>
 * </blockquote>
 * @class
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @private
 * @returns {dijit._Templated} new instance
*/
dijit._Templated=function(){};
/**
 * @param {mixed} rootNode 
 * @param {mixed} getAttrFunc 
 * @private
 * @memberOf dijit._Templated
*/
dijit._Templated.prototype._attachTemplateNodes=function(rootNode, getAttrFunc){};
/**
 * @class
 * @private
 * @returns {dijit._TimePicker.__Constraints} new instance
*/
dijit._TimePicker.__Constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A pane with a title on top, that can be expanded or collapsed.<br>
 * </blockquote>
 * An accessible container with a title Heading, and a content<br>
 * section that slides open and closed. TitlePane is an extension to<br>
 * `dijit.layout.ContentPane`, providing all the useful content-control aspects from it.
 * @class
 * @extends dijit.layout.ContentPane
 * @extends dijit._TemplatedMixin
 * @extends dijit._CssStateMixin
 * @returns {dijit.TitlePane} new instance
 * @example
 *  	// load a TitlePane from remote file:
 * 	var foo = new dijit.TitlePane({ href: "foobar.html", title:"Title" });
 * 	foo.startup();
 * @example
 * 	&lt;!-- markup href example: --&gt;
 * 	&lt;div data-dojo-type="dijit.TitlePane" data-dojo-props="href: 'foobar.html', title: 'Title'"&gt;&lt;/div&gt;
 * @example
 * 	&lt;!-- markup with inline data --&gt;
 *  	&lt;div data-dojo-type="dijit.TitlePane" title="Title"&gt;
 * 		&lt;p&gt;I am content&lt;/p&gt;
 * 	&lt;/div&gt;
*/
dijit.TitlePane=function(){};
/**
 * @namespace
 * @private
*/
dijit.TitlePane._setTooltipAttr={};
/**
 * @namespace
 * @private
*/
dijit.TitlePane._setTitleAttr={};
/**
 * <b>Summary:</b><blockquote>
 *	 Switches between opened and closed state<br>
 * </blockquote>
 * @private
 * @memberOf dijit.TitlePane
*/
dijit.TitlePane.prototype.toggle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use set('title', ...) instead.<br>
 * </blockquote>
 * @param {String} title 
 * @memberOf dijit.TitlePane
*/
dijit.TitlePane.prototype.setTitle=function(title){};
/**
 * @memberOf dijit.TitlePane
*/
dijit.TitlePane.prototype.postCreate=function(){};
/**
 * @memberOf dijit.TitlePane
*/
dijit.TitlePane.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook to make set(&amp;quot;toggleable&amp;quot;, boolean) work.<br>
 * </blockquote>
 * @param {Boolean} canToggle True to allow user to open/close pane by clicking title bar.
 * @private
 * @memberOf dijit.TitlePane
*/
dijit.TitlePane.prototype._setToggleableAttr=function(canToggle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook to make set(&amp;quot;open&amp;quot;, boolean) control the open/closed state of the pane.<br>
 * </blockquote>
 * @param {Boolean} open True if you want to open the pane, false if you want to close it.
 * @param {Boolean} animate 
 * @private
 * @memberOf dijit.TitlePane
*/
dijit.TitlePane.prototype._setOpenAttr=function(open, animate){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the open/close css state for the TitlePane<br>
 * </blockquote>
 * @private
 * @memberOf dijit.TitlePane
*/
dijit.TitlePane.prototype._setCss=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook to make set(&amp;quot;content&amp;quot;, ...) work.<br>
 *	 Typically called when an href is loaded.  Our job is to make the animation smooth.<br>
 * </blockquote>
 * @param {String|DomNode|Nodelist} content 
 * @private
 * @memberOf dijit.TitlePane
*/
dijit.TitlePane.prototype._setContentAttr=function(content){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for when user hits a key<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.TitlePane
*/
dijit.TitlePane.prototype._onTitleKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler when user clicks the title bar<br>
 * </blockquote>
 * @private
 * @memberOf dijit.TitlePane
*/
dijit.TitlePane.prototype._onTitleClick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Toolbar widget, used to hold things like `dijit.Editor` buttons<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._KeyNavContainer
 * @returns {dijit.Toolbar} new instance
*/
dijit.Toolbar=function(){};
/**
 * @memberOf dijit.Toolbar
*/
dijit.Toolbar.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A spacer between two `dijit.Toolbar` items<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dijit.ToolbarSeparator} new instance
*/
dijit.ToolbarSeparator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This widget isn't focusable, so pass along that fact.<br>
 * </blockquote>
 * @memberOf dijit.ToolbarSeparator
*/
dijit.ToolbarSeparator.prototype.isFocusable=function(){};
/**
 * @memberOf dijit.ToolbarSeparator
*/
dijit.ToolbarSeparator.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pops up a dialog that appears like a Tooltip<br>
 * </blockquote>
 * @class
 * @extends dijit.layout.ContentPane
 * @extends dijit._TemplatedMixin
 * @extends dijit.form._FormMixin
 * @extends dijit._DialogMixin
 * @returns {dijit.TooltipDialog} new instance
*/
dijit.TooltipDialog=function(){};
/**
 * @memberOf dijit.TooltipDialog
*/
dijit.TooltipDialog.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Configure widget to be displayed in given position relative to the button.<br>
 *	 This is called from the dijit.popup code, and should not be called<br>
 *	 directly.<br>
 * </blockquote>
 * @param {DomNode} node 
 * @param {String} aroundCorner 
 * @param {String} corner 
 * @memberOf dijit.TooltipDialog
*/
dijit.TooltipDialog.prototype.orient=function(node, aroundCorner, corner){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when dialog is displayed.<br>
 *	 This is called from the dijit.popup code, and should not be called directly.<br>
 * </blockquote>
 * @param {Object} pos 
 * @memberOf dijit.TooltipDialog
*/
dijit.TooltipDialog.prototype.onOpen=function(pos){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when dialog is hidden.<br>
 *	 This is called from the dijit.popup code, and should not be called directly.<br>
 * </blockquote>
 * @memberOf dijit.TooltipDialog
*/
dijit.TooltipDialog.prototype.onClose=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus on first field<br>
 * </blockquote>
 * @memberOf dijit.TooltipDialog
*/
dijit.TooltipDialog.prototype.focus=function(){};
/**
 * @param {String} title 
 * @private
 * @memberOf dijit.TooltipDialog
*/
dijit.TooltipDialog.prototype._setTitleAttr=function(title){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for keyboard events<br>
 * </blockquote>
 * Keep keyboard focus in dialog; close dialog on escape key
 * @param {Event} evt 
 * @private
 * @memberOf dijit.TooltipDialog
*/
dijit.TooltipDialog.prototype._onKey=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal widget that holds the actual tooltip markup,<br>
 *	 which occurs once per page.<br>
 *	 Called by Tooltip widgets which are just containers to hold<br>
 *	 the markup<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dijit._MasterTooltip} new instance
*/
dijit._MasterTooltip=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Display tooltip w/specified contents to right of specified node<br>
 *	 (To left if there's no space on the right, or if rtl == true)<br>
 * </blockquote>
 * @param {String} innerHTML Contents of the tooltip
 * @param {DomNode} aroundNode || dijit.__Rectangle
 * Specifies that tooltip should be next to this node / area
 * @param {String[]} [position] List of positions to try to position tooltip (ex: [&quot;right&quot;, &quot;above&quot;])
 * @param {Boolean} [rtl] Corresponds to `WidgetBase.dir` attribute, where false means &quot;ltr&quot; and true
 * means &quot;rtl&quot;; specifies GUI direction, not text direction.
 * @param {String} [textDir] Corresponds to `WidgetBase.textdir` attribute; specifies direction of text.
 * @memberOf dijit._MasterTooltip
*/
dijit._MasterTooltip.prototype.show=function(innerHTML, aroundNode, position, rtl, textDir){};
/**
 * @memberOf dijit._MasterTooltip
*/
dijit._MasterTooltip.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Private function to set CSS for tooltip node based on which position it's in.<br>
 *	 This is called by the dijit popup code.   It will also reduce the tooltip's<br>
 *	 width to whatever width is available<br>
 * </blockquote>
 * @param {DomNode} node 
 * @param {String} aroundCorner 
 * @param {String} tooltipCorner 
 * @param {Object} spaceAvailable 
 * @param {Object} aroundNodeCoords 
 * @memberOf dijit._MasterTooltip
*/
dijit._MasterTooltip.prototype.orient=function(node, aroundCorner, tooltipCorner, spaceAvailable, aroundNodeCoords){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide the tooltip<br>
 * </blockquote>
 * @param {mixed} aroundNode 
 * @memberOf dijit._MasterTooltip
*/
dijit._MasterTooltip.prototype.hide=function(aroundNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Setter for textDir.<br>
 * </blockquote>
 * Users shouldn't call this function; they should be calling<br>
 * set('textDir', value)
 * @param {String} textDir 
 * @private
 * @memberOf dijit._MasterTooltip
*/
dijit._MasterTooltip.prototype._setTextDirAttr=function(textDir){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resolve &amp;quot;auto&amp;quot; text direction for children nodes<br>
 * </blockquote>
 * @param {Object} node 
 * @private
 * @memberOf dijit._MasterTooltip
*/
dijit._MasterTooltip.prototype._setAutoTextDir=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called at end of fade-in operation<br>
 * </blockquote>
 * @memberOf dijit._MasterTooltip
*/
dijit._MasterTooltip.prototype._onShow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called at end of fade-out operation<br>
 * </blockquote>
 * @memberOf dijit._MasterTooltip
*/
dijit._MasterTooltip.prototype._onHide=function(){};
/**
 * @namespace
*/
dijit._MasterTooltip.domNode={};
/**
 * @namespace
*/
dijit._MasterTooltip.containerNode={};
/**
 * @namespace
*/
dijit._MasterTooltip.connectorNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Contract for any data provider object for the tree.<br>
 * </blockquote>
 * Tree passes in values to the constructor to specify the callbacks.<br>
 * "item" is typically a dojo.data.Item but it's just a black box so<br>
 * it could be anything.<br>
 * <br>
 * This (like `dojo.data.api.Read`) is just documentation, and not meant to be used.<br>
*/
dijit.tree.model=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles drag and drop operations (as a source or a target) for `dijit.Tree`<br>
 * </blockquote>
 * @param {dijit.Tree} tree 
 * @param {dijit.tree.__SourceArgs} params 
 * @private
*/
dijit.tree.dndSource=function(tree, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a base class for `dijit.tree.dndSource` , and isn't meant to be used directly.<br>
 *	 It's based on `dojo.dnd.Selector`.<br>
 * </blockquote>
*/
dijit.tree._dndSelector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a base class for `dijit.tree._dndSelector`, and isn't meant to be used directly.<br>
 *	 It's modeled after `dojo.dnd.Container`.<br>
 * </blockquote>
 * @param {Node} tree Node or node's id to build the container on
 * @param {dijit.tree.__SourceArgs} params A dict of parameters, which gets mixed into the object
*/
dijit.tree._dndContainer=function(tree, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 A dict of parameters for Tree source configuration.<br>
 * </blockquote>
 * @private
*/
dijit.tree.__SourceArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Implements dijit.Tree.model connecting to a dojo.data store with a single<br>
 *	 root item.  Any methods passed into the constructor will override<br>
 *	 the ones defined here.<br>
 * </blockquote>
 * @param {Object} args 
 * @example
 * 	{id:'ROOT'}
*/
dijit.tree.TreeStoreModel=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Interface between a dijit.Tree and a dojo.data store that doesn't have a root item,<br>
 *	 a.k.a. a store that has multiple &amp;quot;top level&amp;quot; items.<br>
 *	 <br>
 *	 description<br>
 *	 Use this class to wrap a dojo.data store, making all the items matching the specified query<br>
 *	 appear as children of a fabricated &amp;quot;root item&amp;quot;.  If no query is specified then all the<br>
 *	 items returned by fetch() on the underlying store become children of the root item.<br>
 *	 This class allows dijit.Tree to assume a single root item, even if the store doesn't have one.<br>
 *	 <br>
 *	 When using this class the developer must override a number of methods according to their app and<br>
 *	 data, including:<br>
 *	 - onNewRootItem<br>
 *	 - onAddToRoot<br>
 *	 - onLeaveRoot<br>
 *	 - onNewItem<br>
 *	 - onSetItem<br>
 * </blockquote>
 * @param {mixed} params 
 * @example
 * 	{type:'continent'}
*/
dijit.tree.ForestStoreModel=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a base class for `dijit.tree._dndSelector`, and isn't meant to be used directly.<br>
 *	 It's modeled after `dojo.dnd.Container`.<br>
 * </blockquote>
 * @class
 * @param {Node} tree Node or node's id to build the container on
 * @param {dijit.tree.__SourceArgs} params A dict of parameters, which gets mixed into the object
 * @returns {dijit.tree._dndContainer} new instance
*/
dijit.tree._dndContainer=function(tree, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is called once, when mouse is over our container<br>
 * </blockquote>
 * @memberOf dijit.tree._dndContainer
*/
dijit.tree._dndContainer.prototype.onOverEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is called once, when mouse is out of our container<br>
 * </blockquote>
 * @memberOf dijit.tree._dndContainer
*/
dijit.tree._dndContainer.prototype.onOutEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when mouse is moved over a TreeNode<br>
 * </blockquote>
 * @param {TreeNode} widget 
 * @param {Event} evt 
 * @memberOf dijit.tree._dndContainer
*/
dijit.tree._dndContainer.prototype.onMouseOver=function(widget, evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when mouse is moved away from a TreeNode<br>
 * </blockquote>
 * @param {TreeNode} widget 
 * @param {Event} evt 
 * @memberOf dijit.tree._dndContainer
*/
dijit.tree._dndContainer.prototype.onMouseOut=function(widget, evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Prepares this object to be garbage-collected<br>
 * </blockquote>
 * @memberOf dijit.tree._dndContainer
*/
dijit.tree._dndContainer.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes a class with prefix &amp;quot;dojoDndItem&amp;quot;<br>
 * </blockquote>
 * @param {Node} node A node
 * @param {String} type A variable suffix for a class name
 * @private
 * @memberOf dijit.tree._dndContainer
*/
dijit.tree._dndContainer.prototype._removeItemClass=function(node, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes a named state to new state value<br>
 * </blockquote>
 * @param {String} type A name of the state to change
 * @param {String} newState new state
 * @private
 * @memberOf dijit.tree._dndContainer
*/
dijit.tree._dndContainer.prototype._changeState=function(type, newState){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a class with prefix &amp;quot;dojoDndItem&amp;quot;<br>
 * </blockquote>
 * @param {Node} node A node
 * @param {String} type A variable suffix for a class name
 * @private
 * @memberOf dijit.tree._dndContainer
*/
dijit.tree._dndContainer.prototype._addItemClass=function(node, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a base class for `dijit.tree.dndSource` , and isn't meant to be used directly.<br>
 *	 It's based on `dojo.dnd.Selector`.<br>
 * </blockquote>
 * @class
 * @returns {dijit.tree._dndSelector} new instance
*/
dijit.tree._dndSelector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add or remove the given node from selection, responding<br>
 *	 to a user action such as a click or keypress.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {Boolean} multi Indicates whether this is meant to be a multi-select action (e.g. ctrl-click)
 * @param {Boolean} range Indicates whether this is meant to be a ranged action (e.g. shift-click)
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.userSelect=function(node, multi, range){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the list of selected nodes to be exactly newSelection. All changes to the<br>
 *	 selection should be passed through this function, which ensures that derived<br>
 *	 attributes are kept up to date. Anchor will be deleted if it has been removed<br>
 *	 from the selection, but no new anchor will be added by this function.<br>
 * </blockquote>
 * @param {dijit._treeNode[]} newSelection Node[] list of tree nodes to make selected
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.setSelection=function(newSelection){};
/**
 * <b>Summary:</b><blockquote>
 *	 Unselects all items<br>
 * </blockquote>
 * @private
 * @returns {self} -
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.selectNone=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 remove node from current selection<br>
 * </blockquote>
 * @param {dijit._TreeNode} node Node node to remove
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.removeTreeNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event processor for onmouseup/ontouchend<br>
 * </blockquote>
 * @param {Event} e onmouseup/ontouchend event
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousemove/ontouchmove<br>
 * </blockquote>
 * @param {Event} e onmousemove/ontouchmove event
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event processor for onmousedown/ontouchstart<br>
 * </blockquote>
 * @param {Event} e onmousedown/ontouchstart event
 * @returns {ignore right-click} -
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.onMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 return true if node is currently selected<br>
 * </blockquote>
 * @param {dijit._TreeNode} node Node the node to check whether it's in the current selection
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.isTreeNodeSelected=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a list of selected node(s).<br>
 *	 Used by dndSource on the start of a drag.<br>
 * </blockquote>
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.getSelectedTreeNodes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the dojo.dnd.Item (representing a dragged node) by it's key (id).<br>
 *	 Called by dojo.dnd.Source.checkAcceptance().<br>
 * </blockquote>
 * @param {String} key 
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.getItem=function(key){};
/**
 * <b>Summary:</b><blockquote>
 *	 Iterates over selected items;<br>
 *	 see `dojo.dnd.Container.forInItems()` for details<br>
 * </blockquote>
 * @see dojo.dnd.Container
 * @param {Function} f 
 * @param {Object} [o] 
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.forInSelectedItems=function(f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Prepares the object to be garbage-collected<br>
 * </blockquote>
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 add node to current selection<br>
 * </blockquote>
 * @param {dijit._TreeNode} node Node node to add
 * @param {Boolean} [isAnchor] Whether the node should become anchor.
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype.addTreeNode=function(node, isAnchor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the following tree properties from the current selection:<br>
 *	 path[s], selectedItem[s], selectedNode[s]<br>
 * </blockquote>
 * @private
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype._updateSelectionProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a copy of xs which lacks any objects<br>
 *	 occurring in ys. Checks for membership by<br>
 *	 modifying and then reading the object, so it will<br>
 *	 not properly handle sets of numbers or strings.<br>
 * </blockquote>
 * @param {mixed} xs 
 * @param {mixed} ys 
 * @private
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype._setDifference=function(xs, ys){};
/**
 * @param {mixed} n1 
 * @param {mixed} n2 
 * @private
 * @memberOf dijit.tree._dndSelector
*/
dijit.tree._dndSelector.prototype._compareNodes=function(n1, n2){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles drag and drop operations (as a source or a target) for `dijit.Tree`<br>
 * </blockquote>
 * @class
 * @private
 * @param {dijit.Tree} tree 
 * @param {dijit.tree.__SourceArgs} params 
 * @returns {dijit.tree.dndSource} new instance
*/
dijit.tree.dndSource=function(tree, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 This method is called when mouse is moved over our container (like onmouseenter)<br>
 * </blockquote>
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.onOverEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This method is called when mouse is moved out of our container (like onmouseleave)<br>
 * </blockquote>
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.onOutEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event processor for onmouseup/ontouchend<br>
 * </blockquote>
 * @param {Event} e onmouseup/ontouchend event
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event processor for when mouse is moved away from a TreeNode<br>
 * </blockquote>
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.onMouseOut=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called for any onmousemove/ontouchmove events over the Tree<br>
 * </blockquote>
 * @param {Event} e onmousemouse/ontouchmove event
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event processor for onmousedown/ontouchstart<br>
 * </blockquote>
 * @param {Event} e onmousedown/ontouchend event
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.onMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Topic event processor for /dnd/start, called to initiate the DnD operation<br>
 * </blockquote>
 * @param {Object} source The dijit.tree.dndSource / dojo.dnd.Source which is providing the items
 * @param {DomNode[]} nodes The list of transferred items, dndTreeNode nodes if dragging from a Tree
 * @param {Boolean} copy Copy items, if true, move items otherwise
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.onDndStart=function(source, nodes, copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 Topic event processor for /dnd/source/over, called when detected a current source.<br>
 * </blockquote>
 * @param {Object} source The dijit.tree.dndSource / dojo.dnd.Source which has the mouse over it
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.onDndSourceOver=function(source){};
/**
 * <b>Summary:</b><blockquote>
 *	 Topic event processor for /dnd/drop, called to finish the DnD operation.<br>
 * </blockquote>
 * Updates data store items according to where node was dragged from and dropped<br>
 * to.   The tree will then respond to those data store updates and redraw itself.
 * @param {Object} source The dijit.tree.dndSource / dojo.dnd.Source which is providing the items
 * @param {DomNode[]} nodes The list of transferred items, dndTreeNode nodes if dragging from a Tree
 * @param {Boolean} copy Copy items, if true, move items otherwise
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.onDndDrop=function(source, nodes, copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 Topic event processor for /dnd/cancel, called to cancel the DnD operation<br>
 * </blockquote>
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.onDndCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns objects passed to `Tree.model.newItem()` based on DnD nodes<br>
 *	 dropped onto the tree.   Developer must override this method to enable<br>
 *	 dropping from external sources onto this Tree, unless the Tree.model's items<br>
 *	 happen to look like {id: 123, name: &amp;quot;Apple&amp;quot; } with no other attributes.<br>
 * </blockquote>
 * For each node in nodes[], which came from source, create a hash of name/value<br>
 * pairs to be passed to Tree.model.newItem().  Returns array of those hashes.
 * @param {DomNode[]} nodes 
 * @param {DomNode} target 
 * @param {dojo.dnd.Source} source 
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.itemCreator=function(nodes, target, source){};
/**
 * <b>Summary:</b><blockquote>
 *	 Prepares the object to be garbage-collected.<br>
 * </blockquote>
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true, if we need to copy items, false to move.<br>
 *	 It is separated to be overwritten dynamically, if needed.<br>
 * </blockquote>
 * @param {Boolean} keyPressed The &quot;copy&quot; control key was pressed
 * @returns {Boolean} -
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.copyState=function(keyPressed){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to be overridden if one wants to check for the ability to drop at the node/item level<br>
 * </blockquote>
 * In the base case, this is called to check if target can become a child of source.<br>
 * When betweenThreshold is set, position="before" or "after" means that we<br>
 * are asking if the source node can be dropped before/after the target node.
 * @param {DOMNode} target The dijitTreeRoot DOM node inside of the TreeNode that we are dropping on to
 * Use dijit.getEnclosingWidget(target) to get the TreeNode.
 * @param {dijit.tree.dndSource} source The (set of) nodes we are dropping
 * @param {String} position &quot;over&quot;, &quot;before&quot;, or &quot;after&quot;
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.checkItemAcceptance=function(target, source, position){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks if the target can accept nodes from this source<br>
 * </blockquote>
 * @param {dijit.tree.dndSource} source The source which provides items
 * @param {DOMNode[]} nodes Array of DOM nodes corresponding to nodes being dropped, dijitTreeRow nodes if
 * source is a dijit.Tree.
 * @returns {Boolean} -
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype.checkAcceptance=function(source, nodes){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes hover class of the current target anchor<br>
 * </blockquote>
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype._unmarkTargetAnchor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper method for processing onmousemove/onmouseover events while drag is in progress.<br>
 *	 Keeps track of current drop target.<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype._onDragMouse=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes source's state based on &amp;quot;copy&amp;quot; status<br>
 * </blockquote>
 * @param {mixed} copy 
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype._markDndStatus=function(copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks whether the dragged items are parent rows in the tree which are being<br>
 *	 dragged into their own children.<br>
 * </blockquote>
 * @param {The} source DragSource object.
 * @param {The} targetRow tree row onto which the dragged nodes are being dropped.
 * @private
 * @memberOf dijit.tree.dndSource
*/
dijit.tree.dndSource.prototype._isParentChildDrop=function(source, targetRow){};
/**
 * <b>Summary:</b><blockquote>
 *	 A dict of parameters for Tree source configuration.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dijit.tree.__SourceArgs} new instance
*/
dijit.tree.__SourceArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Interface between a dijit.Tree and a dojo.data store that doesn't have a root item,<br>
 *	 a.k.a. a store that has multiple &amp;quot;top level&amp;quot; items.<br>
 *	 <br>
 *	 description<br>
 *	 Use this class to wrap a dojo.data store, making all the items matching the specified query<br>
 *	 appear as children of a fabricated &amp;quot;root item&amp;quot;.  If no query is specified then all the<br>
 *	 items returned by fetch() on the underlying store become children of the root item.<br>
 *	 This class allows dijit.Tree to assume a single root item, even if the store doesn't have one.<br>
 *	 <br>
 *	 When using this class the developer must override a number of methods according to their app and<br>
 *	 data, including:<br>
 *	 - onNewRootItem<br>
 *	 - onAddToRoot<br>
 *	 - onLeaveRoot<br>
 *	 - onNewItem<br>
 *	 - onSetItem<br>
 * </blockquote>
 * @class
 * @extends dijit.tree.TreeStoreModel
 * @param {mixed} params 
 * @returns {dijit.tree.ForestStoreModel} new instance
 * @example
 * 	{type:'continent'}
*/
dijit.tree.ForestStoreModel=function(params){};
/**
 * @namespace
*/
dijit.tree.ForestStoreModel.root={};
/**
 * <b>Summary:</b><blockquote>
 *	 Move or copy an item from one parent item to another.<br>
 *	 Used in drag &amp;amp; drop<br>
 * </blockquote>
 * @param {Item} childItem 
 * @param {Item} oldParentItem 
 * @param {Item} newParentItem 
 * @param {Boolean} bCopy 
 * @param {int} [insertIndex] 
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.pasteItem=function(childItem, oldParentItem, newParentItem, bCopy, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the tree view according to changes to an item in the data store.<br>
 *	 Developers should override this method to be more efficient based on their app/data.<br>
 * </blockquote>
 * Handles updates to an item's children by calling onChildrenChange(), and<br>
 * other updates to an item by calling onChange().<br>
 * <br>
 * Also, any change to any item re-executes the query for the tree's top-level items,<br>
 * since this modified item may have started/stopped matching the query for top level items.<br>
 * <br>
 * If possible, developers should override this function to only call _requeryTop() when<br>
 * the change to the item has caused it to stop/start being a top level item in the tree.
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {object} oldValue | array
 * @param {object} newValue | array
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.onSetItem=function(item, attribute, oldValue, newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 User can override this method to modify a new element that's being<br>
 *	 added to the root of the tree, for example to add a flag like root=true<br>
 * </blockquote>
 * @param {dojo.dnd.Item} args 
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.onNewRootItem=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for when new items appear in the store.  Developers should override this<br>
 *	 method to be more efficient based on their app/data.<br>
 * </blockquote>
 * Note that the default implementation requeries the top level items every time<br>
 * a new item is created, since any new item could be a top level item (even in<br>
 * addition to being a child of another item, since items can have multiple parents).<br>
 * <br>
 * If developers can detect which items are possible top level items (based on the item and the<br>
 * parentInfo parameters), they should override this method to only call _requeryTop() for top<br>
 * level items.  Often all top level items have parentInfo==null, but<br>
 * that will depend on which store you use and what your data is like.
 * @param {dojo.data.Item} item 
 * @param {Object} parentInfo 
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.onNewItem=function(item, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when item removed from root of tree; user must override this method<br>
 *	 to modify the item so it doesn't match the query for top level items<br>
 * </blockquote>
 * @param {item} item 
 * @example
 * 	store.unsetAttribute(item, "root");
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.onLeaveRoot=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for delete notifications from underlying store<br>
 * </blockquote>
 * @param {Object} item 
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.onDeleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when item added to root of tree; user must override this method<br>
 *	 to modify the item so that it matches the query for top level items<br>
 * </blockquote>
 * @param {item} item 
 * @example
 * 	store.setValue(item, "root", true);
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.onAddToRoot=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a new item.   See dojo.data.api.Write for details on args.<br>
 *	 Used in drag &amp;amp; drop when item from external source dropped onto tree.<br>
 * </blockquote>
 * @param {dojo.dnd.Item} args 
 * @param {Item} parent 
 * @param {int} [insertIndex] 
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.newItem=function(args, parent, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tells if an item has or may have children.  Implementing logic here<br>
 *	 avoids showing +/- expando icon for nodes that we know don't have children.<br>
 *	 (For efficiency reasons we may not want to check if an element actually<br>
 *	 has children until user clicks the expando node)<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.mayHaveChildren=function(item){};
/**
 * @param {anything} something 
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.isItem=function(something){};
/**
 * @param {item} item 
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.getLabel=function(item){};
/**
 * @param {item} item 
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls onComplete() with array of child items of given parent item, all loaded.<br>
 * </blockquote>
 * @param {dojo.data.Item} parentItem 
 * @param {function(items)} callback 
 * @param {function} onError 
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.getChildren=function(parentItem, callback, onError){};
/**
 * @param {object} keywordArgs 
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * @private
 * @memberOf dijit.tree.ForestStoreModel
*/
dijit.tree.ForestStoreModel.prototype._requeryTop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Implements dijit.Tree.model connecting to a dojo.data store with a single<br>
 *	 root item.  Any methods passed into the constructor will override<br>
 *	 the ones defined here.<br>
 * </blockquote>
 * @class
 * @param {Object} args 
 * @returns {dijit.tree.TreeStoreModel} new instance
 * @example
 * 	{id:'ROOT'}
*/
dijit.tree.TreeStoreModel=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Move or copy an item from one parent item to another.<br>
 *	 Used in drag &amp;amp; drop<br>
 * </blockquote>
 * @param {Item} childItem 
 * @param {Item} oldParentItem 
 * @param {Item} newParentItem 
 * @param {Boolean} bCopy 
 * @param {int} [insertIndex] 
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.pasteItem=function(childItem, oldParentItem, newParentItem, bCopy, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the tree view according to changes in the data store.<br>
 * </blockquote>
 * Handles updates to an item's children by calling onChildrenChange(), and<br>
 * other updates to an item by calling onChange().<br>
 * <br>
 * See `onNewItem` for more details on handling updates to an item's children.
 * @param {Item} item 
 * @param {attribute-name-string} attribute 
 * @param {object} oldValue | array
 * @param {object} newValue | array
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.onSetItem=function(item, attribute, oldValue, newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for when new items appear in the store, either from a drop operation<br>
 *	 or some other way.   Updates the tree view (if necessary).<br>
 * </blockquote>
 * If the new item is a child of an existing item,<br>
 * calls onChildrenChange() with the new list of children<br>
 * for that existing item.
 * @param {dojo.data.Item} item 
 * @param {Object} parentInfo 
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.onNewItem=function(item, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for delete notifications from underlying store<br>
 * </blockquote>
 * @param {Object} item 
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.onDeleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when an item has been deleted.<br>
 * </blockquote>
 * Note that there will also be an onChildrenChange() callback for the parent<br>
 * of this item.
 * @param {dojo.data.Item} item 
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.onDelete=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback to do notifications about new, updated, or deleted items.<br>
 * </blockquote>
 * @param {dojo.data.Item} parent 
 * @param {dojo.data.Item[]} newChildrenList 
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.onChildrenChange=function(parent, newChildrenList){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback whenever an item has changed, so that Tree<br>
 *	 can update the label, icon, etc.   Note that changes<br>
 *	 to an item's children or parent(s) will trigger an<br>
 *	 onChildrenChange() so you can ignore those changes here.<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.onChange=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a new item.   See `dojo.data.api.Write` for details on args.<br>
 *	 Used in drag &amp;amp; drop when item from external source dropped onto tree.<br>
 * </blockquote>
 * Developers will need to override this method if new items get added<br>
 * to parents with multiple children attributes, in order to define which<br>
 * children attribute points to the new item.
 * @param {dojo.dnd.Item} args 
 * @param {Item} parent 
 * @param {int} [insertIndex] 
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.newItem=function(args, parent, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tells if an item has or may have children.  Implementing logic here<br>
 *	 avoids showing +/- expando icon for nodes that we know don't have children.<br>
 *	 (For efficiency reasons we may not want to check if an element actually<br>
 *	 has children until user clicks the expando node)<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.mayHaveChildren=function(item){};
/**
 * @param {anything} something 
 * @returns {Boolean} -
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls onItem with the root item for the tree, possibly a fabricated item.<br>
 *	 Calls onError on error.<br>
 * </blockquote>
 * @param {mixed} onItem 
 * @param {mixed} onError 
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.getRoot=function(onItem, onError){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the label for an item<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @returns {String} -
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.getLabel=function(item){};
/**
 * @param {item} item 
 * @returns {Object} -
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls onComplete() with array of child items of given parent item, all loaded.<br>
 * </blockquote>
 * @param {dojo.data.Item} parentItem 
 * @param {function(items)} onComplete 
 * @param {function} onError 
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.getChildren=function(parentItem, onComplete, onError){};
/**
 * @param {object} keywordArgs 
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * @memberOf dijit.tree.TreeStoreModel
*/
dijit.tree.TreeStoreModel.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Contract for any data provider object for the tree.<br>
 * </blockquote>
 * Tree passes in values to the constructor to specify the callbacks.<br>
 * "item" is typically a dojo.data.Item but it's just a black box so<br>
 * it could be anything.<br>
 * <br>
 * This (like `dojo.data.api.Read`) is just documentation, and not meant to be used.
 * @class
 * @returns {dijit.tree.model} new instance
*/
dijit.tree.model=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Move or copy an item from one parent item to another.<br>
 *	 Used in drag &amp;amp; drop.<br>
 *	 If oldParentItem is specified and bCopy is false, childItem is removed from oldParentItem.<br>
 *	 If newParentItem is specified, childItem is attached to newParentItem.<br>
 * </blockquote>
 * @param {Item} childItem 
 * @param {Item} oldParentItem 
 * @param {Item} newParentItem 
 * @param {Boolean} bCopy 
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.pasteItem=function(childItem, oldParentItem, newParentItem, bCopy){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback to do notifications about new, updated, or deleted items.<br>
 * </blockquote>
 * @param {dojo.data.Item} parent 
 * @param {dojo.data.Item[]} newChildrenList 
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.onChildrenChange=function(parent, newChildrenList){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback whenever an item has changed, so that Tree<br>
 *	 can update the label, icon, etc.   Note that changes<br>
 *	 to an item's children or parent(s) will trigger an<br>
 *	 onChildrenChange() so you can ignore those changes here.<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.onChange=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a new item.   See `dojo.data.api.Write` for details on args.<br>
 * </blockquote>
 * @param {dojo.dnd.Item} args 
 * @param {Item} parent 
 * @param {int} [insertIndex] 
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.newItem=function(args, parent, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tells if an item has or may have children.  Implementing logic here<br>
 *	 avoids showing +/- expando icon for nodes that we know don't have children.<br>
 *	 (For efficiency reasons we may not want to check if an element actually<br>
 *	 has children until user clicks the expando node)<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.mayHaveChildren=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if *something* is an item and came from this model instance.<br>
 *	 Returns false if *something* is a literal, an item from another model instance,<br>
 *	 or is any object other than an item.<br>
 * </blockquote>
 * @param {mixed} something 
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls onItem with the root item for the tree, possibly a fabricated item.<br>
 *	 Throws exception on error.<br>
 * </blockquote>
 * @param {mixed} onItem 
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.getRoot=function(onItem){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the label for an item<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns identity for an item<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls onComplete() with array of child items of given parent item, all loaded.<br>
 *	 Throws exception on error.<br>
 * </blockquote>
 * @param {dojo.data.Item} parentItem 
 * @param {function(items)} onComplete 
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.getChildren=function(parentItem, onComplete){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given the identity of an item, this method returns the item that has<br>
 *	 that identity through the onItem callback.  Conforming implementations<br>
 *	 should return null if there is no item with the given identity.<br>
 *	 Implementations of fetchItemByIdentity() may sometimes return an item<br>
 *	 from a local cache and may sometimes fetch an item from a remote server.<br>
 * </blockquote>
 * @param {mixed} keywordArgs 
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroys this object, releasing connections to the store<br>
 * </blockquote>
 * @memberOf dijit.tree.model
*/
dijit.tree.model.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Single node within a tree.   This class is used internally<br>
 *	 by Tree and should not be accessed directly.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._Container
 * @extends dijit._Contained
 * @extends dijit._CssStateMixin
 * @returns {dijit._TreeNode} new instance
*/
dijit._TreeNode=function(){};
/**
 * @namespace
*/
dijit._TreeNode.cssStateNodes={};
/**
 * @namespace
 * @private
*/
dijit._TreeNode._setTooltipAttr={};
/**
 * @namespace
 * @private
*/
dijit._TreeNode._setLabelAttr={};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear markup from markProcessing() call<br>
 * </blockquote>
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.unmarkProcessing=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Tree has a (single) currently selected node.<br>
 *	 Mark that this node is/isn't that currently selected node.<br>
 * </blockquote>
 * In particular, setting a node as selected involves setting tabIndex<br>
 * so that when user tabs to the tree, focus will go to that node (only).
 * @param {Boolean} selected 
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.setSelected=function(selected){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Tree has a (single) node that's focusable.<br>
 *	 Mark that this node is/isn't that currently focsuable node.<br>
 * </blockquote>
 * In particular, setting a node as selected involves setting tabIndex<br>
 * so that when user tabs to the tree, focus will go to that node (only).
 * @param {Boolean} selected 
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.setFocusable=function(selected){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the child items of this node, removing/adding nodes<br>
 *	 from current children to match specified items[] array.<br>
 *	 Also, if this.persist == true, expands any children that were previously<br>
 *	 opened.<br>
 * </blockquote>
 * @param {Object[]} items 
 * 
 * @returns {dojo.Deferred} -have been expanded again (or fires instantly if there are no such children).
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.setChildItems=function(items){};
/**
 * @param {treeNode} node 
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.removeChild=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Visually denote that tree is loading data, etc.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.markProcessing=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 if this node wasn't already showing the expando node,<br>
 *	 turn it into one and call _setExpando()<br>
 * </blockquote>
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.makeExpandable=function(){};
/**
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.getTreePath=function(){};
/**
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.getIdentity=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show my children<br>
 * </blockquote>
 * 
 * @returns {dojo.Deferred} -
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.expand=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Collapse this node (if it's expanded)<br>
 * </blockquote>
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.collapse=function(){};
/**
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set appropriate CSS classes for this.domNode<br>
 * </blockquote>
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype._updateLayout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set appropriate CSS classes for icon and label dom node<br>
 *	 (used to allow for item updates to change respective CSS)<br>
 * </blockquote>
 * @param {mixed} item 
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype._updateItemClasses=function(item){};
/**
 * @param {mixed} textDir 
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype._setTextDirAttr=function(textDir){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tell this node how many levels it should be indented<br>
 * </blockquote>
 * 0 for top level nodes, 1 for their children, 2 for their<br>
 * grandchildren, etc.
 * @param {mixed} indent 
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype._setIndentAttr=function(indent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the right image for the expando node<br>
 * </blockquote>
 * @param {Boolean} processing 
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype._setExpando=function(processing){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onmouseenter event on a node<br>
 * </blockquote>
 * @param {mixed} evt 
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype._onMouseLeave=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onmouseenter event on a node<br>
 * </blockquote>
 * @param {mixed} evt 
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype._onMouseEnter=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when this row is focused (possibly programatically)<br>
 *	 Note that we aren't using _onFocus() builtin to dijit<br>
 *	 because it's called when focus is moved to a descendant TreeNode.<br>
 * </blockquote>
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype._onLabelFocus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for ondblclick event on a node<br>
 * </blockquote>
 * @param {mixed} evt 
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype._onDblClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for onclick event on a node<br>
 * </blockquote>
 * @param {mixed} evt 
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype._onClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the appropriate CSS classes and styles for labels, icons and rows.<br>
 * </blockquote>
 * @param {The} item data item.
 * @param {The} lower lower case attribute to use, e.g. 'icon', 'label' or 'row'.
 * @param {The} upper upper case attribute to use, e.g. 'Icon', 'Label' or 'Row'.
 * @private
 * @memberOf dijit._TreeNode
*/
dijit._TreeNode.prototype._applyClassAndStyle=function(item, lower, upper){};
/**
 * <b>Summary:</b><blockquote>
 *	 This widget displays hierarchical data from a store.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dijit.Tree} new instance
*/
dijit.Tree=function(){};
/**
 * @param {mixed} changeSize 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.resize=function(changeSize){};
/**
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.postMixInProperties=function(){};
/**
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when a node is opened<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @param {TreeNode} node 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.onOpen=function(item, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when tree finishes loading and expanding.<br>
 * </blockquote>
 * If persist == true the loading may encompass many levels of fetches<br>
 * from the data store, each asynchronous.   Waits for all to finish.
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.onLoad=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parameter to dndController, see `dijit.tree.dndSource.onDndDrop`.<br>
 *	 Generally this doesn't need to be set.<br>
 * </blockquote>
 * @see dijit.tree.dndSource
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.onDndDrop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parameter to dndController, see `dijit.tree.dndSource.onDndCancel`.<br>
 *	 Generally this doesn't need to be set.<br>
 * </blockquote>
 * @see dijit.tree.dndSource
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.onDndCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when a tree node is double-clicked<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @param {TreeNode} node 
 * @param {Event} evt 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.onDblClick=function(item, node, evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when a node is closed<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @param {TreeNode} node 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.onClose=function(item, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when a tree node is clicked<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @param {TreeNode} node 
 * @param {Event} evt 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.onClick=function(item, node, evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   This should be specified on the model itself.<br>
 *	 <br>
 *	 Overridable function to tell if an item has or may have children.<br>
 *	 Controls whether or not +/- expando icon is shown.<br>
 *	 (For efficiency reasons we may not want to check if an element actually<br>
 *	 has children until user clicks the expando node)<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.mayHaveChildren=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns objects passed to `Tree.model.newItem()` based on DnD nodes<br>
 *	 dropped onto the tree.   Developer must override this method to enable<br>
 *	 dropping from external sources onto this Tree, unless the Tree.model's items<br>
 *	 happen to look like {id: 123, name: &amp;quot;Apple&amp;quot; } with no other attributes.<br>
 * </blockquote>
 * For each node in nodes[], which came from source, create a hash of name/value<br>
 * pairs to be passed to Tree.model.newItem().  Returns array of those hashes.
 * @param {DomNode[]} nodes The DOMNodes dragged from the source container
 * @param {DomNode} target The target TreeNode.rowNode
 * @param {dojo.dnd.Source} source The source container the nodes were dragged from, perhaps another Tree or a plain dojo.dnd.Source
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.itemCreator=function(nodes, target, source){};
/**
 * <b>Summary:</b><blockquote>
 *	 check whether a dom node is the expandoNode for a particular TreeNode widget<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} widget 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.isExpandoNode=function(node, widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function to get the tooltip for a tree node (given the item)<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @returns {String} -
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.getTooltip=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function to return CSS styles to display row<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @param {Boolean} opened 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.getRowStyle=function(item, opened){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function to return CSS class name to display row<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @param {Boolean} opened 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.getRowClass=function(item, opened){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns all tree nodes that refer to an item<br>
 * </blockquote>
 * @param {Item} item or id
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.getNodesByItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function to return CSS styles to display label<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @param {Boolean} opened 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.getLabelStyle=function(item, opened){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function to return CSS class name to display label<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @param {Boolean} opened 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.getLabelClass=function(item, opened){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function to get the label for a tree node (given the item)<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @returns {String} -
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.   This should be specified on the model itself.<br>
 *	 <br>
 *	 Overridable function that return array of child items of given parent item,<br>
 *	 or if parentItem==null then return top items in tree<br>
 * </blockquote>
 * @param {mixed} parentItem 
 * @param {mixed} onComplete 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.getItemChildren=function(parentItem, onComplete){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function to return CSS styles to display icon<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @param {Boolean} opened 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.getIconStyle=function(item, opened){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function to return CSS class name to display icon<br>
 * </blockquote>
 * @param {dojo.data.Item} item 
 * @param {Boolean} opened 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.getIconClass=function(item, opened){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus on the specified node (which must be visible)<br>
 * </blockquote>
 * @param {_tree.Node} node 
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.focusNode=function(node){};
/**
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.destroyRecursive=function(){};
/**
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to be overridden if one wants to check for the ability to drop at the node/item level<br>
 * </blockquote>
 * In the base case, this is called to check if target can become a child of source.<br>
 * When betweenThreshold is set, position="before" or "after" means that we<br>
 * are asking if the source node can be dropped before/after the target node.
 * @param {DOMNode} target The dijitTreeRoot DOM node inside of the TreeNode that we are dropping on to
 * Use dijit.getEnclosingWidget(target) to get the TreeNode.
 * @param {dijit.tree.dndSource} source The (set of) nodes we are dropping
 * @param {String} position &quot;over&quot;, &quot;before&quot;, or &quot;after&quot;
 * @returns {Boolean} -
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.checkItemAcceptance=function(target, source, position){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks if the Tree itself can accept nodes from this source<br>
 * </blockquote>
 * @param {dijit.tree._dndSource} source The source which provides items
 * @param {DOMNode[]} nodes Array of DOM nodes corresponding to nodes being dropped, dijitTreeRow nodes if
 * source is a dijit.Tree.
 * @returns {Boolean} -
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype.checkAcceptance=function(source, nodes){};
/**
 * <b>Summary:</b><blockquote>
 *	 User specified a store&amp;amp;query rather than model, so create model from store/query<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._store2model=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Query or set expanded state for an node<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} expanded 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._state=function(node, expanded){};
/**
 * @param {mixed} textDir 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._setTextDirAttr=function(textDir){};
/**
 * @param {mixed} nodes 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._setSelectedNodesAttr=function(nodes){};
/**
 * @param {mixed} node 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._setSelectedNodeAttr=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select tree nodes related to passed items.<br>
 *	 WARNING: if model use multi-parented items or desired tree node isn't already loaded<br>
 *	 behavior is undefined. Use set('paths', ...) instead.<br>
 * </blockquote>
 * @param {Items} items or ids
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._setSelectedItemsAttr=function(items){};
/**
 * @param {Item} item or id
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._setSelectedItemAttr=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select the tree nodes identified by passed paths.<br>
 * </blockquote>
 * @param {Item[][]} paths Array of arrays of items or item id's
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._setPathsAttr=function(paths){};
/**
 * <b>Summary:</b><blockquote>
 *	 Singular variant of _setPathsAttr<br>
 * </blockquote>
 * @param {Item[]} path || String[]
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._setPathAttr=function(path){};
/**
 * <b>Summary:</b><blockquote>
 *	 Publish a message for this widget/topic<br>
 * </blockquote>
 * @param {String} topicName 
 * @param {Object} message 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._publish=function(topicName, message){};
/**
 * <b>Summary:</b><blockquote>
 *	 Up arrow pressed; move to previous visible node<br>
 * </blockquote>
 * @param {Object} message 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onUpArrow=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 Right arrow pressed; go to child node<br>
 * </blockquote>
 * @param {Object} message 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onRightArrow=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when mouse leaves a node (onmouseleave event),<br>
 *	 this is monitored by the DND code<br>
 * </blockquote>
 * @param {dijit._Widget} node 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onNodeMouseLeave=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when mouse is over a node (onmouseenter event),<br>
 *	 this is monitored by the DND code<br>
 * </blockquote>
 * @param {dijit._Widget} node 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onNodeMouseEnter=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when a TreeNode gets focus, either by user clicking<br>
 *	 it, or programatically by arrow key handling code.<br>
 * </blockquote>
 * It marks that the current node is the selected one, and the previously<br>
 * selected node no longer is.
 * @param {dijit._Widget} node 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onNodeFocus=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when user presses a prinatable key; search for node starting with recently typed letters.<br>
 * </blockquote>
 * @param {Object} message Like { node: TreeNode, key: 'a' } where key is the key the user pressed.
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onLetterKeyNav=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 Left arrow pressed.<br>
 *	 If not collapsed, collapse, else move to parent.<br>
 * </blockquote>
 * @param {Object} message 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onLeftArrow=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 Translates keypress events into commands for the controller<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onKeyPress=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Processes notification of a deletion of an item<br>
 * </blockquote>
 * @param {Item} item 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onItemDelete=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Processes notification of a change to an item's children<br>
 * </blockquote>
 * @param {dojo.data.Item} parent 
 * @param {dojo.data.Item[]} newChildrenList 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onItemChildrenChange=function(parent, newChildrenList){};
/**
 * <b>Summary:</b><blockquote>
 *	 Processes notification of a change to an item's scalar values like label<br>
 * </blockquote>
 * @param {Item} item 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onItemChange=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Home key pressed; get first visible node, and set focus there<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onHomeKey=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 User clicked the +/- icon; expand or collapse my children.<br>
 * </blockquote>
 * @param {Object} message 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onExpandoClick=function(message){};
/**
 * @param {Object} message 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onEnterKey=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 End key pressed; go to last visible node.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onEndKey=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 down arrow pressed; get next visible node, set focus there<br>
 * </blockquote>
 * @param {Object} message 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onDownArrow=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 Translates double-click events into commands for the controller to process<br>
 * </blockquote>
 * @param {TreeNode} nodeWidget 
 * @param {Event} e 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onDblClick=function(nodeWidget, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Translates click events into commands for the controller to process<br>
 * </blockquote>
 * @param {TreeNode} nodeWidget 
 * @param {Event} e 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._onClick=function(nodeWidget, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initial load of the tree.<br>
 *	 Load root node (possibly hidden) and it's children.<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._load=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load in which nodes should be opened automatically<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._initState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get first visible node<br>
 * </blockquote>
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._getRootOrFirstNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get next visible node<br>
 * </blockquote>
 * @param {mixed} node 
 * @private
 * @returns {_TreeNode} -
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._getNextNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the user has requested to expand the node<br>
 * </blockquote>
 * @param {_TreeNode} node 
 * @param {Boolean} [recursive] Internal flag used when _expandNode() calls itself, don't set.
 * @private
 * 
 * @returns {dojo.Deferred} -that were previously opened too
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._expandNode=function(node, recursive){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a TreeNode<br>
 * </blockquote>
 * Developers can override this method to define their own TreeNode class;<br>
 * However it will probably be removed in a future release in favor of a way<br>
 * of just specifying a widget for the label, rather than one that contains<br>
 * the children too.
 * @param {Object} args 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._createTreeNode=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the user has requested to collapse the node<br>
 * </blockquote>
 * @param {_TreeNode} node 
 * @private
 * @memberOf dijit.Tree
*/
dijit.Tree.prototype._collapseNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Start a timed, repeating callback sequence.<br>
 *	 If already started, the function call is ignored.<br>
 *	 This method is not normally called by the user but can be<br>
 *	 when the normal listener code is insufficient.<br>
 * </blockquote>
 * @param {Event} evt key or mouse event object
 * @param {Object} _this pointer to the user's widget space.
 * @param {DOMNode} node the DOM node object passed in
 * @param {Function} callback function to call until the sequence is stopped called with 3 parameters:
 * count:<br>
 * integer representing number of repeated calls (0..n) with -1 indicating the iteration has stopped
 * @param {Object} obj user space object used to uniquely identify each typematic sequence
 * subsequentDelay (optional):<br>
 * if &gt; 1, the number of milliseconds until the 3-&gt;n events occur<br>
 * or else the fractional time multiplier for the next event's delay, default=0.9<br>
 * initialDelay (optional):<br>
 * the number of milliseconds until the 2nd event occurs, default=500ms<br>
 * minDelay (optional):<br>
 * the maximum delay in milliseconds for event to fire, default=10ms
 * @param {Number} subsequentDelay 
 * @param {Number} initialDelay 
 * @param {Number} [minDelay] 
*/
dijit.typematic.trigger=function(evt, _this, node, callback, obj, subsequentDelay, initialDelay, minDelay){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stop an ongoing timed, repeating callback sequence.<br>
 * </blockquote>
*/
dijit.typematic.stop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Start listening for a typematic mouse click.<br>
 *	 See the trigger method for other parameters.<br>
 * </blockquote>
 * @param {DOMNode} node 
 * @param {Object} _this 
 * @param {Function} callback 
 * @param {Number} subsequentDelay 
 * @param {Number} initialDelay 
 * @param {Number} [minDelay] 
*/
dijit.typematic.addMouseListener=function(node, _this, callback, subsequentDelay, initialDelay, minDelay){};
/**
 * <b>Summary:</b><blockquote>
 *	 Start listening for a specific typematic key and mouseclick.<br>
 *	 This is a thin wrapper to addKeyListener and addMouseListener.<br>
 *	 See the addMouseListener and addKeyListener methods for other parameters.<br>
 * </blockquote>
 * @param {Node} mouseNode the DOM node object to listen on for mouse events.
 * @param {Node} keyNode the DOM node object to listen on for key events.
 * @param {Object} keyObject 
 * @param {Object} _this 
 * @param {Function} callback 
 * @param {Number} subsequentDelay 
 * @param {Number} initialDelay 
 * @param {Number} [minDelay] 
*/
dijit.typematic.addListener=function(mouseNode, keyNode, keyObject, _this, callback, subsequentDelay, initialDelay, minDelay){};
/**
 * <b>Summary:</b><blockquote>
 *	 Start listening for a specific typematic key.<br>
 *	 See also the trigger method for other parameters.<br>
 * </blockquote>
 * @param {DOMNode} node 
 * @param {Object} keyObject an object defining the key to listen for:
 * charOrCode:<br>
 * the printable character (string) or keyCode (number) to listen for.<br>
 * keyCode:<br>
 * (deprecated - use charOrCode) the keyCode (number) to listen for (implies charCode = 0).<br>
 * charCode:<br>
 * (deprecated - use charOrCode) the charCode (number) to listen for.<br>
 * ctrlKey:<br>
 * desired ctrl key state to initiate the callback sequence:<br>
 * - pressed (true)<br>
 * - released (false)<br>
 * - either (unspecified)<br>
 * altKey:<br>
 * same as ctrlKey but for the alt key<br>
 * shiftKey:<br>
 * same as ctrlKey but for the shift key
 * @param {Object} _this 
 * @param {Function} callback 
 * @param {Number} subsequentDelay 
 * @param {Number} initialDelay 
 * @param {Number} [minDelay] 
*/
dijit.typematic.addKeyListener=function(node, keyObject, _this, callback, subsequentDelay, initialDelay, minDelay){};
/**
 * @private
*/
dijit.typematic._fireEventAndReload=function(){};
/**
 * @class
 * @private
 * @returns {dijit.typematic._fireEventAndReload} new instance
*/
dijit.typematic._fireEventAndReload=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Start a timed, repeating callback sequence.<br>
 *	 If already started, the function call is ignored.<br>
 *	 This method is not normally called by the user but can be<br>
 *	 when the normal listener code is insufficient.<br>
 * </blockquote>
 * @class
 * @returns {dijit.typematic.trigger} new instance
*/
dijit.typematic.trigger=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stop an ongoing timed, repeating callback sequence.<br>
 * </blockquote>
 * @class
 * @returns {dijit.typematic.stop} new instance
*/
dijit.typematic.stop=function(){};
/**
 * @namespace
*/
dojo={};
/**
 * <b>Summary:</b><blockquote>
 *	 Sends an HTTP PUT request to the server. In addtion to the properties<br>
 *	 listed for the dojo.__XhrArgs type, the following property is allowed:<br>
 *	 putData:<br>
 *	 String. Send raw data in the body of the PUT request.<br>
 * </blockquote>
 * @param {dojo.__XhrArgs} args 
 * @returns {dojo.Deferred} -
*/
dojo.xhrPut=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sends an HTTP POST request to the server. In addtion to the properties<br>
 *	 listed for the dojo.__XhrArgs type, the following property is allowed:<br>
 *	 postData:<br>
 *	 String. Send raw data in the body of the POST request.<br>
 * </blockquote>
 * @param {dojo.__XhrArgs} args 
 * @returns {dojo.Deferred} -
*/
dojo.xhrPost=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sends an HTTP GET request to the server.<br>
 * </blockquote>
 * @param {dojo.__XhrArgs} args 
 * @returns {dojo.Deferred} -
*/
dojo.xhrGet=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sends an HTTP DELETE request to the server.<br>
 * </blockquote>
 * @param {dojo.__XhrArgs} args 
 * @returns {dojo.Deferred} -
*/
dojo.xhrDelete=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sends an HTTP request with the given method.<br>
 * </blockquote>
 * Sends an HTTP request with the given method.<br>
 * See also dojo.xhrGet(), xhrPost(), xhrPut() and dojo.xhrDelete() for shortcuts<br>
 * for those HTTP methods. There are also methods for "raw" PUT and POST methods<br>
 * via dojo.rawXhrPut() and dojo.rawXhrPost() respectively.
 * @param {String} method HTTP method to be used, such as GET, POST, PUT, DELETE. Should be uppercase.
 * @param {dojo.__XhrArgs} args 
 * @param {Boolean} [hasBody] If the request has an HTTP body, then pass true for hasBody.
 * @returns {dojo.Deferred} -
*/
dojo.xhr=function(method, args, hasBody){};
/**
 * <b>Summary:</b><blockquote>
 *	 Invoke callback with globalObject as dojo.global and<br>
 *	 globalObject.document as dojo.doc.<br>
 * </blockquote>
 * Invoke callback with globalObject as dojo.global and<br>
 * globalObject.document as dojo.doc. If provided, globalObject<br>
 * will be executed in the context of object thisObject<br>
 * When callback() returns or throws an error, the dojo.global<br>
 * and dojo.doc will be restored to its previous state.
 * @param {Object} globalObject 
 * @param {Function} callback 
 * @param {Object} [thisObject] 
 * @param {Array} [cbArguments] 
*/
dojo.withGlobal=function(globalObject, callback, thisObject, cbArguments){};
/**
 * <b>Summary:</b><blockquote>
 *	 Invoke callback with documentObject as dojo.doc.<br>
 * </blockquote>
 * Invoke callback with documentObject as dojo.doc. If provided,<br>
 * callback will be executed in the context of object thisObject<br>
 * When callback() returns or throws an error, the dojo.doc will<br>
 * be restored to its previous state.
 * @param {DocumentElement} documentObject 
 * @param {Function} callback 
 * @param {Object} [thisObject] 
 * @param {Array} [cbArguments] 
*/
dojo.withDoc=function(documentObject, callback, thisObject, cbArguments){};
/**
 * <b>Summary:</b><blockquote>
 *	 signal fired by impending window destruction. You may use<br>
 *	 dojo.addOnWindowUnload() to register a listener for this<br>
 *	 event. NOTE: if you wish to dojo.connect() to this method<br>
 *	 to perform page/application cleanup, be aware that this<br>
 *	 event WILL NOT fire if no handler has been registered with<br>
 *	 dojo.addOnWindowUnload. This behavior started in Dojo 1.3.<br>
 *	 Previous versions always triggered dojo.windowUnloaded. See<br>
 *	 dojo.addOnWindowUnload for more info.<br>
 * </blockquote>
*/
dojo.windowUnloaded=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This provides normalization between normal synchronous values and<br>
 *	 asynchronous promises, so you can interact with them in a common way<br>
 * </blockquote>
 * @param {mixed} promiseOrValue 
 * @param {Function} [callback] 
 * @param {Function} [errback] 
 * @param {Function} [progressHandler] 
 * 
 * @returns {Promise} -when parameter "promiseOrValue" is promise.
 * Returns the execution result of callback when parameter "promiseOrValue" is value.
 * @example
 * 	function printFirstAndLast(items){
 * 		dojo.when(findFirst(items), console.log);
 * 		dojo.when(findLast(items), console.log);
 * 	}
 * 	function findFirst(items){
 * 		return dojo.when(items, function(items){
 * 			return items[0];
 * 		});
 * 	}
 * 	function findLast(items){
 * 		return dojo.when(items, function(items){
 * 			return items[items.length - 1];
 * 		});
 * 	}
 * And now all three of his functions can be used sync or async.
 * 	printFirstAndLast([1,2,3,4]) will work just as well as
 * 	printFirstAndLast(dojo.xhrGet(...));
*/
dojo.when=function(promiseOrValue, callback, errback, progressHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 Trims whitespace from both sides of the string<br>
 * </blockquote>
 * This version of trim() was selected for inclusion into the base due<br>
 * to its compact size and relatively good performance<br>
 * (see [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript)<br>
 * Uses String.prototype.trim instead, if available.<br>
 * The fastest but longest version of this function is located at<br>
 * dojo.string.trim()
 * @see reference <a href="http://blog.stevenlevithan.com/archives/faster-trim-javascript)">http://blog.stevenlevithan.com/archives/faster-trim-javascript)</a>
 * @param {String} str String to be trimmed
*/
dojo.trim=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a class to node if not present, or removes if present.<br>
 *	 Pass a boolean condition if you want to explicitly add or remove.<br>
 *	 Returns the condition that was specified directly or indirectly.<br>
 * </blockquote>
 * @param {String|DOMNode} node String ID or DomNode reference to toggle a class string
 * @param {String|Array} classStr A String class name to toggle, or several space-separated class names,
 * or an array of class names.
 * @param {If} condition passed, true means to add the class, false means to remove.
 * Otherwise dojo.hasClass(node, classStr) is used to detect the class presence.
 * @example
 * 	dojo.toggleClass("someNode", "hovered");
 * @example
 * Forcefully add a class
 * 	dojo.toggleClass("someNode", "hovered", true);
 * @example
 * Available in `dojo.NodeList()` for multiple toggles
 * 	dojo.query(".toggleMe").toggleClass("toggleMe");
*/
dojo.toggleClass=function(node, classStr, condition){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts style value to pixels on IE or return a numeric value.<br>
 * </blockquote>
 * @param {DOMNode} node 
 * @param {String} value 
*/
dojo.toPixelValue=function(node, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a [JSON](http://json.org) serialization of an object.<br>
 * </blockquote>
 * Returns a [JSON](http://json.org) serialization of an object.<br>
 * Note that this doesn't check for infinite recursion, so don't do that!<br>
 * It is recommend that you use dojo/json's stringify function for an lighter<br>
 * and faster implementation that matches the native JSON API and uses the<br>
 * native JSON serializer when available.
 * @see reference <a href="http://json.org">http://json.org</a>
 * @see reference <a href="http://json.org">http://json.org</a>
 * @param {Object} it an object to be serialized. Objects may define their own
 * serialization via a special &quot;__json__&quot; or &quot;json&quot; function<br>
 * property. If a specialized serializer has been defined, it will<br>
 * be used as a fallback.<br>
 * Note that in 1.6, toJson would serialize undefined, but this no longer supported<br>
 * since it is not supported by native JSON serializer.
 * @param {Boolean} [prettyPrint] if true, we indent objects and arrays to make the output prettier.
 * The variable `dojo.toJsonIndentStr` is used as the indent string --<br>
 * to use something other than the default (tab), change that variable<br>
 * before calling dojo.toJson().<br>
 * Note that if native JSON support is available, it will be used for serialization,<br>
 * and native implementations vary on the exact spacing used in pretty printing.
 * @example
 * simple serialization of a trivial object
 * 	var jsonStr = dojo.toJson({ howdy: "stranger!", isStrange: true });
 * 	doh.is('{"howdy":"stranger!","isStrange":true}', jsonStr);
 * @example
 * a custom serializer for an objects of a particular class:
 * 	dojo.declare("Furby", null, {
 * 		furbies: "are strange",
 * 		furbyCount: 10,
 * 		__json__: function(){
 * 		},
 * 	});
*/
dojo.toJson=function(it, prettyPrint){};
/**
 * <b>Summary:</b><blockquote>
 *	 instantiates an HTML fragment returning the corresponding DOM.<br>
 * </blockquote>
 * @param {String} frag the HTML fragment
 * @param {DocumentNode} [doc] optional document to use when creating DOM nodes, defaults to
 * dojo.doc if not specified.
 * @example
 * Create a table row:
 * 	var tr = dojo.toDom("&lt;tr&gt;&lt;td&gt;First!&lt;/td&gt;&lt;/tr&gt;");
*/
dojo.toDom=function(frag, doc){};
/**
 * <b>Summary:</b><blockquote>
 *	 Accesses styles on a node. If 2 arguments are<br>
 *	 passed, acts as a getter. If 3 arguments are passed, acts<br>
 *	 as a setter.<br>
 * </blockquote>
 * Getting the style value uses the computed style for the node, so the value<br>
 * will be a calculated value, not just the immediate node.style value.<br>
 * Also when getting values, use specific style names,<br>
 * like "borderBottomWidth" instead of "border" since compound values like<br>
 * "border" are not necessarily reflected as expected.<br>
 * If you want to get node dimensions, use `dojo.marginBox()`,<br>
 * `dojo.contentBox()` or `dojo.position()`.
 * @param {DOMNode|String} node id or reference to node to get/set style for
 * @param {String|Object} [name] the style property to set in DOM-accessor format
 * (&quot;borderWidth&quot;, not &quot;border-width&quot;) or an object with key/value<br>
 * pairs suitable for setting each property.
 * @param {String} [value] If passed, sets value on the node for style, handling
 * cross-browser concerns.  When setting a pixel value,<br>
 * be sure to include &quot;px&quot; in the value. For instance, top: &quot;200px&quot;.<br>
 * Otherwise, in some cases, some browsers will not apply the style.
 * @example
 * Passing only an ID or node returns the computed style object of
 * the node:
 * 	dojo.style("thinger");
 * @example
 * Passing a node and a style property returns the current
 * normalized, computed value for that property:
 * 	dojo.style("thinger", "opacity"); // 1 by default
 * @example
 * Passing a node, a style property, and a value changes the
 * current display of the node and returns the new computed value
 * 	dojo.style("thinger", "opacity", 0.5); // == 0.5
 * @example
 * Passing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:
 * 	dojo.style("thinger", {
 * 		"opacity": 0.5,
 * 		"border": "3px solid black",
 * 		"height": "300px"
 * 	});
 * @example
 * When the CSS style property is hyphenated, the JavaScript property is camelCased.
 * font-size becomes fontSize, and so on.
 * 	dojo.style("thinger",{
 * 		fontSize:"14pt",
 * 		letterSpacing:"1.2em"
 * 	});
 * @example
 * dojo.NodeList implements .style() using the same syntax, omitting the "node" parameter, calling
 * dojo.style() on every element of the list. See: `dojo.query()` and `dojo.NodeList()`
 * 	dojo.query(".someClassName").style("visibility","hidden");
 * 	// or
 * 	dojo.query("#baz &gt; div").style({
 * 		opacity:0.75,
 * 		fontSize:"13pt"
 * 	});
*/
dojo.style=function(node, name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 prevents propagation and clobbers the default action of the<br>
 *	 passed event<br>
 * </blockquote>
 * @param {Event} evt The event object. If omitted, window.event is used on IE.
*/
dojo.stopEvent=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines whether or not any item in arr satisfies the<br>
 *	 condition implemented by callback.<br>
 * </blockquote>
 * This function corresponds to the JavaScript 1.6 Array.some() method, with one difference: when<br>
 * run over sparse arrays, this implementation passes the "holes" in the sparse array to<br>
 * the callback function with a value of undefined. JavaScript 1.6's some skips the holes in the sparse array.<br>
 * For more details, see:<br>
 * https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some
 * @see reference <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some</a>
 * @param {Array|String} arr the array to iterate over. If a string, operates on individual characters.
 * @param {Function|String} callback a function is invoked with three arguments: item, index,
 * and array and returns true if the condition is met.
 * @param {Object} [thisObject] may be used to scope the call to callback
 * @example
 *  // is true
 *  dojo.some([1, 2, 3, 4], function(item){ return item&gt;1; });
 * @example
 *  // is false
 *  dojo.some([1, 2, 3, 4], function(item){ return item&lt;1; });
*/
dojo.some=function(arr, callback, thisObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets styles on a node.<br>
 * </blockquote>
 * @param {DOMNode|String} node id or reference to node to set style for
 * @param {String|Object} name the style property to set in DOM-accessor format
 * (&quot;borderWidth&quot;, not &quot;border-width&quot;) or an object with key/value<br>
 * pairs suitable for setting each property.
 * @param {String} [value] If passed, sets value on the node for style, handling
 * cross-browser concerns.  When setting a pixel value,<br>
 * be sure to include &quot;px&quot; in the value. For instance, top: &quot;200px&quot;.<br>
 * Otherwise, in some cases, some browsers will not apply the style.
 * @example
 * Passing a node, a style property, and a value changes the
 * current display of the node and returns the new computed value
 * 	dojo.setStyle("thinger", "opacity", 0.5); // == 0.5
 * @example
 * Passing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:
 * 	dojo.setStyle("thinger", {
 * 		"opacity": 0.5,
 * 		"border": "3px solid black",
 * 		"height": "300px"
 * 	});
 * @example
 * When the CSS style property is hyphenated, the JavaScript property is camelCased.
 * font-size becomes fontSize, and so on.
 * 	dojo.setStyle("thinger",{
 * 		fontSize:"14pt",
 * 		letterSpacing:"1.2em"
 * 	});
 * @example
 * dojo.NodeList implements .style() using the same syntax, omitting the "node" parameter, calling
 * dojo.style() on every element of the list. See: `dojo.query()` and `dojo.NodeList()`
 * 	dojo.query(".someClassName").style("visibility","hidden");
 * 	// or
 * 	dojo.query("#baz &gt; div").style({
 * 		opacity:0.75,
 * 		fontSize:"13pt"
 * 	});
*/
dojo.setStyle=function(node, name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set a property from a dot-separated string, such as &amp;quot;A.B.C&amp;quot;<br>
 * </blockquote>
 * Useful for longer api chains where you have to test each object in<br>
 * the chain, or when you have an object reference in string format.<br>
 * Objects are created as needed along `path`. Returns the passed<br>
 * value if setting is successful or `undefined` if not.
 * @param {String} name Path to a property, in the form &quot;A.B.C&quot;.
 * @param {anything} value value or object to place at location given by name
 * @param {Object} [context] Optional. Object to use as root of path. Defaults to
 * `dojo.global`.
 * @example
 * set the value of `foo.bar.baz`, regardless of whether
 * intermediate objects already exist:
 *  lang.setObject("foo.bar.baz", value);
 * @example
 * without `lang.setObject`, we often see code like this:
 *  // ensure that intermediate objects are available
 *  if(!obj["parent"]){ obj.parent = {}; }
 *  if(!obj.parent["child"]){ obj.parent.child = {}; }
 *  // now we can safely set the property
 *  obj.parent.child.prop = "some value";
 * whereas with `lang.setObject`, we can shorten that to:
 *  lang.setObject("parent.child.prop", "some value", obj);
*/
dojo.setObject=function(name, value, context){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the size of the node's margin box and placement<br>
 *	 (left/top), irrespective of box model. Think of it as a<br>
 *	 passthrough to setBox that handles box-model vagaries for<br>
 *	 you.<br>
 * </blockquote>
 * @param {DOMNode} node 
 * @param {Object} box hash with optional &quot;l&quot;, &quot;t&quot;, &quot;w&quot;, and &quot;h&quot; properties for &quot;left&quot;, &quot;right&quot;, &quot;width&quot;, and &quot;height&quot;
 * respectively. All specified properties should have numeric values in whole pixels.
 * @param {Object} [computedStyle] This parameter accepts computed styles object.
 * If this parameter is omitted, the functions will call<br>
 * dojo.getComputedStyle to get one. It is a better way, calling<br>
 * dojo.computedStyle once, and then pass the reference to this<br>
 * computedStyle parameter. Wherever possible, reuse the returned<br>
 * object of dojo.getComputedStyle.<br>
*/
dojo.setMarginBox=function(node, box, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 changes the behavior of many core Dojo functions that deal with<br>
 *	 namespace and DOM lookup, changing them to work in a new global<br>
 *	 context (e.g., an iframe). The varibles dojo.global and dojo.doc<br>
 *	 are modified as a result of calling this function and the result of<br>
 *	 `dojo.body()` likewise differs.<br>
 * </blockquote>
 * @param {Object} globalObject 
 * @param {DocumentElement} globalDocument 
*/
dojo.setContext=function(globalObject, globalDocument){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the size of the node's contents, irrespective of margins,<br>
 *	 padding, or borders.<br>
 * </blockquote>
 * @param {DOMNode} node 
 * @param {Object} box hash with optional &quot;w&quot;, and &quot;h&quot; properties for &quot;width&quot;, and &quot;height&quot;
 * respectively. All specified properties should have numeric values in whole pixels.
 * @param {Object} [computedStyle] This parameter accepts computed styles object.
 * If this parameter is omitted, the functions will call<br>
 * dojo.getComputedStyle to get one. It is a better way, calling<br>
 * dojo.computedStyle once, and then pass the reference to this<br>
 * computedStyle parameter. Wherever possible, reuse the returned<br>
 * object of dojo.getComputedStyle.<br>
*/
dojo.setContentSize=function(node, box, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets an attribute on an HTML element.<br>
 * </blockquote>
 * Handles normalized setting of attributes on DOM Nodes.<br>
 * <br>
 * When passing functions as values, note that they will not be<br>
 * directly assigned to slots on the node, but rather the default<br>
 * behavior will be removed and the new behavior will be added<br>
 * using `dojo.connect()`, meaning that event handler properties<br>
 * will be normalized and that some caveats with regards to<br>
 * non-standard behaviors for onsubmit apply. Namely that you<br>
 * should cancel form submission using `dojo.stopEvent()` on the<br>
 * passed event object instead of returning a boolean value from<br>
 * the handler itself.
 * @param {DOMNode|String} node id or reference to the element to set the attribute on
 * @param {String|Object} name the name of the attribute to set, or a hash of key-value pairs to set.
 * @param {String} [value] the value to set for the attribute, if the name is a string.
 * @example
 * 	// use attr() to set the tab index
 * 	dojo.setAttr("nodeId", "tabIndex", 3);
 * @example
 * Set multiple values at once, including event handlers:
 * 	dojo.setAttr("formId", {
 * 		"foo": "bar",
 * 		"tabIndex": -1,
 * 		"method": "POST",
 * 		"onsubmit": function(e){
 * 			// stop submitting the form. Note that the IE behavior
 * 			// of returning true or false will have no effect here
 * 			// since our handler is connect()ed to the built-in
 * 			// onsubmit behavior and so we need to use
 * 			// dojo.stopEvent() to ensure that the submission
 * 			// doesn't proceed.
 * 			dojo.stopEvent(e);
 * 
 * 			// submit the form with Ajax
 * 			dojo.xhrPost({ form: "formId" });
 * 		}
 * 	});
 * @example
 * Style is s special case: Only set with an object hash of styles
 * 	dojo.setAttr("someNode",{
 * 		id:"bar",
 * 		style:{
 * 			width:"200px", height:"100px", color:"#000"
 * 		}
 * 	});
 * @example
 * Again, only set style as an object hash of styles:
 * 	var obj = { color:"#fff", backgroundColor:"#000" };
 * 	dojo.setAttr("someNode", "style", obj);
 * 
 * 	// though shorter to use `dojo.style()` in this case:
 * 	dojo.setStyle("someNode", obj);
*/
dojo.setAttr=function(node, name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mix in properties skipping a constructor and decorating functions<br>
 *	 like it is done by dojo.declare.<br>
 * </blockquote>
 * This function is used to mix in properties like lang.mixin does,<br>
 * but it skips a constructor property and decorates functions like<br>
 * dojo.declare does.<br>
 * <br>
 * It is meant to be used with classes and objects produced with<br>
 * dojo.declare. Functions mixed in with dojo.safeMixin can use<br>
 * this.inherited() like normal methods.<br>
 * <br>
 * This function is used to implement extend() method of a constructor<br>
 * produced with dojo.declare().
 * @param {Object} target Target object to accept new properties.
 * @param {Object} source Source object for new properties.
 * @example
 * 	var A = dojo.declare(null, {
 * 		m1: function(){
 * 			console.log("A.m1");
 * 		},
 * 		m2: function(){
 * 			console.log("A.m2");
 * 		}
 * 	});
 * 	var B = dojo.declare(A, {
 * 		m1: function(){
 * 			this.inherited(arguments);
 * 			console.log("B.m1");
 * 		}
 * 	});
 * 	B.extend({
 * 		m2: function(){
 * 			this.inherited(arguments);
 * 			console.log("B.m2");
 * 		}
 * 	});
 * 	var x = new B();
 * 	dojo.safeMixin(x, {
 * 		m1: function(){
 * 			this.inherited(arguments);
 * 			console.log("X.m1");
 * 		},
 * 		m2: function(){
 * 			this.inherited(arguments);
 * 			console.log("X.m2");
 * 		}
 * 	});
 * 	x.m2();
 * 	// prints:
 * 	// A.m1
 * 	// B.m1
 * 	// X.m1
*/
dojo.safeMixin=function(target, source){};
/**
 * @param {String} moduleName 
 * @param {String} bundleName 
 * @param {String} [locale] 
*/
dojo.requireLocalization=function(moduleName, bundleName, locale){};
/**
*/
dojo.requireIf=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If the condition is true then call `dojo.require()` for the specified<br>
 *	 resource<br>
 * </blockquote>
 * @param {Boolean} condition 
 * @param {String} moduleName 
 * @param {Boolean} [omitModuleCheck] 
 * @example
 * 	dojo.requireIf(dojo.isBrowser, "my.special.Module");
*/
dojo.requireAfterIf=function(condition, moduleName, omitModuleCheck){};
/**
 * <b>Summary:</b><blockquote>
 *	 loads a Javascript module from the appropriate URI<br>
 * </blockquote>
 * Modules are loaded via dojo.require by using one of two loaders: the normal loader<br>
 * and the xdomain loader. The xdomain loader is used when dojo was built with a<br>
 * custom build that specified loader=xdomain and the module lives on a modulePath<br>
 * that is a whole URL, with protocol and a domain. The versions of Dojo that are on<br>
 * the Google and AOL CDNs use the xdomain loader.<br>
 * <br>
 * If the module is loaded via the xdomain loader, it is an asynchronous load, since<br>
 * the module is added via a dynamically created script tag. This<br>
 * means that dojo.require() can return before the module has loaded. However, this<br>
 * should only happen in the case where you do dojo.require calls in the top-level<br>
 * HTML page, or if you purposely avoid the loader checking for dojo.require<br>
 * dependencies in your module by using a syntax like dojo["require"] to load the module.<br>
 * <br>
 * Sometimes it is useful to not have the loader detect the dojo.require calls in the<br>
 * module so that you can dynamically load the modules as a result of an action on the<br>
 * page, instead of right at module load time.<br>
 * <br>
 * Also, for script blocks in an HTML page, the loader does not pre-process them, so<br>
 * it does not know to download the modules before the dojo.require calls occur.<br>
 * <br>
 * So, in those two cases, when you want on-the-fly module loading or for script blocks<br>
 * in the HTML page, special care must be taken if the dojo.required code is loaded<br>
 * asynchronously. To make sure you can execute code that depends on the dojo.required<br>
 * modules, be sure to add the code that depends on the modules in a dojo.addOnLoad()<br>
 * callback. dojo.addOnLoad waits for all outstanding modules to finish loading before<br>
 * executing.<br>
 * <br>
 * This type of syntax works with both xdomain and normal loaders, so it is good<br>
 * practice to always use this idiom for on-the-fly code loading and in HTML script<br>
 * blocks. If at some point you change loaders and where the code is loaded from,<br>
 * it will all still work.<br>
 * <br>
 * More on how dojo.require<br>
 * `dojo.require("A.B")` first checks to see if symbol A.B is<br>
 * defined. If it is, it is simply returned (nothing to do).<br>
 * <br>
 * If it is not defined, it will look for `A/B.js` in the script root<br>
 * directory.<br>
 * <br>
 * `dojo.require` throws an exception if it cannot find a file<br>
 * to load, or if the symbol `A.B` is not defined after loading.<br>
 * <br>
 * It returns the object `A.B`, but note the caveats above about on-the-fly loading and<br>
 * HTML script blocks when the xdomain loader is loading a module.<br>
 * <br>
 * `dojo.require()` does nothing about importing symbols into<br>
 * the current namespace.  It is presumed that the caller will<br>
 * take care of that.
 * @param {String} moduleName module name to load, using periods for separators,
 * e.g. &quot;dojo.date.locale&quot;.  Module paths are de-referenced by dojo's<br>
 * internal mapping of locations to names and are disambiguated by<br>
 * longest prefix. See `dojo.registerModulePath()` for details on<br>
 * registering new modules.
 * @param {Boolean} [omitModuleCheck] if `true`, omitModuleCheck skips the step of ensuring that the
 * loaded file actually defines the symbol it is referenced by.<br>
 * For example if it called as `dojo.require(&quot;a.b.c&quot;)` and the<br>
 * file located at `a/b/c.js` does not define an object `a.b.c`,<br>
 * and exception will be throws whereas no exception is raised<br>
 * when called as `dojo.require(&quot;a.b.c&quot;, true)`
 * @example
 * To use dojo.require in conjunction with dojo.ready:
 * 
 * 	dojo.require("foo");
 * 	dojo.require("bar");
 * 	dojo.addOnLoad(function(){
 * 		//you can now safely do something with foo and bar
 * 	});
 * @example
 * For example, to import all symbols into a local block, you might write:
 * 
 * 	with (dojo.require("A.B")) {
 * 		...
 * 	}
 * 
 * And to import just the leaf symbol to a local variable:
 * 
 * 	var B = dojo.require("A.B");
 * 	...
*/
dojo.require=function(moduleName, omitModuleCheck){};
/**
 * <b>Summary:</b><blockquote>
 *	 Replaces one or more classes on a node if not present.<br>
 *	 Operates more quickly than calling dojo.removeClass and dojo.addClass<br>
 * </blockquote>
 * @param {String|DOMNode} node String ID or DomNode reference to remove the class from.
 * @param {String|Array} addClassStr A String class name to add, or several space-separated class names,
 * or an array of class names.
 * @param {String|Array} [removeClassStr] A String class name to remove, or several space-separated class names,
 * or an array of class names.
 * @example
 * 	dojo.replaceClass("someNode", "add1 add2", "remove1 remove2");
 * @example
 * Replace all classes with addMe
 * 	dojo.replaceClass("someNode", "addMe");
 * @example
 * Available in `dojo.NodeList()` for multiple toggles
 * 	dojo.query(".findMe").replaceClass("addMe", "removeMe");
*/
dojo.replaceClass=function(node, addClassStr, removeClassStr){};
/**
 * <b>Summary:</b><blockquote>
 *	 Performs parameterized substitutions on a string. Throws an<br>
 *	 exception if any parameter is unmatched.<br>
 * </blockquote>
 * @param {String} tmpl String to be used as a template.
 * @param {Object|Function} map If an object, it is used as a dictionary to look up substitutions.
 * If a function, it is called for every substitution with following<br>
 * parameters: a whole match, a name, an offset, and the whole template<br>
 * string (see https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/String/replace<br>
 * for more details).
 * @param {RegEx} [pattern] Optional regular expression objects that overrides the default pattern.
 * Must be global and match one item. The default is: /\{([^\}]+)\}/g,<br>
 * which matches patterns like that: &quot;{xxx}&quot;, where &quot;xxx&quot; is any sequence<br>
 * of characters, which doesn't include &quot;}&quot;.<br>
 * 
 * @returns {String} -Returns the substituted string.
 * @example
 * 	// uses a dictionary for substitutions:
 * 	dojo.replace("Hello, {name.first} {name.last} AKA {nick}!",
 * 		{
 * 			nick: "Bob",
 * 			name: {
 * 				first:	"Robert",
 * 				middle: "X",
 * 				last:		"Cringely"
 * 			}
 * 		});
 * 	// returns: Hello, Robert Cringely AKA Bob!
 * @example
 * 	// uses an array for substitutions:
 * 	dojo.replace("Hello, {0} {2}!",
 * 		["Robert", "X", "Cringely"]);
 * 	// returns: Hello, Robert Cringely!
 * @example
 * 	// uses a function for substitutions:
 * 	function sum(a){
 * 		var t = 0;
 * 		dojo.forEach(a, function(x){ t += x; });
 * 		return t;
 * 	}
 * 	dojo.replace(
 * 		"{count} payments averaging {avg} USD per payment.",
 * 		dojo.hitch(
 * 			{ payments: [11, 16, 12] },
 * 			function(_, key){
 * 				switch(key){
 * 					case "count": return this.payments.length;
 * 					case "min":		return Math.min.apply(Math, this.payments);
 * 					case "max":		return Math.max.apply(Math, this.payments);
 * 					case "sum":		return sum(this.payments);
 * 					case "avg":		return sum(this.payments) / this.payments.length;
 * 				}
 * 			}
 * 		)
 * 	);
 * 	// prints: 3 payments averaging 13 USD per payment.
 * @example
 * 	// uses an alternative PHP-like pattern for substitutions:
 * 	dojo.replace("Hello, ${0} ${2}!",
 * 		["Robert", "X", "Cringely"], /\$\{([^\}]+)\}/g);
 * 	// returns: Hello, Robert Cringely!
*/
dojo.replace=function(tmpl, map, pattern){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the specified classes from node. No `dojo.hasClass`<br>
 *	 check is required.<br>
 * </blockquote>
 * @param {String|DOMNode} node String ID or DomNode reference to remove the class from.
 * @param {String|Array} classStr An optional String class name to remove, or several space-separated
 * class names, or an array of class names. If omitted, all class names<br>
 * will be deleted.
 * @example
 * Remove a class from some node:
 * 	dojo.removeClass("someNode", "firstClass");
 * @example
 * Remove two classes from some node:
 * 	dojo.removeClass("someNode", "firstClass secondClass");
 * @example
 * Remove two classes from some node (using array):
 * 	dojo.removeClass("someNode", ["firstClass", "secondClass"]);
 * @example
 * Remove all classes from some node:
 * 	dojo.removeClass("someNode");
 * @example
 * Available in `dojo.NodeList()` for multiple removal
 * 	dojo.query(".foo").removeClass("foo");
*/
dojo.removeClass=function(node, classStr){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes an attribute from an HTML element.<br>
 * </blockquote>
 * @param {DOMNode|String} node id or reference to the element to remove the attribute from
 * @param {String} name the name of the attribute to remove
*/
dojo.removeAttr=function(node, name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Maps a module name to a path<br>
 * </blockquote>
 * An unregistered module is given the default path of ../[module],<br>
 * relative to Dojo root. For example, module acme is mapped to<br>
 * ../acme.  If you want to use a different module name, use<br>
 * dojo.registerModulePath.
 * @param {String} moduleName 
 * @param {String} prefix 
 * @example
 * If your dojo.js is located at this location in the web root:
 * 	/myapp/js/dojo/dojo/dojo.js
 * and your modules are located at:
 * 	/myapp/js/foo/bar.js
 * 	/myapp/js/foo/baz.js
 * 	/myapp/js/foo/thud/xyzzy.js
 * Your application can tell Dojo to locate the "foo" namespace by calling:
 * 	dojo.registerModulePath("foo", "../../foo");
 * At which point you can then use dojo.require() to load the
 * modules (assuming they provide() the same things which are
 * required). The full code might be:
 * 	&lt;script type="text/javascript"
 * 		src="/myapp/js/dojo/dojo/dojo.js"&gt;&lt;/script&gt;
 * 	&lt;script type="text/javascript"&gt;
 * 		dojo.registerModulePath("foo", "../../foo");
 * 		dojo.require("foo.bar");
 * 		dojo.require("foo.baz");
 * 		dojo.require("foo.thud.xyzzy");
 * 	&lt;/script&gt;
*/
dojo.registerModulePath=function(moduleName, prefix){};
/**
*/
dojo.ready=function(){};
/**
*/
dojo.rawXhrPut=function(){};
/**
*/
dojo.rawXhrPost=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This modules provides DOM querying functionality. The module export is a function<br>
 *	 that can be used to query for DOM nodes by CSS selector and returns a dojo.NodeList<br>
 *	 representing the matching nodes.<br>
 * </blockquote>
 * dojo/query is responsible for loading the appropriate query engine and wrapping<br>
 * its results with a `dojo.NodeList`. You can use dojo/query with a specific selector engine<br>
 * by using it as a plugin. For example, if you installed the sizzle package, you could<br>
 * use it as the selector engine with:<br>
 * 	define("dojo/query!sizzle", function(query){<br>
 * 		query("div")...<br>
 * <br>
 * The id after the ! can be a module id of the selector engine or one of the following values:<br>
 * 	+ acme: This is the default engine used by Dojo base, and will ensure that the full<br>
 * 	Acme engine is always loaded.<br>
 * <br>
 * 	+ css2: If the browser has a native selector engine, this will be used, otherwise a<br>
 * 	very minimal lightweight selector engine will be loaded that can do simple CSS2 selectors<br>
 * 	(by #id, .class, tag, and [name=value] attributes, with standard child or descendant (&gt;)<br>
 * 	operators) and nothing more.<br>
 * <br>
 * 	+ css2.1: If the browser has a native selector engine, this will be used, otherwise the<br>
 * 	full Acme engine will be loaded.<br>
 * <br>
 * 	+ css3: If the browser has a native selector engine with support for CSS3 pseudo<br>
 * 	selectors (most modern browsers except IE8), this will be used, otherwise the<br>
 * 	full Acme engine will be loaded.<br>
 * <br>
 * 	+ Or the module id of a selector engine can be used to explicitly choose the selector engine<br>
 * <br>
 * For example, if you are using CSS3 pseudo selectors in module, you can specify that<br>
 * you will need support them with:<br>
 * 	define("dojo/query!css3", function(query){<br>
 * 		query('#t &gt; h3:nth-child(odd)')...<br>
 * <br>
 * You can also choose the selector engine/load configuration by setting the &lt;FIXME:what is the configuration setting?&gt;.<br>
 * For example:<br>
 * 	&lt;script data-dojo-config="query-selector:'css3'" src="dojo.js"&gt;&lt;/script&gt;
 * @param {String} selector A CSS selector to search for.
 * @param {String|DomNode} [context] An optional context to limit the searching scope. Only nodes under `context` will be
 * scanned.
 * @returns {dojo.NodeList} -
 * @example
 * add an onclick handler to every submit button in the document
 * which causes the form to be sent via Ajax instead:
 * 	define(["dojo/query"], function(query){
 * 	query("input[type='submit']").on("click", function(e){
 * 		dojo.stopEvent(e); // prevent sending the form
 * 		var btn = e.target;
 * 		dojo.xhrPost({
 * 			form: btn.form,
 * 			load: function(data){
 * 				// replace the form with the response
 * 				var div = dojo.doc.createElement("div");
 * 				dojo.place(div, btn.form, "after");
 * 				div.innerHTML = data;
 * 				dojo.style(btn.form, "display", "none");
 * 			}
 * 		});
 * 	});
*/
dojo.query=function(selector, context){};
/**
 * <b>Summary:</b><blockquote>
 *	 causes subsequent calls to Dojo methods to assume the<br>
 *	 passed object and, optionally, document as the default<br>
 *	 scopes to use. A 2-element array of the previous global and<br>
 *	 document are returned.<br>
 * </blockquote>
 * dojo.pushContext treats contexts as a stack. The<br>
 * auto-detected contexts which are initially provided using<br>
 * dojo.setContext() require authors to keep state in order to<br>
 * "return" to a previous context, whereas the<br>
 * dojo.pushContext and dojo.popContext methods provide a more<br>
 * natural way to augment blocks of code to ensure that they<br>
 * execute in a different window or frame without issue. If<br>
 * called without any arguments, the default context (the<br>
 * context when Dojo is first loaded) is instead pushed into<br>
 * the stack. If only a single string is passed, a node in the<br>
 * intitial context's document is looked up and its<br>
 * contextWindow and contextDocument properties are used as<br>
 * the context to push. This means that iframes can be given<br>
 * an ID and code can be executed in the scope of the iframe's<br>
 * document in subsequent calls easily.
 * @param {Object|String} [g] The global context. If a string, the id of the frame to
 * search for a context and document.
 * @param {MDocumentElement} [d] The document element to execute subsequent code with.
 * @returns {Array} -
*/
dojo.pushContext=function(g, d){};
/**
 * @param {mixed} mid 
*/
dojo.provide=function(mid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets or sets a property on an HTML element.<br>
 * </blockquote>
 * Handles normalized getting and setting of properties on DOM<br>
 * Nodes. If 2 arguments are passed, and a the second argument is a<br>
 * string, acts as a getter.<br>
 * <br>
 * If a third argument is passed, or if the second argument is a<br>
 * map of attributes, acts as a setter.<br>
 * <br>
 * When passing functions as values, note that they will not be<br>
 * directly assigned to slots on the node, but rather the default<br>
 * behavior will be removed and the new behavior will be added<br>
 * using `dojo.connect()`, meaning that event handler properties<br>
 * will be normalized and that some caveats with regards to<br>
 * non-standard behaviors for onsubmit apply. Namely that you<br>
 * should cancel form submission using `dojo.stopEvent()` on the<br>
 * passed event object instead of returning a boolean value from<br>
 * the handler itself.
 * @param {DomNode|String} node id or reference to the element to get or set the property on
 * @param {String|Object} name the name of the property to get or set.
 * @param {String} [value] The value to set for the property
 * @example
 * 	// get the current value of the "foo" property on a node
 * 	dojo.prop(dojo.byId("nodeId"), "foo");
 * 	// or we can just pass the id:
 * 	dojo.prop("nodeId", "foo");
 * @example
 * 	// use prop() to set the tab index
 * 	dojo.prop("nodeId", "tabIndex", 3);
 * @example
 * Set multiple values at once, including event handlers:
 * 	dojo.prop("formId", {
 * 		"foo": "bar",
 * 		"tabIndex": -1,
 * 		"method": "POST",
 * 		"onsubmit": function(e){
 * 			// stop submitting the form. Note that the IE behavior
 * 			// of returning true or false will have no effect here
 * 			// since our handler is connect()ed to the built-in
 * 			// onsubmit behavior and so we need to use
 * 			// dojo.stopEvent() to ensure that the submission
 * 			// doesn't proceed.
 * 			dojo.stopEvent(e);
 * 
 * 			// submit the form with Ajax
 * 			dojo.xhrPost({ form: "formId" });
 * 		}
 * 	});
 * @example
 * Style is s special case: Only set with an object hash of styles
 * 	dojo.prop("someNode",{
 * 		id:"bar",
 * 		style:{
 * 			width:"200px", height:"100px", color:"#000"
 * 		}
 * 	});
 * @example
 * Again, only set style as an object hash of styles:
 * 	var obj = { color:"#fff", backgroundColor:"#000" };
 * 	dojo.prop("someNode", "style", obj);
 * 
 * 	// though shorter to use `dojo.style()` in this case:
 * 	dojo.style("someNode", obj);
*/
dojo.prop=function(node, name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the position and size of the passed element relative to<br>
 *	 the viewport (if includeScroll==false), or relative to the<br>
 *	 document root (if includeScroll==true).<br>
 * </blockquote>
 * Returns an object of the form:<br>
 * { x: 100, y: 300, w: 20, h: 15 }<br>
 * If includeScroll==true, the x and y values will include any<br>
 * document offsets that may affect the position relative to the<br>
 * viewport.<br>
 * Uses the border-box model (inclusive of border and padding but<br>
 * not margin).  Does not act as a setter.
 * @param {DOMNode|String} node 
 * @param {Boolean} [includeScroll] 
*/
dojo.position=function(node, includeScroll){};
/**
 * <b>Summary:</b><blockquote>
 *	 If the context stack contains elements, ensure that<br>
 *	 subsequent code executes in the *previous* context to the<br>
 *	 current context. The current context set ([global,<br>
 *	 document]) is returned.<br>
 * </blockquote>
*/
dojo.popContext=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 require one or more modules based on which host environment<br>
 *	 Dojo is currently operating in<br>
 * </blockquote>
 * This method takes a "map" of arrays which one can use to<br>
 * optionally load dojo modules. The map is indexed by the<br>
 * possible dojo.name_ values, with two additional values:<br>
 * "default" and "common". The items in the "default" array will<br>
 * be loaded if none of the other items have been choosen based on<br>
 * dojo.name_, set by your host environment. The items in the<br>
 * "common" array will *always* be loaded, regardless of which<br>
 * list is chosen.
 * @param {Object} modMap 
 * @example
 * 	dojo.platformRequire({
 * 		browser: [
 * 			"foo.sample", // simple module
 * 			"foo.test",
 * 			["foo.bar.baz", true] // skip object check in _loadModule (dojo.require)
 * 		],
 * 		default: [ "foo.sample._base" ],
 * 		common: [ "important.module.common" ]
 * 	});
*/
dojo.platformRequire=function(modMap){};
/**
 * <b>Summary:</b><blockquote>
 *	 Attempt to insert node into the DOM, choosing from various positioning options.<br>
 *	 Returns the first argument resolved to a DOM node.<br>
 * </blockquote>
 * @param {DOMNode|String} node id or node reference, or HTML fragment starting with &quot;&lt;&quot; to place relative to refNode
 * @param {DOMNode|String} refNode id or node reference to use as basis for placement
 * @param {String|Number} [position] string noting the position of node relative to refNode or a
 * number indicating the location in the childNodes collection of refNode.<br>
 * Accepted string values are:<br>
 * 	* before<br>
 * 	* after<br>
 * 	* replace<br>
 * 	* only<br>
 * 	* first<br>
 * 	* last<br>
 * &quot;first&quot; and &quot;last&quot; indicate positions as children of refNode, &quot;replace&quot; replaces refNode,<br>
 * &quot;only&quot; replaces all children.  position defaults to &quot;last&quot; if not specified
 * @example
 * Place a node by string id as the last child of another node by string id:
 * 	dojo.place("someNode", "anotherNode");
 * @example
 * Place a node by string id before another node by string id
 * 	dojo.place("someNode", "anotherNode", "before");
 * @example
 * Create a Node, and place it in the body element (last child):
 * 	dojo.place("&lt;div&gt;&lt;/div&gt;", dojo.body());
 * @example
 * Put a new LI as the first child of a list by id:
 * 	dojo.place("&lt;li&gt;&lt;/li&gt;", "someUl", "first");
*/
dojo.place=function(node, refNode, position){};
/**
 * <b>Summary:</b><blockquote>
 *	 similar to hitch() except that the scope object is left to be<br>
 *	 whatever the execution context eventually becomes.<br>
 * </blockquote>
 * Calling dojo.partial is the functional equivalent of calling:<br>
 * 	dojo.hitch(null, funcName, ...);
 * @param {Function|String} method 
*/
dojo.partial=function(method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Copies/adds all properties of one or more sources to dest; returns dest.<br>
 * </blockquote>
 * All properties, including functions (sometimes termed "methods"), excluding any non-standard extensions<br>
 * found in Object.prototype, are copied/added from sources to dest. sources are processed left to right.<br>
 * The Javascript assignment operator is used to copy/add each property; therefore, by default, mixin<br>
 * executes a so-called "shallow copy" and aggregate types are copied/added by reference.
 * @param {Object} dest The object to which to copy/add all properties contained in source. If dest is falsy, then
 * a new object is manufactured before copying/adding properties begins.
 * @param {Object} sources One of more objects from which to draw all properties to copy into dest. sources are processed
 * left-to-right and if more than one of these objects contain the same property name, the right-most<br>
 * value &quot;wins&quot;.
 * @example
 * make a shallow copy of an object
 *  var copy = lang.mixin({}, source);
 * @example
 * many class constructors often take an object which specifies
 * values to be configured on the object. In this case, it is
 * often simplest to call `lang.mixin` on the `this` object:
 *  dojo.declare("acme.Base", null, {
 * 		constructor: function(properties){
 * 			// property configuration:
 * 			lang.mixin(this, properties);
 * 
 * 			console.log(this.quip);
 * 			//	...
 * 		},
 * 		quip: "I wasn't born yesterday, you know - I've seen movies.",
 * 		// ...
 *  });
 * 
 *  // create an instance of the class and configure it
 *  var b = new acme.Base({quip: "That's what it does!" });
 * @example
 * copy in properties from multiple objects
 *  var flattened = lang.mixin(
 * 		{
 * 			name: "Frylock",
 * 			braces: true
 * 		},
 * 		{
 * 			name: "Carl Brutanananadilewski"
 * 		}
 *  );
 * 
 *  // will print "Carl Brutanananadilewski"
 *  console.log(flattened.name);
 *  // will print "true"
 *  console.log(flattened.braces);
*/
dojo.mixin=function(dest, sources){};
/**
 * <b>Summary:</b><blockquote>
 *	 Getter/setter for the margin-box of node.<br>
 * </blockquote>
 * Getter/setter for the margin-box of node.<br>
 * Returns an object in the expected format of box (regardless<br>
 * if box is passed). The object might look like:<br>
 * `{ l: 50, t: 200, w: 300: h: 150 }`<br>
 * for a node offset from its parent 50px to the left, 200px from<br>
 * the top with a margin width of 300px and a margin-height of<br>
 * 150px.
 * @param {DomNode|String} node id or reference to DOM Node to get/set box for
 * @param {Object} [box] If passed, denotes that dojo.marginBox() should
 * update/set the margin box for node. Box is an object in the<br>
 * above format. All properties are optional if passed.
 * @returns {Object} -
 * @example
 * Retrieve the margin box of a passed node
 * 	var box = dojo.marginBox("someNodeId");
 * 	console.dir(box);
 * @example
 * Set a node's margin box to the size of another node
 * 	var box = dojo.marginBox("someNodeId");
 * 	dojo.marginBox("someOtherNode", box);
*/
dojo.marginBox=function(node, box){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies callback to each element of arr and returns<br>
 *	 an Array with the results<br>
 * </blockquote>
 * This function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when<br>
 * run over sparse arrays, this implementation passes the "holes" in the sparse array to<br>
 * the callback function with a value of undefined. JavaScript 1.6's map skips the holes in the sparse array.<br>
 * For more details, see:<br>
 * https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
 * @see reference <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map</a>
 * @param {Array|String} arr the array to iterate on. If a string, operates on
 * individual characters.
 * @param {Function|String} callback a function is invoked with three arguments, (item, index,
 * array),	 and returns a value
 * @param {Object} [thisObject] may be used to scope the call to callback
 * @example
 *  // returns [2, 3, 4, 5]
 *  dojo.map([1, 2, 3, 4], function(item){ return item+1 });
*/
dojo.map=function(arr, callback, thisObject){};
/**
 * @param {mixed} f 
*/
dojo.loadInit=function(f){};
/**
 * <b>Summary:</b><blockquote>
 *	 locates the last index of the provided value in the passed<br>
 *	 array. If the value is not found, -1 is returned.<br>
 * </blockquote>
 * This method corresponds to the JavaScript 1.6 Array.lastIndexOf method, with one difference: when<br>
 * run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript<br>
 * 1.6's lastIndexOf skips the holes in the sparse array.<br>
 * For details on this method, see:<br>
 * https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf
 * @see reference <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf</a>
 * @param {Array,} arr 
 * @param {Object,} value 
 * @param {Integer} [fromIndex] 
*/
dojo.lastIndexOf=function(arr, value, fromIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return true if it is a String<br>
 * </blockquote>
 * @param {anything} it Item to test.
*/
dojo.isString=function(it){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if it is a JavaScript object (or an Array, a Function<br>
 *	 or null)<br>
 * </blockquote>
 * @param {anything} it Item to test.
*/
dojo.isObject=function(it){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return true if it is a Function<br>
 * </blockquote>
 * @param {anything} it Item to test.
*/
dojo.isFunction=function(it){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks an event for the copy key (meta on Mac, and ctrl anywhere else)<br>
 * </blockquote>
 * @param {Event} e Event object to examine
*/
dojo.isCopyKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the current language is left-to-right, and false otherwise.<br>
 * </blockquote>
*/
dojo.isBodyLtr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 similar to dojo.isArray() but more permissive<br>
 * </blockquote>
 * Doesn't strongly test for "arrayness".  Instead, settles for "isn't<br>
 * a string or number and has a length property". Arguments objects<br>
 * and DOM collections will return true when passed to<br>
 * dojo.isArrayLike(), but will return false when passed to<br>
 * dojo.isArray().
 * @param {anything} it Item to test.
*/
dojo.isArrayLike=function(it){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return true if it is an Array.<br>
 *	 Does not work on Arrays created in other windows.<br>
 * </blockquote>
 * @param {anything} it Item to test.
*/
dojo.isArray=function(it){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if it is a built-in function or some other kind of<br>
 *	 oddball that *should* report as a function but doesn't<br>
 * </blockquote>
 * @param {mixed} it 
*/
dojo.isAlien=function(it){};
/**
 * <b>Summary:</b><blockquote>
 *	 locates the first index of the provided value in the<br>
 *	 passed array. If the value is not found, -1 is returned.<br>
 * </blockquote>
 * This method corresponds to the JavaScript 1.6 Array.indexOf method, with one difference: when<br>
 * run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript<br>
 * 1.6's indexOf skips the holes in the sparse array.<br>
 * For details on this method, see:<br>
 * https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf
 * @see reference <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf</a>
 * @param {Array} arr 
 * @param {Object} value 
 * @param {Integer} [fromIndex] 
 * @param {Boolean} [findLast] 
*/
dojo.indexOf=function(arr, value, fromIndex, findLast){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a function that will only ever execute in the a given scope.<br>
 *	 This allows for easy use of object member functions<br>
 *	 in callbacks and other places in which the &amp;quot;this&amp;quot; keyword may<br>
 *	 otherwise not reference the expected scope.<br>
 *	 Any number of default positional arguments may be passed as parameters<br>
 *	 beyond &amp;quot;method&amp;quot;.<br>
 *	 Each of these values will be used to &amp;quot;placehold&amp;quot; (similar to curry)<br>
 *	 for the hitched function.<br>
 * </blockquote>
 * @param {Object} scope The scope to use when method executes. If method is a string,
 * scope is also the object containing method.
 * @param {Function|String} method A function to be hitched to scope, or the name of the method in
 * scope to be hitched.
 * @example
 * 	dojo.hitch(foo, "bar")();
 * runs foo.bar() in the scope of foo
 * @example
 * 	dojo.hitch(foo, myFunction);
 * returns a function that runs myFunction in the scope of foo
 * @example
 * Expansion on the default positional arguments passed along from
 * hitch. Passed args are mixed first, additional args after.
 * 	var foo = { bar: function(a, b, c){ console.log(a, b, c); } };
 * 	var fn = dojo.hitch(foo, "bar", 1, 2);
 * 	fn(3); // logs "1, 2, 3"
 * @example
 * 	var foo = { bar: 2 };
 * 	dojo.hitch(foo, function(){ this.bar = 10; })();
 * execute an anonymous function in scope of foo
*/
dojo.hitch=function(scope, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets or sets the hash string.<br>
 * </blockquote>
 * Handles getting and setting of location.hash.<br>
 * - If no arguments are passed, acts as a getter.<br>
 * - If a string is passed, acts as a setter.
 * @param {String} [hash] the hash is set - #string.
 * @param {Boolean} [replace] If true, updates the hash value in the current history
 * state instead of creating a new history state.<br>
 * 
 * @returns {String} -when used as a setter, returns the new hash string.
*/
dojo.hash=function(hash, replace){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns whether or not the specified classes are a portion of the<br>
 *	 class list currently applied to the node.<br>
 * </blockquote>
 * @param {String|DOMNode} node String ID or DomNode reference to check the class for.
 * @param {String} classStr A string class name to look for.
 * @example
 * Do something if a node with id="someNode" has class="aSillyClassName" present
 * 	if(dojo.hasClass("someNode","aSillyClassName")){ ... }
*/
dojo.hasClass=function(node, classStr){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the requested attribute is specified on the<br>
 *	 given element, and false otherwise.<br>
 * </blockquote>
 * @param {DOMNode|String} node id or reference to the element to check
 * @param {String} name the name of the attribute
*/
dojo.hasAttr=function(node, name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the current value of the named feature.<br>
 * </blockquote>
 * Returns the value of the feature named by name. The feature must have been<br>
 * previously added to the cache by has.add.
 * @param {String|Integer} name The name (if a string) or identifier (if an integer) of the feature to test.
 * @returns {Boolean} -
*/
dojo.has=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Accesses styles on a node.<br>
 * </blockquote>
 * Getting the style value uses the computed style for the node, so the value<br>
 * will be a calculated value, not just the immediate node.style value.<br>
 * Also when getting values, use specific style names,<br>
 * like "borderBottomWidth" instead of "border" since compound values like<br>
 * "border" are not necessarily reflected as expected.<br>
 * If you want to get node dimensions, use `dojo.marginBox()`,<br>
 * `dojo.contentBox()` or `dojo.position()`.
 * @param {DOMNode|String} node id or reference to node to get style for
 * @param {String} [name] the style property to get
 * @example
 * Passing only an ID or node returns the computed style object of
 * the node:
 * 	dojo.getStyle("thinger");
 * @example
 * Passing a node and a style property returns the current
 * normalized, computed value for that property:
 * 	dojo.getStyle("thinger", "opacity"); // 1 by default
*/
dojo.getStyle=function(node, name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns object with special values specifically useful for node<br>
 *	 fitting.<br>
 * </blockquote>
 * Returns an object with `w`, `h`, `l`, `t` properties:<br>
 * 		l/t/r/b = left/top/right/bottom padding (respectively)<br>
 * 		w = the total of the left and right padding<br>
 * 		h = the total of the top and bottom padding<br>
 * If 'node' has position, l/t forms the origin for child nodes.<br>
 * The w/h are used for calculating boxes.<br>
 * Normally application code will not need to invoke this<br>
 * directly, and will use the ...box... functions instead.
 * @param {DOMNode} node 
 * @param {Object} [computedStyle] This parameter accepts computed styles object.
 * If this parameter is omitted, the functions will call<br>
 * dojo.getComputedStyle to get one. It is a better way, calling<br>
 * dojo.computedStyle once, and then pass the reference to this<br>
 * computedStyle parameter. Wherever possible, reuse the returned<br>
 * object of dojo.getComputedStyle.<br>
*/
dojo.getPadExtents=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns object with properties useful for box fitting with<br>
 *	 regards to padding.<br>
 * </blockquote>
 * * l/t/r/b = the sum of left/top/right/bottom padding and left/top/right/bottom border (respectively)<br>
 * * w = the sum of the left and right padding and border<br>
 * * h = the sum of the top and bottom padding and border<br>
 * <br>
 * The w/h are used for calculating boxes.<br>
 * Normally application code will not need to invoke this<br>
 * directly, and will use the ...box... functions instead.
 * @param {DOMNode} node 
 * @param {Object} [computedStyle] This parameter accepts computed styles object.
 * If this parameter is omitted, the functions will call<br>
 * dojo.getComputedStyle to get one. It is a better way, calling<br>
 * dojo.computedStyle once, and then pass the reference to this<br>
 * computedStyle parameter. Wherever possible, reuse the returned<br>
 * object of dojo.getComputedStyle.<br>
*/
dojo.getPadBorderExtents=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get a property from a dot-separated string, such as &amp;quot;A.B.C&amp;quot;<br>
 * </blockquote>
 * Useful for longer api chains where you have to test each object in<br>
 * the chain, or when you have an object reference in string format.
 * @param {String} name Path to an property, in the form &quot;A.B.C&quot;.
 * @param {Boolean} [create] Optional. Defaults to `false`. If `true`, Objects will be
 * created at any point along the 'path' that is undefined.
 * @param {Object} [context] Optional. Object to use as root of path. Defaults to
 * 'dojo.global'. Null may be passed.<br>
*/
dojo.getObject=function(name, create, context){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an effective value of a property or an attribute.<br>
 * </blockquote>
 * @param {DOMNode|String} node id or reference to the element to remove the attribute from
 * @param {String} name the name of the attribute
*/
dojo.getNodeProp=function(node, name){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an object that encodes the width and height of<br>
 *	 the node's margin box<br>
 * </blockquote>
 * @param {DOMNode|String} node 
 * @param {Object} [computedStyle] This parameter accepts computed styles object.
 * If this parameter is omitted, the functions will call<br>
 * dojo.getComputedStyle to get one. It is a better way, calling<br>
 * dojo.computedStyle once, and then pass the reference to this<br>
 * computedStyle parameter. Wherever possible, reuse the returned<br>
 * object of dojo.getComputedStyle.<br>
*/
dojo.getMarginSize=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns object with properties useful for box fitting with<br>
 *	 regards to box margins (i.e., the outer-box).<br>
 *	 <br>
 *	 * l/t = marginLeft, marginTop, respectively<br>
 *	 * w = total width, margin inclusive<br>
 *	 * h = total height, margin inclusive<br>
 *	 <br>
 *	 The w/h are used for calculating boxes.<br>
 *	 Normally application code will not need to invoke this<br>
 *	 directly, and will use the ...box... functions instead.<br>
 * </blockquote>
 * @param {DOMNode} node 
 * @param {Object} [computedStyle] This parameter accepts computed styles object.
 * If this parameter is omitted, the functions will call<br>
 * dojo.getComputedStyle to get one. It is a better way, calling<br>
 * dojo.computedStyle once, and then pass the reference to this<br>
 * computedStyle parameter. Wherever possible, reuse the returned<br>
 * object of dojo.getComputedStyle.<br>
*/
dojo.getMarginExtents=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an object that encodes the width, height, left and top<br>
 *	 positions of the node's margin box.<br>
 * </blockquote>
 * @param {DOMNode} node 
 * @param {Object} [computedStyle] This parameter accepts computed styles object.
 * If this parameter is omitted, the functions will call<br>
 * dojo.getComputedStyle to get one. It is a better way, calling<br>
 * dojo.computedStyle once, and then pass the reference to this<br>
 * computedStyle parameter. Wherever possible, reuse the returned<br>
 * object of dojo.getComputedStyle.<br>
*/
dojo.getMarginBox=function(node, computedStyle){};
/**
 * @param {mixed} moduleName 
 * @param {mixed} bundleName 
 * @param {mixed} locale 
*/
dojo.getL10nName=function(moduleName, bundleName, locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the offset in x and y from the document body to the<br>
 *	 visual edge of the page for IE<br>
 * </blockquote>
 * The following values in IE contain an offset:<br>
 * 		event.clientX<br>
 * 		event.clientY<br>
 * 		node.getBoundingClientRect().left<br>
 * 		node.getBoundingClientRect().top<br>
 * But other position related values do not contain this offset,<br>
 * such as node.offsetLeft, node.offsetTop, node.style.left and<br>
 * node.style.top. The offset is always (2, 2) in LTR direction.<br>
 * When the body is in RTL direction, the offset counts the width<br>
 * of left scroll bar's width.  This function computes the actual<br>
 * offset.<br>
*/
dojo.getIeDocumentElementOffset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object that encodes the width, height, left and top<br>
 *	 positions of the node's content box, irrespective of the<br>
 *	 current box model.<br>
 * </blockquote>
 * @param {DOMNode} node 
 * @param {Object} [computedStyle] This parameter accepts computed styles object.
 * If this parameter is omitted, the functions will call<br>
 * dojo.getComputedStyle to get one. It is a better way, calling<br>
 * dojo.computedStyle once, and then pass the reference to this<br>
 * computedStyle parameter. Wherever possible, reuse the returned<br>
 * object of dojo.getComputedStyle.<br>
*/
dojo.getContentBox=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a &amp;quot;computed style&amp;quot; object.<br>
 * </blockquote>
 * Gets a "computed style" object which can be used to gather<br>
 * information about the current state of the rendered node.<br>
 * <br>
 * Note that this may behave differently on different browsers.<br>
 * Values may have different formats and value encodings across<br>
 * browsers.<br>
 * <br>
 * Note also that this method is expensive.  Wherever possible,<br>
 * reuse the returned object.<br>
 * <br>
 * Use the dojo.style() method for more consistent (pixelized)<br>
 * return values.
 * @param {DOMNode} node A reference to a DOM node. Does NOT support taking an
 * ID string for speed reasons.
 * @returns {CSS2Properties} -
 * @example
 * 	dojo.getComputedStyle(dojo.byId('foo')).borderWidth;
 * @example
 * Reusing the returned object, avoiding multiple lookups:
 * 	var cs = dojo.getComputedStyle(dojo.byId("someNode"));
 * 	var w = cs.width, h = cs.height;
*/
dojo.getComputedStyle=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an object with properties useful for noting the border<br>
 *	 dimensions.<br>
 * </blockquote>
 * * l/t/r/b = the sum of left/top/right/bottom border (respectively)<br>
 * * w = the sum of the left and right border<br>
 * * h = the sum of the top and bottom border<br>
 * <br>
 * The w/h are used for calculating boxes.<br>
 * Normally application code will not need to invoke this<br>
 * directly, and will use the ...box... functions instead.
 * @param {DOMNode} node 
 * @param {Object} [computedStyle] This parameter accepts computed styles object.
 * If this parameter is omitted, the functions will call<br>
 * dojo.getComputedStyle to get one. It is a better way, calling<br>
 * dojo.computedStyle once, and then pass the reference to this<br>
 * computedStyle parameter. Wherever possible, reuse the returned<br>
 * object of dojo.getComputedStyle.<br>
*/
dojo.getBorderExtents=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets an attribute on an HTML element.<br>
 * </blockquote>
 * Handles normalized getting of attributes on DOM Nodes.
 * @param {DOMNode|String} node id or reference to the element to get the attribute on
 * @param {String} name the name of the attribute to get.
 * @example
 * 	// get the current value of the "foo" attribute on a node
 * 	dojo.getAttr(dojo.byId("nodeId"), "foo");
 * 	// or we can just pass the id:
 * 	dojo.getAttr("nodeId", "foo");
*/
dojo.getAttr=function(node, name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parses a JavaScript expression and returns a JavaScript value.<br>
 * </blockquote>
 * Throws for invalid JavaScript expressions. It does not use a strict JSON parser. It<br>
 * always delegates to eval(). The content passed to this method must therefore come<br>
 * from a trusted source.<br>
 * It is recommend that you use dojo/json's parse function for an<br>
 * implementation uses the (faster) native JSON parse when available.
 * @param {String} js a string literal of a JavaScript expression, for instance:
 * `'{ &quot;foo&quot;: [ &quot;bar&quot;, 1, { &quot;baz&quot;: &quot;thud&quot; } ] }'`
 * @returns {Object} -
*/
dojo.fromJson=function(js){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a URL-encoded string representing the form passed as either a<br>
 *	 node or string ID identifying the form to serialize<br>
 * </blockquote>
 * @param {DOMNode|String} formNode 
*/
dojo.formToQuery=function(formNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Serialize a form node to a JavaScript object.<br>
 * </blockquote>
 * Returns the values encoded in an HTML form as<br>
 * string properties in an object which it then returns. Disabled form<br>
 * elements, buttons, and other non-value form elements are skipped.<br>
 * Multi-select elements are returned as an array of string values.
 * @param {DOMNode|String} formNode 
 * @example
 * This form:
 * 	&lt;form id="test_form"&gt;
 * 		&lt;input type="text" name="blah" value="blah"&gt;
 * 		&lt;input type="text" name="no_value" value="blah" disabled&gt;
 * 		&lt;input type="button" name="no_value2" value="blah"&gt;
 * 		&lt;select type="select" multiple name="multi" size="5"&gt;
 * 			&lt;option value="blah"&gt;blah&lt;/option&gt;
 * 			&lt;option value="thud" selected&gt;thud&lt;/option&gt;
 * 			&lt;option value="thonk" selected&gt;thonk&lt;/option&gt;
 * 		&lt;/select&gt;
 * 	&lt;/form&gt;
 * 
 * yields this object structure as the result of a call to
 * formToObject():
 * 
 * 	{
 * 		blah: "blah",
 * 		multi: [
 * 			"thud",
 * 			"thonk"
 * 		]
 * 	};
*/
dojo.formToObject=function(formNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a serialized JSON string from a form node or string<br>
 *	 ID identifying the form to serialize<br>
 * </blockquote>
 * @param {DOMNode|String} formNode 
 * @param {Boolean} [prettyPrint] 
*/
dojo.formToJson=function(formNode, prettyPrint){};
/**
 * <b>Summary:</b><blockquote>
 *	 for every item in arr, callback is invoked. Return values are ignored.<br>
 *	 If you want to break out of the loop, consider using dojo.every() or dojo.some().<br>
 *	 forEach does not allow breaking out of the loop over the items in arr.<br>
 * </blockquote>
 * This function corresponds to the JavaScript 1.6 Array.forEach() method, with one difference: when<br>
 * run over sparse arrays, this implementation passes the "holes" in the sparse array to<br>
 * the callback function with a value of undefined. JavaScript 1.6's forEach skips the holes in the sparse array.<br>
 * For more details, see:<br>
 * https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach
 * @see reference <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach</a>
 * @param {Array|String} arr 
 * @param {Function|String} callback 
 * @param {Object} [thisObject] 
 * @example
 *  // log out all members of the array:
 *  dojo.forEach(
 * 		[ "thinger", "blah", "howdy", 10 ],
 * 		function(item){
 * 			console.log(item);
 * 		}
 *  );
 * @example
 *  // log out the members and their indexes
 *  dojo.forEach(
 * 		[ "thinger", "blah", "howdy", 10 ],
 * 		function(item, idx, arr){
 * 			console.log(item, "at index:", idx);
 * 		}
 *  );
 * @example
 *  // use a scoped object member as the callback
 * 
 *  var obj = {
 * 		prefix: "logged via obj.callback:",
 * 		callback: function(item){
 * 			console.log(this.prefix, item);
 * 		}
 *  };
 * 
 *  // specifying the scope function executes the callback in that scope
 *  dojo.forEach(
 * 		[ "thinger", "blah", "howdy", 10 ],
 * 		obj.callback,
 * 		obj
 *  );
 * 
 *  // alternately, we can accomplish the same thing with dojo.hitch()
 *  dojo.forEach(
 * 		[ "thinger", "blah", "howdy", 10 ],
 * 		dojo.hitch(obj, "callback")
 *  );
*/
dojo.forEach=function(arr, callback, thisObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 In RTL direction, scrollLeft should be a negative value, but IE<br>
 *	 returns a positive one. All codes using documentElement.scrollLeft<br>
 *	 must call this function to fix this error, otherwise the position<br>
 *	 will offset to right when there is a horizontal scrollbar.<br>
 * </blockquote>
 * @param {NUmber} scrollLeft 
*/
dojo.fixIeBiDiScrollLeft=function(scrollLeft){};
/**
 * <b>Summary:</b><blockquote>
 *	 normalizes properties on the event object including event<br>
 *	 bubbling methods, keystroke normalization, and x/y positions<br>
 * </blockquote>
 * @param {Event} evt native event object
 * @param {DOMNode} sender node to treat as &quot;currentTarget&quot;
 * @returns {Event} -
*/
dojo.fixEvent=function(evt, sender){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a new Array with those items from arr that match the<br>
 *	 condition implemented by callback.<br>
 * </blockquote>
 * This function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when<br>
 * run over sparse arrays, this implementation passes the "holes" in the sparse array to<br>
 * the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array.<br>
 * For more details, see:<br>
 * https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
 * @see reference <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter</a>
 * @param {Array} arr the array to iterate over.
 * @param {Function|String} callback a function that is invoked with three arguments (item,
 * index, array). The return of this function is expected to<br>
 * be a boolean which determines whether the passed-in item<br>
 * will be included in the returned array.
 * @param {Object} [thisObject] may be used to scope the call to callback
 * @example
 *  // returns [2, 3, 4]
 *  dojo.filter([1, 2, 3, 4], function(item){ return item&gt;1; });
*/
dojo.filter=function(arr, callback, thisObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Serialize a form field to a JavaScript object.<br>
 * </blockquote>
 * Returns the value encoded in a form field as<br>
 * as a string or an array of strings. Disabled form elements<br>
 * and unchecked radio and checkboxes are skipped.	Multi-select<br>
 * elements are returned as an array of string values.
 * @param {DOMNode|String} inputNode 
*/
dojo.fieldToObject=function(inputNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation that will fade node defined in 'args'<br>
 *	 from its current opacity to fully transparent.<br>
 * </blockquote>
 * @param {dojo.__FadeArgs} args 
 * @returns {dojo.Animation} -
*/
dojo.fadeOut=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation that will fade node defined in 'args' from<br>
 *	 its current opacity to fully opaque.<br>
 * </blockquote>
 * @param {dojo.__FadeArgs} args 
 * @returns {dojo.Animation} -
*/
dojo.fadeIn=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds all properties and methods of props to constructor's<br>
 *	 prototype, making them available to all instances created with<br>
 *	 constructor.<br>
 * </blockquote>
 * @param {Object} constructor Target constructor to extend.
 * @param {Object} props One or more objects to mix into constructor.prototype
*/
dojo.extend=function(constructor, props){};
/**
 * @param {mixed} exitcode 
*/
dojo.exit=function(exitcode){};
/**
 * <b>Summary:</b><blockquote>
 *	 determine if an object supports a given method<br>
 * </blockquote>
 * useful for longer api chains where you have to test each object in<br>
 * the chain. Useful for object and method detection.
 * @param {String} name Path to an object, in the form &quot;A.B.C&quot;.
 * @param {Object} [obj] Object to use as root of path. Defaults to
 * 'dojo.global'. Null may be passed.
 * @example
 *  // define an object
 *  var foo = {
 * 		bar: { }
 *  };
 * 
 *  // search the global scope
 *  lang.exists("foo.bar"); // true
 *  lang.exists("foo.bar.baz"); // false
 * 
 *  // search from a particular scope
 *  lang.exists("bar", foo); // true
 *  lang.exists("bar.baz", foo); // false
*/
dojo.exists=function(name, obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines whether or not every item in arr satisfies the<br>
 *	 condition implemented by callback.<br>
 * </blockquote>
 * This function corresponds to the JavaScript 1.6 Array.every() method, with one difference: when<br>
 * run over sparse arrays, this implementation passes the "holes" in the sparse array to<br>
 * the callback function with a value of undefined. JavaScript 1.6's every skips the holes in the sparse array.<br>
 * For more details, see:<br>
 * https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every
 * @see reference <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every</a>
 * @param {Array|String} arr the array to iterate on. If a string, operates on individual characters.
 * @param {Function|String} callback a function is invoked with three arguments: item, index,
 * and array and returns true if the condition is met.
 * @param {Object} [thisObject] may be used to scope the call to callback
 * @example
 *  // returns false
 *  dojo.every([1, 2, 3, 4], function(item){ return item&gt;1; });
 * @example
 *  // returns true
 *  dojo.every([1, 2, 3, 4], function(item){ return item&gt;0; });
*/
dojo.every=function(arr, callback, thisObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 safely removes all children of the node.<br>
 * </blockquote>
 * @param {DOMNode|String} node a reference to a DOM node or an id.
 * @example
 * Destroy node's children byId:
 * 	dojo.empty("someId");
 * @example
 * Destroy all nodes' children in a list by reference:
 * 	dojo.query(".someNode").forEach(dojo.empty);
*/
dojo.empty=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object with {node, x, y} with corresponding offsets.<br>
 * </blockquote>
*/
dojo.docScroll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove a link created by dojo.connect.<br>
 * </blockquote>
 * Removes the connection between event and the method referenced by handle.
 * @param {Handle:} handle the return value of the dojo.connect call that created the connection.
*/
dojo.disconnect=function(handle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes a node from its parent, clobbering it and all of its<br>
 *	 children.<br>
 * </blockquote>
 * Removes a node from its parent, clobbering it and all of its<br>
 * children. Function only works with DomNodes, and returns nothing.
 * @param {DOMNode|String} node A String ID or DomNode reference of the element to be destroyed
 * @example
 * Destroy a node byId:
 * 	dojo.destroy("someId");
 * @example
 * Destroy all nodes in a list by reference:
 * 	dojo.query(".someNode").forEach(dojo.destroy);
*/
dojo.destroy=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a new object which &amp;quot;looks&amp;quot; to obj for properties which it<br>
 *	 does not have a value for. Optionally takes a bag of properties to<br>
 *	 seed the returned object with initially.<br>
 * </blockquote>
 * This is a small implementaton of the Boodman/Crockford delegation<br>
 * pattern in JavaScript. An intermediate object constructor mediates<br>
 * the prototype chain for the returned object, using it to delegate<br>
 * down to obj for property lookup when object-local lookup fails.<br>
 * This can be thought of similarly to ES4's "wrap", save that it does<br>
 * not act on types but rather on pure objects.
 * @param {Object} obj The object to delegate to for properties not found directly on the
 * return object or in props.
 * @param {Object} props an object containing properties to assign to the returned object
 * @example
 * 	var foo = { bar: "baz" };
 * 	var thinger = dojo.delegate(foo, { thud: "xyzzy"});
 * 	thinger.bar == "baz"; // delegated to foo
 * 	foo.thud == undefined; // by definition
 * 	thinger.thud == "xyzzy"; // mixed in from props
 * 	foo.bar = "thonk";
 * 	thinger.bar == "thonk"; // still delegated to foo's bar
*/
dojo.delegate=function(obj, props){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a feature-rich constructor from compact notation.<br>
 * </blockquote>
 * Create a constructor using a compact notation for inheritance and<br>
 * prototype extension.<br>
 * <br>
 * Mixin ancestors provide a type of multiple inheritance.<br>
 * Prototypes of mixin ancestors are copied to the new class:<br>
 * changes to mixin prototypes will not affect classes to which<br>
 * they have been mixed in.<br>
 * <br>
 * Ancestors can be compound classes created by this version of<br>
 * dojo.declare. In complex cases all base classes are going to be<br>
 * linearized according to C3 MRO algorithm<br>
 * (see http://www.python.org/download/releases/2.3/mro/ for more<br>
 * details).<br>
 * <br>
 * "className" is cached in "declaredClass" property of the new class,<br>
 * if it was supplied. The immediate super class will be cached in<br>
 * "superclass" property of the new class.<br>
 * <br>
 * Methods in "props" will be copied and modified: "nom" property<br>
 * (the declared name of the method) will be added to all copied<br>
 * functions to help identify them for the internal machinery. Be<br>
 * very careful, while reusing methods: if you use the same<br>
 * function under different names, it can produce errors in some<br>
 * cases.<br>
 * <br>
 * It is possible to use constructors created "manually" (without<br>
 * dojo.declare) as bases. They will be called as usual during the<br>
 * creation of an instance, their methods will be chained, and even<br>
 * called by "this.inherited()".<br>
 * <br>
 * Special property "-chains-" governs how to chain methods. It is<br>
 * a dictionary, which uses method names as keys, and hint strings<br>
 * as values. If a hint string is "after", this method will be<br>
 * called after methods of its base classes. If a hint string is<br>
 * "before", this method will be called before methods of its base<br>
 * classes.<br>
 * <br>
 * If "constructor" is not mentioned in "-chains-" property, it will<br>
 * be chained using the legacy mode: using "after" chaining,<br>
 * calling preamble() method before each constructor, if available,<br>
 * and calling postscript() after all constructors were executed.<br>
 * If the hint is "after", it is chained as a regular method, but<br>
 * postscript() will be called after the chain of constructors.<br>
 * "constructor" cannot be chained "before", but it allows<br>
 * a special hint string: "manual", which means that constructors<br>
 * are not going to be chained in any way, and programmer will call<br>
 * them manually using this.inherited(). In the latter case<br>
 * postscript() will be called after the construction.<br>
 * <br>
 * All chaining hints are "inherited" from base classes and<br>
 * potentially can be overridden. Be very careful when overriding<br>
 * hints! Make sure that all chained methods can work in a proposed<br>
 * manner of chaining.<br>
 * <br>
 * Once a method was chained, it is impossible to unchain it. The<br>
 * only exception is "constructor". You don't need to define a<br>
 * method in order to supply a chaining hint.<br>
 * <br>
 * If a method is chained, it cannot use this.inherited() because<br>
 * all other methods in the hierarchy will be called automatically.<br>
 * <br>
 * Usually constructors and initializers of any kind are chained<br>
 * using "after" and destructors of any kind are chained as<br>
 * "before". Note that chaining assumes that chained methods do not<br>
 * return any value: any returned value will be discarded.
 * @see reference <a href="http://www.python.org/download/releases/2.3/mro/">http://www.python.org/download/releases/2.3/mro/</a>
 * @param {String:} [className] The optional name of the constructor (loosely, a &quot;class&quot;)
 * stored in the &quot;declaredClass&quot; property in the created prototype.<br>
 * It will be used as a global name for a created constructor.
 * @param {Function|Function[]:} superclass May be null, a Function, or an Array of Functions. This argument
 * specifies a list of bases (the left-most one is the most deepest<br>
 * base).
 * @param {Object:} props An object whose properties are copied to the created prototype.
 * Add an instance-initialization function by making it a property<br>
 * named &quot;constructor&quot;.<br>
 * 
 * @returns {Function} -
 * @example
 * 	dojo.declare("my.classes.bar", my.classes.foo, {
 * 		// properties to be added to the class prototype
 * 		someValue: 2,
 * 		// initialization function
 * 		constructor: function(){
 * 			this.myComplicatedObject = new ReallyComplicatedObject();
 * 		},
 * 		// other functions
 * 		someMethod: function(){
 * 			doStuff();
 * 		}
 * 	});
 * @example
 * 	var MyBase = dojo.declare(null, {
 * 		// constructor, properties, and methods go here
 * 		// ...
 * 	});
 * 	var MyClass1 = dojo.declare(MyBase, {
 * 		// constructor, properties, and methods go here
 * 		// ...
 * 	});
 * 	var MyClass2 = dojo.declare(MyBase, {
 * 		// constructor, properties, and methods go here
 * 		// ...
 * 	});
 * 	var MyDiamond = dojo.declare([MyClass1, MyClass2], {
 * 		// constructor, properties, and methods go here
 * 		// ...
 * 	});
 * @example
 * 	var F = function(){ console.log("raw constructor"); };
 * 	F.prototype.method = function(){
 * 		console.log("raw method");
 * 	};
 * 	var A = dojo.declare(F, {
 * 		constructor: function(){
 * 			console.log("A.constructor");
 * 		},
 * 		method: function(){
 * 			console.log("before calling F.method...");
 * 			this.inherited(arguments);
 * 			console.log("...back in A");
 * 		}
 * 	});
 * 	new A().method();
 * 	// will print:
 * 	// raw constructor
 * 	// A.constructor
 * 	// before calling F.method...
 * 	// raw method
 * 	// ...back in A
 * @example
 * 	var A = dojo.declare(null, {
 * 		"-chains-": {
 * 			destroy: "before"
 * 		}
 * 	});
 * 	var B = dojo.declare(A, {
 * 		constructor: function(){
 * 			console.log("B.constructor");
 * 		},
 * 		destroy: function(){
 * 			console.log("B.destroy");
 * 		}
 * 	});
 * 	var C = dojo.declare(B, {
 * 		constructor: function(){
 * 			console.log("C.constructor");
 * 		},
 * 		destroy: function(){
 * 			console.log("C.destroy");
 * 		}
 * 	});
 * 	new C().destroy();
 * 	// prints:
 * 	// B.constructor
 * 	// C.constructor
 * 	// C.destroy
 * 	// B.destroy
 * @example
 * 	var A = dojo.declare(null, {
 * 		"-chains-": {
 * 			constructor: "manual"
 * 		}
 * 	});
 * 	var B = dojo.declare(A, {
 * 		constructor: function(){
 * 			// ...
 * 			// call the base constructor with new parameters
 * 			this.inherited(arguments, [1, 2, 3]);
 * 			// ...
 * 		}
 * 	});
 * @example
 * 	var A = dojo.declare(null, {
 * 		"-chains-": {
 * 			m1: "before"
 * 		},
 * 		m1: function(){
 * 			console.log("A.m1");
 * 		},
 * 		m2: function(){
 * 			console.log("A.m2");
 * 		}
 * 	});
 * 	var B = dojo.declare(A, {
 * 		"-chains-": {
 * 			m2: "after"
 * 		},
 * 		m1: function(){
 * 			console.log("B.m1");
 * 		},
 * 		m2: function(){
 * 			console.log("B.m2");
 * 		}
 * 	});
 * 	var x = new B();
 * 	x.m1();
 * 	// prints:
 * 	// B.m1
 * 	// A.m1
 * 	x.m2();
 * 	// prints:
 * 	// A.m2
 * 	// B.m2
*/
dojo.declare=function(className, superclass, props){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create an element, allowing for optional attribute decoration<br>
 *	 and placement.<br>
 * </blockquote>
 * A DOM Element creation function. A shorthand method for creating a node or<br>
 * a fragment, and allowing for a convenient optional attribute setting step,<br>
 * as well as an optional DOM placement reference.<br>
 * <br>
 * Attributes are set by passing the optional object through `dojo.setAttr`.<br>
 * See `dojo.setAttr` for noted caveats and nuances, and API if applicable.<br>
 * <br>
 * Placement is done via `dojo.place`, assuming the new node to be the action<br>
 * node, passing along the optional reference node and position.
 * @param {DOMNode|String} tag A string of the element to create (eg: &quot;div&quot;, &quot;a&quot;, &quot;p&quot;, &quot;li&quot;, &quot;script&quot;, &quot;br&quot;),
 * or an existing DOM node to process.
 * @param {Object} attrs An object-hash of attributes to set on the newly created node.
 * Can be null, if you don't want to set any attributes/styles.<br>
 * See: `dojo.setAttr` for a description of available attributes.
 * @param {DOMNode|String} [refNode] Optional reference node. Used by `dojo.place` to place the newly created
 * node somewhere in the dom relative to refNode. Can be a DomNode reference<br>
 * or String ID of a node.
 * @param {String} [pos] Optional positional reference. Defaults to &quot;last&quot; by way of `dojo.place`,
 * though can be set to &quot;first&quot;,&quot;after&quot;,&quot;before&quot;,&quot;last&quot;, &quot;replace&quot; or &quot;only&quot;<br>
 * to further control the placement of the new node relative to the refNode.<br>
 * 'refNode' is required if a 'pos' is specified.
 * @example
 * Create a DIV:
 * 	var n = dojo.create("div");
 * @example
 * Create a DIV with content:
 * 	var n = dojo.create("div", { innerHTML:"&lt;p&gt;hi&lt;/p&gt;" });
 * @example
 * Place a new DIV in the BODY, with no attributes set
 * 	var n = dojo.create("div", null, dojo.body());
 * @example
 * Create an UL, and populate it with LI's. Place the list as the first-child of a
 * node with id="someId":
 * 	var ul = dojo.create("ul", null, "someId", "first");
 * 	var items = ["one", "two", "three", "four"];
 * 	dojo.forEach(items, function(data){
 * 		dojo.create("li", { innerHTML: data }, ul);
 * 	});
 * @example
 * Create an anchor, with an href. Place in BODY:
 * 	dojo.create("a", { href:"foo.html", title:"Goto FOO!" }, dojo.body());
 * @example
 * Create a `dojo.NodeList()` from a new element (for syntatic sugar):
 * 	dojo.query(dojo.create('div'))
 * 		.addClass("newDiv")
 * 		.onclick(function(e){ console.log('clicked', e.target) })
 * 		.place("#someNode"); // redundant, but cleaner.
*/
dojo.create=function(tag, attrs, refNode, pos){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated: Use position() for border-box x/y/w/h<br>
 *	 or marginBox() for margin-box w/h/l/t.<br>
 *	 Returns an object representing a node's size and position.<br>
 * </blockquote>
 * Returns an object that measures margin-box (w)idth/(h)eight<br>
 * and absolute position x/y of the border-box. Also returned<br>
 * is computed (l)eft and (t)op values in pixels from the<br>
 * node's offsetParent as returned from marginBox().<br>
 * Return value will be in the form:<br>
 * 			{ l: 50, t: 200, w: 300: h: 150, x: 100, y: 300 }<br>
 * Does not act as a setter. If includeScroll is passed, the x and<br>
 * y params are affected as one would expect in dojo.position().
 * @param {DomNode|String} node 
 * @param {Boolean} [includeScroll] 
 * @returns {Object} -
*/
dojo.coords=function(node, includeScroll){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get or set a cookie.<br>
 * </blockquote>
 * If one argument is passed, returns the value of the cookie<br>
 * For two or more arguments, acts as a setter.
 * @param {String} name Name of the cookie
 * @param {String} [value] Value for the cookie
 * @param {dojo.__cookieProps} [props] Properties for the cookie
 * @returns {String|undefined} -
 * @example
 * set a cookie with the JSON-serialized contents of an object which
 * will expire 5 days from now:
 * 	dojo.cookie("configObj", dojo.toJson(config), { expires: 5 });
 * @example
 * de-serialize a cookie back into a JavaScript object:
 * 	var config = dojo.fromJson(dojo.cookie("configObj"));
 * @example
 * delete a cookie:
 * 	dojo.cookie("configObj", null, {expires: -1});
*/
dojo.cookie=function(name, value, props){};
/**
 * <b>Summary:</b><blockquote>
 *	 Getter/setter for the content-box of node.<br>
 * </blockquote>
 * Returns an object in the expected format of box (regardless if box is passed).<br>
 * The object might look like:<br>
 * `{ l: 50, t: 200, w: 300: h: 150 }`<br>
 * for a node offset from its parent 50px to the left, 200px from<br>
 * the top with a content width of 300px and a content-height of<br>
 * 150px. Note that the content box may have a much larger border<br>
 * or margin box, depending on the box model currently in use and<br>
 * CSS values set/inherited for node.<br>
 * While the getter will return top and left values, the<br>
 * setter only accepts setting the width and height.
 * @param {DomNode|String} node id or reference to DOM Node to get/set box for
 * @param {Object} [box] If passed, denotes that dojo.contentBox() should
 * update/set the content box for node. Box is an object in the<br>
 * above format, but only w (width) and h (height) are supported.<br>
 * All properties are optional if passed.
 * @returns {Object} -
*/
dojo.contentBox=function(node, box){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ensure that every time obj.event() is called, a message is published<br>
 *	 on the topic. Returns a handle which can be passed to<br>
 *	 dojo.disconnect() to disable subsequent automatic publication on<br>
 *	 the topic.<br>
 * </blockquote>
 * @param {String:} topic The name of the topic to publish.
 * @param {Object|null:} obj The source object for the event function. Defaults to kernel.global
 * if null.
 * @param {String:} event The name of the event function in obj.
 * I.e. identifies a property obj[event].
 * @example
 * 	dojo.connectPublisher("/ajax/start", dojo, "xhrGet");
*/
dojo.connectPublisher=function(topic, obj, event){};
/**
 * <b>Summary:</b><blockquote>
 *	 `dojo.connect` is the core event handling and delegation method in<br>
 *	 Dojo. It allows one function to &amp;quot;listen in&amp;quot; on the execution of<br>
 *	 any other, triggering the second whenever the first is called. Many<br>
 *	 listeners may be attached to a function, and source functions may<br>
 *	 be either regular function calls or DOM events.<br>
 * </blockquote>
 * Connects listeners to actions, so that after event fires, a<br>
 * listener is called with the same arguments passed to the original<br>
 * function.<br>
 * <br>
 * Since `dojo.connect` allows the source of events to be either a<br>
 * "regular" JavaScript function or a DOM event, it provides a uniform<br>
 * interface for listening to all the types of events that an<br>
 * application is likely to deal with though a single, unified<br>
 * interface. DOM programmers may want to think of it as<br>
 * "addEventListener for everything and anything".<br>
 * <br>
 * When setting up a connection, the `event` parameter must be a<br>
 * string that is the name of the method/event to be listened for. If<br>
 * `obj` is null, `kernel.global` is assumed, meaning that connections<br>
 * to global methods are supported but also that you may inadvertently<br>
 * connect to a global by passing an incorrect object name or invalid<br>
 * reference.<br>
 * <br>
 * `dojo.connect` generally is forgiving. If you pass the name of a<br>
 * function or method that does not yet exist on `obj`, connect will<br>
 * not fail, but will instead set up a stub method. Similarly, null<br>
 * arguments may simply be omitted such that fewer than 4 arguments<br>
 * may be required to set up a connection See the examples for details.<br>
 * <br>
 * The return value is a handle that is needed to<br>
 * remove this connection with `dojo.disconnect`.
 * @param {Object|null:} obj The source object for the event function.
 * Defaults to `kernel.global` if null.<br>
 * If obj is a DOM node, the connection is delegated<br>
 * to the DOM event manager (unless dontFix is true).
 * @param {String:} event String name of the event function in obj.
 * I.e. identifies a property `obj[event]`.
 * @param {Object|null} context The object that method will receive as &quot;this&quot;.
 * <br>
 * If context is null and method is a function, then method<br>
 * inherits the context of event.<br>
 * <br>
 * If method is a string then context must be the source<br>
 * object object for method (context[method]). If context is null,<br>
 * kernel.global is used.
 * @param {String|Function:} method A function reference, or name of a function in context.
 * The function identified by method fires after event does.<br>
 * method receives the same arguments as the event.<br>
 * See context argument comments for information on method's scope.
 * @param {Boolean} [dontFix] If obj is a DOM node, set dontFix to true to prevent delegation
 * of this connection to the DOM event manager.
 * @example
 * When obj.onchange(), do ui.update():
 * 	dojo.connect(obj, "onchange", ui, "update");
 * 	dojo.connect(obj, "onchange", ui, ui.update); // same
 * @example
 * Using return value for disconnect:
 * 	var link = dojo.connect(obj, "onchange", ui, "update");
 * 	...
 * 	dojo.disconnect(link);
 * @example
 * When onglobalevent executes, watcher.handler is invoked:
 * 	dojo.connect(null, "onglobalevent", watcher, "handler");
 * @example
 * When ob.onCustomEvent executes, customEventHandler is invoked:
 * 	dojo.connect(ob, "onCustomEvent", null, "customEventHandler");
 * 	dojo.connect(ob, "onCustomEvent", "customEventHandler"); // same
 * @example
 * When ob.onCustomEvent executes, customEventHandler is invoked
 * with the same scope (this):
 * 	dojo.connect(ob, "onCustomEvent", null, customEventHandler);
 * 	dojo.connect(ob, "onCustomEvent", customEventHandler); // same
 * @example
 * When globalEvent executes, globalHandler is invoked
 * with the same scope (this):
 * 	dojo.connect(null, "globalEvent", null, globalHandler);
 * 	dojo.connect("globalEvent", globalHandler); // same
*/
dojo.connect=function(obj, event, context, method, dontFix){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parses `str` for a color value. Accepts hex, rgb, and rgba<br>
 *	 style color values.<br>
 * </blockquote>
 * Acceptable input values for str may include arrays of any form<br>
 * accepted by dojo.colorFromArray, hex strings such as "#aaaaaa", or<br>
 * rgb or rgba strings such as "rgb(133, 200, 16)" or "rgba(10, 10,<br>
 * 10, 50)"
 * @param {String} str 
 * @param {dojo.Color} [obj] 
 * 
 * @returns {dojo.Color} -
*/
dojo.colorFromString=function(str, obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a `dojo.Color` instance from a string of the form<br>
 *	 &amp;quot;rgb(...)&amp;quot; or &amp;quot;rgba(...)&amp;quot;. Optionally accepts a `dojo.Color`<br>
 *	 object to update with the parsed value and return instead of<br>
 *	 creating a new object.<br>
 * </blockquote>
 * @param {String} color 
 * @param {dojo.Color} [obj] 
 * 
 * @returns {dojo.Color} -
*/
dojo.colorFromRgb=function(color, obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Converts a hex string with a '#' prefix to a color object.<br>
 *	 Supports 12-bit #rgb shorthand. Optionally accepts a<br>
 *	 `dojo.Color` object to update with the parsed value.<br>
 * </blockquote>
 * @param {String} color 
 * @param {dojo.Color} [obj] 
 * 
 * @returns {dojo.Color} -
 * @example
 *  var thing = dojo.colorFromHex("#ededed"); // grey, longhand
 * @example
 *  var thing = dojo.colorFromHex("#000"); // black, shorthand
*/
dojo.colorFromHex=function(color, obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds a `dojo.Color` from a 3 or 4 element array, mapping each<br>
 *	 element in sequence to the rgb(a) values of the color.<br>
 * </blockquote>
 * @param {Array} a 
 * @param {dojo.Color} [obj] 
 * 
 * @returns {dojo.Color} -
 * @example
 *  var myColor = dojo.colorFromArray([237,237,237,0.5]); // grey, 50% alpha
*/
dojo.colorFromArray=function(a, obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clones objects (including DOM nodes) and all children.<br>
 *	 Warning: do not clone cyclic structures.<br>
 * </blockquote>
 * @param {The} src object to clone
*/
dojo.clone=function(src){};
/**
 * <b>Summary:</b><blockquote>
 *	 A getter and setter for storing the string content associated with the<br>
 *	 module and url arguments.<br>
 * </blockquote>
 * If module is a string that contains slashes, then it is interpretted as a fully<br>
 * resolved path (typically a result returned by require.toUrl), and url should not be<br>
 * provided. This is the preferred signature. If module is a string that does not<br>
 * contain slashes, then url must also be provided and module and url are used to<br>
 * call `dojo.moduleUrl()` to generate a module URL. This signature is deprecated.<br>
 * If value is specified, the cache value for the moduleUrl will be set to<br>
 * that value. Otherwise, dojo.cache will fetch the moduleUrl and store it<br>
 * in its internal cache and return that cached value for the URL. To clear<br>
 * a cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the<br>
 * the URL contents, only modules on the same domain of the page can use this capability.<br>
 * The build system can inline the cache values though, to allow for xdomain hosting.
 * @param {String||Object} module If a String with slashes, a fully resolved path; if a String without slashes, the
 * module name to use for the base part of the URL, similar to module argument<br>
 * to `dojo.moduleUrl`. If an Object, something that has a .toString() method that<br>
 * generates a valid path for the cache item. For example, a dojo._Url object.
 * @param {String} url The rest of the path to append to the path derived from the module argument. If
 * module is an object, then this second argument should be the &quot;value&quot; argument instead.
 * @param {String||Object} [value] If a String, the value to use in the cache for the module/url combination.
 * If an Object, it can have two properties: value and sanitize. The value property<br>
 * should be the value to use in the cache, and sanitize can be set to true or false,<br>
 * to indicate if XML declarations should be removed from the value and if the HTML<br>
 * inside a body tag in the value should be extracted as the real value. The value argument<br>
 * or the value property on the value argument are usually only used by the build system<br>
 * as it inlines cache content.
 * @returns {String} -
 * @example
 * To ask dojo.cache to fetch content and store it in the cache (the dojo["cache"] style
 * of call is used to avoid an issue with the build system erroneously trying to intern
 * this example. To get the build system to intern your dojo.cache calls, use the
 * "dojo.cache" style of call):
 *  //If template.html contains "&lt;h1&gt;Hello&lt;/h1&gt;" that will be
 *  //the value for the text variable.
 *  var text = dojo["cache"]("my.module", "template.html");
 * @example
 * To ask dojo.cache to fetch content and store it in the cache, and sanitize the input
 * (the dojo["cache"] style of call is used to avoid an issue with the build system
 * erroneously trying to intern this example. To get the build system to intern your
 * dojo.cache calls, use the "dojo.cache" style of call):
 *  //If template.html contains "&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;", the
 *  //text variable will contain just "&lt;h1&gt;Hello&lt;/h1&gt;".
 *  var text = dojo["cache"]("my.module", "template.html", {sanitize: true});
 * @example
 * Same example as previous, but demostrates how an object can be passed in as
 * the first argument, then the value argument can then be the second argument.
 *  //If template.html contains "&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;", the
 *  //text variable will contain just "&lt;h1&gt;Hello&lt;/h1&gt;".
 *  var text = dojo["cache"](new dojo._Url("my/module/template.html"), {sanitize: true});
*/
dojo.cache=function(module, url, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns DOM node with matching `id` attribute or `null`<br>
 *	 if not found. If `id` is a DomNode, this function is a no-op.<br>
 * </blockquote>
 * @param {String|DOMNode} id A string to match an HTML id attribute or a reference to a DOM Node
 * @param {Document} [doc] Document to work in. Defaults to the current value of
 * dojo.doc.  Can be used to retrieve<br>
 * node references from other documents.
 * @returns {DOMNode} -
 * @example
 * Look up a node by ID:
 * 	var n = dojo.byId("foo");
 * @example
 * Check if a node exists, and use it.
 * 	var n = dojo.byId("bar");
 * 	if(n){ doStuff() ... }
 * @example
 * Allow string or DomNode references to be passed to a custom function:
 * 	var foo = function(nodeOrId){
 * 		nodeOrId = dojo.byId(nodeOrId);
 * 		// ... more stuff
 * 	}
*/
dojo.byId=function(id, doc){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the body element of the document<br>
 *	 return the body object associated with dojo.doc<br>
 * </blockquote>
 * @returns {Node} -
 * @example
 * 	dojo.body().appendChild(dojo.doc.createElement('div'));
*/
dojo.body=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Blend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend,<br>
 *	 can reuse a previously allocated dojo.Color object for the result<br>
 * </blockquote>
 * @param {dojo.Color} start 
 * @param {dojo.Color} end 
 * @param {Number} weight 
 * @param {dojo.Color} [obj] 
 * @returns {dojo.Color} -
*/
dojo.blendColors=function(start, end, weight, obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Utility for unobtrusive/progressive event binding, DOM traversal,<br>
 *	 and manipulation.<br>
 * </blockquote>
 * A very simple, lightweight mechanism for applying code to<br>
 * existing documents, based around `dojo.query` (CSS3 selectors) for node selection,<br>
 * and a simple two-command API: `dojo.behavior.add()` and `dojo.behavior.apply()`;<br>
 * <br>
 * Behaviors apply to a given page, and are registered following the syntax<br>
 * options described by `dojo.behavior.add` to match nodes to actions, or "behaviors".<br>
 * <br>
 * Added behaviors are applied to the current DOM when .apply() is called,<br>
 * matching only new nodes found since .apply() was last called.<br>
*/
dojo.behavior=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets or sets an attribute on an HTML element.<br>
 * </blockquote>
 * Handles normalized getting and setting of attributes on DOM<br>
 * Nodes. If 2 arguments are passed, and a the second argument is a<br>
 * string, acts as a getter.<br>
 * <br>
 * If a third argument is passed, or if the second argument is a<br>
 * map of attributes, acts as a setter.<br>
 * <br>
 * When passing functions as values, note that they will not be<br>
 * directly assigned to slots on the node, but rather the default<br>
 * behavior will be removed and the new behavior will be added<br>
 * using `dojo.connect()`, meaning that event handler properties<br>
 * will be normalized and that some caveats with regards to<br>
 * non-standard behaviors for onsubmit apply. Namely that you<br>
 * should cancel form submission using `dojo.stopEvent()` on the<br>
 * passed event object instead of returning a boolean value from<br>
 * the handler itself.
 * @param {DOMNode|String} node id or reference to the element to get or set the attribute on
 * @param {String|Object} name the name of the attribute to get or set.
 * @param {String} [value] The value to set for the attribute
 * @example
 * 	// get the current value of the "foo" attribute on a node
 * 	dojo.attr(dojo.byId("nodeId"), "foo");
 * 	// or we can just pass the id:
 * 	dojo.attr("nodeId", "foo");
 * @example
 * 	// use attr() to set the tab index
 * 	dojo.attr("nodeId", "tabIndex", 3);
 * @example
 * Set multiple values at once, including event handlers:
 * 	dojo.attr("formId", {
 * 		"foo": "bar",
 * 		"tabIndex": -1,
 * 		"method": "POST",
 * 		"onsubmit": function(e){
 * 			// stop submitting the form. Note that the IE behavior
 * 			// of returning true or false will have no effect here
 * 			// since our handler is connect()ed to the built-in
 * 			// onsubmit behavior and so we need to use
 * 			// dojo.stopEvent() to ensure that the submission
 * 			// doesn't proceed.
 * 			dojo.stopEvent(e);
 * 
 * 			// submit the form with Ajax
 * 			dojo.xhrPost({ form: "formId" });
 * 		}
 * 	});
 * @example
 * Style is s special case: Only set with an object hash of styles
 * 	dojo.attr("someNode",{
 * 		id:"bar",
 * 		style:{
 * 			width:"200px", height:"100px", color:"#000"
 * 		}
 * 	});
 * @example
 * Again, only set style as an object hash of styles:
 * 	var obj = { color:"#fff", backgroundColor:"#000" };
 * 	dojo.attr("someNode", "style", obj);
 * 
 * 	// though shorter to use `dojo.style()` in this case:
 * 	dojo.style("someNode", obj);
*/
dojo.attr=function(node, name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation that will transition the properties of<br>
 *	 node defined in `args` depending how they are defined in<br>
 *	 `args.properties`<br>
 * </blockquote>
 * `dojo.animateProperty` is the foundation of most `dojo.fx`<br>
 * animations. It takes an object of "properties" corresponding to<br>
 * style properties, and animates them in parallel over a set<br>
 * duration.
 * @param {dojo.__AnimArgs} args 
 * @returns {dojo.Animation} -
 * @example
 * A simple animation that changes the width of the specified node.
 * 	dojo.animateProperty({
 * 		node: "nodeId",
 * 		properties: { width: 400 },
 * 	}).play();
 * Dojo figures out the start value for the width and converts the
 * integer specified for the width to the more expressive but
 * verbose form `{ width: { end: '400', units: 'px' } }` which you
 * can also specify directly. Defaults to 'px' if ommitted.
 * @example
 * Animate width, height, and padding over 2 seconds... the
 * pedantic way:
 * 	dojo.animateProperty({ node: node, duration:2000,
 * 		properties: {
 * 			width: { start: '200', end: '400', units:"px" },
 * 			height: { start:'200', end: '400', units:"px" },
 * 			paddingTop: { start:'5', end:'50', units:"px" }
 * 		}
 * 	}).play();
 * Note 'paddingTop' is used over 'padding-top'. Multi-name CSS properties
 * are written using "mixed case", as the hyphen is illegal as an object key.
 * @example
 * Plug in a different easing function and register a callback for
 * when the animation ends. Easing functions accept values between
 * zero and one and return a value on that basis. In this case, an
 * exponential-in curve.
 * 	dojo.animateProperty({
 * 		node: "nodeId",
 * 		// dojo figures out the start value
 * 		properties: { width: { end: 400 } },
 * 		easing: function(n){
 * 			return (n==0) ? 0 : Math.pow(2, 10 * (n - 1));
 * 		},
 * 		onEnd: function(node){
 * 			// called when the animation finishes. The animation
 * 			// target is passed to this function
 * 		}
 * 	}).play(500); // delay playing half a second
 * @example
 * Like all `dojo.Animation`s, animateProperty returns a handle to the
 * Animation instance, which fires the events common to Dojo FX. Use `dojo.connect`
 * to access these events outside of the Animation definiton:
 * 	var anim = dojo.animateProperty({
 * 		node:"someId",
 * 		properties:{
 * 			width:400, height:500
 * 		}
 * 	});
 * 	dojo.connect(anim,"onEnd", function(){
 * 		console.log("animation ended");
 * 	});
 * 	// play the animation now:
 * 	anim.play();
 * @example
 * Each property can be a function whose return value is substituted along.
 * Additionally, each measurement (eg: start, end) can be a function. The node
 * reference is passed direcly to callbacks.
 * 	dojo.animateProperty({
 * 		node:"mine",
 * 		properties:{
 * 			height:function(node){
 * 				// shrink this node by 50%
 * 				return dojo.position(node).h / 2
 * 			},
 * 			width:{
 * 				start:function(node){ return 100; },
 * 				end:function(node){ return 200; }
 * 			}
 * 		}
 * 	}).play();
*/
dojo.animateProperty=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simpler interface to `dojo.animateProperty()`, also returns<br>
 *	 an instance of `dojo.Animation` but begins the animation<br>
 *	 immediately, unlike nearly every other Dojo animation API.<br>
 * </blockquote>
 * `dojo.anim` is a simpler (but somewhat less powerful) version<br>
 * of `dojo.animateProperty`.  It uses defaults for many basic properties<br>
 * and allows for positional parameters to be used in place of the<br>
 * packed "property bag" which is used for other Dojo animation<br>
 * methods.<br>
 * <br>
 * The `dojo.Animation` object returned from `dojo.anim` will be<br>
 * already playing when it is returned from this function, so<br>
 * calling play() on it again is (usually) a no-op.
 * @param {DOMNode|String} node a DOM node or the id of a node to animate CSS properties on
 * @param {Object} properties 
 * @param {Integer} [duration] The number of milliseconds over which the animation
 * should run. Defaults to the global animation default duration<br>
 * (350ms).
 * @param {Function} [easing] An easing function over which to calculate acceleration
 * and deceleration of the animation through its duration.<br>
 * A default easing algorithm is provided, but you may<br>
 * plug in any you wish. A large selection of easing algorithms<br>
 * are available in `dojo.fx.easing`.
 * @param {Function} [onEnd] A function to be called when the animation finishes
 * running.
 * @param {Integer} [delay] The number of milliseconds to delay beginning the
 * animation by. The default is 0.
 * @returns {dojo.Animation} -
 * @example
 * Fade out a node
 * 	dojo.anim("id", { opacity: 0 });
 * @example
 * Fade out a node over a full second
 * 	dojo.anim("id", { opacity: 0 }, 1000);
*/
dojo.anim=function(node, properties, duration, easing, onEnd, delay){};
/**
 * <b>Summary:</b><blockquote>
 *	 registers a function to be triggered when window.onunload<br>
 *	 fires.<br>
 * </blockquote>
 * The first time that addOnWindowUnload is called Dojo<br>
 * will register a page listener to trigger your unload<br>
 * handler with. Note that registering these handlers may<br>
 * destory "fastback" page caching in browsers that support<br>
 * it. Be careful trying to modify the DOM or access<br>
 * JavaScript properties during this phase of page unloading:<br>
 * they may not always be available. Consider<br>
 * dojo.addOnUnload() if you need to modify the DOM or do<br>
 * heavy JavaScript work since it fires at the eqivalent of<br>
 * the page's "onbeforeunload" event.
 * @param {Object} [obj] 
 * @param {String|Function} [functionName] 
 * @example
 * 	dojo.addOnWindowUnload(functionPointer)
 * 	dojo.addOnWindowUnload(object, "functionName")
 * 	dojo.addOnWindowUnload(object, function(){ /// ... ///});
 * @example
 *  dojo.addOnWindowUnload(functionPointer)
 *  dojo.addOnWindowUnload(object, "functionName");
 *  dojo.addOnWindowUnload(object, function(){ /// ... ///});
*/
dojo.addOnWindowUnload=function(obj, functionName){};
/**
 * <b>Summary:</b><blockquote>
 *	 registers a function to be triggered when the page unloads.<br>
 * </blockquote>
 * The first time that addOnUnload is called Dojo will<br>
 * register a page listener to trigger your unload handler<br>
 * with.<br>
 * <br>
 * In a browser enviroment, the functions will be triggered<br>
 * during the window.onbeforeunload event. Be careful of doing<br>
 * too much work in an unload handler. onbeforeunload can be<br>
 * triggered if a link to download a file is clicked, or if<br>
 * the link is a javascript: link. In these cases, the<br>
 * onbeforeunload event fires, but the document is not<br>
 * actually destroyed. So be careful about doing destructive<br>
 * operations in a dojo.addOnUnload callback.<br>
 * <br>
 * Further note that calling dojo.addOnUnload will prevent<br>
 * browsers from using a "fast back" cache to make page<br>
 * loading via back button instantaneous.
 * @param {Object|Function} [obj] 
 * @param {String|Function} [functionName] 
 * @example
 *  dojo.addOnUnload(functionPointer)
 *  dojo.addOnUnload(object, "functionName")
 *  dojo.addOnUnload(object, function(){ /// ... ///});
*/
dojo.addOnUnload=function(obj, functionName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a function to execute on DOM content loaded and all requested modules have arrived and been evaluated.<br>
 * </blockquote>
 * @param {Integer} [priority] The order in which to exec this callback relative to other callbacks, defaults to 1000
 * @param {Object|Function} [context] The context in which to run execute callback, or a callback if not using context
 * @param {Function} [callback] The function to execute.
 * @example
 * Simple DOM and Modules ready syntax
 * 	dojo.ready(function(){ alert("Dom ready!"); });
 * @example
 * Using a priority
 * 	dojo.ready(2, function(){ alert("low priority ready!"); })
 * @example
 * Using context
 * 	dojo.ready(foo, function(){
 * 		// in here, this == foo
 * 	})
 * @example
 * Using dojo.hitch style args:
 * 	var foo = { dojoReady: function(){ console.warn(this, "dojo dom and modules ready."); } };
 * 	dojo.ready(foo, "dojoReady");
*/
dojo.addOnLoad=function(priority, context, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds the specified classes to the end of the class list on the<br>
 *	 passed node. Will not re-apply duplicate classes.<br>
 * </blockquote>
 * @param {String|DOMNode} node String ID or DomNode reference to add a class string too
 * @param {String|Array} classStr A String class name to add, or several space-separated class names,
 * or an array of class names.
 * @example
 * Add a class to some node:
 * 	dojo.addClass("someNode", "anewClass");
 * @example
 * Add two classes at once:
 * 	dojo.addClass("someNode", "firstClass secondClass");
 * @example
 * Add two classes at once (using array):
 * 	dojo.addClass("someNode", ["firstClass", "secondClass"]);
 * @example
 * Available in `dojo.NodeList` for multiple additions
 * 	dojo.query("ul &gt; li").addClass("firstLevel");
*/
dojo.addClass=function(node, classStr){};
/**
 * <b>Summary:</b><blockquote>
 *	 does the work of portably generating a new XMLHTTPRequest object.<br>
 * </blockquote>
 * @param {mixed} args 
 * @private
*/
dojo._xhrObj=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo._toPixelValue`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} value 
 * @private
*/
dojo._toPixelValue=function(node, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.toDom`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @param {mixed} frag 
 * @param {mixed} doc 
 * @private
*/
dojo._toDom=function(frag, doc){};
/**
 * <b>Summary:</b><blockquote>
 *	 Converts an array-like object (i.e. arguments, DOMCollection) to an<br>
 *	 array. Returns a new Array with the elements of obj.<br>
 * </blockquote>
 * @param {Object} obj the object to &quot;arrayify&quot;. We expect the object to have, at a
 * minimum, a length property which corresponds to integer-indexed<br>
 * properties.
 * @param {Number} [offset] the location in obj to start iterating from. Defaults to 0.
 * Optional.
 * @param {Array} [startWith] An array to pack with the properties of obj. If provided,
 * properties in obj are appended at the end of startWith and<br>
 * startWith is the returned array.
 * @private
*/
dojo._toArray=function(obj, offset, startWith){};
/**
 * @param {mixed} depth 
 * @private
*/
dojo._spidermonkeyCurrentFile=function(depth){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove some data from this node<br>
 * </blockquote>
 * @param {String|DomNode} node The node reference to remove data from
 * @param {String} [key] If omitted, remove all data in this dataset.
 * If passed, remove only the passed `key` in the associated dataset
 * @private
*/
dojo._removeNodeData=function(node, key){};
/**
 * <b>Summary:</b><blockquote>
 *	 Private helper for dojo.NodeList.data for single node data access. Refer to NodeList.data<br>
 *	 documentation for more information.<br>
 * </blockquote>
 * @param {String|DomNode} node The node to associate data with
 * @param {Object|String} [key] If an object, act as a setter and iterate over said object setting data items as defined.
 * If a string, and `value` present, set the data for defined `key` to `value`<br>
 * If a string, and `value` absent, act as a getter, returning the data associated with said `key`
 * @param {Anything} [value] The value to set for said `key`, provided `key` is a string (and not an object)
 * @private
 * @returns {Object|Anything|Nothing} -
*/
dojo._nodeData=function(node, key, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Copies/adds all properties of source to dest; returns dest.<br>
 * </blockquote>
 * All properties, including functions (sometimes termed "methods"), excluding any non-standard extensions<br>
 * found in Object.prototype, are copied/added to dest. Copying/adding each particular property is<br>
 * delegated to copyFunc (if any); copyFunc defaults to the Javascript assignment operator if not provided.<br>
 * Notice that by default, _mixin executes a so-called "shallow copy" and aggregate types are copied/added by reference.
 * @param {Object:} dest The object to which to copy/add all properties contained in source.
 * @param {Object:} source The object from which to draw all properties to copy into dest.
 * @param {Function:} [copyFunc] The process used to copy/add a property in source; defaults to the Javascript assignment operator.
 * @private
*/
dojo._mixin=function(dest, source, copyFunc){};
/**
 * @param {mixed} uri 
 * @param {mixed} cb 
 * @private
*/
dojo._loadUri=function(uri, cb){};
/**
 * @param {mixed} e 
 * @private
*/
dojo._loadInit=function(e){};
/**
 * @param {mixed} http 
 * @private
 * @returns {Boolean} -
*/
dojo._isDocumentOk=function(http){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.isBodyLtr`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @private
*/
dojo._isBodyLtr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Watches the io request represented by dfd to see if it completes.<br>
 * </blockquote>
 * @param {Deferred} dfd The Deferred object to watch.
 * @param {Function} validCheck Function used to check if the IO request is still valid. Gets the dfd
 * object as its only argument.
 * @param {Function} ioCheck Function used to check if basic IO call worked. Gets the dfd
 * object as its only argument.
 * @param {Function} resHandle Function used to process response. Gets the dfd
 * object as its only argument.
 * @private
*/
dojo._ioWatch=function(dfd, validCheck, ioCheck, resHandle){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets up the Deferred and ioArgs property on the Deferred so it<br>
 *	 can be used in an io call.<br>
 * </blockquote>
 * @param {dojo.__IoArgs} args The args object passed into the public io call. Recognized properties on
 * the args object are:
 * @param {Function} canceller The canceller function used for the Deferred object. The function
 * will receive one argument, the Deferred object that is related to the<br>
 * canceller.
 * @param {Function} okHandler The first OK callback to be registered with Deferred. It has the opportunity
 * to transform the OK response. It will receive one argument -- the Deferred<br>
 * object returned from this function.
 * @param {Function} errHandler The first error callback to be registered with Deferred. It has the opportunity
 * to do cleanup on an error. It will receive two arguments: error (the<br>
 * Error object) and dfd, the Deferred object returned from this function.
 * @private
*/
dojo._ioSetArgs=function(args, canceller, okHandler, errHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 If dojo.publish is available, publish topics<br>
 *	 about the start of a request queue and/or the<br>
 *	 the beginning of request.<br>
 * </blockquote>
 * Used by IO transports. An IO transport should<br>
 * call this method before making the network connection.
 * @param {Deferred} dfd 
 * @private
*/
dojo._ioNotifyStart=function(dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancels all pending IO requests, regardless of IO type<br>
 *	 (xhr, script, iframe).<br>
 * </blockquote>
 * @private
*/
dojo._ioCancelAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds query params discovered by the io deferred construction to the URL.<br>
 *	 Only use this for operations which are fundamentally GET-type operations.<br>
 * </blockquote>
 * @param {dojo.__IoCallbackArgs} ioArgs 
 * @private
*/
dojo._ioAddQueryToUrl=function(ioArgs){};
/**
 * @param {mixed} g 
 * @param {mixed} d 
 * @param {mixed} f 
 * @private
*/
dojo._inContext=function(g, d, f){};
/**
 * <b>Summary:</b><blockquote>
 *	 Read the contents of the specified uri and return those contents.<br>
 * </blockquote>
 * @param {URI} uri A relative or absolute uri. If absolute, it still must be in
 * the same &quot;domain&quot; as we are.
 * @param {Boolean} fail_ok Default false. If fail_ok and loading fails, return null
 * instead of throwing.
 * @private
 * 
 * @returns {String} -failure and failure is okay (an exception otherwise)
*/
dojo._getText=function(uri, fail_ok){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.getPadExtents`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} computedStyle 
 * @private
*/
dojo._getPadExtents=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.getPadBorderExtents`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} computedStyle 
 * @private
*/
dojo._getPadBorderExtents=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.getMarginSize`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} computedStyle 
 * @private
*/
dojo._getMarginSize=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.getMarginExtents`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} computedStyle 
 * @private
*/
dojo._getMarginExtents=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.getMarginBox`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} computedStyle 
 * @private
*/
dojo._getMarginBox=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.getIeDocumentElementOffset`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @private
*/
dojo._getIeDocumentElementOffset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.getContentBox`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} computedStyle 
 * @private
*/
dojo._getContentBox=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.getBorderExtents`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} computedStyle 
 * @private
*/
dojo._getBorderExtents=function(node, computedStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 super expensive: GC all data in the data for nodes that no longer exist in the dom.<br>
 * </blockquote>
 * super expensive: GC all data in the data for nodes that no longer exist in the dom.<br>
 * MUCH safer to do this yourself, manually, on a per-node basis (via `NodeList.removeData()`)<br>
 * provided as a stop-gap for exceptionally large/complex applications with constantly changing<br>
 * content regions (eg: a dijit.layout.ContentPane with replacing data)<br>
 * There is NO automatic GC going on. If you dojo.destroy() a node, you should _removeNodeData<br>
 * prior to destruction.
 * @private
*/
dojo._gcNodeData=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.fixIeBiDiScrollLeft`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @param {mixed} scrollLeft 
 * @private
*/
dojo._fixIeBiDiScrollLeft=function(scrollLeft){};
/**
 * @private
*/
dojo._filterQueryResult=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation that will fade the node defined by<br>
 *	 args.node from the start to end values passed (args.start<br>
 *	 args.end) (end is mandatory, start is optional)<br>
 * </blockquote>
 * @param {Object} args 
 * @private
 * @returns {dojo.Animation} -
*/
dojo._fade=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds escape sequences for non-visual characters, double quote and<br>
 *	 backslash and surrounds with double quotes to form a valid string<br>
 *	 literal.<br>
 * </blockquote>
 * @private
*/
dojo._escapeString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.docScroll`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @private
*/
dojo._docScroll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Existing alias for `dojo.destroy`. Deprecated, will be removed in 2.0.<br>
 * </blockquote>
 * @param {mixed} node 
 * @private
*/
dojo._destroyElement=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 The default easing function for dojo.Animation(s)<br>
 * </blockquote>
 * @param {Decimal} [n] 
 * @private
 * @returns {Decimal} -
*/
dojo._defaultEasing=function(n){};
/**
 * @param {mixed} obj 
 * @param {mixed} event 
 * @param {mixed} context 
 * @param {mixed} method 
 * @param {mixed} dontFix 
 * @private
*/
dojo._connect=function(obj, event, context, method, dontFix){};
/**
 * @private
*/
dojo.__cookieProps=function(){};
/**
 * @param {mixed} kwArgs 
 * @private
*/
dojo.__backArgs=function(kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 In addition to the properties listed for the dojo._IoArgs type,<br>
 *	 the following properties are allowed for dojo.xhr* methods.<br>
 * </blockquote>
 * @private
*/
dojo.__XhrArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a list of IO topics that can be published<br>
 *	 if djConfig.ioPublish is set to true. IO topics can be<br>
 *	 published for any Input/Output, network operation. So,<br>
 *	 dojo.xhr, dojo.io.script and dojo.io.iframe can all<br>
 *	 trigger these topics to be published.<br>
 * </blockquote>
 * @private
*/
dojo.__IoPublish=function(){};
/**
 * @param {Object} args the original object argument to the IO call.
 * @param {XMLHttpRequest} xhr For XMLHttpRequest calls only, the
 * XMLHttpRequest object that was used for the<br>
 * request.
 * @param {String} url The final URL used for the call. Many times it
 * will be different than the original args.url<br>
 * value.
 * @param {String} query For non-GET requests, the
 * name1=value1&amp;name2=value2 parameters sent up in<br>
 * the request.
 * @param {String} handleAs The final indicator on how the response will be
 * handled.
 * @param {String} id For dojo.io.script calls only, the internal
 * script ID used for the request.
 * @param {Boolean} canDelete For dojo.io.script calls only, indicates
 * whether the script tag that represents the<br>
 * request can be deleted after callbacks have<br>
 * been called. Used internally to know when<br>
 * cleanup can happen on JSONP-type requests.
 * @param {Object} json For dojo.io.script calls only: holds the JSON
 * response for JSONP-type requests. Used<br>
 * internally to hold on to the JSON responses.<br>
 * You should not need to access it directly --<br>
 * the same object should be passed to the success<br>
 * callbacks directly.
 * @private
*/
dojo.__IoCallbackArgs=function(args, xhr, url, query, handleAs, id, canDelete, json){};
/**
 * @private
*/
dojo.__IoArgs=function(){};
/**
 * @param {DOMNode|String} node The node referenced in the animation
 * @param {Integer} [duration] Duration of the animation in milliseconds.
 * @param {Function} [easing] An easing function.
 * @private
*/
dojo.__FadeArgs=function(node, duration, easing){};
/**
 * @private
*/
dojo.__AnimArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 dojo._Line is the object used to generate values from a start value<br>
 *	 to an end value<br>
 * </blockquote>
 * @param {int} start Beginning value for range
 * @param {int} end Ending value for range
 * @private
*/
dojo._Line=function(start, end){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for objects that provide named properties with optional getter/setter<br>
 *	 control and the ability to watch for property changes<br>
 * </blockquote>
 * @param {mixed} mixin 
 * @example
 * 	var obj = new dojo.Stateful();
 * 	obj.watch("foo", function(){
 * 		console.log("foo changed to " + this.get("foo"));
 * 	});
 * 	obj.set("foo","bar");
*/
dojo.Stateful=function(mixin){};
/**
*/
dojo.Nodelist=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 dojo.NodeList is an of Array-like object which adds syntactic<br>
 *	 sugar for chaining, common iteration operations, animation, and<br>
 *	 node manipulation. NodeLists are most often returned as the<br>
 *	 result of dojo.query() calls.<br>
 * </blockquote>
 * dojo.NodeList instances provide many utilities that reflect<br>
 * core Dojo APIs for Array iteration and manipulation, DOM<br>
 * manipulation, and event handling. Instead of needing to dig up<br>
 * functions in the dojo.* namespace, NodeLists generally make the<br>
 * full power of Dojo available for DOM manipulation tasks in a<br>
 * simple, chainable way.
 * @param {mixed} array 
 * @example
 * create a node list from a node
 * 	new dojo.NodeList(dojo.byId("foo"));
 * @example
 * get a NodeList from a CSS query and iterate on it
 * 	var l = dojo.query(".thinger");
 * 	l.forEach(function(node, index, nodeList){
 * 		console.log(index, node.innerHTML);
 * 	});
 * @example
 * use native and Dojo-provided array methods to manipulate a
 * NodeList without needing to use dojo.* functions explicitly:
 * 	var l = dojo.query(".thinger");
 * 	// since NodeLists are real arrays, they have a length
 * 	// property that is both readable and writable and
 * 	// push/pop/shift/unshift methods
 * 	console.log(l.length);
 * 	l.push(dojo.create("span"));
 * 
 * 	// dojo's normalized array methods work too:
 * 	console.log( l.indexOf(dojo.byId("foo")) );
 * 	// ...including the special "function as string" shorthand
 * 	console.log( l.every("item.nodeType == 1") );
 * 
 * 	// NodeLists can be [..] indexed, or you can use the at()
 * 	// function to get specific items wrapped in a new NodeList:
 * 	var node = l[3]; // the 4th element
 * 	var newList = l.at(1, 3); // the 2nd and 4th elements
 * @example
 * the style functions you expect are all there too:
 * 	// style() as a getter...
 * 	var borders = dojo.query(".thinger").style("border");
 * 	// ...and as a setter:
 * 	dojo.query(".thinger").style("border", "1px solid black");
 * 	// class manipulation
 * 	dojo.query("li:nth-child(even)").addClass("even");
 * 	// even getting the coordinates of all the items
 * 	var coords = dojo.query(".thinger").coords();
 * @example
 * DOM manipulation functions from the dojo.* namespace area also
 * available:
 * 	// remove all of the elements in the list from their
 * 	// parents (akin to "deleting" them from the document)
 * 	dojo.query(".thinger").orphan();
 * 	// place all elements in the list at the front of #foo
 * 	dojo.query(".thinger").place("foo", "first");
 * @example
 * Event handling couldn't be easier. `dojo.connect` is mapped in,
 * and shortcut handlers are provided for most DOM events:
 * 	// like dojo.connect(), but with implicit scope
 * 	dojo.query("li").connect("onclick", console, "log");
 * 
 * 	// many common event handlers are already available directly:
 * 	dojo.query("li").onclick(console, "log");
 * 	var toggleHovered = dojo.hitch(dojo, "toggleClass", "hovered");
 * 	dojo.query("p")
 * 		.onmouseenter(toggleHovered)
 * 		.onmouseleave(toggleHovered);
 * @example
 * chainability is a key advantage of NodeLists:
 * 	dojo.query(".thinger")
 * 		.onclick(function(e){ /// ... /// })
 * 		.at(1, 3, 8) // get a subset
 * 			.style("padding", "5px")
 * 			.forEach(console.log);
*/
dojo.NodeList=function(array){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides event handling for a group of Deferred objects.<br>
 * </blockquote>
 * DeferredList takes an array of existing deferreds and returns a new deferred of its own<br>
 * this new deferred will typically have its callback fired when all of the deferreds in<br>
 * the given list have fired their own deferreds.  The parameters `fireOnOneCallback` and<br>
 * fireOnOneErrback, will fire before all the deferreds as appropriate
 * @param {Array} list The list of deferreds to be synchronizied with this DeferredList
 * @param {Boolean} [fireOnOneCallback] Will cause the DeferredLists callback to be fired as soon as any
 * of the deferreds in its list have been fired instead of waiting until<br>
 * the entire list has finished<br>
 * fireonOneErrback:<br>
 * Will cause the errback to fire upon any of the deferreds errback
 * @param {Boolean} [fireOnOneErrback] 
 * @param {Boolean} [consumeErrors] 
 * @param {Function} [canceller] A deferred canceller function, see dojo.Deferred
*/
dojo.DeferredList=function(list, fireOnOneCallback, fireOnOneErrback, consumeErrors, canceller){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deferreds provide a generic means for encapsulating an asynchronous<br>
 *	 operation and notifying users of the completion and result of the operation.<br>
 * </blockquote>
 * The dojo.Deferred API is based on the concept of promises that provide a<br>
 * generic interface into the eventual completion of an asynchronous action.<br>
 * The motivation for promises fundamentally is about creating a<br>
 * separation of concerns that allows one to achieve the same type of<br>
 * call patterns and logical data flow in asynchronous code as can be<br>
 * achieved in synchronous code. Promises allows one<br>
 * to be able to call a function purely with arguments needed for<br>
 * execution, without conflating the call with concerns of whether it is<br>
 * sync or async. One shouldn't need to alter a call's arguments if the<br>
 * implementation switches from sync to async (or vice versa). By having<br>
 * async functions return promises, the concerns of making the call are<br>
 * separated from the concerns of asynchronous interaction (which are<br>
 * handled by the promise).<br>
 * <br>
 * The dojo.Deferred is a type of promise that provides methods for fulfilling the<br>
 * promise with a successful result or an error. The most important method for<br>
 * working with Dojo's promises is the then() method, which follows the<br>
 * CommonJS proposed promise API. An example of using a Dojo promise:<br>
 * <br>
 * 	var resultingPromise = someAsyncOperation.then(function(result){<br>
 * 		... handle result ...<br>
 * 	},<br>
 * 	function(error){<br>
 * 		... handle error ...<br>
 * 	});<br>
 * <br>
 * The .then() call returns a new promise that represents the result of the<br>
 * execution of the callback. The callbacks will never affect the original promises value.<br>
 * <br>
 * The dojo.Deferred instances also provide the following functions for backwards compatibility:<br>
 * <br>
 * * addCallback(handler)<br>
 * * addErrback(handler)<br>
 * * callback(result)<br>
 * * errback(result)<br>
 * <br>
 * Callbacks are allowed to return promises themselves, so<br>
 * you can build complicated sequences of events with ease.<br>
 * <br>
 * The creator of the Deferred may specify a canceller.  The canceller<br>
 * is a function that will be called if Deferred.cancel is called<br>
 * before the Deferred fires. You can use this to implement clean<br>
 * aborting of an XMLHttpRequest, etc. Note that cancel will fire the<br>
 * deferred with a CancelledError (unless your canceller returns<br>
 * another kind of error), so the errbacks should be prepared to<br>
 * handle that error for cancellable Deferreds.
 * @param {Function} [canceller] 
 * @example
 * 	var deferred = new dojo.Deferred();
 * 	setTimeout(function(){ deferred.callback({success: true}); }, 1000);
 * 	return deferred;
 * @example
 * Deferred objects are often used when making code asynchronous. It
 * may be easiest to write functions in a synchronous manner and then
 * split code using a deferred to trigger a response to a long-lived
 * operation. For example, instead of register a callback function to
 * denote when a rendering operation completes, the function can
 * simply return a deferred:
 * 
 * 	// callback style:
 * 	function renderLotsOfData(data, callback){
 * 		var success = false
 * 		try{
 * 			for(var x in data){
 * 				renderDataitem(data[x]);
 * 			}
 * 			success = true;
 * 		}catch(e){ }
 * 		if(callback){
 * 			callback(success);
 * 		}
 * 	}
 * 
 * 	// using callback style
 * 	renderLotsOfData(someDataObj, function(success){
 * 		// handles success or failure
 * 		if(!success){
 * 			promptUserToRecover();
 * 		}
 * 	});
 * 	// NOTE: no way to add another callback here!!
 * @example
 * Using a Deferred doesn't simplify the sending code any, but it
 * provides a standard interface for callers and senders alike,
 * providing both with a simple way to service multiple callbacks for
 * an operation and freeing both sides from worrying about details
 * such as "did this get called already?". With Deferreds, new
 * callbacks can be added at any time.
 * 
 * 	// Deferred style:
 * 	function renderLotsOfData(data){
 * 		var d = new dojo.Deferred();
 * 		try{
 * 			for(var x in data){
 * 				renderDataitem(data[x]);
 * 			}
 * 			d.callback(true);
 * 		}catch(e){
 * 			d.errback(new Error("rendering failed"));
 * 		}
 * 		return d;
 * 	}
 * 
 * 	// using Deferred style
 * 	renderLotsOfData(someDataObj).then(null, function(){
 * 		promptUserToRecover();
 * 	});
 * 	// NOTE: addErrback and addCallback both return the Deferred
 * 	// again, so we could chain adding callbacks or save the
 * 	// deferred for later should we need to be notified again.
 * @example
 * In this example, renderLotsOfData is synchronous and so both
 * versions are pretty artificial. Putting the data display on a
 * timeout helps show why Deferreds rock:
 * 
 * 	// Deferred style and async func
 * 	function renderLotsOfData(data){
 * 		var d = new dojo.Deferred();
 * 		setTimeout(function(){
 * 			try{
 * 				for(var x in data){
 * 					renderDataitem(data[x]);
 * 				}
 * 				d.callback(true);
 * 			}catch(e){
 * 				d.errback(new Error("rendering failed"));
 * 			}
 * 		}, 100);
 * 		return d;
 * 	}
 * 
 * 	// using Deferred style
 * 	renderLotsOfData(someDataObj).then(null, function(){
 * 		promptUserToRecover();
 * 	});
 * 
 * Note that the caller doesn't have to change his code at all to
 * handle the asynchronous case.
*/
dojo.Deferred=function(canceller){};
/**
 * <b>Summary:</b><blockquote>
 *	 Takes a named string, hex string, array of rgb or rgba values,<br>
 *	 an object with r, g, b, and a properties, or another `dojo.Color` object<br>
 *	 and creates a new Color instance to work from.<br>
 * </blockquote>
 * @param {Array|String|Object} color 
 * @example
 * Work with a Color instance:
 *  var c = new dojo.Color();
 *  c.setColor([0,0,0]); // black
 *  var hex = c.toHex(); // #000000
 * @example
 * Work with a node's color:
 *  var color = dojo.style("someNode", "backgroundColor");
 *  var n = new dojo.Color(color);
 *  // adjust the color some
 *  n.r *= .5;
 *  console.log(n.toString()); // rgb(128, 255, 255);
*/
dojo.Color=function(color){};
/**
 * <b>Summary:</b><blockquote>
 *	 A generic animation class that fires callbacks into its handlers<br>
 *	 object at various states.<br>
 * </blockquote>
 * A generic animation class that fires callbacks into its handlers<br>
 * object at various states. Nearly all dojo animation functions<br>
 * return an instance of this method, usually without calling the<br>
 * .play() method beforehand. Therefore, you will likely need to<br>
 * call .play() on instances of `dojo.Animation` when one is<br>
 * returned.
 * @param {Object} args The 'magic argument', mixing all the properties into this
 * animation instance.<br>
*/
dojo.Animation=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A registry to make contextual calling/searching easier.<br>
 * </blockquote>
 * Objects of this class keep list of arrays in the form [name, check,<br>
 * wrap, directReturn] that are used to determine what the contextual<br>
 * result of a set of checked arguments is. All check/wrap functions<br>
 * in this registry should be of the same arity.
 * @param {Boolean} [returnWrappers] 
 * @example
 * 	// create a new registry
 * 	var reg = new dojo.AdapterRegistry();
 * 	reg.register("handleString",
 * 		dojo.isString,
 * 		function(str){
 * 			// do something with the string here
 * 		}
 * 	);
 * 	reg.register("handleArr",
 * 		dojo.isArray,
 * 		function(arr){
 * 			// do something with the array here
 * 		}
 * 	);
 * 
 * 	// now we can pass reg.match() *either* an array or a string and
 * 	// the value we pass will get handled by the right function
 * 	reg.match("someValue"); // will call the first function
 * 	reg.match(["someValue"]); // will call the second
*/
dojo.AdapterRegistry=function(returnWrappers){};
/**
 * @namespace
*/
dojo.window={};
/**
 * @namespace
*/
dojo.touch={};
/**
 * @namespace
*/
dojo.string={};
/**
 * @namespace
*/
dojo.store={};
/**
 * @namespace
*/
dojo.selector={};
/**
 * @namespace
*/
dojo.rpc={};
/**
 * @namespace
*/
dojo.regexp={};
/**
 * @namespace
*/
dojo.number={};
/**
 * @namespace
*/
dojo.mouseButtons={};
/**
 * @namespace
*/
dojo.keys={};
/**
 * @namespace
*/
dojo.io={};
/**
 * @namespace
*/
dojo.html={};
/**
 * @namespace
*/
dojo.gears={};
/**
 * @namespace
*/
dojo.fx={};
/**
 * @namespace
*/
dojo.dnd={};
/**
 * @namespace
*/
dojo.date={};
/**
 * @namespace
*/
dojo.data={};
/**
 * @namespace
*/
dojo.currency={};
/**
 * @namespace
*/
dojo.contentHandlers={};
/**
 * @namespace
*/
dojo.cldr={};
/**
 * @namespace
*/
dojo.back={};
/**
 * @namespace
*/
dojo.aspect={};
/**
 * @namespace
 * @private
*/
dojo._firebug={};
/**
 * @namespace
 * @private
*/
dojo._contentHandlers={};
/**
 * @namespace
 * @private
*/
dojo._base={};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for objects that provide named properties with optional getter/setter<br>
 *	 control and the ability to watch for property changes<br>
 * </blockquote>
 * @class
 * @returns {dojo.Stateful} new instance
 * @example
 * 	var obj = new dojo.Stateful();
 * 	obj.watch("foo", function(){
 * 		console.log("foo changed to " + this.get("foo"));
 * 	});
 * 	obj.set("foo","bar");
*/
dojo.Stateful=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Watches a property for changes<br>
 * </blockquote>
 * @param {String} [name] Indicates the property to watch. This is optional (the callback may be the
 * only parameter), and if omitted, all the properties will be watched
 * @param {Function} callback The function to execute when the property changes. This will be called after
 * the property has been changed. The callback will be called with the |this|<br>
 * set to the instance, the first argument as the name of the property, the<br>
 * second argument as the old value and the third argument as the new value.
 * @memberOf dojo.Stateful
*/
dojo.Stateful.prototype.watch=function(name, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set a property on a Stateful instance<br>
 * </blockquote>
 * Sets named properties on a stateful object and notifies any watchers of<br>
 * the property. A programmatic setter may be defined in subclasses.<br>
 * For example:<br>
 * 	stateful = new dojo.Stateful();<br>
 * 	stateful.watch(function(name, oldValue, value){<br>
 * 		// this will be called on the set below<br>
 * 	}<br>
 * 	stateful.set(foo, 5);<br>
 * <br>
 * set() may also be called with a hash of name/value pairs, ex:<br>
 * 	myObj.set({<br>
 * 		foo: "Howdy",<br>
 * 		bar: 3<br>
 * 	})<br>
 * This is equivalent to calling set(foo, "Howdy") and set(bar, 3)
 * @param {String} name The property to set.
 * @param {Object} value The value to set in the property.
 * 
 * @returns {dojo.Stateful} -
 * @memberOf dojo.Stateful
*/
dojo.Stateful.prototype.set=function(name, value){};
/**
 * @param {mixed} mixin 
 * @memberOf dojo.Stateful
*/
dojo.Stateful.prototype.postscript=function(mixin){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get a property on a Stateful instance.<br>
 * </blockquote>
 * Get a named property on a Stateful object. The property may<br>
 * potentially be retrieved via a getter method in subclasses. In the base class<br>
 * this just retrieves the object's property.<br>
 * For example:<br>
 * 	stateful = new dojo.Stateful({foo: 3});<br>
 * 	stateful.get("foo") // returns 3<br>
 * 	stateful.foo // returns 3
 * @param {String} name The property to get.
 * 
 * @returns {Any} -
 * @memberOf dojo.Stateful
*/
dojo.Stateful.prototype.get=function(name){};
/**
 * @param {mixed} name 
 * @param {mixed} oldValue 
 * @param {mixed} value 
 * @param {mixed} ignoreCatchall 
 * @private
 * @memberOf dojo.Stateful
*/
dojo.Stateful.prototype._watchCallbacks=function(name, oldValue, value, ignoreCatchall){};
/**
 * <b>Summary:</b><blockquote>
 *	 A set of widgets indexed by id. A default instance of this class is<br>
 *	 available as `dijit.registry`<br>
 * </blockquote>
 * @class
 * @returns {dijit.WidgetSet} new instance
 * @example
 * Create a small list of widgets:
 * 	var ws = new dijit.WidgetSet();
 * 	ws.add(dijit.byId("one"));
 *  	ws.add(dijit.byId("two"));
 * 	// destroy both:
 * 	ws.forEach(function(w){ w.destroy(); });
 * @example
 * Using dijit.registry:
 * 	dijit.registry.forEach(function(w){ /// do something /// });
*/
dijit.WidgetSet=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convert this WidgetSet into a true Array<br>
 * </blockquote>
 * @returns {dijit._Widget[]} -
 * @example
 * Work with the widget .domNodes in a real Array
 * 	array.map(dijit.registry.toArray(), function(w){ return w.domNode; });
 * @memberOf dijit.WidgetSet
*/
dijit.WidgetSet.prototype.toArray=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A synthetic clone of `array.some` acting explicitly on this WidgetSet<br>
 * </blockquote>
 * @param {Function} func A callback function run for every widget in this list. Exits loop
 * when the first true return is encountered.
 * @param {Object} [thisObj] Optional scope parameter to use for the callback
 * @returns {Boolean} -
 * @memberOf dijit.WidgetSet
*/
dijit.WidgetSet.prototype.some=function(func, thisObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove a widget from this WidgetSet. Does not destroy the widget; simply<br>
 *	 removes the reference.<br>
 * </blockquote>
 * @param {String} id 
 * @memberOf dijit.WidgetSet
*/
dijit.WidgetSet.prototype.remove=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a new Array from this WidgetSet, following the same rules as `array.map`<br>
 * </blockquote>
 * @param {Function} func 
 * @param {Object} [thisObj] 
 * 
 * @returns {Array} -
 * @example
 * 	var nodes = dijit.registry.map(function(w){ return w.domNode; });
 * @memberOf dijit.WidgetSet
*/
dijit.WidgetSet.prototype.map=function(func, thisObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call specified function for each widget in this set.<br>
 * </blockquote>
 * @param {Function} func A callback function to run for each item. Is passed the widget, the index
 * in the iteration, and the full hash, similar to `array.forEach`.
 * @param {Object} [thisObj] An optional scope parameter
 * 
 * @returns {dijit.WidgetSet} -
 * @example
 * Using the default `dijit.registry` instance:
 * 	dijit.registry.forEach(function(widget){
 * 		console.log(widget.declaredClass);
 * 	});
 * @memberOf dijit.WidgetSet
*/
dijit.WidgetSet.prototype.forEach=function(func, thisObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Filter down this WidgetSet to a smaller new WidgetSet<br>
 *	 Works the same as `array.filter` and `NodeList.filter`<br>
 * </blockquote>
 * @param {Function} filter Callback function to test truthiness. Is passed the widget
 * reference and the pseudo-index in the object.
 * @param {Object} [thisObj] Option scope to use for the filter function.
 * @returns {dijit.WidgetSet} -
 * @example
 * Arbitrary: select the odd widgets in this list
 * 	dijit.registry.filter(function(w, i){
 * 		return i % 2 == 0;
 * 	}).forEach(function(w){ /// odd ones /// });
 * @memberOf dijit.WidgetSet
*/
dijit.WidgetSet.prototype.filter=function(filter, thisObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 A synthetic clone of `array.every` acting explicitly on this WidgetSet<br>
 * </blockquote>
 * @param {Function} func A callback function run for every widget in this list. Exits loop
 * when the first false return is encountered.
 * @param {Object} [thisObj] Optional scope parameter to use for the callback
 * @returns {Boolean} -
 * @memberOf dijit.WidgetSet
*/
dijit.WidgetSet.prototype.every=function(func, thisObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find a widget in this list by it's id.<br>
 * </blockquote>
 * @param {String} id 
 * @returns {dijit._Widget} -
 * @example
 * Test if an id is in a particular WidgetSet
 *  var ws = new dijit.WidgetSet();
 *  ws.add(dijit.byId("bar"));
 *  var t = ws.byId("bar") // returns a widget
 *  var x = ws.byId("foo"); // returns undefined
 * @memberOf dijit.WidgetSet
*/
dijit.WidgetSet.prototype.byId=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reduce this widgetset to a new WidgetSet of a particular `declaredClass`<br>
 * </blockquote>
 * @param {String} cls The Class to scan for. Full dot-notated string.
 * @returns {dijit.WidgetSet} -
 * @example
 * Find all `dijit.TitlePane`s in a page:
 * 	dijit.registry.byClass("dijit.TitlePane").forEach(function(tp){ tp.close(); });
 * @memberOf dijit.WidgetSet
*/
dijit.WidgetSet.prototype.byClass=function(cls){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a widget to this list. If a duplicate ID is detected, a error is thrown.<br>
 * </blockquote>
 * @param {dijit._Widget} widget Any dijit._Widget subclass.
 * @memberOf dijit.WidgetSet
*/
dijit.WidgetSet.prototype.add=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 A registry to make contextual calling/searching easier.<br>
 * </blockquote>
 * Objects of this class keep list of arrays in the form [name, check,<br>
 * wrap, directReturn] that are used to determine what the contextual<br>
 * result of a set of checked arguments is. All check/wrap functions<br>
 * in this registry should be of the same arity.
 * @class
 * @returns {dojo.AdapterRegistry} new instance
 * @example
 * 	// create a new registry
 * 	var reg = new dojo.AdapterRegistry();
 * 	reg.register("handleString",
 * 		dojo.isString,
 * 		function(str){
 * 			// do something with the string here
 * 		}
 * 	);
 * 	reg.register("handleArr",
 * 		dojo.isArray,
 * 		function(arr){
 * 			// do something with the array here
 * 		}
 * 	);
 * 
 * 	// now we can pass reg.match() *either* an array or a string and
 * 	// the value we pass will get handled by the right function
 * 	reg.match("someValue"); // will call the first function
 * 	reg.match(["someValue"]); // will call the second
*/
dojo.AdapterRegistry=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove a named adapter from the registry<br>
 * </blockquote>
 * @param {String} name The name of the adapter.
 * @memberOf dojo.AdapterRegistry
*/
dojo.AdapterRegistry.prototype.unregister=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 register a check function to determine if the wrap function or<br>
 *	 object gets selected<br>
 * </blockquote>
 * @param {String} name a way to identify this matcher.
 * @param {Function} check a function that arguments are passed to from the adapter's
 * match() function.  The check function should return true if the<br>
 * given arguments are appropriate for the wrap function.
 * @param {Function} wrap 
 * @param {Boolean} [directReturn] If directReturn is true, the value passed in for wrap will be
 * returned instead of being called. Alternately, the<br>
 * AdapterRegistry can be set globally to &quot;return not call&quot; using<br>
 * the returnWrappers property. Either way, this behavior allows<br>
 * the registry to act as a &quot;search&quot; function instead of a<br>
 * function interception library.
 * @param {Boolean} [override] If override is given and true, the check function will be given
 * highest priority. Otherwise, it will be the lowest priority<br>
 * adapter.
 * @memberOf dojo.AdapterRegistry
*/
dojo.AdapterRegistry.prototype.register=function(name, check, wrap, directReturn, override){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find an adapter for the given arguments. If no suitable adapter<br>
 *	 is found, throws an exception. match() accepts any number of<br>
 *	 arguments, all of which are passed to all matching functions<br>
 *	 from the registered pairs.<br>
 * </blockquote>
 * @memberOf dojo.AdapterRegistry
*/
dojo.AdapterRegistry.prototype.match=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The &amp;quot;before&amp;quot; export of the aspect module is a function that can be used to attach<br>
 *	 &amp;quot;before&amp;quot; advice to a method. This function will be executed before the original method<br>
 *	 is executed. This function will be called with the arguments used to call the method.<br>
 *	 This function may optionally return an array as the new arguments to use to call<br>
 *	 the original method (or the previous, next-to-execute before advice, if one exists).<br>
 *	 If the before method doesn't return anything (returns undefined) the original arguments<br>
 *	 will be preserved.<br>
 *	 If there are multiple &amp;quot;before&amp;quot; advisors, they are executed in the reverse order they were registered.<br>
 * </blockquote>
 * @param {Object} target This is the target object
 * @param {String} methodName This is the name of the method to attach to.
 * @param {Function} advice This is function to be called before the original method
*/
dojo.aspect.before=function(target, methodName, advice){};
/**
 * <b>Summary:</b><blockquote>
 *	 The &amp;quot;around&amp;quot; export of the aspect module is a function that can be used to attach<br>
 *	 &amp;quot;around&amp;quot; advice to a method. The advisor function is immediately executed when<br>
 *	 the around() is called, is passed a single argument that is a function that can be<br>
 *	 called to continue execution of the original method (or the next around advisor).<br>
 *	 The advisor function should return a function, and this function will be called whenever<br>
 *	 the method is called. It will be called with the arguments used to call the method.<br>
 *	 Whatever this function returns will be returned as the result of the method call (unless after advise changes it).<br>
 * </blockquote>
 * @param {Object} target This is the target object
 * @param {String} methodName This is the name of the method to attach to.
 * @param {Function} advice This is function to be called around the original method
 * @example
 * If there are multiple "around" advisors, the most recent one is executed first,
 * which can then delegate to the next one and so on. For example:
 * 	around(obj, "foo", function(originalFoo){
 * 		return function(){
 * 			var start = new Date().getTime();
 * 			var results = originalFoo.apply(this, arguments); // call the original
 * 			var end = new Date().getTime();
 * 			console.log("foo execution took " + (end - start) + " ms");
 * 			return results;
 * 		};
 * 	});
*/
dojo.aspect.around=function(target, methodName, advice){};
/**
 * <b>Summary:</b><blockquote>
 *	 The &amp;quot;after&amp;quot; export of the aspect module is a function that can be used to attach<br>
 *	 &amp;quot;after&amp;quot; advice to a method. This function will be executed after the original method<br>
 *	 is executed. By default the function will be called with a single argument, the return<br>
 *	 value of the original method, or the the return value of the last executed advice (if a previous one exists).<br>
 *	 The fourth (optional) argument can be set to true to so the function receives the original<br>
 *	 arguments (from when the original method was called) rather than the return value.<br>
 *	 If there are multiple &amp;quot;after&amp;quot; advisors, they are executed in the order they were registered.<br>
 * </blockquote>
 * @param {Object} target This is the target object
 * @param {String} methodName This is the name of the method to attach to.
 * @param {Function} advice This is function to be called after the original method
 * @param {Boolean} [receiveArguments] If this is set to true, the advice function receives the original arguments (from when the original mehtod
 * was called) rather than the return value of the original/previous method.<br>
*/
dojo.aspect.after=function(target, methodName, advice, receiveArguments){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the state object and back callback for the very first page<br>
 *	 that is loaded.<br>
 * </blockquote>
 * It is recommended that you call this method as part of an event<br>
 * listener that is registered via dojo.addOnLoad().
 * @param {Object} args See the addToHistory() function for the list of valid args properties.
*/
dojo.back.setInitialState=function(args){};
/**
 * @param {mixed} h 
*/
dojo.back.setHash=function(h){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes the undo stack. This must be called from a &amp;lt;script&amp;gt;<br>
 *	 block that lives inside the &amp;lt;body&amp;gt; tag to prevent bugs on IE.<br>
 * </blockquote>
 * Only call this method before the page's DOM is finished loading. Otherwise<br>
 * it will not work. Be careful with xdomain loading or djConfig.debugAtAllCosts scenarios,<br>
 * in order for this method to work, dojo.back will need to be part of a build layer.<br>
*/
dojo.back.init=function(){};
/**
*/
dojo.back.getHash=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds a state object (args) to the history list.<br>
 * </blockquote>
 * To support getting back button notifications, the object<br>
 * argument should implement a function called either "back",<br>
 * "backButton", or "handle". The string "back" will be passed as<br>
 * the first and only argument to this callback.<br>
 * <br>
 * To support getting forward button notifications, the object<br>
 * argument should implement a function called either "forward",<br>
 * "forwardButton", or "handle". The string "forward" will be<br>
 * passed as the first and only argument to this callback.<br>
 * <br>
 * If you want the browser location string to change, define "changeUrl" on the object. If the<br>
 * value of "changeUrl" is true, then a unique number will be appended to the URL as a fragment<br>
 * identifier (http://some.domain.com/path#uniquenumber). If it is any other value that does<br>
 * not evaluate to false, that value will be used as the fragment identifier. For example,<br>
 * if changeUrl: 'page1', then the URL will look like: http://some.domain.com/path#page1<br>
 * <br>
 * There are problems with using dojo.back with semantically-named fragment identifiers<br>
 * ("hash values" on an URL). In most browsers it will be hard for dojo.back to know<br>
 * distinguish a back from a forward event in those cases. For back/forward support to<br>
 * work best, the fragment ID should always be a unique value (something using new Date().getTime()<br>
 * for example). If you want to detect hash changes using semantic fragment IDs, then<br>
 * consider using dojo.hash instead (in Dojo 1.4+).
 * @see reference <a href="http://some.domain.com/path#uniquenumber).">http://some.domain.com/path#uniquenumber).</a>
 * @param {dojo.__backArgs} args The state object that will be added to the history list.
 * @example
 * 	dojo.back.addToHistory({
 * 		back: function(){ console.log('back pressed'); },
 * 		forward: function(){ console.log('forward pressed'); },
 * 		changeUrl: true
 * 	});
*/
dojo.back.addToHistory=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 private method. Do not call this directly.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @param {mixed} ifrLoc 
 * @private
*/
dojo.back._iframeLoaded=function(evt, ifrLoc){};
/**
 * @namespace
*/
dojo.console={};
/**
*/
dojo.console.warn=function(){};
/**
 * @param {mixed} m 
*/
dojo.console.log=function(m){};
/**
*/
dojo.console.error=function(){};
/**
*/
dojo.console.debug=function(){};
/**
 * @param {mixed} url 
 * @param {mixed} sync 
 * @param {mixed} load 
*/
dojo.require.getText=function(url, sync, load){};
/**
 * @namespace
*/
dojo.dojoConfig={};
/**
 * <b>Summary:</b><blockquote>
 *	 or Array<br>
 *	 Adds a callback via dojo.addOnLoad. Useful when Dojo is added after<br>
 *	 the page loads and djConfig.afterOnLoad is true. Supports the same<br>
 *	 arguments as dojo.addOnLoad. When using a function reference, use<br>
 *	 `djConfig.addOnLoad = function(){};`. For object with function name use<br>
 *	 `djConfig.addOnLoad = [myObject, &amp;quot;functionName&amp;quot;];` and for object with<br>
 *	 function reference use<br>
 *	 `djConfig.addOnLoad = [myObject, function(){}];`<br>
 * </blockquote>
*/
dojo.dojoConfig.addOnLoad=function(){};
/**
 * @namespace
*/
dojo.exports={};
/**
 * @param {mixed} frag 
 * @param {mixed} doc 
 * @returns {DOMNode} -
*/
dojo.exports.toDom=function(frag, doc){};
/**
 * @param {DOMNode|String} node 
 * @param {String|Object} name 
 * @param {String} [value] 
 * @returns {DomNode} -
*/
dojo.exports.set=function(node, name, value){};
/**
 * @param {DOMNode|String} node 
 * @param {String} name 
*/
dojo.exports.remove=function(node, name){};
/**
 * @param {DOMNode|String} node 
 * @param {DOMNode|String} refNode 
 * @param {String|Number} [position] 
 * @returns {DomNode} -
*/
dojo.exports.place=function(node, refNode, position){};
/**
 * @param {DOMNode|String} node 
 * @param {String} name 
 * @returns {Boolean} -
*/
dojo.exports.has=function(node, name){};
/**
 * @param {DomNode|String} node 
 * @param {String} name 
 * @returns {Anything} -
*/
dojo.exports.getNodeProp=function(node, name){};
/**
 * @param {DOMNode|String} node 
 * @param {String} name 
 * @returns {Anything} -
*/
dojo.exports.get=function(node, name){};
/**
*/
dojo.exports.empty=function(){};
/**
 * @param {DOMNode|String} node 
*/
dojo.exports.destroy=function(node){};
/**
 * @param {DOMNode|String} tag 
 * @param {Object} attrs 
 * @param {DOMNode|String} [refNode] 
 * @param {String} [pos] 
 * @returns {DomNode} -
*/
dojo.exports.create=function(tag, attrs, refNode, pos){};
/**
 * <b>Summary:</b><blockquote>
 *	 This module provides bootstrap configuration for running dojo in node.js<br>
 * </blockquote>
 * @param {mixed} config 
*/
dojo.exports.config=function(config){};
/**
 * @namespace
*/
dojo.exports.names={};
/**
 * @namespace
*/
dojo.Object={};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks the inheritance chain to see if it is inherited from this<br>
 *	 class.<br>
 * </blockquote>
 * This method is used with instances of classes produced with<br>
 * dojo.declare to determine of they support a certain interface or<br>
 * not. It models "instanceof" operator.
 * @param {Function} cls Class constructor.
 * 
 * @returns {Object} -otherwise.
 * @example
 * 	var A = dojo.declare(null, {
 * 		// constructor, properties, and methods go here
 * 		// ...
 * 	});
 * 	var B = dojo.declare(null, {
 * 		// constructor, properties, and methods go here
 * 		// ...
 * 	});
 * 	var C = dojo.declare([A, B], {
 * 		// constructor, properties, and methods go here
 * 		// ...
 * 	});
 * 	var D = dojo.declare(A, {
 * 		// constructor, properties, and methods go here
 * 		// ...
 * 	});
 * 
 * 	var a = new A(), b = new B(), c = new C(), d = new D();
 * 
 * 	console.log(a.isInstanceOf(A)); // true
 * 	console.log(b.isInstanceOf(A)); // false
 * 	console.log(c.isInstanceOf(A)); // true
 * 	console.log(d.isInstanceOf(A)); // true
 * 
 * 	console.log(a.isInstanceOf(B)); // false
 * 	console.log(b.isInstanceOf(B)); // true
 * 	console.log(c.isInstanceOf(B)); // true
 * 	console.log(d.isInstanceOf(B)); // false
 * 
 * 	console.log(a.isInstanceOf(C)); // false
 * 	console.log(b.isInstanceOf(C)); // false
 * 	console.log(c.isInstanceOf(C)); // true
 * 	console.log(d.isInstanceOf(C)); // false
 * 
 * 	console.log(a.isInstanceOf(D)); // false
 * 	console.log(b.isInstanceOf(D)); // false
 * 	console.log(c.isInstanceOf(D)); // false
 * 	console.log(d.isInstanceOf(D)); // true
*/
dojo.Object.isInstanceOf=function(cls){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls a super method.<br>
 * </blockquote>
 * This method is used inside method of classes produced with<br>
 * dojo.declare to call a super method (next in the chain). It is<br>
 * used for manually controlled chaining. Consider using the regular<br>
 * chaining, because it is faster. Use "this.inherited()" only in<br>
 * complex cases.<br>
 * <br>
 * This method cannot me called from automatically chained<br>
 * constructors including the case of a special (legacy)<br>
 * constructor chaining. It cannot be called from chained methods.<br>
 * <br>
 * If "this.inherited()" cannot find the next-in-chain method, it<br>
 * does nothing and returns "undefined". The last method in chain<br>
 * can be a default method implemented in Object, which will be<br>
 * called last.<br>
 * <br>
 * If "name" is specified, it is assumed that the method that<br>
 * received "args" is the parent method for this call. It is looked<br>
 * up in the chain list and if it is found the next-in-chain method<br>
 * is called. If it is not found, the first-in-chain method is<br>
 * called.<br>
 * <br>
 * If "name" is not specified, it will be derived from the calling<br>
 * method (using a methoid property "nom").
 * @param {String} [name] The optional method name. Should be the same as the caller's
 * name. Usually &quot;name&quot; is specified in complex dynamic cases, when<br>
 * the calling method was dynamically added, undecorated by<br>
 * dojo.declare, and it cannot be determined.
 * @param {Arguments} args The caller supply this argument, which should be the original
 * &quot;arguments&quot;.
 * @param {Object} [newArgs] If &quot;true&quot;, the found function will be returned without
 * executing it.<br>
 * If Array, it will be used to call a super method. Otherwise<br>
 * &quot;args&quot; will be used.<br>
 * 
 * @returns {Object} -if "true" was specified as newArgs.
 * @example
 * 	var B = dojo.declare(A, {
 * 		method1: function(a, b, c){
 * 			this.inherited(arguments);
 * 		},
 * 		method2: function(a, b){
 * 			return this.inherited(arguments, [a + b]);
 * 		}
 * 	});
 * 	// next method is not in the chain list because it is added
 * 	// manually after the class was created.
 * 	B.prototype.method3 = function(){
 * 		console.log("This is a dynamically-added method.");
 * 		this.inherited("method3", arguments);
 * 	};
 * @example
 * 	var B = dojo.declare(A, {
 * 		method: function(a, b){
 * 			var super = this.inherited(arguments, true);
 * 			// ...
 * 			if(!super){
 * 				console.log("there is no super method");
 * 				return 0;
 * 			}
 * 			return super.apply(this, arguments);
 * 		}
 * 	});
*/
dojo.Object.inherited=function(name, args, newArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a super method.<br>
 * </blockquote>
 * This method is a convenience method for "this.inherited()".<br>
 * It uses the same algorithm but instead of executing a super<br>
 * method, it returns it, or "undefined" if not found.
 * @param {String} [name] The optional method name. Should be the same as the caller's
 * name. Usually &quot;name&quot; is specified in complex dynamic cases, when<br>
 * the calling method was dynamically added, undecorated by<br>
 * dojo.declare, and it cannot be determined.
 * @param {Arguments} args The caller supply this argument, which should be the original
 * &quot;arguments&quot;.<br>
 * 
 * @returns {Object} -
 * @example
 * 	var B = dojo.declare(A, {
 * 		method: function(a, b){
 * 			var super = this.getInherited(arguments);
 * 			// ...
 * 			if(!super){
 * 				console.log("there is no super method");
 * 				return 0;
 * 			}
 * 			return super.apply(this, arguments);
 * 		}
 * 	});
*/
dojo.Object.getInherited=function(name, args){};
/**
*/
dojo.Object.freeze=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds all properties and methods of source to constructor's<br>
 *	 prototype, making them available to all instances created with<br>
 *	 constructor. This method is specific to constructors created with<br>
 *	 dojo.declare.<br>
 * </blockquote>
 * Adds source properties to the constructor's prototype. It can<br>
 * override existing properties.<br>
 * <br>
 * This method is similar to dojo.extend function, but it is specific<br>
 * to constructors produced by dojo.declare. It is implemented<br>
 * using dojo.safeMixin, and it skips a constructor property,<br>
 * and properly decorates copied functions.
 * @param {Object} source Source object which properties are going to be copied to the
 * constructor's prototype.
 * @example
 * 	var A = dojo.declare(null, {
 * 		m1: function(){},
 * 		s1: "Popokatepetl"
 * 	});
 * 	A.extend({
 * 		m1: function(){},
 * 		m2: function(){},
 * 		f1: true,
 * 		d1: 42
 * 	});
*/
dojo.Object.extend=function(source){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deferreds provide a generic means for encapsulating an asynchronous<br>
 *	 operation and notifying users of the completion and result of the operation.<br>
 * </blockquote>
 * The dojo.Deferred API is based on the concept of promises that provide a<br>
 * generic interface into the eventual completion of an asynchronous action.<br>
 * The motivation for promises fundamentally is about creating a<br>
 * separation of concerns that allows one to achieve the same type of<br>
 * call patterns and logical data flow in asynchronous code as can be<br>
 * achieved in synchronous code. Promises allows one<br>
 * to be able to call a function purely with arguments needed for<br>
 * execution, without conflating the call with concerns of whether it is<br>
 * sync or async. One shouldn't need to alter a call's arguments if the<br>
 * implementation switches from sync to async (or vice versa). By having<br>
 * async functions return promises, the concerns of making the call are<br>
 * separated from the concerns of asynchronous interaction (which are<br>
 * handled by the promise).<br>
 * <br>
 * The dojo.Deferred is a type of promise that provides methods for fulfilling the<br>
 * promise with a successful result or an error. The most important method for<br>
 * working with Dojo's promises is the then() method, which follows the<br>
 * CommonJS proposed promise API. An example of using a Dojo promise:<br>
 * <br>
 * 	var resultingPromise = someAsyncOperation.then(function(result){<br>
 * 		... handle result ...<br>
 * 	},<br>
 * 	function(error){<br>
 * 		... handle error ...<br>
 * 	});<br>
 * <br>
 * The .then() call returns a new promise that represents the result of the<br>
 * execution of the callback. The callbacks will never affect the original promises value.<br>
 * <br>
 * The dojo.Deferred instances also provide the following functions for backwards compatibility:<br>
 * <br>
 * * addCallback(handler)<br>
 * * addErrback(handler)<br>
 * * callback(result)<br>
 * * errback(result)<br>
 * <br>
 * Callbacks are allowed to return promises themselves, so<br>
 * you can build complicated sequences of events with ease.<br>
 * <br>
 * The creator of the Deferred may specify a canceller.  The canceller<br>
 * is a function that will be called if Deferred.cancel is called<br>
 * before the Deferred fires. You can use this to implement clean<br>
 * aborting of an XMLHttpRequest, etc. Note that cancel will fire the<br>
 * deferred with a CancelledError (unless your canceller returns<br>
 * another kind of error), so the errbacks should be prepared to<br>
 * handle that error for cancellable Deferreds.
 * @class
 * @returns {dojo.Deferred} new instance
 * @example
 * 	var deferred = new dojo.Deferred();
 * 	setTimeout(function(){ deferred.callback({success: true}); }, 1000);
 * 	return deferred;
 * @example
 * Deferred objects are often used when making code asynchronous. It
 * may be easiest to write functions in a synchronous manner and then
 * split code using a deferred to trigger a response to a long-lived
 * operation. For example, instead of register a callback function to
 * denote when a rendering operation completes, the function can
 * simply return a deferred:
 * 
 * 	// callback style:
 * 	function renderLotsOfData(data, callback){
 * 		var success = false
 * 		try{
 * 			for(var x in data){
 * 				renderDataitem(data[x]);
 * 			}
 * 			success = true;
 * 		}catch(e){ }
 * 		if(callback){
 * 			callback(success);
 * 		}
 * 	}
 * 
 * 	// using callback style
 * 	renderLotsOfData(someDataObj, function(success){
 * 		// handles success or failure
 * 		if(!success){
 * 			promptUserToRecover();
 * 		}
 * 	});
 * 	// NOTE: no way to add another callback here!!
 * @example
 * Using a Deferred doesn't simplify the sending code any, but it
 * provides a standard interface for callers and senders alike,
 * providing both with a simple way to service multiple callbacks for
 * an operation and freeing both sides from worrying about details
 * such as "did this get called already?". With Deferreds, new
 * callbacks can be added at any time.
 * 
 * 	// Deferred style:
 * 	function renderLotsOfData(data){
 * 		var d = new dojo.Deferred();
 * 		try{
 * 			for(var x in data){
 * 				renderDataitem(data[x]);
 * 			}
 * 			d.callback(true);
 * 		}catch(e){
 * 			d.errback(new Error("rendering failed"));
 * 		}
 * 		return d;
 * 	}
 * 
 * 	// using Deferred style
 * 	renderLotsOfData(someDataObj).then(null, function(){
 * 		promptUserToRecover();
 * 	});
 * 	// NOTE: addErrback and addCallback both return the Deferred
 * 	// again, so we could chain adding callbacks or save the
 * 	// deferred for later should we need to be notified again.
 * @example
 * In this example, renderLotsOfData is synchronous and so both
 * versions are pretty artificial. Putting the data display on a
 * timeout helps show why Deferreds rock:
 * 
 * 	// Deferred style and async func
 * 	function renderLotsOfData(data){
 * 		var d = new dojo.Deferred();
 * 		setTimeout(function(){
 * 			try{
 * 				for(var x in data){
 * 					renderDataitem(data[x]);
 * 				}
 * 				d.callback(true);
 * 			}catch(e){
 * 				d.errback(new Error("rendering failed"));
 * 			}
 * 		}, 100);
 * 		return d;
 * 	}
 * 
 * 	// using Deferred style
 * 	renderLotsOfData(someDataObj).then(null, function(){
 * 		promptUserToRecover();
 * 	});
 * 
 * Note that the caller doesn't have to change his code at all to
 * handle the asynchronous case.
*/
dojo.Deferred=function(){};
/**
*/
dojo.Deferred.when=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a fulfilledHandler, errorHandler, and progressHandler to be called for<br>
 *	 completion of a promise. The fulfilledHandler is called when the promise<br>
 *	 is fulfilled. The errorHandler is called when a promise fails. The<br>
 *	 progressHandler is called for progress events. All arguments are optional<br>
 *	 and non-function values are ignored. The progressHandler is not only an<br>
 *	 optional argument, but progress events are purely optional. Promise<br>
 *	 providers are not required to ever create progress events.<br>
 *	 <br>
 *	 This function will return a new promise that is fulfilled when the given<br>
 *	 fulfilledHandler or errorHandler callback is finished. This allows promise<br>
 *	 operations to be chained together. The value returned from the callback<br>
 *	 handler is the fulfillment value for the returned promise. If the callback<br>
 *	 throws an error, the returned promise will be moved to failed state.<br>
 * </blockquote>
 * @param {Function} [resolvedCallback] 
 * @param {Function} [errorCallback] 
 * @param {Function} [progressCallback] 
 * 
 * @returns {Promise} -execution of the callback. The callbacks will never affect the original promises value.
 * @example
 * An example of using a CommonJS compliant promise:
 * 	asyncComputeTheAnswerToEverything().
 * 		then(addTwo).
 * 		then(printResult, onError);
 * 	&gt;44
*/
dojo.Deferred.then=function(resolvedCallback, errorCallback, progressCallback){};
/**
*/
dojo.Deferred.resolve=function(){};
/**
*/
dojo.Deferred.reject=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Send progress events to all listeners<br>
 * </blockquote>
 * @param {mixed} update 
*/
dojo.Deferred.progress=function(update){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fulfills the Deferred instance as an error with the provided error<br>
 * </blockquote>
 * @param {mixed} error 
*/
dojo.Deferred.errback=function(error){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancels the asynchronous operation<br>
 * </blockquote>
*/
dojo.Deferred.cancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fulfills the Deferred instance successfully with the provide value<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojo.Deferred.callback=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds error callback for this deferred instance.<br>
 * </blockquote>
 * @param {Function} errback 
 * 
 * @returns {dojo.Deferred} -
 * @memberOf dojo.Deferred
*/
dojo.Deferred.prototype.addErrback=function(errback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds callback and error callback for this deferred instance.<br>
 * </blockquote>
 * @param {Function} [callback] The callback attached to this deferred object.
 * @param {Function} [errback] The error callback attached to this deferred object.
 * 
 * @returns {dojo.Deferred} -
*/
dojo.Deferred.addCallbacks=function(callback, errback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds successful callback for this deferred instance.<br>
 * </blockquote>
 * @param {Function} callback 
 * 
 * @returns {dojo.Deferred} -
 * @memberOf dojo.Deferred
*/
dojo.Deferred.prototype.addCallback=function(callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add handler as both successful callback and error callback for this deferred instance.<br>
 * </blockquote>
 * @param {Function} callback 
 * 
 * @returns {dojo.Deferred} -
 * @memberOf dojo.Deferred
*/
dojo.Deferred.prototype.addBoth=function(callback){};
/**
 * @namespace
*/
dojo.on={};
/**
 * @param {mixed} evt 
 * @param {mixed} se 
 * @private
*/
dojo.on._fixEvent=function(evt, se){};
/**
 * <b>Summary:</b><blockquote>
 *	 A generic animation class that fires callbacks into its handlers<br>
 *	 object at various states.<br>
 * </blockquote>
 * A generic animation class that fires callbacks into its handlers<br>
 * object at various states. Nearly all dojo animation functions<br>
 * return an instance of this method, usually without calling the<br>
 * .play() method beforehand. Therefore, you will likely need to<br>
 * call .play() on instances of `dojo.Animation` when one is<br>
 * returned.
 * @class
 * @returns {dojo.Animation} new instance
*/
dojo.Animation=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stops a running animation.<br>
 * </blockquote>
 * @param {boolean} [gotoEnd] If true, the animation will end.
 * @returns {dojo.Animation} -
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype.stop=function(gotoEnd){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a string token representation of the status of<br>
 *	 the animation, one of: &amp;quot;paused&amp;quot;, &amp;quot;playing&amp;quot;, &amp;quot;stopped&amp;quot;<br>
 * </blockquote>
 * @returns {String} -
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype.status=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Start the animation.<br>
 * </blockquote>
 * @param {int} [delay] How many milliseconds to delay before starting.
 * @param {Boolean} [gotoStart] If true, starts the animation from the beginning; otherwise,
 * starts it from its current position.<br>
 * 
 * @returns {dojo.Animation} -The instance to allow chaining.
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype.play=function(delay, gotoStart){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pauses a running animation.<br>
 * </blockquote>
 * @returns {dojo.Animation} -
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype.pause=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the progress of the animation.<br>
 * </blockquote>
 * @param {Decimal} percent A percentage in decimal notation (between and including 0.0 and 1.0).
 * @param {Boolean} [andPlay] If true, play the animation after setting the progress.
 * @returns {dojo.Animation} -
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype.gotoPercent=function(percent, andPlay){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Function to adjust the acceleration (or deceleration) of the progress<br>
 *	 across a dojo._Line<br>
 * </blockquote>
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype.easing=function(){};
/**
 * @private
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype._stopTimer=function(){};
/**
 * @private
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype._startTimer=function(){};
/**
 * @param {mixed} gotoStart 
 * @private
 * @returns {dojo.Animation} -
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype._play=function(gotoStart){};
/**
 * @private
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype._getStep=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convenience function.  Fire event &amp;quot;evt&amp;quot; and pass it the<br>
 *	 arguments specified in &amp;quot;args&amp;quot;.<br>
 * </blockquote>
 * Convenience function.  Fire event "evt" and pass it the<br>
 * arguments specified in "args".<br>
 * Fires the callback in the scope of the `dojo.Animation`<br>
 * instance.
 * @param {Event} evt The event to fire.
 * @param {Array} [args] The arguments to pass to the event.
 * @private
 * @returns {dojo.Animation} -
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype._fire=function(evt, args){};
/**
 * @private
 * @returns {dojo.Animation} -
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype._cycle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear the play delay timer<br>
 * </blockquote>
 * @private
 * @memberOf dojo.Animation
*/
dojo.Animation.prototype._clearTimer=function(){};
/**
 * @class
 * @private
 * @returns {dojo.Animation._getStep} new instance
*/
dojo.Animation._getStep=function(){};
/**
 * @class
 * @private
 * @returns {dojo.Animation._startTimer} new instance
*/
dojo.Animation._startTimer=function(){};
/**
 * @class
 * @private
 * @returns {dojo.Animation._stopTimer} new instance
*/
dojo.Animation._stopTimer=function(){};
/**
 * @class
 * @extends dojo.__FadeArgs
 * @private
 * @returns {dojo.__AnimArgs} new instance
*/
dojo.__AnimArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 dojo._Line is the object used to generate values from a start value<br>
 *	 to an end value<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojo._Line} new instance
*/
dojo._Line=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the point on the line<br>
 * </blockquote>
 * @param {float} n a floating point number greater than 0 and less than 1
 * @returns {Decimal} -
*/
dojo._Line.getValue=function(n){};
/**
 * @class
 * @private
 * @returns {dojo.__FadeArgs} new instance
*/
dojo.__FadeArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function.<br>
 * </blockquote>
*/
dojo.__FadeArgs.easing=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 dojo.NodeList is an of Array-like object which adds syntactic<br>
 *	 sugar for chaining, common iteration operations, animation, and<br>
 *	 node manipulation. NodeLists are most often returned as the<br>
 *	 result of dojo.query() calls.<br>
 * </blockquote>
 * dojo.NodeList instances provide many utilities that reflect<br>
 * core Dojo APIs for Array iteration and manipulation, DOM<br>
 * manipulation, and event handling. Instead of needing to dig up<br>
 * functions in the dojo.* namespace, NodeLists generally make the<br>
 * full power of Dojo available for DOM manipulation tasks in a<br>
 * simple, chainable way.
 * @class
 * @returns {dojo.NodeList} new instance
 * @example
 * create a node list from a node
 * 	new dojo.NodeList(dojo.byId("foo"));
 * @example
 * get a NodeList from a CSS query and iterate on it
 * 	var l = dojo.query(".thinger");
 * 	l.forEach(function(node, index, nodeList){
 * 		console.log(index, node.innerHTML);
 * 	});
 * @example
 * use native and Dojo-provided array methods to manipulate a
 * NodeList without needing to use dojo.* functions explicitly:
 * 	var l = dojo.query(".thinger");
 * 	// since NodeLists are real arrays, they have a length
 * 	// property that is both readable and writable and
 * 	// push/pop/shift/unshift methods
 * 	console.log(l.length);
 * 	l.push(dojo.create("span"));
 * 
 * 	// dojo's normalized array methods work too:
 * 	console.log( l.indexOf(dojo.byId("foo")) );
 * 	// ...including the special "function as string" shorthand
 * 	console.log( l.every("item.nodeType == 1") );
 * 
 * 	// NodeLists can be [..] indexed, or you can use the at()
 * 	// function to get specific items wrapped in a new NodeList:
 * 	var node = l[3]; // the 4th element
 * 	var newList = l.at(1, 3); // the 2nd and 4th elements
 * @example
 * the style functions you expect are all there too:
 * 	// style() as a getter...
 * 	var borders = dojo.query(".thinger").style("border");
 * 	// ...and as a setter:
 * 	dojo.query(".thinger").style("border", "1px solid black");
 * 	// class manipulation
 * 	dojo.query("li:nth-child(even)").addClass("even");
 * 	// even getting the coordinates of all the items
 * 	var coords = dojo.query(".thinger").coords();
 * @example
 * DOM manipulation functions from the dojo.* namespace area also
 * available:
 * 	// remove all of the elements in the list from their
 * 	// parents (akin to "deleting" them from the document)
 * 	dojo.query(".thinger").orphan();
 * 	// place all elements in the list at the front of #foo
 * 	dojo.query(".thinger").place("foo", "first");
 * @example
 * Event handling couldn't be easier. `dojo.connect` is mapped in,
 * and shortcut handlers are provided for most DOM events:
 * 	// like dojo.connect(), but with implicit scope
 * 	dojo.query("li").connect("onclick", console, "log");
 * 
 * 	// many common event handlers are already available directly:
 * 	dojo.query("li").onclick(console, "log");
 * 	var toggleHovered = dojo.hitch(dojo, "toggleClass", "hovered");
 * 	dojo.query("p")
 * 		.onmouseenter(toggleHovered)
 * 		.onmouseleave(toggleHovered);
 * @example
 * chainability is a key advantage of NodeLists:
 * 	dojo.query(".thinger")
 * 		.onclick(function(e){ /// ... /// })
 * 		.at(1, 3, 8) // get a subset
 * 			.style("padding", "5px")
 * 			.forEach(console.log);
*/
dojo.NodeList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 For each node in the NodeList, wrap all its children with the passed in html.<br>
 * </blockquote>
 * html will be cloned if the NodeList has more than one<br>
 * element. Only DOM nodes are cloned, not any attached<br>
 * event handlers.
 * @param {String||DOMNode} html 
 * 
 * @returns {dojo.NodeList} -not the nodes from html argument.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".red").wrapInner('&lt;span class="special"&gt;&lt;/span&gt;');
 * Results in this DOM structure:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;&lt;span class="special"&gt;Red One&lt;/span&gt;&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;&lt;span class="special"&gt;Red Two&lt;/span&gt;&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.wrapInner=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Insert html where the first node in this NodeList lives, then place all<br>
 *	 nodes in this NodeList as the child of the html.<br>
 * </blockquote>
 * @param {String||DOMNode} html 
 * 
 * @returns {dojo.NodeList} -not the nodes from html argument.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".red").wrapAll('&lt;div class="allRed"&gt;&lt;/div&gt;');
 * Results in this DOM structure:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="allRed"&gt;
 * 			&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 			&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.wrapAll=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Wrap each node in the NodeList with html passed to wrap.<br>
 * </blockquote>
 * html will be cloned if the NodeList has more than one<br>
 * element. Only DOM nodes are cloned, not any attached<br>
 * event handlers.
 * @param {String||DOMNode} html 
 * 
 * @returns {dojo.NodeList} -not the nodes from html argument.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;b&gt;one&lt;/b&gt;
 * 	&lt;b&gt;two&lt;/b&gt;
 * Running this code:
 * 	dojo.query("b").wrap("&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;");
 * Results in this DOM structure:
 * 	&lt;div&gt;&lt;span&gt;&lt;b&gt;one&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;
 * 	&lt;div&gt;&lt;span&gt;&lt;b&gt;two&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.wrap=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 wipe out all elements of this NodeList via `dojo.fx.wipeOut`<br>
 * </blockquote>
 * @param {Object} [args] Additional dojo.Animation arguments to mix into this set with the addition of
 * an `auto` parameter.<br>
 * 
 * @returns {dojo.Animation|dojo.NodeList} -A special args member `auto` can be passed to automatically play the animation.
 * If args.auto is present, the original dojo.NodeList will be returned for further<br>
 * chaining. Otherwise the dojo.Animation instance is returned and must be .play()'ed
 * @example
 * Wipe out all tables with class "blah":
 * 	dojo.query("table.blah").wipeOut().play();
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.wipeOut=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 wipe in all elements of this NodeList via `dojo.fx.wipeIn`<br>
 * </blockquote>
 * @param {Object} [args] Additional dojo.Animation arguments to mix into this set with the addition of
 * an `auto` parameter.<br>
 * 
 * @returns {dojo.Animation|dojo.NodeList} -A special args member `auto` can be passed to automatically play the animation.
 * If args.auto is present, the original dojo.NodeList will be returned for further<br>
 * chaining. Otherwise the dojo.Animation instance is returned and must be .play()'ed
 * @example
 * Fade in all tables with class "blah":
 * 	dojo.query("table.blah").wipeIn().play();
 * @example
 * Utilizing `auto` to get the NodeList back:
 * 	dojo.query(".titles").wipeIn({ auto:true }).onclick(someFunction);
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.wipeIn=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 If a value is passed, allows seting the value property of form elements in this<br>
 *	 NodeList, or properly selecting/checking the right value for radio/checkbox/select<br>
 *	 elements. If no value is passed, the value of the first node in this NodeList<br>
 *	 is returned.<br>
 * </blockquote>
 * @param {String||Array} value 
 * 
 * @returns {dojo.NodeList|String||Array} -first node.
 * If a value is passed, the return is this dojo.NodeList
 * @example
 * assume a DOM created by this markup:
 * 	&lt;input type="text" value="foo"&gt;
 * 	&lt;select multiple&gt;
 * 		&lt;option value="red" selected&gt;Red&lt;/option&gt;
 * 		&lt;option value="blue"&gt;Blue&lt;/option&gt;
 * 		&lt;option value="yellow" selected&gt;Yellow&lt;/option&gt;
 * 	&lt;/select&gt;
 * This code gets and sets the values for the form fields above:
 * 	dojo.query('[type="text"]').val(); //gets value foo
 * 	dojo.query('[type="text"]').val("bar"); //sets the input's value to "bar"
 * 	dojo.query("select").val() //gets array value ["red", "yellow"]
 * 	dojo.query("select").val(["blue", "yellow"]) //Sets the blue and yellow options to selected.
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.val=function(value){};
/**
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 allows setting the text value of each node in the NodeList,<br>
 *	 if there is a value passed in, otherwise, returns the text value for all the<br>
 *	 nodes in the NodeList in one string.<br>
 * </blockquote>
 * @param {String} value 
 * 
 * @returns {dojo.NodeList|String} -If a value is passed, the return is this dojo.NodeList
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div id="foo"&gt;&lt;/div&gt;
 * 	&lt;div id="bar"&gt;&lt;/div&gt;
 * This code inserts "Hello World" into both divs:
 * 	dojo.query("div").text("Hello World");
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div id="foo"&gt;&lt;p&gt;Hello Mars &lt;span&gt;today&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
 * 	&lt;div id="bar"&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/div&gt;
 * This code returns "Hello Mars today":
 * 	var message = dojo.query("div").text();
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.text=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a new NodeList, manipulating this NodeList based on<br>
 *	 the arguments passed, potentially splicing in new elements<br>
 *	 at an offset, optionally deleting elements<br>
 * </blockquote>
 * This method behaves exactly like the Array.splice method<br>
 * with the caveat that it returns a dojo.NodeList and not a<br>
 * raw Array. For more details, see Mozilla's (splice<br>
 * documentation)[http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:splice]<br>
 * For backwards compatibility, calling .end() on the spliced NodeList<br>
 * does not return the original NodeList -- splice alters the NodeList in place.
 * @see reference <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:splice]">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:splice]</a>
 * @param {Integer} index begin can be a positive or negative integer, with positive
 * integers noting the offset to begin at, and negative<br>
 * integers denoting an offset from the end (i.e., to the left<br>
 * of the end)
 * @param {Integer} [howmany] Optional parameter to describe what position relative to
 * the NodeList's zero index to end the slice at. Like begin,<br>
 * can be positive or negative.
 * @param {Object} [item] Any number of optional parameters may be passed in to be
 * spliced into the NodeList
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.splice=function(index, howmany, item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Takes the same structure of arguments and returns as<br>
 *	 `dojo.some()` with the caveat that the passed array is<br>
 *	 implicitly this NodeList.  See `dojo.some()` and Mozilla's<br>
 *	 (Array.some<br>
 *	 documentation)[http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some].<br>
 * </blockquote>
 * @see reference <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some].">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some].</a>
 * @param {Function:} callback the callback
 * @param {Object:} [thisObject] the context
 * @returns {Boolean} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.some=function(callback, thisObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 slide all elements of the node list to the specified place via `dojo.fx.slideTo`<br>
 * </blockquote>
 * @param {Object} [args] Additional dojo.Animation arguments to mix into this set with the addition of
 * an `auto` parameter.<br>
 * 
 * @returns {dojo.Animation|dojo.NodeList} -A special args member `auto` can be passed to automatically play the animation.
 * If args.auto is present, the original dojo.NodeList will be returned for further<br>
 * chaining. Otherwise the dojo.Animation instance is returned and must be .play()'ed
 * @example
 * 	Move all tables with class "blah" to 300/300:
 * 	dojo.query("table.blah").slideTo({
 * 		left: 40,
 * 		top: 50
 * 	}).play();
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.slideTo=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a new NodeList, maintaining this one in place<br>
 * </blockquote>
 * This method behaves exactly like the Array.slice method<br>
 * with the caveat that it returns a dojo.NodeList and not a<br>
 * raw Array. For more details, see Mozilla's (slice<br>
 * documentation)[http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:slice]
 * @see reference <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:slice]">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:slice]</a>
 * @param {Integer} begin Can be a positive or negative integer, with positive
 * integers noting the offset to begin at, and negative<br>
 * integers denoting an offset from the end (i.e., to the left<br>
 * of the end)
 * @param {Integer} [end] Optional parameter to describe what position relative to
 * the NodeList's zero index to end the slice at. Like begin,<br>
 * can be positive or negative.
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.slice=function(begin, end){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns all sibling elements for nodes in this dojo.NodeList.<br>
 *	 Optionally takes a query to filter the sibling elements.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.
 * @param {String} [query] a CSS selector.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		Some Text
 * 		&lt;div class="blue first"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".first").siblings();
 * returns the two divs with class "red" and the other div
 * 	with class "blue" that does not have "first".
 * Running this code:
 * 	dojo.query(".first").siblings(".red");
 * returns the two div with class "red".
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.siblings=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 Replaces each node in ths NodeList with the content passed to replaceWith.<br>
 * </blockquote>
 * The content will be cloned if the length of NodeList<br>
 * is greater than 1. Only the DOM nodes are cloned, not<br>
 * any attached event handlers.
 * @param {String||DOMNode||NodeList} content 
 * 
 * @returns {dojo.NodeList} -Note that the returned nodes have been removed from the DOM.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".red").replaceWith('&lt;div class="green"&gt;Green&lt;/div&gt;');
 * Results in this DOM structure:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="green"&gt;Green&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="green"&gt;Green&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.replaceWith=function(content){};
/**
 * <b>Summary:</b><blockquote>
 *	 replaces nodes matched by the query passed to replaceAll with the nodes<br>
 *	 in this NodeList.<br>
 * </blockquote>
 * The nodes in this NodeList will be cloned if the query<br>
 * matches more than one element. Only the DOM nodes are cloned, not<br>
 * any attached event handlers.
 * @param {String} query 
 * 
 * @returns {dojo.NodeList} -from the query. The nodes currently in this NodeLIst could have
 * been cloned, so the returned NodeList will include the cloned nodes.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="spacer"&gt;___&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="spacer"&gt;___&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="spacer"&gt;___&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="spacer"&gt;___&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".red").replaceAll(".blue");
 * Results in this DOM structure:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="spacer"&gt;___&lt;/div&gt;
 * 		&lt;div class="spacer"&gt;___&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="spacer"&gt;___&lt;/div&gt;
 * 		&lt;div class="spacer"&gt;___&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.replaceAll=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove the data associated with these nodes.<br>
 * </blockquote>
 * @param {String} [key] If ommitted, clean all data for this node.
 * If passed, remove the data item found at `key`
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.removeData=function(key){};
/**
 * <b>Summary:</b><blockquote>
 *	 alias for dojo.NodeList's orphan method. Removes elements<br>
 *	 in this list that match the simple filter from their parents<br>
 *	 and returns them as a new NodeList.<br>
 * </blockquote>
 * @param {String} simpleFilter single-expression CSS rule. For example, &quot;.thinger&quot; or
 * &quot;#someId[attrName='value']&quot; but not &quot;div &gt; span&quot;. In short,<br>
 * anything which does not invoke a descent to evaluate but<br>
 * can instead be used to test a single node is acceptable.<br>
 * 
 * @returns {dojo.NodeList} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.remove=function(simpleFilter){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns all sibling elements that come before the nodes in this dojo.NodeList.<br>
 *	 Optionally takes a query to filter the sibling elements.<br>
 * </blockquote>
 * The returned nodes will be in reverse DOM order -- the first node in the list will<br>
 * be the node closest to the original node/NodeList.<br>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.
 * @param {String} [query] a CSS selector.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red prev"&gt;Red One&lt;/div&gt;
 * 		Some Text
 * 		&lt;div class="blue prev"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red second"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".second").prevAll();
 * returns the two divs with class of "prev".
 * Running this code:
 * 	dojo.query(".first").prevAll(".red");
 * returns the one div with class "red prev" and innerHTML "Red One".
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.prevAll=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the previous element for nodes in this dojo.NodeList.<br>
 *	 Optionally takes a query to filter the previous elements.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.
 * @param {String} [query] a CSS selector.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		Some Text
 * 		&lt;div class="blue first"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".first").prev();
 * returns the div with class "red" and has innerHTML of "Red One".
 * Running this code:
 * 	dojo.query(".first").prev(".blue");
 * does not return any elements.
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.prev=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 prepends nodes in this NodeList to the nodes matched by<br>
 *	 the query passed to prependTo.<br>
 * </blockquote>
 * The nodes in this NodeList will be cloned if the query<br>
 * matches more than one element. Only the DOM nodes are cloned, not<br>
 * any attached event handlers.
 * @param {String} query 
 * 
 * @returns {dojo.NodeList} -not the matched nodes from the query.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;span&gt;prepend&lt;/span&gt;
 * 	&lt;p&gt;Hello Mars&lt;/p&gt;
 * 	&lt;p&gt;Hello World&lt;/p&gt;
 * Running this code:
 * 	dojo.query("span").prependTo("p");
 * Results in this DOM structure:
 * 	&lt;p&gt;&lt;span&gt;prepend&lt;/span&gt;Hello Mars&lt;/p&gt;
 * 	&lt;p&gt;&lt;span&gt;prepend&lt;/span&gt;Hello World&lt;/p&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.prependTo=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 prepends the content to every node in the NodeList.<br>
 * </blockquote>
 * The content will be cloned if the length of NodeList<br>
 * is greater than 1. Only the DOM nodes are cloned, not<br>
 * any attached event handlers.
 * @param {String||DOMNode||NodeList} content 
 * 
 * @returns {dojo.NodeList} -not the appended content.
 * assume a DOM created by this markup:<br>
 * 	<div id="foo"><p>Hello Mars</p></div><br>
 * 	<div id="bar"><p>Hello World</p></div><br>
 * Running this code:<br>
 * 	dojo.query("div").prepend("<span>prepend</span>");<br>
 * Results in this DOM structure:<br>
 * 	<div id="foo"><span>prepend</span><p>Hello Mars</p></div><br>
 * 	<div id="bar"><span>prepend</span><p>Hello World</p></div>
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.prepend=function(content){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns all parent elements for nodes in this dojo.NodeList.<br>
 *	 Optionally takes a query to filter the child elements.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.
 * @param {String} [query] a CSS selector.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="blue first"&gt;&lt;span class="text"&gt;Blue One&lt;/span&gt;&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;&lt;span class="text"&gt;Blue Two&lt;/span&gt;&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".text").parents();
 * returns the two divs with class "blue", the div with class "container",
 * 	the body element and the html element.
 * Running this code:
 * 	dojo.query(".text").parents(".container");
 * returns the one div with class "container".
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.parents=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns immediate parent elements for nodes in this dojo.NodeList.<br>
 *	 Optionally takes a query to filter the parent elements.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.
 * @param {String} [query] a CSS selector.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="blue first"&gt;&lt;span class="text"&gt;Blue One&lt;/span&gt;&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;&lt;span class="text"&gt;Blue Two&lt;/span&gt;&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".text").parent();
 * returns the two divs with class "blue".
 * Running this code:
 * 	dojo.query(".text").parent(".first");
 * returns the one div with class "blue" and "first".
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.parent=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 Listen for events on the nodes in the NodeList. Basic usage is:<br>
 *	  query(&amp;quot;.my-class&amp;quot;).on(&amp;quot;click&amp;quot;, listener);<br>
 *	 This supports event delegation by using selectors as the first argument with the event names as<br>
 *	 pseudo selectors. For example:<br>
 *	  dojo.query(&amp;quot;#my-list&amp;quot;).on(&amp;quot;li:click&amp;quot;, listener);<br>
 *	 This will listen for click events within &amp;lt;li&amp;gt; elements that are inside the #my-list element.<br>
 *	 Because on supports CSS selector syntax, we can use comma-delimited events as well:<br>
 *	  dojo.query(&amp;quot;#my-list&amp;quot;).on(&amp;quot;li button:mouseover, li:click&amp;quot;, listener);<br>
 * </blockquote>
 * @param {mixed} eventName 
 * @param {mixed} listener 
 * @returns {TODO: apply to the NodeList so the same selector engine is used for matches} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.on=function(eventName, listener){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the odd nodes in this dojo.NodeList as a dojo.NodeList.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="interior red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="interior blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="interior red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="interior blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".interior").odd();
 * returns the two divs with class "red"
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.odd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns all sibling elements that come after the nodes in this dojo.NodeList.<br>
 *	 Optionally takes a query to filter the sibling elements.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.
 * @param {String} [query] a CSS selector.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		Some Text
 * 		&lt;div class="blue first"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red next"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue next"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".first").nextAll();
 * returns the two divs with class of "next".
 * Running this code:
 * 	dojo.query(".first").nextAll(".red");
 * returns the one div with class "red" and innerHTML "Red Two".
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.nextAll=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the next element for nodes in this dojo.NodeList.<br>
 *	 Optionally takes a query to filter the next elements.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.
 * @param {String} [query] a CSS selector.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		Some Text
 * 		&lt;div class="blue first"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue last"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".first").next();
 * returns the div with class "red" and has innerHTML of "Red Two".
 * Running this code:
 * 	dojo.query(".last").next(".red");
 * does not return any elements.
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.next=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 see dojo.map(). The primary difference is that the acted-on<br>
 *	 array is implicitly this NodeList and the return is a<br>
 *	 dojo.NodeList (a subclass of Array)<br>
 *	 /return d.map(this, func, obj, d.NodeList); // dojo.NodeList<br>
 * </blockquote>
 * @param {Function} func 
 * @param {Function} [obj] 
 * @returns {dojo.NodeList} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.map=function(func, obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 see dojo.lastIndexOf(). The primary difference is that the<br>
 *	 acted-on array is implicitly this NodeList<br>
 * </blockquote>
 * For more details on the behavior of lastIndexOf, see<br>
 * Mozilla's (lastIndexOf<br>
 * docs)[http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:lastIndexOf]
 * @see reference <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:lastIndexOf]">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:lastIndexOf]</a>
 * @param {Object} value The value to search for.
 * @param {Integer} [fromIndex] The location to start searching from. Optional. Defaults to 0.
 * 
 * @returns {Integer} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.lastIndexOf=function(value, fromIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the last node in this dojo.NodeList as a dojo.NodeList.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.<br>
 * 
 * @returns {dojo.NodeList} -
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="blue first"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue last"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".blue").last();
 * returns the last div with class "blue",
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.last=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a new instance of a specified class, using the<br>
 *	 specified properties and each node in the nodeList as a<br>
 *	 srcNodeRef.<br>
 * </blockquote>
 * @param {String|Object} declaredClass 
 * @param {Object} [properties] 
 * @example
 * Grabs all buttons in the page and converts them to diji.form.Buttons.
 * 	var buttons = dojo.query("button").instantiate("dijit.form.Button", {showLabel: true});
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.instantiate=function(declaredClass, properties){};
/**
 * <b>Summary:</b><blockquote>
 *	 The nodes in this NodeList will be placed after the nodes<br>
 *	 matched by the query passed to insertAfter.<br>
 * </blockquote>
 * The nodes in this NodeList will be cloned if the query<br>
 * matches more than one element. Only the DOM nodes are cloned, not<br>
 * any attached event handlers.
 * @param {String} query 
 * 
 * @returns {dojo.NodeList} -not the matched nodes from the query.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;span&gt;before&lt;/span&gt;
 * 	&lt;p&gt;Hello Mars&lt;/p&gt;
 * 	&lt;p&gt;Hello World&lt;/p&gt;
 * Running this code:
 * 	dojo.query("span").insertBefore("p");
 * Results in this DOM structure:
 * 	&lt;span&gt;before&lt;/span&gt;&lt;p&gt;Hello Mars&lt;/p&gt;
 * 	&lt;span&gt;before&lt;/span&gt;&lt;p&gt;Hello World&lt;/p&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.insertBefore=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 The nodes in this NodeList will be placed after the nodes<br>
 *	 matched by the query passed to insertAfter.<br>
 * </blockquote>
 * The nodes in this NodeList will be cloned if the query<br>
 * matches more than one element. Only the DOM nodes are cloned, not<br>
 * any attached event handlers.
 * @param {String} query 
 * 
 * @returns {dojo.NodeList} -not the matched nodes from the query.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;span&gt;after&lt;/span&gt;
 * 	&lt;p&gt;Hello Mars&lt;/p&gt;
 * 	&lt;p&gt;Hello World&lt;/p&gt;
 * Running this code:
 * 	dojo.query("span").insertAfter("p");
 * Results in this DOM structure:
 * 	&lt;p&gt;Hello Mars&lt;/p&gt;&lt;span&gt;after&lt;/span&gt;
 * 	&lt;p&gt;Hello World&lt;/p&gt;&lt;span&gt;after&lt;/span&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.insertAfter=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 allows setting the innerHTML of each node in the NodeList,<br>
 *	 if there is a value passed in, otherwise, reads the innerHTML value of the first node.<br>
 * </blockquote>
 * This method is simpler than the dojo.NodeList.html() method provided by<br>
 * `dojo.NodeList-html`. This method just does proper innerHTML insertion of HTML fragments,<br>
 * and it allows for the innerHTML to be read for the first node in the node list.<br>
 * Since dojo.NodeList-html already took the "html" name, this method is called<br>
 * "innerHTML". However, if dojo.NodeList-html has not been loaded yet, this<br>
 * module will define an "html" method that can be used instead. Be careful if you<br>
 * are working in an environment where it is possible that dojo.NodeList-html could<br>
 * have been loaded, since its definition of "html" will take precedence.<br>
 * The nodes represented by the value argument will be cloned if more than one<br>
 * node is in this NodeList. The nodes in this NodeList are returned in the "set"<br>
 * usage of this method, not the HTML that was inserted.
 * @param {String||DOMNode|NodeList} [value] 
 * 
 * @returns {dojo.NodeList|String} -If a value is passed, the return is this dojo.NodeList
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div id="foo"&gt;&lt;/div&gt;
 * 	&lt;div id="bar"&gt;&lt;/div&gt;
 * This code inserts &lt;p&gt;Hello World&lt;/p&gt; into both divs:
 * 	dojo.query("div").innerHTML("&lt;p&gt;Hello World&lt;/p&gt;");
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div id="foo"&gt;&lt;p&gt;Hello Mars&lt;/p&gt;&lt;/div&gt;
 * 	&lt;div id="bar"&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/div&gt;
 * This code returns "&lt;p&gt;Hello Mars&lt;/p&gt;":
 * 	var message = dojo.query("div").innerHTML();
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.innerHTML=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 see dojo.indexOf(). The primary difference is that the acted-on<br>
 *	 array is implicitly this NodeList<br>
 * </blockquote>
 * For more details on the behavior of indexOf, see Mozilla's<br>
 * (indexOf<br>
 * docs)[http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:indexOf]
 * @see reference <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:indexOf]">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:indexOf]</a>
 * @param {Object:} value The value to search for.
 * @param {Integer:} [fromIndex] The location to start searching from. Optional. Defaults to 0.
 * 
 * @returns {Integer} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.indexOf=function(value, fromIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 see the information for &amp;quot;innerHTML&amp;quot;. &amp;quot;html&amp;quot; is an alias for &amp;quot;innerHTML&amp;quot;, but is<br>
 *	 only defined if dojo.NodeList-html has not been loaded.<br>
 * </blockquote>
 * An alias for the "innerHTML" method, but only defined if there is not an existing<br>
 * "html" method on dojo.NodeList. Be careful if you are working in an environment<br>
 * where it is possible that dojo.NodeList-html could have been loaded, since its<br>
 * definition of "html" will take precedence. If you are not sure if dojo.NodeList-html<br>
 * could be loaded, use the "innerHTML" method.
 * @param {String|DomNode|NodeList} [content] An html string, node or enumerable list of nodes for insertion into the dom
 * @param {Object} [params] Optional flags/properties to configure the content-setting. See dojo.html._ContentSetter
 * 
 * @returns {dojo.NodeList|String} -If a value is passed, the return is this dojo.NodeList
 * @example
 *  dojo.query(".thingList").html("&lt;li dojoType='dojo.dnd.Moveable'&gt;1&lt;/li&gt;&lt;li dojoType='dojo.dnd.Moveable'&gt;2&lt;/li&gt;&lt;li dojoType='dojo.dnd.Moveable'&gt;3&lt;/li&gt;",
 *  {
 *  	parseContent: true,
 *  	onBegin: function(){
 *  		this.content = this.content.replace(/([0-9])/g, this.id + ": $1");
 *  		this.inherited("onBegin", arguments);
 *  	}
 *  }).removeClass("notdone").addClass("done");
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.html=function(content, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 see `dojo.forEach()`. The primary difference is that the acted-on<br>
 *	 array is implicitly this NodeList. If you want the option to break out<br>
 *	 of the forEach loop, use every() or some() instead.<br>
 * </blockquote>
 * @param {mixed} callback 
 * @param {mixed} thisObj 
 * @returns {dojo.NodeList} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.forEach=function(callback, thisObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the first node in this dojo.NodeList as a dojo.NodeList.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.<br>
 * 
 * @returns {dojo.NodeList} -
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="blue first"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue last"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".blue").first();
 * returns the div with class "blue" and "first".
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.first=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 &amp;quot;masks&amp;quot; the built-in javascript filter() method (supported<br>
 *	 in Dojo via `dojo.filter`) to support passing a simple<br>
 *	 string filter in addition to supporting filtering function<br>
 *	 objects.<br>
 * </blockquote>
 * @param {String|Function} filter If a string, a CSS rule like &quot;.thinger&quot; or &quot;div &gt; span&quot;.
 * @returns {dojo.NodeList} -
 * @example
 * "regular" JS filter syntax as exposed in dojo.filter:
 * 	dojo.query("*").filter(function(item){
 * 		// highlight every paragraph
 * 		return (item.nodeName == "p");
 * 	}).style("backgroundColor", "yellow");
 * @example
 * the same filtering using a CSS selector
 * 	dojo.query("*").filter("p").styles("backgroundColor", "yellow");
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.filter=function(filter){};
/**
 * <b>Summary:</b><blockquote>
 *	 fade out all elements of this NodeList via `dojo.fadeOut`<br>
 * </blockquote>
 * @param {Object} [args] Additional dojo.Animation arguments to mix into this set with the addition of
 * an `auto` parameter.<br>
 * 
 * @returns {dojo.Animation|dojo.NodeList} -A special args member `auto` can be passed to automatically play the animation.
 * If args.auto is present, the original dojo.NodeList will be returned for further<br>
 * chaining. Otherwise the dojo.Animation instance is returned and must be .play()'ed
 * @example
 * Fade out all elements with class "zork":
 * 	dojo.query(".zork").fadeOut().play();
 * @example
 * Fade them on a delay and do something at the end:
 * 	var fo = dojo.query(".zork").fadeOut();
 * 	dojo.connect(fo, "onEnd", function(){ ///.../// });
 * 	fo.play();
 * @example
 * Using `auto`:
 * 	dojo.query("li").fadeOut({ auto:true }).filter(filterFn).forEach(doit);
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.fadeOut=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 fade in all elements of this NodeList via `dojo.fadeIn`<br>
 * </blockquote>
 * @param {Object} [args] Additional dojo.Animation arguments to mix into this set with the addition of
 * an `auto` parameter.<br>
 * 
 * @returns {dojo.Animation|dojo.NodeList} -A special args member `auto` can be passed to automatically play the animation.
 * If args.auto is present, the original dojo.NodeList will be returned for further<br>
 * chaining. Otherwise the dojo.Animation instance is returned and must be .play()'ed
 * @example
 * Fade in all tables with class "blah":
 * 	dojo.query("table.blah").fadeIn().play();
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.fadeIn=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 see `dojo.every()` and the (Array.every<br>
 *	 docs)[http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every].<br>
 *	 Takes the same structure of arguments and returns as<br>
 *	 dojo.every() with the caveat that the passed array is<br>
 *	 implicitly this NodeList<br>
 * </blockquote>
 * @see reference <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every].">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every].</a>
 * @param {Function:} callback the callback
 * @param {Object:} [thisObject] the context
 * @returns {Boolean} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.every=function(callback, thisObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the even nodes in this dojo.NodeList as a dojo.NodeList.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="interior red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="interior blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="interior red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="interior blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".interior").even();
 * returns the two divs with class "blue"
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.even=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ends use of the current `dojo.NodeList` by returning the previous dojo.NodeList<br>
 *	 that generated the current dojo.NodeList.<br>
 * </blockquote>
 * Returns the `dojo.NodeList` that generated the current `dojo.NodeList`. If there<br>
 * is no parent dojo.NodeList, an empty dojo.NodeList is returned.
 * @example
 * 	dojo.query("a")
 * 		.filter(".disabled")
 * 			// operate on the anchors that only have a disabled class
 * 			.style("color", "grey")
 * 		.end()
 * 		// jump back to the list of anchors
 * 		.style(...)
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.end=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Monitor nodes in this NodeList for [bubbled] events on nodes that match selector.<br>
 *	 Calls fn(evt) for those events, where (inside of fn()), this == the node<br>
 *	 that matches the selector.<br>
 * </blockquote>
 * Sets up event handlers that can catch events on any subnodes matching a given selector,<br>
 * including nodes created after delegate() has been called.<br>
 * <br>
 * This allows an app to setup a single event handler on a high level node, rather than many<br>
 * event handlers on subnodes. For example, one onclick handler for a Tree widget, rather than separate<br>
 * handlers for each node in the tree.<br>
 * Since setting up many event handlers is expensive, this can increase performance.<br>
 * <br>
 * Note that delegate() will not work for events that don't bubble, like focus.<br>
 * onmouseenter/onmouseleave also don't currently work.
 * @param {String} selector CSS selector valid to `dojo.query`, like &quot;.foo&quot; or &quot;div &gt; span&quot;.  The
 * selector is relative to the nodes in this NodeList, not the document root.<br>
 * For example myNodeList.delegate(&quot;&gt; a&quot;, &quot;onclick&quot;, ...) will catch events on<br>
 * anchor nodes which are (immediate) children of the nodes in myNodeList.
 * @param {String} eventName Standard event name used as an argument to `dojo.connect`, like &quot;onclick&quot;.
 * @param {Function} fn Callback function passed the event object, and where this == the node that matches the selector.
 * That means that for example, after setting up a handler via<br>
 * dojo.query(&quot;body&quot;).delegate(&quot;fieldset&quot;, &quot;onclick&quot;, ...)<br>
 * clicking on a fieldset or *any nodes inside of a fieldset* will be reported<br>
 * as a click on the fieldset itself.
 * @example
 * 	dojo.query("navbar").delegate("a", "onclick", function(evt){
 * 			console.log("user clicked anchor ", this.node);
 * 	});
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.delegate=function(selector, eventName, fn){};
/**
 * <b>Summary:</b><blockquote>
 *	 stash or get some arbitrary data on/from these nodes.<br>
 * </blockquote>
 * Stash or get some arbirtrary data on/from these nodes. This private _data function is<br>
 * exposed publicly on `dojo.NodeList`, eg: as the result of a `dojo.query` call.<br>
 * DIFFERS from jQuery.data in that when used as a getter, the entire list is ALWAYS<br>
 * returned. EVEN WHEN THE LIST IS length == 1.<br>
 * <br>
 * A single-node version of this function is provided as `dojo._nodeData`, which follows<br>
 * the same signature, though expects a String ID or DomNode reference in the first<br>
 * position, before key/value arguments.<br>
 * <br>
 * node: String|DomNode<br>
 * The node to associate data with
 * @param {Object|String} [key] If an object, act as a setter and iterate over said object setting data items as defined.
 * If a string, and `value` present, set the data for defined `key` to `value`<br>
 * If a string, and `value` absent, act as a getter, returning the data associated with said `key`
 * @param {Anything} [value] The value to set for said `key`, provided `key` is a string (and not an object)
 * @example
 * Set a key `bar` to some data, then retrieve it.
 * 	dojo.query(".foo").data("bar", "touched");
 * 	var touched = dojo.query(".foo").data("bar");
 * 	if(touched[0] == "touched"){ alert('win'); }
 * @example
 * Get all the data items for a given node.
 * 	var list = dojo.query(".foo").data();
 * 	var first = list[0];
 * @example
 * Set the data to a complex hash. Overwrites existing keys with new value
 * 	dojo.query(".foo").data({ bar:"baz", foo:"bar" });
 * Then get some random key:
 * 	dojo.query(".foo").data("foo"); // returns [`bar`]
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.data=function(key, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated: Use position() for border-box x/y/w/h<br>
 *	 or marginBox() for margin-box w/h/l/t.<br>
 *	 Returns the box objects of all elements in a node list as<br>
 *	 an Array (*not* a NodeList). Acts like `dojo.coords`, though assumes<br>
 *	 the node passed is each node in this list.<br>
 * </blockquote>
 * @returns {Array} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.coords=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 attach event handlers to every item of the NodeList. Uses dojo.connect()<br>
 *	 so event properties are normalized<br>
 * </blockquote>
 * @param {String} methodName the name of the method to attach to. For DOM events, this should be
 * the lower-case name of the event
 * @param {Object|Function|String} objOrFunc if 2 arguments are passed (methodName, objOrFunc), objOrFunc should
 * reference a function or be the name of the function in the global<br>
 * namespace to attach. If 3 arguments are provided<br>
 * (methodName, objOrFunc, funcName), objOrFunc must be the scope to<br>
 * locate the bound function in
 * @param {String} [funcName] optional. A string naming the function in objOrFunc to bind to the
 * event. May also be a function reference.
 * @example
 * add an onclick handler to every button on the page
 * 	dojo.query("div:nth-child(odd)").connect("onclick", function(e){
 * 		console.log("clicked!");
 * 	});
 * @example
 * attach foo.bar() to every odd div's onmouseover
 * 	dojo.query("div:nth-child(odd)").connect("onmouseover", foo, "bar");
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.connect=function(methodName, objOrFunc, funcName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a new NodeList comprised of items in this NodeList<br>
 *	 as well as items passed in as parameters<br>
 * </blockquote>
 * This method behaves exactly like the Array.concat method<br>
 * with the caveat that it returns a `dojo.NodeList` and not a<br>
 * raw Array. For more details, see the (Array.concat<br>
 * docs)[http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:concat]
 * @see reference <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:concat]">http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:concat]</a>
 * @param {Object} [item] Any number of optional parameters may be passed in to be
 * spliced into the NodeList<br>
 * 
 * @returns {dojo.NodeList} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.concat=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns closest parent that matches query, including current node in this<br>
 *	 dojo.NodeList if it matches the query.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.
 * @param {String} query a CSS selector.
 * @param {String|DOMNode} [root] If specified, query is relative to &quot;root&quot; rather than document body.
 * 
 * @returns {To make rhino strict checking happy.} -node in this dojo.NodeList if it matches the query.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		Some Text
 * 		&lt;div class="blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".red").closest(".container");
 * returns the div with class "container".
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.closest=function(query, root){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clones all the nodes in this NodeList and returns them as a new NodeList.<br>
 * </blockquote>
 * Only the DOM nodes are cloned, not any attached event handlers.<br>
 * 
 * @returns {dojo.NodeList} -
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".red").clone().appendTo(".container");
 * Results in this DOM structure:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.clone=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns all immediate child elements for nodes in this dojo.NodeList.<br>
 *	 Optionally takes a query to filter the child elements.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.
 * @param {String} [query] a CSS selector.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red"&gt;Red One&lt;/div&gt;
 * 		Some Text
 * 		&lt;div class="blue"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".container").children();
 * returns the four divs that are children of the container div.
 * Running this code:
 * 	dojo.query(".container").children(".red");
 * returns the two divs that have the class "red".
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.children=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 Places the content before every node in the NodeList.<br>
 * </blockquote>
 * The content will be cloned if the length of NodeList<br>
 * is greater than 1. Only the DOM nodes are cloned, not<br>
 * any attached event handlers.
 * @param {String||DOMNode||NodeList} content 
 * 
 * @returns {dojo.NodeList} -not the appended content.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div id="foo"&gt;&lt;p&gt;Hello Mars&lt;/p&gt;&lt;/div&gt;
 * 	&lt;div id="bar"&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/div&gt;
 * Running this code:
 * 	dojo.query("div").before("&lt;span&gt;before&lt;/span&gt;");
 * Results in this DOM structure:
 * 	&lt;span&gt;before&lt;/span&gt;&lt;div id="foo"&gt;&lt;p&gt;Hello Mars&lt;/p&gt;&lt;/div&gt;
 * 	&lt;span&gt;before&lt;/span&gt;&lt;div id="bar"&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/div&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.before=function(content){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a new NodeList comprised of items in this NodeList<br>
 *	 at the given index or indices.<br>
 * </blockquote>
 * @param {Integer} index One or more 0-based indices of items in the current
 * NodeList. A negative index will start at the end of the<br>
 * list and go backwards.<br>
 * 
 * @returns {dojo.NodeList} -
 * @example
 * Shorten the list to the first, second, and third elements
 * 	dojo.query("a").at(0, 1, 2).forEach(fn);
 * @example
 * Retrieve the first and last elements of a unordered list:
 * 	dojo.query("ul &gt; li").at(0, -1).forEach(cb);
 * @example
 * Do something for the first element only, but end() out back to
 * the original list and continue chaining:
 * 	dojo.query("a").at(0).onclick(fn).end().forEach(function(n){
 * 		console.log(n); // all anchors on the page.
 * 	})
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.at=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 appends nodes in this NodeList to the nodes matched by<br>
 *	 the query passed to appendTo.<br>
 * </blockquote>
 * The nodes in this NodeList will be cloned if the query<br>
 * matches more than one element. Only the DOM nodes are cloned, not<br>
 * any attached event handlers.
 * @param {String} query 
 * 
 * @returns {dojo.NodeList} -not the matched nodes from the query.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;span&gt;append&lt;/span&gt;
 * 	&lt;p&gt;Hello Mars&lt;/p&gt;
 * 	&lt;p&gt;Hello World&lt;/p&gt;
 * Running this code:
 * 	dojo.query("span").appendTo("p");
 * Results in this DOM structure:
 * 	&lt;p&gt;Hello Mars&lt;span&gt;append&lt;/span&gt;&lt;/p&gt;
 * 	&lt;p&gt;Hello World&lt;span&gt;append&lt;/span&gt;&lt;/p&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.appendTo=function(query){};
/**
 * <b>Summary:</b><blockquote>
 *	 appends the content to every node in the NodeList.<br>
 * </blockquote>
 * The content will be cloned if the length of NodeList<br>
 * is greater than 1. Only the DOM nodes are cloned, not<br>
 * any attached event handlers.
 * @param {String||DOMNode||NodeList} content 
 * 
 * @returns {dojo.NodeList} -not the appended content.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div id="foo"&gt;&lt;p&gt;Hello Mars&lt;/p&gt;&lt;/div&gt;
 * 	&lt;div id="bar"&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/div&gt;
 * Running this code:
 * 	dojo.query("div").append("&lt;span&gt;append&lt;/span&gt;");
 * Results in this DOM structure:
 * 	&lt;div id="foo"&gt;&lt;p&gt;Hello Mars&lt;/p&gt;&lt;span&gt;append&lt;/span&gt;&lt;/div&gt;
 * 	&lt;div id="bar"&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;span&gt;append&lt;/span&gt;&lt;/div&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.append=function(content){};
/**
 * <b>Summary:</b><blockquote>
 *	 Animate all elements of this NodeList across the properties specified.<br>
 *	 syntax identical to `dojo.animateProperty`<br>
 * </blockquote>
 * @param {Object} [args] Additional dojo.Animation arguments to mix into this set with the addition of
 * an `auto` parameter.<br>
 * 
 * @returns {dojo.Animation|dojo.NodeList} -A special args member `auto` can be passed to automatically play the animation.
 * If args.auto is present, the original dojo.NodeList will be returned for further<br>
 * chaining. Otherwise the dojo.Animation instance is returned and must be .play()'ed
 * @example
 * 	dojo.query(".zork").animateProperty({
 * 		duration: 500,
 * 		properties: {
 * 			color:		{ start: "black", end: "white" },
 * 			left:		{ end: 300 }
 * 		}
 * 	}).play();
 * @example
 * 	dojo.query(".grue").animateProperty({
 * 		auto:true,
 * 		properties: {
 * 			height:240
 * 		}
 * 	}).onclick(handler);
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.animateProperty=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Animate one or more CSS properties for all nodes in this list.<br>
 *	 The returned animation object will already be playing when it<br>
 *	 is returned. See the docs for `dojo.anim` for full details.<br>
 * </blockquote>
 * @param {Object} properties the properties to animate. does NOT support the `auto` parameter like other
 * NodeList-fx methods.
 * @param {Integer} [duration] Optional. The time to run the animations for
 * @param {Function} [easing] Optional. The easing function to use.
 * @param {Function} [onEnd] A function to be called when the animation ends
 * @param {Integer} [delay] how long to delay playing the returned animation
 * @returns {dojo.Animation} -
 * @example
 * Another way to fade out:
 * 	dojo.query(".thinger").anim({ opacity: 0 });
 * @example
 * animate all elements with the "thigner" class to a width of 500
 * pixels over half a second
 * 	dojo.query(".thinger").anim({ width: 500 }, 700);
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.anim=function(properties, duration, easing, onEnd, delay){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds the nodes from the previous dojo.NodeList to the current dojo.NodeList.<br>
 * </blockquote>
 * .end() can be used on the returned dojo.NodeList to get back to the<br>
 * original dojo.NodeList.<br>
 * 
 * @returns {dojo.NodeList} -
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div class="container"&gt;
 * 		&lt;div class="red prev"&gt;Red One&lt;/div&gt;
 * 		Some Text
 * 		&lt;div class="blue prev"&gt;Blue One&lt;/div&gt;
 * 		&lt;div class="red second"&gt;Red Two&lt;/div&gt;
 * 		&lt;div class="blue"&gt;Blue Two&lt;/div&gt;
 * 	&lt;/div&gt;
 * Running this code:
 * 	dojo.query(".second").prevAll().andSelf();
 * returns the two divs with class of "prev", as well as the div with class "second".
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.andSelf=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Places the content after every node in the NodeList.<br>
 * </blockquote>
 * The content will be cloned if the length of NodeList<br>
 * is greater than 1. Only the DOM nodes are cloned, not<br>
 * any attached event handlers.
 * @param {String||Element||NodeList} content 
 * 
 * @returns {dojo.NodeList} -not the appended content.
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div id="foo"&gt;&lt;p&gt;Hello Mars&lt;/p&gt;&lt;/div&gt;
 * 	&lt;div id="bar"&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/div&gt;
 * Running this code:
 * 	dojo.query("div").after("&lt;span&gt;after&lt;/span&gt;");
 * Results in this DOM structure:
 * 	&lt;div id="foo"&gt;&lt;p&gt;Hello Mars&lt;/p&gt;&lt;/div&gt;&lt;span&gt;after&lt;/span&gt;
 * 	&lt;div id="bar"&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/div&gt;&lt;span&gt;after&lt;/span&gt;
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype.after=function(content){};
/**
 * <b>Summary:</b><blockquote>
 *	 private function to hold to a parent NodeList. end() to return the parent NodeList.<br>
 * </blockquote>
 * @param {mixed} parent 
 * @private
 * @returns {dojo.NodeList} -
 * @example
 * How to make a `dojo.NodeList` method that only returns the third node in
 * the dojo.NodeList but allows access to the original NodeList by using this._stash:
 * 	dojo.extend(dojo.NodeList, {
 * 		third: function(){
 * 			var newNodeList = dojo.NodeList(this[2]);
 * 			return newNodeList._stash(this);
 * 		}
 * 	});
 * 	// then see how _stash applies a sub-list, to be .end()'ed out of
 * 	dojo.query(".foo")
 * 		.third()
 * 			.addClass("thirdFoo")
 * 		.end()
 * 		// access to the orig .foo list
 * 		.removeClass("foo")
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype._stash=function(parent){};
/**
 * <b>Summary:</b><blockquote>
 *	 private method for inserting queried nodes into all nodes in this NodeList<br>
 *	 at different positions. Differs from NodeList.place because it will clone<br>
 *	 the nodes in this NodeList if the query matches more than one element.<br>
 * </blockquote>
 * @param {String||Node||NodeList} query 
 * @param {String} position 
 * @private
 * @returns {dojo.NodeList} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype._placeMultiple=function(query, position){};
/**
 * <b>Summary:</b><blockquote>
 *	 gets unique element nodes, filters them further<br>
 *	 with an optional query and then calls _stash to track parent NodeList.<br>
 * </blockquote>
 * @param {Array} nodes 
 * @param {String} query 
 * @private
 * @returns {dojo.NodeList} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype._getUniqueNodeListWithParent=function(nodes, query){};
/**
 * <b>Summary:</b><blockquote>
 *	 given a list of nodes, make sure only unique<br>
 *	 elements are returned as our NodeList object.<br>
 *	 Does not call _stash().<br>
 * </blockquote>
 * @param {Array} nodes 
 * @private
 * @returns {dojo.NodeList} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype._getUniqueAsNodeList=function(nodes){};
/**
 * <b>Summary:</b><blockquote>
 *	 cycles over all the nodes and calls a callback<br>
 *	 to collect nodes for a possible inclusion in a result.<br>
 *	 The callback will get two args: callback(node, ary),<br>
 *	 where ary is the array being used to collect the nodes.<br>
 * </blockquote>
 * @param {String} [query] 
 * @param {Function} callback 
 * @private
 * @returns {dojo.NodeList} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype._getRelatedUniqueNodes=function(query, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 builds a new array of possibly differing size based on the input list.<br>
 *	 Since the returned array is likely of different size than the input array,<br>
 *	 the array's map function cannot be used.<br>
 * </blockquote>
 * @param {Function} callback 
 * @private
 * @returns {Array} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype._buildArrayFromCallback=function(callback){};
/**
 * @param {mixed} obj 
 * @param {mixed} method 
 * @param {mixed} args 
 * @private
 * @returns {dojo.Animation|dojo.NodeList} -
 * @memberOf dojo.NodeList
*/
dojo.NodeList.prototype._anim=function(obj, method, args){};
/**
 * @namespace
*/
dojo.document={};
/**
 * <b>Summary:</b><blockquote>
 *	 In addition to the properties listed for the dojo._IoArgs type,<br>
 *	 the following properties are allowed for dojo.xhr* methods.<br>
 * </blockquote>
 * @class
 * @extends dojo.__IoArgs
 * @private
 * @returns {dojo.__XhrArgs} new instance
*/
dojo.__XhrArgs=function(){};
/**
 * @class
 * @private
 * @returns {dojo.__IoArgs} new instance
*/
dojo.__IoArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function will be<br>
 *	 called on a successful HTTP response code.<br>
 * </blockquote>
 * @param {Object} response The response in the format as defined with handleAs.
 * @param {dojo.__IoCallbackArgs} ioArgs Provides additional information about the request.
*/
dojo.__IoArgs.load=function(response, ioArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function will<br>
 *	 be called at the end of every request, whether or not an error occurs.<br>
 * </blockquote>
 * @param {String} loadOrError Provides a string that tells you whether this function
 * was called because of success (load) or failure (error).
 * @param {Object} response The response in the format as defined with handleAs.
 * @param {dojo.__IoCallbackArgs} ioArgs Provides additional information about the request.
*/
dojo.__IoArgs.handle=function(loadOrError, response, ioArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function will<br>
 *	 be called when the request fails due to a network or server error, the url<br>
 *	 is invalid, etc. It will also be called if the load or handle callback throws an<br>
 *	 exception, unless djConfig.debugAtAllCosts is true.	 This allows deployed applications<br>
 *	 to continue to run even when a logic error happens in the callback, while making<br>
 *	 it easier to troubleshoot while in debug mode.<br>
 * </blockquote>
 * @param {Object} response The response in the format as defined with handleAs.
 * @param {dojo.__IoCallbackArgs} ioArgs Provides additional information about the request.
*/
dojo.__IoArgs.error=function(response, ioArgs){};
/**
 * @class
 * @private
 * @returns {dojo.__IoCallbackArgs} new instance
*/
dojo.__IoCallbackArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a list of IO topics that can be published<br>
 *	 if djConfig.ioPublish is set to true. IO topics can be<br>
 *	 published for any Input/Output, network operation. So,<br>
 *	 dojo.xhr, dojo.io.script and dojo.io.iframe can all<br>
 *	 trigger these topics to be published.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojo.__IoPublish} new instance
*/
dojo.__IoPublish=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Utility for unobtrusive/progressive event binding, DOM traversal,<br>
 *	 and manipulation.<br>
 * </blockquote>
 * A very simple, lightweight mechanism for applying code to<br>
 * existing documents, based around `dojo.query` (CSS3 selectors) for node selection,<br>
 * and a simple two-command API: `dojo.behavior.add()` and `dojo.behavior.apply()`;<br>
 * <br>
 * Behaviors apply to a given page, and are registered following the syntax<br>
 * options described by `dojo.behavior.add` to match nodes to actions, or "behaviors".<br>
 * <br>
 * Added behaviors are applied to the current DOM when .apply() is called,<br>
 * matching only new nodes found since .apply() was last called.
 * @class
 * @returns {dojo.behavior} new instance
*/
dojo.behavior=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Applies all currently registered behaviors to the document.<br>
 * </blockquote>
 * Applies all currently registered behaviors to the document,<br>
 * taking care to ensure that only incremental updates are made<br>
 * since the last time add() or apply() were called.<br>
 * <br>
 * If new matching nodes have been added, all rules in a behavior will be<br>
 * applied to that node. For previously matched nodes, only<br>
 * behaviors which have been added since the last call to apply()<br>
 * will be added to the nodes.<br>
 * <br>
 * apply() is called once automatically by `dojo.addOnLoad`, so<br>
 * registering behaviors with `dojo.behavior.add` before the DOM is<br>
 * ready is acceptable, provided the dojo.behavior module is ready.<br>
 * <br>
 * Calling appy() manually after manipulating the DOM is required<br>
 * to rescan the DOM and apply newly .add()ed behaviors, or to match<br>
 * nodes that match existing behaviors when those nodes are added to<br>
 * the DOM.<br>
*/
dojo.behavior.apply=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add the specified behavior to the list of behaviors, ignoring existing<br>
 *	 matches.<br>
 * </blockquote>
 * Add the specified behavior to the list of behaviors which will<br>
 * be applied the next time apply() is called. Calls to add() for<br>
 * an already existing behavior do not replace the previous rules,<br>
 * but are instead additive. New nodes which match the rule will<br>
 * have all add()-ed behaviors applied to them when matched.<br>
 * <br>
 * The "found" method is a generalized handler that's called as soon<br>
 * as the node matches the selector. Rules for values that follow also<br>
 * apply to the "found" key.<br>
 * <br>
 * The "on*" handlers are attached with `dojo.connect()`, using the<br>
 * matching node<br>
 * <br>
 * If the value corresponding to the ID key is a function and not a<br>
 * list, it's treated as though it was the value of "found".<br>
 * <br>
 * dojo.behavior.add() can be called any number of times before<br>
 * the DOM is ready. `dojo.behavior.apply()` is called automatically<br>
 * by `dojo.addOnLoad`, though can be called to re-apply previously added<br>
 * behaviors anytime the DOM changes.<br>
 * <br>
 * There are a variety of formats permitted in the behaviorObject
 * @param {Object} behaviorObj The behavior object that will be added to behaviors list. The behaviors
 * in the list will be applied the next time apply() is called.
 * @example
 * Simple list of properties. "found" is special. "Found" is assumed if
 * no property object for a given selector, and property is a function.
 * 
 * 	dojo.behavior.add({
 * 		"#id": {
 * 			"found": function(element){
 * 				// node match found
 * 			},
 * 			"onclick": function(evt){
 * 				// register onclick handler for found node
 * 			}
 * 		},
 * 		"#otherid": function(element){
 * 			// assumes "found" with this syntax
 * 		}
 * 	});
 * @example
 * If property is a string, a dojo.publish will be issued on the channel:
 * 
 * 	dojo.behavior.add({
 * 		// dojo.publish() whenever class="noclick" found on anchors
 * 		"a.noclick": "/got/newAnchor",
 * 		"div.wrapper": {
 * 			"onclick": "/node/wasClicked"
 * 		}
 * 	});
 * 	dojo.subscribe("/got/newAnchor", function(node){
 * 		// handle node finding when dojo.behavior.apply() is called,
 * 		// provided a newly matched node is found.
 * 	});
 * @example
 * Scoping can be accomplished by passing an object as a property to
 * a connection handle (on*):
 * 
 * 	dojo.behavior.add({
 * 		 	"#id": {
 * 				// like calling dojo.hitch(foo,"bar"). execute foo.bar() in scope of foo
 * 				"onmouseenter": { targetObj: foo, targetFunc: "bar" },
 * 				"onmouseleave": { targetObj: foo, targetFunc: "baz" }
 * 			}
 * 	});
 * @example
 * Bahaviors match on CSS3 Selectors, powered by dojo.query. Example selectors:
 * 
 * 	dojo.behavior.add({
 * 		// match all direct descendants
 * 		"#id4 &gt; *": function(element){
 * 			// ...
 * 		},
 * 
 * 		// match the first child node that's an element
 * 		"#id4 &gt; :first-child": { ... },
 * 
 * 		// match the last child node that's an element
 * 		"#id4 &gt; :last-child":  { ... },
 * 
 * 		// all elements of type tagname
 * 		"tagname": {
 * 			// ...
 * 		},
 * 
 * 		"tagname1 tagname2 tagname3": {
 * 			// ...
 * 		},
 * 
 * 		".classname": {
 * 			// ...
 * 		},
 * 
 * 		"tagname.classname": {
 * 			// ...
 * 		}
 * 	});
*/
dojo.behavior.add=function(behaviorObj){};
/**
 * @namespace
*/
dojo.cldr.monetary={};
/**
 * <b>Summary:</b><blockquote>
 *	 A mapping of currency code to currency-specific formatting information. Returns a unique object with properties: places, round.<br>
 * </blockquote>
 * @param {String} code an [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code
 * @returns {Object} -
*/
dojo.cldr.monetary.getData=function(code){};
/**
 * @namespace
*/
dojo.cldr.supplemental={};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a hash containing the start and end days of the weekend<br>
 * </blockquote>
 * Returns a hash containing the start and end days of the weekend according to local custom using locale,<br>
 * or by default in the user's locale.<br>
 * e.g. {start:6, end:0}
 * @param {String} [locale] 
*/
dojo.cldr.supplemental.getWeekend=function(locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a zero-based index for first day of the week<br>
 * </blockquote>
 * Returns a zero-based index for first day of the week, as used by the local (Gregorian) calendar.<br>
 * e.g. Sunday (returns 0), or Monday (returns 1)
 * @param {String} [locale] 
*/
dojo.cldr.supplemental.getFirstDayOfWeek=function(locale){};
/**
 * @param {String} [locale] 
 * @private
*/
dojo.cldr.supplemental._region=function(locale){};
/**
 * @class
 * @returns {dojo.Color} new instance
*/
dojo.Color=function(){};
/**
 * @returns {Object} -
 * @memberOf dojo.Color
*/
dojo.Color.prototype.toHsv=function(){};
/**
 * @returns {Object} -
 * @memberOf dojo.Color
*/
dojo.Color.prototype.toHsl=function(){};
/**
 * @returns {Object} -
 * @memberOf dojo.Color
*/
dojo.Color.prototype.toCmyk=function(){};
/**
 * @returns {Object} -
 * @memberOf dojo.Color
*/
dojo.Color.prototype.toCmy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 makes sure that the object has correct attributes<br>
 * </blockquote>
 * @returns {dojo.Color} -
*/
dojo.Color.sanitize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a greyscale color with an optional alpha<br>
 * </blockquote>
 * @param {Number} g 
 * @param {Number} [a] 
 * @returns {dojo.Color} -
*/
dojo.Color.makeGrey=function(g, a){};
/**
 * <b>Summary:</b><blockquote>
 *	 get rgb(a) array from css-style color declarations<br>
 * </blockquote>
 * this function can handle all 4 CSS3 Color Module formats: rgb,<br>
 * rgba, hsl, hsla, including rgb(a) with percentage values.
 * @param {String} color 
 * @param {dojo.Color} [obj] 
 * @returns {dojo.Color} -
*/
dojo.Color.fromRgb=function(color, obj){};
/**
 * @class
 * @private
 * @returns {dojo.__cookieProps} new instance
*/
dojo.__cookieProps=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use to determine if the current browser supports cookies or not.<br>
 *	 <br>
 *	 Returns true if user allows cookies.<br>
 *	 Returns false if user doesn't allow cookies.<br>
 * </blockquote>
*/
dojo.cookie.isSupported=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds the regular needed to parse a currency value<br>
 * </blockquote>
 * Returns regular expression with positive and negative match, group and decimal separators<br>
 * Note: the options.places default, the number of decimal places to accept, is defined by the currency type.
 * @param {dojo.number.__RegexpOptions} [options] 
 * @returns {String} -
*/
dojo.currency.regexp=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convert a properly formatted currency string to a primitive Number,<br>
 *	 using locale-specific settings.<br>
 * </blockquote>
 * Create a Number from a string using a known, localized pattern.<br>
 * [Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)<br>
 * are chosen appropriate to the locale, as well as the appropriate symbols and delimiters<br>
 * and number of decimal places.
 * @see reference <a href="http://www.unicode.org/reports/tr35/#Number_Format_Patterns)">http://www.unicode.org/reports/tr35/#Number_Format_Patterns)</a>
 * @param {String} expression A string representation of a currency value
 * @param {dojo.currency.__ParseOptions} [options] 
*/
dojo.currency.parse=function(expression, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format a Number as a currency, using locale-specific settings<br>
 * </blockquote>
 * Create a string from a Number using a known, localized pattern.<br>
 * [Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Elements)<br>
 * appropriate to the locale are chosen from the [CLDR](http://unicode.org/cldr)<br>
 * as well as the appropriate symbols and delimiters and number of decimal places.
 * @see reference <a href="http://www.unicode.org/reports/tr35/#Number_Elements)">http://www.unicode.org/reports/tr35/#Number_Elements)</a>
 * @param {Number} value the number to be formatted.
 * @param {dojo.currency.__FormatOptions} [options] 
*/
dojo.currency.format=function(value, options){};
/**
 * @param {mixed} options 
 * @private
*/
dojo.currency._mixInDefaults=function(options){};
/**
 * @private
*/
dojo.currency.__ParseOptions=function(){};
/**
 * @private
*/
dojo.currency.__FormatOptions=function(){};
/**
 * @class
 * @extends dojo.number.__FormatOptions
 * @private
 * @returns {dojo.currency.__FormatOptions} new instance
*/
dojo.currency.__FormatOptions=function(){};
/**
 * @class
 * @extends dojo.number.__ParseOptions
 * @private
 * @returns {dojo.currency.__ParseOptions} new instance
*/
dojo.currency.__ParseOptions=function(){};
/**
 * @namespace
*/
dojo.data.api={};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines function signatures and intentionally leaves all the<br>
 *	 functionss unimplemented.<br>
 * </blockquote>
*/
dojo.data.api.Write=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This class defines out the semantics of what a 'Request' object looks like<br>
 *	 when returned from a fetch() method.  In general, a request object is<br>
 *	 nothing more than the original keywordArgs from fetch with an abort function<br>
 *	 attached to it to allow users to abort a particular request if they so choose.<br>
 *	 No other functions are required on a general Request object return.  That does not<br>
 *	 inhibit other store implementations from adding extentions to it, of course.<br>
 *	 <br>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines methods signatures and intentionally leaves all the<br>
 *	 methods unimplemented.<br>
 *	 <br>
 *	 For more details on fetch, see dojo.data.api.Read.fetch().<br>
 * </blockquote>
 * @see dojo.data.api
*/
dojo.data.api.Request=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines methods signatures and intentionally leaves all the<br>
 *	 methods unimplemented.  For more information on the dojo.data APIs,<br>
 *	 please visit: http://www.dojotoolkit.org/node/98<br>
 * </blockquote>
 * @see reference <a href="http://www.dojotoolkit.org/node/98">http://www.dojotoolkit.org/node/98</a>
*/
dojo.data.api.Read=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines functions signatures and intentionally leaves all the<br>
 *	 functions unimplemented.<br>
 * </blockquote>
 * This API defines a set of APIs that all datastores that conform to the<br>
 * Notifications API must implement.  In general, most stores will implement<br>
 * these APIs as no-op functions for users who wish to monitor them to be able<br>
 * to connect to then via dojo.connect().  For non-users of dojo.connect,<br>
 * they should be able to just replace the function on the store to obtain<br>
 * notifications.  Both read-only and read-write stores may implement<br>
 * this feature.  In the case of a read-only store, this feature makes sense if<br>
 * the store itself does internal polling to a back-end server and periodically updates<br>
 * its cache of items (deletes, adds, and updates).
 * @example
 * 	function onSet(item, attribute, oldValue, newValue) {
 * 		//Do something with the information...
 * 	};
 * 	var store = new some.newStore();
 * 	dojo.connect(store, "onSet", onSet);
*/
dojo.data.api.Notification=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines methods signatures and intentionally leaves all the<br>
 *	 methods unimplemented.<br>
 * </blockquote>
*/
dojo.data.api.Identity=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines methods signatures and intentionally leaves all the<br>
 *	 methods unimplemented.<br>
 * </blockquote>
 * @class
 * @extends dojo.data.api.Read
 * @returns {dojo.data.api.Identity} new instance
*/
dojo.data.api.Identity=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an array of attribute names that are used to generate the identity.<br>
 *	 For most stores, this is a single attribute, but for some complex stores<br>
 *	 such as RDB backed stores that use compound (multi-attribute) identifiers<br>
 *	 it can be more than one.  If the identity is not composed of attributes<br>
 *	 on the item, it will return null.  This function is intended to identify<br>
 *	 the attributes that comprise the identity so that so that during a render<br>
 *	 of all attributes, the UI can hide the the identity information if it<br>
 *	 chooses.<br>
 * </blockquote>
 * @param {item} item The item from the store from which to obtain the array of public attributes that
 * compose the identifier, if any.
 * @example
 * 	var itemId = store.getIdentity(kermit);
 * 	var identifiers = store.getIdentityAttributes(itemId);
 * 	assert(typeof identifiers === "array" || identifiers === null);
 * @memberOf dojo.data.api.Identity
*/
dojo.data.api.Identity.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a unique identifier for an item.  The return value will be<br>
 *	 either a string or something that has a toString() method (such as,<br>
 *	 for example, a dojox.uuid.Uuid object).<br>
 * </blockquote>
 * @param {item} item The item from the store from which to obtain its identifier.
 * @example
 * 	var itemId = store.getIdentity(kermit);
 * 	assert(kermit === store.findByIdentity(store.getIdentity(kermit)));
 * @memberOf dojo.data.api.Identity
*/
dojo.data.api.Identity.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojo.data.api.Identity
*/
dojo.data.api.Identity.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given the identity of an item, this method returns the item that has<br>
 *	 that identity through the onItem callback.  Conforming implementations<br>
 *	 should return null if there is no item with the given identity.<br>
 *	 Implementations of fetchItemByIdentity() may sometimes return an item<br>
 *	 from a local cache and may sometimes fetch an item from a remote server,<br>
 * </blockquote>
 * @param {object} keywordArgs An anonymous object that defines the item to locate and callbacks to invoke when the
 * item has been located and load has completed.  The format of the object is as follows:<br>
 * {<br>
 * identity: string|object,<br>
 * onItem: Function,<br>
 * onError: Function,<br>
 * scope: object<br>
 * }<br>
 * The *identity* parameter.<br>
 * The identity parameter is the identity of the item you wish to locate and load<br>
 * This attribute is required.  It should be a string or an object that toString()<br>
 * can be called on.<br>
 * <br>
 * The *onItem* parameter.<br>
 * Function(item)<br>
 * The onItem parameter is the callback to invoke when the item has been loaded.  It takes only one<br>
 * parameter, the item located, or null if none found.<br>
 * <br>
 * The *onError* parameter.<br>
 * Function(error)<br>
 * The onError parameter is the callback to invoke when the item load encountered an error.  It takes only one<br>
 * parameter, the error object<br>
 * <br>
 * The *scope* parameter.<br>
 * If a scope object is provided, all of the callback functions (onItem,<br>
 * onError, etc) will be invoked in the context of the scope object.<br>
 * In the body of the callback function, the value of the &quot;this&quot;<br>
 * keyword will be the scope object.   If no scope object is provided,<br>
 * the callback functions will be called in the context of dojo.global.<br>
 * For example, onItem.call(scope, item, request) vs.<br>
 * onItem.call(dojo.global, item, request)
 * @memberOf dojo.data.api.Identity
*/
dojo.data.api.Identity.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Dojo Data implementation that wraps Dojo object stores for backwards<br>
 *	 compatibility.<br>
 * </blockquote>
 * @param {The} options configuration information to pass into the data store.
 * options.objectStore:<br>
 * The object store to use as the source provider for this data store<br>
*/
dojo.data.ObjectStore=function(options){};
/**
 * @param {object} keywordParameters typeMap: object)
 * The structure of the typeMap object is as follows:<br>
 * {<br>
 * type0: function || object,<br>
 * type1: function || object,<br>
 * ...<br>
 * typeN: function || object<br>
 * }<br>
 * Where if it is a function, it is assumed to be an object constructor that takes the<br>
 * value of _value as the initialization parameters.  It is serialized assuming object.toString()<br>
 * serialization.  If it is an object, then it is assumed<br>
 * to be an object of general form:<br>
 * {<br>
 * type: function, //constructor.<br>
 * deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately.<br>
 * serialize:	function(object) //The function that converts the object back into the proper file format form.<br>
 * }<br>
*/
dojo.data.ItemFileWriteStore=function(keywordParameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 The ItemFileReadStore implements the dojo.data.api.Read API and reads<br>
 *	 data from JSON files that have contents in this format --<br>
 *	 { items: [<br>
 *	 { name:'Kermit', color:'green', age:12, friends:['Gonzo', {_reference:{name:'Fozzie Bear'}}]},<br>
 *	 { name:'Fozzie Bear', wears:['hat', 'tie']},<br>
 *	 { name:'Miss Piggy', pets:'Foo-Foo'}<br>
 *	 ]}<br>
 *	 Note that it can also contain an 'identifer' property that specified which attribute on the items<br>
 *	 in the array of items that acts as the unique identifier for that item.<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 use &amp;quot;&amp;quot; rather than undefined for the benefit of the parser (#3539)<br>
 * </blockquote>
 * @param {Object} keywordParameters typeMap: object)
 * The structure of the typeMap object is as follows:<br>
 * {<br>
 * type0: function || object,<br>
 * type1: function || object,<br>
 * ...<br>
 * typeN: function || object<br>
 * }<br>
 * Where if it is a function, it is assumed to be an object constructor that takes the<br>
 * value of _value as the initialization parameters.  If it is an object, then it is assumed<br>
 * to be an object of general form:<br>
 * {<br>
 * type: function, //constructor.<br>
 * deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately.<br>
 * }<br>
*/
dojo.data.ItemFileReadStore=function(keywordParameters){};
/**
 * @namespace
*/
dojo.data.util={};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines functions signatures and intentionally leaves all the<br>
 *	 functions unimplemented.<br>
 * </blockquote>
 * This API defines a set of APIs that all datastores that conform to the<br>
 * Notifications API must implement.  In general, most stores will implement<br>
 * these APIs as no-op functions for users who wish to monitor them to be able<br>
 * to connect to then via dojo.connect().  For non-users of dojo.connect,<br>
 * they should be able to just replace the function on the store to obtain<br>
 * notifications.  Both read-only and read-write stores may implement<br>
 * this feature.  In the case of a read-only store, this feature makes sense if<br>
 * the store itself does internal polling to a back-end server and periodically updates<br>
 * its cache of items (deletes, adds, and updates).
 * @class
 * @extends dojo.data.api.Read
 * @returns {dojo.data.api.Notification} new instance
 * @example
 * 	function onSet(item, attribute, oldValue, newValue) {
 * 		//Do something with the information...
 * 	};
 * 	var store = new some.newStore();
 * 	dojo.connect(store, "onSet", onSet);
*/
dojo.data.api.Notification=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is called any time an item is modified via setValue, setValues, unsetAttribute, etc.<br>
 * </blockquote>
 * This function is called any time an item is modified via setValue, setValues, unsetAttribute, etc.<br>
 * Its purpose is to provide a hook point for those who wish to monitor actions on items in the store<br>
 * in a simple manner.  The general expected usage is to dojo.connect() to the store's<br>
 * implementation and be called after the store function is called.
 * @param {item} item The item being modified.
 * @param {attribute-name-string} attribute The attribute being changed represented as a string name.
 * @param {object|array} oldValue The old value of the attribute.  In the case of single value calls, such as setValue, unsetAttribute, etc,
 * this value will be generally be an atomic value of some sort (string, int, etc, object).  In the case of<br>
 * multi-valued attributes, it will be an array.
 * @param {object|array} newValue The new value of the attribute.  In the case of single value calls, such as setValue, this value will be
 * generally be an atomic value of some sort (string, int, etc, object).  In the case of multi-valued attributes,<br>
 * it will be an array.  In the case of unsetAttribute, the new value will be 'undefined'.
 * @memberOf dojo.data.api.Notification
*/
dojo.data.api.Notification.prototype.onSet=function(item, attribute, oldValue, newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is called any time a new item is created in the store.<br>
 *	 It is called immediately after the store newItem processing has completed.<br>
 * </blockquote>
 * This function is called any time a new item is created in the store.<br>
 * It is called immediately after the store newItem processing has completed.
 * @param {item} newItem The item created.
 * @param {object} [parentInfo] An optional javascript object that is passed when the item created was placed in the store
 * hierarchy as a value f another item's attribute, instead of a root level item.  Note that if this<br>
 * function is invoked with a value for parentInfo, then onSet is not invoked stating the attribute of<br>
 * the parent item was modified.  This is to avoid getting two notification  events occurring when a new item<br>
 * with a parent is created.  The structure passed in is as follows:<br>
 * {<br>
 * item: someItem,							//The parent item<br>
 * attribute:	&quot;attribute-name-string&quot;,	//The attribute the new item was assigned to.<br>
 * oldValue: something	//Whatever was the previous value for the attribute.<br>
 * //If it is a single-value attribute only, then this value will be a single value.<br>
 * //If it was a multi-valued attribute, then this will be an array of all the values minues the new one.<br>
 * newValue: something	//The new value of the attribute.  In the case of single value calls, such as setValue, this value will be<br>
 * //generally be an atomic value of some sort (string, int, etc, object).  In the case of multi-valued attributes,<br>
 * //it will be an array.<br>
 * }
 * @memberOf dojo.data.api.Notification
*/
dojo.data.api.Notification.prototype.onNew=function(newItem, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is called any time an item is deleted from the store.<br>
 *	 It is called immediately after the store deleteItem processing has completed.<br>
 * </blockquote>
 * This function is called any time an item is deleted from the store.<br>
 * It is called immediately after the store deleteItem processing has completed.
 * @param {item} deletedItem The item deleted.
 * @memberOf dojo.data.api.Notification
*/
dojo.data.api.Notification.prototype.onDelete=function(deletedItem){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojo.data.api.Notification
*/
dojo.data.api.Notification.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines methods signatures and intentionally leaves all the<br>
 *	 methods unimplemented.  For more information on the dojo.data APIs,<br>
 *	 please visit: http://www.dojotoolkit.org/node/98<br>
 * </blockquote>
 * @see reference <a href="http://www.dojotoolkit.org/node/98">http://www.dojotoolkit.org/node/98</a>
 * @class
 * @returns {dojo.data.api.Read} new instance
*/
dojo.data.api.Read=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given an item, this method loads the item so that a subsequent call<br>
 *	 to store.isItemLoaded(item) will return true.  If a call to<br>
 *	 isItemLoaded() returns true before loadItem() is even called,<br>
 *	 then loadItem() need not do any work at all and will not even invoke<br>
 *	 the callback handlers.  So, before invoking this method, check that<br>
 *	 the item has not already been loaded.<br>
 * </blockquote>
 * @param {object} keywordArgs An anonymous object that defines the item to load and callbacks to invoke when the
 * load has completed.  The format of the object is as follows:<br>
 * {<br>
 * item: object,<br>
 * onItem: Function,<br>
 * onError: Function,<br>
 * scope: object<br>
 * }<br>
 * The *item* parameter.<br>
 * The item parameter is an object that represents the item in question that should be<br>
 * contained by the store.  This attribute is required.<br>
 * <br>
 * The *onItem* parameter.<br>
 * Function(item)<br>
 * The onItem parameter is the callback to invoke when the item has been loaded.  It takes only one<br>
 * parameter, the fully loaded item.<br>
 * <br>
 * The *onError* parameter.<br>
 * Function(error)<br>
 * The onError parameter is the callback to invoke when the item load encountered an error.  It takes only one<br>
 * parameter, the error object<br>
 * <br>
 * The *scope* parameter.<br>
 * If a scope object is provided, all of the callback functions (onItem,<br>
 * onError, etc) will be invoked in the context of the scope object.<br>
 * In the body of the callback function, the value of the &quot;this&quot;<br>
 * keyword will be the scope object.   If no scope object is provided,<br>
 * the callback functions will be called in the context of dojo.global().<br>
 * For example, onItem.call(scope, item, request) vs.<br>
 * onItem.call(dojo.global(), item, request)
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns false if isItem(something) is false.  Returns false if<br>
 *	 if isItem(something) is true but the the item is not yet loaded<br>
 *	 in local memory (for example, if the item has not yet been read<br>
 *	 from the server).<br>
 * </blockquote>
 * @param {anything} something Can be anything.
 * @example
 * 	var yes = store.isItemLoaded(store.newItem());
 * 	var no  = store.isItemLoaded("green");
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if *something* is an item and came from the store instance.<br>
 *	 Returns false if *something* is a literal, an item from another store instance,<br>
 *	 or is any object other than an item.<br>
 * </blockquote>
 * @param {anything} something Can be anything.
 * @example
 * 	var yes = store.isItem(store.newItem());
 * 	var no  = store.isItem("green");
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the given *item* has a value for the given *attribute*.<br>
 * </blockquote>
 * @param {item} item The item to access attributes on.
 * @param {attribute-name-string} attribute The attribute to access represented as a string.
 * @example
 * 	var trueOrFalse = store.hasAttribute(kermit, "color");
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 This getValues() method works just like the getValue() method, but getValues()<br>
 *	 always returns an array rather than a single attribute value.  The array<br>
 *	 may be empty, may contain a single attribute value, or may contain<br>
 *	 many attribute values.<br>
 *	 If the item does not have a value for the given attribute, then getValues()<br>
 *	 will return an empty array: [].  (So, if store.hasAttribute(item, attribute)<br>
 *	 has a return of false, then store.getValues(item, attribute) will return [].)<br>
 * </blockquote>
 * @param {item} item The item to access values on.
 * @param {attribute-name-string} attribute The attribute to access represented as a string.
 * @example
 * 	var friendsOfLuke = store.getValues(lukeSkywalker, "friends");
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a single attribute value.<br>
 *	 Returns defaultValue if and only if *item* does not have a value for *attribute*.<br>
 *	 Returns null if and only if null was explicitly set as the attribute value.<br>
 *	 Returns undefined if and only if the item does not have a value for the<br>
 *	 given attribute (which is the same as saying the item does not have the attribute).<br>
 * </blockquote>
 * Saying that an "item x does not have a value for an attribute y"<br>
 * is identical to saying that an "item x does not have attribute y".<br>
 * It is an oxymoron to say "that attribute is present but has no values"<br>
 * or "the item has that attribute but does not have any attribute values".<br>
 * If store.hasAttribute(item, attribute) returns false, then<br>
 * store.getValue(item, attribute) will return undefined.
 * @param {item} item The item to access values on.
 * @param {attribute-name-string} attribute The attribute to access represented as a string.
 * @param {value} [defaultValue] Optional. A default value to use for the getValue return in the attribute does not exist or has no value.
 * @example
 * 	var darthVader = store.getValue(lukeSkywalker, "father");
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Method to inspect the item and return an array of what attributes of the item were used<br>
 *	 to generate its label, if any.<br>
 * </blockquote>
 * Method to inspect the item and return an array of what attributes of the item were used<br>
 * to generate its label, if any.  This function is to assist UI developers in knowing what<br>
 * attributes can be ignored out of the attributes an item has when displaying it, in cases<br>
 * where the UI is using the label as an overall identifer should they wish to hide<br>
 * redundant information.
 * @param {item} item The item to return the list of label attributes for.
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Method to inspect the item and return a user-readable 'label' for the item<br>
 *	 that provides a general/adequate description of what the item is.<br>
 * </blockquote>
 * Method to inspect the item and return a user-readable 'label' for the item<br>
 * that provides a general/adequate description of what the item is.  In general<br>
 * most labels will be a specific attribute value or collection of the attribute<br>
 * values that combine to label the item in some manner.  For example for an item<br>
 * that represents a person it may return the label as:  "firstname lastlame" where<br>
 * the firstname and lastname are attributes on the item.  If the store is unable<br>
 * to determine an adequate human readable label, it should return undefined.  Users that wish<br>
 * to customize how a store instance labels items should replace the getLabel() function on<br>
 * their instance of the store, or extend the store and replace the function in<br>
 * the extension class.
 * @param {item} item The item to return the label for.
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 The getFeatures() method returns an simple keyword values object<br>
 *	 that specifies what interface features the datastore implements.<br>
 *	 A simple CsvStore may be read-only, and the only feature it<br>
 *	 implements will be the 'dojo.data.api.Read' interface, so the<br>
 *	 getFeatures() method will return an object like this one:<br>
 *	 {'dojo.data.api.Read': true}.<br>
 *	 A more sophisticated datastore might implement a variety of<br>
 *	 interface features, like 'dojo.data.api.Read', 'dojo.data.api.Write',<br>
 *	 'dojo.data.api.Identity', and 'dojo.data.api.Attribution'.<br>
 * </blockquote>
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an array with all the attributes that this item has.  This<br>
 *	 method will always return an array; if the item has no attributes<br>
 *	 at all, getAttributes() will return an empty array: [].<br>
 * </blockquote>
 * @param {item} item The item to access attributes on.
 * @example
 * 	var array = store.getAttributes(kermit);
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given a query and set of defined options, such as a start and count of items to return,<br>
 *	 this method executes the query and makes the results available as data items.<br>
 *	 The format and expectations of stores is that they operate in a generally asynchronous<br>
 *	 manner, therefore callbacks are always used to return items located by the fetch parameters.<br>
 * </blockquote>
 * A Request object will always be returned and is returned immediately.<br>
 * The basic request is nothing more than the keyword args passed to fetch and<br>
 * an additional function attached, abort().  The returned request object may then be used<br>
 * to cancel a fetch.  All data items returns are passed through the callbacks defined in the<br>
 * fetch parameters and are not present on the 'request' object.<br>
 * <br>
 * This does not mean that custom stores can not add methods and properties to the request object<br>
 * returned, only that the API does not require it.  For more info about the Request API,<br>
 * see dojo.data.api.Request
 * @see dojo.data.api
 * @param {Object} keywordArgs The keywordArgs parameter may either be an instance of
 * conforming to dojo.data.api.Request or may be a simple anonymous object<br>
 * that may contain any of the following:<br>
 * {<br>
 * query: query-object or query-string,<br>
 * queryOptions: object,<br>
 * onBegin: Function,<br>
 * onItem: Function,<br>
 * onComplete: Function,<br>
 * onError: Function,<br>
 * scope: object,<br>
 * start: int<br>
 * count: int<br>
 * sort: array<br>
 * }<br>
 * All implementations should accept keywordArgs objects with any of<br>
 * the 9 standard properties: query, onBegin, onItem, onComplete, onError<br>
 * scope, sort, start, and count.  Some implementations may accept additional<br>
 * properties in the keywordArgs object as valid parameters, such as<br>
 * {includeOutliers:true}.<br>
 * <br>
 * The *query* parameter.<br>
 * The query may be optional in some data store implementations.<br>
 * The dojo.data.api.Read API does not specify the syntax or semantics<br>
 * of the query itself -- each different data store implementation<br>
 * may have its own notion of what a query should look like.<br>
 * However, as of dojo 0.9, 1.0, and 1.1, all the provided datastores in dojo.data<br>
 * and dojox.data support an object structure query, where the object is a set of<br>
 * name/value parameters such as { attrFoo: valueBar, attrFoo1: valueBar1}.  Most of the<br>
 * dijit widgets, such as ComboBox assume this to be the case when working with a datastore<br>
 * when they dynamically update the query.  Therefore, for maximum compatibility with dijit<br>
 * widgets the recommended query parameter is a key/value object.  That does not mean that the<br>
 * the datastore may not take alternative query forms, such as a simple string, a Date, a number,<br>
 * or a mix of such.  Ultimately, The dojo.data.api.Read API is agnostic about what the query<br>
 * format.<br>
 * Further note:  In general for query objects that accept strings as attribute<br>
 * value matches, the store should also support basic filtering capability, such as *<br>
 * (match any character) and ? (match single character).  An example query that is a query object<br>
 * would be like: { attrFoo: &quot;value*&quot;}.  Which generally means match all items where they have<br>
 * an attribute named attrFoo, with a value that starts with 'value'.<br>
 * <br>
 * The *queryOptions* parameter<br>
 * The queryOptions parameter is an optional parameter used to specify optiosn that may modify<br>
 * the query in some fashion, such as doing a case insensitive search, or doing a deep search<br>
 * where all items in a hierarchical representation of data are scanned instead of just the root<br>
 * items.  It currently defines two options that all datastores should attempt to honor if possible:<br>
 * {<br>
 * ignoreCase: boolean, //Whether or not the query should match case sensitively or not.  Default behaviour is false.<br>
 * deep: boolean 	//Whether or not a fetch should do a deep search of items and all child<br>
 * //items instead of just root-level items in a datastore.  Default is false.<br>
 * }<br>
 * <br>
 * The *onBegin* parameter.<br>
 * function(size, request);<br>
 * If an onBegin callback function is provided, the callback function<br>
 * will be called just once, before the first onItem callback is called.<br>
 * The onBegin callback function will be passed two arguments, the<br>
 * the total number of items identified and the Request object.  If the total number is<br>
 * unknown, then size will be -1.  Note that size is not necessarily the size of the<br>
 * collection of items returned from the query, as the request may have specified to return only a<br>
 * subset of the total set of items through the use of the start and count parameters.<br>
 * <br>
 * The *onItem* parameter.<br>
 * function(item, request);<br>
 * If an onItem callback function is provided, the callback function<br>
 * will be called as each item in the result is received. The callback<br>
 * function will be passed two arguments: the item itself, and the<br>
 * Request object.<br>
 * <br>
 * The *onComplete* parameter.<br>
 * function(items, request);<br>
 * <br>
 * If an onComplete callback function is provided, the callback function<br>
 * will be called just once, after the last onItem callback is called.<br>
 * Note that if the onItem callback is not present, then onComplete will be passed<br>
 * an array containing all items which matched the query and the request object.<br>
 * If the onItem callback is present, then onComplete is called as:<br>
 * onComplete(null, request).<br>
 * <br>
 * The *onError* parameter.<br>
 * function(errorData, request);<br>
 * If an onError callback function is provided, the callback function<br>
 * will be called if there is any sort of error while attempting to<br>
 * execute the query.<br>
 * The onError callback function will be passed two arguments:<br>
 * an Error object and the Request object.<br>
 * <br>
 * The *scope* parameter.<br>
 * If a scope object is provided, all of the callback functions (onItem,<br>
 * onComplete, onError, etc) will be invoked in the context of the scope<br>
 * object.  In the body of the callback function, the value of the &quot;this&quot;<br>
 * keyword will be the scope object.   If no scope object is provided,<br>
 * the callback functions will be called in the context of dojo.global().<br>
 * For example, onItem.call(scope, item, request) vs.<br>
 * onItem.call(dojo.global(), item, request)<br>
 * <br>
 * The *start* parameter.<br>
 * If a start parameter is specified, this is a indication to the datastore to<br>
 * only start returning items once the start number of items have been located and<br>
 * skipped.  When this parameter is paired with 'count', the store should be able<br>
 * to page across queries with millions of hits by only returning subsets of the<br>
 * hits for each query<br>
 * <br>
 * The *count* parameter.<br>
 * If a count parameter is specified, this is a indication to the datastore to<br>
 * only return up to that many items.  This allows a fetch call that may have<br>
 * millions of item matches to be paired down to something reasonable.<br>
 * <br>
 * The *sort* parameter.<br>
 * If a sort parameter is specified, this is a indication to the datastore to<br>
 * sort the items in some manner before returning the items.  The array is an array of<br>
 * javascript objects that must conform to the following format to be applied to the<br>
 * fetching of items:<br>
 * {<br>
 * attribute: attribute || attribute-name-string,<br>
 * descending: true|false;   // Optional.  Default is false.<br>
 * }<br>
 * Note that when comparing attributes, if an item contains no value for the attribute<br>
 * (undefined), then it the default ascending sort logic should push it to the bottom<br>
 * of the list.  In the descending order case, it such items should appear at the top of the list.
 * @example
 * Fetch all books identified by the query and call 'showBooks' when complete
 * 	var request = store.fetch({query:"all books", onComplete: showBooks});
 * @example
 * Fetch all items in the story and call 'showEverything' when complete.
 * 	var request = store.fetch(onComplete: showEverything);
 * @example
 * Fetch only 10 books that match the query 'all books', starting at the fifth book found during the search.
 * This demonstrates how paging can be done for specific queries.
 * 	var request = store.fetch({query:"all books", start: 4, count: 10, onComplete: showBooks});
 * @example
 * Fetch all items that match the query, calling 'callback' each time an item is located.
 * 	var request = store.fetch({query:"foo/bar", onItem:callback});
 * @example
 * Fetch the first 100 books by author King, call showKing when up to 100 items have been located.
 * 	var request = store.fetch({query:{author:"King"}, start: 0, count:100, onComplete: showKing});
 * @example
 * Locate the books written by Author King, sort it on title and publisher, then return the first 100 items from the sorted items.
 * 	var request = store.fetch({query:{author:"King"}, sort: [{ attribute: "title", descending: true}, {attribute: "publisher"}], ,start: 0, count:100, onComplete: 'showKing'});
 * @example
 * Fetch the first 100 books by authors starting with the name King, then call showKing when up to 100 items have been located.
 * 	var request = store.fetch({query:{author:"King*"}, start: 0, count:100, onComplete: showKing});
 * @example
 * Fetch the first 100 books by authors ending with 'ing', but only have one character before it (King, Bing, Ling, Sing, etc.), then call showBooks when up to 100 items have been located.
 * 	var request = store.fetch({query:{author:"?ing"}, start: 0, count:100, onComplete: showBooks});
 * @example
 * Fetch the first 100 books by author King, where the name may appear as King, king, KING, kInG, and so on, then call showKing when up to 100 items have been located.
 * 	var request = store.fetch({query:{author:"King"}, queryOptions:(ignoreCase: true}, start: 0, count:100, onComplete: showKing});
 * @example
 * Paging
 * 	var store = new dojo.data.LargeRdbmsStore({url:"jdbc:odbc:foobar"});
 * 	var fetchArgs = {
 * 		query: {type:"employees", name:"Hillary *"}, // string matching
 * 		sort: [{attribute:"department", descending:true}],
 * 		start: 0,
 * 		count: 20,
 * 		scope: displayer,
 * 		onBegin: showThrobber,
 * 		onItem: displayItem,
 * 		onComplete: stopThrobber,
 * 		onError: handleFetchError,
 * 	};
 * 	store.fetch(fetchArgs);
 * 	...
 * and then when the user presses the "Next Page" button...
 * 	fetchArgs.start += 20;
 * 	store.fetch(fetchArgs);  // get the next 20 items
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.fetch=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the given *value* is one of the values that getValues()<br>
 *	 would return.<br>
 * </blockquote>
 * @param {item} item The item to access values on.
 * @param {attribute-name-string} attribute The attribute to access represented as a string.
 * @param {anything} value The value to match as a value for the attribute.
 * @example
 * 	var trueOrFalse = store.containsValue(kermit, "color", "green");
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 The close() method is intended for instructing the store to 'close' out<br>
 *	 any information associated with a particular request.<br>
 * </blockquote>
 * The close() method is intended for instructing the store to 'close' out<br>
 * any information associated with a particular request.  In general, this API<br>
 * expects to recieve as a parameter a request object returned from a fetch.<br>
 * It will then close out anything associated with that request, such as<br>
 * clearing any internal datastore caches and closing any 'open' connections.<br>
 * For some store implementations, this call may be a no-op.
 * @param {dojo.data.api.Request} request An instance of a request for the store to use to identify what to close out.
 * If no request is passed, then the store should clear all internal caches (if any)<br>
 * and close out all 'open' connections.  It does not render the store unusable from<br>
 * there on, it merely cleans out any current data and resets the store to initial<br>
 * state.
 * @example
 * 	var request = store.fetch({onComplete: doSomething});
 * 	...
 * 	store.close(request);
 * @memberOf dojo.data.api.Read
*/
dojo.data.api.Read.prototype.close=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 This class defines out the semantics of what a 'Request' object looks like<br>
 *	 when returned from a fetch() method.  In general, a request object is<br>
 *	 nothing more than the original keywordArgs from fetch with an abort function<br>
 *	 attached to it to allow users to abort a particular request if they so choose.<br>
 *	 No other functions are required on a general Request object return.  That does not<br>
 *	 inhibit other store implementations from adding extentions to it, of course.<br>
 *	 <br>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines methods signatures and intentionally leaves all the<br>
 *	 methods unimplemented.<br>
 *	 <br>
 *	 For more details on fetch, see dojo.data.api.Read.fetch().<br>
 * </blockquote>
 * @see dojo.data.api
 * @class
 * @returns {dojo.data.api.Request} new instance
*/
dojo.data.api.Request=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is a hook point for stores to provide as a way for<br>
 *	 a fetch to be halted mid-processing.<br>
 * </blockquote>
 * This function is a hook point for stores to provide as a way for<br>
 * a fetch to be halted mid-processing.  For more details on the fetch() api,<br>
 * please see dojo.data.api.Read.fetch().
 * @see dojo.data.api
 * @memberOf dojo.data.api.Request
*/
dojo.data.api.Request.prototype.abort=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines function signatures and intentionally leaves all the<br>
 *	 functionss unimplemented.<br>
 * </blockquote>
 * @class
 * @extends dojo.data.api.Read
 * @returns {dojo.data.api.Write} new instance
*/
dojo.data.api.Write=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deletes all the values of an attribute on an item.<br>
 * </blockquote>
 * @param {item} item The item to modify.
 * @param {string} attribute The attribute of the item to unset represented as a string.
 * @example
 * 	var success = store.unsetAttribute(kermit, "color");
 * 	if (success) {assert(!store.hasAttribute(kermit, "color"));}
 * @memberOf dojo.data.api.Write
*/
dojo.data.api.Write.prototype.unsetAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds each value in the *values* array as a value of the given<br>
 *	 attribute on the given item.<br>
 *	 Replaces any previous value or values.<br>
 *	 Calling store.setValues(x, y, []) (with *values* as an empty array) has<br>
 *	 the same effect as calling store.unsetAttribute(x, y).<br>
 * </blockquote>
 * @param {item} item The item to modify.
 * @param {string} attribute The attribute of the item to change represented as a string name.
 * @param {array} values An array of values to assign to the attribute..
 * @example
 * 	var success = store.setValues(kermit, "color", ["green", "aqua"]);
 * 	success = store.setValues(kermit, "color", []);
 * 	if (success) {assert(!store.hasAttribute(kermit, "color"));}
 * @memberOf dojo.data.api.Write
*/
dojo.data.api.Write.prototype.setValues=function(item, attribute, values){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the value of an attribute on an item.<br>
 *	 Replaces any previous value or values.<br>
 * </blockquote>
 * @param {item} item The item to modify.
 * @param {string} attribute The attribute of the item to change represented as a string name.
 * @param {almost} value The value to assign to the item.
 * @example
 * 	var success = store.set(kermit, "color", "green");
 * @memberOf dojo.data.api.Write
*/
dojo.data.api.Write.prototype.setValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Saves to the server all the changes that have been made locally.<br>
 *	 The save operation may take some time and is generally performed<br>
 *	 in an asynchronous fashion.  The outcome of the save action is<br>
 *	 is passed into the set of supported callbacks for the save.<br>
 * </blockquote>
 * @param {object} keywordArgs { onComplete: function
 * onError: function<br>
 * scope: object<br>
 * }<br>
 * <br>
 * The *onComplete* parameter.<br>
 * function();<br>
 * <br>
 * If an onComplete callback function is provided, the callback function<br>
 * will be called just once, after the save has completed.  No parameters<br>
 * are generally passed to the onComplete.<br>
 * <br>
 * The *onError* parameter.<br>
 * function(errorData);<br>
 * <br>
 * If an onError callback function is provided, the callback function<br>
 * will be called if there is any sort of error while attempting to<br>
 * execute the save.  The onError function will be based one parameter, the<br>
 * error.<br>
 * <br>
 * The *scope* parameter.<br>
 * If a scope object is provided, all of the callback function (<br>
 * onComplete, onError, etc) will be invoked in the context of the scope<br>
 * object.  In the body of the callback function, the value of the &quot;this&quot;<br>
 * keyword will be the scope object.   If no scope object is provided,<br>
 * the callback functions will be called in the context of dojo.global.<br>
 * For example, onComplete.call(scope) vs.<br>
 * onComplete.call(dojo.global)
 * @example
 * 	store.save({onComplete: onSave});
 * 	store.save({scope: fooObj, onComplete: onSave, onError: saveFailed});
 * @memberOf dojo.data.api.Write
*/
dojo.data.api.Write.prototype.save=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Discards any unsaved changes.<br>
 * </blockquote>
 * Discards any unsaved changes.
 * @example
 * 	var success = store.revert();
 * @memberOf dojo.data.api.Write
*/
dojo.data.api.Write.prototype.revert=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a newly created item.  Sets the attributes of the new<br>
 *	 item based on the *keywordArgs* provided.  In general, the attribute<br>
 *	 names in the keywords become the attributes in the new item and as for<br>
 *	 the attribute values in keywordArgs, they become the values of the attributes<br>
 *	 in the new item.  In addition, for stores that support hierarchical item<br>
 *	 creation, an optional second parameter is accepted that defines what item is the parent<br>
 *	 of the new item and what attribute of that item should the new item be assigned to.<br>
 *	 In general, this will assume that the attribute targetted is multi-valued and a new item<br>
 *	 is appended onto the list of values for that attribute.<br>
 * </blockquote>
 * @param {Object} [keywordArgs] A javascript object defining the initial content of the item as a set of JavaScript 'property name: value' pairs.
 * @param {Object} [parentInfo] An optional javascript object defining what item is the parent of this item (in a hierarchical store.  Not all stores do hierarchical items),
 * and what attribute of that parent to assign the new item to.  If this is present, and the attribute specified<br>
 * is a multi-valued attribute, it will append this item into the array of values for that attribute.  The structure<br>
 * of the object is as follows:<br>
 * {<br>
 * parent: someItem,<br>
 * attribute: &quot;attribute-name-string&quot;<br>
 * }
 * @example
 * 	var kermit = store.newItem({name: "Kermit", color:[blue, green]});
 * @memberOf dojo.data.api.Write
*/
dojo.data.api.Write.prototype.newItem=function(keywordArgs, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given an item, isDirty() returns true if the item has been modified<br>
 *	 since the last save().  If isDirty() is called with no *item* argument,<br>
 *	 then this function returns true if any item has been modified since<br>
 *	 the last save().<br>
 * </blockquote>
 * @param {item} [item] The item to check.
 * @example
 * 	var trueOrFalse = store.isDirty(kermit); // true if kermit is dirty
 * 	var trueOrFalse = store.isDirty();	   // true if any item is dirty
 * @memberOf dojo.data.api.Write
*/
dojo.data.api.Write.prototype.isDirty=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojo.data.api.Write
*/
dojo.data.api.Write.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deletes an item from the store.<br>
 * </blockquote>
 * @param {item} item The item to delete.
 * @example
 * 	var success = store.deleteItem(kermit);
 * @memberOf dojo.data.api.Write
*/
dojo.data.api.Write.prototype.deleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 The ItemFileReadStore implements the dojo.data.api.Read API and reads<br>
 *	 data from JSON files that have contents in this format --<br>
 *	 { items: [<br>
 *	 { name:'Kermit', color:'green', age:12, friends:['Gonzo', {_reference:{name:'Fozzie Bear'}}]},<br>
 *	 { name:'Fozzie Bear', wears:['hat', 'tie']},<br>
 *	 { name:'Miss Piggy', pets:'Foo-Foo'}<br>
 *	 ]}<br>
 *	 Note that it can also contain an 'identifer' property that specified which attribute on the items<br>
 *	 in the array of items that acts as the unique identifier for that item.<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 use &amp;quot;&amp;quot; rather than undefined for the benefit of the parser (#3539)<br>
 * </blockquote>
 * @class
 * @param {Object} keywordParameters typeMap: object)
 * The structure of the typeMap object is as follows:<br>
 * {<br>
 * type0: function || object,<br>
 * type1: function || object,<br>
 * ...<br>
 * typeN: function || object<br>
 * }<br>
 * Where if it is a function, it is assumed to be an object constructor that takes the<br>
 * value of _value as the initialization parameters.  If it is an object, then it is assumed<br>
 * to be an object of general form:<br>
 * {<br>
 * type: function, //constructor.<br>
 * deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately.<br>
 * }
 * @returns {dojo.data.ItemFileReadStore} new instance
*/
dojo.data.ItemFileReadStore=function(keywordParameters){};
/**
 * @namespace
 * @private
*/
dojo.data.ItemFileReadStore._datatypeMap={};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {object} keywordArgs 
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {boolean} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {Boolean} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttribute()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValues()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @returns {Array} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {value} [defaultValue] 
 * @returns {mixed} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {array|null} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {String|undefined} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentityAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {null|Array} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentity()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {Number|Object||String|null} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {Array} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {anything} value 
 * @returns {boolean.} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype.close=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to execute delayed request in the store.<br>
 *	 Execute any deferred fetches now.<br>
 * </blockquote>
 * @private
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype._handleQueuedFetches=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to parse the loaded data into item format and build the internal items array.<br>
 * </blockquote>
 * Function to parse the loaded data into item format and build the internal items array.
 * @param {Object} dataObject The JS data object containing the raw data to convery into item format.
 * @private
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype._getItemsFromLoadedData=function(dataObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to determine which list of items to search over.<br>
 * </blockquote>
 * @param {object} [queryOptions] The query options parameter, if any.
 * @private
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype._getItemsArray=function(queryOptions){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to look an item up by its identity map.<br>
 * </blockquote>
 * @param {Object} identity 
 * @private
 * @returns {Object} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype._getItemByIdentity=function(identity){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to force a load of the store if it hasn't occurred yet.  This is required<br>
 *	 for specific functions to work properly.<br>
 * </blockquote>
 * @private
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype._forceLoad=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.util.simpleFetch.fetch()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @param {Function} findCallback 
 * @param {Function} errorCallback 
 * @private
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype._fetchItems=function(keywordArgs, findCallback, errorCallback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for looking at the values contained by the item.<br>
 * </blockquote>
 * Internal function for looking at the values contained by the item.  This<br>
 * function allows for denoting if the comparison should be case sensitive for<br>
 * strings or not (for handling filtering cases where string case should not matter)
 * @param {item} item The data item to examine for attribute values.
 * @param {attribute-name-string} attribute The attribute to inspect.
 * @param {anything} value The value to match.
 * @param {RegExp} [regexp] Optional regular expression generated off value if value was of string type to handle wildcarding.
 * If present and attribute values are string, then it can be used for comparison instead of 'value'
 * @private
 * @returns {Boolean} -
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype._containsValue=function(item, attribute, value, regexp){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {attribute-name-string} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype._assertIsAttribute=function(attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Method to add an reference map entry for an item and attribute.<br>
 * </blockquote>
 * Method to add an reference map entry for an item and attribute. 		 //
 * @param {item} refItem The item that is referenced.
 * @param {item} parentItem The item that holds the new reference to refItem.
 * @param {string} attribute The attribute on parentItem that contains the new reference.
 * @private
 * @memberOf dojo.data.ItemFileReadStore
*/
dojo.data.ItemFileReadStore.prototype._addReferenceToMap=function(refItem, parentItem, attribute){};
/**
 * @class
 * @extends dojo.data.ItemFileReadStore
 * @param {object} keywordParameters typeMap: object)
 * The structure of the typeMap object is as follows:<br>
 * {<br>
 * type0: function || object,<br>
 * type1: function || object,<br>
 * ...<br>
 * typeN: function || object<br>
 * }<br>
 * Where if it is a function, it is assumed to be an object constructor that takes the<br>
 * value of _value as the initialization parameters.  It is serialized assuming object.toString()<br>
 * serialization.  If it is an object, then it is assumed<br>
 * to be an object of general form:<br>
 * {<br>
 * type: function, //constructor.<br>
 * deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately.<br>
 * serialize:	function(object) //The function that converts the object back into the proper file format form.<br>
 * }
 * @returns {dojo.data.ItemFileWriteStore} new instance
*/
dojo.data.ItemFileWriteStore=function(keywordParameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.unsetAttribute()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.unsetAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.setValues()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {array} values 
 * @returns {boolean} -
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.setValues=function(item, attribute, values){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.set()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {almost} value anything
 * @returns {boolean} -
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.setValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.save()<br>
 * </blockquote>
 * @param {object} keywordArgs 
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.save=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.revert()<br>
 * </blockquote>
 * @returns {boolean} -
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.revert=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Notification.onSet()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {object|array} oldValue 
 * @param {object|array} newValue 
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.onSet=function(item, attribute, oldValue, newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Notification.onNew()<br>
 * </blockquote>
 * @param {item} newItem 
 * @param {object} [parentInfo] 
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.onNew=function(newItem, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Notification.onDelete()<br>
 * </blockquote>
 * @param {item} deletedItem 
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.onDelete=function(deletedItem){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.newItem()<br>
 * </blockquote>
 * @param {Object} [keywordArgs] 
 * @param {Object} [parentInfo] 
 * @returns {item} -
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.newItem=function(keywordArgs, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.isDirty()<br>
 * </blockquote>
 * @param {item} [item] 
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.isDirty=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.deleteItem()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.deleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride of base close function of ItemFileReadStore to add in check for store state.<br>
 * </blockquote>
 * Over-ride of base close function of ItemFileReadStore to add in check for store state.<br>
 * If the store is still dirty (unsaved changes), then an error will be thrown instead of<br>
 * clearing the internal state for reload from the url.
 * @param {object} [request] 
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype.close=function(request){};
/**
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {anything} newValueOrValues 
 * @param {boolean} [callOnSet] 
 * @private
 * @returns {boolean} -
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype._setValueOrValues=function(item, attribute, newValueOrValues, callOnSet){};
/**
 * <b>Summary:</b><blockquote>
 *	 Method to remove an reference map entry for an item and attribute.<br>
 * </blockquote>
 * Method to remove an reference map entry for an item and attribute.  This will<br>
 * also perform cleanup on the map such that if there are no more references at all to<br>
 * the item, its reference object and entry are removed.
 * @param {item} refItem The item that is referenced.
 * @param {item} parentItem The item holding a reference to refItem.
 * @param {string} attribute The attribute on parentItem that contains the reference.
 * @private
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype._removeReferenceFromMap=function(refItem, parentItem, attribute){};
/**
 * @param {Array} array 
 * @param {anything} element 
 * @private
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype._removeArrayElement=function(array, element){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to determine if an array or object has no properties or values.<br>
 * </blockquote>
 * @param {The} something array or object to examine.
 * @private
 * @returns {boolean} -
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype._isEmpty=function(something){};
/**
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @private
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype._getValueOrValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a string that can be saved to a file.<br>
 *	 The result should look similar to:<br>
 *	 http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json<br>
 * </blockquote>
 * @see reference <a href="http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json">http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json</a>
 * @private
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype._getNewFileContentString=function(){};
/**
 * @private
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype._getIdentifierAttribute=function(){};
/**
 * @param {anything} value 
 * @private
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype._flatten=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to dump the reverse reference map of all items in the store for debug purposes.<br>
 * </blockquote>
 * Function to dump the reverse reference map of all items in the store for debug purposes.
 * @private
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype._dumpReferenceMap=function(){};
/**
 * @param {boolean} condition 
 * @private
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype._assert=function(condition){};
/**
 * <b>Summary:</b><blockquote>
 *	 Method to add an reference map entry for an item and attribute.<br>
 * </blockquote>
 * Method to add an reference map entry for an item and attribute. 		 //
 * @param {item} refItem The item that is referenced.
 * @param {item} parentItem The item that holds the new reference to refItem.
 * @param {string} attribute The attribute on parentItem that contains the new reference.
 * @private
 * @memberOf dojo.data.ItemFileWriteStore
*/
dojo.data.ItemFileWriteStore.prototype._addReferenceToMap=function(refItem, parentItem, attribute){};
/**
 * @namespace
*/
dojo.data.ItemFileWriteStore._datatypeMap.Date={};
/**
 * @param {mixed} obj 
*/
dojo.data.ItemFileWriteStore._datatypeMap.Date.serialize=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Dojo Data implementation that wraps Dojo object stores for backwards<br>
 *	 compatibility.<br>
 * </blockquote>
 * @class
 * @param {The} options configuration information to pass into the data store.
 * options.objectStore:<br>
 * The object store to use as the source provider for this data store
 * @returns {dojo.data.ObjectStore} new instance
*/
dojo.data.ObjectStore=function(options){};
/**
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore._dirtyObjects=[];
/**
 * <b>Summary:</b><blockquote>
 *	 unsets 'attribute' on 'item'<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.unsetAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets 'attribute' on 'item' to 'value' value<br>
 *	 must be an array.<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} values 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.setValues=function(item, attribute, values){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets 'attribute' on 'item' to 'value'<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} value 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.setValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Saves the dirty data using object store provider. See dojo.data.api.Write for API.<br>
 *	 <br>
 *	 kwArgs.global:<br>
 *	 This will cause the save to commit the dirty data for all<br>
 *	 ObjectStores as a single transaction.<br>
 *	 <br>
 *	 kwArgs.revertOnError<br>
 *	 This will cause the changes to be reverted if there is an<br>
 *	 error on the save. By default a revert is executed unless<br>
 *	 a value of false is provide for this parameter.<br>
 * </blockquote>
 * @param {mixed} kwArgs 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.save=function(kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns any modified data to its original state prior to a save();<br>
 * </blockquote>
 * @param {mixed} kwArgs 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.revert=function(kwArgs){};
/**
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.onSet=function(){};
/**
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.onNew=function(){};
/**
 * @param {mixed} results 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.onFetch=function(results){};
/**
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.onDelete=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds a new item to the store at the specified point.<br>
 *	 Takes two parameters, data, and options.<br>
 * </blockquote>
 * @param {Object} data The data to be added in as an item.
 * @param {mixed} parentInfo 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.newItem=function(data, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads an item and calls the callback handler. Note, that this will call the callback<br>
 *	 handler even if the item is loaded. Consequently, you can use loadItem to ensure<br>
 *	 that an item is loaded is situations when the item may or may not be loaded yet.<br>
 *	 If you access a value directly through property access, you can use this to load<br>
 *	 a lazy value as well (doesn't need to be an item).<br>
 * </blockquote>
 * @param {mixed} args 
 * @example
 * store.loadItem({
 * item: item, // this item may or may not be loaded
 * onItem: function(item){
 * // do something with the item
 * }
 * });
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.loadItem=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks to see if the item is loaded.<br>
 * </blockquote>
 * @param {object} item 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.isItemLoaded=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks to see if the argument is an item<br>
 * </blockquote>
 * @param {object} item attribute: /// string
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.isItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns true if the item is marked as dirty or true if there are any dirty items<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.isDirty=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks to see if item has attribute<br>
 * </blockquote>
 * @param {object} item 
 * @param {string} attribute 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the value of an item's 'property' and returns<br>
 *	 it. If this value is an array it is just returned,<br>
 *	 if not, the value is added to an array and that is returned.<br>
 * </blockquote>
 * @param {object} item 
 * @param {string} property property to look up value for
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.getValues=function(item, property){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the value of an item's 'property'<br>
 * </blockquote>
 * @param {Object} item The item to get the value from
 * @param {String} property property to look up value for
 * @param {value} [defaultValue] the default value
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.getValue=function(item, property, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {array} -
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {String|undefined} -
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the attributes which are used to make up the<br>
 *	 identity of an item.	Basically returns this.objectStore.idProperty<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.getIdentityAttributes=function(item){};
/**
 * @param {mixed} item 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 return the store feature set<br>
 * </blockquote>
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the available attributes of an item's 'property' and returns<br>
 *	 it as an array.<br>
 * </blockquote>
 * @param {object} item 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 fetch an item by its identity, by looking in our index of what we have loaded<br>
 * </blockquote>
 * @param {mixed} args 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.fetchItemByIdentity=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.fetch<br>
 * </blockquote>
 * @param {mixed} args 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.fetch=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 deletes item and any references to that item from the store.<br>
 * </blockquote>
 * @param {item} item to delete
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.deleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks to see if 'item' has 'value' at 'attribute'<br>
 * </blockquote>
 * @param {object} item 
 * @param {string} attribute 
 * @param {anything} value 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.containsValue=function(item, attribute, value){};
/**
 * @param {mixed} request 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.close=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds an object to the list of dirty objects.  This object<br>
 *	 contains a reference to the object itself as well as a<br>
 *	 cloned and trimmed version of old object for use with<br>
 *	 revert.<br>
 * </blockquote>
 * @param {mixed} object 
 * @param {mixed} _deleting 
 * @memberOf dojo.data.ObjectStore
*/
dojo.data.ObjectStore.prototype.changing=function(object, _deleting){};
/**
 * @namespace
*/
dojo.date.locale={};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds the regular needed to parse a localized date<br>
 * </blockquote>
 * @param {dojo.date.locale.__FormatOptions} [options] 
 * @returns {String} -
*/
dojo.date.locale.regexp=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convert a properly formatted string to a primitive Date object,<br>
 *	 using locale-specific settings.<br>
 * </blockquote>
 * Create a Date object from a string using a known localized pattern.<br>
 * By default, this method parses looking for both date and time in the string.<br>
 * Formatting patterns are chosen appropriate to the locale.  Different<br>
 * formatting lengths may be chosen, with "full" used by default.<br>
 * Custom patterns may be used or registered with translations using<br>
 * the dojo.date.locale.addCustomFormats method.<br>
 * <br>
 * Formatting patterns are implemented using [the syntax described at<br>
 * unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)<br>
 * When two digit years are used, a century is chosen according to a sliding<br>
 * window of 80 years before and 20 years after present year, for both `yy` and `yyyy` patterns.<br>
 * year &lt; 100CE requires strict mode.
 * @see reference <a href="http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)">http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)</a>
 * @param {String} value A string representation of a date
 * @param {dojo.date.locale.__FormatOptions} [options] 
 * @returns {null|Date} -
*/
dojo.date.locale.parse=function(value, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines if the date falls on a weekend, according to local custom.<br>
 * </blockquote>
 * @param {Date} [dateObject] 
 * @param {String} [locale] 
 * @returns {Boolean} -
*/
dojo.date.locale.isWeekend=function(dateObject, locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used to get localized strings from dojo.cldr for day or month names.<br>
 * </blockquote>
 * @param {String} item 'months' || 'days'
 * @param {String} type 'wide' || 'abbr' || 'narrow' (e.g. &quot;Monday&quot;, &quot;Mon&quot;, or &quot;M&quot; respectively, in English)
 * @param {String} [context] 'standAlone' || 'format' (default)
 * @param {String} [locale] override locale used to find the names
*/
dojo.date.locale.getNames=function(item, type, context, locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format a Date object as a String, using locale-specific settings.<br>
 * </blockquote>
 * Create a string from a Date object using a known localized pattern.<br>
 * By default, this method formats both date and time from dateObject.<br>
 * Formatting patterns are chosen appropriate to the locale.  Different<br>
 * formatting lengths may be chosen, with "full" used by default.<br>
 * Custom patterns may be used or registered with translations using<br>
 * the dojo.date.locale.addCustomFormats method.<br>
 * Formatting patterns are implemented using [the syntax described at<br>
 * unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)
 * @see reference <a href="http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)">http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)</a>
 * @param {Date} dateObject the date and/or time to be formatted.  If a time only is formatted,
 * the values in the year, month, and day fields are irrelevant.  The<br>
 * opposite is true when formatting only dates.
 * @param {dojo.date.locale.__FormatOptions} [options] 
 * @returns {String} -
*/
dojo.date.locale.format=function(dateObject, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a reference to a bundle containing localized custom formats to be<br>
 *	 used by date/time formatting and parsing routines.<br>
 * </blockquote>
 * The user may add custom localized formats where the bundle has properties following the<br>
 * same naming convention used by dojo.cldr: `dateFormat-xxxx` / `timeFormat-xxxx`<br>
 * The pattern string should match the format used by the CLDR.<br>
 * See dojo.date.locale.format() for details.<br>
 * The resources must be loaded by dojo.requireLocalization() prior to use
 * @param {String} packageName 
 * @param {String} bundleName 
*/
dojo.date.locale.addCustomFormats=function(packageName, bundleName){};
/**
 * @param {dojo.date.locale.__FormatOptions} [options] 
 * @private
*/
dojo.date.locale._parseInfo=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the zone (or offset) for the given date and options.  This<br>
 *	 is broken out into a separate function so that it can be overridden<br>
 *	 by timezone-aware code.<br>
 * </blockquote>
 * @param {Date} dateObject the date and/or time being formatted.
 * @param {boolean} getName Whether to return the timezone string (if true), or the offset (if false)
 * @param {dojo.date.locale.__FormatOptions} [options] The options being used for formatting
 * @private
*/
dojo.date.locale._getZone=function(dateObject, getName, options){};
/**
 * @param {Date} dateObject 
 * @param {Number} firstDayOfWeek 
 * @private
 * @returns {Number} -
*/
dojo.date.locale._getWeekOfYear=function(dateObject, firstDayOfWeek){};
/**
 * @param {String} locale 
 * @private
*/
dojo.date.locale._getGregorianBundle=function(locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 gets the day of the year as represented by dateObject<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @private
 * @returns {Number} -
*/
dojo.date.locale._getDayOfYear=function(dateObject){};
/**
 * @private
*/
dojo.date.locale.__FormatOptions=function(){};
/**
 * @class
 * @private
 * @returns {dojo.date.locale.__FormatOptions} new instance
*/
dojo.date.locale.__FormatOptions=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines if the year of the dateObject is a leap year<br>
 * </blockquote>
 * Leap years are years with an additional day YYYY-02-29, where the<br>
 * year number is a multiple of four with the following exception: If<br>
 * a year is a multiple of 100, then it is only a leap year if it is<br>
 * also a multiple of 400. For example, 1900 was not a leap year, but<br>
 * 2000 is one.
 * @param {Date} dateObject 
 * @returns {Boolean} -
*/
dojo.date.isLeapYear=function(dateObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the user's time zone as provided by the browser<br>
 * </blockquote>
 * Try to get time zone info from toString or toLocaleString method of<br>
 * the Date object -- UTC offset is not a time zone.  See<br>
 * http://www.twinsun.com/tz/tz-link.htm Note: results may be<br>
 * inconsistent across browsers.
 * @see reference <a href="http://www.twinsun.com/tz/tz-link.htm">http://www.twinsun.com/tz/tz-link.htm</a>
 * @param {Date} dateObject Needed because the timezone may vary with time (daylight savings)
 * @returns {String} -
*/
dojo.date.getTimezoneName=function(dateObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the number of days in the month used by dateObject<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @returns {Number} -
*/
dojo.date.getDaysInMonth=function(dateObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the difference in a specific unit of time (e.g., number of<br>
 *	 months, weeks, days, etc.) between two dates, rounded to the<br>
 *	 nearest integer.<br>
 * </blockquote>
 * @param {Date} date1 object
 * @param {Date} [date2] object.  If not specified, the current Date is used.
 * @param {String} [interval] A string representing the interval.  One of the following:
 * &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot;,<br>
 * &quot;millisecond&quot;, &quot;quarter&quot;, &quot;week&quot;, &quot;weekday&quot;<br>
 * Defaults to &quot;day&quot;.
 * @returns {Number (integer)} -
*/
dojo.date.difference=function(date1, date2, interval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Compare two date objects by date, time, or both.<br>
 * </blockquote>
 * Returns 0 if equal, positive if a &gt; b, else negative.
 * @param {Date} date1 object
 * @param {Date} [date2] object.  If not specified, the current Date is used.
 * @param {String} [portion] A string indicating the &quot;date&quot; or &quot;time&quot; portion of a Date object.
 * Compares both &quot;date&quot; and &quot;time&quot; by default.  One of the following:<br>
 * &quot;date&quot;, &quot;time&quot;, &quot;datetime&quot;
 * @returns {int} -
*/
dojo.date.compare=function(date1, date2, portion){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add to a Date in intervals of different size, from milliseconds to years<br>
 * </blockquote>
 * @param {Date} date Date object to start with
 * @param {String} interval A string representing the interval.  One of the following:
 * &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot;,<br>
 * &quot;millisecond&quot;, &quot;quarter&quot;, &quot;week&quot;, &quot;weekday&quot;
 * @param {int} amount How much to add to the date.
 * @returns {Date} -
*/
dojo.date.add=function(date, interval, amount){};
/**
 * @namespace
*/
dojo.date.stamp={};
/**
 * <b>Summary:</b><blockquote>
 *	 Format a Date object as a string according a subset of the ISO-8601 standard<br>
 * </blockquote>
 * When options.selector is omitted, output follows [RFC3339](http://www.ietf.org/rfc/rfc3339.txt)<br>
 * The local time zone is included as an offset from GMT, except when selector=='time' (time without a date)<br>
 * Does not check bounds.  Only years between 100 and 9999 are supported.
 * @see reference <a href="http://www.ietf.org/rfc/rfc3339.txt)">http://www.ietf.org/rfc/rfc3339.txt)</a>
 * @param {Date} dateObject A Date object
 * @param {dojo.date.stamp.__Options} [options] 
 * @returns {String} -
*/
dojo.date.stamp.toISOString=function(dateObject, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a Date object given a string formatted according to a subset of the ISO-8601 standard.<br>
 * </blockquote>
 * Accepts a string formatted according to a profile of ISO8601 as defined by<br>
 * [RFC3339](http://www.ietf.org/rfc/rfc3339.txt), except that partial input is allowed.<br>
 * Can also process dates as specified [by the W3C](http://www.w3.org/TR/NOTE-datetime)<br>
 * The following combinations are valid:<br>
 * <br>
 * * dates only<br>
 * 	* yyyy<br>
 * 	* yyyy-MM<br>
 * 	* yyyy-MM-dd<br>
 * * times only, with an optional time zone appended<br>
 * 	* THH:mm<br>
 * 	* THH:mm:ss<br>
 * 	* THH:mm:ss.SSS<br>
 * * and "datetimes" which could be any combination of the above<br>
 * <br>
 * timezones may be specified as Z (for UTC) or +/- followed by a time expression HH:mm<br>
 * Assumes the local time zone if not specified.  Does not validate.  Improperly formatted<br>
 * input may return null.  Arguments which are out of bounds will be handled<br>
 * by the Date constructor (e.g. January 32nd typically gets resolved to February 1st)<br>
 * Only years between 100 and 9999 are supported.
 * @see reference <a href="http://www.ietf.org/rfc/rfc3339.txt),">http://www.ietf.org/rfc/rfc3339.txt),</a>
 * @param {String} formattedString A string such as 2005-06-30T08:05:00-07:00 or 2005-06-30 or T08:05:00
 * @param {Number} [defaultTime] Used for defaults for fields omitted in the formattedString.
 * Uses 1970-01-01T00:00:00.0Z by default.
 * @returns {Date or null} -
*/
dojo.date.stamp.fromISOString=function(formattedString, defaultTime){};
/**
 * @private
*/
dojo.date.stamp.__Options=function(){};
/**
 * @class
 * @private
 * @returns {dojo.date.stamp.__Options} new instance
*/
dojo.date.stamp.__Options=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gathers the results of the deferreds for packaging<br>
 *	 as the parameters to the Deferred Lists' callback<br>
 * </blockquote>
 * @param {dojo.DeferredList} deferredList The deferred list from which this function gathers results.
*/
dojo.DeferredList.gatherResults=function(deferredList){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the current DnD manager.  Creates one if it is not created yet.<br>
 * </blockquote>
 * @returns {Object} -
*/
dojo.dnd.manager=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns true if user clicked on a form element<br>
 * </blockquote>
 * @param {Event} e 
 * @returns {Boolean} -
*/
dojo.dnd.isFormElement=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a unique string for use with any DOM element<br>
 * </blockquote>
*/
dojo.dnd.getUniqueId=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a handler for onmousemove event, which scrolls the first avaialble<br>
 *	 Dom element, it falls back to dojo.dnd.autoScroll()<br>
 * </blockquote>
 * @param {Event} e onmousemove event
*/
dojo.dnd.autoScrollNodes=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 a handler for onmousemove event, which scrolls the window, if<br>
 *	 necesary<br>
 * </blockquote>
 * @param {Event} e onmousemove event
*/
dojo.dnd.autoScroll=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 takes a parent node, and returns an appropriate creator function<br>
 * </blockquote>
 * @param {Node} node a container node
 * @private
 * @returns {Function} -
*/
dojo.dnd._defaultCreator=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a TR/TD structure with given text as an innerHTML of TD<br>
 * </blockquote>
 * @param {String} text a text for TD
 * @private
 * @returns {Node} -
*/
dojo.dnd._createTrTd=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a SPAN element with given text as its innerHTML<br>
 * </blockquote>
 * @param {String} text a text for SPAN
 * @private
 * @returns {Node} -
*/
dojo.dnd._createSpan=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a function, which creates an element of given tag<br>
 *	 (SPAN by default) and sets its innerHTML to given text<br>
 * </blockquote>
 * @param {String} tag a tag name or empty for SPAN
 * @private
 * @returns {Function|Node} -
*/
dojo.dnd._createNode=function(tag){};
/**
 * @private
*/
dojo.dnd.__TimedMoveableArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a dict of parameters for DnD Source configuration. Note that any<br>
 *	 property on Source elements may be configured, but this is the<br>
 *	 short-list<br>
 * </blockquote>
 * @private
*/
dojo.dnd.__SourceArgs=function(){};
/**
 * @private
*/
dojo.dnd.__SelectorArgs=function(){};
/**
 * @private
*/
dojo.dnd.__MoveableArgs=function(){};
/**
 * @private
*/
dojo.dnd.__ContainerArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A specialized version of Moveable to support an FPS throttling.<br>
 *	 This class puts an upper restriction on FPS, which may reduce<br>
 *	 the CPU load. The additional parameter &amp;quot;timeout&amp;quot; regulates<br>
 *	 the delay before actually moving the moveable object.<br>
 * </blockquote>
 * @param {Node||String} node a node (or node's id) to be moved
 * @param {dojo.dnd.__TimedMoveableArgs} params object with additional parameters.
*/
dojo.dnd.TimedMoveable=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Target object, which can be used as a DnD target<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} params 
*/
dojo.dnd.Target=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Source object, which can be used as a DnD source, or a DnD target<br>
 * </blockquote>
 * @param {DOMNode|String} node node or node's id to build the source on
 * @param {dojo.dnd.__SourceArgs} [params] any property of this class may be configured via the params
 * object which is mixed-in to the `dojo.dnd.Source` instance<br>
*/
dojo.dnd.Source=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Selector object, which knows how to select its children<br>
 * </blockquote>
 * @param {Node||String} node node or node's id to build the selector on
 * @param {dojo.dnd.__SelectorArgs} [params] a dictionary of parameters
*/
dojo.dnd.Selector=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object which makes a node follow the mouse, or touch-drag on touch devices.<br>
 *	 Used as a default mover, and as a base class for custom movers.<br>
 * </blockquote>
 * @param {Node} node a node (or node's id) to be moved
 * @param {Event} e a mouse event, which started the move;
 * only pageX and pageY properties are used
 * @param {Object} [host] object which implements the functionality of the move,
 * and defines proper events (onMoveStart and onMoveStop)<br>
*/
dojo.dnd.Mover=function(node, e, host){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object, which makes a node moveable<br>
 * </blockquote>
 * @param {Node} node a node (or node's id) to be moved
 * @param {dojo.dnd.__MoveableArgs} [params] optional parameters
*/
dojo.dnd.Moveable=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 the manager of DnD operations (usually a singleton)<br>
 * </blockquote>
*/
dojo.dnd.Manager=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents (one of) the source node(s) being dragged.<br>
 *	 Contains (at least) the &amp;quot;type&amp;quot; and &amp;quot;data&amp;quot; attributes.<br>
 * </blockquote>
*/
dojo.dnd.Item=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Container object, which knows when mouse hovers over it,<br>
 *	 and over which element it hovers<br>
 * </blockquote>
 * @param {Node} node node or node's id to build the container on
 * @param {dojo.dnd.__ContainerArgs} params a dictionary of parameters
*/
dojo.dnd.Container=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 Object that represents transferred DnD items visually<br>
 *	 manager: Object<br>
 *	 a DnD manager object<br>
 * </blockquote>
 * @param {mixed} manager 
*/
dojo.dnd.Avatar=function(manager){};
/**
 * <b>Summary:</b><blockquote>
 *	 a source that syncs its DnD nodes by default<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} params 
*/
dojo.dnd.AutoSource=function(node, params){};
/**
 * @namespace
*/
dojo.dnd.move={};
/**
 * @namespace
 * @private
*/
dojo.dnd._validOverflow={};
/**
 * @namespace
 * @private
*/
dojo.dnd._validNodes={};
/**
 * @namespace
 * @private
*/
dojo.dnd._defaultCreatorNodes={};
/**
 * <b>Summary:</b><blockquote>
 *	 a source that syncs its DnD nodes by default<br>
 * </blockquote>
 * @class
 * @extends dojo.dnd.Source
 * @param {mixed} node 
 * @param {mixed} params 
 * @returns {dojo.dnd.AutoSource} new instance
*/
dojo.dnd.AutoSource=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Source object, which can be used as a DnD source, or a DnD target<br>
 * </blockquote>
 * @class
 * @extends dojo.dnd.Selector
 * @param {DOMNode|String} node node or node's id to build the source on
 * @param {dojo.dnd.__SourceArgs} [params] any property of this class may be configured via the params
 * object which is mixed-in to the `dojo.dnd.Source` instance
 * @returns {dojo.dnd.Source} new instance
*/
dojo.dnd.Source=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 this function is called once, when mouse is over our container<br>
 * </blockquote>
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onOverEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 this function is called once, when mouse is out of our container<br>
 * </blockquote>
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onOutEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmouseup<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousemove<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousedown<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 called only on the current target, when drop is performed<br>
 *	 from the same target/source<br>
 * </blockquote>
 * @param {Array} nodes the list of transferred items
 * @param {Boolean} copy copy items, if true, move items otherwise
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onDropInternal=function(nodes, copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 called only on the current target, when drop is performed<br>
 *	 from an external source<br>
 * </blockquote>
 * @param {Object} source the source which provides items
 * @param {Array} nodes the list of transferred items
 * @param {Boolean} copy copy items, if true, move items otherwise
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onDropExternal=function(source, nodes, copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 called only on the current target, when drop is performed<br>
 * </blockquote>
 * @param {Object} source the source which provides items
 * @param {Array} nodes the list of transferred items
 * @param {Boolean} copy copy items, if true, move items otherwise
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onDrop=function(source, nodes, copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 called during the active DnD operation, when items<br>
 *	 are dragged over this target, and it is not disabled<br>
 * </blockquote>
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onDraggingOver=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called during the active DnD operation, when items<br>
 *	 are dragged away from this target, and it is not disabled<br>
 * </blockquote>
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onDraggingOut=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 topic event processor for /dnd/start, called to initiate the DnD operation<br>
 * </blockquote>
 * @param {Object} source the source which provides items
 * @param {Array} nodes the list of transferred items
 * @param {Boolean} copy copy items, if true, move items otherwise
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onDndStart=function(source, nodes, copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 topic event processor for /dnd/source/over, called when detected a current source<br>
 * </blockquote>
 * @param {Object} source the source which has the mouse over it
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onDndSourceOver=function(source){};
/**
 * <b>Summary:</b><blockquote>
 *	 topic event processor for /dnd/drop, called to finish the DnD operation<br>
 * </blockquote>
 * @param {Object} source the source which provides items
 * @param {Array} nodes the list of transferred items
 * @param {Boolean} copy copy items, if true, move items otherwise
 * @param {Object} target the target which accepts items
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onDndDrop=function(source, nodes, copy, target){};
/**
 * <b>Summary:</b><blockquote>
 *	 topic event processor for /dnd/cancel, called to cancel the DnD operation<br>
 * </blockquote>
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.onDndCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 prepares the object to be garbage-collected<br>
 * </blockquote>
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if we need to copy items, false to move.<br>
 *	 It is separated to be overwritten dynamically, if needed.<br>
 * </blockquote>
 * @param {Boolean} keyPressed the &quot;copy&quot; key was pressed
 * @param {Boolean} [self] optional flag that means that we are about to drop on itself
 * @returns {Boolean} -
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.copyState=function(keyPressed, self){};
/**
 * <b>Summary:</b><blockquote>
 *	 checks if the target can accept nodes from this source<br>
 * </blockquote>
 * @param {Object} source the source which provides items
 * @param {Array} nodes the list of transferred items
 * @returns {Boolean} -
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype.checkAcceptance=function(source, nodes){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes a class of the current target anchor based on &amp;quot;before&amp;quot; status<br>
 * </blockquote>
 * @private
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype._unmarkTargetAnchor=function(){};
/**
 * @param {mixed} node 
 * @param {mixed} hint 
 * @private
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype._normalizedCreator=function(node, hint){};
/**
 * <b>Summary:</b><blockquote>
 *	 assigns a class to the current target anchor based on &amp;quot;before&amp;quot; status<br>
 * </blockquote>
 * @param {Boolean} before insert before, if true, after otherwise
 * @private
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype._markTargetAnchor=function(before){};
/**
 * <b>Summary:</b><blockquote>
 *	 changes source's state based on &amp;quot;copy&amp;quot; status<br>
 * </blockquote>
 * @param {mixed} copy 
 * @private
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype._markDndStatus=function(copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 checks if user clicked on &amp;quot;approved&amp;quot; items<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @private
 * @returns {Boolean} -
 * @memberOf dojo.dnd.Source
*/
dojo.dnd.Source.prototype._legalMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Object that represents transferred DnD items visually<br>
 *	 manager: Object<br>
 *	 a DnD manager object<br>
 * </blockquote>
 * @class
 * @param {mixed} manager 
 * @returns {dojo.dnd.Avatar} new instance
*/
dojo.dnd.Avatar=function(manager){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the avatar to reflect the current DnD state<br>
 * </blockquote>
 * @memberOf dojo.dnd.Avatar
*/
dojo.dnd.Avatar.prototype.update=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 destructor for the avatar; called to remove all references so it can be garbage-collected<br>
 * </blockquote>
 * @memberOf dojo.dnd.Avatar
*/
dojo.dnd.Avatar.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 constructor function;<br>
 *	 it is separate so it can be (dynamically) overwritten in case of need<br>
 * </blockquote>
 * @memberOf dojo.dnd.Avatar
*/
dojo.dnd.Avatar.prototype.construct=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 generates a proper text to reflect copying or moving of items<br>
 * </blockquote>
 * @private
 * @memberOf dojo.dnd.Avatar
*/
dojo.dnd.Avatar.prototype._generateText=function(){};
/**
 * @class
 * @private
 * @returns {dojo.dnd.__ContainerArgs} new instance
*/
dojo.dnd.__ContainerArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a creator function, which takes a data item, and returns an object like that:<br>
 *	 {node: newNode, data: usedData, type: arrayOfStrings}<br>
 * </blockquote>
 * @memberOf dojo.dnd.__ContainerArgs
*/
dojo.dnd.__ContainerArgs.prototype.creator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Container object, which knows when mouse hovers over it,<br>
 *	 and over which element it hovers<br>
 * </blockquote>
 * @class
 * @param {Node} node node or node's id to build the container on
 * @param {dojo.dnd.__ContainerArgs} params a dictionary of parameters
 * @returns {dojo.dnd.Container} new instance
*/
dojo.dnd.Container=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 sync up the node list with the data map<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.sync=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 collects valid child items and populate the map<br>
 * </blockquote>
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 associates a data item with its key (id)<br>
 * </blockquote>
 * @param {String} key 
 * @param {dojo.dnd.Item} data 
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.setItem=function(key, data){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onselectevent and ondragevent<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.onSelectStart=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 this function is called once, when mouse is over our container<br>
 * </blockquote>
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.onOverEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 this function is called once, when mouse is out of our container<br>
 * </blockquote>
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.onOutEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmouseover<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.onMouseOver=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmouseout<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.onMouseOut=function(e){};
/**
 * @param {mixed} params 
 * @param {mixed} node 
 * @param {mixed} ctor 
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.markupFactory=function(params, node, ctor){};
/**
 * <b>Summary:</b><blockquote>
 *	 inserts an array of new nodes before/after an anchor node<br>
 * </blockquote>
 * @param {Array} data a list of data items, which should be processed by the creator function
 * @param {Boolean} before insert before the anchor, if true, and after the anchor otherwise
 * @param {Node} anchor the anchor node to be used as a point of insertion
 * @returns {self} -
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.insertNodes=function(data, before, anchor){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a data item by its key (id)<br>
 * </blockquote>
 * @param {String} key 
 * @returns {dojo.dnd.Item} -
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.getItem=function(key){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a list (an array) of all valid child nodes<br>
 * </blockquote>
 * @returns {NodeList} -
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.getAllNodes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 iterates over a data map skipping members that<br>
 *	 are present in the empty object (IE and/or 3rd-party libraries).<br>
 * </blockquote>
 * @param {Function} f 
 * @param {Object} [o] 
 * @returns {Object} -
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.forInItems=function(f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 prepares this object to be garbage-collected<br>
 * </blockquote>
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes a data item from the map by its key (id)<br>
 * </blockquote>
 * @param {String} key 
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.delItem=function(key){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes all data items from the map<br>
 * </blockquote>
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype.clearItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes a class with prefix &amp;quot;dojoDndItem&amp;quot;<br>
 * </blockquote>
 * @param {Node} node a node
 * @param {String} type a variable suffix for a class name
 * @private
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype._removeItemClass=function(node, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds all necessary data to the output of the user-supplied creator function<br>
 * </blockquote>
 * @param {dojo.dnd.Item} item 
 * @param {String} hint 
 * @private
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype._normalizedCreator=function(item, hint){};
/**
 * <b>Summary:</b><blockquote>
 *	 gets a child, which is under the mouse at the moment, or null<br>
 * </blockquote>
 * @param {Event} e a mouse event
 * @private
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype._getChildByEvent=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 changes a named state to new state value<br>
 * </blockquote>
 * @param {String} type a name of the state to change
 * @param {String} newState new state
 * @private
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype._changeState=function(type, newState){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds a class with prefix &amp;quot;dojoDndItem&amp;quot;<br>
 * </blockquote>
 * @param {Node} node a node
 * @param {String} type a variable suffix for a class name
 * @private
 * @memberOf dojo.dnd.Container
*/
dojo.dnd.Container.prototype._addItemClass=function(node, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents (one of) the source node(s) being dragged.<br>
 *	 Contains (at least) the &amp;quot;type&amp;quot; and &amp;quot;data&amp;quot; attributes.<br>
 * </blockquote>
 * @class
 * @returns {dojo.dnd.Item} new instance
*/
dojo.dnd.Item=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 the manager of DnD operations (usually a singleton)<br>
 * </blockquote>
 * @class
 * @returns {dojo.dnd.Manager} new instance
*/
dojo.dnd.Manager=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the avatar; it is separate to be overwritten dynamically, if needed<br>
 * </blockquote>
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype.updateAvatar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 stop the DnD in progress<br>
 * </blockquote>
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype.stopDrag=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called to initiate the DnD operation<br>
 * </blockquote>
 * @param {Object} source the source which provides items
 * @param {Array} nodes the list of transferred items
 * @param {Boolean} copy copy items, if true, move items otherwise
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype.startDrag=function(source, nodes, copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when a source detected a mouse-over condition<br>
 * </blockquote>
 * @param {Object} source the reporter
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype.overSource=function(source){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when a source detected a mouse-out condition<br>
 * </blockquote>
 * @param {Object} source the reporter
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype.outSource=function(source){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmouseup<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousemove<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onkeyup, watching for CTRL for copy/move status<br>
 * </blockquote>
 * @param {Event} e keyboard event
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype.onKeyUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onkeydown:<br>
 *	 watching for CTRL for copy/move status, watching for ESCAPE to cancel the drag<br>
 * </blockquote>
 * @param {Event} e keyboard event
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype.onKeyDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes the avatar, it is separate to be overwritten dynamically, if needed.<br>
 * </blockquote>
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype.makeAvatar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called to notify if the current target can accept items<br>
 * </blockquote>
 * @param {mixed} flag 
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype.canDrop=function(flag){};
/**
 * <b>Summary:</b><blockquote>
 *	 changes the copy status<br>
 * </blockquote>
 * @param {Boolean} copy the copy status
 * @private
 * @memberOf dojo.dnd.Manager
*/
dojo.dnd.Manager.prototype._setCopyStatus=function(copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 called to notify if the current target can accept items<br>
 * </blockquote>
 * @class
 * @returns {dojo.dnd.Manager.canDrop} new instance
*/
dojo.dnd.Manager.canDrop=function(){};
/**
 * @namespace
*/
dojo.dnd.Manager.avatar.node={};
/**
 * @class
 * @private
 * @returns {dojo.dnd.__MoveableArgs} new instance
*/
dojo.dnd.__MoveableArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object, which makes a node moveable<br>
 * </blockquote>
 * @class
 * @param {Node} node a node (or node's id) to be moved
 * @param {dojo.dnd.__MoveableArgs} [params] optional parameters
 * @returns {dojo.dnd.Moveable} new instance
*/
dojo.dnd.Moveable=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onselectevent and ondragevent<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.onSelectStart=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 called before every incremental move; can be overwritten.<br>
 * </blockquote>
 * @param {dojo.dnd.Mover} mover 
 * @param {Object} leftTop 
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.onMoving=function(mover, leftTop){};
/**
 * <b>Summary:</b><blockquote>
 *	 called after every incremental move; can be overwritten.<br>
 * </blockquote>
 * @param {dojo.dnd.Mover} mover 
 * @param {Object} leftTop 
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.onMoved=function(mover, leftTop){};
/**
 * <b>Summary:</b><blockquote>
 *	 called after every move operation<br>
 * </blockquote>
 * @param {dojo.dnd.Mover} mover 
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.onMoveStop=function(mover){};
/**
 * <b>Summary:</b><blockquote>
 *	 called before every move operation<br>
 * </blockquote>
 * @param {dojo.dnd.Mover} mover 
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.onMoveStart=function(mover){};
/**
 * <b>Summary:</b><blockquote>
 *	 called during every move notification;<br>
 *	 should actually move the node; can be overwritten.<br>
 * </blockquote>
 * @param {dojo.dnd.Mover} mover 
 * @param {Object} leftTop 
 * @param {Event} e 
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.onMove=function(mover, leftTop, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmouseup, used only for delayed drags<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousemove/ontouchmove, used only for delayed drags<br>
 * </blockquote>
 * @param {Event} e mouse/touch event
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousedown/ontouchstart, creates a Mover for the node<br>
 * </blockquote>
 * @param {Event} e mouse/touch event
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.onMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 called during the very first move notification;<br>
 *	 can be used to initialize coordinates, can be overwritten.<br>
 * </blockquote>
 * @param {dojo.dnd.Mover} mover 
 * @param {Event} e 
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.onFirstMove=function(mover, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when the drag is detected;<br>
 *	 responsible for creation of the mover<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.onDragDetected=function(e){};
/**
 * @param {mixed} params 
 * @param {mixed} node 
 * @param {mixed} ctor 
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.markupFactory=function(params, node, ctor){};
/**
 * <b>Summary:</b><blockquote>
 *	 stops watching for possible move, deletes all references, so the object can be garbage-collected<br>
 * </blockquote>
 * @memberOf dojo.dnd.Moveable
*/
dojo.dnd.Moveable.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object, which makes a node moveable<br>
 * </blockquote>
 * @param {Node} node a node (or node's id) to be moved
 * @param {dojo.dnd.move.__parentConstrainedMoveableArgs} [params] an optional object with parameters
 * @returns {Object} -
*/
dojo.dnd.move.parentConstrainedMoveable=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object that makes a node moveable<br>
 * </blockquote>
 * @param {Node} node a node (or node's id) to be moved
 * @param {dojo.dnd.move.__constrainedMoveableArgs} [params] an optional object with additional parameters;
 * the rest is passed to the base class<br>
*/
dojo.dnd.move.constrainedMoveable=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object, which makes a node moveable<br>
 * </blockquote>
 * @param {Node} node a node (or node's id) to be moved
 * @param {dojo.dnd.move.__boxConstrainedMoveableArgs} [params] an optional object with parameters
*/
dojo.dnd.move.boxConstrainedMoveable=function(node, params){};
/**
 * @private
*/
dojo.dnd.move.__parentConstrainedMoveableArgs=function(){};
/**
 * @private
*/
dojo.dnd.move.__constrainedMoveableArgs=function(){};
/**
 * @private
*/
dojo.dnd.move.__boxConstrainedMoveableArgs=function(){};
/**
 * @class
 * @extends dojo.dnd.__MoveableArgs
 * @private
 * @returns {dojo.dnd.move.__constrainedMoveableArgs} new instance
*/
dojo.dnd.move.__constrainedMoveableArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculates a constraint box.<br>
 *	 It is called in a context of the moveable object.<br>
 * </blockquote>
 * @memberOf dojo.dnd.move.__constrainedMoveableArgs
*/
dojo.dnd.move.__constrainedMoveableArgs.prototype.constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object that makes a node moveable<br>
 * </blockquote>
 * @class
 * @extends dojo.dnd.Moveable
 * @param {Node} node a node (or node's id) to be moved
 * @param {dojo.dnd.move.__constrainedMoveableArgs} [params] an optional object with additional parameters;
 * the rest is passed to the base class
 * @returns {dojo.dnd.move.constrainedMoveable} new instance
*/
dojo.dnd.move.constrainedMoveable=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 called during every move notification;<br>
 *	 should actually move the node; can be overwritten.<br>
 * </blockquote>
 * @param {dojo.dnd.Mover} mover 
 * @param {Object} leftTop 
 * @memberOf dojo.dnd.move.constrainedMoveable
*/
dojo.dnd.move.constrainedMoveable.prototype.onMove=function(mover, leftTop){};
/**
 * <b>Summary:</b><blockquote>
 *	 called during the very first move notification;<br>
 *	 can be used to initialize coordinates, can be overwritten.<br>
 * </blockquote>
 * @param {dojo.dnd.Mover} mover 
 * @memberOf dojo.dnd.move.constrainedMoveable
*/
dojo.dnd.move.constrainedMoveable.prototype.onFirstMove=function(mover){};
/**
*/
dojo.dnd.move.constrainedMoveable.constraints=function(){};
/**
 * @class
 * @extends dojo.dnd.move.__constrainedMoveableArgs
 * @private
 * @returns {dojo.dnd.move.__boxConstrainedMoveableArgs} new instance
*/
dojo.dnd.move.__boxConstrainedMoveableArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object, which makes a node moveable<br>
 * </blockquote>
 * @class
 * @extends dojo.dnd.move.constrainedMoveable
 * @param {Node} node a node (or node's id) to be moved
 * @param {dojo.dnd.move.__boxConstrainedMoveableArgs} [params] an optional object with parameters
 * @returns {dojo.dnd.move.boxConstrainedMoveable} new instance
*/
dojo.dnd.move.boxConstrainedMoveable=function(node, params){};
/**
*/
dojo.dnd.move.boxConstrainedMoveable.constraints=function(){};
/**
 * @class
 * @extends dojo.dnd.move.__constrainedMoveableArgs
 * @private
 * @returns {dojo.dnd.move.__parentConstrainedMoveableArgs} new instance
*/
dojo.dnd.move.__parentConstrainedMoveableArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object, which makes a node moveable<br>
 * </blockquote>
 * @class
 * @extends dojo.dnd.move.constrainedMoveable
 * @param {Node} node a node (or node's id) to be moved
 * @param {dojo.dnd.move.__parentConstrainedMoveableArgs} [params] an optional object with parameters
 * @returns {dojo.dnd.move.parentConstrainedMoveable} new instance
*/
dojo.dnd.move.parentConstrainedMoveable=function(node, params){};
/**
 * @returns {Object} -
*/
dojo.dnd.move.parentConstrainedMoveable.constraints=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object which makes a node follow the mouse, or touch-drag on touch devices.<br>
 *	 Used as a default mover, and as a base class for custom movers.<br>
 * </blockquote>
 * @class
 * @param {Node} node a node (or node's id) to be moved
 * @param {Event} e a mouse event, which started the move;
 * only pageX and pageY properties are used
 * @param {Object} [host] object which implements the functionality of the move,
 * and defines proper events (onMoveStart and onMoveStop)
 * @returns {dojo.dnd.Mover} new instance
*/
dojo.dnd.Mover=function(node, e, host){};
/**
 * @memberOf dojo.dnd.Mover
*/
dojo.dnd.Mover.node=null;
/**
 * @namespace
*/
dojo.dnd.Mover.marginBox={};
/**
 * @param {mixed} e 
 * @memberOf dojo.dnd.Mover
*/
dojo.dnd.Mover.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousemove/ontouchmove<br>
 * </blockquote>
 * @param {Event} e mouse/touch event
 * @memberOf dojo.dnd.Mover
*/
dojo.dnd.Mover.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 makes the node absolute; it is meant to be called only once.<br>
 *	 relative and absolutely positioned nodes are assumed to use pixel units<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojo.dnd.Mover
*/
dojo.dnd.Mover.prototype.onFirstMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 stops the move, deletes all references, so the object can be garbage-collected<br>
 * </blockquote>
 * @memberOf dojo.dnd.Mover
*/
dojo.dnd.Mover.prototype.destroy=function(){};
/**
 * @class
 * @extends dojo.dnd.__ContainerArgs
 * @private
 * @returns {dojo.dnd.__SelectorArgs} new instance
*/
dojo.dnd.__SelectorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Selector object, which knows how to select its children<br>
 * </blockquote>
 * @class
 * @extends dojo.dnd.Container
 * @param {Node||String} node node or node's id to build the selector on
 * @param {dojo.dnd.__SelectorArgs} [params] a dictionary of parameters
 * @returns {dojo.dnd.Selector} new instance
*/
dojo.dnd.Selector=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 sync up the node list with the data map<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.sync=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 unselects all items<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.selectNone=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 selects all items<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.selectAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 this function is called once, when mouse is over our container<br>
 * </blockquote>
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.onOverEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 this function is called once, when mouse is out of our container<br>
 * </blockquote>
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.onOutEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmouseup<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousemove<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousedown<br>
 * </blockquote>
 * @param {Event} e mouse event
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.onMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 inserts new data items (see `dojo.dnd.Container.insertNodes()` method for details)<br>
 * </blockquote>
 * @see dojo.dnd.Container
 * @param {Boolean} addSelected all new nodes will be added to selected items, if true, no selection change otherwise
 * @param {Array} data a list of data items, which should be processed by the creator function
 * @param {Boolean} before insert before the anchor, if true, and after the anchor otherwise
 * @param {Node} anchor the anchor node to be used as a point of insertion
 * @returns {self} -
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.insertNodes=function(addSelected, data, before, anchor){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a list (an array) of selected nodes<br>
 * </blockquote>
 * @returns {NodeList} -
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.getSelectedNodes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 iterates over selected items;<br>
 *	 see `dojo.dnd.Container.forInItems()` for details<br>
 * </blockquote>
 * @see dojo.dnd.Container
 * @param {Function} f 
 * @param {Object} [o] 
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.forInSelectedItems=function(f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 prepares the object to be garbage-collected<br>
 * </blockquote>
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 deletes all selected items<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype.deleteSelectedNodes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 unselects all items<br>
 * </blockquote>
 * @private
 * @returns {self} -
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype._removeSelection=function(){};
/**
 * @private
 * @returns {self} -
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype._removeAnchor=function(){};
/**
 * @param {mixed} item 
 * @param {mixed} hint 
 * @private
 * @memberOf dojo.dnd.Selector
*/
dojo.dnd.Selector.prototype._normalizedCreator=function(item, hint){};
/**
 * <b>Summary:</b><blockquote>
 *	 a dict of parameters for DnD Source configuration. Note that any<br>
 *	 property on Source elements may be configured, but this is the<br>
 *	 short-list<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojo.dnd.__SourceArgs} new instance
*/
dojo.dnd.__SourceArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Target object, which can be used as a DnD target<br>
 * </blockquote>
 * @class
 * @extends dojo.dnd.Source
 * @param {mixed} node 
 * @param {mixed} params 
 * @returns {dojo.dnd.Target} new instance
*/
dojo.dnd.Target=function(node, params){};
/**
 * @class
 * @extends dojo.dnd.__MoveableArgs
 * @private
 * @returns {dojo.dnd.__TimedMoveableArgs} new instance
*/
dojo.dnd.__TimedMoveableArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A specialized version of Moveable to support an FPS throttling.<br>
 *	 This class puts an upper restriction on FPS, which may reduce<br>
 *	 the CPU load. The additional parameter &amp;quot;timeout&amp;quot; regulates<br>
 *	 the delay before actually moving the moveable object.<br>
 * </blockquote>
 * @class
 * @extends dojo.dnd.Moveable
 * @param {Node||String} node a node (or node's id) to be moved
 * @param {dojo.dnd.__TimedMoveableArgs} params object with additional parameters.
 * @returns {dojo.dnd.TimedMoveable} new instance
*/
dojo.dnd.TimedMoveable=function(node, params){};
/**
 * @param {dojo.dnd.Mover} mover 
 * @memberOf dojo.dnd.TimedMoveable
*/
dojo.dnd.TimedMoveable.prototype.onMoveStop=function(mover){};
/**
 * @param {dojo.dnd.Mover} mover 
 * @param {Object} leftTop 
 * @memberOf dojo.dnd.TimedMoveable
*/
dojo.dnd.TimedMoveable.prototype.onMove=function(mover, leftTop){};
/**
 * @namespace
*/
dojo.dom={};
/**
 * @param {DOMNode|String} node 
 * @param {Boolean} selectable 
*/
dojo.dom.setSelectable=function(node, selectable){};
/**
 * @param {DOMNode|String} node 
 * @param {DOMNode|String} ancestor 
 * @returns {Boolean} -
*/
dojo.dom.isDescendant=function(node, ancestor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets a property on an HTML element.<br>
 * </blockquote>
 * Handles normalized setting of properties on DOM nodes.<br>
 * <br>
 * When passing functions as values, note that they will not be<br>
 * directly assigned to slots on the node, but rather the default<br>
 * behavior will be removed and the new behavior will be added<br>
 * using `dojo.connect()`, meaning that event handler properties<br>
 * will be normalized and that some caveats with regards to<br>
 * non-standard behaviors for onsubmit apply. Namely that you<br>
 * should cancel form submission using `dojo.stopEvent()` on the<br>
 * passed event object instead of returning a boolean value from<br>
 * the handler itself.
 * @param {DOMNode|String} node id or reference to the element to set the property on
 * @param {String|Object} name the name of the property to set, or a hash object to set
 * multiple properties at once.
 * @param {String} [value] The value to set for the property
 * @example
 * 	// use prop() to set the tab index
 * 	dojo.setProp("nodeId", "tabIndex", 3);
 * @example
 * Set multiple values at once, including event handlers:
 * 	dojo.setProp("formId", {
 * 		"foo": "bar",
 * 		"tabIndex": -1,
 * 		"method": "POST",
 * 		"onsubmit": function(e){
 * 			// stop submitting the form. Note that the IE behavior
 * 			// of returning true or false will have no effect here
 * 			// since our handler is connect()ed to the built-in
 * 			// onsubmit behavior and so we need to use
 * 			// dojo.stopEvent() to ensure that the submission
 * 			// doesn't proceed.
 * 			dojo.stopEvent(e);
 * 
 * 			// submit the form with Ajax
 * 			dojo.xhrPost({ form: "formId" });
 * 		}
 * 	});
 * @example
 * Style is s special case: Only set with an object hash of styles
 * 	dojo.setProp("someNode",{
 * 		id:"bar",
 * 		style:{
 * 			width:"200px", height:"100px", color:"#000"
 * 		}
 * 	});
 * @example
 * Again, only set style as an object hash of styles:
 * 	var obj = { color:"#fff", backgroundColor:"#000" };
 * 	dojo.setProp("someNode", "style", obj);
 * 
 * 	// though shorter to use `dojo.style()` in this case:
 * 	dojo.style("someNode", obj);
*/
dojo.prop.set=function(node, name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets a property on an HTML element.<br>
 * </blockquote>
 * Handles normalized getting of properties on DOM nodes.
 * @param {DOMNode|String} node id or reference to the element to get the property on
 * @param {String} name the name of the property to get.
 * @example
 * 	// get the current value of the "foo" property on a node
 * 	dojo.getProp(dojo.byId("nodeId"), "foo");
 * 	// or we can just pass the id:
 * 	dojo.getProp("nodeId", "foo");
*/
dojo.prop.get=function(node, name){};
/**
 * @namespace
*/
dojo.window.console={};
/**
 * @namespace
*/
window.console={};
/**
 * <b>Summary:</b><blockquote>
 *	 Sends warning arguments to console, highlighted with (!) icon and blue style.<br>
 * </blockquote>
*/
window.console.warn=function(){};
/**
 * @param {mixed} _value 
*/
window.console.trace=function(_value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See above.<br>
 * </blockquote>
 * @param {mixed} name 
*/
window.console.timeEnd=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Starts timers assigned to name given in argument. Timer stops and displays on timeEnd(title);<br>
 * </blockquote>
 * @param {mixed} name 
 * @example
 * 	console.time("load");
 * 	console.time("myFunction");
 * 	console.timeEnd("load");
 * 	console.timeEnd("myFunction");
*/
window.console.time=function(name){};
/**
*/
window.console.recss=function(){};
/**
*/
window.console.profileEnd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Not supported<br>
 * </blockquote>
*/
window.console.profile=function(){};
/**
*/
window.console.openObjectInspector=function(){};
/**
*/
window.console.openDomInspector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Closes object inspector and opens message console. Do not call this directly<br>
 * </blockquote>
*/
window.console.openConsole=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Opens message console. Do not call this directly<br>
 * </blockquote>
*/
window.console.open=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sends arguments to console.<br>
 * </blockquote>
*/
window.console.log=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sends arguments to console, highlighted with (I) icon.<br>
 * </blockquote>
*/
window.console.info=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Closes group. See above<br>
 * </blockquote>
*/
window.console.groupEnd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 collects log messages into a group, starting with this call and ending with<br>
 *	 groupEnd(). Missing collapse functionality<br>
 * </blockquote>
*/
window.console.group=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sends error arguments (object) to console, highlighted with (X) icon and yellow style<br>
 *	 NEW: error object now displays in object inspector<br>
 * </blockquote>
*/
window.console.error=function(){};
/**
 * @param {mixed} node 
*/
window.console.dirxml=function(node){};
/**
 * @param {mixed} obj 
*/
window.console.dir=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sends arguments to console. Missing finctionality to show script line of trace.<br>
 * </blockquote>
*/
window.console.debug=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Not supported<br>
 * </blockquote>
 * @param {mixed} name 
*/
window.console.count=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Closes message console. Do not call this directly<br>
 * </blockquote>
*/
window.console.close=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clears message console. Do not call this directly<br>
 * </blockquote>
*/
window.console.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tests for true. Throws exception if false.<br>
 * </blockquote>
 * @param {mixed} truth 
 * @param {mixed} message 
*/
window.console.assert=function(truth, message){};
/**
 * @private
*/
window.console._restoreBorder=function(){};
/**
 * @private
*/
window.console._closeDomInspector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shrink a node to nothing and hide it.<br>
 * </blockquote>
 * Returns an animation that will shrink node defined in "args"<br>
 * from it's current height to 1px, and then hide it.
 * @param {Object} args A hash-map of standard `dojo.Animation` constructor properties
 * (such as easing: node: duration: and so on)
 * @returns {dojo.Animation} -
 * @example
 * 	dojo.fx.wipeOut({ node:"someId" }).play()
*/
dojo.fx.wipeOut=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Expand a node to it's natural height.<br>
 * </blockquote>
 * Returns an animation that will expand the<br>
 * node defined in 'args' object from it's current height to<br>
 * it's natural height (with no scrollbar).<br>
 * Node must have no margin/border/padding.
 * @param {Object} args A hash-map of standard `dojo.Animation` constructor properties
 * (such as easing: node: duration: and so on)
 * @returns {dojo.Animation} -
 * @example
 * 	dojo.fx.wipeIn({
 * 		node:"someId"
 * 	}).play()
*/
dojo.fx.wipeIn=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Slide a node to a new top/left position<br>
 * </blockquote>
 * Returns an animation that will slide "node"<br>
 * defined in args Object from its current position to<br>
 * the position defined by (args.left, args.top).
 * @param {Object} args A hash-map of standard `dojo.Animation` constructor properties
 * (such as easing: node: duration: and so on). Special args members<br>
 * are `top` and `left`, which indicate the new position to slide to.
 * @returns {dojo.Animation} -
 * @example
 * 	.slideTo({ node: node, left:"40", top:"50", units:"px" }).play()
*/
dojo.fx.slideTo=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Combine a list of `dojo.Animation`s to run in parallel<br>
 * </blockquote>
 * Combine an array of `dojo.Animation`s to run in parallel,<br>
 * providing a new `dojo.Animation` instance encompasing each<br>
 * animation, firing standard animation events.
 * @param {dojo.Animation[]} animations 
 * @returns {dojo.Animation} -
 * @example
 * Fade out `node` while fading in `otherNode` simultaneously
 * 	dojo.fx.combine([
 * 		dojo.fadeIn({ node:node }),
 * 		dojo.fadeOut({ node:otherNode })
 * 	]).play();
 * @example
 * When the longest animation ends, execute a function:
 * 	var anim = dojo.fx.combine([
 * 		dojo.fadeIn({ node: n, duration:700 }),
 * 		dojo.fadeOut({ node: otherNode, duration: 300 })
 * 	]);
 * 	dojo.connect(anim, "onEnd", function(){
 * 		// overall animation is done.
 * 	});
 * 	anim.play(); // play the animation
*/
dojo.fx.combine=function(animations){};
/**
 * <b>Summary:</b><blockquote>
 *	 Chain a list of `dojo.Animation`s to run in sequence<br>
 * </blockquote>
 * Return a `dojo.Animation` which will play all passed<br>
 * `dojo.Animation` instances in sequence, firing its own<br>
 * synthesized events simulating a single animation. (eg:<br>
 * onEnd of this animation means the end of the chain,<br>
 * not the individual animations within)
 * @param {dojo.Animation[]} animations 
 * @returns {dojo.Animation} -
 * @example
 * Once `node` is faded out, fade in `otherNode`
 * 	dojo.fx.chain([
 * 		dojo.fadeIn({ node:node }),
 * 		dojo.fadeOut({ node:otherNode })
 * 	]).play();
*/
dojo.fx.chain=function(animations){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple `dojo.Animation` toggler API.<br>
 * </blockquote>
 * class constructor for an animation toggler. It accepts a packed<br>
 * set of arguments about what type of animation to use in each<br>
 * direction, duration, etc. All available members are mixed into<br>
 * these animations from the constructor (for example, `node`,<br>
 * `showDuration`, `hideDuration`).
 * @param {mixed} args 
 * @example
 * 	var t = new dojo.fx.Toggler({
 * 		node: "nodeId",
 * 		showDuration: 500,
 * 		// hideDuration will default to "200"
 * 		showFunc: dojo.fx.wipeIn,
 * 		// hideFunc will default to "fadeOut"
 * 	});
 * 	t.show(100); // delay showing for 100ms
 * 	// ...time passes...
 * 	t.hide();
*/
dojo.fx.Toggler=function(args){};
/**
 * @namespace
*/
dojo.fx.easing={};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.sineOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.sineInOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.sineIn=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.quintOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.quintInOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.quintIn=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.quartOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.quartInOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.quartIn=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.quadOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.quadInOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.quadIn=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 A linear easing function<br>
 * </blockquote>
 * @param {Decimal} [n] 
*/
dojo.fx.easing.linear=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.expoOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.expoInOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.expoIn=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function that elasticly snaps around the target value,<br>
 *	 near the end of the Animation<br>
 * </blockquote>
 * An easing function that elasticly snaps around the target value,<br>
 * near the end of the Animation<br>
 * <br>
 * Use caution when the elasticity will cause values to become<br>
 * negative as some properties cannot be set to negative values.
 * @param {Decimal} [n] 
*/
dojo.fx.easing.elasticOut=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function that elasticly snaps around the value, near<br>
 *	 the beginning and end of the Animation.<br>
 * </blockquote>
 * An easing function that elasticly snaps around the value, near<br>
 * the beginning and end of the Animation.<br>
 * <br>
 * Use caution when the elasticity will cause values to become<br>
 * negative as some properties cannot be set to negative values.
 * @param {Decimal} [n] 
*/
dojo.fx.easing.elasticInOut=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function the elastically snaps from the start value<br>
 * </blockquote>
 * An easing function the elastically snaps from the start value<br>
 * <br>
 * Use caution when the elasticity will cause values to become negative<br>
 * as some properties cannot be set to negative values.
 * @param {Decimal} [n] 
*/
dojo.fx.easing.elasticIn=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.cubicOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.cubicInOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.cubicIn=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.circOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.circInOut=function(n){};
/**
 * @param {Decimal} [n] 
*/
dojo.fx.easing.circIn=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function that 'bounces' near the end of an Animation<br>
 * </blockquote>
 * @param {Decimal} [n] 
*/
dojo.fx.easing.bounceOut=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function that 'bounces' at the beginning and end of the Animation<br>
 * </blockquote>
 * @param {Decimal} [n] 
 * @returns {Decimal} -
*/
dojo.fx.easing.bounceInOut=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function that 'bounces' near the beginning of an Animation<br>
 * </blockquote>
 * @param {Decimal} [n] 
 * @returns {Decimal} -
*/
dojo.fx.easing.bounceIn=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function that pops past the range briefly, and slowly comes back.<br>
 * </blockquote>
 * An easing function that pops past the range briefly, and slowly comes back.<br>
 * <br>
 * Use caution when the easing will cause values to become negative as some<br>
 * properties cannot be set to negative values.
 * @param {Decimal} [n] 
*/
dojo.fx.easing.backOut=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function combining the effects of `backIn` and `backOut`<br>
 * </blockquote>
 * An easing function combining the effects of `backIn` and `backOut`.<br>
 * Use caution when the easing will cause values to become negative<br>
 * as some properties cannot be set to negative values.
 * @param {Decimal} [n] 
*/
dojo.fx.easing.backInOut=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function that starts away from the target,<br>
 *	 and quickly accelerates towards the end value.<br>
 *	 <br>
 *	 Use caution when the easing will cause values to become<br>
 *	 negative as some properties cannot be set to negative values.<br>
 * </blockquote>
 * @param {Decimal} [n] 
*/
dojo.fx.easing.backIn=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple `dojo.Animation` toggler API.<br>
 * </blockquote>
 * class constructor for an animation toggler. It accepts a packed<br>
 * set of arguments about what type of animation to use in each<br>
 * direction, duration, etc. All available members are mixed into<br>
 * these animations from the constructor (for example, `node`,<br>
 * `showDuration`, `hideDuration`).
 * @class
 * @param {mixed} args 
 * @returns {dojo.fx.Toggler} new instance
 * @example
 * 	var t = new dojo.fx.Toggler({
 * 		node: "nodeId",
 * 		showDuration: 500,
 * 		// hideDuration will default to "200"
 * 		showFunc: dojo.fx.wipeIn,
 * 		// hideFunc will default to "fadeOut"
 * 	});
 * 	t.show(100); // delay showing for 100ms
 * 	// ...time passes...
 * 	t.hide();
*/
dojo.fx.Toggler=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 The function that returns the `dojo.Animation` to show the node<br>
 * </blockquote>
*/
dojo.fx.Toggler.showFunc=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Toggle the node to showing<br>
 * </blockquote>
 * @param {Integer} [delay] Ammount of time to stall playing the show animation
 * @memberOf dojo.fx.Toggler
*/
dojo.fx.Toggler.prototype.show=function(delay){};
/**
 * <b>Summary:</b><blockquote>
 *	 The function that returns the `dojo.Animation` to hide the node<br>
 * </blockquote>
*/
dojo.fx.Toggler.hideFunc=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Toggle the node to hidden<br>
 * </blockquote>
 * @param {Integer} [delay] Ammount of time to stall playing the hide animation
 * @memberOf dojo.fx.Toggler
*/
dojo.fx.Toggler.prototype.hide=function(delay){};
/**
 * <b>Summary:</b><blockquote>
 *	 factory method to get a Google Gears plugin instance to<br>
 *	 expose in the browser runtime environment, if present<br>
 * </blockquote>
 * @private
 * @returns {already defined elsewhere} -
*/
dojo.gears._gearsObject=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resolves id into a module id based on possibly-nested tenary expression that branches on has feature test value(s).<br>
 * </blockquote>
 * @param {mixed} id 
 * @param {Function} toAbsMid Resolves a relative module id into an absolute module id
*/
dojo.has.normalize=function(id, toAbsMid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Conditional loading of AMD modules based on a has feature test value.<br>
 * </blockquote>
 * @param {String} id Gives the resolved module id to load.
 * @param {Function} parentRequire The loader require function with respect to the module that contained the plugin resource in it's
 * dependency list.
 * @param {Function} loaded Callback to loader that consumes result of plugin demand.
*/
dojo.has.load=function(id, parentRequire, loaded){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deletes the contents of the element passed to test functions.<br>
 * </blockquote>
 * @param {mixed} element 
*/
dojo.has.clearElement=function(element){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register a new feature test for some named feature.<br>
 * </blockquote>
 * @param {String|Integer} name The name (if a string) or identifier (if an integer) of the feature to test.
 * @param {Function} test A test function to register. If a function, queued for testing until actually
 * needed. The test function should return a boolean indicating<br>
 * the presence of a feature or bug.
 * @param {Boolean} [now] Optional. Omit if `test` is not a function. Provides a way to immediately
 * run the test and cache the result.
 * @param {Boolean} [force] Optional. If the test already exists and force is truthy, then the existing
 * test will be replaced; otherwise, add does not replace an existing test (that<br>
 * is, by default, the first test advice wins).
 * @example
 * A redundant test, testFn with immediate execution:
 * 				has.add("javascript", function(){ return true; }, true);
 * @example
 * Again with the redundantness. You can do this in your tests, but we should
 * not be doing this in any internal has.js tests
 * 				has.add("javascript", true);
 * @example
 * Three things are passed to the testFunction. `global`, `document`, and a generic element
 * from which to work your test should the need arise.
 * 				has.add("bug-byid", function(g, d, el){
 * 						// g	== global, typically window, yadda yadda
 * 						// d	== document object
 * 						// el == the generic element. a `has` element.
 * 						return false; // fake test, byid-when-form-has-name-matching-an-id is slightly longer
 * 				});
*/
dojo.has.add=function(name, test, now, force){};
/**
 * <b>Summary:</b><blockquote>
 *	 inserts (replaces) the given content into the given node. dojo.place(cont, node, &amp;quot;only&amp;quot;)<br>
 *	 may be a better choice for simple HTML insertion.<br>
 * </blockquote>
 * Unless you need to use the params capabilities of this method, you should use<br>
 * dojo.place(cont, node, "only"). dojo.place() has more robust support for injecting<br>
 * an HTML string into the DOM, but it only handles inserting an HTML string as DOM<br>
 * elements, or inserting a DOM node. dojo.place does not handle NodeList insertions<br>
 * or the other capabilities as defined by the params object for this method.
 * @param {DomNode} node the parent element that will receive the content
 * @param {String|DomNode|NodeList} cont the content to be set on the parent element.
 * This can be an html string, a node reference or a NodeList, dojo.NodeList, Array or other enumerable list of nodes
 * @param {Object} [params] Optional flags/properties to configure the content-setting. See dojo.html._ContentSetter
 * @example
 * A safe string/node/nodelist content replacement/injection with hooks for extension
 * Example Usage:
 * dojo.html.set(node, "some string");
 * dojo.html.set(node, contentNode, {options});
 * dojo.html.set(node, myNode.childNodes, {options});
*/
dojo.html.set=function(node, cont, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 inserts the given content into the given node<br>
 * </blockquote>
 * @param {DomNode} node the parent element
 * content:<br>
 * the content to be set on the parent element.<br>
 * This can be an html string, a node reference or a NodeList, dojo.NodeList, Array or other enumerable list of nodes
 * @param {String|DomNode|NodeList} cont 
 * @private
*/
dojo.html._setNodeContent=function(node, cont){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes !DOCTYPE and title elements from the html string.<br>
 *	 <br>
 *	 khtml is picky about dom faults, you can't attach a style or &amp;lt;title&amp;gt; node as child of body<br>
 *	 must go into head, so we need to cut out those tags<br>
 * </blockquote>
 * @param {String} cont An html string for insertion into the dom
 * @private
 * @returns {String} -
*/
dojo.html._secureForInnerHtml=function(cont){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes all child nodes from the given node<br>
 * </blockquote>
 * @param {DOMNode} node the parent element
 * @private
*/
dojo.html._emptyNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides a configurable, extensible object to wrap the setting on content on a node<br>
 *	 call the set() method to actually set the content..<br>
 * </blockquote>
 * @param {Object} params 
 * @param {String|DomNode} node 
*/
dojo.html._ContentSetter=function(params, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides a configurable, extensible object to wrap the setting on content on a node<br>
 *	 call the set() method to actually set the content..<br>
 * </blockquote>
 * @class
 * @param {Object} params 
 * @param {String|DomNode} node 
 * @returns {dojo.html._ContentSetter} new instance
*/
dojo.html._ContentSetter=function(params, node){};
/**
 * @memberOf dojo.html._ContentSetter
*/
dojo.html._ContentSetter.prototype.tearDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the content on the node<br>
 * </blockquote>
 * @memberOf dojo.html._ContentSetter
*/
dojo.html._ContentSetter.prototype.setContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 front-end to the set-content sequence<br>
 * </blockquote>
 * @param {String|DomNode|NodeList} [cont] An html string, node or enumerable list of nodes for insertion into the dom
 * If not provided, the object's content property will be used
 * @param {Object} [params] 
 * @memberOf dojo.html._ContentSetter
*/
dojo.html._ContentSetter.prototype.set=function(cont, params){};
/**
 * @memberOf dojo.html._ContentSetter
*/
dojo.html._ContentSetter.prototype.onEnd=function(){};
/**
 * @param {mixed} err 
 * @memberOf dojo.html._ContentSetter
*/
dojo.html._ContentSetter.prototype.onContentError=function(err){};
/**
 * @memberOf dojo.html._ContentSetter
*/
dojo.html._ContentSetter.prototype.onBegin=function(){};
/**
 * @memberOf dojo.html._ContentSetter
*/
dojo.html._ContentSetter.prototype.empty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 runs the dojo parser over the node contents, storing any results in this.parseResults<br>
 *	 Any errors resulting from parsing are passed to _onError for handling<br>
 * </blockquote>
 * @private
 * @memberOf dojo.html._ContentSetter
*/
dojo.html._ContentSetter.prototype._parse=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 shows user the string that is returned by on[type]Error<br>
 *	 overide/implement on[type]Error and return your own string to customize<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} err 
 * @param {mixed} consoleText 
 * @private
 * @memberOf dojo.html._ContentSetter
*/
dojo.html._ContentSetter.prototype._onError=function(type, err, consoleText){};
/**
 * @param {mixed} params 
 * @private
 * @memberOf dojo.html._ContentSetter
*/
dojo.html._ContentSetter.prototype._mixin=function(params){};
/**
 * @namespace
*/
dojo.io.iframe={};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the URL that is loaded in an IFrame. The replace parameter<br>
 *	 indicates whether location.replace() should be used when<br>
 *	 changing the location of the iframe.<br>
 * </blockquote>
 * @param {DOMNode} iframe 
 * @param {String} src 
 * @param {Boolean} replace 
*/
dojo.io.iframe.setSrc=function(iframe, src, replace){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function that sends the request to the server.<br>
 *	 This transport can only process one send() request at a time, so if send() is called<br>
 *	 multiple times, it will queue up the calls and only process one at a time.<br>
 * </blockquote>
 * @param {dojo.io.iframe.__ioArgs} args 
*/
dojo.io.iframe.send=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the document object associated with the iframe DOM Node argument.<br>
 * </blockquote>
 * @param {DOMNode} iframeNode 
 * @returns {W3} -
*/
dojo.io.iframe.doc=function(iframeNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a hidden iframe in the page. Used mostly for IO<br>
 *	 transports.  You do not need to call this to start a<br>
 *	 dojo.io.iframe request. Just call send().<br>
 * </blockquote>
 * @param {String} fname The name of the iframe. Used for the name attribute on the
 * iframe.
 * @param {String} onloadstr A string of JavaScript that will be executed when the content
 * in the iframe loads.
 * @param {String} [uri] The value of the src attribute on the iframe element. If a
 * value is not given, then dojo/resources/blank.html will be<br>
 * used.<br>
*/
dojo.io.iframe.create=function(fname, onloadstr, uri){};
/**
 * @private
*/
dojo.io.iframe._iframeOnload=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal method used to fire the next request in the bind queue.<br>
 * </blockquote>
 * @private
*/
dojo.io.iframe._fireNextRequest=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 All the properties described in the dojo.__ioArgs type, apply<br>
 *	 to this type. The following additional properties are allowed<br>
 *	 for dojo.io.iframe.send():<br>
 * </blockquote>
 * @private
*/
dojo.io.iframe.__ioArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 All the properties described in the dojo.__ioArgs type, apply<br>
 *	 to this type. The following additional properties are allowed<br>
 *	 for dojo.io.iframe.send():<br>
 * </blockquote>
 * @class
 * @extends dojo.__IoArgs
 * @private
 * @returns {dojo.io.iframe.__ioArgs} new instance
*/
dojo.io.iframe.__ioArgs=function(){};
/**
 * @namespace
*/
dojo.io.script={};
/**
 * <b>Summary:</b><blockquote>
 *	 Function that sends the request to the server.<br>
 *	 This transport can only process one send() request at a time, so if send() is called<br>
 *	 multiple times, it will queue up the calls and only process one at a time.<br>
 * </blockquote>
 * @class
 * @returns {dojo.io.iframe.send} new instance
*/
dojo.io.iframe.send=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal method used to fire the next request in the bind queue.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojo.io.iframe._fireNextRequest} new instance
*/
dojo.io.iframe._fireNextRequest=function(){};
/**
 * @class
 * @private
 * @returns {dojo.io.iframe._iframeOnload} new instance
*/
dojo.io.iframe._iframeOnload=function(){};
/**
 * @namespace
 * @private
*/
dojo.io.iframe._iframeOnload._currentDfd={};
/**
 * <b>Summary:</b><blockquote>
 *	 removes the script element with the given id, from the given frameDocument.<br>
 *	 If no frameDocument is passed, the current document is used.<br>
 * </blockquote>
 * @param {String} id 
 * @param {Document} [frameDocument] 
*/
dojo.io.script.remove=function(id, frameDocument){};
/**
 * <b>Summary:</b><blockquote>
 *	 sends a get request using a dynamically created script tag.<br>
 * </blockquote>
 * @param {dojo.io.script.__ioArgs} args 
*/
dojo.io.script.get=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a new &amp;lt;script&amp;gt; tag pointing to the specified URL and<br>
 *	 adds it to the document.<br>
 * </blockquote>
 * Attaches the script element to the DOM.	 Use this method if you<br>
 * just want to attach a script to the DOM and do not care when or<br>
 * if it loads.
 * @param {String} id 
 * @param {String} url 
 * @param {Document} [frameDocument] 
*/
dojo.io.script.attach=function(id, url, frameDocument){};
/**
 * <b>Summary:</b><blockquote>
 *	 inflight check function to see if dfd is still valid.<br>
 * </blockquote>
 * @param {Deferred} dfd 
 * @private
*/
dojo.io.script._validCheck=function(dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 inflight function to handle a completed response.<br>
 * </blockquote>
 * @param {Deferred} dfd 
 * @private
*/
dojo.io.script._resHandle=function(dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets up a Deferred object for an IO request.<br>
 * </blockquote>
 * @param {Object} args 
 * @private
 * @returns {dojo.Deferred} -
*/
dojo.io.script._makeScriptDeferred=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 generic handler for jsonp callback. A pointer to this function<br>
 *	 is used for all jsonp callbacks.  NOTE: the &amp;quot;this&amp;quot; in this<br>
 *	 function will be the Deferred object that represents the script<br>
 *	 request.<br>
 * </blockquote>
 * @param {JSON} json Object
 * @private
*/
dojo.io.script._jsonpCallback=function(json){};
/**
 * <b>Summary:</b><blockquote>
 *	 inflight check function to see if IO finished.<br>
 * </blockquote>
 * @param {Deferred} dfd 
 * @private
*/
dojo.io.script._ioCheck=function(dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 okHandler function for dojo._ioSetArgs call.<br>
 * </blockquote>
 * @param {Deferred} dfd 
 * @private
*/
dojo.io.script._deferredOk=function(dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 errHandler function for dojo._ioSetArgs call.<br>
 * </blockquote>
 * @param {Error} error 
 * @param {Deferred} dfd 
 * @private
*/
dojo.io.script._deferredError=function(error, dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 canceller function for dojo._ioSetArgs call.<br>
 * </blockquote>
 * @param {Deferred} dfd 
 * @private
*/
dojo.io.script._deferredCancel=function(dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 A method that can be overridden by other modules<br>
 *	 to control when the script attachment occurs.<br>
 * </blockquote>
 * @param {Object} ioArgs 
 * @private
*/
dojo.io.script._canAttach=function(ioArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets up an entry in the deadScripts array.<br>
 * </blockquote>
 * @param {Object} ioArgs 
 * @private
*/
dojo.io.script._addDeadScript=function(ioArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 All the properties described in the dojo.__ioArgs type, apply to this<br>
 *	 type as well, EXCEPT &amp;quot;handleAs&amp;quot;. It is not applicable to<br>
 *	 dojo.io.script.get() calls, since it is implied by the usage of<br>
 *	 &amp;quot;jsonp&amp;quot; (response will be a JSONP call returning JSON)<br>
 *	 or the response is pure JavaScript defined in<br>
 *	 the body of the script that was attached.<br>
 * </blockquote>
 * @private
*/
dojo.io.script.__ioArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 All the properties described in the dojo.__ioArgs type, apply to this<br>
 *	 type as well, EXCEPT &amp;quot;handleAs&amp;quot;. It is not applicable to<br>
 *	 dojo.io.script.get() calls, since it is implied by the usage of<br>
 *	 &amp;quot;jsonp&amp;quot; (response will be a JSONP call returning JSON)<br>
 *	 or the response is pure JavaScript defined in<br>
 *	 the body of the script that was attached.<br>
 * </blockquote>
 * @class
 * @extends dojo.__IoArgs
 * @private
 * @returns {dojo.io.script.__ioArgs} new instance
*/
dojo.io.script.__ioArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 generic handler for jsonp callback. A pointer to this function<br>
 *	 is used for all jsonp callbacks.  NOTE: the &amp;quot;this&amp;quot; in this<br>
 *	 function will be the Deferred object that represents the script<br>
 *	 request.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojo.io.script._jsonpCallback} new instance
*/
dojo.io.script._jsonpCallback=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks an event object for the pressed right button<br>
 * </blockquote>
 * @param {Event} e Event object to examine
 * @returns {Boolean} -
*/
dojo.mouseButtons.isRight=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks an event object for the pressed middle button<br>
 * </blockquote>
 * @param {Event} e Event object to examine
 * @returns {Boolean} -
*/
dojo.mouseButtons.isMiddle=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks an event object for the pressed left button<br>
 * </blockquote>
 * @param {Event} e Event object to examine
 * @returns {Boolean} -
*/
dojo.mouseButtons.isLeft=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks an event object for a pressed button<br>
 * </blockquote>
 * @param {Event} e Event object to examine
 * @param {Number} button The button value (example: dojo.mouseButton.LEFT)
 * @returns {Boolean} -
*/
dojo.mouseButtons.isButton=function(e, button){};
/**
*/
dojo.query.NodeList=function(){};
/**
 * @class
 * @returns {query.NodeList} new instance
*/
query.NodeList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a class to node if not present, or removes if present.<br>
 *	 Pass a boolean condition if you want to explicitly add or remove.<br>
 * </blockquote>
 * @param {String} className the CSS class to add
 * @param {Boolean} [condition] If passed, true means to add the class, false means to remove.
 * @returns {dojo.NodeList} -
 * @memberOf query.NodeList
*/
query.NodeList.prototype.toggleClass=function(className, condition){};
/**
 * <b>Summary:</b><blockquote>
 *	 gets or sets the CSS property for every element in the NodeList<br>
 * </blockquote>
 * @param {String} property the CSS property to get/set, in JavaScript notation
 * (&quot;lineHieght&quot; instead of &quot;line-height&quot;)
 * @param {String} [value] optional. The value to set the property to
 * 
 * @returns {dojo.NodeList|Array} -If a value is passed, the return is this NodeList
 * @memberOf query.NodeList
*/
query.NodeList.prototype.style=function(property, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes the specified class from every node in the list<br>
 * </blockquote>
 * @param {String|Array} [className] An optional String class name to remove, or several space-separated
 * class names, or an array of class names. If omitted, all class names<br>
 * will be deleted.<br>
 * 
 * @returns {dojo.NodeList} -
 * @memberOf query.NodeList
*/
query.NodeList.prototype.removeClass=function(className){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a new list whose members match the passed query,<br>
 *	 assuming elements of the current NodeList as the root for<br>
 *	 each search.<br>
 * </blockquote>
 * @param {String} queryStr 
 * @returns {dojo.NodeList} -
 * @example
 * assume a DOM created by this markup:
 * 	&lt;div id="foo"&gt;
 * 		&lt;p&gt;
 * 			bacon is tasty, &lt;span&gt;dontcha think?&lt;/span&gt;
 * 		&lt;/p&gt;
 * 	&lt;/div&gt;
 * 	&lt;div id="bar"&gt;
 * 		&lt;p&gt;great comedians may not be funny &lt;span&gt;in person&lt;/span&gt;&lt;/p&gt;
 * 	&lt;/div&gt;
 * If we are presented with the following definition for a NodeList:
 * 	var l = new dojo.NodeList(dojo.byId("foo"), dojo.byId("bar"));
 * it's possible to find all span elements under paragraphs
 * contained by these elements with this sub-query:
 * 	var spans = l.query("p span");
 * @memberOf query.NodeList
*/
query.NodeList.prototype.query=function(queryStr){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns border-box objects (x/y/w/h) of all elements in a node list<br>
 *	 as an Array (*not* a NodeList). Acts like `dojo.position`, though<br>
 *	 assumes the node passed is each node in this list.<br>
 * </blockquote>
 * @returns {Array} -
 * @memberOf query.NodeList
*/
query.NodeList.prototype.position=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 places elements of this node list relative to the first element matched<br>
 *	 by queryOrNode. Returns the original NodeList. See: `dojo.place`<br>
 * </blockquote>
 * @param {String||Node} queryOrNode may be a string representing any valid CSS3 selector or a DOM node.
 * In the selector case, only the first matching element will be used<br>
 * for relative positioning.
 * @param {String} position can be one of:
 * 	&quot;last&quot; (default)<br>
 * 	&quot;first&quot;<br>
 * 	&quot;before&quot;<br>
 * 	&quot;after&quot;<br>
 * 	&quot;only&quot;<br>
 * 	&quot;replace&quot;<br>
 * or an offset in the childNodes property
 * @returns {dojo.NodeList} -
 * @memberOf query.NodeList
*/
query.NodeList.prototype.place=function(queryOrNode, position){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes elements in this list that match the filter<br>
 *	 from their parents and returns them as a new NodeList.<br>
 * </blockquote>
 * @param {String} [filter] CSS selector like &quot;.foo&quot; or &quot;div &gt; span&quot;
 * 
 * @returns {dojo.NodeList} -
 * @memberOf query.NodeList
*/
query.NodeList.prototype.orphan=function(filter){};
/**
 * <b>Summary:</b><blockquote>
 *	 &amp;quot;masks&amp;quot; the built-in javascript filter() method (supported<br>
 *	 in Dojo via `dojo.filter`) to support passing a simple<br>
 *	 string filter in addition to supporting filtering function<br>
 *	 objects.<br>
 * </blockquote>
 * @param {String|Function} filter If a string, a CSS rule like &quot;.thinger&quot; or &quot;div &gt; span&quot;.
 * @returns {dojo.NodeList} -
 * @example
 * "regular" JS filter syntax as exposed in dojo.filter:
 * 	dojo.query("*").filter(function(item){
 * 		// highlight every paragraph
 * 		return (item.nodeName == "p");
 * 	}).style("backgroundColor", "yellow");
 * @example
 * the same filtering using a CSS selector
 * 	dojo.query("*").filter("p").styles("backgroundColor", "yellow");
 * @memberOf query.NodeList
*/
query.NodeList.prototype.filter=function(filter){};
/**
 * <b>Summary:</b><blockquote>
 *	 clears all content from each node in the list. Effectively<br>
 *	 equivalent to removing all child nodes from every item in<br>
 *	 the list.<br>
 * </blockquote>
 * @returns {dojo.NodeList} -
 * @memberOf query.NodeList
*/
query.NodeList.prototype.empty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 gets or sets the DOM attribute for every element in the<br>
 *	 NodeList. See also `dojo.attr`<br>
 * </blockquote>
 * @param {String} property the attribute to get/set
 * @param {String} [value] optional. The value to set the property to
 * 
 * @returns {dojo.NodeList|Array} -If a value is passed, the return is this NodeList
 * @example
 * Make all nodes with a particular class focusable:
 * 	dojo.query(".focusable").attr("tabIndex", -1);
 * @example
 * Disable a group of buttons:
 * 	dojo.query("button.group").attr("disabled", true);
 * @example
 * innerHTML can be assigned or retrieved as well:
 * 	// get the innerHTML (as an array) for each list item
 * 	var ih = dojo.query("li.replaceable").attr("innerHTML");
 * @memberOf query.NodeList
*/
query.NodeList.prototype.attr=function(property, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 places any/all elements in queryOrListOrNode at a<br>
 *	 position relative to the first element in this list.<br>
 *	 Returns a dojo.NodeList of the adopted elements.<br>
 * </blockquote>
 * @param {String||Array||DomNode} queryOrListOrNode a DOM node or a query string or a query result.
 * Represents the nodes to be adopted relative to the<br>
 * first element of this NodeList.
 * @param {String} [position] can be one of:
 * 	&quot;last&quot; (default)<br>
 * 	&quot;first&quot;<br>
 * 	&quot;before&quot;<br>
 * 	&quot;after&quot;<br>
 * 	&quot;only&quot;<br>
 * 	&quot;replace&quot;<br>
 * or an offset in the childNodes property
 * @returns {dojo.NodeList} -
 * @memberOf query.NodeList
*/
query.NodeList.prototype.adopt=function(queryOrListOrNode, position){};
/**
 * <b>Summary:</b><blockquote>
 *	 add a node, NodeList or some HTML as a string to every item in the<br>
 *	 list.  Returns the original list.<br>
 * </blockquote>
 * a copy of the HTML content is added to each item in the<br>
 * list, with an optional position argument. If no position<br>
 * argument is provided, the content is appended to the end of<br>
 * each item.
 * @param {String||DomNode||Object||dojo.NodeList} content DOM node, HTML in string format, a NodeList or an Object. If a DOM node or
 * NodeList, the content will be cloned if the current NodeList has more than one<br>
 * element. Only the DOM nodes are cloned, no event handlers. If it is an Object,<br>
 * it should be an object with at &quot;template&quot; String property that has the HTML string<br>
 * to insert. If dojo.string has already been dojo.required, then dojo.string.substitute<br>
 * will be used on the &quot;template&quot; to generate the final HTML string. Other allowed<br>
 * properties on the object are: &quot;parse&quot; if the HTML<br>
 * string should be parsed for widgets (dojo.require(&quot;dojo.parser&quot;) to get that<br>
 * option to work), and &quot;templateFunc&quot; if a template function besides dojo.string.substitute<br>
 * should be used to transform the &quot;template&quot;.
 * @param {String||Integer} [position] can be one of:
 * 	&quot;last&quot;||&quot;end&quot; (default)<br>
 * 	&quot;first||&quot;start&quot;<br>
 * 	&quot;before&quot;<br>
 * 	&quot;after&quot;<br>
 * 	&quot;replace&quot; (replaces nodes in this NodeList with new content)<br>
 * 	&quot;only&quot; (removes other children of the nodes so new content is the only child)<br>
 * or an offset in the childNodes property
 * @returns {dojo.NodeList} -
 * @example
 * appends content to the end if the position is omitted
 * 	dojo.query("h3 &gt; p").addContent("hey there!");
 * @example
 * add something to the front of each element that has a
 * "thinger" property:
 * 	dojo.query("[thinger]").addContent("...", "first");
 * @example
 * adds a header before each element of the list
 * 	dojo.query(".note").addContent("&lt;h4&gt;NOTE:&lt;/h4&gt;", "before");
 * @example
 * add a clone of a DOM node to the end of every element in
 * the list, removing it from its existing parent.
 * 	dojo.query(".note").addContent(dojo.byId("foo"));
 * @example
 * Append nodes from a templatized string.
 * dojo.require("dojo.string");
 * dojo.query(".note").addContent({
 * template: '&lt;b&gt;${id}: &lt;/b&gt;&lt;span&gt;${name}&lt;/span&gt;',
 * id: "user332",
 * name: "Mr. Anderson"
 * });
 * @example
 * Append nodes from a templatized string that also has widgets parsed.
 * dojo.require("dojo.string");
 * dojo.require("dojo.parser");
 * var notes = dojo.query(".note").addContent({
 * template: '&lt;button dojoType="dijit.form.Button"&gt;${text}&lt;/button&gt;',
 * parse: true,
 * text: "Send"
 * });
 * @memberOf query.NodeList
*/
query.NodeList.prototype.addContent=function(content, position){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds the specified class to every node in the list<br>
 * </blockquote>
 * @param {String|Array} className A String class name to add, or several space-separated class names,
 * or an array of class names.
 * @returns {dojo.NodeList} -
 * @memberOf query.NodeList
*/
query.NodeList.prototype.addClass=function(className){};
/**
 * <b>Summary:</b><blockquote>
 *	 private utility to handle placing an array of nodes relative to another node.<br>
 * </blockquote>
 * Allows for cloning the nodes in the array, and for<br>
 * optionally parsing widgets, if ary._runParse is true.
 * @param {Array} ary 
 * @param {DOMNode} refNode 
 * @param {String} position 
 * @param {Boolean} useClone 
 * @private
 * @memberOf query.NodeList
*/
query.NodeList.prototype._place=function(ary, refNode, position, useClone){};
/**
 * <b>Summary:</b><blockquote>
 *	 normalizes data to an array of items to insert.<br>
 * </blockquote>
 * If content is an object, it can have special properties "template" and<br>
 * "parse". If "template" is defined, then the template value is run through<br>
 * dojo.string.substitute (if dojo.string.substitute has been dojo.required elsewhere),<br>
 * or if templateFunc is a function on the content, that function will be used to<br>
 * transform the template into a final string to be used for for passing to dojo._toDom.<br>
 * If content.parse is true, then it is remembered for later, for when the content<br>
 * nodes are inserted into the DOM. At that point, the nodes will be parsed for widgets<br>
 * (if dojo.parser has been dojo.required elsewhere).
 * @param {String||Element||Object||NodeList} content 
 * @param {DOMNode} [refNode] 
 * @private
 * @returns {Array} -
 * @memberOf query.NodeList
*/
query.NodeList.prototype._normalize=function(content, refNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 private utility to clone a node. Not very interesting in the vanilla<br>
 *	 dojo.NodeList case, but delegates could do interesting things like<br>
 *	 clone event handlers if that is derivable from the node.<br>
 * </blockquote>
 * @param {DOMNode} node 
 * @private
 * @memberOf query.NodeList
*/
query.NodeList.prototype._cloneNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 private method for inserting queried nodes into all nodes in this NodeList<br>
 *	 at different positions. Differs from NodeList.place because it will clone<br>
 *	 the nodes in this NodeList if the query matches more than one element.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojo.NodeList._placeMultiple} new instance
*/
dojo.NodeList._placeMultiple=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If a value is passed, allows seting the value property of form elements in this<br>
 *	 NodeList, or properly selecting/checking the right value for radio/checkbox/select<br>
 *	 elements. If no value is passed, the value of the first node in this NodeList<br>
 *	 is returned.<br>
 * </blockquote>
 * @class
 * @returns {dojo.NodeList.val} new instance
 * @example
 * assume a DOM created by this markup:
 * 	&lt;input type="text" value="foo"&gt;
 * 	&lt;select multiple&gt;
 * 		&lt;option value="red" selected&gt;Red&lt;/option&gt;
 * 		&lt;option value="blue"&gt;Blue&lt;/option&gt;
 * 		&lt;option value="yellow" selected&gt;Yellow&lt;/option&gt;
 * 	&lt;/select&gt;
 * This code gets and sets the values for the form fields above:
 * 	dojo.query('[type="text"]').val(); //gets value foo
 * 	dojo.query('[type="text"]').val("bar"); //sets the input's value to "bar"
 * 	dojo.query("select").val() //gets array value ["red", "yellow"]
 * 	dojo.query("select").val(["blue", "yellow"]) //Sets the blue and yellow options to selected.
*/
dojo.NodeList.val=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Rounds to the nearest value with the given number of decimal places, away from zero<br>
 * </blockquote>
 * Rounds to the nearest value with the given number of decimal places, away from zero if equal.<br>
 * Similar to Number.toFixed(), but compensates for browser quirks. Rounding can be done by<br>
 * fractional increments also, such as the nearest quarter.<br>
 * NOTE: Subject to floating point errors.  See dojox.math.round for experimental workaround.
 * @param {Number} value The number to round
 * @param {Number} [places] The number of decimal places where rounding takes place.  Defaults to 0 for whole rounding.
 * Must be non-negative.
 * @param {Number} [increment] Rounds next place to nearest value of increment/10.  10 by default.
 * @param {mixed} v 
 * @param {mixed} p 
 * @param {mixed} m 
 * @returns {Number} -
 * @example
 * &gt;&gt;&gt; dojo.number.round(-0.5)
 * -1
 * &gt;&gt;&gt; dojo.number.round(162.295, 2)
 * 162.29  // note floating point error.  Should be 162.3
 * &gt;&gt;&gt; dojo.number.round(10.71, 0, 2.5)
 * 10.75
*/
dojo.number.round=function(value, places, increment, v, p, m){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds the regular needed to parse a number<br>
 * </blockquote>
 * Returns regular expression with positive and negative match, group<br>
 * and decimal separators
 * @param {dojo.number.__RegexpOptions} [options] 
 * @returns {String} -
*/
dojo.number.regexp=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convert a properly formatted string to a primitive Number, using<br>
 *	 locale-specific settings.<br>
 * </blockquote>
 * Create a Number from a string using a known localized pattern.<br>
 * Formatting patterns are chosen appropriate to the locale<br>
 * and follow the syntax described by<br>
 * [unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)<br>
 * Note that literal characters in patterns are not supported.
 * @see reference <a href="http://www.unicode.org/reports/tr35/#Number_Format_Patterns)">http://www.unicode.org/reports/tr35/#Number_Format_Patterns)</a>
 * @param {String} expression A string representation of a Number
 * @param {dojo.number.__ParseOptions} [options] 
 * @returns {NaN|Number} -
*/
dojo.number.parse=function(expression, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format a Number as a String, using locale-specific settings<br>
 * </blockquote>
 * Create a string from a Number using a known localized pattern.<br>
 * Formatting patterns appropriate to the locale are chosen from the<br>
 * [Common Locale Data Repository](http://unicode.org/cldr) as well as the appropriate symbols and<br>
 * delimiters.<br>
 * If value is Infinity, -Infinity, or is not a valid JavaScript number, return null.
 * @see reference <a href="http://unicode.org/cldr)">http://unicode.org/cldr)</a>
 * @param {Number} value the number to be formatted
 * @param {dojo.number.__FormatOptions} [options] 
 * @returns {null|String} -
*/
dojo.number.format=function(value, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds a regular expression to match a real number in exponential<br>
 *	 notation<br>
 * </blockquote>
 * @param {dojo.number.__RealNumberRegexpFlags} [flags] 
 * @private
 * @returns {String} -
*/
dojo.number._realNumberRegexp=function(flags){};
/**
 * @param {Object} [options] 
 * @private
 * @returns {Object} -
*/
dojo.number._parseInfo=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds a regular expression that matches an integer<br>
 * </blockquote>
 * @param {dojo.number.__IntegerRegexpFlags} [flags] 
 * @private
 * @returns {String} -
*/
dojo.number._integerRegexp=function(flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Apply numeric pattern to absolute value using options. Gives no<br>
 *	 consideration to local customs.<br>
 * </blockquote>
 * @param {Number} value the number to be formatted, ignores sign
 * @param {String} pattern the number portion of a pattern (e.g. `#,##0.00`)
 * @param {dojo.number.__FormatAbsoluteOptions} [options] 
 * @private
*/
dojo.number._formatAbsolute=function(value, pattern, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Apply pattern to format value as a string using options. Gives no<br>
 *	 consideration to local customs.<br>
 * </blockquote>
 * @param {Number} value the number to be formatted.
 * @param {String} pattern a pattern string as described by
 * [unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
 * @param {dojo.number.__FormatOptions} [options] _applyPattern is usually called via `dojo.number.format()` which
 * populates an extra property in the options parameter, &quot;customs&quot;.<br>
 * The customs object specifies group and decimal parameters if set.
 * @private
*/
dojo.number._applyPattern=function(value, pattern, options){};
/**
 * @private
*/
dojo.number.__RegexpOptions=function(){};
/**
 * @private
*/
dojo.number.__RealNumberRegexpFlags=function(){};
/**
 * @private
*/
dojo.number.__ParseOptions=function(){};
/**
 * @private
*/
dojo.number.__IntegerRegexpFlags=function(){};
/**
 * @private
*/
dojo.number.__FormatOptions=function(){};
/**
 * @private
*/
dojo.number.__FormatAbsoluteOptions=function(){};
/**
 * @class
 * @private
 * @returns {dojo.number.__FormatOptions} new instance
*/
dojo.number.__FormatOptions=function(){};
/**
 * @class
 * @private
 * @returns {dojo.number.__FormatAbsoluteOptions} new instance
*/
dojo.number.__FormatAbsoluteOptions=function(){};
/**
 * @class
 * @private
 * @returns {dojo.number.__RegexpOptions} new instance
*/
dojo.number.__RegexpOptions=function(){};
/**
 * @class
 * @private
 * @returns {dojo.number.__ParseOptions} new instance
*/
dojo.number.__ParseOptions=function(){};
/**
 * @class
 * @private
 * @returns {dojo.number.__RealNumberRegexpFlags} new instance
*/
dojo.number.__RealNumberRegexpFlags=function(){};
/**
 * @class
 * @private
 * @returns {dojo.number.__IntegerRegexpFlags} new instance
*/
dojo.number.__IntegerRegexpFlags=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 private function to hold to a parent NodeList. end() to return the parent NodeList.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojo.NodeList._stash} new instance
 * @example
 * How to make a `dojo.NodeList` method that only returns the third node in
 * the dojo.NodeList but allows access to the original NodeList by using this._stash:
 * 	dojo.extend(dojo.NodeList, {
 * 		third: function(){
 * 			var newNodeList = dojo.NodeList(this[2]);
 * 			return newNodeList._stash(this);
 * 		}
 * 	});
 * 	// then see how _stash applies a sub-list, to be .end()'ed out of
 * 	dojo.query(".foo")
 * 		.third()
 * 			.addClass("thirdFoo")
 * 		.end()
 * 		// access to the orig .foo list
 * 		.removeClass("foo")
*/
dojo.NodeList._stash=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 can be used as AMD plugin to conditionally load new query engine<br>
 * </blockquote>
 * @param {mixed} id 
 * @param {mixed} parentRequire 
 * @param {mixed} loaded 
 * @param {mixed} config 
 * @example
 * 	define(["dojo/query!custom"], function(qsa){
 * 		// loaded selector/custom.js as engine
 * 		qsa("#foobar").forEach(...);
 * 	});
*/
dojo.query.load=function(id, parentRequire, loaded, config){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds group match to expression<br>
 * </blockquote>
 * @param {String} expression 
 * @param {Boolean} [nonCapture] If true, uses non-capturing match, otherwise matches are retained
 * by regular expression.
 * @returns {String} -
*/
dojo.regexp.group=function(expression, nonCapture){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds escape sequences for special characters in regular expressions<br>
 * </blockquote>
 * @param {String} str 
 * @param {String} [except] a String with special characters to be left unescaped
*/
dojo.regexp.escapeString=function(str, except){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds a regular expression that groups subexpressions<br>
 * </blockquote>
 * A utility function used by some of the RE generators. The<br>
 * subexpressions are constructed by the function, re, in the second<br>
 * parameter.  re builds one subexpression for each elem in the array<br>
 * a, in the first parameter. Returns a string for a regular<br>
 * expression that groups all the subexpressions.
 * @param {Object|Array} arr A single value or an array of values.
 * @param {Function} re A function. Takes one parameter and converts it to a regular
 * expression.
 * @param {Boolean} [nonCapture] If true, uses non-capturing match, otherwise matches are retained
 * by regular expression. Defaults to false
 * @returns {String} -
*/
dojo.regexp.buildGroupRE=function(arr, re, nonCapture){};
/**
 * <b>Summary:</b><blockquote>
 *	 Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use<br>
 *	 as a definition for the service<br>
 * </blockquote>
 * @param {object} args Takes a number of properties as kwArgs for defining the service.  It also
 * accepts a string.  When passed a string, it is treated as a url from<br>
 * which it should synchronously retrieve an smd file.  Otherwise it is a kwArgs<br>
 * object.  It accepts serviceUrl, to manually define a url for the rpc service<br>
 * allowing the rpc system to be used without an smd definition. strictArgChecks<br>
 * forces the system to verify that the # of arguments provided in a call<br>
 * matches those defined in the smd.  smdString allows a developer to pass<br>
 * a jsonString directly, which will be converted into an object or alternatively<br>
 * smdObject is accepts an smdObject directly.<br>
*/
dojo.rpc.RpcService=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generic JSONP service.  Minimally extends RpcService to allow<br>
 *	 easy definition of nearly any JSONP style service. Example<br>
 *	 SMD files exist in dojox.data<br>
 * </blockquote>
 * @param {mixed} args 
 * @param {mixed} requiredArgs 
*/
dojo.rpc.JsonpService=function(args, requiredArgs){};
/**
*/
dojo.rpc.JsonService=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generic JSONP service.  Minimally extends RpcService to allow<br>
 *	 easy definition of nearly any JSONP style service. Example<br>
 *	 SMD files exist in dojox.data<br>
 * </blockquote>
 * @class
 * @extends dojo.rpc.RpcService
 * @param {mixed} args 
 * @param {mixed} requiredArgs 
 * @returns {dojo.rpc.JsonpService} new instance
*/
dojo.rpc.JsonpService=function(args, requiredArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 create a JSONP req<br>
 *	 params: array<br>
 *	 The array of parameters for this request;<br>
 * </blockquote>
 * @param {mixed} parameters 
 * @memberOf dojo.rpc.JsonpService
*/
dojo.rpc.JsonpService.prototype.createRequest=function(parameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 JSONP bind method. Takes remote method, parameters,<br>
 *	 deferred, and a url, calls createRequest to make a JSON-RPC<br>
 *	 envelope and passes that off with bind.<br>
 * </blockquote>
 * @param {string} method The name of the method we are calling
 * @param {array} parameters The parameters we are passing off to the method
 * @param {deferred} deferredRequestHandler The Deferred object for this particular request
 * @param {mixed} url 
 * @memberOf dojo.rpc.JsonpService
*/
dojo.rpc.JsonpService.prototype.bind=function(method, parameters, deferredRequestHandler, url){};
/**
 * @class
 * @extends dojo.rpc.RpcService
 * @returns {dojo.rpc.JsonService} new instance
*/
dojo.rpc.JsonService=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 parse the result envelope and pass the results back to<br>
 *	 the callback function<br>
 * </blockquote>
 * @param {anything} obj Object Object containing envelope of data we recieve from the server
 * @memberOf dojo.rpc.JsonService
*/
dojo.rpc.JsonService.prototype.parseResults=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 create a JSON-RPC envelope for the request<br>
 * </blockquote>
 * @param {string} method The name of the method we are creating the requst for
 * @param {array} params The array of parameters for this request;
 * @memberOf dojo.rpc.JsonService
*/
dojo.rpc.JsonService.prototype.createRequest=function(method, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 call an arbitrary remote method without requiring it to be<br>
 *	 predefined with SMD<br>
 * </blockquote>
 * @param {string} method the name of the remote method you want to call.
 * @param {array} params array of parameters to pass to method
 * @memberOf dojo.rpc.JsonService
*/
dojo.rpc.JsonService.prototype.callRemote=function(method, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 JSON-RPC bind method. Takes remote method, parameters,<br>
 *	 deferred, and a url, calls createRequest to make a JSON-RPC<br>
 *	 envelope and passes that off with bind.<br>
 * </blockquote>
 * @param {string} method The name of the method we are calling
 * @param {array} parameters The parameters we are passing off to the method
 * @param {deferred} deferredRequestHandler The Deferred object for this particular request
 * @param {mixed} url 
 * @memberOf dojo.rpc.JsonService
*/
dojo.rpc.JsonService.prototype.bind=function(method, parameters, deferredRequestHandler, url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use<br>
 *	 as a definition for the service<br>
 * </blockquote>
 * @class
 * @param {object} args Takes a number of properties as kwArgs for defining the service.  It also
 * accepts a string.  When passed a string, it is treated as a url from<br>
 * which it should synchronously retrieve an smd file.  Otherwise it is a kwArgs<br>
 * object.  It accepts serviceUrl, to manually define a url for the rpc service<br>
 * allowing the rpc system to be used without an smd definition. strictArgChecks<br>
 * forces the system to verify that the # of arguments provided in a call<br>
 * matches those defined in the smd.  smdString allows a developer to pass<br>
 * a jsonString directly, which will be converted into an object or alternatively<br>
 * smdObject is accepts an smdObject directly.
 * @returns {dojo.rpc.RpcService} new instance
*/
dojo.rpc.RpcService=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 create callback that calls the Deferred's callback method<br>
 * </blockquote>
 * @param {dojo.Deferred} deferredRequestHandler Deferred The deferred object handling a request.
 * @memberOf dojo.rpc.RpcService
*/
dojo.rpc.RpcService.prototype.resultCallback=function(deferredRequestHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback method for reciept of a smd object.  Parse the smd<br>
 *	 and generate functions based on the description<br>
 * </blockquote>
 * @param {smd} object object defining this service.
 * @memberOf dojo.rpc.RpcService
*/
dojo.rpc.RpcService.prototype.processSmd=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 parse the results coming back from an rpc request.  this<br>
 *	 base implementation, just returns the full object<br>
 *	 subclasses should parse and only return the actual results<br>
 * </blockquote>
 * @param {Object} obj Object that is the return results from an rpc request
 * @memberOf dojo.rpc.RpcService
*/
dojo.rpc.RpcService.prototype.parseResults=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 generate the local bind methods for the remote object<br>
 * </blockquote>
 * @param {string} method The name of the method we are generating
 * @param {array} parameters the array of parameters for this call.
 * @param {string} url the service url for this call
 * @memberOf dojo.rpc.RpcService
*/
dojo.rpc.RpcService.prototype.generateMethod=function(method, parameters, url){};
/**
 * <b>Summary:</b><blockquote>
 *	 create callback that calls the Deferres errback method<br>
 * </blockquote>
 * @param {dojo.Deferred} deferredRequestHandler Deferred The deferred object handling a request.
 * @memberOf dojo.rpc.RpcService
*/
dojo.rpc.RpcService.prototype.errorCallback=function(deferredRequestHandler){};
/**
 * @namespace
*/
dojo.store.api={};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines methods signatures and intentionally leaves all the<br>
 *	 methods unimplemented.  For more information on the dojo.store APIs,<br>
 *	 please visit: http://dojotoolkit.org/reference-guide/dojo/store.html<br>
 *	 Every method and property is optional, and is only needed if the functionality<br>
 *	 it provides is required.<br>
 *	 Every method may return a promise for the specified return value if the<br>
 *	 execution of the operation is asynchronous (except<br>
 *	 for query() which already defines an async return value).<br>
 * </blockquote>
 * @see reference <a href="http://dojotoolkit.org/reference-guide/dojo/store.html">http://dojotoolkit.org/reference-guide/dojo/store.html</a>
*/
dojo.store.api.Store=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract API that data provider implementations conform to.<br>
 *	 This file defines methods signatures and intentionally leaves all the<br>
 *	 methods unimplemented.  For more information on the dojo.store APIs,<br>
 *	 please visit: http://dojotoolkit.org/reference-guide/dojo/store.html<br>
 *	 Every method and property is optional, and is only needed if the functionality<br>
 *	 it provides is required.<br>
 *	 Every method may return a promise for the specified return value if the<br>
 *	 execution of the operation is asynchronous (except<br>
 *	 for query() which already defines an async return value).<br>
 * </blockquote>
 * @see reference <a href="http://dojotoolkit.org/reference-guide/dojo/store.html">http://dojotoolkit.org/reference-guide/dojo/store.html</a>
 * @class
 * @returns {dojo.store.api.Store} new instance
*/
dojo.store.api.Store=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Starts a new transaction.<br>
 *	 Note that a store user might not call transaction() prior to using put,<br>
 *	 delete, etc. in which case these operations effectively could be thought of<br>
 *	 as &amp;quot;auto-commit&amp;quot; style actions.<br>
 * </blockquote>
 * @memberOf dojo.store.api.Store
*/
dojo.store.api.Store.prototype.transaction=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deletes an object by its identity<br>
 * </blockquote>
 * @param {Number} id The identity to use to delete the object
 * @memberOf dojo.store.api.Store
*/
dojo.store.api.Store.prototype.remove=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 If the store can be queried locally (on the client side in JS), this defines<br>
 *	 the query engine to use for querying the data store.<br>
 *	 This takes a query and query options and returns a function that can execute<br>
 *	 the provided query on a JavaScript array. The queryEngine may be replace to<br>
 *	 provide more sophisticated querying capabilities. For example:<br>
 *	  var query = store.queryEngine({foo:&amp;quot;bar&amp;quot;}, {count:10});<br>
 *	  query(someArray) -&amp;gt; filtered array<br>
 *	 The returned query function may have a &amp;quot;matches&amp;quot; property that can be<br>
 *	 used to determine if an object matches the query. For example:<br>
 *	  query.matches({id:&amp;quot;some-object&amp;quot;, foo:&amp;quot;bar&amp;quot;}) -&amp;gt; true<br>
 *	  query.matches({id:&amp;quot;some-object&amp;quot;, foo:&amp;quot;something else&amp;quot;}) -&amp;gt; false<br>
 * </blockquote>
 * @memberOf dojo.store.api.Store
*/
dojo.store.api.Store.prototype.queryEngine=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Queries the store for objects. This does not alter the store, but returns a<br>
 *	 set of data from the store.<br>
 * </blockquote>
 * @param {String|Object|Function} query The query to use for retrieving objects from the store.
 * @param {dojo.store.api.Store.QueryOptions} options The optional arguments to apply to the resultset.
 * @example
 * Given the following store:
 * 
 * ...find all items where "prime" is true:
 * 
 * 	store.query({ prime: true }).forEach(function(object){
 * 		// handle each object
 * 	});
 * @memberOf dojo.store.api.Store
*/
dojo.store.api.Store.prototype.query=function(query, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stores an object<br>
 * </blockquote>
 * @param {Object} object The object to store.
 * @param {dojo.store.api.Store.PutDirectives} [directives] Additional directives for storing objects.
 * @memberOf dojo.store.api.Store
*/
dojo.store.api.Store.prototype.put=function(object, directives){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns any metadata about the object. This may include attribution,<br>
 *	 cache directives, history, or version information.<br>
 * </blockquote>
 * @param {Object} object The object to return metadata for.
 * @memberOf dojo.store.api.Store
*/
dojo.store.api.Store.prototype.getMetadata=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object's identity<br>
 * </blockquote>
 * @param {Object} object The object to get the identity from
 * @memberOf dojo.store.api.Store
*/
dojo.store.api.Store.prototype.getIdentity=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves the children of an object.<br>
 * </blockquote>
 * @param {Object} parent The object to find the children of.
 * @param {dojo.store.api.Store.QueryOptions} [options] Additional options to apply to the retrieval of the children.
 * @memberOf dojo.store.api.Store
*/
dojo.store.api.Store.prototype.getChildren=function(parent, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves an object by its identity<br>
 * </blockquote>
 * @param {Number} id The identity to use to lookup the object
 * @memberOf dojo.store.api.Store
*/
dojo.store.api.Store.prototype.get=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates an object, throws an error if the object already exists<br>
 * </blockquote>
 * @param {Object} object The object to store.
 * @param {dojo.store.api.Store.PutDirectives} [directives] Additional directives for creating objects.
 * @memberOf dojo.store.api.Store
*/
dojo.store.api.Store.prototype.add=function(object, directives){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an object returned from transaction() calls that represents the current<br>
 *	 transaction.<br>
 * </blockquote>
*/
dojo.store.api.Store.Transaction=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an object returned from query() calls that provides access to the results<br>
 *	 of a query. Queries may be executed asynchronously.<br>
 * </blockquote>
*/
dojo.store.api.Store.QueryResults=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an object returned from query() calls that provides access to the results<br>
 *	 of a query. Queries may be executed asynchronously.<br>
 * </blockquote>
 * @class
 * @returns {dojo.store.api.Store.QueryResults} new instance
*/
dojo.store.api.Store.QueryResults=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This registers a callback for when the query is complete, if the query is asynchronous.<br>
 *	 This is an optional method, and may not be present for synchronous queries.<br>
 * </blockquote>
 * @param {This} callback is called when the query is completed successfully, and is passed a single argument
 * that is an array representing the query results.
 * @param {This} errorHandler is called if the query failed, and is passed a single argument that is the error
 * for the failure.
 * @memberOf dojo.store.api.Store.QueryResults
*/
dojo.store.api.Store.QueryResults.prototype.then=function(callback, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 This registers a callback for notification of when data is modified in the query results.<br>
 *	 This is an optional method, and is usually provided by dojo.store.Observable.<br>
 * </blockquote>
 * @param {Function} listener The listener function is called when objects in the query results are modified
 * to affect the query result. The listener function is called with the following<br>
 * arguments:<br>
 *  listener(object, removedFrom, insertedInto);<br>
 * * The object parameter indicates the object that was create, modified, or deleted.<br>
 * * The removedFrom parameter indicates the index in the result array where<br>
 * the object used to be. If the value is -1, then the object is an addition to<br>
 * this result set (due to a new object being created, or changed such that it<br>
 * is a part of the result set).<br>
 * * The insertedInto parameter indicates the index in the result array where<br>
 * the object should be now. If the value is -1, then the object is a removal<br>
 * from this result set (due to an object being deleted, or changed such that it<br>
 * is not a part of the result set).
 * @param {This} includeAllUpdates indicates whether or not to include object updates that do not affect
 * the inclusion or order of the object in the query results. By default this is false,<br>
 * which means that if any object is updated in such a way that it remains<br>
 * in the result set and it's position in result sets is not affected, then the listener<br>
 * will not be fired.
 * @memberOf dojo.store.api.Store.QueryResults
*/
dojo.store.api.Store.QueryResults.prototype.observe=function(listener, includeAllUpdates){};
/**
 * <b>Summary:</b><blockquote>
 *	 Maps the query results, based on<br>
 *	 https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map.<br>
 *	 Note that this may executed asynchronously. The callback may be called<br>
 *	 after this function returns.<br>
 * </blockquote>
 * @see reference <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map.">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map.</a>
 * @param {Function} callback that is called for each object in the query results
 * @param {The} thisObject object to use as |this| in the callback.
 * @memberOf dojo.store.api.Store.QueryResults
*/
dojo.store.api.Store.QueryResults.prototype.map=function(callback, thisObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Iterates over the query results, based on<br>
 *	 https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach.<br>
 *	 Note that this may executed asynchronously. The callback may be called<br>
 *	 after this function returns.<br>
 * </blockquote>
 * @see reference <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach.">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach.</a>
 * @param {Function} callback that is called for each object in the query results
 * @param {The} thisObject object to use as |this| in the callback.
 * @memberOf dojo.store.api.Store.QueryResults
*/
dojo.store.api.Store.QueryResults.prototype.forEach=function(callback, thisObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Filters the query results, based on<br>
 *	 https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter.<br>
 *	 Note that this may executed asynchronously. The callback may be called<br>
 *	 after this function returns.<br>
 * </blockquote>
 * @see reference <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter.">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter.</a>
 * @param {Function} callback that is called for each object in the query results
 * @param {The} thisObject object to use as |this| in the callback.
 * @memberOf dojo.store.api.Store.QueryResults
*/
dojo.store.api.Store.QueryResults.prototype.filter=function(callback, thisObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an object returned from transaction() calls that represents the current<br>
 *	 transaction.<br>
 * </blockquote>
 * @class
 * @returns {dojo.store.api.Store.Transaction} new instance
*/
dojo.store.api.Store.Transaction=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Commits the transaction. This may throw an error if it fails. Of if the operation<br>
 *	 is asynchronous, it may return a promise that represents the eventual success<br>
 *	 or failure of the commit.<br>
 * </blockquote>
 * @memberOf dojo.store.api.Store.Transaction
*/
dojo.store.api.Store.Transaction.prototype.commit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Aborts the transaction. This may throw an error if it fails. Of if the operation<br>
 *	 is asynchronous, it may return a promise that represents the eventual success<br>
 *	 or failure of the abort.<br>
 * </blockquote>
 * @param {mixed} callback 
 * @param {mixed} thisObject 
 * @memberOf dojo.store.api.Store.Transaction
*/
dojo.store.api.Store.Transaction.prototype.abort=function(callback, thisObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 These are additional options for how caching is handled.<br>
 * </blockquote>
 * @private
*/
dojo.store.__CacheArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a basic in-memory object store. It implements dojo.store.api.Store.<br>
 * </blockquote>
 * @param {dojo.store.Memory} options This provides any configuration information that will be mixed into the store.
 * This should generally include the data property to provide the starting set of data.<br>
*/
dojo.store.Memory=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a basic store for RESTful communicating with a server through JSON<br>
 *	 formatted data. It implements dojo.store.api.Store.<br>
 * </blockquote>
 * @param {dojo.store.JsonRest} options This provides any configuration information that will be mixed into the store
*/
dojo.store.JsonRest=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an adapter for using Dojo Data stores with an object store consumer.<br>
 *	 You can provide a Dojo data store and use this adapter to interact with it through<br>
 *	 the Dojo object store API<br>
 * </blockquote>
 * @param {Object} [options] This provides any configuration information that will be mixed into the store,
 * including a reference to the Dojo data store under the property &quot;store&quot;.<br>
*/
dojo.store.DataStore=function(options){};
/**
 * @example
 * 	var master = new dojo.store.Memory(data);
 * 	var cacher = new dojo.store.Memory();
 * 	var store = new dojo.store.Cache(master, cacher);
*/
dojo.store.Cache=function(){};
/**
 * @namespace
*/
dojo.store.util={};
/**
 * <b>Summary:</b><blockquote>
 *	 These are additional options for how caching is handled.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojo.store.__CacheArgs} new instance
*/
dojo.store.__CacheArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a function that will be called for each item in a query response to determine<br>
 *	 if it is cacheable. If isLoaded returns true, the item will be cached, otherwise it<br>
 *	 will not be cached. If isLoaded is not provided, all items will be cached.<br>
 * </blockquote>
*/
dojo.store.__CacheArgs.isLoaded=function(){};
/**
 * @class
 * @returns {dojo.store.Cache} new instance
 * @example
 * 	var master = new dojo.store.Memory(data);
 * 	var cacher = new dojo.store.Memory();
 * 	var store = new dojo.store.Cache(master, cacher);
*/
dojo.store.Cache=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove the object with the specific id.<br>
 * </blockquote>
 * @param {Number} id The identifier for the object in question.
 * @param {dojo.store.__RemoveOptions} [directives] Any additional parameters needed to describe how the remove should be performed.
 * @memberOf dojo.store.Cache
*/
dojo.store.Cache.prototype.remove=function(id, directives){};
/**
 * <b>Summary:</b><blockquote>
 *	 Query the underlying master store and cache any results.<br>
 * </blockquote>
 * @param {Object|String} query The object or string containing query information. Dependent on the query engine used.
 * @param {dojo.store.util.SimpleQueryEngine.__queryOptions} [directives] An optional keyword arguments object with additional parameters describing the query.
 * @memberOf dojo.store.Cache
*/
dojo.store.Cache.prototype.query=function(query, directives){};
/**
 * <b>Summary:</b><blockquote>
 *	 Put the object into the store (similar to an HTTP PUT).<br>
 * </blockquote>
 * @param {Object} object The object to put to the store.
 * @param {dojo.store.__PutOptions} [directives] Any additional parameters needed to describe how the put should be performed.
 * @memberOf dojo.store.Cache
*/
dojo.store.Cache.prototype.put=function(object, directives){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the object with the specific id.<br>
 * </blockquote>
 * @param {Number} id The identifier for the object in question.
 * @param {dojo.store.__GetOptions} [directives] Any additional parameters needed to describe how the get should be performed.
 * @memberOf dojo.store.Cache
*/
dojo.store.Cache.prototype.get=function(id, directives){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove the object with the given id from the underlying caching store.<br>
 * </blockquote>
 * @param {Number} id The identifier for the object in question.
 * @memberOf dojo.store.Cache
*/
dojo.store.Cache.prototype.evict=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add the given object to the store.<br>
 * </blockquote>
 * @param {Object} object The object to add to the store.
 * @param {dojo.store.__AddOptions} [directives] Any additional parameters needed to describe how the add should be performed.
 * @memberOf dojo.store.Cache
*/
dojo.store.Cache.prototype.add=function(object, directives){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an adapter for using Dojo Data stores with an object store consumer.<br>
 *	 You can provide a Dojo data store and use this adapter to interact with it through<br>
 *	 the Dojo object store API<br>
 * </blockquote>
 * @class
 * @param {Object} [options] This provides any configuration information that will be mixed into the store,
 * including a reference to the Dojo data store under the property &quot;store&quot;.
 * @returns {dojo.store.DataStore} new instance
*/
dojo.store.DataStore=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deletes an object by its identity.<br>
 * </blockquote>
 * @param {Object} id The identity to use to delete the object
 * @memberOf dojo.store.DataStore
*/
dojo.store.DataStore.prototype.remove=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Queries the store for objects.<br>
 * </blockquote>
 * @param {Object} query The query to use for retrieving objects from the store
 * @param {Object} [options] Optional options object as used by the underlying dojo.data Store.
 * @memberOf dojo.store.DataStore
*/
dojo.store.DataStore.prototype.query=function(query, options){};
/**
 * @param {mixed} callback 
 * @private
 * @memberOf dojo.store.DataStore
*/
dojo.store.DataStore.prototype._objectConverter=function(callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a basic store for RESTful communicating with a server through JSON<br>
 *	 formatted data. It implements dojo.store.api.Store.<br>
 * </blockquote>
 * @class
 * @param {dojo.store.JsonRest} options This provides any configuration information that will be mixed into the store
 * @returns {dojo.store.JsonRest} new instance
*/
dojo.store.JsonRest=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deletes an object by its identity. This will trigger a DELETE request to the server.<br>
 * </blockquote>
 * @param {Number} id The identity to use to delete the object
 * @memberOf dojo.store.JsonRest
*/
dojo.store.JsonRest.prototype.remove=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Queries the store for objects. This will trigger a GET request to the server, with the<br>
 *	 query added as a query string.<br>
 * </blockquote>
 * @param {Object} query The query to use for retrieving objects from the store.
 * @param {dojo.store.api.Store.QueryOptions} [options] The optional arguments to apply to the resultset.
 * @memberOf dojo.store.JsonRest
*/
dojo.store.JsonRest.prototype.query=function(query, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stores an object. This will trigger a PUT request to the server<br>
 *	 if the object has an id, otherwise it will trigger a POST request.<br>
 * </blockquote>
 * @param {Object} object The object to store.
 * @param {dojo.store.api.Store.PutDirectives} [options] Additional metadata for storing the data.  Includes an &quot;id&quot;
 * property if a specific id is to be used.
 * @memberOf dojo.store.JsonRest
*/
dojo.store.JsonRest.prototype.put=function(object, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object's identity<br>
 * </blockquote>
 * @param {Object} object The object to get the identity from
 * @memberOf dojo.store.JsonRest
*/
dojo.store.JsonRest.prototype.getIdentity=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves an object by its identity. This will trigger a GET request to the server using<br>
 *	 the url `this.target + id`.<br>
 * </blockquote>
 * @param {Number} id The identity to use to lookup the object
 * @param {mixed} options 
 * @memberOf dojo.store.JsonRest
*/
dojo.store.JsonRest.prototype.get=function(id, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds an object. This will trigger a PUT request to the server<br>
 *	 if the object has an id, otherwise it will trigger a POST request.<br>
 * </blockquote>
 * @param {Object} object The object to store.
 * @param {dojo.store.api.Store.PutDirectives} [options] Additional metadata for storing the data.  Includes an &quot;id&quot;
 * property if a specific id is to be used.
 * @memberOf dojo.store.JsonRest
*/
dojo.store.JsonRest.prototype.add=function(object, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a basic in-memory object store. It implements dojo.store.api.Store.<br>
 * </blockquote>
 * @class
 * @param {dojo.store.Memory} options This provides any configuration information that will be mixed into the store.
 * This should generally include the data property to provide the starting set of data.
 * @returns {dojo.store.Memory} new instance
*/
dojo.store.Memory=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the given data as the source for this store, and indexes it<br>
 * </blockquote>
 * @param {Object[]} data An array of objects to use as the source of data.
 * @memberOf dojo.store.Memory
*/
dojo.store.Memory.prototype.setData=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deletes an object by its identity<br>
 * </blockquote>
 * @param {Number} id The identity to use to delete the object
 * @memberOf dojo.store.Memory
*/
dojo.store.Memory.prototype.remove=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Defines the query engine to use for querying the data store<br>
 * </blockquote>
*/
dojo.store.Memory.queryEngine=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Queries the store for objects.<br>
 * </blockquote>
 * @param {Object} query The query to use for retrieving objects from the store.
 * @param {dojo.store.api.Store.QueryOptions} [options] The optional arguments to apply to the resultset.
 * @example
 * Given the following store:
 * 
 * 	var store = new dojo.store.Memory({
 * 		data: [
 * 			{id: 1, name: "one", prime: false },
 * 			{id: 2, name: "two", even: true, prime: true},
 * 			{id: 3, name: "three", prime: true},
 * 			{id: 4, name: "four", even: true, prime: false},
 * 			{id: 5, name: "five", prime: true}
 * 		]
 * 	});
 * 
 * ...find all items where "prime" is true:
 * 
 * 	var results = store.query({ prime: true });
 * 
 * ...or find all items where "even" is true:
 * 
 * 	var results = store.query({ even: true });
 * @memberOf dojo.store.Memory
*/
dojo.store.Memory.prototype.query=function(query, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stores an object<br>
 * </blockquote>
 * @param {Object} object The object to store.
 * @param {dojo.store.api.Store.PutDirectives} [options] Additional metadata for storing the data.  Includes an &quot;id&quot;
 * property if a specific id is to be used.
 * @memberOf dojo.store.Memory
*/
dojo.store.Memory.prototype.put=function(object, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object's identity<br>
 * </blockquote>
 * @param {Object} object The object to get the identity from
 * @memberOf dojo.store.Memory
*/
dojo.store.Memory.prototype.getIdentity=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves an object by its identity<br>
 * </blockquote>
 * @param {Number} id The identity to use to lookup the object
 * @memberOf dojo.store.Memory
*/
dojo.store.Memory.prototype.get=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates an object, throws an error if the object already exists<br>
 * </blockquote>
 * @param {Object} object The object to store.
 * @param {dojo.store.api.Store.PutDirectives} [options] Additional metadata for storing the data.  Includes an &quot;id&quot;
 * property if a specific id is to be used.
 * @memberOf dojo.store.Memory
*/
dojo.store.Memory.prototype.add=function(object, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Trims whitespace from both sides of the string<br>
 * </blockquote>
 * This version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript).<br>
 * The short yet performant version of this function is dojo.trim(),<br>
 * which is part of Dojo base.  Uses String.prototype.trim instead, if available.
 * @see reference <a href="http://blog.stevenlevithan.com/archives/faster-trim-javascript).">http://blog.stevenlevithan.com/archives/faster-trim-javascript).</a>
 * @param {String} str String to be trimmed
 * 
 * @returns {String} -Returns the trimmed string
*/
dojo.string.trim=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 Performs parameterized substitutions on a string. Throws an<br>
 *	 exception if any parameter is unmatched.<br>
 * </blockquote>
 * @param {String} template a string with expressions in the form `${key}` to be replaced or
 * `${key:format}` which specifies a format function. keys are case-sensitive.
 * @param {Object|Array} map hash to search for substitutions
 * @param {Function} [transform] a function to process all parameters before substitution takes
 * place, e.g. mylib.encodeXML
 * @param {Object} [thisObject] where to look for optional format function; default to the global
 * namespace
 * @example
 * Substitutes two expressions in a string from an Array or Object
 * 	// returns "File 'foo.html' is not found in directory '/temp'."
 * 	// by providing substitution data in an Array
 * 	dojo.string.substitute(
 * 		"File '${0}' is not found in directory '${1}'.",
 * 		["foo.html","/temp"]
 * 	);
 * 
 * 	// also returns "File 'foo.html' is not found in directory '/temp'."
 * 	// but provides substitution data in an Object structure.  Dotted
 * 	// notation may be used to traverse the structure.
 * 	dojo.string.substitute(
 * 		"File '${name}' is not found in directory '${info.dir}'.",
 * 		{ name: "foo.html", info: { dir: "/temp" } }
 * 	);
 * @example
 * Use a transform function to modify the values:
 * 	// returns "file 'foo.html' is not found in directory '/temp'."
 * 	dojo.string.substitute(
 * 		"${0} is not found in ${1}.",
 * 		["foo.html","/temp"],
 * 		function(str){
 * 			// try to figure out the type
 * 			var prefix = (str.charAt(0) == "/") ? "directory": "file";
 * 			return prefix + " '" + str + "'";
 * 		}
 * 	);
 * @example
 * Use a formatter
 * 	// returns "thinger -- howdy"
 * 	dojo.string.substitute(
 * 		"${0:postfix}", ["thinger"], null, {
 * 			postfix: function(value, key){
 * 				return value + " -- howdy";
 * 			}
 * 		}
 * 	);
*/
dojo.string.substitute=function(template, map, transform, thisObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Efficiently replicate a string `n` times.<br>
 * </blockquote>
 * @param {String} str the string to replicate
 * @param {Integer} num number of times to replicate the string
 * @returns {String} -
*/
dojo.string.rep=function(str, num){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pad a string to guarantee that it is at least `size` length by<br>
 *	 filling with the character `ch` at either the start or end of the<br>
 *	 string. Pads at the start, by default.<br>
 * </blockquote>
 * @param {String} text the string to pad
 * @param {Integer} size length to provide padding
 * @param {String} [ch] character to pad, defaults to '0'
 * @param {Boolean} [end] adds padding at the end if true, otherwise pads at start
 * @returns {String} -
 * @example
 * 	// Fill the string to length 10 with "+" characters on the right.  Yields "Dojo++++++".
 * 	dojo.string.pad("Dojo", 10, "+", true);
*/
dojo.string.pad=function(text, size, ch, end){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register a listener to 'touchend'|'mouseup' for the given node<br>
 * </blockquote>
 * @param {Dom} node Target node to listen to
 * @param {Function} listener Callback function
*/
dojo.touch.release=function(node, listener){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register a listener to 'touchstart'|'mousedown' for the given node<br>
 * </blockquote>
 * @param {Dom} node Target node to listen to
 * @param {Function} listener Callback function
*/
dojo.touch.press=function(node, listener){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register a listener to 'touchmove'|'mousemove' for the given node<br>
 * </blockquote>
 * @param {Dom} node Target node to listen to
 * @param {Function} listener Callback function
*/
dojo.touch.move=function(node, listener){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register a listener to 'touchcancel'|'mouseleave' for the given node<br>
 * </blockquote>
 * @param {Dom} node Target node to listen to
 * @param {Function} listener Callback function
*/
dojo.touch.cancel=function(node, listener){};
/**
 * @namespace
*/
baseWindow.doc={};
/**
 * <b>Summary:</b><blockquote>
 *	 Scroll the passed node into view, if it is not already.<br>
 * </blockquote>
 * @param {DomNode} node 
 * @param {Object} [pos] 
 * @returns {nothing to do} -
*/
dojo.window.scrollIntoView=function(node, pos){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the dimensions and scroll position of the viewable area of a browser window<br>
 * </blockquote>
*/
dojo.window.getBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get window object associated with document doc<br>
 * </blockquote>
 * @param {mixed} doc 
 * @returns {Window} -
*/
dojo.window.get=function(doc){};
/**
 * @namespace
*/
dojox.analytics={};
/**
 * <b>Summary:</b><blockquote>
 *	 A Google-analytics helper, for post-onLoad inclusion of the tracker, and<br>
 *	 dynamic tracking during long-lived page cycles.<br>
 * </blockquote>
 * A small class object will allows for lazy-loading the Google Analytics API<br>
 * at any point during a page lifecycle. Most commonly, Google-Analytics is loaded<br>
 * via a synchronous script tag in the body, which causes `dojo.addOnLoad` to<br>
 * stall until the external API has been completely loaded. The Urchin helper<br>
 * will load the API on the fly, and provide a convenient API to use, wrapping<br>
 * Analytics for Ajaxy or single page applications.<br>
 * <br>
 * The class can be instantiated two ways: Programatically, by passing an<br>
 * `acct:` parameter, or via Markup / dojoType and defining a djConfig<br>
 * parameter `urchin:`<br>
 * <br>
 * IMPORTANT:<br>
 * This module will not work simultaneously with the core dojox.analytics<br>
 * package. If you need the ability to run Google Analytics AND your own local<br>
 * analytics system, you MUST include dojox.analytics._base BEFORE dojox.analytics.Urchin
 * @param {mixed} args 
 * @example
 * 	// create the tracker programatically:
 * 	var tracker = new dojox.analytics.Urchin({ acct:"UA-123456-7" });
 * @example
 * 	// define the urchin djConfig option:
 * 	var djConfig = { urchin: "UA-123456-7" };
 * 
 * 	// and in markup:
 * 	&lt;div dojoType="dojox.analytics.Urchin"&gt;&lt;/div&gt;
 * 	// or code:
 * 	new dojox.analytics.Urchin();
 * @example
 * 	// create and define all analytics with one tag.
 * 	&lt;div dojoType="dojox.analytics.Urchin" acct="UA-12345-67"&gt;&lt;/div&gt;
*/
dojox.analytics.Urchin=function(args){};
/**
 * @namespace
*/
dojox.analytics.plugins={};
/**
 * @namespace
*/
dojox={};
/**
 * <b>Summary:</b><blockquote>
 *	 Utilities to embed and communicate with Flash-based objects<br>
 * </blockquote>
 * The goal of dojox.flash is to make it easy to extend Flash's capabilities<br>
 * into an Ajax/DHTML environment.<br>
 * <br>
 * dojox.flash provides an easy object for interacting with the Flash plugin.<br>
 * This object provides methods to determine the current version of the Flash<br>
 * plugin (dojox.flash.info); write out the necessary markup to<br>
 * dynamically insert a Flash object into the page (dojox.flash.Embed; and<br>
 * do dynamic installation and upgrading of the current Flash plugin in<br>
 * use (dojox.flash.Install). If you want to call methods on the Flash object<br>
 * embedded into the page it is your responsibility to use Flash's ExternalInterface<br>
 * API and get a reference to the Flash object yourself.<br>
 * <br>
 * To use dojox.flash, you must first wait until Flash is finished loading<br>
 * and initializing before you attempt communication or interaction.<br>
 * To know when Flash is finished use dojo.connect:<br>
 * <br>
 * 	dojo.connect(dojox.flash, "loaded", myInstance, "myCallback");<br>
 * <br>
 * Then, while the page is still loading provide the file name:<br>
 * <br>
 * 	dojox.flash.setSwf(dojo.moduleUrl("dojox", "_storage/storage.swf"));<br>
 * <br>
 * If no SWF files are specified, then Flash is not initialized.<br>
 * <br>
 * Your Flash must use Flash's ExternalInterface to expose Flash methods and<br>
 * to call JavaScript.<br>
 * <br>
 * setSwf can take an optional 'visible' attribute to control whether<br>
 * the Flash object is visible or not on the page; the default is visible:<br>
 * <br>
 * 	dojox.flash.setSwf(dojo.moduleUrl("dojox", "_storage/storage.swf"),<br>
 * false);<br>
 * <br>
 * Once finished, you can query Flash version information:<br>
 * <br>
 * 	dojox.flash.info.version<br>
 * <br>
 * Or can communicate with Flash methods that were exposed:<br>
 * <br>
 * 	var f = dojox.flash.get();<br>
 * 	var results = f.sayHello("Some Message");<br>
 * <br>
 * Your Flash files should use DojoExternalInterface.as to register methods;<br>
 * this file wraps Flash's normal ExternalInterface but correct various<br>
 * serialization bugs that ExternalInterface has.<br>
 * <br>
 * Note that dojox.flash is not meant to be a generic Flash embedding<br>
 * mechanism; it is as generic as necessary to make Dojo Storage's<br>
 * Flash Storage Provider as clean and modular as possible. If you want<br>
 * a generic Flash embed mechanism see [SWFObject](http://blog.deconcept.com/swfobject/).<br>
 * <br>
 * Notes:<br>
 * Note that dojox.flash can currently only work with one Flash object<br>
 * on the page; it does not yet support multiple Flash objects on<br>
 * the same page.<br>
 * <br>
 * Your code can detect whether the Flash player is installing or having<br>
 * its version revved in two ways. First, if dojox.flash detects that<br>
 * Flash installation needs to occur, it sets dojox.flash.info.installing<br>
 * to true. Second, you can detect if installation is necessary with the<br>
 * following callback:<br>
 * <br>
 * 	dojo.connect(dojox.flash, "installing", myInstance, "myCallback");<br>
 * <br>
 * You can use this callback to delay further actions that might need Flash;<br>
 * when installation is finished the full page will be refreshed and the<br>
 * user will be placed back on your page with Flash installed.<br>
 * <br>
 * -------------------<br>
 * Todo/Known Issues<br>
 * -------------------<br>
 * <br>
 * * On Internet Explorer, after doing a basic install, the page is<br>
 * not refreshed or does not detect that Flash is now available. The way<br>
 * to fix this is to create a custom small Flash file that is pointed to<br>
 * during installation; when it is finished loading, it does a callback<br>
 * that says that Flash installation is complete on IE, and we can proceed<br>
 * to initialize the dojox.flash subsystem.<br>
 * * Things aren't super tested for sending complex objects to Flash<br>
 * methods, since Dojo Storage only needs strings<br>
 * <br>
 * Author- Brad Neuberg, http://codinginparadise.org
 * @see reference <a href="http://blog.deconcept.com/swfobject/).">http://blog.deconcept.com/swfobject/).</a>
*/
dojox.flash=function(){};
/**
 * @namespace
*/
dojox.xmpp={};
/**
 * @namespace
*/
dojox.xml={};
/**
 * @namespace
*/
dojox.wire={};
/**
 * @namespace
*/
dojox.widget={};
/**
 * @namespace
*/
dojox.validate={};
/**
 * @namespace
*/
dojox.uuid={};
/**
 * @namespace
*/
dojox.timing={};
/**
 * @namespace
*/
dojox.testing={};
/**
 * @namespace
*/
dojox.string={};
/**
 * @namespace
*/
dojox.store={};
/**
 * @namespace
*/
dojox.storage={};
/**
 * @namespace
*/
dojox.sql={};
/**
 * @namespace
*/
dojox.socket={};
/**
 * @namespace
*/
dojox.sketch={};
/**
 * @namespace
*/
dojox.secure={};
/**
 * @namespace
*/
dojox.rpc={};
/**
 * @namespace
*/
dojox.robot={};
/**
 * @namespace
*/
dojox.rails={};
/**
 * @namespace
*/
dojox.mvc={};
/**
 * @namespace
*/
dojox.mobile={};
/**
 * @namespace
*/
dojox.mdnd={};
/**
 * @namespace
*/
dojox.math={};
/**
 * @namespace
*/
dojox.layout={};
/**
 * @namespace
*/
dojox.lang={};
/**
 * @namespace
*/
dojox.jsonPath={};
/**
 * @namespace
*/
dojox.json={};
/**
 * @namespace
*/
dojox.io={};
/**
 * @namespace
*/
dojox.image={};
/**
 * @namespace
*/
dojox.html={};
/**
 * @namespace
*/
dojox.highlight={};
/**
 * @namespace
*/
dojox.help={};
/**
 * @namespace
*/
dojox.grid={};
/**
 * @namespace
*/
dojox.gfx3d={};
/**
 * @namespace
*/
dojox.gfx={};
/**
 * @namespace
*/
dojox.gesture={};
/**
 * @namespace
*/
dojox.geo={};
/**
 * @namespace
*/
dojox.gauges={};
/**
 * @namespace
*/
dojox.gantt={};
/**
 * @namespace
*/
dojox.fx={};
/**
 * @namespace
*/
dojox.form={};
/**
 * @namespace
*/
dojox.encoding={};
/**
 * @namespace
*/
dojox.embed={};
/**
 * @namespace
*/
dojox.editor={};
/**
 * @namespace
*/
dojox.dtl={};
/**
 * @namespace
*/
dojox.drawing={};
/**
 * @namespace
*/
dojox.dnd={};
/**
 * @namespace
*/
dojox.date={};
/**
 * @namespace
*/
dojox.data={};
/**
 * @namespace
*/
dojox.css3={};
/**
 * @namespace
*/
dojox.cometd={};
/**
 * @namespace
*/
dojox.color={};
/**
 * @namespace
*/
dojox.collections={};
/**
 * @namespace
*/
dojox.charting={};
/**
 * @namespace
*/
dojox.calc={};
/**
 * @namespace
*/
dojox.av={};
/**
 * @namespace
*/
dojox.atom={};
/**
 * @namespace
*/
dojox.app={};
/**
 * @namespace
*/
dojox.NodeList={};
/**
 * <b>Summary:</b><blockquote>
 *	 A Google-analytics helper, for post-onLoad inclusion of the tracker, and<br>
 *	 dynamic tracking during long-lived page cycles.<br>
 * </blockquote>
 * A small class object will allows for lazy-loading the Google Analytics API<br>
 * at any point during a page lifecycle. Most commonly, Google-Analytics is loaded<br>
 * via a synchronous script tag in the body, which causes `dojo.addOnLoad` to<br>
 * stall until the external API has been completely loaded. The Urchin helper<br>
 * will load the API on the fly, and provide a convenient API to use, wrapping<br>
 * Analytics for Ajaxy or single page applications.<br>
 * <br>
 * The class can be instantiated two ways: Programatically, by passing an<br>
 * `acct:` parameter, or via Markup / dojoType and defining a djConfig<br>
 * parameter `urchin:`<br>
 * <br>
 * IMPORTANT:<br>
 * This module will not work simultaneously with the core dojox.analytics<br>
 * package. If you need the ability to run Google Analytics AND your own local<br>
 * analytics system, you MUST include dojox.analytics._base BEFORE dojox.analytics.Urchin
 * @class
 * @param {mixed} args 
 * @returns {dojox.analytics.Urchin} new instance
 * @example
 * 	// create the tracker programatically:
 * 	var tracker = new dojox.analytics.Urchin({ acct:"UA-123456-7" });
 * @example
 * 	// define the urchin djConfig option:
 * 	var djConfig = { urchin: "UA-123456-7" };
 * 
 * 	// and in markup:
 * 	&lt;div dojoType="dojox.analytics.Urchin"&gt;&lt;/div&gt;
 * 	// or code:
 * 	new dojox.analytics.Urchin();
 * @example
 * 	// create and define all analytics with one tag.
 * 	&lt;div dojoType="dojox.analytics.Urchin" acct="UA-12345-67"&gt;&lt;/div&gt;
*/
dojox.analytics.Urchin=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A public API attached to this widget instance, allowing you<br>
 *	 Ajax-like notification of updates.<br>
 * </blockquote>
 * @param {string} url String A location to tell the tracker to track, eg: &quot;/my-ajaxy-endpoint&quot;
 * @example
 * Track clicks from a container of anchors and populate a `ContentPane`
 * 	// 'tracker' is our `Urchin` instance, pane is the `ContentPane` ref.
 * 	dojo.connect(container, "onclick", function(e){
 * 		var ref = dojo.attr(e.target, "href");
 * 		tracker.trackPageView(ref);
 * 		pane.attr("href", ref);
 * 	});
 * @memberOf dojox.analytics.Urchin
*/
dojox.analytics.Urchin.prototype.trackPageView=function(url){};
/**
 * <b>Summary:</b><blockquote>
 *	 initialize the tracker<br>
 * </blockquote>
 * @private
 * @memberOf dojox.analytics.Urchin
*/
dojox.analytics.Urchin.prototype._gotGA=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to fire when urchin is complete<br>
 * </blockquote>
 * This function is executed when the tracker variable is<br>
 * complete and initialized. The initial trackPageView (with<br>
 * no arguments) is called here as well, so remeber to call<br>
 * manually if overloading this method.
 * @example
 * Create an Urchin tracker that will track a specific page on init
 * after page load (or parsing, if parseOnLoad is true)
 * 	dojo.addOnLoad(function(){
 * 		new dojox.ananlytics.Urchin({
 * 			acct:"UA-12345-67",
 * 			GAonLoad: function(){
 * 				this.trackPageView("/custom-page");
 * 			}
 * 		});
 * 	});
 * @memberOf dojox.analytics.Urchin
*/
dojox.analytics.Urchin.prototype.GAonLoad=function(){};
/**
*/
dojox.app.view=function(){};
/**
 * @param {mixed} params 
 * @param {mixed} node 
*/
dojox.app.scene=function(params, node){};
/**
 * @param {mixed} args 
*/
dojox.app.animation=function(args){};
/**
 * @namespace
*/
dojox.app.module={};
/**
 * @class
 * @param {mixed} args 
 * @returns {dojox.app.animation} new instance
*/
dojox.app.animation=function(args){};
/**
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype.start=function(){};
/**
 * @param {mixed} node 
 * @param {mixed} config 
*/
dojox.app.animation.slide=function(node, config){};
/**
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype.play=function(){};
/**
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype.onAfterEnd=function(){};
/**
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype.initState=function(){};
/**
 * @param {Array} args 
*/
dojox.app.animation.groupedPlay=function(args){};
/**
 * @param {mixed} node 
 * @param {mixed} config 
*/
dojox.app.animation.flip=function(node, config){};
/**
 * @param {mixed} node 
 * @param {mixed} config 
*/
dojox.app.animation.fade=function(node, config){};
/**
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype.clear=function(){};
/**
 * @param {Array} args 
*/
dojox.app.animation.chainedPlay=function(args){};
/**
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype.beforeStart=function(){};
/**
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype.beforeClear=function(){};
/**
 * @param {mixed} state 
 * @private
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype._removeState=function(state){};
/**
 * @private
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype._onAfterEnd=function(){};
/**
 * @private
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype._beforeStart=function(){};
/**
 * @private
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype._beforeClear=function(){};
/**
 * @param {mixed} state 
 * @private
 * @memberOf dojox.app.animation
*/
dojox.app.animation.prototype._applyState=function(state){};
/**
 * @namespace
*/
dojox.app.animation.node={};
/**
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @param {mixed} params 
 * @param {mixed} node 
 * @returns {dojox.app.scene} new instance
*/
dojox.app.scene=function(params, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 transitions from the currently visible scene to the defined scene.<br>
 *	 it should determine what would be the best transition unless<br>
 *	 an override in opts tells it to use a specific transitioning methodology<br>
 *	 the transitionTo is a string in the form of [view]@[scene].  If<br>
 *	 view is left of, the current scene will be transitioned to the default<br>
 *	 view of the specified scene (eg @scene2), if the scene is left off<br>
 *	 the app controller will instruct the active scene to the view (eg view1).  If both<br>
 *	 are supplied (view1@scene2), then the application should transition to the scene,<br>
 *	 and instruct the scene to navigate to the view.<br>
 * </blockquote>
 * @param {mixed} transitionTo 
 * @param {mixed} opts 
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.transition=function(transitionTo, opts){};
/**
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.toString=function(){};
/**
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.startup=function(){};
/**
 * @param {mixed} childId 
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.splitChildRef=function(childId){};
/**
 * @param {mixed} changeSize 
 * @param {mixed} resultSize 
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.resize=function(changeSize, resultSize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the passed widget instance from this widget but does<br>
 *	 not destroy it.  You can also pass in an integer indicating<br>
 *	 the index within the container to remove<br>
 * </blockquote>
 * @param {mixed} widget 
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.removeChild=function(widget){};
/**
 * @param {mixed} childId 
 * @param {mixed} subIds 
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.loadChild=function(childId, subIds){};
/**
 * @param {DomNode} container parent node
 * @param {Object} dim {l, t, w, h} object specifying dimensions of container into which to place children
 * @param {Widget[]} children an array of Widgets or at least objects containing:
 * * domNode: pointer to DOM node to position<br>
 * * region or layoutAlign: position to place DOM node<br>
 * * resize(): (optional) method to set size of node<br>
 * * id: (optional) Id of widgets, referenced from resize object, below.
 * @param {String} [changedRegionId] If specified, the slider for the region with the specified id has been dragged, and thus
 * the region's height or width should be adjusted according to changedRegionSize
 * @param {Number} [changedRegionSize] See changedRegionId.
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.layoutChildren=function(container, dim, children, changedRegionId, changedRegionSize){};
/**
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.layout=function(){};
/**
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.getParent=function(){};
/**
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.getChildren=function(){};
/**
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.deactive=function(){};
/**
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.buildRendering=function(){};
/**
 * @param {mixed} widget 
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.addChild=function(widget){};
/**
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype.activate=function(){};
/**
 * @param {mixed} child 
 * @param {mixed} opts 
 * @private
 * @memberOf dojox.app.scene
*/
dojox.app.scene.prototype._setSelectedChildAttr=function(child, opts){};
/**
 * @class
 * @returns {dojox.app.view} new instance
*/
dojox.app.view=function(){};
/**
 * @memberOf dojox.app.view
*/
dojox.app.view.prototype.toString=function(){};
/**
 * @memberOf dojox.app.view
*/
dojox.app.view.prototype.getParent=function(){};
/**
 * @memberOf dojox.app.view
*/
dojox.app.view.prototype.deactivate=function(){};
/**
 * @memberOf dojox.app.view
*/
dojox.app.view.prototype.activate=function(){};
/**
 * @namespace
*/
dojox.atom.io={};
/**
 * <b>Summary:</b><blockquote>
 *	 This object implements a transport layer for working with ATOM feeds and ATOM publishing protocols.<br>
 * </blockquote>
 * This object implements a transport layer for working with ATOM feeds and ATOM publishing protocols.<br>
 * Specifically, it provides a mechanism by which feeds can be fetched and entries can be fetched, created<br>
 * deleted, and modified.  It also provides access to the introspection data.
 * @param {Boolean} sync 
 * @param {Boolean} preventCache 
*/
dojox.atom.io.Connection=function(sync, preventCache){};
/**
 * @namespace
*/
dojox.atom.io.model={};
/**
 * <b>Summary:</b><blockquote>
 *	 This object implements a transport layer for working with ATOM feeds and ATOM publishing protocols.<br>
 * </blockquote>
 * This object implements a transport layer for working with ATOM feeds and ATOM publishing protocols.<br>
 * Specifically, it provides a mechanism by which feeds can be fetched and entries can be fetched, created<br>
 * deleted, and modified.  It also provides access to the introspection data.
 * @class
 * @param {Boolean} sync 
 * @param {Boolean} preventCache 
 * @returns {dojox.atom.io.Connection} new instance
*/
dojox.atom.io.Connection=function(sync, preventCache){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to update a specific ATOM entry by putting the new changes via APP.<br>
 * </blockquote>
 * This function takes a specific dojox.atom.io.model.Entry object and pushes the<br>
 * changes back to the provider of the Entry.<br>
 * The entry MUST have a link tag with rel="edit" for this to work.
 * @param {Object} entry The dojox.atom.io.model.Entry object to update.
 * @param {Function} callback A function reference that will handle the results from the entry update.
 * The callback should accept two parameters:  The first is an Entry object, and the second is the URL of that Entry<br>
 * Either can be null, depending on the value of retrieveUpdated.
 * @param {mixed} errorCallback 
 * @param {boolean} retrieveUpdated A boolean flag denoting if the entry that was updated should then be
 * retrieved and returned to the caller via the callback.
 * @param {boolean} xmethod Whether to use POST for PUT/DELETE items and send the X-Method-Override header.
 * @param {Object} scope The scope to use for all callbacks.
 * @memberOf dojox.atom.io.Connection
*/
dojox.atom.io.Connection.prototype.updateEntry=function(entry, callback, errorCallback, retrieveUpdated, xmethod, scope){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to retrieve an introspection document from the given URL.<br>
 * </blockquote>
 * This function takes the URL for an ATOM item and feed and returns<br>
 * the introspection document.
 * @param {String} url The URL of the ATOM document to obtain the introspection document of.
 * @param {Function} callback A function reference that will handle the introspection document when it has been retrieved.
 * The callback should accept two parameters:  The introspection document object and the original complete DOM object.
 * @param {mixed} errorCallback 
 * @param {mixed} scope 
 * @memberOf dojox.atom.io.Connection
*/
dojox.atom.io.Connection.prototype.getService=function(url, callback, errorCallback, scope){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to obtain a s specific ATOM feed from a given ATOM Feed url.<br>
 * </blockquote>
 * This function takes the URL for a specific ATOM feed and returns<br>
 * the data from that feed to the caller through the use of a callback<br>
 * handler.
 * @param {String} url The URL of the ATOM feed to fetch.
 * @param {Function} callback A function reference that will handle the feed when it has been retrieved.
 * The callback should accept two parameters:  The feed object and the original complete DOM object.
 * @param {Function} errorCallback 
 * @param {Object} scope The scope to use for all callbacks.
 * @memberOf dojox.atom.io.Connection
*/
dojox.atom.io.Connection.prototype.getFeed=function(url, callback, errorCallback, scope){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to retrieve a single entry from an ATOM feed from the given URL.<br>
 * </blockquote>
 * This function takes the URL for an ATOM entry and returns the constructed dojox.atom.io.model.Entry object through<br>
 * the specified callback.
 * @param {String} url The URL of the ATOM Entry document to parse.
 * @param {Function} callback A function reference that will handle the Entry object obtained.
 * The callback should accept two parameters, the dojox.atom.io.model.Entry object and the original dom.
 * @param {mixed} errorCallback 
 * @param {mixed} scope 
 * @memberOf dojox.atom.io.Connection
*/
dojox.atom.io.Connection.prototype.getEntry=function(url, callback, errorCallback, scope){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to delete a specific ATOM entry via APP.<br>
 * </blockquote>
 * This function takes a specific dojox.atom.io.model.Entry object and calls for a delete on the<br>
 * service housing the ATOM Entry database.<br>
 * The entry MUST have a link tag with rel="edit" for this to work.
 * @param {Object} entry The dojox.atom.io.model.Entry object to delete.
 * @param {Function} callback A function reference that will handle the results from the entry delete.
 * The callback is called only if the delete is successful.
 * @param {mixed} errorCallback 
 * @param {mixed} xmethod 
 * @param {mixed} scope 
 * @memberOf dojox.atom.io.Connection
*/
dojox.atom.io.Connection.prototype.deleteEntry=function(entry, callback, errorCallback, xmethod, scope){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to add a new ATOM entry by posting the new entry via APP.<br>
 * </blockquote>
 * This function takes a specific dojox.atom.io.model.Entry object and pushes the<br>
 * changes back to the provider of the Entry.
 * @param {Object} entry The dojox.atom.io.model.Entry object to publish.
 * @param {mixed} url 
 * @param {Function} callback A function reference that will handle the results from the entry publish.
 * The callback should accept two parameters:   The first is an dojox.atom.io.model.Entry object, and the second is the location of the entry<br>
 * Either can be null, depending on the value of retrieveUpdated.
 * @param {mixed} errorCallback 
 * @param {boolean} retrieveEntry A boolean flag denoting if the entry that was created should then be
 * retrieved and returned to the caller via the callback.
 * @param {Object} scope The scope to use for all callbacks.
 * @memberOf dojox.atom.io.Connection
*/
dojox.atom.io.Connection.prototype.addEntry=function(entry, url, callback, errorCallback, retrieveEntry, scope){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal Function to retrieve an XML document and pass the results to a callback.<br>
 * </blockquote>
 * This internal function takes the URL for an XML document and and passes the<br>
 * parsed contents to a specified callback.
 * @param {String} url The URL of the XML document to retrieve
 * @param {mixed} nodeName 
 * @param {mixed} newNode 
 * @param {mixed} namespace 
 * @param {Function} callback A function reference that will handle the retrieved XML data.
 * The callback should accept one parameter, the DOM of the parsed XML document.
 * @param {mixed} errorCallback 
 * @param {mixed} scope 
 * @private
 * @memberOf dojox.atom.io.Connection
*/
dojox.atom.io.Connection.prototype._getXmlDoc=function(url, nodeName, newNode, namespace, callback, errorCallback, scope){};
/**
 * @namespace
*/
dojox.atom.widget={};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Workspace' types.<br>
 * </blockquote>
 * Class container for 'Workspace' types.
 * @param {mixed} title 
*/
dojox.atom.io.model.Workspace=function(title){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Feed' types.<br>
 * </blockquote>
 * Class container for 'Feed' types.<br>
 * <br>
 * <br>
 * builds a Service document.  each element of this, except for the namespace, is the href of<br>
 * a service that the server supports.  Some of the common services are:<br>
 * "create-entry" , "user-prefs" , "search-entries" , "edit-template" , "categories"
 * @param {mixed} href 
*/
dojox.atom.io.model.Service=function(href){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'person' types, such as Author, controbutors, and so on.<br>
 * </blockquote>
 * Class container for 'person' types, such as Author, controbutors, and so on.
 * @param {mixed} personType 
 * @param {mixed} name 
 * @param {mixed} email 
 * @param {mixed} uri 
*/
dojox.atom.io.model.Person=function(personType, name, email, uri){};
/**
 * @param {mixed} name_space 
 * @param {mixed} name 
 * @param {mixed} attributes 
 * @param {mixed} content 
 * @param {mixed} shortNs 
*/
dojox.atom.io.model.Node=function(name_space, name, attributes, content, shortNs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'link' types.<br>
 * </blockquote>
 * Class container for 'link' types.
 * @param {mixed} href 
 * @param {mixed} rel 
 * @param {mixed} hrefLang 
 * @param {mixed} title 
 * @param {mixed} type 
*/
dojox.atom.io.model.Link=function(href, rel, hrefLang, title, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Generator' types.<br>
 * </blockquote>
 * Class container for 'Generator' types.
 * @param {String} uri 
 * @param {String} version 
 * @param {String} value 
*/
dojox.atom.io.model.Generator=function(uri, version, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Feed' types.<br>
 * </blockquote>
 * Class container for 'Feed' types.<br>
*/
dojox.atom.io.model.Feed=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Entry' types.<br>
 * </blockquote>
 * Class container for 'Entry' types.
 * @param {String} id 
*/
dojox.atom.io.model.Entry=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Content' types. Such as summary, content, username, and so on types of data.<br>
 * </blockquote>
 * Class container for 'Content' types. Such as summary, content, username, and so on types of data.
 * @param {mixed} tagName 
 * @param {mixed} value 
 * @param {mixed} src 
 * @param {mixed} type 
 * @param {mixed} xmlLang 
*/
dojox.atom.io.model.Content=function(tagName, value, src, type, xmlLang){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Collection' types.<br>
 * </blockquote>
 * Class container for 'Collection' types.
 * @param {mixed} href 
 * @param {mixed} title 
*/
dojox.atom.io.model.Collection=function(href, title){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Category' types.<br>
 * </blockquote>
 * Class container for 'Category' types.
 * @param {String} scheme 
 * @param {String} term 
 * @param {String} label 
*/
dojox.atom.io.model.Category=function(scheme, term, label){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for generic Atom items.<br>
 * </blockquote>
 * Class container for generic Atom items.<br>
 * <br>
 * <br>
 * child objects can override this if they want to be called after a Dom build
 * @param {mixed} args 
*/
dojox.atom.io.model.AtomItem=function(args){};
/**
 * @class
 * @param {mixed} name_space 
 * @param {mixed} name 
 * @param {mixed} attributes 
 * @param {mixed} content 
 * @param {mixed} shortNs 
 * @returns {dojox.atom.io.model.Node} new instance
*/
dojox.atom.io.model.Node=function(name_space, name, attributes, content, shortNs){};
/**
 * @memberOf dojox.atom.io.model.Node
*/
dojox.atom.io.model.Node.prototype.toString=function(){};
/**
 * @param {mixed} name 
 * @memberOf dojox.atom.io.model.Node
*/
dojox.atom.io.model.Node.prototype.getAttribute=function(name){};
/**
 * @param {mixed} node 
 * @memberOf dojox.atom.io.model.Node
*/
dojox.atom.io.model.Node.prototype.buildFromDom=function(node){};
/**
 * @param {mixed} content 
 * @memberOf dojox.atom.io.model.Node
*/
dojox.atom.io.model.Node.prototype.addContent=function(content){};
/**
 * @param {mixed} name 
 * @param {mixed} value 
 * @memberOf dojox.atom.io.model.Node
*/
dojox.atom.io.model.Node.prototype.addAttribute=function(name, value){};
/**
 * @param {mixed} node 
 * @private
 * @memberOf dojox.atom.io.model.Node
*/
dojox.atom.io.model.Node.prototype._saveAttributes=function(node){};
/**
 * @param {mixed} node 
 * @private
 * @memberOf dojox.atom.io.model.Node
*/
dojox.atom.io.model.Node.prototype._getAttributeNames=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for generic Atom items.<br>
 * </blockquote>
 * Class container for generic Atom items.<br>
 * <br>
 * <br>
 * child objects can override this if they want to be called after a Dom build
 * @class
 * @param {mixed} args 
 * @returns {dojox.atom.io.model.AtomItem} new instance
*/
dojox.atom.io.model.AtomItem=function(args){};
/**
 * @namespace
*/
dojox.atom.io.model.AtomItem.title={};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the title of the item.<br>
 * </blockquote>
 * Function to set the title of the item.
 * @param {String} str The title to set.
 * @param {String} type The type of title format, text, xml, xhtml, etc.
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.setTitle=function(str, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to remove a link from the list of links.<br>
 * </blockquote>
 * Function to remove a link from the list of links.
 * @param {String} href The href.
 * @param {String} rel 
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.removeLink=function(href, rel){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to remove extensions that match a namespace and name.<br>
 * </blockquote>
 * Function to remove extensions that match a namespace and name.
 * @param {String} name_space The namespace of the extension.
 * @param {String} name The name of the extension
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.removeExtensions=function(name_space, name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to remove all categories that match a particular scheme and term.<br>
 * </blockquote>
 * Function to remove all categories that match a particular scheme and term.
 * @param {String} scheme The scheme to filter on.
 * @param {String} term The term to filter on.
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.removeCategories=function(scheme, term){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to remove all basic links from the list of links.<br>
 * </blockquote>
 * Function to remove all basic link from the list of links.
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.removeBasicLinks=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to get extensions that match a namespace and name.<br>
 * </blockquote>
 * Function to get extensions that match a namespace and name.
 * @param {String} name_space The namespace of the extension.
 * @param {String} name The name of the extension
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.getExtensions=function(name_space, name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to get all categories that match a particular scheme.<br>
 * </blockquote>
 * Function to get all categories that match a particular scheme.
 * @param {String} scheme The scheme to filter on.
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.getCategories=function(scheme){};
/**
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.destroy=function(){};
/**
 * @param {mixed} node 
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.buildFromDom=function(node){};
/**
 * @param {mixed} fullName 
 * @param {mixed} shortName 
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.addNamespace=function(fullName, shortName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to add in a link to the list of links.<br>
 * </blockquote>
 * Function to add in a link to the list of links.
 * @param {String} href The href.
 * @param {String} rel 
 * @param {String} hrefLang 
 * @param {String} title A title to associate with the link.
 * @param {String} type The type of link is is.
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.addLink=function(href, rel, hrefLang, title, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to add in an extension namespace into the item.<br>
 * </blockquote>
 * Function to add in an extension namespace into the item.
 * @param {String} name_space The namespace of the extension.
 * @param {String} name The name of the extension
 * @param {Array} attributes The attributes associated with the extension.
 * @param {String} content The content of the extension.
 * @param {String} shortNS 
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.addExtension=function(name_space, name, attributes, content, shortNS){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to add in an author to the list of authors.<br>
 * </blockquote>
 * Function to add in an author to the list of authors.
 * @param {String} name The author's name.
 * @param {String} email The author's e-mail address.
 * @param {String} uri A URI associated with the author.
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.addContributor=function(name, email, uri){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to add in a category to the list of categories.<br>
 * </blockquote>
 * Function to add in a category to the list of categories.
 * @param {String} scheme 
 * @param {String} term 
 * @param {String} label 
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.addCategory=function(scheme, term, label){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to add in an author to the list of authors.<br>
 * </blockquote>
 * Function to add in an author to the list of authors.
 * @param {String} name The author's name.
 * @param {String} email The author's e-mail address.
 * @param {String} uri A URI associated with the author.
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.addAuthor=function(name, email, uri){};
/**
 * @param {mixed} tag 
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype.accept=function(tag){};
/**
 * @private
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype._postBuild=function(){};
/**
 * @private
 * @memberOf dojox.atom.io.model.AtomItem
*/
dojox.atom.io.model.AtomItem.prototype._getAttributeNames=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Category' types.<br>
 * </blockquote>
 * Class container for 'Category' types.
 * @class
 * @param {String} scheme 
 * @param {String} term 
 * @param {String} label 
 * @returns {dojox.atom.io.model.Category} new instance
*/
dojox.atom.io.model.Category=function(scheme, term, label){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to construct string form of the category tag, which is an XML structure.<br>
 * </blockquote>
 * Function to construct string form of the category tag, which is an XML structure.
 * @memberOf dojox.atom.io.model.Category
*/
dojox.atom.io.model.Category.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to do construction of the Category data from the DOM node containing it.<br>
 * </blockquote>
 * Function to do construction of the Category data from the DOM node containing it.
 * @param {DOM} node The DOM node to process for content.
 * @memberOf dojox.atom.io.model.Category
*/
dojox.atom.io.model.Category.prototype.buildFromDom=function(node){};
/**
 * @private
 * @memberOf dojox.atom.io.model.Category
*/
dojox.atom.io.model.Category.prototype._postBuild=function(){};
/**
 * @private
 * @memberOf dojox.atom.io.model.Category
*/
dojox.atom.io.model.Category.prototype._getAttributeNames=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Content' types. Such as summary, content, username, and so on types of data.<br>
 * </blockquote>
 * Class container for 'Content' types. Such as summary, content, username, and so on types of data.
 * @class
 * @param {mixed} tagName 
 * @param {mixed} value 
 * @param {mixed} src 
 * @param {mixed} type 
 * @param {mixed} xmlLang 
 * @returns {dojox.atom.io.model.Content} new instance
*/
dojox.atom.io.model.Content=function(tagName, value, src, type, xmlLang){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to construct string form of the content tag, which is an XML structure.<br>
 * </blockquote>
 * Function to construct string form of the content tag, which is an XML structure.
 * @memberOf dojox.atom.io.model.Content
*/
dojox.atom.io.model.Content.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to do construction of the Content data from the DOM node containing it.<br>
 * </blockquote>
 * Function to do construction of the Content data from the DOM node containing it.
 * @param {DOM} node The DOM node to process for content.
 * Handle checking for XML content as the content type
 * @memberOf dojox.atom.io.model.Content
*/
dojox.atom.io.model.Content.prototype.buildFromDom=function(node){};
/**
 * @private
 * @memberOf dojox.atom.io.model.Content
*/
dojox.atom.io.model.Content.prototype._postBuild=function(){};
/**
 * @private
 * @memberOf dojox.atom.io.model.Content
*/
dojox.atom.io.model.Content.prototype._getAttributeNames=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'link' types.<br>
 * </blockquote>
 * Class container for 'link' types.
 * @class
 * @param {mixed} href 
 * @param {mixed} rel 
 * @param {mixed} hrefLang 
 * @param {mixed} title 
 * @param {mixed} type 
 * @returns {dojox.atom.io.model.Link} new instance
*/
dojox.atom.io.model.Link=function(href, rel, hrefLang, title, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to construct string form of the link tag, which is an XML structure.<br>
 * </blockquote>
 * Function to construct string form of the link tag, which is an XML structure.
 * @memberOf dojox.atom.io.model.Link
*/
dojox.atom.io.model.Link.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to do construction of the link data from the DOM node containing it.<br>
 * </blockquote>
 * Function to do construction of the link data from the DOM node containing it.
 * @param {The} node DOM node to process for link data.
 * @memberOf dojox.atom.io.model.Link
*/
dojox.atom.io.model.Link.prototype.buildFromDom=function(node){};
/**
 * @private
 * @memberOf dojox.atom.io.model.Link
*/
dojox.atom.io.model.Link.prototype._postBuild=function(){};
/**
 * @private
 * @memberOf dojox.atom.io.model.Link
*/
dojox.atom.io.model.Link.prototype._getAttributeNames=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'person' types, such as Author, controbutors, and so on.<br>
 * </blockquote>
 * Class container for 'person' types, such as Author, controbutors, and so on.
 * @class
 * @param {mixed} personType 
 * @param {mixed} name 
 * @param {mixed} email 
 * @param {mixed} uri 
 * @returns {dojox.atom.io.model.Person} new instance
*/
dojox.atom.io.model.Person=function(personType, name, email, uri){};
/**
 * @namespace
 * @private
*/
dojox.atom.io.model.Person._accepts={};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to construct string form of the Person tag, which is an XML structure.<br>
 * </blockquote>
 * Function to construct string form of the Person tag, which is an XML structure.
 * @memberOf dojox.atom.io.model.Person
*/
dojox.atom.io.model.Person.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to do construction of the person data from the DOM node containing it.<br>
 * </blockquote>
 * Function to do construction of the person data from the DOM node containing it.
 * @param {The} node DOM node to process for person data.
 * @memberOf dojox.atom.io.model.Person
*/
dojox.atom.io.model.Person.prototype.buildFromDom=function(node){};
/**
 * @param {mixed} tag 
 * @memberOf dojox.atom.io.model.Person
*/
dojox.atom.io.model.Person.prototype.accept=function(tag){};
/**
 * @private
 * @memberOf dojox.atom.io.model.Person
*/
dojox.atom.io.model.Person.prototype._postBuild=function(){};
/**
 * @private
 * @memberOf dojox.atom.io.model.Person
*/
dojox.atom.io.model.Person.prototype._getAttributeNames=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Generator' types.<br>
 * </blockquote>
 * Class container for 'Generator' types.
 * @class
 * @param {String} uri 
 * @param {String} version 
 * @param {String} value 
 * @returns {dojox.atom.io.model.Generator} new instance
*/
dojox.atom.io.model.Generator=function(uri, version, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to construct string form of the Generator tag, which is an XML structure.<br>
 * </blockquote>
 * Function to construct string form of the Generator tag, which is an XML structure.
 * @memberOf dojox.atom.io.model.Generator
*/
dojox.atom.io.model.Generator.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to do construction of the generator data from the DOM node containing it.<br>
 * </blockquote>
 * Function to do construction of the generator data from the DOM node containing it.
 * @param {The} node DOM node to process for link data.
 * @memberOf dojox.atom.io.model.Generator
*/
dojox.atom.io.model.Generator.prototype.buildFromDom=function(node){};
/**
 * @private
 * @memberOf dojox.atom.io.model.Generator
*/
dojox.atom.io.model.Generator.prototype._postBuild=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Entry' types.<br>
 * </blockquote>
 * Class container for 'Entry' types.
 * @class
 * @param {String} id 
 * @returns {dojox.atom.io.model.Entry} new instance
*/
dojox.atom.io.model.Entry=function(id){};
/**
 * @namespace
 * @private
*/
dojox.atom.io.model.Entry._accepts={};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to construct string form of the entry tag, which is an XML structure.<br>
 * </blockquote>
 * Function to construct string form of the entry tag, which is an XML structure.
 * @param {mixed} amPrimary 
 * @returns {string} -
 * @memberOf dojox.atom.io.model.Entry
*/
dojox.atom.io.model.Entry.prototype.toString=function(amPrimary){};
/**
 * @param {mixed} url 
 * @memberOf dojox.atom.io.model.Entry
*/
dojox.atom.io.model.Entry.prototype.setEditHref=function(url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to get the href that allows editing of this feed entry.<br>
 * </blockquote>
 * Function to get the href that allows editing of this feed entry.<br>
 * 
 * @returns {string} -
 * @memberOf dojox.atom.io.model.Entry
*/
dojox.atom.io.model.Entry.prototype.getEditHref=function(){};
/**
 * @private
 * @memberOf dojox.atom.io.model.Entry
*/
dojox.atom.io.model.Entry.prototype._getAttributeNames=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Feed' types.<br>
 * </blockquote>
 * Class container for 'Feed' types.
 * @class
 * @returns {dojox.atom.io.model.Feed} new instance
*/
dojox.atom.io.model.Feed=function(){};
/**
 * @namespace
 * @private
*/
dojox.atom.io.model.Feed._accepts={};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to construct string form of the feed tag, which is an XML structure.<br>
 * </blockquote>
 * Function to construct string form of the feed tag, which is an XML structure.
 * @memberOf dojox.atom.io.model.Feed
*/
dojox.atom.io.model.Feed.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to add a set of entries to the feed.<br>
 * </blockquote>
 * Function to get an entry by its id.
 * @param {array} arrayOfEntry An array of entry objects to add to the feed.
 * @memberOf dojox.atom.io.model.Feed
*/
dojox.atom.io.model.Feed.prototype.setEntries=function(arrayOfEntry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to remove an entry from the list of links.<br>
 * </blockquote>
 * Function to remove an entry from the list of links.
 * @param {object} entry The entry.
 * @memberOf dojox.atom.io.model.Feed
*/
dojox.atom.io.model.Feed.prototype.removeEntry=function(entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to get the href that refers to this feed.<br>
 * </blockquote>
 * Function to get the href that refers to this feed.<br>
 * 
 * @returns {string} -
 * @memberOf dojox.atom.io.model.Feed
*/
dojox.atom.io.model.Feed.prototype.getSelfHref=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to get the first entry of the feed.<br>
 * </blockquote>
 * Function to get the first entry of the feed.<br>
 * 
 * @returns {object} -
 * @memberOf dojox.atom.io.model.Feed
*/
dojox.atom.io.model.Feed.prototype.getFirstEntry=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to get an entry by its id.<br>
 * </blockquote>
 * Function to get an entry by its id.
 * @param {String} entryId 
 * @memberOf dojox.atom.io.model.Feed
*/
dojox.atom.io.model.Feed.prototype.getEntry=function(entryId){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to Create a new entry object in the feed.<br>
 * </blockquote>
 * Function to Create a new entry object in the feed.<br>
 * 
 * @returns {object} -
 * @memberOf dojox.atom.io.model.Feed
*/
dojox.atom.io.model.Feed.prototype.createEntry=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to add an entry to this feed.<br>
 * </blockquote>
 * Function to add an entry to this feed.
 * @param {object} entry The entry object to add.
 * @memberOf dojox.atom.io.model.Feed
*/
dojox.atom.io.model.Feed.prototype.addEntry=function(entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Feed' types.<br>
 * </blockquote>
 * Class container for 'Feed' types.<br>
 * <br>
 * <br>
 * builds a Service document.  each element of this, except for the namespace, is the href of<br>
 * a service that the server supports.  Some of the common services are:<br>
 * "create-entry" , "user-prefs" , "search-entries" , "edit-template" , "categories"
 * @class
 * @param {mixed} href 
 * @returns {dojox.atom.io.model.Service} new instance
*/
dojox.atom.io.model.Service=function(href){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to collections that match a specific url.<br>
 * </blockquote>
 * Function to collections that match a specific url.
 * @param {String} url e URL to match collections against.
 * @memberOf dojox.atom.io.model.Service
*/
dojox.atom.io.model.Service.prototype.getCollection=function(url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to do construction of the Service data from the DOM node containing it.<br>
 * </blockquote>
 * Function to do construction of the Service data from the DOM node containing it.
 * @param {DOM} node The DOM node to process for content.
 * @memberOf dojox.atom.io.model.Service
*/
dojox.atom.io.model.Service.prototype.buildFromDom=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Workspace' types.<br>
 * </blockquote>
 * Class container for 'Workspace' types.
 * @class
 * @param {mixed} title 
 * @returns {dojox.atom.io.model.Workspace} new instance
*/
dojox.atom.io.model.Workspace=function(title){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to do construction of the Workspace data from the DOM node containing it.<br>
 * </blockquote>
 * Function to do construction of the Workspace data from the DOM node containing it.
 * @param {DOM} node The DOM node to process for content.
 * @memberOf dojox.atom.io.model.Workspace
*/
dojox.atom.io.model.Workspace.prototype.buildFromDom=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class container for 'Collection' types.<br>
 * </blockquote>
 * Class container for 'Collection' types.
 * @class
 * @param {mixed} href 
 * @param {mixed} title 
 * @returns {dojox.atom.io.model.Collection} new instance
*/
dojox.atom.io.model.Collection=function(href, title){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to do construction of the Collection data from the DOM node containing it.<br>
 * </blockquote>
 * Function to do construction of the Collection data from the DOM node containing it.
 * @param {DOM} node The DOM node to process for content.
 * @memberOf dojox.atom.io.model.Collection
*/
dojox.atom.io.model.Collection.prototype.buildFromDom=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 An editor for dojox.atom.io.model.Person objects.<br>
 * </blockquote>
 * An editor for dojox.atom.io.model.Person objects.  Displays multiple rows for the respective arrays<br>
 * of people.  Can add/remove rows on the fly.<br>
*/
dojox.atom.widget.PeopleEditor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Grouping of feed entries.<br>
 * </blockquote>
 * Grouping of feed entries.<br>
*/
dojox.atom.widget.FeedViewerGrouping=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Widget for handling the display of an entry and specific events associated with it.<br>
 * </blockquote>
 * Widget for handling the display of an entry and specific events associated with it.<br>
*/
dojox.atom.widget.FeedViewerEntry=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An ATOM feed viewer that allows for viewing a feed, deleting entries, and editing entries.<br>
 * </blockquote>
 * An ATOM feed viewer that allows for viewing a feed, deleting entries, and editing entries.<br>
 * <br>
 * <br>
 * The body of the feed viewer table so we can access it and populate it.  Will be assigned via template.<br>
 * <br>
 * <br>
 * The overal table container which contains the feed viewer table.  Will be assigned via template.<br>
 * <br>
 * <br>
 * The topic to broadcast when any entry is clicked so that a listener can pick up it and display it.<br>
 * <br>
 * <br>
 * The URL to which to connect to initially on creation.<br>
*/
dojox.atom.widget.FeedViewer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An ATOM feed entry editor for publishing updated ATOM entries, or viewing non-editable entries.<br>
 * </blockquote>
 * An ATOM feed entry editor for publishing updated ATOM entries, or viewing non-editable entries.<br>
 * <br>
 * <br>
 * The topic to listen on for entries to edit.<br>
*/
dojox.atom.widget.FeedEntryViewer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An ATOM feed entry editor that allows viewing of the individual attributes of an entry.<br>
 * </blockquote>
 * An ATOM feed entry editor that allows viewing of the individual attributes of an entry.<br>
 * <br>
 * <br>
 * Flag denoting if the current entry is editable or not.<br>
*/
dojox.atom.widget.FeedEntryEditor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Widget representing a header in a FeedEntryViewer/Editor<br>
 * </blockquote>
 * Widget representing a header in a FeedEntryViewer/Editor<br>
*/
dojox.atom.widget.EntryHeader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A filter to be applied to the list of entries.<br>
 * </blockquote>
 * A filter to be applied to the list of entries.<br>
*/
dojox.atom.widget.AtomEntryCategoryFilter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An ATOM feed entry editor that allows viewing of the individual attributes of an entry.<br>
 * </blockquote>
 * An ATOM feed entry editor that allows viewing of the individual attributes of an entry.<br>
 * <br>
 * <br>
 * Flag denoting if the current entry is editable or not.
 * @class
 * @returns {dojox.atom.widget.FeedEntryEditor} new instance
*/
dojox.atom.widget.FeedEntryEditor=function(){};
/**
 * @namespace
 * @private
*/
dojox.atom.widget.FeedEntryEditor._editors={};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the updated  node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the updated node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} updatedAnchorNode The DOM node to attach the udpated data to.
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.setUpdated=function(updatedAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the title node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the title node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} titleAnchorNode The DOM node to attach the title data to.
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.setTitle=function(titleAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the summary  node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the summary node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} summaryAnchorNode The DOM node to attach the summary data to.
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.setSummary=function(summaryAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the ID  node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the ID node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} idAnchorNode The DOM node to attach the ID data to.
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.setId=function(idAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the current entry that is being edited.<br>
 * </blockquote>
 * Function to set the current entry that is being edited.
 * @param {object} entry Instance of dojox.atom.io.model.Entry to display for reading/editing.
 * @param {object} feed 
 * @param {boolean} leaveMenuState 
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.setEntry=function(entry, feed, leaveMenuState){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the contributor node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the contributor node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} contributorsAnchorNode The DOM node to attach the contributor data to.
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.setContributors=function(contributorsAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the content node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the content node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.<br>
 * <br>
 * summaryAnchorNode:<br>
 * The DOM node to attach the content data to.
 * @param {DOM} contentAnchorNode node
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.setContent=function(contentAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the author node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the author node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} authorsAnchorNode The DOM node to attach the author data to.
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.setAuthors=function(authorsAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Saves edits submitted when the 'save' button is pressed.<br>
 * </blockquote>
 * Saves edits submitted when the 'save' button is pressed.  Distinguishes between new and existing<br>
 * entries and saves appropriately.  Fetches the values of the editors, and, if existing, compares them to<br>
 * the existing values and submits the updates, otherwise creates a new entry and posts it as a new entry.
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.saveEdits=function(){};
/**
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.postCreate=function(){};
/**
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.clearEditors=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clears the editor, destorys all editors, leaving the editor completely clear<br>
 * </blockquote>
 * Clears the editor, destorys all editors, leaving the editor completely clear
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancels edits and reverts the editor to its previous state (display mode)<br>
 * </blockquote>
 * Cancels edits and reverts the editor to its previous state (display mode)
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype.cancelEdits=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to put the editor into a state to create a new entry.<br>
 * </blockquote>
 * Function to put the editor into a state to create a new entry.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype._toggleNew=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for toggling/enabling the display of edit mode<br>
 * </blockquote>
 * Internal function for toggling/enabling the display of edit mode
 * @private
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype._toggleEdit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to switch between editor types.<br>
 * </blockquote>
 * Function to switch between a rich text editor and a textarea widget.  Used for title, summary,<br>
 * And content when switching between text and html/xhtml content.
 * @param {object} event The event generated by the change in the select box on the page.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype._switchEditor=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for determining of a particular entry is editable.<br>
 * </blockquote>
 * Internal function for determining of a particular entry is editable.<br>
 * This is used for determining if the delete action should be displayed or not.
 * @param {object} entry The dojox.atom.io.model.Entry object to examine
 * @private
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype._isEditable=function(entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for handling the save of an entry, cleaning up the display after the edit is completed.<br>
 * </blockquote>
 * Function for handling the save of an entry, cleaning up the display after the edit is completed.
 * @param {object} entry dojox.atom.io.model.Entry object
 * The entry that was saved.<br>
 * Location: String<br>
 * A URL to be used, not used here, but part of the call back from the AtomIO
 * @param {string} location 
 * @private
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype._handleSave=function(entry, location){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for listening to a topic that will handle entry notification.<br>
 * </blockquote>
 * Internal function for listening to a topic that will handle entry notification.
 * @param {object} entrySelectionEvent The topic message containing the entry that was selected for view.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype._handleEvent=function(entrySelectionEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for cleaning up/enforcing the XHTML standard in HTML returned from the editor2 widget.<br>
 * </blockquote>
 * Function for cleaning up/enforcing the XHTML standard in HTML returned from the editor2 widget.
 * @param {string} html HTML string to be enforced as xhtml.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype._enforceXhtml=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to display the appropriate sections based on validity.<br>
 * </blockquote>
 * Function to display the appropriate sections based on validity.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype._displaySections=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a People Editor widget and returns it.<br>
 * </blockquote>
 * Creates a People Editor widget, sets its value, and returns it.
 * @param {DOM} anchorNode The node to attach the editor to.
 * @param {DOM} node An object containing the value to be put into the editor. Typically, this is an
 * dojox.atom.io.model.Person object.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype._createPeopleEditor=function(anchorNode, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to create an appropriate text editor widget based on the given parameters.<br>
 * </blockquote>
 * Function to create an appropriate text editor widget based on the given parameters.
 * @param {DOM} anchorNode The DOM node to attach the editor widget to.
 * @param {DOM} node An object containing the value to be put into the editor.  This ranges from an anonymous object
 * with a value parameter to a dojox.atom.io.model.Content object.
 * @param {boolean} multiline A boolean indicating whether the content should be multiline (such as a textarea) instead of a
 * single line (such as a textbox).
 * @param {object} rte A boolean indicating whether the content should be a rich text editor widget.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype._createEditor=function(anchorNode, node, multiline, rte){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for closing tags in a text of HTML/XHTML<br>
 * </blockquote>
 * Function for closing tags in a text of HTML/XHTML
 * @param {string} xhtml String XHTML string which needs the closing tag.
 * @param {string} tag The tag to close.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryEditor
*/
dojox.atom.widget.FeedEntryEditor.prototype._closeTag=function(xhtml, tag){};


/**
 * <b>Summary:</b><blockquote>
 *	 An editor for dojox.atom.io.model.Person objects.<br>
 * </blockquote>
 * An editor for dojox.atom.io.model.Person objects.  Displays multiple rows for the respective arrays<br>
 * of people.  Can add/remove rows on the fly.
 * @class
 * @returns {dojox.atom.widget.PeopleEditor} new instance
*/
dojox.atom.widget.PeopleEditor=function(){};
/**
 * @memberOf dojox.atom.widget.PeopleEditor
*/
dojox.atom.widget.PeopleEditor.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the values of this editor in an array.<br>
 * </blockquote>
 * Gets the values of this editor in an array, with each Person as an object within the array.
 * @memberOf dojox.atom.widget.PeopleEditor
*/
dojox.atom.widget.PeopleEditor.prototype.getValues=function(){};
/**
 * @memberOf dojox.atom.widget.PeopleEditor
*/
dojox.atom.widget.PeopleEditor.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes a Person from our list of editors.<br>
 * </blockquote>
 * Removes a Person from our list of editors by removing the block of editors that<br>
 * make up that Person.
 * @param {object} event The event generated when the remove button is pressed on the page.
 * @private
 * @memberOf dojox.atom.widget.PeopleEditor
*/
dojox.atom.widget.PeopleEditor.prototype._removeEditor=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates editor boxes (textbox widgets) for the individual values of a Person.<br>
 * </blockquote>
 * creates editor boxes (textbox widgets) for the individual values of a Person.
 * @param {string} name The name of this Person.
 * @param {string} email The email of this Person.
 * @param {string} uri The Person's URI.
 * @param {int} index The row index to use for this Person.
 * @param {string} widgetName 
 * @private
 * @memberOf dojox.atom.widget.PeopleEditor
*/
dojox.atom.widget.PeopleEditor.prototype._createEditors=function(name, email, uri, index, widgetName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates an individual editor widget (textbox) for a value.<br>
 * </blockquote>
 * Creates an individual editor widget (textbox) for a value.
 * @param {string} value The initial value of the textbox
 * @param {string} id The id the textbox should have.
 * @param {string} name The text to put in the label element for this textbox.
 * @param {DOM} labelNode The node to attach the label to.
 * @param {DOM} node The node to attach the editor rows to.
 * @private
 * @memberOf dojox.atom.widget.PeopleEditor
*/
dojox.atom.widget.PeopleEditor.prototype._createEditor=function(value, id, name, labelNode, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a new block of blank editors to represent a Person.<br>
 * </blockquote>
 * Adds a new block of blank editors to represent a Person.
 * @private
 * @memberOf dojox.atom.widget.PeopleEditor
*/
dojox.atom.widget.PeopleEditor.prototype._add=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An ATOM feed entry editor for publishing updated ATOM entries, or viewing non-editable entries.<br>
 * </blockquote>
 * An ATOM feed entry editor for publishing updated ATOM entries, or viewing non-editable entries.<br>
 * <br>
 * <br>
 * The topic to listen on for entries to edit.
 * @class
 * @returns {dojox.atom.widget.FeedEntryViewer} new instance
*/
dojox.atom.widget.FeedEntryViewer=function(){};
/**
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the updated header node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the updated header node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} updatedHeaderNode The DOM node to attach the updated header data to.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setUpdatedHeader=function(updatedHeaderNode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the updated  node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the updated node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} updatedAnchorNode The DOM node to attach the udpated data to.
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setUpdated=function(updatedAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the title header node in the template to some value.<br>
 * </blockquote>
 * Function to set the contents of the title header node in the template to some value.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.<br>
 * <br>
 * titleAchorNode:<br>
 * The DOM node to attach the title data to.<br>
 * editMode:<br>
 * Boolean to indicate if the display should be in edit mode or not.
 * @param {DOM} titleHeaderNode node
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setTitleHeader=function(titleHeaderNode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the title node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the title node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.<br>
 * <br>
 * titleAchorNode:<br>
 * The DOM node to attach the title data to.
 * @param {mixed} titleAnchorNode 
 * @param {Boolean} editMode to indicate if the display should be in edit mode or not.
 * @param {The} entry Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setTitle=function(titleAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the summary  node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the summary node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} summaryHeaderNode The DOM node to attach the summary title to.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setSummaryHeader=function(summaryHeaderNode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the summary  node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the summary node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} summaryAnchorNode The DOM node to attach the summary data to.
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setSummary=function(summaryAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the ID  node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the ID node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.<br>
 * <br>
 * idAnchorNode:<br>
 * The DOM node to attach the ID data to.
 * @param {DOM} idHeaderNode node
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setIdHeader=function(idHeaderNode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the ID  node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the ID node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} idAnchorNode The DOM node to attach the ID data to.
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setId=function(idAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set whether a field in the view is valid and displayable.<br>
 * </blockquote>
 * Function to set whether a field in the view is valid and displayable.<br>
 * This is needed for over-riding of the set* functions and customization of how data is displayed in the attach point.<br>
 * So if custom implementations use their own display logic, they can still enable the field.
 * @param {string} field The field name to set the valid parameter on.  Such as 'content', 'id', etc.
 * @param {boolean} isValid Flag denoting if the field is valid or not.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setFieldValidity=function(field, isValid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the current entry that is being edited.<br>
 * </blockquote>
 * Function to set the current entry that is being edited.
 * @param {object} entry Instance of dojox.atom.io.model.Entry to display for reading/editing.
 * @param {object} feed 
 * @param {boolean} leaveMenuState 
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setEntry=function(entry, feed, leaveMenuState){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for setting which sections of the entry should be displayed.<br>
 * </blockquote>
 * Function for setting which sections of the entry should be displayed.
 * @param {array} sectionsArray Array of string names that indicate which sections to display.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setDisplaySections=function(sectionsArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the contributor header node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the contributor header node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} contributorsHeaderNode The DOM node to attach the contributor title to.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setContributorsHeader=function(contributorsHeaderNode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the contributor node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the contributor node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} contributorsAnchorNode The DOM node to attach the contributor data to.
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setContributors=function(contributorsAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the content node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the content node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} contentHeaderNode The DOM node to attach the content data to.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setContentHeader=function(contentHeaderNode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the content node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the content node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.
 * @param {DOM} contentAnchorNode The DOM node to attach the content data to.
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setContent=function(contentAnchorNode, editMode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the title format for the authors section of the author row in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the title format for the authors section of the author row in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the author data is filled out from an entry.
 * @param {DOM} authorHeaderNode The DOM node to attach the author section header data to.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setAuthorsHeader=function(authorHeaderNode, entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the contents of the author node in the template to some value from the entry.<br>
 * </blockquote>
 * Function to set the contents of the author node in the template to some value from the entry.<br>
 * This exists specifically so users can over-ride how the title data is filled out from an entry.<br>
 * <br>
 * authorsAchorNode:<br>
 * The DOM node to attach the author data to.
 * @param {DOM} authorsAnchorNode node
 * @param {boolean} editMode Boolean to indicate if the display should be in edit mode or not.
 * @param {object} entry The Feed Entry to work with.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.setAuthors=function(authorsAnchorNode, editMode, entry){};
/**
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to return if a displayable field is valid or not<br>
 * </blockquote>
 * Function to return if a displayable field is valid or not
 * @param {string} field The field name to get the valid parameter of.  Such as 'content', 'id', etc.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.isFieldValid=function(field){};
/**
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.getFeed=function(){};
/**
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.getEntry=function(){};
/**
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to clear all the display nodes for the ATOM entry from the viewer.<br>
 * </blockquote>
 * Function to clear all the display nodes for the ATOM entry from the viewer.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.clearNodes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to clear the state of the widget.<br>
 * </blockquote>
 * Function to clear the state of the widget.
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for determining of a particular entry is editable.<br>
 * </blockquote>
 * Internal function for determining of a particular entry is editable.<br>
 * This is used for determining if the delete action should be displayed or not.
 * @param {object} checkBox The checkbox object to toggle the selection on.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype._toggleOptions=function(checkBox){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for determining of a particular entry is editable.<br>
 * </blockquote>
 * Internal function for determining of a particular entry is editable.<br>
 * This is used for determining if the delete action should be displayed or not.
 * @param {object} checkBox The checkbox object to toggle the selection on.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype._toggleCheckbox=function(checkBox){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for setting which checkboxes on the display are selected.<br>
 * </blockquote>
 * Internal function for setting which checkboxes on the display are selected.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype._setDisplaySectionsCheckboxes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for reading what is currently checked for display and generating the display list from it.<br>
 * </blockquote>
 * Internal function for reading what is currently checked for display and generating the display list from it.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype._readDisplaySections=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for listening to a topic that will handle entry notification.<br>
 * </blockquote>
 * Internal function for listening to a topic that will handle entry notification.
 * @param {object} entrySelectionEvent The topic message containing the entry that was selected for view.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype._handleEvent=function(entrySelectionEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for determining which sections of the view to actually display.<br>
 * </blockquote>
 * Internal function for determining which sections of the view to actually display.
 * @private
 * @memberOf dojox.atom.widget.FeedEntryViewer
*/
dojox.atom.widget.FeedEntryViewer.prototype._displaySections=function(){};

/**
 * <b>Summary:</b><blockquote>
 *	 Widget representing a header in a FeedEntryViewer/Editor<br>
 * </blockquote>
 * Widget representing a header in a FeedEntryViewer/Editor
 * @class
 * @returns {dojox.atom.widget.EntryHeader} new instance
*/
dojox.atom.widget.EntryHeader=function(){};
/**
 * @param {string} title 
 * @memberOf dojox.atom.widget.EntryHeader
*/
dojox.atom.widget.EntryHeader.prototype.setListHeader=function(title){};
/**
 * @memberOf dojox.atom.widget.EntryHeader
*/
dojox.atom.widget.EntryHeader.prototype.postCreate=function(){};
/**
 * @memberOf dojox.atom.widget.EntryHeader
*/
dojox.atom.widget.EntryHeader.prototype.destroy=function(){};
/**
 * @memberOf dojox.atom.widget.EntryHeader
*/
dojox.atom.widget.EntryHeader.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An ATOM feed viewer that allows for viewing a feed, deleting entries, and editing entries.<br>
 * </blockquote>
 * An ATOM feed viewer that allows for viewing a feed, deleting entries, and editing entries.<br>
 * <br>
 * <br>
 * The body of the feed viewer table so we can access it and populate it.  Will be assigned via template.<br>
 * <br>
 * <br>
 * The overal table container which contains the feed viewer table.  Will be assigned via template.<br>
 * <br>
 * <br>
 * The topic to broadcast when any entry is clicked so that a listener can pick up it and display it.<br>
 * <br>
 * <br>
 * The URL to which to connect to initially on creation.
 * @class
 * @returns {dojox.atom.widget.FeedViewer} new instance
*/
dojox.atom.widget.FeedViewer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The startup function.<br>
 * </blockquote>
 * The startup function.  Parses the filters and sets the feed based on the given url.
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function setting the feed from a URL which to get the feed.<br>
 * </blockquote>
 * Function setting the dojox.atom.io.model.Feed data into the view.
 * @param {string} url The URL to the feed to load.
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.setFeedFromUrl=function(url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function setting the dojox.atom.io.model.Feed data into the view.<br>
 * </blockquote>
 * Function setting the dojox.atom.io.model.Feed data into the view.<br>
 * <br>
 * entry:<br>
 * The dojox.atom.io.model.Feed object to process
 * @param {object} feed 
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.setFeed=function(feed){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to remove a filter for entry inclusion in the feed view.<br>
 * </blockquote>
 * Function to remove a filter for entry inclusion in the feed view.
 * @param {object} filter The basic items to identify the filter that is present.
 * Should be of format: {scheme: &lt;some text or null&gt;, term: &lt;some text or null&gt;, label: &lt;some text or null&gt;}
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.removeCategoryIncludeFilter=function(filter){};
/**
 * <b>Summary:</b><blockquote>
 *	 The postCreate function.<br>
 * </blockquote>
 * The postCreate function.  Creates our AtomIO object for future interactions and subscribes to the<br>
 * event given in markup/creation.
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function intended for over-riding/replacement as an attachpoint to for other items to recieve<br>
 *	 selection notification.<br>
 * </blockquote>
 * Function intended for over0-riding/replacement as an attachpoint to for other items to recieve<br>
 * selection notification.
 * @param {object} entry The dojox.atom.io.model.Entry object selected.
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.onEntrySelected=function(entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroys this widget, including all descendants and subscriptions.<br>
 * </blockquote>
 * Destroys this widget, including all descendants and subscriptions.
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for deleting a row from the view<br>
 * </blockquote>
 * Function for deleting a row from the view
 * @param {object} entryRow 
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.deleteEntry=function(entryRow){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function clearing all current entries in the feed view.<br>
 * </blockquote>
 * Function clearing all current entries in the feed view.
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for appending a new grouping of entries to the feed view.<br>
 * </blockquote>
 * Function for appending a grouping of entries to the feed view.<br>
 * <br>
 * entry:<br>
 * The title of the new grouping to create on the view.
 * @param {string} titleText 
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.appendGrouping=function(titleText){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for appending an entry to the feed view.<br>
 * </blockquote>
 * Function for appending an entry to the feed view.
 * @param {object} entry The dojox.atom.io.model.Entry object to append
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.appendEntry=function(entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to add a filter for entry inclusion in the feed view.<br>
 * </blockquote>
 * Function to add a filter for entry inclusion in the feed view.
 * @param {object} filter The basic items to filter on and the values.
 * Should be of format: {scheme: &lt;some text or null&gt;, term: &lt;some text or null&gt;, label: &lt;some text or null&gt;}
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype.addCategoryIncludeFilter=function(filter){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for handling the selection of feed entries.<br>
 * </blockquote>
 * Internal function for handling the selection of feed entries.
 * @param {object} evt The click event that triggered a selection.
 * @private
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype._rowSelected=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback for when an entry is deleted from a feed.<br>
 * </blockquote>
 * callback for when an entry is deleted from a feed.
 * @param {FeedViewerEntry} entry 
 * @param {boolean} success 
 * @private
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype._removeEntry=function(entry, success){};
/**
 * <b>Summary:</b><blockquote>
 *	 Method to determine if the URL is relative or absolute.<br>
 * </blockquote>
 * Method to determine if the URL is relative or absolute.  Basic assumption is if it doesn't start<br>
 * with http:// or file://, it's relative to the current document.
 * @param {string} url The URL to inspect.
 * @private
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype._isRelativeURL=function(url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to do matching of category filters to widgets.<br>
 * </blockquote>
 * Internal function to do matching of category filters to widgets.
 * @param {object} entry 
 * @private
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype._isFilterAccepted=function(entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for determining of a particular entry is editable.<br>
 * </blockquote>
 * Internal function for determining of a particular entry is editable.<br>
 * This is used for determining if the delete action should be displayed or not.
 * @param {object} entry The dojox.atom.io.model.Entry object to examine
 * @private
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype._isEditable=function(entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for listening to a topic that will handle entry notification.<br>
 * </blockquote>
 * Internal function for listening to a topic that will handle entry notification.
 * @param {object} entrySelectionEvent The topic message containing the entry that was selected for view.
 * @private
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype._handleEvent=function(entrySelectionEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for determining the appropriate date to display.<br>
 * </blockquote>
 * Internal function for determining of a particular entry is editable.
 * @param {object} entry The dojox.atom.io.model.Entry object to examine.
 * @private
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype._displayDateForEntry=function(entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for unselecting the current selection.<br>
 * </blockquote>
 * Internal function for unselecting the current selection.
 * @private
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype._deselectCurrentSelection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to calculate a baseline URL from the provided full URL.<br>
 * </blockquote>
 * Internal function to calculate a baseline URL from the provided full URL.
 * @param {string} fullURL The full URL as a string.
 * @param {boolean} currentPageRelative Flag to denote of the base URL should be calculated as just the server base, or relative to the current page/location in the URL.
 * @private
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype._calculateBaseURL=function(fullURL, currentPageRelative){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback function used when adding an entry to the feed.<br>
 * </blockquote>
 * callback function used when adding an entry to the feed.  After the entry has been posted to the feed,<br>
 * we add it to our feed representation (to show it on the page) and publish an event to update any entry viewers.
 * @param {object} entry 
 * @private
 * @memberOf dojox.atom.widget.FeedViewer
*/
dojox.atom.widget.FeedViewer.prototype._addEntry=function(entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 The initializer function.<br>
 * </blockquote>
 * The initializer function.
 * @param {mixed} scheme 
 * @param {mixed} term 
 * @param {mixed} label 
*/
dojox.atom.widget.FeedViewer.CategoryIncludeFilter=function(scheme, term, label){};
/**
 * <b>Summary:</b><blockquote>
 *	 Widget for handling the display of an entry and specific events associated with it.<br>
 * </blockquote>
 * Widget for handling the display of an entry and specific events associated with it.
 * @class
 * @returns {dojox.atom.widget.FeedViewerEntry} new instance
*/
dojox.atom.widget.FeedViewerEntry=function(){};
/**
 * @namespace
*/
dojox.atom.widget.FeedViewerEntry.deleteButton={};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the title of the entry.<br>
 * </blockquote>
 * Function to set the title of the entry.
 * @param {string} text The title.
 * @memberOf dojox.atom.widget.FeedViewerEntry
*/
dojox.atom.widget.FeedViewerEntry.prototype.setTitle=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to set the time of the entry.<br>
 * </blockquote>
 * Function to set the time of the entry.
 * @param {string} timeText The string form of the date.
 * @memberOf dojox.atom.widget.FeedViewerEntry
*/
dojox.atom.widget.FeedViewerEntry.prototype.setTime=function(timeText){};
/**
 * @memberOf dojox.atom.widget.FeedViewerEntry
*/
dojox.atom.widget.FeedViewerEntry.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Attach point for when a row is clicked on.<br>
 * </blockquote>
 * Attach point for when a row is clicked on.
 * @param {object} e The event generated by the click.
 * @memberOf dojox.atom.widget.FeedViewerEntry
*/
dojox.atom.widget.FeedViewerEntry.prototype.onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to enable the delete action on this entry.<br>
 * </blockquote>
 * Function to enable the delete action on this entry.
 * @memberOf dojox.atom.widget.FeedViewerEntry
*/
dojox.atom.widget.FeedViewerEntry.prototype.enableDelete=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to disable the delete action on this entry.<br>
 * </blockquote>
 * Function to disable the delete action on this entry.
 * @memberOf dojox.atom.widget.FeedViewerEntry
*/
dojox.atom.widget.FeedViewerEntry.prototype.disableDelete=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to handle the delete event and delete the entry.<br>
 * </blockquote>
 * Function to handle the delete event and delete the entry.
 * @param {object} event 
 * @memberOf dojox.atom.widget.FeedViewerEntry
*/
dojox.atom.widget.FeedViewerEntry.prototype.deleteEntry=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Grouping of feed entries.<br>
 * </blockquote>
 * Grouping of feed entries.
 * @class
 * @returns {dojox.atom.widget.FeedViewerGrouping} new instance
*/
dojox.atom.widget.FeedViewerGrouping=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the text to be shown above this grouping.<br>
 * </blockquote>
 * Sets the text to be shown above this grouping.
 * @param {The} text text to show.
 * @memberOf dojox.atom.widget.FeedViewerGrouping
*/
dojox.atom.widget.FeedViewerGrouping.prototype.setText=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 A filter to be applied to the list of entries.<br>
 * </blockquote>
 * A filter to be applied to the list of entries.
 * @class
 * @returns {dojox.atom.widget.AtomEntryCategoryFilter} new instance
*/
dojox.atom.widget.AtomEntryCategoryFilter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The initializer function.<br>
 * </blockquote>
 * The initializer function.
 * @class
 * @param {mixed} scheme 
 * @param {mixed} term 
 * @param {mixed} label 
 * @returns {dojox.atom.widget.FeedViewer.CategoryIncludeFilter} new instance
*/
dojox.atom.widget.FeedViewer.CategoryIncludeFilter=function(scheme, term, label){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to determine if this category filter matches against a category on an atom entry<br>
 * </blockquote>
 * Function to determine if this category filter matches against a category on an atom entry
 * @param {mixed} entry 
 * @memberOf dojox.atom.widget.FeedViewer.CategoryIncludeFilter
*/
dojox.atom.widget.FeedViewer.CategoryIncludeFilter.prototype.match=function(entry){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used as a mixin for dojox and AIR media<br>
 * </blockquote>
 * Calculates the current status of the playing media and fires<br>
 * the appropriate events.<br>
*/
dojox.av._Media=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Inserts a Flash FLV video into the HTML page and provides methods<br>
 *	 and events for controlling the video. Also plays the H264/M4V codec<br>
 *	 with a little trickery: change the '.M4V' extension to '.flv'.<br>
 * </blockquote>
 * @param {Object} options 
 * @example
 * markup:
 * 	&lt;div id="vid" initialVolume=".7",
 * 		mediaUrl="../resources/Grog.flv"
 * 		dojoType="dojox.av.FLVideo"&gt;&lt;/div&gt;
 * programmatic:
 * 	new dojox.av.FLVideo({
 * 		initialVolume:.7,
 * 		mediaUrl:"../resources/Grog.flv"
 * 	}, "vid");
 * 
 * mediaUrl: String
 * REQUIRED: The Url of the video file that will be played.
 * NOTE: Must be either an absolute URL or relative to the HTML file.
 * Relative paths will be converted to abslute paths
*/
dojox.av.FLVideo=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Play MP3 files through the Flash SWF built in the<br>
 *	 DEFT project.<br>
 * </blockquote>
 * This class is brand new, so there is a lot of<br>
 * functionality not yet available. The initial<br>
 * purpose is for playing "event" sounds like button<br>
 * clicks, and for loading and controlling multiple<br>
 * sounds at once. As of yet, streaming is not supported<br>
 * and polling the sounds for events during playback<br>
 * may still be missing information. Markup is not<br>
 * supported, as it may not be needed.<br>
 * <br>
 * TODO:<br>
 * Streaming, playback events, crossdomain, CDN support,<br>
 * (alternate SWF location), global volume, ID3 tag,<br>
 * factor out doLater, onLoadStatus needs work,<br>
 * play(position) / seek()
 * @param {Object} options 
 * @example
 * 	new dojox.av.FLAudio({
 * 		initialVolume:.7,
 * 		initialPan:0,
 * 		autoPlay:false
 * 	});
*/
dojox.av.FLAudio=function(options){};
/**
 * @namespace
*/
dojox.av.widget={};
/**
 * <b>Summary:</b><blockquote>
 *	 Play MP3 files through the Flash SWF built in the<br>
 *	 DEFT project.<br>
 * </blockquote>
 * This class is brand new, so there is a lot of<br>
 * functionality not yet available. The initial<br>
 * purpose is for playing "event" sounds like button<br>
 * clicks, and for loading and controlling multiple<br>
 * sounds at once. As of yet, streaming is not supported<br>
 * and polling the sounds for events during playback<br>
 * may still be missing information. Markup is not<br>
 * supported, as it may not be needed.<br>
 * <br>
 * TODO:<br>
 * Streaming, playback events, crossdomain, CDN support,<br>
 * (alternate SWF location), global volume, ID3 tag,<br>
 * factor out doLater, onLoadStatus needs work,<br>
 * play(position) / seek()
 * @class
 * @param {Object} options 
 * @returns {dojox.av.FLAudio} new instance
 * @example
 * 	new dojox.av.FLAudio({
 * 		initialVolume:.7,
 * 		initialPan:0,
 * 		autoPlay:false
 * 	});
*/
dojox.av.FLAudio=function(options){};
/**
 * @namespace
 * @private
*/
dojox.av.FLAudio._flashObject={};
/**
 * <b>Summary:</b><blockquote>
 *	 Tell media to stop, based on identifier in<br>
 *	 the options passed.<br>
 * </blockquote>
 * @param {Object} options index:Number OR id:String OR url:String
 * See doPlay()
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.stop=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set media volume, based on identifier in<br>
 *	 the options passed.<br>
 * </blockquote>
 * @param {Object} options volume: Number
 * 0 to 1<br>
 * index:Number OR id:String OR url:String<br>
 * See doPlay()
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.setVolume=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set media pan, based on identifier in<br>
 *	 the options passed.<br>
 * </blockquote>
 * @param {Object} options pan:Number -1 to 1
 * index:Number OR id:String OR url:String<br>
 * See doPlay()
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.setPan=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tell media to pause, based on identifier in<br>
 *	 the options passed.<br>
 * </blockquote>
 * @param {Object} options index:Number OR id:String OR url:String
 * See doPlay()
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.pause=function(options){};
/**
 * @param {Array} events 
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.onPlayStatus=function(events){};
/**
 * @param {Array} events 
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.onLoadStatus=function(events){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub fired when SWF is ready<br>
 * </blockquote>
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.onLoad=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired when the ID3 data is received.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.onID3=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub fired when an error occurs<br>
 * </blockquote>
 * @param {mixed} msg 
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.onError=function(msg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired at the end of a media file.<br>
 * </blockquote>
 * @param {Array} events 
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.onComplete=function(events){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub fired<br>
 * </blockquote>
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.onAllLoaded=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a media object to the playlist<br>
 *	 ***This can be called repeatedly to add multiple items.<br>
 * </blockquote>
 * @param {Object} options url: String
 * (required) path to MP3 media<br>
 * url must be absolute or relative to SWF,<br>
 * not dojo or the html. An effort will be made<br>
 * to fix incorrect paths.<br>
 * id: String<br>
 * (optional) an identifier to later determine<br>
 * which media to control.<br>
 * 
 * @returns {String} -audio.
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.load=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the media.<br>
 * </blockquote>
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.init=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get media volume, based on identifier in<br>
 *	 the options passed.<br>
 * </blockquote>
 * @param {Object} options index:Number OR id:String OR url:String
 * See doPlay()
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.getVolume=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the current time.<br>
 * </blockquote>
 * @param {Object} options index:Number OR id:String OR url:String
 * See doPlay()
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.getPosition=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set media pan, based on identifier in<br>
 *	 the options passed.<br>
 * </blockquote>
 * @param {Object} options index:Number OR id:String OR url:String
 * See doPlay()
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.getPan=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tell media to play, based on<br>
 *	 the options passed.<br>
 * </blockquote>
 * @param {Object} options volume: Number
 * Sets the volume<br>
 * pan: Number<br>
 * Sets left/right pan<br>
 * index:Number OR id:String OR url:String<br>
 * Choose one of the above to indentify<br>
 * the media you wish to control. id is<br>
 * set by you. index is the order in which<br>
 * media was added (zero based)<br>
 * NOTE: lack of an identifier will default<br>
 * to first (or only) item.<br>
 * NOTE: Can't name this method &quot;play()&quot; as it causes<br>
 * an IE error.
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.doPlay=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 destroys flash<br>
 * </blockquote>
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 helper for subscribing to topics<br>
 * </blockquote>
 * @param {mixed} topic 
 * @param {mixed} method 
 * @private
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype._sub=function(topic, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ensures volume is less than one<br>
 * </blockquote>
 * @param {mixed} vol 
 * @private
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype._normalizeVolume=function(vol){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks that path is relative to HTML file or<br>
 *	 convertes it to an absolute path.<br>
 * </blockquote>
 * @param {mixed} _url 
 * @private
 * @memberOf dojox.av.FLAudio
*/
dojox.av.FLAudio.prototype._normalizeUrl=function(_url){};
/**
 * @param {mixed} err 
 * @memberOf dojox.av.FLAudio._flashObject
*/
dojox.av.FLAudio._flashObject.prototype.onError=function(err){};
/**
 * <b>Summary:</b><blockquote>
 *	 Inserts a Flash FLV video into the HTML page and provides methods<br>
 *	 and events for controlling the video. Also plays the H264/M4V codec<br>
 *	 with a little trickery: change the '.M4V' extension to '.flv'.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dojox.av._Media
 * @param {Object} options 
 * @returns {dojox.av.FLVideo} new instance
 * @example
 * markup:
 * 	&lt;div id="vid" initialVolume=".7",
 * 		mediaUrl="../resources/Grog.flv"
 * 		dojoType="dojox.av.FLVideo"&gt;&lt;/div&gt;
 * programmatic:
 * 	new dojox.av.FLVideo({
 * 		initialVolume:.7,
 * 		mediaUrl:"../resources/Grog.flv"
 * 	}, "vid");
 * 
 * mediaUrl: String
 * REQUIRED: The Url of the video file that will be played.
 * NOTE: Must be either an absolute URL or relative to the HTML file.
 * Relative paths will be converted to abslute paths
*/
dojox.av.FLVideo=function(options){};
/**
 * @namespace
 * @private
*/
dojox.av.FLVideo._flashObject={};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the volume of the video to the time in the<br>
 *	 argument - between 0 - 1.<br>
 * </blockquote>
 * @param {Float} vol 
 * @returns {Float} -
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.volume=function(vol){};
/**
 * <b>Summary:</b><blockquote>
 *	 Goes to the time passed in the argument<br>
 * </blockquote>
 * @param {Float} time 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.seek=function(time){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the media.<br>
 * </blockquote>
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Plays the video. If an url is passed in, plays the new link.<br>
 * </blockquote>
 * @param {String} [newUrl] 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.play=function(newUrl){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pauses the video<br>
 * </blockquote>
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.pause=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on SWF resize, or when its<br>
 *	 toggled between fullscreen.<br>
 * </blockquote>
 * @param {mixed} data 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onSwfSized=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fire when the Stop button is clicked<br>
 *	 TODO: 	This is not hooked up yet and shouldn't<br>
 *	 fire.<br>
 * </blockquote>
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onStop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Simple status<br>
 * </blockquote>
 * @param {mixed} data 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onStatus=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires when video starts<br>
 *	 Good for setting the play button to pause<br>
 *	 during an autoPlay for example<br>
 * </blockquote>
 * @param {mixed} data 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onStart=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on page resize<br>
 * </blockquote>
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onResize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The position of the playhead in seconds<br>
 * </blockquote>
 * @param {mixed} time 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onPosition=function(time){};
/**
 * <b>Summary:</b><blockquote>
 *	 The status of the video from the SWF<br>
 *	 playing, stopped, bufering, etc.<br>
 * </blockquote>
 * @param {mixed} data 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onPlayerStatus=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires when video starts and resumes<br>
 * </blockquote>
 * @param {mixed} data 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onPlay=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires when the pause button is clicked<br>
 * </blockquote>
 * @param {mixed} data 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onPause=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 The video properties. Width, height, duration, etc.<br>
 *	 NOTE: 	if data is empty, this is an older FLV with no meta data.<br>
 *	 Duration cannot be determined. In original FLVs, duration<br>
 *	 could only be obtained with Flash Media Server.<br>
 *	 NOTE: 	Older FLVs can still return width and height<br>
 *	 and will do so on a second event call<br>
 * </blockquote>
 * @param {mixed} data 
 * @param {mixed} evt 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onMetaData=function(data, evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired when the SWF player has loaded<br>
 *	 NOT when the video has loaded<br>
 * </blockquote>
 * @param {mixed} mov 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onLoad=function(mov){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired when the player encounters an error<br>
 * </blockquote>
 * @param {mixed} data 
 * @param {mixed} url 
 * @example
 *  console.warn("ERROR-"+data.type.toUpperCase()+":",
 * 		data.info.code, " - URL:", url);
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onError=function(data, url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires when video ends<br>
 *	 Could be used to change pause button to play<br>
 *	 or show a post video graphic, like YouTube<br>
 * </blockquote>
 * @param {mixed} data 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onEnd=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires the amount of that the media has been<br>
 *	 downloaded. Number, 0-100<br>
 * </blockquote>
 * @param {mixed} percent 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onDownloaded=function(percent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires when the player is clicked<br>
 *	 Could be used to toggle play/pause, or<br>
 *	 do an external activity, like opening a new<br>
 *	 window.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires a boolean to tell if media<br>
 *	 is paused for buffering or if buffering<br>
 *	 has finished<br>
 * </blockquote>
 * @param {mixed} isBuffering 
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.onBuffer=function(isBuffering){};
/**
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function to fire onPosition, check download progress,<br>
 *	 and check buffer.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype._update=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks that there is a proper buffer time between<br>
 *	 current playhead time and the amount of data loaded.<br>
 *	 Works only on FLVs with a duration (not older). Pauses<br>
 *	 the video while continuing download.<br>
 * </blockquote>
 * @param {Float} time 
 * @param {Float} bufferLength 
 * @private
 * @memberOf dojox.av.FLVideo
*/
dojox.av.FLVideo.prototype._checkBuffer=function(time, bufferLength){};
/**
 * @param {mixed} err 
 * @memberOf dojox.av.FLVideo._flashObject
*/
dojox.av.FLVideo._flashObject.prototype.onError=function(err){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used as a mixin for dojox and AIR media<br>
 * </blockquote>
 * Calculates the current status of the playing media and fires<br>
 * the appropriate events.
 * @class
 * @returns {dojox.av._Media} new instance
*/
dojox.av._Media=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on SWF resize, or when its<br>
 *	 toggled between fullscreen.<br>
 * </blockquote>
 * @param {Object} data 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onSwfSized=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fire when the Stop button is clicked<br>
 *	 TODO: 	This is not hooked up yet and shouldn't<br>
 *	 fire.<br>
 * </blockquote>
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onStop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Simple status<br>
 * </blockquote>
 * @param {Object} data 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onStatus=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires when video starts<br>
 *	 Good for setting the play button to pause<br>
 *	 during an autoPlay for example<br>
 * </blockquote>
 * @param {Object} data 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onStart=function(data){};
/**
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onResize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The position of the playhead in seconds<br>
 * </blockquote>
 * @param {Float} time 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onPosition=function(time){};
/**
 * <b>Summary:</b><blockquote>
 *	 The status of the video from the SWF<br>
 *	 playing, stopped, bufering, etc.<br>
 * </blockquote>
 * @param {Object} data 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onPlayerStatus=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires when video starts and resumes<br>
 * </blockquote>
 * @param {Object} data 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onPlay=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires when the pause button is clicked<br>
 * </blockquote>
 * @param {Object} data 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onPause=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 The video properties. Width, height, duration, etc.<br>
 *	 NOTE: 	if data is empty, this is an older FLV with no meta data.<br>
 *	 Duration cannot be determined. In original FLVs, duration<br>
 *	 could only be obtained with Flash Media Server.<br>
 *	 NOTE: 	Older FLVs can still return width and height<br>
 *	 and will do so on a second event call<br>
 * </blockquote>
 * @param {Object} data 
 * @param {Object} evt 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onMetaData=function(data, evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired when the SWF player has loaded<br>
 *	 NOT when the video has loaded<br>
 * </blockquote>
 * @param {SWF} mov 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onLoad=function(mov){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired when the player encounters an error<br>
 * </blockquote>
 * @param {Object} data 
 * @param {String} url 
 * @example
 *  console.warn("ERROR-"+data.type.toUpperCase()+":",
 * 		data.info.code, " - URL:", url);
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onError=function(data, url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires when video ends<br>
 *	 Could be used to change pause button to play<br>
 *	 or show a post video graphic, like YouTube<br>
 * </blockquote>
 * @param {Object} data 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onEnd=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires the amount of that the media has been<br>
 *	 downloaded. Number, 0-100<br>
 * </blockquote>
 * @param {Number} percent 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onDownloaded=function(percent){};
/**
 * <b>Summary:</b><blockquote>
 *	 TODO: Return x/y of click<br>
 *	 Fires when the player is clicked<br>
 *	 Could be used to toggle play/pause, or<br>
 *	 do an external activity, like opening a new<br>
 *	 window.<br>
 * </blockquote>
 * @param {Object} evt 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires a boolean to tell if media<br>
 *	 is paused for buffering or if buffering<br>
 *	 has finished<br>
 * </blockquote>
 * @param {Boolean} isBuffering 
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.onBuffer=function(isBuffering){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the current time of the video<br>
 *	 Note:<br>
 *	 Consider the onPosition event, which returns<br>
 *	 the time at a set interval. Too many trips to<br>
 *	 the SWF could impact performance.<br>
 * </blockquote>
 * @returns {Float} -
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.getTime=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 destroys flash<br>
 * </blockquote>
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 helper for subscribing to topics<br>
 * </blockquote>
 * @param {mixed} topic 
 * @param {mixed} method 
 * @private
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype._sub=function(topic, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ensures volume is less than one<br>
 * </blockquote>
 * @param {mixed} vol 
 * @private
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype._normalizeVolume=function(vol){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks that path is relative to HTML file or<br>
 *	 convertes it to an absolute path.<br>
 * </blockquote>
 * @param {mixed} _url 
 * @private
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype._normalizeUrl=function(_url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect mediaStatus to the media.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype._initStatus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate media status, based on playhead movement, and<br>
 *	 onStop and onStart events<br>
 *	 TODO:<br>
 *	 Figure in real status from the media for more accurate results.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype._figureStatus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a generic event object.<br>
 * </blockquote>
 * @private
 * @returns {Object} -
 * @memberOf dojox.av._Media
*/
dojox.av._Media.prototype._eventFactory=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A volume widget to use with dojox.av.widget.Player<br>
 * </blockquote>
 * Controls and displays the volume of the media. This widget<br>
 * opens a slider on click that is used to adjust the volume.<br>
 * The icon changes according to the volume level.<br>
*/
dojox.av.widget.VolumeButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Status widget to use with dojox.av.widget.Player<br>
 * </blockquote>
 * Displays the name of the media file, and it's current status<br>
 * (playing, paused, buffering, etc.) in the middle. Displays<br>
 * the playhead time on the left and the duration on the right.<br>
*/
dojox.av.widget.Status=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A custom slider widget to use with dojox.av.widget.Player.<br>
 * </blockquote>
 * Displays the current playhead position of the media. Has two<br>
 * progress bars: one for playhead position, and one for download<br>
 * progress.<br>
*/
dojox.av.widget.ProgressSlider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Media Player UI widget for all types of dojox.av and AIR media.<br>
 * </blockquote>
 * Currently for markup only. All controls should reside as child<br>
 * nodes within the Player node. 'controlType' is used to determine<br>
 * the placement of the control. If no type or an unrecoginized type<br>
 * is used, it will be left-aligned in the same row as the volume.<br>
 * Note:<br>
 * Be sure to use 'controlType' as a node attribute. It is not a<br>
 * property of the widget.
 * @example
 * 	&lt;div dojoType="dojox.av.widget.Player" playerWidth="100%"&gt;
 *  		&lt;div controlType="video" initialVolume=".1"
 *  			mediaUrl="video/Grog.flv" autoPlay="true"
 * 			isDebug="false" dojoType="dojox.av.FLVideo"&gt;&lt;/div&gt;
 *	  	&lt;div controlType="play" dojoType="dojox.av.widget.PlayButton"&gt;&lt;/div&gt;
 *	  	&lt;div controlType="volume" dojoType="dojox.av.widget.VolumeButton"&gt;&lt;/div&gt;
 *	  	&lt;div controlType="progress" dojoType="dojox.av.widget.ProgressSlider"&gt;&lt;/div&gt;
 *	  	&lt;div controlType="status" dojoType="dojox.av.widget.Status"&gt;&lt;/div&gt;
 *  &lt;/div&gt;
*/
dojox.av.widget.Player=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Play/Pause button widget to use with dojox.av.widget.Player<br>
 * </blockquote>
*/
dojox.av.widget.PlayButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Play/Pause button widget to use with dojox.av.widget.Player<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.av.widget.PlayButton} new instance
*/
dojox.av.widget.PlayButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Toggles the pause button invisible and the play<br>
 *	 button visible..<br>
 * </blockquote>
 * @memberOf dojox.av.widget.PlayButton
*/
dojox.av.widget.PlayButton.prototype.showPlay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Toggles the play button invisible and the pause<br>
 *	 button visible.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.PlayButton
*/
dojox.av.widget.PlayButton.prototype.showPause=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A common method to set the media in all Player widgets.<br>
 *	 May do connections and initializations.<br>
 * </blockquote>
 * @param {Object} med 
 * @memberOf dojox.av.widget.PlayButton
*/
dojox.av.widget.PlayButton.prototype.setMedia=function(med){};
/**
 * <b>Summary:</b><blockquote>
 *	 Intialize button.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.PlayButton
*/
dojox.av.widget.PlayButton.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on play click.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.PlayButton
*/
dojox.av.widget.PlayButton.prototype.onPlay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on pause click.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.PlayButton
*/
dojox.av.widget.PlayButton.prototype.onPause=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on play or pause click.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.PlayButton
*/
dojox.av.widget.PlayButton.prototype.onClick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Media Player UI widget for all types of dojox.av and AIR media.<br>
 * </blockquote>
 * Currently for markup only. All controls should reside as child<br>
 * nodes within the Player node. 'controlType' is used to determine<br>
 * the placement of the control. If no type or an unrecoginized type<br>
 * is used, it will be left-aligned in the same row as the volume.<br>
 * Note:<br>
 * Be sure to use 'controlType' as a node attribute. It is not a<br>
 * property of the widget.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.av.widget.Player} new instance
 * @example
 * 	&lt;div dojoType="dojox.av.widget.Player" playerWidth="100%"&gt;
 *  		&lt;div controlType="video" initialVolume=".1"
 *  			mediaUrl="video/Grog.flv" autoPlay="true"
 * 			isDebug="false" dojoType="dojox.av.FLVideo"&gt;&lt;/div&gt;
 *	  	&lt;div controlType="play" dojoType="dojox.av.widget.PlayButton"&gt;&lt;/div&gt;
 *	  	&lt;div controlType="volume" dojoType="dojox.av.widget.VolumeButton"&gt;&lt;/div&gt;
 *	  	&lt;div controlType="progress" dojoType="dojox.av.widget.ProgressSlider"&gt;&lt;/div&gt;
 *	  	&lt;div controlType="status" dojoType="dojox.av.widget.Status"&gt;&lt;/div&gt;
 *  &lt;/div&gt;
*/
dojox.av.widget.Player=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired when all children are ready. Set the media in<br>
 *	 all children with setMedia()<br>
 * </blockquote>
 * @memberOf dojox.av.widget.Player
*/
dojox.av.widget.Player.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Do player styling, and place child widgets in the proper location.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.Player
*/
dojox.av.widget.Player.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If a player size is a percentage, this will fire an onResize<br>
 *	 event for all children, passing the size of the player.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @memberOf dojox.av.widget.Player
*/
dojox.av.widget.Player.prototype.onResize=function(evt){};
/**
 * @private
 * @memberOf dojox.av.widget.Player
*/
dojox.av.widget.Player.prototype._fillContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A custom slider widget to use with dojox.av.widget.Player.<br>
 * </blockquote>
 * Displays the current playhead position of the media. Has two<br>
 * progress bars: one for playhead position, and one for download<br>
 * progress.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.av.widget.ProgressSlider} new instance
*/
dojox.av.widget.ProgressSlider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired onmousedown of the slider handle.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.ProgressSlider
*/
dojox.av.widget.ProgressSlider.prototype.startDrag=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A common method to set the media in all Player widgets.<br>
 *	 May do connections and initializations.<br>
 * </blockquote>
 * @param {Object} med 
 * @param {mixed} playerWidget 
 * @memberOf dojox.av.widget.ProgressSlider
*/
dojox.av.widget.ProgressSlider.prototype.setMedia=function(med, playerWidget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the download progress bar to the percentage of how much<br>
 *	 the media has been downloaded.<br>
 * </blockquote>
 * @param {mixed} decimal 
 * @memberOf dojox.av.widget.ProgressSlider
*/
dojox.av.widget.ProgressSlider.prototype.setLoadedPosition=function(decimal){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the slider handle (when it is not being dragged)<br>
 * </blockquote>
 * @param {mixed} time 
 * @memberOf dojox.av.widget.ProgressSlider
*/
dojox.av.widget.ProgressSlider.prototype.setHandle=function(time){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize slider.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.ProgressSlider
*/
dojox.av.widget.ProgressSlider.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles player resize. Need to recalculate the width of<br>
 *	 position an download bars.<br>
 * </blockquote>
 * @param {mixed} playerDimensions 
 * @memberOf dojox.av.widget.ProgressSlider
*/
dojox.av.widget.ProgressSlider.prototype.onResize=function(playerDimensions){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired when the mouse is moved. Sets the slider.<br>
 * </blockquote>
 * @param {HTMLEvent} evt 
 * @memberOf dojox.av.widget.ProgressSlider
*/
dojox.av.widget.ProgressSlider.prototype.onDrag=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Highlights the slider handle on mouseover, and<br>
 *	 stays highlighted during drag.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.ProgressSlider
*/
dojox.av.widget.ProgressSlider.prototype.handleOver=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Unhighlights handle onmouseover, or on endDrag.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.ProgressSlider
*/
dojox.av.widget.ProgressSlider.prototype.handleOut=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on document.onmouseup.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.ProgressSlider
*/
dojox.av.widget.ProgressSlider.prototype.endDrag=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Status widget to use with dojox.av.widget.Player<br>
 * </blockquote>
 * Displays the name of the media file, and it's current status<br>
 * (playing, paused, buffering, etc.) in the middle. Displays<br>
 * the playhead time on the left and the duration on the right.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.av.widget.Status} new instance
*/
dojox.av.widget.Status=function(){};
/**
 * @param {mixed} time 
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.toSeconds=function(time){};
/**
 * @param {mixed} str 
 * @param {mixed} isError 
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.setStatus=function(str, isError){};
/**
 * <b>Summary:</b><blockquote>
 *	 A common method to set the media in all Player widgets.<br>
 *	 May do connections and initializations.<br>
 * </blockquote>
 * @param {Object} med 
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.setMedia=function(med){};
/**
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.onStop=function(){};
/**
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.onStart=function(){};
/**
 * @param {mixed} time 
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.onPosition=function(time){};
/**
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.onPlay=function(){};
/**
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.onPaused=function(){};
/**
 * @param {mixed} data 
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.onMetaData=function(data){};
/**
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.onLoad=function(){};
/**
 * @param {mixed} evt 
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.onError=function(evt){};
/**
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.onEnd=function(){};
/**
 * @param {mixed} isBuffering 
 * @memberOf dojox.av.widget.Status
*/
dojox.av.widget.Status.prototype.onBuffer=function(isBuffering){};
/**
 * <b>Summary:</b><blockquote>
 *	 A volume widget to use with dojox.av.widget.Player<br>
 * </blockquote>
 * Controls and displays the volume of the media. This widget<br>
 * opens a slider on click that is used to adjust the volume.<br>
 * The icon changes according to the volume level.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.av.widget.VolumeButton} new instance
*/
dojox.av.widget.VolumeButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes the icon on the button according to volume level.<br>
 * </blockquote>
 * @param {Float} vol 
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.updateIcon=function(vol){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on mousedown of the slider handle.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.startDrag=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A common method to set the media in all Player widgets.<br>
 *	 May do connections and initializations.<br>
 * </blockquote>
 * @param {Object} med 
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.setMedia=function(med){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the widget.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shows the volume slider.<br>
 * </blockquote>
 * @param {DOMEvent} evt 
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.onShowVolume=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on player resize. Zeros dimensions<br>
 *	 so that it can be calculated again.<br>
 * </blockquote>
 * @param {Object} playerDimensions 
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.onResize=function(playerDimensions){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hides volume slider.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.onHideVolume=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on mousemove. Updates volume and position of<br>
 *	 slider handle.<br>
 * </blockquote>
 * @param {DOMEvent} evt 
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.onDrag=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on document.onmousedown. Checks if clicked inside<br>
 *	 of this widget or not.<br>
 * </blockquote>
 * @param {DOMEvent} evt 
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.onDocClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Highlights the slider handle on mouseover, and<br>
 *	 stays highlighted during drag.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.handleOver=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Unhighlights handle onmouseover, or on endDrag.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.handleOut=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired on mouseup of the slider handle.<br>
 * </blockquote>
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype.endDrag=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets dimensions of slider background node.<br>
 *	 Only uses dojo.coords once, unless the page<br>
 *	 or player is resized.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype._getVolumeDim=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets dimensions of slider handle.<br>
 *	 Only uses dojo.marginBox once.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.av.widget.VolumeButton
*/
dojox.av.widget.VolumeButton.prototype._getHandleDim=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A graphing, scientific calculator<br>
 * </blockquote>
*/
dojox.calc._Executor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The dialog layout for a standard 4 function/algebraic calculator<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 insertMinusSign: function(){<br>
 *	 //<br>
 *	 var v = this.subtract.get('label');<br>
 *	 if(v != '(-)' &amp;amp;&amp;amp; this.putInAnsIfTextboxIsHighlighted(this.textboxWidget.textbox)){<br>
 *	 this.insertText(&amp;quot;Ans-&amp;quot;);<br>
 *	 return;<br>
 *	 }<br>
 *	 this.insertText('-');<br>
 *	 },<br>
 * </blockquote>
*/
dojox.calc.Standard=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The dialog layout for making graphs<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 attributes to name the indices of this.array<br>
 * </blockquote>
*/
dojox.calc.Grapher=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The dialog widget for a graphing, scientific calculator<br>
 * </blockquote>
*/
dojox.calc.GraphPro=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The dialog layout for making functions<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 the user can save functions to the writestore<br>
 *	 <br>
 *	 <br>
 *	 users cannot edit the read store contents, but they can use them<br>
 *	 <br>
 *	 <br>
 *	 use the names to get to the function<br>
 * </blockquote>
*/
dojox.calc.FuncGen=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A graphing, scientific calculator<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._TemplatedMixin
 * @returns {dojox.calc._Executor} new instance
*/
dojox.calc._Executor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 this should be overwritten and become a great place for making user predefined functions<br>
 * </blockquote>
 * @memberOf dojox.calc._Executor
*/
dojox.calc._Executor.prototype.onLoad=function(){};
/**
 * @param {mixed} name 
 * @param {mixed} args 
 * @param {mixed} body 
 * @memberOf dojox.calc._Executor
*/
dojox.calc._Executor.prototype.normalizedFunction=function(name, args, body){};
/**
 * @param {mixed} text 
 * @memberOf dojox.calc._Executor
*/
dojox.calc._Executor.prototype.eval=function(text){};
/**
 * @memberOf dojox.calc._Executor
*/
dojox.calc._Executor.prototype.destroy=function(){};
/**
 * @param {mixed} name 
 * @memberOf dojox.calc._Executor
*/
dojox.calc._Executor.prototype.deleteFunction=function(name){};
/**
 * @param {mixed} env 
 * @private
 * @memberOf dojox.calc._Executor
*/
dojox.calc._Executor.prototype._onLoad=function(env){};
/**
 * @param {this} name argument is simply a String that represents the name of the function being evaluated. It can be undefined, but in that case the function is a one time use.
 * @param {the} args function arguments (a String)
 * @param {the} body function body, also a String
 * @memberOf dojox.calc._Executor
*/
dojox.calc._Executor.prototype.Function=function(name, args, body){};
/**
 * @param {mixed} number 
*/
dojox.calc.toFrac=function(number){};
/**
 * <b>Summary:</b><blockquote>
 *	 Computes base ^ exponent<br>
 *	 Wrapper to Math.pow(base, exponent) to handle (-27) ^ (1/3)<br>
 * </blockquote>
 * @param {mixed} base 
 * @param {mixed} exponent 
*/
dojox.calc.pow=function(base, exponent){};
/**
 * <b>Summary:</b><blockquote>
 *	 create the points with information about the graph.<br>
 *	 params:<br>
 *	 funcToGraph is a function with one numeric parameter (x or y typically)<br>
 *	 x and y are Strings which always have the values of &amp;quot;x&amp;quot; or &amp;quot;y&amp;quot;.  If y=&amp;quot;x&amp;quot; and x=&amp;quot;y&amp;quot; then it is creating points for the function as though it was a function of y<br>
 *	 Number minX, Number maxX, Number minY, Number maxY are all bounds of the chart.  If x=&amp;quot;y&amp;quot; then maxY should be the maximum bound of x rather than y<br>
 *	 Number width is the pixel width of the chart<br>
 *	 output:<br>
 *	 an array of arrays of points<br>
 * </blockquote>
 * @param {Function} funcToGraph 
 * @param {String} x 
 * @param {String} y 
 * @param {Number} width 
 * @param {Number} minX 
 * @param {Number} maxX 
 * @param {Number} minY 
 * @param {Number} maxY 
 * @returns {someone pushed cancel in the val code} -
*/
dojox.calc.generatePoints=function(funcToGraph, x, y, width, minX, maxX, minY, maxY){};
/**
 * @param {Chart} chart 
 * @param {Function} functionToGraph 
 * @param {mixed} params 
*/
dojox.calc.draw=function(chart, functionToGraph, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 The dialog layout for making functions<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 the user can save functions to the writestore<br>
 *	 <br>
 *	 <br>
 *	 users cannot edit the read store contents, but they can use them<br>
 *	 <br>
 *	 <br>
 *	 use the names to get to the function<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.calc.FuncGen} new instance
*/
dojox.calc.FuncGen=function(){};
/**
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.startup=function(){};
/**
 * @param {mixed} name 
 * @param {mixed} args 
 * @param {mixed} body 
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.saveFunction=function(name, args, body){};
/**
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.reset=function(){};
/**
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.readyStatus=function(){};
/**
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.onSelect=function(){};
/**
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.onSaved=function(){};
/**
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.onReset=function(){};
/**
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.onDelete=function(){};
/**
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.onClear=function(){};
/**
 * @param {mixed} item 
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.deleteThing=function(item){};
/**
 * @param {mixed} name 
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.deleteFunction=function(name){};
/**
 * @memberOf dojox.calc.FuncGen
*/
dojox.calc.FuncGen.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The dialog layout for making graphs<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 attributes to name the indices of this.array<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.calc.Grapher} new instance
*/
dojox.calc.Grapher=function(){};
/**
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the status of the row i to be status<br>
 *	 params:<br>
 *	 i is an integer index of this.array as well as a row index<br>
 *	 status is a String, it is either Error, Hidden, or Drawn<br>
 * </blockquote>
 * @param {mixed} i 
 * @param {mixed} status 
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.setStatus=function(i, status){};
/**
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.selectAll=function(){};
/**
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 the erase button's onClick method<br>
 *	 it see's if the checkbox is checked and then erases it if it is.<br>
 * </blockquote>
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.onErase=function(){};
/**
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.onDraw=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 the delete button's onClick method<br>
 *	 delete all of the selected rows<br>
 * </blockquote>
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.onDelete=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 if something in the window options is changed, this is called<br>
 * </blockquote>
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.makeDirty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 erase the chart inside this.array with the index i<br>
 *	 params:<br>
 *	 i is the integer index to this.array that represents the current row number in the table<br>
 * </blockquote>
 * @param {mixed} i 
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.erase=function(i){};
/**
 * @param {mixed} i 
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.drawOne=function(i){};
/**
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.deselectAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 create a new row in the table with all of the dojo objects.<br>
 * </blockquote>
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.createFunction=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 to stay in sync with onChange, checkDirty is called with a timeout<br>
 * </blockquote>
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.checkDirty1=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 adjust all charts in this.array according to any changes in window options<br>
 * </blockquote>
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.checkDirty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 make the color of the chart the new color<br>
 *	 the context is changed to the colorPalette, and a reference to chart was added to it a an attribute<br>
 * </blockquote>
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.changedColor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 add or re-add the default x/y axes to the Chart provided<br>
 *	 params:<br>
 *	 chart is an instance of dojox.charting.Chart<br>
 * </blockquote>
 * @param {mixed} chart 
 * @memberOf dojox.calc.Grapher
*/
dojox.calc.Grapher.prototype.addXYAxes=function(chart){};
/**
 * <b>Summary:</b><blockquote>
 *	 The dialog widget for a graphing, scientific calculator<br>
 * </blockquote>
 * @class
 * @extends dojox.calc.Standard
 * @returns {dojox.calc.GraphPro} new instance
*/
dojox.calc.GraphPro=function(){};
/**
 * @memberOf dojox.calc.GraphPro
*/
dojox.calc.GraphPro.prototype.makeGrapherWindow=function(){};
/**
 * @memberOf dojox.calc.GraphPro
*/
dojox.calc.GraphPro.prototype.makeFunctionWindow=function(){};
/**
 * @memberOf dojox.calc.GraphPro
*/
dojox.calc.GraphPro.prototype.executorLoaded=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The dialog layout for a standard 4 function/algebraic calculator<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 insertMinusSign: function(){<br>
 *	 //<br>
 *	 var v = this.subtract.get('label');<br>
 *	 if(v != '(-)' &amp;amp;&amp;amp; this.putInAnsIfTextboxIsHighlighted(this.textboxWidget.textbox)){<br>
 *	 this.insertText(&amp;quot;Ans-&amp;quot;);<br>
 *	 return;<br>
 *	 }<br>
 *	 this.insertText('-');<br>
 *	 },<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.calc.Standard} new instance
*/
dojox.calc.Standard=function(){};
/**
 * @param {mixed} widget 
 * @param {mixed} val 
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.setTextboxValue=function(widget, val){};
/**
 * @param {mixed} name 
 * @param {mixed} args 
 * @param {mixed} body 
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.saveFunction=function(name, args, body){};
/**
 * @param {mixed} node 
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.putInAnsIfTextboxIsHighlighted=function(node){};
/**
 * @param {mixed} text 
 * @param {mixed} isRight 
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.print=function(text, isRight){};
/**
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.postCreate=function(){};
/**
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.parseTextbox=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.onKeyPress=function(e){};
/**
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.onBlur=function(){};
/**
 * @param {mixed} store 
 * @param {mixed} isReadOnly 
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.loadStore=function(store, isReadOnly){};
/**
 * @param {mixed} newText 
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.insertText=function(newText){};
/**
 * @param {mixed} newText 
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.insertOperator=function(newText){};
/**
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.insertMinus=function(){};
/**
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.executorLoaded=function(){};
/**
 * @param {mixed} count 
 * @param {mixed} node 
 * @param {mixed} event 
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.cycleCommands=function(count, node, event){};
/**
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.cycleCommandUp=function(){};
/**
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.cycleCommandDown=function(){};
/**
 * @memberOf dojox.calc.Standard
*/
dojox.calc.Standard.prototype.clearText=function(){};
/**
 * @namespace
*/
dojox.charting.action2d={};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for mouse zoom and pan actions.<br>
 * </blockquote>
 * @private
*/
dojox.charting.action2d.__TouchZoomAndPanCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for Touch indicator.<br>
 * </blockquote>
 * @private
*/
dojox.charting.action2d.__TouchIndicatorCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for tooltip actions.<br>
 * </blockquote>
 * @private
*/
dojox.charting.action2d.__TooltipCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for highlighting actions.<br>
 * </blockquote>
 * @private
*/
dojox.charting.action2d.__ShakeCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base keyword arguments object for creating an action2d.<br>
 * </blockquote>
 * @param {Number} [duration] The amount of time in milliseconds for an animation to last.  Default is 400.
 * @param {dojo.fx.easing.*} [easing] An easing object (see dojo.fx.easing) for use in an animation.  The
 * default is dojo.fx.easing.backOut.
 * @private
*/
dojox.charting.action2d.__PlotActionCtorArgs=function(duration, easing){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for highlighting actions.<br>
 * </blockquote>
 * @private
*/
dojox.charting.action2d.__MoveSliceCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for mouse zoom and pan actions.<br>
 * </blockquote>
 * @private
*/
dojox.charting.action2d.__MouseZoomAndPanCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for mouse indicator.<br>
 * </blockquote>
 * @private
*/
dojox.charting.action2d.__MouseIndicatorCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for highlighting actions.<br>
 * </blockquote>
 * @private
*/
dojox.charting.action2d.__MagnifyCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for highlighting actions.<br>
 * </blockquote>
 * @private
*/
dojox.charting.action2d.__HighlightCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal element used by indicator actions.<br>
 * </blockquote>
 * @param {mixed} chart 
 * @param {mixed} kwArgs 
*/
dojox.charting.action2d._IndicatorElement=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Private internal class used by TouchZoomAndPan actions.<br>
 * </blockquote>
 * @param {mixed} chart 
*/
dojox.charting.action2d._GlassView=function(chart){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a touch zoom and pan action.<br>
 *	 You can zoom out or in the data window with pinch and spread gestures. You can scroll using drag gesture.<br>
 *	 Finally this is possible to navigate between a fit window and a zoom one using double tap gesture.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {mixed} plot 
 * @param {dojox.charting.action2d.__TouchZoomAndPanCtorArgs} [kwArgs] Optional arguments for the action.
*/
dojox.charting.action2d.TouchZoomAndPan=function(chart, plot, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a touch indicator action. You can touch over the chart to display a data indicator.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {mixed} plot 
 * @param {dojox.charting.action2d.__TouchIndicatorCtorArgs} [kwArgs] Optional arguments for the chart action.
*/
dojox.charting.action2d.TouchIndicator=function(chart, plot, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create an action on a plot where a tooltip is shown when hovering over an element.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action belongs to.
 * @param {String} [plot] The plot this action is attached to.  If not passed, &quot;default&quot; is assumed.
 * @param {dojox.charting.action2d.__TooltipCtorArgs} [kwArgs] Optional keyword arguments object for setting parameters.
*/
dojox.charting.action2d.Tooltip=function(chart, plot, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a shaking action for use on an element in a chart.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action belongs to.
 * @param {String} [plot] The plot this action is attached to.  If not passed, &quot;default&quot; is assumed.
 * @param {dojox.charting.action2d.__ShakeCtorArgs} [kwArgs] Optional keyword arguments object for setting parameters.
*/
dojox.charting.action2d.Shake=function(chart, plot, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base action class for plot actions.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {String} [plot] The name of the plot this action belongs to.  If none is passed &quot;default&quot; is assumed.
 * @param {dojox.charting.action2d.__PlotActionCtorArgs} [kwargs] Optional arguments for the action.
*/
dojox.charting.action2d.PlotAction=function(chart, plot, kwargs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create an action for a pie chart that moves and scales a pie slice.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action belongs to.
 * @param {String} [plot] The plot this action is attached to.  If not passed, &quot;default&quot; is assumed.
 * @param {dojox.charting.action2d.__MoveSliceCtorArgs} [kwArgs] Optional keyword arguments object for setting parameters.
*/
dojox.charting.action2d.MoveSlice=function(chart, plot, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create an mouse zoom and pan action.<br>
 *	 You can zoom in or out the data window with mouse wheel. You can scroll using mouse drag gesture.<br>
 *	 You can toggle between zoom and fit view using double click on the chart.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {mixed} plot 
 * @param {dojox.charting.action2d.__MouseZoomAndPanCtorArgs} [kwArgs] Optional arguments for the chart action.
*/
dojox.charting.action2d.MouseZoomAndPan=function(chart, plot, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a mouse indicator action. You can drag mouse over the chart to display a data indicator.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {mixed} plot 
 * @param {dojox.charting.action2d.__MouseIndicatorCtorArgs} [kwArgs] Optional arguments for the chart action.
*/
dojox.charting.action2d.MouseIndicator=function(chart, plot, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create an action that magnifies the object the action is applied to.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action belongs to.
 * @param {String} [plot] The plot to apply the action to. If not passed, &quot;default&quot; is assumed.
 * @param {dojox.charting.action2d.__MagnifyCtorArgs} [kwArgs] Optional keyword arguments for this action.
*/
dojox.charting.action2d.Magnify=function(chart, plot, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a highlighting action on a plot, where an element on that plot<br>
 *	 has a highlight on it.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action belongs to.
 * @param {String} [plot] The plot this action is attached to.  If not passed, &quot;default&quot; is assumed.
 * @param {charting.action2d.__HighlightCtorArgs} [kwArgs] Optional keyword arguments object for setting parameters.
*/
dojox.charting.action2d.Highlight=function(chart, plot, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base action class for chart actions.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {String|dojox.charting.plot2d.Base} [plot] Optional target plot for this chart action.  Default is &quot;default&quot;.
*/
dojox.charting.action2d.ChartAction=function(chart, plot){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base action class for plot and chart actions.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {String|dojox.charting.plot2d.Base} [plot] Optional target plot for this action.  Default is &quot;default&quot;.
*/
dojox.charting.action2d.Base=function(chart, plot){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base action class for plot and chart actions.<br>
 * </blockquote>
 * @class
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {String|dojox.charting.plot2d.Base} [plot] Optional target plot for this action.  Default is &quot;default&quot;.
 * @returns {dojox.charting.action2d.Base} new instance
*/
dojox.charting.action2d.Base=function(chart, plot){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect this action from the plot or the chart.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.Base
*/
dojox.charting.action2d.Base.prototype.disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Do any cleanup needed when destroying parent elements.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.Base
*/
dojox.charting.action2d.Base.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect this action to the plot or the chart.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.Base
*/
dojox.charting.action2d.Base.prototype.connect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An optional arguments object that can be used in the Series constructor.<br>
 * </blockquote>
 * @param {String} [plot] The plot (by name) that this series belongs to.
 * @private
*/
dojox.charting.__SeriesCtorArgs=function(plot){};
/**
 * <b>Summary:</b><blockquote>
 *	 The keyword arguments that can be passed in a Chart constructor.<br>
 * </blockquote>
 * @param {Object} [margins] Optional margins for the chart, in the form of { l, t, r, b}.
 * @param {dojox.gfx.Stroke} [stroke] An optional outline/stroke for the chart.
 * @param {dojox.gfx.Fill} [fill] An optional fill for the chart.
 * @param {Number} delayInMs Delay in ms for delayedRender(). Default: 200.
 * @private
*/
dojox.charting.__ChartCtorArgs=function(margins, stroke, fill, delayInMs){};
/**
 * <b>Summary:</b><blockquote>
 *	 The keyword arguments that can be passed in a Chart constructor.<br>
 * </blockquote>
 * @param {Node} node The DOM node to construct the chart on.
 * @param {Lighting} lights properties for the 3d scene
 * @param {Object} camera Camera properties describing the viewing camera position.
 * @param {Object} theme Charting theme to use for coloring chart elements.
 * @private
*/
dojox.charting.__Chart3DCtorArgs=function(node, lights, camera, theme){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Theme is a pre-defined object, primarily JSON-based, that makes up the definitions to<br>
 *	 style a chart.<br>
 * </blockquote>
 * While you can set up style definitions on a chart directly (usually through the various add methods<br>
 * on a dojox.charting.Chart object), a Theme simplifies this manual setup by allowing you to<br>
 * pre-define all of the various visual parameters of each element in a chart.<br>
 * <br>
 * Most of the properties of a Theme are straight-forward; if something is line-based (such as<br>
 * an axis or the ticks on an axis), they will be defined using basic stroke parameters.  Likewise,<br>
 * if an element is primarily block-based (such as the background of a chart), it will be primarily<br>
 * fill-based.<br>
 * <br>
 * In addition (for convenience), a Theme definition does not have to contain the entire JSON-based<br>
 * structure.  Each theme is built on top of a default theme (which serves as the basis for the theme<br>
 * "GreySkies"), and is mixed into the default theme object.  This allows you to create a theme based,<br>
 * say, solely on colors for data series.<br>
 * <br>
 * Defining a new theme is relatively easy; see any of the themes in dojox.charting.themes for examples<br>
 * on how to define your own.<br>
 * <br>
 * When you set a theme on a chart, the theme itself is deep-cloned.  This means that you cannot alter<br>
 * the theme itself after setting the theme value on a chart, and expect it to change your chart.  If you<br>
 * are looking to make alterations to a theme for a chart, the suggestion would be to create your own<br>
 * theme, based on the one you want to use, that makes those alterations before it is applied to a chart.<br>
 * <br>
 * Finally, a Theme contains a number of functions to facilitate rendering operations on a chart--the main<br>
 * helper of which is the ~next~ method, in which a chart asks for the information for the next data series<br>
 * to be rendered.<br>
 * <br>
 * A note on colors:<br>
 * The Theme constructor was on the use of dojox.color.Palette (in general) for creating a visually distinct<br>
 * set of colors for usage in a chart.  A palette is usually comprised of 5 different color definitions, and<br>
 * no more.  If you have a need to render a chart with more than 5 data elements, you can simply "push"<br>
 * new color definitions into the theme's .color array.  Make sure that you do that with the actual<br>
 * theme object from a Chart, and not in the theme itself (i.e. either do that before using .setTheme<br>
 * on a chart).
 * @param {mixed} kwArgs 
 * @example
 * The default theme (and structure) looks like so:
 * 	// all objects are structs used directly in dojox.gfx
 * 	chart:{
 * 		stroke: null,
 * 		fill: "white",
 * 		pageStyle: null // suggested page style as an object suitable for dojo.style()
 * 	},
 * 	plotarea:{
 * 		stroke: null,
 * 		fill: "white"
 * 	},
 * 	axis:{
 * 		stroke:	{ // the axis itself
 * 			color: "#333",
 * 			width: 1
 * 		},
 * 		tick: {	// used as a foundation for all ticks
 * 			color:	 "#666",
 * 			position:  "center",
 * 			font:	  "normal normal normal 7pt Tahoma",	// labels on axis
 * 			fontColor: "#333"								// color of labels
 * 		},
 * 		majorTick:	{ // major ticks on axis, and used for major gridlines
 * 			width:  1,
 * 			length: 6
 * 		},
 * 		minorTick:	{ // minor ticks on axis, and used for minor gridlines
 * 			width:  0.8,
 * 			length: 3
 * 		},
 * 		microTick:	{ // minor ticks on axis, and used for minor gridlines
 * 			width:  0.5,
 * 			length: 1
 * 		}
 * 	},
 * 	series: {
 * 		stroke:  {width: 1.5, color: "#333"},		// line
 * 		outline: {width: 0.1, color: "#ccc"},		// outline
 * 		//shadow:  {dx: 1, dy: 1, width: 2, color: [0, 0, 0, 0.3]},
 * 		shadow: null,								// no shadow
 * 		fill:	"#ccc",							// fill, if appropriate
 * 		font:	"normal normal normal 8pt Tahoma",	// if there's a label
 * 		fontColor: "#000"							// color of labels
 * 		labelWiring: {width: 1, color: "#ccc"},		// connect marker and target data item(slice, column, bar...)
 * 	},
 * 	marker: {	// any markers on a series
 * 		symbol:  "m-3,3 l3,-6 3,6 z",				// symbol
 * 		stroke:  {width: 1.5, color: "#333"},		// stroke
 * 		outline: {width: 0.1, color: "#ccc"},		// outline
 * 		shadow: null,								// no shadow
 * 		fill:	"#ccc",							// fill if needed
 * 		font:	"normal normal normal 8pt Tahoma",	// label
 * 		fontColor: "#000"
 * 	},
 * 	indicator: {
 * 		lineStroke:  {width: 1.5, color: "#333"},		// line
 * 		lineOutline: {width: 0.1, color: "#ccc"},		// line outline
 * 		lineShadow: null,								// no line shadow
 * 		stroke:  {width: 1.5, color: "#333"},			// label background stroke
 * 		outline: {width: 0.1, color: "#ccc"},			// label background outline
 * 		shadow: null,									// no label background shadow
 * 		fill:  "#ccc",									// label background fill
 * 		radius: 3,										// radius of the label background
 * 		font:	"normal normal normal 10pt Tahoma",	// label font
 * 		fontColor: "#000"								// label color
 * 		markerFill:	"#ccc",							// marker fill
 * 		markerSymbol:  "m-3,0 c0,-4 6,-4 6,0 m-6,0 c0,4 6,4 6,0",	// marker symbol
 * 		markerStroke:  {width: 1.5, color: "#333"},		// marker stroke
 * 		markerOutline: {width: 0.1, color: "#ccc"},		// marker outline
 * 		markerShadow: null,								// no marker shadow
 * 	}
 * @example
 * Defining a new theme is pretty simple:
 * 	dojox.charting.themes.Grasslands = new dojox.charting.Theme({
 * 		colors: [ "#70803a", "#dde574", "#788062", "#b1cc5d", "#eff2c2" ]
 * 	});
 * 
 * 	myChart.setTheme(dojox.charting.themes.Grasslands);
*/
dojox.charting.Theme=function(kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Series adapter for dojo object stores (dojo.store).<br>
 * </blockquote>
 * @param {Object:} store A dojo object store.
 * @param {Object:} kwArgs A store-specific keyword parameters used for querying objects.
 * See dojo.store docs
 * @param {Function|Object|String|Null:} value Function, which takes an object handle, and
 * produces an output possibly inspecting the store's item. Or<br>
 * a dictionary object, which tells what names to extract from<br>
 * an object and how to map them to an output. Or a string, which<br>
 * is a numeric field name to use for plotting. If undefined, null<br>
 * or empty string (the default), &quot;value&quot; field is extracted.<br>
*/
dojox.charting.StoreSeries=function(store, kwArgs, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 An object representing a series of data for plotting on a chart.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart that this series belongs to.
 * @param {Array|Object:} data The array of data points (either numbers or objects) that
 * represents the data to be drawn. Or it can be an object. In<br>
 * the latter case, it should have a property &quot;data&quot; (an array),<br>
 * destroy(), and setSeriesObject().
 * @param {dojox.charting.__SeriesCtorArgs} [kwArgs] An optional keyword arguments object to set details for this series.
*/
dojox.charting.Series=function(chart, data, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 A base class that is used to build other elements of a chart, such as<br>
 *	 a series.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart that this element belongs to.
*/
dojox.charting.Element=function(chart){};
/**
 * <b>Summary:</b><blockquote>
 *	 Series adapter for dojo.data stores.<br>
 * </blockquote>
 * @param {Object:} store A dojo.data store object.
 * @param {Object:} kwArgs A store-specific keyword parameters used for fetching items.
 * See dojo.data.api.Read.fetch().
 * @param {Function|Object|String|Null:} value Function, which takes a store, and an object handle, and
 * produces an output possibly inspecting the store's item. Or<br>
 * a dictionary object, which tells what names to extract from<br>
 * an object and how to map them to an output. Or a string, which<br>
 * is a numeric field name to use for plotting. If undefined, null<br>
 * or empty string (the default), &quot;value&quot; field is extracted.<br>
*/
dojox.charting.DataSeries=function(store, kwArgs, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 DataChart<br>
 *	 Extension to the 2D chart that connects to a data store in<br>
 *	 a simple manner. Convenience methods have been added for<br>
 *	 connecting store item labels to the chart labels.<br>
 * </blockquote>
 * This code should be considered very experimental and the APIs subject<br>
 * to change. This is currently an alpha version and will need some testing<br>
 * and review.<br>
 * <br>
 * The main reason for this extension is to create animated charts, generally<br>
 * available with scroll=true, and a property field that gets continually updated.<br>
 * The previous property settings are kept in memory and displayed until scrolled<br>
 * off the chart.<br>
 * <br>
 * Although great effort was made to maintain the integrity of the current<br>
 * charting APIs, some things have been added or modified in order to get<br>
 * the store to connect and also to get the data to scroll/animate.<br>
 * "displayRange" in particular is used to force the xaxis to a specific<br>
 * size and keep the chart from stretching or squashing to fit the data.<br>
 * <br>
 * Currently, plot lines can only be set at initialization. Setting<br>
 * a new store query will have no effect (although using setStore<br>
 * may work but its untested).
 * @param {DomNode} node The node to attach the chart to.
 * @param {Object} kwArgs 
 * @example
 * 	var chart = new dojox.charting.DataChart("myNode", {
 * 		displayRange:8,
 * 		store:dataStore,
 * 		query:{symbol:"*"},
 * 		fieldName:"price"
 * 		type: dojox.charting.plot2d.Columns
 * 	});
 * 
 * properties:
*/
dojox.charting.DataChart=function(node, kwArgs){};
/**
 * @param {mixed} node 
 * @param {mixed} lights 
 * @param {mixed} camera 
 * @param {mixed} theme 
*/
dojox.charting.Chart3D=function(node, lights, camera, theme){};
/**
 * <b>Summary:</b><blockquote>
 *	 The main chart object in dojox.charting.  This will create a two dimensional<br>
 *	 chart based on dojox.gfx.<br>
 * </blockquote>
 * dojox.charting.Chart is the primary object used for any kind of charts.  It<br>
 * is simple to create--just pass it a node reference, which is used as the<br>
 * container for the chart--and a set of optional keyword arguments and go.<br>
 * <br>
 * Note that like most of dojox.gfx, most of dojox.charting.Chart's methods are<br>
 * designed to return a reference to the chart itself, to allow for functional<br>
 * chaining.  This makes defining everything on a Chart very easy to do.
 * @param {DOMNode} node 
 * @param {dojox.charting.__ChartCtorArgs} [kwArgs] 
 * @example
 * Create an area chart, with smoothing.
 * 	new dojox.charting.Chart(node))
 * 		.addPlot("default", { type: "Areas", tension: "X" })
 * 		.setTheme(dojox.charting.themes.Shrooms)
 * 		.addSeries("Series A", [1, 2, 0.5, 1.5, 1, 2.8, 0.4])
 * 		.addSeries("Series B", [2.6, 1.8, 2, 1, 1.4, 0.7, 2])
 * 		.addSeries("Series C", [6.3, 1.8, 3, 0.5, 4.4, 2.7, 2])
 * 		.render();
 * @example
 * The form of data in a data series can take a number of forms: a simple array,
 * an array of objects {x,y}, or something custom (as determined by the plot).
 * Here's an example of a Candlestick chart, which expects an object of
 * { open, high, low, close }.
 * 	new dojox.charting.Chart(node))
 * 		.addPlot("default", {type: "Candlesticks", gap: 1})
 * 		.addAxis("x", {fixLower: "major", fixUpper: "major", includeZero: true})
 * 		.addAxis("y", {vertical: true, fixLower: "major", fixUpper: "major", natural: true})
 * 		.addSeries("Series A", [
 * 				{ open: 20, close: 16, high: 22, low: 8 },
 * 				{ open: 16, close: 22, high: 26, low: 6, mid: 18 },
 * 				{ open: 22, close: 18, high: 22, low: 11, mid: 21 },
 * 				{ open: 18, close: 29, high: 32, low: 14, mid: 27 },
 * 				{ open: 29, close: 24, high: 29, low: 13, mid: 27 },
 * 				{ open: 24, close: 8, high: 24, low: 5 },
 * 				{ open: 8, close: 16, high: 22, low: 2 },
 * 				{ open: 16, close: 12, high: 19, low: 7 },
 * 				{ open: 12, close: 20, high: 22, low: 8 },
 * 				{ open: 20, close: 16, high: 22, low: 8 },
 * 				{ open: 16, close: 22, high: 26, low: 6, mid: 18 },
 * 				{ open: 22, close: 18, high: 22, low: 11, mid: 21 },
 * 				{ open: 18, close: 29, high: 32, low: 14, mid: 27 },
 * 				{ open: 29, close: 24, high: 29, low: 13, mid: 27 },
 * 				{ open: 24, close: 8, high: 24, low: 5 },
 * 				{ open: 8, close: 16, high: 22, low: 2 },
 * 				{ open: 16, close: 12, high: 19, low: 7 },
 * 				{ open: 12, close: 20, high: 22, low: 8 },
 * 				{ open: 20, close: 16, high: 22, low: 8 },
 * 				{ open: 16, close: 22, high: 26, low: 6 },
 * 				{ open: 22, close: 18, high: 22, low: 11 },
 * 				{ open: 18, close: 29, high: 32, low: 14 },
 * 				{ open: 29, close: 24, high: 29, low: 13 },
 * 				{ open: 24, close: 8, high: 24, low: 5 },
 * 				{ open: 8, close: 16, high: 22, low: 2 },
 * 				{ open: 16, close: 12, high: 19, low: 7 },
 * 				{ open: 12, close: 20, high: 22, low: 8 },
 * 				{ open: 20, close: 16, high: 22, low: 8 }
 * 			],
 * 			{ stroke: { color: "green" }, fill: "lightgreen" }
 * 		)
 * 		.render();
*/
dojox.charting.Chart=function(node, kwArgs){};
/**
 * @namespace
*/
dojox.charting.widget={};
/**
 * @namespace
*/
dojox.charting.themes={};
/**
 * @namespace
*/
dojox.charting.scaler={};
/**
 * @namespace
*/
dojox.charting.plot3d={};
/**
 * @namespace
*/
dojox.charting.plot2d={};
/**
 * @namespace
*/
dojox.charting.axis2d={};
/**
 * <b>Summary:</b><blockquote>
 *	 Base action class for chart actions.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.Base
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {String|dojox.charting.plot2d.Base} [plot] Optional target plot for this chart action.  Default is &quot;default&quot;.
 * @returns {dojox.charting.action2d.ChartAction} new instance
*/
dojox.charting.action2d.ChartAction=function(chart, plot){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect this action from the chart.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.ChartAction
*/
dojox.charting.action2d.ChartAction.prototype.disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect this action to the chart.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.ChartAction
*/
dojox.charting.action2d.ChartAction.prototype.connect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for highlighting actions.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.__PlotActionCtorArgs
 * @private
 * @returns {dojox.charting.action2d.__HighlightCtorArgs} new instance
*/
dojox.charting.action2d.__HighlightCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a highlighting action on a plot, where an element on that plot<br>
 *	 has a highlight on it.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.PlotAction
 * @param {dojox.charting.Chart} chart The chart this action belongs to.
 * @param {String} [plot] The plot this action is attached to.  If not passed, &quot;default&quot; is assumed.
 * @param {charting.action2d.__HighlightCtorArgs} [kwArgs] Optional keyword arguments object for setting parameters.
 * @returns {dojox.charting.action2d.Highlight} new instance
*/
dojox.charting.action2d.Highlight=function(chart, plot, kwArgs){};
/**
 * @namespace
*/
dojox.charting.action2d.Highlight.optionalParams={};
/**
 * @namespace
*/
dojox.charting.action2d.Highlight.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Process the action on the given object.<br>
 * </blockquote>
 * @param {dojox.gfx.Shape} o The object on which to process the highlighting action.
 * @memberOf dojox.charting.action2d.Highlight
*/
dojox.charting.action2d.Highlight.prototype.process=function(o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base action class for plot actions.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.Base
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {String} [plot] The name of the plot this action belongs to.  If none is passed &quot;default&quot; is assumed.
 * @param {dojox.charting.action2d.__PlotActionCtorArgs} [kwargs] Optional arguments for the action.
 * @returns {dojox.charting.action2d.PlotAction} new instance
*/
dojox.charting.action2d.PlotAction=function(chart, plot, kwargs){};
/**
 * @namespace
*/
dojox.charting.action2d.PlotAction.overOutEvents={};
/**
 * <b>Summary:</b><blockquote>
 *	 Reset the action.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.PlotAction
*/
dojox.charting.action2d.PlotAction.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect this action from the given plot, if connected.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.PlotAction
*/
dojox.charting.action2d.PlotAction.prototype.disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Do any cleanup needed when destroying parent elements.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.PlotAction
*/
dojox.charting.action2d.PlotAction.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect this action to the given plot.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.PlotAction
*/
dojox.charting.action2d.PlotAction.prototype.connect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal element used by indicator actions.<br>
 * </blockquote>
 * @class
 * @param {mixed} chart 
 * @param {mixed} kwArgs 
 * @returns {dojox.charting.action2d._IndicatorElement} new instance
*/
dojox.charting.action2d._IndicatorElement=function(chart, kwArgs){};
/**
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype.stopTrack=function(){};
/**
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype.render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return whether or not this plot needs to be redrawn.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype.isDirty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Does nothing (irrelevant for this type of plot).<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype.initializeScalers=function(){};
/**
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype.initTrack=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns default stats (irrelevant for this type of plot).<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype.getSeriesStats=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear out any parameters set on this plot.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.plot2d._IndicatorElement} -The reference to this plot for functional chaining.
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clean any elements (HTML or GFX-based) out of our group, and create a new one.<br>
 * </blockquote>
 * @param {dojox.gfx.Surface} [creator] An optional surface to work with.
 * 
 * @returns {dojox.charting.Element} -A reference to this object for functional chaining.
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype.cleanGroup=function(creator){};
/**
 * @param {mixed} cp 
 * @param {mixed} limit 
 * @param {mixed} attr 
 * @private
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype._updateVisibility=function(cp, limit, attr){};
/**
 * @param {mixed} cp1 
 * @param {mixed} cp2 
 * @private
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype._updateIndicator=function(cp1, cp2){};
/**
 * @private
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype._trackMove=function(){};
/**
 * @param {mixed} text 
 * @param {mixed} inter 
 * @param {mixed} t 
 * @param {mixed} x 
 * @param {mixed} y 
 * @param {mixed} c1 
 * @param {mixed} c2 
 * @private
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype._renderText=function(text, inter, t, x, y, c1, c2){};
/**
 * @param {mixed} coord 
 * @param {mixed} index 
 * @param {mixed} hn 
 * @param {mixed} vn 
 * @param {mixed} min 
 * @param {mixed} max 
 * @private
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype._renderIndicator=function(coord, index, hn, vn, min, max){};
/**
 * @param {mixed} cd 
 * @param {mixed} attr 
 * @param {mixed} v 
 * @private
 * @memberOf dojox.charting.action2d._IndicatorElement
*/
dojox.charting.action2d._IndicatorElement.prototype._getData=function(cd, attr, v){};
/**
 * @namespace
*/
dojox.charting.action2d._IndicatorElement.inter={};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for highlighting actions.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.__PlotActionCtorArgs
 * @private
 * @returns {dojox.charting.action2d.__MagnifyCtorArgs} new instance
*/
dojox.charting.action2d.__MagnifyCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create an action that magnifies the object the action is applied to.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.PlotAction
 * @param {dojox.charting.Chart} chart The chart this action belongs to.
 * @param {String} [plot] The plot to apply the action to. If not passed, &quot;default&quot; is assumed.
 * @param {dojox.charting.action2d.__MagnifyCtorArgs} [kwArgs] Optional keyword arguments for this action.
 * @returns {dojox.charting.action2d.Magnify} new instance
*/
dojox.charting.action2d.Magnify=function(chart, plot, kwArgs){};
/**
 * @namespace
*/
dojox.charting.action2d.Magnify.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Process the action on the given object.<br>
 * </blockquote>
 * @param {dojox.gfx.Shape} o The object on which to process the magnifying action.
 * @memberOf dojox.charting.action2d.Magnify
*/
dojox.charting.action2d.Magnify.prototype.process=function(o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for mouse indicator.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.charting.action2d.__MouseIndicatorCtorArgs} new instance
*/
dojox.charting.action2d.__MouseIndicatorCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An optional function to use to compute label text. It takes precedence over<br>
 *	 the default text when available.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.__MouseIndicatorCtorArgs
*/
dojox.charting.action2d.__MouseIndicatorCtorArgs.prototype.labelFunc=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An optional function to use to compute label background fill. It takes precedence over<br>
 *	 fill property when available.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.__MouseIndicatorCtorArgs
*/
dojox.charting.action2d.__MouseIndicatorCtorArgs.prototype.fillFunc=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a mouse indicator action. You can drag mouse over the chart to display a data indicator.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.ChartAction
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {mixed} plot 
 * @param {dojox.charting.action2d.__MouseIndicatorCtorArgs} [kwArgs] Optional arguments for the chart action.
 * @returns {dojox.charting.action2d.MouseIndicator} new instance
*/
dojox.charting.action2d.MouseIndicator=function(chart, plot, kwArgs){};
/**
 * @namespace
*/
dojox.charting.action2d.MouseIndicator.optionalParams={};
/**
 * @namespace
*/
dojox.charting.action2d.MouseIndicator.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when mouse is up on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.MouseIndicator
*/
dojox.charting.action2d.MouseIndicator.prototype.onMouseUp=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the mouse is moved on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.MouseIndicator
*/
dojox.charting.action2d.MouseIndicator.prototype.onMouseMove=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when mouse is down on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.MouseIndicator
*/
dojox.charting.action2d.MouseIndicator.prototype.onMouseDown=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect this action from the chart.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.MouseIndicator
*/
dojox.charting.action2d.MouseIndicator.prototype.disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect this action to the chart. This adds a indicator plot<br>
 *	 to the chart that's why Chart.render() must be called after connect.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.MouseIndicator
*/
dojox.charting.action2d.MouseIndicator.prototype.connect=function(){};
/**
 * @param {mixed} event 
 * @private
 * @memberOf dojox.charting.action2d.MouseIndicator
*/
dojox.charting.action2d.MouseIndicator.prototype._onMouseSingle=function(event){};
/**
 * @private
 * @memberOf dojox.charting.action2d.MouseIndicator
*/
dojox.charting.action2d.MouseIndicator.prototype._disconnectHandles=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for mouse zoom and pan actions.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.charting.action2d.__MouseZoomAndPanCtorArgs} new instance
*/
dojox.charting.action2d.__MouseZoomAndPanCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create an mouse zoom and pan action.<br>
 *	 You can zoom in or out the data window with mouse wheel. You can scroll using mouse drag gesture.<br>
 *	 You can toggle between zoom and fit view using double click on the chart.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.ChartAction
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {mixed} plot 
 * @param {dojox.charting.action2d.__MouseZoomAndPanCtorArgs} [kwArgs] Optional arguments for the chart action.
 * @returns {dojox.charting.action2d.MouseZoomAndPan} new instance
*/
dojox.charting.action2d.MouseZoomAndPan=function(chart, plot, kwArgs){};
/**
 * @namespace
*/
dojox.charting.action2d.MouseZoomAndPan.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when mouse wheel is used on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.MouseZoomAndPan
*/
dojox.charting.action2d.MouseZoomAndPan.prototype.onMouseWheel=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when mouse is up on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.MouseZoomAndPan
*/
dojox.charting.action2d.MouseZoomAndPan.prototype.onMouseUp=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when mouse is moved on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.MouseZoomAndPan
*/
dojox.charting.action2d.MouseZoomAndPan.prototype.onMouseMove=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when mouse is down on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.MouseZoomAndPan
*/
dojox.charting.action2d.MouseZoomAndPan.prototype.onMouseDown=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when a key is pressed on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.MouseZoomAndPan
*/
dojox.charting.action2d.MouseZoomAndPan.prototype.onKeyPress=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the mouse is double is double clicked on the chart. Toggle between zoom and fit chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.MouseZoomAndPan
*/
dojox.charting.action2d.MouseZoomAndPan.prototype.onDoubleClick=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect this action from the chart.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.MouseZoomAndPan
*/
dojox.charting.action2d.MouseZoomAndPan.prototype.disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect this action to the chart.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.MouseZoomAndPan
*/
dojox.charting.action2d.MouseZoomAndPan.prototype.connect=function(){};
/**
 * @param {mixed} scroll 
 * @param {mixed} event 
 * @private
 * @memberOf dojox.charting.action2d.MouseZoomAndPan
*/
dojox.charting.action2d.MouseZoomAndPan.prototype._onZoom=function(scroll, event){};
/**
 * @private
 * @memberOf dojox.charting.action2d.MouseZoomAndPan
*/
dojox.charting.action2d.MouseZoomAndPan.prototype._disconnectHandles=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for highlighting actions.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.__PlotActionCtorArgs
 * @private
 * @returns {dojox.charting.action2d.__MoveSliceCtorArgs} new instance
*/
dojox.charting.action2d.__MoveSliceCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create an action for a pie chart that moves and scales a pie slice.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.PlotAction
 * @param {dojox.charting.Chart} chart The chart this action belongs to.
 * @param {String} [plot] The plot this action is attached to.  If not passed, &quot;default&quot; is assumed.
 * @param {dojox.charting.action2d.__MoveSliceCtorArgs} [kwArgs] Optional keyword arguments object for setting parameters.
 * @returns {dojox.charting.action2d.MoveSlice} new instance
*/
dojox.charting.action2d.MoveSlice=function(chart, plot, kwArgs){};
/**
 * @namespace
*/
dojox.charting.action2d.MoveSlice.defaultParams={};
/**
 * @memberOf dojox.charting.action2d.MoveSlice
*/
dojox.charting.action2d.MoveSlice.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Process the action on the given object.<br>
 * </blockquote>
 * @param {dojox.gfx.Shape} o The object on which to process the slice moving action.
 * @memberOf dojox.charting.action2d.MoveSlice
*/
dojox.charting.action2d.MoveSlice.prototype.process=function(o){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base keyword arguments object for creating an action2d.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.charting.action2d.__PlotActionCtorArgs} new instance
*/
dojox.charting.action2d.__PlotActionCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for highlighting actions.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.charting.action2d.__ShakeCtorArgs} new instance
*/
dojox.charting.action2d.__ShakeCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a shaking action for use on an element in a chart.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.PlotAction
 * @param {dojox.charting.Chart} chart The chart this action belongs to.
 * @param {String} [plot] The plot this action is attached to.  If not passed, &quot;default&quot; is assumed.
 * @param {dojox.charting.action2d.__ShakeCtorArgs} [kwArgs] Optional keyword arguments object for setting parameters.
 * @returns {dojox.charting.action2d.Shake} new instance
*/
dojox.charting.action2d.Shake=function(chart, plot, kwArgs){};
/**
 * @namespace
*/
dojox.charting.action2d.Shake.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Process the action on the given object.<br>
 * </blockquote>
 * @param {dojox.gfx.Shape} o The object on which to process the slice moving action.
 * @memberOf dojox.charting.action2d.Shake
*/
dojox.charting.action2d.Shake.prototype.process=function(o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for tooltip actions.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.__PlotActionCtorArgs
 * @private
 * @returns {dojox.charting.action2d.__TooltipCtorArgs} new instance
*/
dojox.charting.action2d.__TooltipCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The function that produces the text to be shown within a tooltip.  By default this will be<br>
 *	 set by the plot in question, by returning the value of the element.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.__TooltipCtorArgs
*/
dojox.charting.action2d.__TooltipCtorArgs.prototype.text=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create an action on a plot where a tooltip is shown when hovering over an element.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.PlotAction
 * @param {dojox.charting.Chart} chart The chart this action belongs to.
 * @param {String} [plot] The plot this action is attached to.  If not passed, &quot;default&quot; is assumed.
 * @param {dojox.charting.action2d.__TooltipCtorArgs} [kwArgs] Optional keyword arguments object for setting parameters.
 * @returns {dojox.charting.action2d.Tooltip} new instance
*/
dojox.charting.action2d.Tooltip=function(chart, plot, kwArgs){};
/**
 * @namespace
*/
dojox.charting.action2d.Tooltip.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Process the action on the given object.<br>
 * </blockquote>
 * @param {dojox.gfx.Shape} o The object on which to process the highlighting action.
 * @memberOf dojox.charting.action2d.Tooltip
*/
dojox.charting.action2d.Tooltip.prototype.process=function(o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for Touch indicator.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.charting.action2d.__TouchIndicatorCtorArgs} new instance
*/
dojox.charting.action2d.__TouchIndicatorCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An optional function to use to compute label text. It takes precedence over<br>
 *	 the default text when available.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.__TouchIndicatorCtorArgs
*/
dojox.charting.action2d.__TouchIndicatorCtorArgs.prototype.labelFunc=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An optional function to use to compute label background fill. It takes precedence over<br>
 *	 fill property when available.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.__TouchIndicatorCtorArgs
*/
dojox.charting.action2d.__TouchIndicatorCtorArgs.prototype.fillFunc=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a touch indicator action. You can touch over the chart to display a data indicator.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.ChartAction
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {mixed} plot 
 * @param {dojox.charting.action2d.__TouchIndicatorCtorArgs} [kwArgs] Optional arguments for the chart action.
 * @returns {dojox.charting.action2d.TouchIndicator} new instance
*/
dojox.charting.action2d.TouchIndicator=function(chart, plot, kwArgs){};
/**
 * @namespace
*/
dojox.charting.action2d.TouchIndicator.optionalParams={};
/**
 * @namespace
*/
dojox.charting.action2d.TouchIndicator.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when touch is started on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.TouchIndicator
*/
dojox.charting.action2d.TouchIndicator.prototype.onTouchStart=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when touch is moved on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.TouchIndicator
*/
dojox.charting.action2d.TouchIndicator.prototype.onTouchMove=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when touch is ended or canceled on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.TouchIndicator
*/
dojox.charting.action2d.TouchIndicator.prototype.onTouchEnd=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect this action from the chart.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.TouchIndicator
*/
dojox.charting.action2d.TouchIndicator.prototype.disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect this action to the chart. This adds a indicator plot<br>
 *	 to the chart that's why Chart.render() must be called after connect.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.TouchIndicator
*/
dojox.charting.action2d.TouchIndicator.prototype.connect=function(){};
/**
 * @param {mixed} event 
 * @param {mixed} delayed 
 * @private
 * @memberOf dojox.charting.action2d.TouchIndicator
*/
dojox.charting.action2d.TouchIndicator.prototype._onTouchSingle=function(event, delayed){};
/**
 * @param {mixed} event 
 * @private
 * @memberOf dojox.charting.action2d.TouchIndicator
*/
dojox.charting.action2d.TouchIndicator.prototype._onTouchDual=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Private internal class used by TouchZoomAndPan actions.<br>
 * </blockquote>
 * @class
 * @param {mixed} chart 
 * @returns {dojox.charting.action2d._GlassView} new instance
*/
dojox.charting.action2d._GlassView=function(chart){};
/**
 * @memberOf dojox.charting.action2d._GlassView
*/
dojox.charting.action2d._GlassView.prototype.render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return whether or not this plot needs to be redrawn.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d._GlassView
*/
dojox.charting.action2d._GlassView.prototype.isDirty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Does nothing (irrelevant for this type of plot).<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d._GlassView
*/
dojox.charting.action2d._GlassView.prototype.initializeScalers=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns default stats (irrelevant for this type of plot).<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d._GlassView
*/
dojox.charting.action2d._GlassView.prototype.getSeriesStats=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear out any parameters set on this plot.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.plot2d._IndicatorElement} -The reference to this plot for functional chaining.
 * @memberOf dojox.charting.action2d._GlassView
*/
dojox.charting.action2d._GlassView.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clean any elements (HTML or GFX-based) out of our group, and create a new one.<br>
 * </blockquote>
 * @param {dojox.gfx.Surface} [creator] An optional surface to work with.
 * 
 * @returns {dojox.charting.Element} -A reference to this object for functional chaining.
 * @memberOf dojox.charting.action2d._GlassView
*/
dojox.charting.action2d._GlassView.prototype.cleanGroup=function(creator){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional arguments for mouse zoom and pan actions.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.charting.action2d.__TouchZoomAndPanCtorArgs} new instance
*/
dojox.charting.action2d.__TouchZoomAndPanCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a touch zoom and pan action.<br>
 *	 You can zoom out or in the data window with pinch and spread gestures. You can scroll using drag gesture.<br>
 *	 Finally this is possible to navigate between a fit window and a zoom one using double tap gesture.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.action2d.ChartAction
 * @param {dojox.charting.Chart} chart The chart this action applies to.
 * @param {mixed} plot 
 * @param {dojox.charting.action2d.__TouchZoomAndPanCtorArgs} [kwArgs] Optional arguments for the action.
 * @returns {dojox.charting.action2d.TouchZoomAndPan} new instance
*/
dojox.charting.action2d.TouchZoomAndPan=function(chart, plot, kwArgs){};
/**
 * @namespace
*/
dojox.charting.action2d.TouchZoomAndPan.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when touch is started on the chart.<br>
 *	 we always want to be above regular plots and not clipped<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.TouchZoomAndPan
*/
dojox.charting.action2d.TouchZoomAndPan.prototype.onTouchStart=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when touch is moved on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.TouchZoomAndPan
*/
dojox.charting.action2d.TouchZoomAndPan.prototype.onTouchMove=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when touch is ended on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.TouchZoomAndPan
*/
dojox.charting.action2d.TouchZoomAndPan.prototype.onTouchEnd=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when double tap is performed on the chart.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.charting.action2d.TouchZoomAndPan
*/
dojox.charting.action2d.TouchZoomAndPan.prototype.onDoubleTap=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect this action from the chart.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.TouchZoomAndPan
*/
dojox.charting.action2d.TouchZoomAndPan.prototype.disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect this action to the chart. On Safari this adds a new glass view plot<br>
 *	 to the chart that's why Chart.render() must be called after connect.<br>
 * </blockquote>
 * @memberOf dojox.charting.action2d.TouchZoomAndPan
*/
dojox.charting.action2d.TouchZoomAndPan.prototype.connect=function(){};
/**
 * @param {mixed} axis 
 * @private
 * @memberOf dojox.charting.action2d.TouchZoomAndPan
*/
dojox.charting.action2d.TouchZoomAndPan.prototype._startScroll=function(axis){};
/**
 * <b>Summary:</b><blockquote>
 *	 Optional arguments used in the definition of an axis.<br>
 * </blockquote>
 * @param {Boolean} [vertical] A flag that says whether an axis is vertical (i.e. y axis) or horizontal. Default is false (horizontal).
 * @param {String} [fixUpper] Align the greatest value on the axis with the specified tick level. Options are &quot;major&quot;, &quot;minor&quot;, &quot;micro&quot;, or &quot;none&quot;.  Defaults to &quot;none&quot;.
 * @param {String} [fixLower] Align the smallest value on the axis with the specified tick level. Options are &quot;major&quot;, &quot;minor&quot;, &quot;micro&quot;, or &quot;none&quot;.  Defaults to &quot;none&quot;.
 * @param {Boolean} [natural] Ensure tick marks are made on &quot;natural&quot; numbers. Defaults to false.
 * @param {Boolean} [leftBottom] The position of a vertical axis; if true, will be placed against the left-bottom corner of the chart.  Defaults to true.
 * @param {Boolean} [includeZero] Include 0 on the axis rendering.  Default is false.
 * @param {Boolean} [fixed] Force all axis labels to be fixed numbers.  Default is true.
 * @param {Boolean} [majorLabels] Flag to draw all labels at major ticks. Default is true.
 * @param {Boolean} [minorTicks] Flag to draw minor ticks on an axis.  Default is true.
 * @param {Boolean} [minorLabels] Flag to draw labels on minor ticks. Default is true.
 * @param {Boolean} [microTicks] Flag to draw micro ticks on an axis. Default is false.
 * @param {Boolean} [htmlLabels] Flag to use HTML (as opposed to the native vector graphics engine) to draw labels. Default is true.
 * @param {Number} [min] The smallest value on an axis. Default is 0.
 * @param {Number} [max] The largest value on an axis. Default is 1.
 * @param {Number} [from] Force the chart to render data visible from this value. Default is 0.
 * @param {Number} [to] Force the chart to render data visible to this value. Default is 1.
 * @param {Number} [majorTickStep] The amount to skip before a major tick is drawn.  Default is 4.
 * @param {Number} [minorTickStep] The amount to skip before a minor tick is drawn. Default is 2.
 * @param {Number} [microTickStep] The amount to skip before a micro tick is drawn. Default is 1.
 * @param {Object[]} [labels] An array of labels for major ticks, with corresponding numeric values, ordered by value.
 * @param {Function} [labelFunc] An optional function used to compute label values.
 * @param {Number} [maxLabelSize] The maximum size, in pixels, for a label.  To be used with the optional label function.
 * @param {dojox.gfx.Stroke} [stroke] An optional stroke to be used for drawing an axis.
 * @param {Object} [majorTick] An object containing a dojox.gfx.Stroke, and a length (number) for a major tick.
 * @param {Object} [minorTick] An object containing a dojox.gfx.Stroke, and a length (number) for a minor tick.
 * @param {Object} [microTick] An object containing a dojox.gfx.Stroke, and a length (number) for a micro tick.
 * @param {Object} [tick] An object containing a dojox.gfx.Stroke, and a length (number) for a tick.
 * @param {String} [font] An optional font definition (as used in the CSS font property) for labels.
 * @param {String|dojo.Color} [fontColor] An optional color to be used in drawing labels.
 * @private
*/
dojox.charting.axis2d.__AxisCtorArgs=function(vertical, fixUpper, fixLower, natural, leftBottom, includeZero, fixed, majorLabels, minorTicks, minorLabels, microTicks, htmlLabels, min, max, from, to, majorTickStep, minorTickStep, microTickStep, labels, labelFunc, maxLabelSize, stroke, majorTick, minorTick, microTick, tick, font, fontColor){};
/**
 * <b>Summary:</b><blockquote>
 *	 The default axis object used in dojox.charting.  See dojox.charting.Chart.addAxis for details.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart the axis belongs to.
 * @param {dojox.charting.axis2d.__AxisCtorArgs} [kwArgs] Any optional keyword arguments to be used to define this axis.
*/
dojox.charting.axis2d.Invisible=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 The default axis object used in dojox.charting.  See dojox.charting.Chart.addAxis for details.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart the axis belongs to.
 * @param {dojox.charting.axis2d.__AxisCtorArgs} [kwArgs] Any optional keyword arguments to be used to define this axis.
*/
dojox.charting.axis2d.Default=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base class for any axis.  This is more of an interface/API<br>
 *	 definition than anything else; see dojox.charting.axis2d.Default<br>
 *	 for more details.<br>
 * </blockquote>
 * @see dojox.charting.axis2d
 * @param {dojox.charting.Chart} chart The chart this axis belongs to.
 * @param {dojox.charting.axis2d.__AxisCtorArgs} [kwArgs] An optional arguments object to define the axis parameters.
*/
dojox.charting.axis2d.Base=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base class for any axis.  This is more of an interface/API<br>
 *	 definition than anything else; see dojox.charting.axis2d.Default<br>
 *	 for more details.<br>
 * </blockquote>
 * @see dojox.charting.axis2d
 * @class
 * @extends dojox.charting.Element
 * @param {dojox.charting.Chart} chart The chart this axis belongs to.
 * @param {dojox.charting.axis2d.__AxisCtorArgs} [kwArgs] An optional arguments object to define the axis parameters.
 * @returns {dojox.charting.axis2d.Base} new instance
*/
dojox.charting.axis2d.Base=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to render this axis.<br>
 * </blockquote>
 * @param {mixed} dim 
 * @param {mixed} offsets 
 * 
 * @returns {dojox.charting.axis2d.Base} -A reference to the axis for functional chaining.
 * @memberOf dojox.charting.axis2d.Base
*/
dojox.charting.axis2d.Base.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a flag as to whether or not this axis has been initialized.<br>
 * </blockquote>
 * 
 * @returns {Boolean} -If the axis is initialized or not.
 * @memberOf dojox.charting.axis2d.Base
*/
dojox.charting.axis2d.Base.prototype.initialized=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A stub function to return the object that helps define how ticks are rendered.<br>
 * </blockquote>
 * 
 * @returns {Object} -The ticks object.
 * @memberOf dojox.charting.axis2d.Base
*/
dojox.charting.axis2d.Base.prototype.getTicks=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A stub function to return the scaler object created during calculate.<br>
 * </blockquote>
 * 
 * @returns {Object} -The scaler object (see dojox.charting.scaler.linear for more information)
 * @memberOf dojox.charting.axis2d.Base
*/
dojox.charting.axis2d.Base.prototype.getScaler=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A stub function to return any offsets needed for axis and series rendering.<br>
 * </blockquote>
 * 
 * @returns {Object} -An object of the form { l, r, t, b }.
 * @memberOf dojox.charting.axis2d.Base
*/
dojox.charting.axis2d.Base.prototype.getOffsets=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function for clearing the axis.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.axis2d.Base} -A reference to the axis for functional chaining.
 * @memberOf dojox.charting.axis2d.Base
*/
dojox.charting.axis2d.Base.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to run the calcuations needed for drawing this axis.<br>
 * </blockquote>
 * @param {mixed} min 
 * @param {mixed} max 
 * @param {mixed} span 
 * 
 * @returns {dojox.charting.axis2d.Base} -A reference to the axis for functional chaining.
 * @memberOf dojox.charting.axis2d.Base
*/
dojox.charting.axis2d.Base.prototype.calculate=function(min, max, span){};
/**
 * <b>Summary:</b><blockquote>
 *	 A base class that is used to build other elements of a chart, such as<br>
 *	 a series.<br>
 * </blockquote>
 * @class
 * @param {dojox.charting.Chart} chart The chart that this element belongs to.
 * @returns {dojox.charting.Element} new instance
*/
dojox.charting.Element=function(chart){};
/**
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.chart=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Clear any elements out of our group, and destroy the group.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.Element} -A reference to this object for functional chaining.
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.prototype.purgeGroup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the truncated string based on the limited width in px(dichotomy algorithm)<br>
 * </blockquote>
 * @param {String} [s] candidate text.
 * @param {String} [font] text's font style.
 * @param {Number} [limitWidth] text limited width in px.
 * @param {whether} truncated text has been truncated
 * }
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.prototype.getTextWithLimitLength=function(s, font, limitWidth, truncated){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the truncated string based on the limited character count(dichotomy algorithm)<br>
 * </blockquote>
 * @param {String} [s] candidate text.
 * @param {String} [font] text's font style.
 * @param {Number} [wcLimit] text limited character count.
 * @param {whether} truncated text has been truncated
 * }
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.prototype.getTextWithLimitCharCount=function(s, font, wcLimit, truncated){};
/**
 * @param {mixed} s 
 * @param {mixed} font 
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.prototype.getTextWidth=function(s, font){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy any DOMNodes that may have been created as a part of this element.<br>
 * </blockquote>
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.prototype.destroyHtmlElements=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 API addition to conform to the rest of the Dojo Toolkit's standard.<br>
 * </blockquote>
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convenience function to create a new dojox.gfx.Group.<br>
 * </blockquote>
 * @param {dojox.gfx.Surface} [creator] An optional surface in which to create this group.
 * 
 * @returns {dojox.charting.Element} -A reference to this object for functional chaining.
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.prototype.createGroup=function(creator){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clean any elements (HTML or GFX-based) out of our group, and create a new one.<br>
 * </blockquote>
 * @param {dojox.gfx.Surface} [creator] An optional surface to work with.
 * 
 * @returns {dojox.charting.Element} -A reference to this object for functional chaining.
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.prototype.cleanGroup=function(creator){};
/**
 * @param {mixed} fill 
 * @param {mixed} bbox 
 * @private
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.prototype._shapeFill=function(fill, bbox){};
/**
 * @param {mixed} fill 
 * @param {mixed} center 
 * @param {mixed} radius 
 * @param {mixed} start 
 * @param {mixed} end 
 * @private
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.prototype._pseudoRadialFill=function(fill, center, radius, start, end){};
/**
 * @param {mixed} fill 
 * @param {mixed} dim 
 * @param {mixed} offsets 
 * @private
 * @memberOf dojox.charting.Element
*/
dojox.charting.Element.prototype._plotFill=function(fill, dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 The default axis object used in dojox.charting.  See dojox.charting.Chart.addAxis for details.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.axis2d.Invisible
 * @param {dojox.charting.Chart} chart The chart the axis belongs to.
 * @param {dojox.charting.axis2d.__AxisCtorArgs} [kwArgs] Any optional keyword arguments to be used to define this axis.
 * @returns {dojox.charting.axis2d.Default} new instance
*/
dojox.charting.axis2d.Default=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.axis2d.Default.optionalParams={};
/**
 * @namespace
*/
dojox.charting.axis2d.Default.opt={};
/**
 * @namespace
*/
dojox.charting.axis2d.Default.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Render/draw the axis.<br>
 * </blockquote>
 * @param {Object} dim An object of the form { width, height}.
 * @param {Object} offsets An object of the form { l, r, t, b }.
 * 
 * @returns {dojox.charting.axis2d.Default} -The reference to the axis for functional chaining.
 * @memberOf dojox.charting.axis2d.Default
*/
dojox.charting.axis2d.Default.prototype.render=function(dim, offsets){};
/**
 * @param {mixed} elem 
 * @param {mixed} chart 
 * @param {mixed} label 
 * @param {mixed} truncatedLabel 
 * @param {mixed} font 
 * @param {mixed} elemType 
 * @memberOf dojox.charting.axis2d.Default
*/
dojox.charting.axis2d.Default.prototype.labelTooltip=function(elem, chart, label, truncatedLabel, font, elemType){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the physical offset values for this axis (used in drawing data series).<br>
 * </blockquote>
 * 
 * @returns {Object} -The calculated offsets in the form of { l, r, t, b } (left, right, top, bottom).
 * @memberOf dojox.charting.axis2d.Default
*/
dojox.charting.axis2d.Default.prototype.getOffsets=function(){};
/**
 * @param {mixed} labelType 
 * @param {mixed} creator 
 * @param {mixed} x 
 * @param {mixed} y 
 * @param {mixed} align 
 * @param {mixed} textContent 
 * @param {mixed} font 
 * @param {mixed} fontColor 
 * @param {mixed} labelWidth 
 * @memberOf dojox.charting.axis2d.Default
*/
dojox.charting.axis2d.Default.prototype.createText=function(labelType, creator, x, y, align, textContent, font, fontColor, labelWidth){};
/**
 * @param {mixed} creator 
 * @param {mixed} params 
 * @memberOf dojox.charting.axis2d.Default
*/
dojox.charting.axis2d.Default.prototype.createLine=function(creator, params){};
/**
 * @param {mixed} creator 
 * @memberOf dojox.charting.axis2d.Default
*/
dojox.charting.axis2d.Default.prototype.cleanGroup=function(creator){};
/**
 * <b>Summary:</b><blockquote>
 *	 Optional arguments used in the definition of an axis.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.charting.axis2d.__AxisCtorArgs} new instance
*/
dojox.charting.axis2d.__AxisCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An optional function used to compute label values.<br>
 * </blockquote>
*/
dojox.charting.axis2d.__AxisCtorArgs.labelFunc=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The default axis object used in dojox.charting.  See dojox.charting.Chart.addAxis for details.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.axis2d.Base
 * @param {dojox.charting.Chart} chart The chart the axis belongs to.
 * @param {dojox.charting.axis2d.__AxisCtorArgs} [kwArgs] Any optional keyword arguments to be used to define this axis.
 * @returns {dojox.charting.axis2d.Invisible} new instance
*/
dojox.charting.axis2d.Invisible=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.axis2d.Invisible.scaler={};
/**
 * @namespace
*/
dojox.charting.axis2d.Invisible.optionalParams={};
/**
 * @namespace
*/
dojox.charting.axis2d.Invisible.opt={};
/**
 * @namespace
*/
dojox.charting.axis2d.Invisible.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the drawing &amp;quot;window&amp;quot; for the axis.<br>
 * </blockquote>
 * @param {Number} scale The new scale for the axis.
 * @param {Number} offset The new offset for the axis.
 * 
 * @returns {dojox.charting.axis2d.Default} -The reference to the axis for functional chaining.
 * @memberOf dojox.charting.axis2d.Invisible
*/
dojox.charting.axis2d.Invisible.prototype.setWindow=function(scale, offset){};
/**
 * <b>Summary:</b><blockquote>
 *	 Finds out if this axis has been initialized or not.<br>
 * </blockquote>
 * @memberOf dojox.charting.axis2d.Invisible
*/
dojox.charting.axis2d.Invisible.prototype.initialized=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the current windowing scale of the axis.<br>
 * </blockquote>
 * @returns {Number} -
 * @memberOf dojox.charting.axis2d.Invisible
*/
dojox.charting.axis2d.Invisible.prototype.getWindowScale=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the current windowing offset for the axis.<br>
 * </blockquote>
 * @returns {Number} -
 * @memberOf dojox.charting.axis2d.Invisible
*/
dojox.charting.axis2d.Invisible.prototype.getWindowOffset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the pre-calculated ticks object.<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.charting.axis2d.Invisible
*/
dojox.charting.axis2d.Invisible.prototype.getTicks=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the pre-calculated scaler object.<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.charting.axis2d.Invisible
*/
dojox.charting.axis2d.Invisible.prototype.getScaler=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find out whether or not the axis options depend on the data in the axis.<br>
 * </blockquote>
 * @returns {Boolean} -
 * @memberOf dojox.charting.axis2d.Invisible
*/
dojox.charting.axis2d.Invisible.prototype.dependOnData=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear out all calculated properties on this axis;<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.axis2d.Default} -The reference to the axis for functional chaining.
 * @memberOf dojox.charting.axis2d.Invisible
*/
dojox.charting.axis2d.Invisible.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Perform all calculations needed to render this axis.<br>
 * </blockquote>
 * @param {Number} min The smallest value represented on this axis.
 * @param {Number} max The largest value represented on this axis.
 * @param {Number} span The span in pixels over which axis calculations are made.
 * @param {String[]} labels Optional list of labels.
 * 
 * @returns {dojox.charting.axis2d.Default} -The reference to the axis for functional chaining.
 * @memberOf dojox.charting.axis2d.Invisible
*/
dojox.charting.axis2d.Invisible.prototype.calculate=function(min, max, span, labels){};
/**
 * @param {mixed} labels 
 * @param {mixed} font 
 * @param {mixed} wcLimit 
 * @private
 * @memberOf dojox.charting.axis2d.Invisible
*/
dojox.charting.axis2d.Invisible.prototype._groupLabelWidth=function(labels, font, wcLimit){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add support for bidi scripts.<br>
 * </blockquote>
 * Bidi stands for support for languages with a bidirectional script.<br>
 * There's a special need for displaying BIDI text in rtl direction<br>
 * in ltr GUI, sometimes needed auto support.<br>
 * dojox.charting does not support control over base text direction provided in Dojo.
 * @class
 * @returns {dojox.Chart} new instance
*/
dojox.Chart=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enables bidi support for truncated labels.<br>
 * </blockquote>
 * Can be two types of labels: html or gfx.<br>
 * gfx labels:<br>
 * Need to be stored in registry to be used when the textDir will be set dynamically.<br>
 * Additional work on truncated labels is needed for case as 111111A (A stands for "bidi" character rtl directioned).<br>
 * let say in this case the truncation is "111..." If the textDir is auto, the display should be: "...111" but in gfx<br>
 * case we will get "111...". Because this.surface.setTextDir will calculate the dir of truncated<br>
 * label, which value is "111..." but th real is "111111A".<br>
 * each time we created a gfx truncated label we store it in the truncatedLabelsRegistry.<br>
 * html labels:<br>
 * no need for repository (stored in another place). Here we only need to update the current dir according to textDir.
 * @param {mixed} elem 
 * @param {mixed} label 
 * @param {mixed} labelType 
 * @private
 * @memberOf dojox.Chart
*/
dojox.Chart.prototype.truncateBidi=function(elem, label, labelType){};
/**
 * <b>Summary:</b><blockquote>
 *	 Setter for the textDir attribute.<br>
 * </blockquote>
 * Allows dynamically set the textDir, goes over all the text-children and<br>
 * updates their base text direction.
 * @param {String} newTextDir 
 * @param {mixed} obj 
 * @memberOf dojox.Chart
*/
dojox.Chart.prototype.setTextDir=function(newTextDir, obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Kicks off chart instantiation.<br>
 * </blockquote>
 * Used for setting the textDir of the chart.
 * @param {mixed} node 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.Chart
*/
dojox.Chart.prototype.postscript=function(node, args){};
/**
 * @memberOf dojox.Chart
*/
dojox.Chart.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return direction of the text.<br>
 * </blockquote>
 * If textDir is ltr or rtl returns the value.<br>
 * If it's auto, calls to another function that responsible<br>
 * for checking the value, and defining the direction.
 * @param {String} text Used in case textDir is &quot;auto&quot;, this case the direction is according to the first
 * strong (directionally - which direction is strong defined) letter.
 * @memberOf dojox.Chart
*/
dojox.Chart.prototype.getTextDir=function(text){};
/**
 * @param {String} textDir 
 * @private
 * @memberOf dojox.Chart
*/
dojox.Chart.prototype._setTextDirAttr=function(textDir){};
/**
 * <b>Summary:</b><blockquote>
 *	 Kicks off chart instantiation.<br>
 * </blockquote>
 * Used for setting the textDir of the chart.
 * @class
 * @private
 * @returns {Chart.postscript} new instance
*/
Chart.postscript=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Setter for the textDir attribute.<br>
 * </blockquote>
 * Allows dynamically set the textDir, goes over all the text-children and<br>
 * updates their base text direction.
 * @class
 * @returns {Chart.setTextDir} new instance
*/
Chart.setTextDir=function(){};
/**
 * @class
 * @param {mixed} node 
 * @param {mixed} lights 
 * @param {mixed} camera 
 * @param {mixed} theme 
 * @returns {dojox.charting.Chart3D} new instance
*/
dojox.charting.Chart3D=function(node, lights, camera, theme){};
/**
 * @memberOf dojox.charting.Chart3D
*/
dojox.charting.Chart3D.prototype.render=function(){};
/**
 * @param {mixed} wall 
 * @memberOf dojox.charting.Chart3D
*/
dojox.charting.Chart3D.prototype.removeWall=function(wall){};
/**
 * @param {mixed} plot 
 * @memberOf dojox.charting.Chart3D
*/
dojox.charting.Chart3D.prototype.removePlot=function(plot){};
/**
 * @memberOf dojox.charting.Chart3D
*/
dojox.charting.Chart3D.prototype.invalidate=function(){};
/**
 * @memberOf dojox.charting.Chart3D
*/
dojox.charting.Chart3D.prototype.generate=function(){};
/**
 * @param {mixed} wall 
 * @memberOf dojox.charting.Chart3D
*/
dojox.charting.Chart3D.prototype.addWall=function(wall){};
/**
 * @param {mixed} plot 
 * @memberOf dojox.charting.Chart3D
*/
dojox.charting.Chart3D.prototype.addPlot=function(plot){};
/**
 * @param {mixed} array 
 * @param {mixed} item 
 * @private
 * @memberOf dojox.charting.Chart3D
*/
dojox.charting.Chart3D.prototype._remove=function(array, item){};
/**
 * @private
 * @memberOf dojox.charting.Chart3D
*/
dojox.charting.Chart3D.prototype._generateWalls=function(){};
/**
 * @private
 * @memberOf dojox.charting.Chart3D
*/
dojox.charting.Chart3D.prototype._generatePlots=function(){};
/**
 * @param {mixed} array 
 * @param {mixed} item 
 * @private
 * @memberOf dojox.charting.Chart3D
*/
dojox.charting.Chart3D.prototype._add=function(array, item){};
/**
*/
dojox.gfx3d.Viewport=function(){};
/**
*/
dojox.gfx3d.Scene=function(){};
/**
 * @namespace
*/
dojox.gfx3d.vector={};
/**
 * @namespace
*/
dojox.gfx3d.scheduler={};
/**
 * @namespace
*/
dojox.gfx3d.matrix={};
/**
 * @namespace
*/
dojox.gfx3d.lighting={};
/**
 * @namespace
*/
dojox.gfx3d.drawer={};
/**
 * @namespace
 * @private
*/
dojox.gfx3d._creators={};
/**
*/
dojox.gfx.Surface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The main chart object in dojox.charting.  This will create a two dimensional<br>
 *	 chart based on dojox.gfx.<br>
 * </blockquote>
 * dojox.charting.Chart is the primary object used for any kind of charts.  It<br>
 * is simple to create--just pass it a node reference, which is used as the<br>
 * container for the chart--and a set of optional keyword arguments and go.<br>
 * <br>
 * Note that like most of dojox.gfx, most of dojox.charting.Chart's methods are<br>
 * designed to return a reference to the chart itself, to allow for functional<br>
 * chaining.  This makes defining everything on a Chart very easy to do.
 * @class
 * @param {DOMNode} node 
 * @param {dojox.charting.__ChartCtorArgs} [kwArgs] 
 * @returns {dojox.charting.Chart} new instance
 * @example
 * Create an area chart, with smoothing.
 * 	new dojox.charting.Chart(node))
 * 		.addPlot("default", { type: "Areas", tension: "X" })
 * 		.setTheme(dojox.charting.themes.Shrooms)
 * 		.addSeries("Series A", [1, 2, 0.5, 1.5, 1, 2.8, 0.4])
 * 		.addSeries("Series B", [2.6, 1.8, 2, 1, 1.4, 0.7, 2])
 * 		.addSeries("Series C", [6.3, 1.8, 3, 0.5, 4.4, 2.7, 2])
 * 		.render();
 * @example
 * The form of data in a data series can take a number of forms: a simple array,
 * an array of objects {x,y}, or something custom (as determined by the plot).
 * Here's an example of a Candlestick chart, which expects an object of
 * { open, high, low, close }.
 * 	new dojox.charting.Chart(node))
 * 		.addPlot("default", {type: "Candlesticks", gap: 1})
 * 		.addAxis("x", {fixLower: "major", fixUpper: "major", includeZero: true})
 * 		.addAxis("y", {vertical: true, fixLower: "major", fixUpper: "major", natural: true})
 * 		.addSeries("Series A", [
 * 				{ open: 20, close: 16, high: 22, low: 8 },
 * 				{ open: 16, close: 22, high: 26, low: 6, mid: 18 },
 * 				{ open: 22, close: 18, high: 22, low: 11, mid: 21 },
 * 				{ open: 18, close: 29, high: 32, low: 14, mid: 27 },
 * 				{ open: 29, close: 24, high: 29, low: 13, mid: 27 },
 * 				{ open: 24, close: 8, high: 24, low: 5 },
 * 				{ open: 8, close: 16, high: 22, low: 2 },
 * 				{ open: 16, close: 12, high: 19, low: 7 },
 * 				{ open: 12, close: 20, high: 22, low: 8 },
 * 				{ open: 20, close: 16, high: 22, low: 8 },
 * 				{ open: 16, close: 22, high: 26, low: 6, mid: 18 },
 * 				{ open: 22, close: 18, high: 22, low: 11, mid: 21 },
 * 				{ open: 18, close: 29, high: 32, low: 14, mid: 27 },
 * 				{ open: 29, close: 24, high: 29, low: 13, mid: 27 },
 * 				{ open: 24, close: 8, high: 24, low: 5 },
 * 				{ open: 8, close: 16, high: 22, low: 2 },
 * 				{ open: 16, close: 12, high: 19, low: 7 },
 * 				{ open: 12, close: 20, high: 22, low: 8 },
 * 				{ open: 20, close: 16, high: 22, low: 8 },
 * 				{ open: 16, close: 22, high: 26, low: 6 },
 * 				{ open: 22, close: 18, high: 22, low: 11 },
 * 				{ open: 18, close: 29, high: 32, low: 14 },
 * 				{ open: 29, close: 24, high: 29, low: 13 },
 * 				{ open: 24, close: 8, high: 24, low: 5 },
 * 				{ open: 8, close: 16, high: 22, low: 2 },
 * 				{ open: 16, close: 12, high: 19, low: 7 },
 * 				{ open: 12, close: 20, high: 22, low: 8 },
 * 				{ open: 20, close: 16, high: 22, low: 8 }
 * 			],
 * 			{ stroke: { color: "green" }, fill: "lightgreen" }
 * 		)
 * 		.render();
*/
dojox.charting.Chart=function(node, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Zoom the chart to a specific range on one axis.  This calls render()<br>
 *	 directly as a convenience method.<br>
 * </blockquote>
 * @param {String} name The name of the axis as defined by addAxis.
 * @param {Array} range The end points of the zoom range, measured in axis ticks.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.zoomIn=function(name, range){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the given series with a new set of data points.<br>
 * </blockquote>
 * @param {String} name The name of the series as defined in addSeries.
 * @param {Array|Object:} data The array of data points (either numbers or objects) that
 * represents the data to be drawn. Or it can be an object. In<br>
 * the latter case, it should have a property &quot;data&quot; (an array),<br>
 * destroy(), and setSeriesObject().<br>
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.updateSeries=function(name, data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Zooms in or out any plots in two dimensions.<br>
 * </blockquote>
 * @param {Number} sx The scale for the x axis.
 * @param {Number} sy The scale for the y axis.
 * @param {Number} dx The pixel offset on the x axis.
 * @param {Number} dy The pixel offset on the y axis.
 * @param {Boolean|Object} [zoom] The chart zooming animation trigger.  This is null by default,
 * e.g. {duration: 1200}, or just set true.<br>
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.setWindow=function(sx, sy, dx, dy, zoom){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set a theme of the chart.<br>
 * </blockquote>
 * @param {dojox.charting.Theme} theme The theme to be used for visual rendering.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.setTheme=function(theme){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets new order of series within a plot. newOrder cannot add<br>
 *	 or remove series. Wrong names, or dups are ignored.<br>
 * </blockquote>
 * @param {Array:} newOrder Array of series names compatible with getPlotOrder(). All
 * series should belong to the same plot.<br>
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.setSeriesOrder=function(newOrder){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets new order of plots. newOrder cannot add or remove<br>
 *	 plots. Wrong names, or dups are ignored.<br>
 * </blockquote>
 * @param {Array:} newOrder Array of plot names compatible with getPlotOrder().
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.setPlotOrder=function(newOrder){};
/**
 * <b>Summary:</b><blockquote>
 *	 Zooms an axis and all dependent plots. Can be used to zoom in 1D.<br>
 * </blockquote>
 * @param {String} name The name of the axis as defined by addAxis.
 * @param {Number} scale The scale on the target axis.
 * @param {Number} offset Any offest, as measured by axis tick
 * @param {Boolean|Object} [zoom] The chart zooming animation trigger.  This is null by default,
 * e.g. {duration: 1200}, or just set true.<br>
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.setAxisWindow=function(name, scale, offset, zoom){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize the chart to the dimensions of width and height.<br>
 * </blockquote>
 * Resize the chart and its surface to the width and height dimensions.<br>
 * If no width/height or box is provided, resize the surface to the marginBox of the chart.
 * @param {Number} width The new width of the chart.
 * @param {Number} height The new height of the chart.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.resize=function(width, height){};
/**
 * <b>Summary:</b><blockquote>
 *	 Render the chart according to the current information defined.  This should<br>
 *	 be the last call made when defining/creating a chart, or if data within the<br>
 *	 chart has been changed.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove the series defined by name from the chart.<br>
 * </blockquote>
 * @param {String} name The name of the series as defined by addSeries.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.removeSeries=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove the plot defined using name from the chart's plot stack.<br>
 * </blockquote>
 * @param {String} name The name of the plot as defined using addPlot.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.removePlot=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove the axis that was defined using name.<br>
 * </blockquote>
 * @param {String} name The axis name, as defined in addAxis.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.removeAxis=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Moves a given series to front of a plot.<br>
 * </blockquote>
 * @param {String:} name Series' name to move.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.moveSeriesToFront=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Moves a given series to back of a plot.<br>
 * </blockquote>
 * @param {String:} name Series' name to move.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.moveSeriesToBack=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Moves a given plot to front.<br>
 * </blockquote>
 * @param {String:} name Plot's name to move.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.movePlotToFront=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Moves a given plot to back.<br>
 * </blockquote>
 * @param {String:} name Plot's name to move.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.movePlotToBack=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an array of series names in the current order<br>
 *	 (the top-most series is the first) within a plot.<br>
 * </blockquote>
 * @param {String:} plotName Plot's name.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.getSeriesOrder=function(plotName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the given series, by name.<br>
 * </blockquote>
 * @param {String} name The name the series was defined by.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.getSeries=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an array of plot names in the current order<br>
 *	 (the top-most plot is the first).<br>
 * </blockquote>
 * 
 * @returns {Array} -
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.getPlotOrder=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the given plot, by name.<br>
 * </blockquote>
 * @param {String} name The name the plot was defined by.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.getPlot=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a map of information about all axes in a chart and what they represent<br>
 *	 in terms of scaling (see dojox.charting.axis2d.Default.getScaler).<br>
 * </blockquote>
 * @see dojox.charting.axis2d
 * 
 * @returns {Object} -An map of geometry objects, a one-to-one mapping of axes.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.getGeometry=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the coordinates and dimensions of the containing DOMNode, as<br>
 *	 returned by dojo.coords.<br>
 * </blockquote>
 * 
 * @returns {Object} -The resulting coordinates of the chart.  See dojo.coords for details.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.getCoords=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the given axis, by name.<br>
 * </blockquote>
 * @param {String} name The name the axis was defined by.
 * 
 * @returns {dojox.charting.axis2d.Default} -The axis as stored in the chart's axis map.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.getAxis=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Force a full rendering of the chart, including full resets on the chart itself.<br>
 *	 You should not call this method directly unless absolutely necessary.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.fullRender=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the full geometry of the chart.  This includes passing<br>
 *	 over all major elements of a chart (plots, axes, series, container)<br>
 *	 in order to ensure proper rendering.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.fullGeometry=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires a synthetic event for a series item.<br>
 * </blockquote>
 * @param {String:} seriesName Series name.
 * @param {String:} eventName Event name to simulate: onmouseover, onmouseout, onclick.
 * @param {Number:} index Valid data value index for the event.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.fireEvent=function(seriesName, eventName, index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cleanup when a chart is to be destroyed.<br>
 * </blockquote>
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Delayed render, which is used to collect multiple updates<br>
 *	 within a delayInMs time window.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.delayedRender=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A convenience method to connect a function to a plot.<br>
 * </blockquote>
 * @param {String} name The name of the plot as defined by addPlot.
 * @param {Object} object The object to be connected.
 * @param {Function} method The function to be executed.
 * 
 * @returns {Array} -A handle to the connection, as defined by dojo.connect (see dojo.connect).
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.connectToPlot=function(name, object, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the geometry of the chart based on the defined axes of<br>
 *	 a chart.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.calculateGeometry=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a data series to the chart for rendering.<br>
 * </blockquote>
 * @param {String:} name The name of the data series to be plotted.
 * @param {Array|Object:} data The array of data points (either numbers or objects) that
 * represents the data to be drawn. Or it can be an object. In<br>
 * the latter case, it should have a property &quot;data&quot; (an array),<br>
 * destroy(), and setSeriesObject().
 * @param {dojox.charting.__SeriesCtorArgs:} [kwArgs] An optional keyword arguments object that will be mixed into
 * the resultant series object.<br>
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.addSeries=function(name, data, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a new plot to the chart, defined by name and using the optional keyword arguments object.<br>
 *	 Note that dojox.charting assumes the main plot to be called &amp;quot;default&amp;quot;; if you do not have<br>
 *	 a plot called &amp;quot;default&amp;quot; and attempt to add data series to the chart without specifying the<br>
 *	 plot to be rendered on, you WILL get errors.<br>
 * </blockquote>
 * @param {String} name The name of the plot to be added to the chart.  If you only plan on using one plot, call it &quot;default&quot;.
 * @param {dojox.charting.plot2d.__PlotCtorArgs} kwArgs An object with optional parameters for the plot in question.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.addPlot=function(name, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add an axis to the chart, for rendering.<br>
 * </blockquote>
 * @param {String} name The name of the axis.
 * @param {dojox.charting.axis2d.__AxisCtorArgs} [kwArgs] An optional keyword arguments object for use in defining details of an axis.
 * 
 * @returns {dojox.charting.Chart} -A reference to the current chart for functional chaining.
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype.addAxis=function(name, kwArgs){};
/**
 * @private
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype._makeDirty=function(){};
/**
 * @private
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype._makeClean=function(){};
/**
 * @param {mixed} plotName 
 * @param {Boolean} verticalAxis 
 * @private
 * @memberOf dojox.charting.Chart
*/
dojox.charting.Chart.prototype._invalidateDependentPlots=function(plotName, verticalAxis){};
/**
 * <b>Summary:</b><blockquote>
 *	 The keyword arguments that can be passed in a Chart constructor.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.charting.__ChartCtorArgs} new instance
*/
dojox.charting.__ChartCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 DataChart<br>
 *	 Extension to the 2D chart that connects to a data store in<br>
 *	 a simple manner. Convenience methods have been added for<br>
 *	 connecting store item labels to the chart labels.<br>
 * </blockquote>
 * This code should be considered very experimental and the APIs subject<br>
 * to change. This is currently an alpha version and will need some testing<br>
 * and review.<br>
 * <br>
 * The main reason for this extension is to create animated charts, generally<br>
 * available with scroll=true, and a property field that gets continually updated.<br>
 * The previous property settings are kept in memory and displayed until scrolled<br>
 * off the chart.<br>
 * <br>
 * Although great effort was made to maintain the integrity of the current<br>
 * charting APIs, some things have been added or modified in order to get<br>
 * the store to connect and also to get the data to scroll/animate.<br>
 * "displayRange" in particular is used to force the xaxis to a specific<br>
 * size and keep the chart from stretching or squashing to fit the data.<br>
 * <br>
 * Currently, plot lines can only be set at initialization. Setting<br>
 * a new store query will have no effect (although using setStore<br>
 * may work but its untested).
 * @class
 * @extends dojox.charting.Chart
 * @param {DomNode} node The node to attach the chart to.
 * @param {Object} kwArgs 
 * @returns {dojox.charting.DataChart} new instance
 * @example
 * 	var chart = new dojox.charting.DataChart("myNode", {
 * 		displayRange:8,
 * 		store:dataStore,
 * 		query:{symbol:"*"},
 * 		fieldName:"price"
 * 		type: dojox.charting.plot2d.Columns
 * 	});
 * 
 * properties:
*/
dojox.charting.DataChart=function(node, kwArgs){};
/**
 * @namespace
*/
dojox.charting.DataChart.yaxis={};
/**
 * @namespace
*/
dojox.charting.DataChart.xaxis={};
/**
 * <b>Summary:</b><blockquote>
 *	 If chart is hidden, show it<br>
 * </blockquote>
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.show=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the chart store and query<br>
 *	 then does the first fetch and<br>
 *	 connects to subsequent changes.<br>
 *	 <br>
 *	 TODO: Not handling resetting store<br>
 * </blockquote>
 * @param {Object} store 
 * @param {?} query String
 * @param {?} fieldName String
 * @param {?} queryOptions Object
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.setStore=function(store, query, fieldName, queryOptions){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convenience method that sets series labels based on item labels.<br>
 * </blockquote>
 * @param {Number} val 
 * @returns {String} -
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.seriesLabels=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call this function to change the chart size.<br>
 *	 Can be connected to a layout widget that calls<br>
 *	 resize.<br>
 * </blockquote>
 * @param {Object} dim 
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.resizeChart=function(dim){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired when a store item changes.<br>
 *	 Collects the item calls and when<br>
 *	 done (after 200ms), sends item<br>
 *	 array to onData().<br>
 *	 <br>
 *	 FIXME: Using labels instead of IDs for item<br>
 *	 identifiers here and in the chart series. This<br>
 *	 is obviously short sighted, but currently used<br>
 *	 for seriesLabels. Workaround for potential bugs<br>
 *	 is to assign a label for which all items are unique.<br>
 * </blockquote>
 * @param {storeObject} item 
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.onSet=function(item){};
/**
 * @param {Error} err 
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.onError=function(err){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub. Fires after data is received but<br>
 *	 before data is parsed and rendered<br>
 * </blockquote>
 * @param {Array} items 
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.onDataReceived=function(items){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called after a completed fetch<br>
 *	 or when store items change.<br>
 *	 On first run, sets the chart data,<br>
 *	 then updates chart and legends.<br>
 *	 <br>
 *	 console.log(&amp;quot;Store:&amp;quot;, store);console.log(&amp;quot;items: (&amp;quot;, items.length+&amp;quot;)&amp;quot;, items);console.log(&amp;quot;Chart:&amp;quot;, this);<br>
 * </blockquote>
 * @param {Array} items 
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.onData=function(items){};
/**
 * <b>Summary:</b><blockquote>
 *	 If chart is showing, hide it<br>
 *	 Prevents rendering while hidden<br>
 * </blockquote>
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.hide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The main use of this function is to determine<br>
 *	 between a single value and an array of values.<br>
 *	 Other property types included for convenience.<br>
 * </blockquote>
 * @param {storeObject} item 
 * @param {mixed} prop 
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.getProperty=function(item, prop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetches initial data. Subsequent changes<br>
 *	 are received via onSet in data store.<br>
 * </blockquote>
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.fetch=function(){};
/**
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convenience method to convert a label array of strings<br>
 *	 into an array of objects<br>
 * </blockquote>
 * @param {mixed} axis 
 * @returns {null} -
 * @memberOf dojox.charting.DataChart
*/
dojox.charting.DataChart.prototype.convertLabels=function(axis){};
/**
 * <b>Summary:</b><blockquote>
 *	 Series adapter for dojo.data stores.<br>
 * </blockquote>
 * @class
 * @param {Object:} store A dojo.data store object.
 * @param {Object:} kwArgs A store-specific keyword parameters used for fetching items.
 * See dojo.data.api.Read.fetch().
 * @param {Function|Object|String|Null:} value Function, which takes a store, and an object handle, and
 * produces an output possibly inspecting the store's item. Or<br>
 * a dictionary object, which tells what names to extract from<br>
 * an object and how to map them to an output. Or a string, which<br>
 * is a numeric field name to use for plotting. If undefined, null<br>
 * or empty string (the default), &quot;value&quot; field is extracted.
 * @returns {dojox.charting.DataSeries} new instance
*/
dojox.charting.DataSeries=function(store, kwArgs, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets a dojox.charting.Series object we will be working with.<br>
 * </blockquote>
 * @param {dojox.charting.Series:} series Our interface to the chart.
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype.setSeriesObject=function(series){};
/**
 * <b>Summary:</b><blockquote>
 *	 As stub to process fetch errors. Provide so user can attach to<br>
 *	 it with dojo.connect(). See dojo.data.api.Read fetch() for<br>
 *	 details: onError property.<br>
 * </blockquote>
 * @param {mixed} errorData 
 * @param {mixed} request 
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype.onFetchError=function(errorData, request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetches data from the store and updates a chart.<br>
 * </blockquote>
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype.fetch=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clean up before GC.<br>
 * </blockquote>
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype.destroy=function(){};
/**
 * @private
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype._pushDataChanges=function(){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype._onStoreSet=function(item){};
/**
 * @private
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype._onStoreNew=function(){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype._onStoreDelete=function(item){};
/**
 * @param {mixed} items 
 * @param {mixed} request 
 * @private
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype._onFetchComplete=function(items, request){};
/**
 * @param {mixed} field 
 * @param {mixed} store 
 * @param {mixed} item 
 * @private
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype._fieldValue=function(field, store, item){};
/**
 * @param {mixed} keys 
 * @param {mixed} dict 
 * @param {mixed} store 
 * @param {mixed} item 
 * @private
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype._dictValue=function(keys, dict, store, item){};
/**
 * @param {mixed} store 
 * @param {mixed} item 
 * @private
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype._defaultValue=function(store, item){};
/**
 * @private
 * @memberOf dojox.charting.DataSeries
*/
dojox.charting.DataSeries.prototype._buildItemMap=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base keyword arguments object for plot constructors.<br>
 *	 Note that the parameters for this may change based on the<br>
 *	 specific plot type (see the corresponding plot type for<br>
 *	 details).<br>
 * </blockquote>
 * @private
*/
dojox.charting.plot2d.__PlotCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Specialized keyword arguments object for use in defining parameters on a Pie chart.<br>
 * </blockquote>
 * @private
*/
dojox.charting.plot2d.__PieCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A special keyword arguments object that is specific to a grid &amp;quot;plot&amp;quot;.<br>
 * </blockquote>
 * @private
*/
dojox.charting.plot2d.__GridCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The arguments used for any/most plots.<br>
 * </blockquote>
 * @private
*/
dojox.charting.plot2d.__DefaultCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional keyword arguments for bar charts.<br>
 * </blockquote>
 * @private
*/
dojox.charting.plot2d.__BarCtorArgs=function(){};
/**
 * @private
*/
dojox.charting.plot2d._PlotEvents=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A convenience object to create a stacked line chart.<br>
 * </blockquote>
*/
dojox.charting.plot2d.StackedLines=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot object representing a stacked column chart (vertical bars).<br>
 * </blockquote>
*/
dojox.charting.plot2d.StackedColumns=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot object representing a stacked bar chart (horizontal bars).<br>
 * </blockquote>
*/
dojox.charting.plot2d.StackedBars=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A convenience object to set up a stacked area plot.<br>
 * </blockquote>
*/
dojox.charting.plot2d.StackedAreas=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Like the default plot, Stacked sets up lines, areas and markers<br>
 *	 in a stacked fashion (values on the y axis added to each other)<br>
 *	 as opposed to a direct one.<br>
 * </blockquote>
*/
dojox.charting.plot2d.Stacked=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot that represents a typical Spider chart.<br>
 * </blockquote>
 * @param {mixed} chart 
 * @param {mixed} kwArgs 
*/
dojox.charting.plot2d.Spider=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot object representing a typical scatter chart.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__DefaultCtorArgs} [kwArgs] An optional keyword arguments object to help define this plot's parameters.
*/
dojox.charting.plot2d.Scatter=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot that represents a typical pie chart.<br>
 *	 <br>
 *	 <br>
 *	 utilities<br>
 * </blockquote>
 * @param {mixed} chart 
 * @param {mixed} kwArgs 
*/
dojox.charting.plot2d.Pie=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot that represents typical open/high/low/close (financial reporting, primarily).<br>
 *	 Unlike most charts, the Candlestick expects data points to be represented by<br>
 *	 an object of the form { x?, open, close, high, low, mid? }, where both<br>
 *	 x and mid are optional parameters.  If x is not provided, the index of the<br>
 *	 data array is used.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__BarCtorArgs} [kwArgs] An optional keyword arguments object to help define the plot.
*/
dojox.charting.plot2d.OHLC=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 A convenience object to draw only markers (like a scatter but not quite).<br>
 * </blockquote>
*/
dojox.charting.plot2d.MarkersOnly=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A convenience plot to draw a line chart with markers.<br>
 * </blockquote>
*/
dojox.charting.plot2d.Markers=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A convenience constructor to create a typical line chart.<br>
 * </blockquote>
*/
dojox.charting.plot2d.Lines=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;faux&amp;quot; plot that can be placed behind other plots to represent<br>
 *	 a grid against which other plots can be easily measured.<br>
 *	 <br>
 *	 <br>
 *	 no optional parameters<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__GridCtorArgs} [kwArgs] An optional keyword arguments object to help define the parameters of the underlying grid.
*/
dojox.charting.plot2d.Grid=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a new plot.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__DefaultCtorArgs} [kwArgs] An optional arguments object to help define this plot.
*/
dojox.charting.plot2d.Default=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot object representing a column chart (vertical bars).<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__BarCtorArgs} [kwArgs] An optional keyword arguments object to help define the plot.
*/
dojox.charting.plot2d.Columns=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot representing grouped or clustered columns (vertical bars).<br>
 * </blockquote>
*/
dojox.charting.plot2d.ClusteredColumns=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot representing grouped or clustered bars (horizontal bars)<br>
 * </blockquote>
*/
dojox.charting.plot2d.ClusteredBars=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot that represents typical candlesticks (financial reporting, primarily).<br>
 *	 Unlike most charts, the Candlestick expects data points to be represented by<br>
 *	 an object of the form { x?, open, close, high, low, mid? }, where both<br>
 *	 x and mid are optional parameters.  If x is not provided, the index of the<br>
 *	 data array is used.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__BarCtorArgs} [kwArgs] An optional keyword arguments object to help define the plot.
*/
dojox.charting.plot2d.Candlesticks=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot representing bubbles.  Note that data for Bubbles requires 3 parameters,<br>
 *	 in the form of:  { x, y, size }, where size determines the size of the bubble.<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__DefaultCtorArgs} [kwArgs] Optional keyword arguments object to help define plot parameters.
*/
dojox.charting.plot2d.Bubble=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a base plot for charting.<br>
 * </blockquote>
 * @param {dojox.chart.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__PlotCtorArgs} [kwArgs] An optional arguments object to help define the plot.
*/
dojox.charting.plot2d.Base=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot object representing a bar chart (horizontal bars).<br>
 * </blockquote>
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__BarCtorArgs} [kwArgs] An optional keyword arguments object to help define the plot.
*/
dojox.charting.plot2d.Bars=function(chart, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents an area chart.  See dojox.charting.plot2d.Default for details.<br>
 * </blockquote>
*/
dojox.charting.plot2d.Areas=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents an area chart.  See dojox.charting.plot2d.Default for details.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Default
 * @returns {dojox.charting.plot2d.Areas} new instance
*/
dojox.charting.plot2d.Areas=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a new plot.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Base
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__DefaultCtorArgs} [kwArgs] An optional arguments object to help define this plot.
 * @returns {dojox.charting.plot2d.Default} new instance
*/
dojox.charting.plot2d.Default=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot2d.Default.optionalParams={};
/**
 * @namespace
*/
dojox.charting.plot2d.Default.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Render/draw everything on this plot.<br>
 * </blockquote>
 * @param {Object} dim An object of the form { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b }
 * 
 * @returns {dojox.charting.plot2d.Default} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Default
*/
dojox.charting.plot2d.Default.prototype.render=function(dim, offsets){};
/**
 * @param {mixed} run 
 * @param {mixed} creator 
 * @param {mixed} params 
 * @memberOf dojox.charting.plot2d.Default
*/
dojox.charting.plot2d.Default.prototype.createPath=function(run, creator, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 Additional keyword arguments for bar charts.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.__DefaultCtorArgs
 * @private
 * @returns {dojox.charting.plot2d.__BarCtorArgs} new instance
*/
dojox.charting.plot2d.__BarCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot object representing a bar chart (horizontal bars).<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Base
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__BarCtorArgs} [kwArgs] An optional keyword arguments object to help define the plot.
 * @returns {dojox.charting.plot2d.Bars} new instance
*/
dojox.charting.plot2d.Bars=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot2d.Bars.optionalParams={};
/**
 * @namespace
*/
dojox.charting.plot2d.Bars.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the calculations for any axes for this plot.<br>
 * </blockquote>
 * @param {Object} dim An object in the form of { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b}.
 * 
 * @returns {dojox.charting.plot2d.Bars} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Bars
*/
dojox.charting.plot2d.Bars.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the min/max on all attached series in both directions.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.Bars
*/
dojox.charting.plot2d.Bars.prototype.getSeriesStats=function(){};
/**
 * @param {mixed} run 
 * @param {mixed} creator 
 * @param {mixed} params 
 * @memberOf dojox.charting.plot2d.Bars
*/
dojox.charting.plot2d.Bars.prototype.createRect=function(run, creator, params){};
/**
 * @param {mixed} shape 
 * @param {mixed} hoffset 
 * @param {mixed} hsize 
 * @private
 * @memberOf dojox.charting.plot2d.Bars
*/
dojox.charting.plot2d.Bars.prototype._animateBar=function(shape, hoffset, hsize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a base plot for charting.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.Element
 * @extends dojox.charting.plot2d._PlotEvents
 * @param {dojox.chart.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__PlotCtorArgs} [kwArgs] An optional arguments object to help define the plot.
 * @returns {dojox.charting.plot2d.Base} new instance
*/
dojox.charting.plot2d.Base=function(chart, kwArgs){};
/**
 * @namespace
 * @private
*/
dojox.charting.plot2d.Base._vScaler={};
/**
 * @namespace
 * @private
*/
dojox.charting.plot2d.Base._vAxis={};
/**
 * @namespace
 * @private
*/
dojox.charting.plot2d.Base._hScaler={};
/**
 * @namespace
 * @private
*/
dojox.charting.plot2d.Base._hAxis={};
/**
 * <b>Summary:</b><blockquote>
 *	 Compute page coordinates from plot axis data coordinates.<br>
 * </blockquote>
 * @param {Object} [coord] The coordinates in plot axis data coordinate space. For cartesian charts that is of the following form:
 * `{ hAxisName: 50, vAxisName: 200 }`<br>
 * If not provided return the tranform method instead of the result of the transformation.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.toPage=function(coord){};
/**
 * <b>Summary:</b><blockquote>
 *	 Compute plot axis data coordinates from page coordinates.<br>
 * </blockquote>
 * @param {Object} coord The pixel coordinate in page coordinate space. That is of the following form:
 * `{ x: 50, y: 200 }`<br>
 * If not provided return the tranform method instead of the result of the transformation.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.toData=function(coord){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set an axis for this plot.<br>
 * </blockquote>
 * @param {dojox.charting.axis2d.Base} axis The axis to set.
 * 
 * @returns {dojox.charting.plot2d.Base} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.setAxis=function(axis){};
/**
 * <b>Summary:</b><blockquote>
 *	 Render the plot on the chart.<br>
 * </blockquote>
 * @param {Object} dim An object of the form { width, height }.
 * @param {Object} offsets An object of the form { l, r, t, b }.
 * 
 * @returns {dojox.charting.plot2d.Base} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create/alter any zooming windows on this plot.<br>
 * </blockquote>
 * @param {Object} dim An object of the form { width, height }.
 * @param {Object} offsets An object of the form { l, r, t, b }.
 * 
 * @returns {dojox.charting.plot2d.Base} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.performZoom=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns whether or not this plot needs to be rendered.<br>
 * </blockquote>
 * 
 * @returns {Boolean} -The state of the plot.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.isDirty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns whether or not any of this plot's data series need to be rendered.<br>
 * </blockquote>
 * 
 * @returns {Boolean} -Flag indicating if any of this plot's series are invalid and need rendering.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.isDataDirty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes scalers using attached axes.<br>
 * </blockquote>
 * @param {Object:} dim Size of a plot area in pixels as {width, height}.
 * @param {Object:} stats Min/max of data in both directions as {hmin, hmax, vmin, vmax}.
 * 
 * @returns {dojox.charting.plot2d.Base} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.initializeScalers=function(dim, stats){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the min/max on all attached series in both directions.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.getSeriesStats=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get how many data series we have, so we know how many colors to use.<br>
 * </blockquote>
 * 
 * @returns {Number} -The number of colors needed.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.getRequiredColors=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear out all of the information tied to this plot.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.plot2d.Base} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function for running the axis calculations (depricated).<br>
 * </blockquote>
 * @param {Object} dim An object of the form { width, height }
 * 
 * @returns {dojox.charting.plot2d.Base} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.calculateAxes=function(dim){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a data series to this plot.<br>
 * </blockquote>
 * @param {dojox.charting.Series} run The series to be added.
 * 
 * @returns {dojox.charting.plot2d.Base} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Base
*/
dojox.charting.plot2d.Base.prototype.addSeries=function(run){};
/**
 * @class
 * @private
 * @returns {dojox.charting.plot2d._PlotEvents} new instance
*/
dojox.charting.plot2d._PlotEvents=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reset all events attached to our plotEvent (i.e. disconnect).<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d._PlotEvents
*/
dojox.charting.plot2d._PlotEvents.prototype.resetEvents=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Raises events in predefined order<br>
 * </blockquote>
 * @param {Object} o An object intended to represent event parameters.
 * @memberOf dojox.charting.plot2d._PlotEvents
*/
dojox.charting.plot2d._PlotEvents.prototype.raiseEvent=function(o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function for use by specific plots.<br>
 * </blockquote>
 * @param {Object} o An object intended to represent event parameters.
 * @memberOf dojox.charting.plot2d._PlotEvents
*/
dojox.charting.plot2d._PlotEvents.prototype.plotEvent=function(o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Emulates firing an event for a given data value (specified by<br>
 *	 an index) of a given series.<br>
 * </blockquote>
 * @param {String:} seriesName Series name.
 * @param {String:} eventName Event name to emulate.
 * @param {Number:} index Valid data value index used to raise an event.
 * @param {Object:} [eventObject] Optional event object. Especially useful for synthetic events.
 * Default: null.
 * @memberOf dojox.charting.plot2d._PlotEvents
*/
dojox.charting.plot2d._PlotEvents.prototype.fireEvent=function(seriesName, eventName, index, eventObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find out if any event handlers have been connected to our plotEvent.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d._PlotEvents
*/
dojox.charting.plot2d._PlotEvents.prototype.events=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy any internal elements and event handlers.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d._PlotEvents
*/
dojox.charting.plot2d._PlotEvents.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function to connect any object's method to our plotEvent.<br>
 * </blockquote>
 * @param {Object} object The object to connect to.
 * @param {String|Function} method The method to fire when our plotEvent is fired.
 * 
 * @returns {Array} -The handle as returned from dojo.connect (see dojo.connect).
 * @memberOf dojox.charting.plot2d._PlotEvents
*/
dojox.charting.plot2d._PlotEvents.prototype.connect=function(object, method){};
/**
 * @param {mixed} seriesName 
 * @private
 * @memberOf dojox.charting.plot2d._PlotEvents
*/
dojox.charting.plot2d._PlotEvents.prototype._reconnectEvents=function(seriesName){};
/**
 * @param {mixed} o 
 * @param {mixed} eventName 
 * @private
 * @memberOf dojox.charting.plot2d._PlotEvents
*/
dojox.charting.plot2d._PlotEvents.prototype._connectSingleEvent=function(o, eventName){};
/**
 * @param {mixed} o 
 * @private
 * @memberOf dojox.charting.plot2d._PlotEvents
*/
dojox.charting.plot2d._PlotEvents.prototype._connectEvents=function(o){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot representing bubbles.  Note that data for Bubbles requires 3 parameters,<br>
 *	 in the form of:  { x, y, size }, where size determines the size of the bubble.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Base
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__DefaultCtorArgs} [kwArgs] Optional keyword arguments object to help define plot parameters.
 * @returns {dojox.charting.plot2d.Bubble} new instance
*/
dojox.charting.plot2d.Bubble=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot2d.Bubble.optionalParams={};
/**
 * @namespace
*/
dojox.charting.plot2d.Bubble.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the calculations for any axes for this plot.<br>
 * </blockquote>
 * @param {Object} dim An object in the form of { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b}.
 * 
 * @returns {dojox.charting.plot2d.Bubble} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Bubble
*/
dojox.charting.plot2d.Bubble.prototype.render=function(dim, offsets){};
/**
 * @param {mixed} shape 
 * @param {mixed} offset 
 * @param {mixed} size 
 * @private
 * @memberOf dojox.charting.plot2d.Bubble
*/
dojox.charting.plot2d.Bubble.prototype._animateBubble=function(shape, offset, size){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot that represents typical candlesticks (financial reporting, primarily).<br>
 *	 Unlike most charts, the Candlestick expects data points to be represented by<br>
 *	 an object of the form { x?, open, close, high, low, mid? }, where both<br>
 *	 x and mid are optional parameters.  If x is not provided, the index of the<br>
 *	 data array is used.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Base
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__BarCtorArgs} [kwArgs] An optional keyword arguments object to help define the plot.
 * @returns {dojox.charting.plot2d.Candlesticks} new instance
*/
dojox.charting.plot2d.Candlesticks=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot2d.Candlesticks.optionalParams={};
/**
 * @namespace
*/
dojox.charting.plot2d.Candlesticks.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the calculations for any axes for this plot.<br>
 * </blockquote>
 * @param {Object} dim An object in the form of { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b}.
 * 
 * @returns {dojox.charting.plot2d.Candlesticks} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Candlesticks
*/
dojox.charting.plot2d.Candlesticks.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the min/max on all attached series in both directions.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.Candlesticks
*/
dojox.charting.plot2d.Candlesticks.prototype.getSeriesStats=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Collect all statistics for drawing this chart.  Since the common<br>
 *	 functionality only assumes x and y, Candlesticks must create it's own<br>
 *	 stats (since data has no y value, but open/close/high/low instead).<br>
 * </blockquote>
 * @param {dojox.charting.Series[]} series The data series array to be drawn on this plot.
 * 
 * @returns {Object} -Returns an object in the form of { hmin, hmax, vmin, vmax }.
 * @memberOf dojox.charting.plot2d.Candlesticks
*/
dojox.charting.plot2d.Candlesticks.prototype.collectStats=function(series){};
/**
 * @param {mixed} shape 
 * @param {mixed} voffset 
 * @param {mixed} vsize 
 * @private
 * @memberOf dojox.charting.plot2d.Candlesticks
*/
dojox.charting.plot2d.Candlesticks.prototype._animateCandlesticks=function(shape, voffset, vsize){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot representing grouped or clustered bars (horizontal bars)<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Bars
 * @returns {dojox.charting.plot2d.ClusteredBars} new instance
*/
dojox.charting.plot2d.ClusteredBars=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the calculations for any axes for this plot.<br>
 * </blockquote>
 * @param {Object} dim An object in the form of { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b}.
 * 
 * @returns {dojox.charting.plot2d.ClusteredBars} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.ClusteredBars
*/
dojox.charting.plot2d.ClusteredBars.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot representing grouped or clustered columns (vertical bars).<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Columns
 * @returns {dojox.charting.plot2d.ClusteredColumns} new instance
*/
dojox.charting.plot2d.ClusteredColumns=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the calculations for any axes for this plot.<br>
 * </blockquote>
 * @param {Object} dim An object in the form of { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b}.
 * 
 * @returns {dojox.charting.plot2d.ClusteredColumns} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.ClusteredColumns
*/
dojox.charting.plot2d.ClusteredColumns.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot object representing a column chart (vertical bars).<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Base
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__BarCtorArgs} [kwArgs] An optional keyword arguments object to help define the plot.
 * @returns {dojox.charting.plot2d.Columns} new instance
*/
dojox.charting.plot2d.Columns=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot2d.Columns.optionalParams={};
/**
 * @namespace
*/
dojox.charting.plot2d.Columns.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the calculations for any axes for this plot.<br>
 * </blockquote>
 * @param {Object} dim An object in the form of { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b}.
 * 
 * @returns {dojox.charting.plot2d.Columns} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Columns
*/
dojox.charting.plot2d.Columns.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the min/max on all attached series in both directions.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.Columns
*/
dojox.charting.plot2d.Columns.prototype.getSeriesStats=function(){};
/**
 * @param {mixed} run 
 * @param {mixed} creator 
 * @param {mixed} params 
 * @memberOf dojox.charting.plot2d.Columns
*/
dojox.charting.plot2d.Columns.prototype.createRect=function(run, creator, params){};
/**
 * @param {mixed} shape 
 * @param {mixed} voffset 
 * @param {mixed} vsize 
 * @private
 * @memberOf dojox.charting.plot2d.Columns
*/
dojox.charting.plot2d.Columns.prototype._animateColumn=function(shape, voffset, vsize){};
/**
 * <b>Summary:</b><blockquote>
 *	 The arguments used for any/most plots.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.__PlotCtorArgs
 * @private
 * @returns {dojox.charting.plot2d.__DefaultCtorArgs} new instance
*/
dojox.charting.plot2d.__DefaultCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A special keyword arguments object that is specific to a grid &amp;quot;plot&amp;quot;.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.__DefaultCtorArgs
 * @private
 * @returns {dojox.charting.plot2d.__GridCtorArgs} new instance
*/
dojox.charting.plot2d.__GridCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;faux&amp;quot; plot that can be placed behind other plots to represent<br>
 *	 a grid against which other plots can be easily measured.<br>
 *	 <br>
 *	 <br>
 *	 no optional parameters<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Element
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__GridCtorArgs} [kwArgs] An optional keyword arguments object to help define the parameters of the underlying grid.
 * @returns {dojox.charting.plot2d.Grid} new instance
*/
dojox.charting.plot2d.Grid=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot2d.Grid.defaultParams={};
/**
 * @namespace
 * @private
*/
dojox.charting.plot2d.Grid._vAxis={};
/**
 * @namespace
 * @private
*/
dojox.charting.plot2d.Grid._hAxis={};
/**
 * <b>Summary:</b><blockquote>
 *	 Set an axis for this plot.<br>
 * </blockquote>
 * @param {mixed} axis 
 * 
 * @returns {dojox.charting.plot2d.Grid} -The reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype.setAxis=function(axis){};
/**
 * <b>Summary:</b><blockquote>
 *	 Render the plot on the chart.<br>
 * </blockquote>
 * @param {Object} dim An object of the form { width, height }.
 * @param {Object} offsets An object of the form { l, r, t, b }.
 * 
 * @returns {dojox.charting.plot2d.Grid} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create/alter any zooming windows on this plot.<br>
 * </blockquote>
 * @param {Object} dim An object of the form { width, height }.
 * @param {Object} offsets An object of the form { l, r, t, b }.
 * 
 * @returns {dojox.charting.plot2d.Grid} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype.performZoom=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return whether or not this plot needs to be redrawn.<br>
 * </blockquote>
 * 
 * @returns {Boolean} -If this plot needs to be rendered, this will return true.
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype.isDirty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Does nothing (irrelevant for this type of plot).<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype.initializeScalers=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns default stats (irrelevant for this type of plot).<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype.getSeriesStats=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ignored but included as a dummy method.<br>
 * </blockquote>
 * 
 * @returns {Number} -Returns 0, since there are no series associated with this plot type.
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype.getRequiredColors=function(){};
/**
 * @param {mixed} creator 
 * @param {mixed} params 
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype.createLine=function(creator, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear out any parameters set on this plot.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.plot2d.Grid} -The reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype.clear=function(){};
/**
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype.cleanGroup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ignored but included as a dummy method.<br>
 * </blockquote>
 * @param {mixed} run 
 * 
 * @returns {dojox.charting.plot2d.Grid} -The reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype.addSeries=function(run){};
/**
 * @param {mixed} shape 
 * @param {mixed} type 
 * @param {mixed} offset 
 * @param {mixed} size 
 * @private
 * @memberOf dojox.charting.plot2d.Grid
*/
dojox.charting.plot2d.Grid.prototype._animateGrid=function(shape, type, offset, size){};
/**
 * <b>Summary:</b><blockquote>
 *	 A convenience constructor to create a typical line chart.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Default
 * @returns {dojox.charting.plot2d.Lines} new instance
*/
dojox.charting.plot2d.Lines=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A convenience plot to draw a line chart with markers.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Default
 * @returns {dojox.charting.plot2d.Markers} new instance
*/
dojox.charting.plot2d.Markers=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A convenience object to draw only markers (like a scatter but not quite).<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Default
 * @returns {dojox.charting.plot2d.MarkersOnly} new instance
*/
dojox.charting.plot2d.MarkersOnly=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot that represents typical open/high/low/close (financial reporting, primarily).<br>
 *	 Unlike most charts, the Candlestick expects data points to be represented by<br>
 *	 an object of the form { x?, open, close, high, low, mid? }, where both<br>
 *	 x and mid are optional parameters.  If x is not provided, the index of the<br>
 *	 data array is used.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Base
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__BarCtorArgs} [kwArgs] An optional keyword arguments object to help define the plot.
 * @returns {dojox.charting.plot2d.OHLC} new instance
*/
dojox.charting.plot2d.OHLC=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot2d.OHLC.optionalParams={};
/**
 * @namespace
*/
dojox.charting.plot2d.OHLC.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the calculations for any axes for this plot.<br>
 * </blockquote>
 * @param {Object} dim An object in the form of { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b}.
 * 
 * @returns {dojox.charting.plot2d.OHLC} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.OHLC
*/
dojox.charting.plot2d.OHLC.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the min/max on all attached series in both directions.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.OHLC
*/
dojox.charting.plot2d.OHLC.prototype.getSeriesStats=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Collect all statistics for drawing this chart.  Since the common<br>
 *	 functionality only assumes x and y, OHLC must create it's own<br>
 *	 stats (since data has no y value, but open/close/high/low instead).<br>
 * </blockquote>
 * @param {dojox.charting.Series[]} series The data series array to be drawn on this plot.
 * @memberOf dojox.charting.plot2d.OHLC
*/
dojox.charting.plot2d.OHLC.prototype.collectStats=function(series){};
/**
 * @param {mixed} shape 
 * @param {mixed} voffset 
 * @param {mixed} vsize 
 * @private
 * @memberOf dojox.charting.plot2d.OHLC
*/
dojox.charting.plot2d.OHLC.prototype._animateOHLC=function(shape, voffset, vsize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Specialized keyword arguments object for use in defining parameters on a Pie chart.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.__DefaultCtorArgs
 * @private
 * @returns {dojox.charting.plot2d.__PieCtorArgs} new instance
*/
dojox.charting.plot2d.__PieCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot that represents a typical pie chart.<br>
 *	 <br>
 *	 <br>
 *	 utilities<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.Element
 * @extends dojox.charting.plot2d._PlotEvents
 * @param {mixed} chart 
 * @param {mixed} kwArgs 
 * @returns {dojox.charting.plot2d.Pie} new instance
*/
dojox.charting.plot2d.Pie=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot2d.Pie.run={};
/**
 * @namespace
*/
dojox.charting.plot2d.Pie.optionalParams={};
/**
 * @namespace
*/
dojox.charting.plot2d.Pie.opt={};
/**
 * @namespace
*/
dojox.charting.plot2d.Pie.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Dummy method, since axes are irrelevant with a Pie chart.<br>
 * </blockquote>
 * @param {mixed} axis 
 * 
 * @returns {dojox.charting.plot2d.Pie} -The reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Pie
*/
dojox.charting.plot2d.Pie.prototype.setAxis=function(axis){};
/**
 * <b>Summary:</b><blockquote>
 *	 Render the plot on the chart.<br>
 * </blockquote>
 * @param {Object} dim An object of the form { width, height }.
 * @param {Object} offsets An object of the form { l, r, t, b }.
 * 
 * @returns {continue|stop iteration|dojox.charting.plot2d.Pie} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Pie
*/
dojox.charting.plot2d.Pie.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Does nothing (irrelevant for this type of plot).<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.Pie
*/
dojox.charting.plot2d.Pie.prototype.initializeScalers=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns default stats (irrelevant for this type of plot).<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.Pie
*/
dojox.charting.plot2d.Pie.prototype.getSeriesStats=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the number of colors needed to draw this plot.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.Pie
*/
dojox.charting.plot2d.Pie.prototype.getRequiredColors=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear out all of the information tied to this plot.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.plot2d.Pie} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Pie
*/
dojox.charting.plot2d.Pie.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a series of data to this plot.<br>
 * </blockquote>
 * @param {mixed} run 
 * 
 * @returns {dojox.charting.plot2d.Pie} -The reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Pie
*/
dojox.charting.plot2d.Pie.prototype.addSeries=function(run){};
/**
 * @param {mixed} slices 
 * @param {mixed} labelHeight 
 * @param {mixed} minRidius 
 * @private
 * @memberOf dojox.charting.plot2d.Pie
*/
dojox.charting.plot2d.Pie.prototype._getProperLabelRadius=function(slices, labelHeight, minRidius){};
/**
 * @param {mixed} number 
 * @private
 * @memberOf dojox.charting.plot2d.Pie
*/
dojox.charting.plot2d.Pie.prototype._getLabel=function(number){};
/**
 * @param {mixed} firstSlice 
 * @param {mixed} slices 
 * @param {mixed} labelHeight 
 * @private
 * @memberOf dojox.charting.plot2d.Pie
*/
dojox.charting.plot2d.Pie.prototype._calculateLabelR=function(firstSlice, slices, labelHeight){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plot object representing a typical scatter chart.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Base
 * @param {dojox.charting.Chart} chart The chart this plot belongs to.
 * @param {dojox.charting.plot2d.__DefaultCtorArgs} [kwArgs] An optional keyword arguments object to help define this plot's parameters.
 * @returns {dojox.charting.plot2d.Scatter} new instance
*/
dojox.charting.plot2d.Scatter=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot2d.Scatter.optionalParams={};
/**
 * @namespace
*/
dojox.charting.plot2d.Scatter.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the calculations for any axes for this plot.<br>
 * </blockquote>
 * @param {Object} dim An object in the form of { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b}.
 * 
 * @returns {dojox.charting.plot2d.Scatter} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Scatter
*/
dojox.charting.plot2d.Scatter.prototype.render=function(dim, offsets){};
/**
 * @param {mixed} shape 
 * @param {mixed} offset 
 * @private
 * @memberOf dojox.charting.plot2d.Scatter
*/
dojox.charting.plot2d.Scatter.prototype._animateScatter=function(shape, offset){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot that represents a typical Spider chart.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.Element
 * @extends dojox.charting.plot2d._PlotEvents
 * @param {mixed} chart 
 * @param {mixed} kwArgs 
 * @returns {dojox.charting.plot2d.Spider} new instance
*/
dojox.charting.plot2d.Spider=function(chart, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot2d.Spider.optionalParams={};
/**
 * @namespace
*/
dojox.charting.plot2d.Spider.opt={};
/**
 * @namespace
*/
dojox.charting.plot2d.Spider.defaultParams={};
/**
 * <b>Summary:</b><blockquote>
 *	 Dummy method, since axes are irrelevant with a Spider chart.<br>
 * </blockquote>
 * @param {mixed} axis 
 * 
 * @returns {dojox.charting.plot2d.Spider} -The reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype.setAxis=function(axis){};
/**
 * <b>Summary:</b><blockquote>
 *	 Render the plot on the chart.<br>
 * </blockquote>
 * @param {Object} dim An object of the form { width, height }.
 * @param {Object} offsets An object of the form { l, r, t, b }.
 * 
 * @returns {dojox.charting.plot2d.Spider} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function for use by specific plots.<br>
 * </blockquote>
 * @param {Object} o An object intended to represent event parameters.
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype.plotEvent=function(o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes scalers using attached axes.<br>
 * </blockquote>
 * @param {Object:} dim Size of a plot area in pixels as {width, height}.
 * @param {Object:} stats Min/max of data in both directions as {hmin, hmax, vmin, vmax}.
 * 
 * @returns {dojox.charting.plot2d.Base} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype.initializeScalers=function(dim, stats){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the min/max on all attached series in both directions.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype.getSeriesStats=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get how many data series we have, so we know how many colors to use.<br>
 * </blockquote>
 * 
 * @returns {Number} -The number of colors needed.
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype.getRequiredColors=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear out all of the information tied to this plot.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.plot2d.Spider} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function for running the axis calculations (depricated).<br>
 * </blockquote>
 * @param {Object} dim An object of the form { width, height }
 * 
 * @returns {dojox.charting.plot2d.Base} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype.calculateAxes=function(dim){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a data series to this plot.<br>
 * </blockquote>
 * @param {dojox.charting.Series} run The series to be added.
 * 
 * @returns {dojox.charting.plot2d.Base} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype.addSeries=function(run){};
/**
 * @param {mixed} obj 
 * @private
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype._getObjectLength=function(obj){};
/**
 * @param {mixed} number 
 * @private
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype._getLabel=function(number){};
/**
 * @param {mixed} circle 
 * @param {mixed} radius 
 * @param {mixed} angle 
 * @private
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype._getCoordinate=function(circle, radius, angle){};
/**
 * @param {mixed} points 
 * @private
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype._getBoundary=function(points){};
/**
 * @param {mixed} s 
 * @param {mixed} start 
 * @param {mixed} end 
 * @param {mixed} stroke 
 * @private
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype._drawArrow=function(s, start, end, stroke){};
/**
 * @param {mixed} ts 
 * @param {mixed} osps 
 * @param {mixed} sps 
 * @param {mixed} f 
 * @param {mixed} sk 
 * @param {mixed} r 
 * @param {mixed} ro 
 * @param {mixed} ms 
 * @param {mixed} at 
 * @private
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype._createSeriesEntry=function(ts, osps, sps, f, sk, r, ro, ms, at){};
/**
 * @param {mixed} points 
 * @param {mixed} count 
 * @param {mixed} circle 
 * @param {mixed} radius 
 * @param {mixed} angle 
 * @param {mixed} recursive 
 * @private
 * @memberOf dojox.charting.plot2d.Spider
*/
dojox.charting.plot2d.Spider.prototype._buildPoints=function(points, count, circle, radius, angle, recursive){};
/**
 * @namespace
*/
dojox.charting.plot2d.Spider.chart={};
/**
 * <b>Summary:</b><blockquote>
 *	 A convenience object to set up a stacked area plot.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Stacked
 * @returns {dojox.charting.plot2d.StackedAreas} new instance
*/
dojox.charting.plot2d.StackedAreas=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Like the default plot, Stacked sets up lines, areas and markers<br>
 *	 in a stacked fashion (values on the y axis added to each other)<br>
 *	 as opposed to a direct one.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Default
 * @returns {dojox.charting.plot2d.Stacked} new instance
*/
dojox.charting.plot2d.Stacked=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the calculations for any axes for this plot.<br>
 * </blockquote>
 * @param {Object} dim An object in the form of { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b}.
 * 
 * @returns {dojox.charting.plot2d.Stacked} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.Stacked
*/
dojox.charting.plot2d.Stacked.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the min/max on all attached series in both directions.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.Stacked
*/
dojox.charting.plot2d.Stacked.prototype.getSeriesStats=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot object representing a stacked bar chart (horizontal bars).<br>
 * </blockquote>
 * @class
 * @returns {dojox.charting.plot2d.StackedBars} new instance
*/
dojox.charting.plot2d.StackedBars=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the calculations for any axes for this plot.<br>
 * </blockquote>
 * @param {Object} dim An object in the form of { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b}.
 * 
 * @returns {dojox.charting.plot2d.StackedBars} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.StackedBars
*/
dojox.charting.plot2d.StackedBars.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the min/max on all attached series in both directions.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.StackedBars
*/
dojox.charting.plot2d.StackedBars.prototype.getSeriesStats=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The plot object representing a stacked column chart (vertical bars).<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Columns
 * @returns {dojox.charting.plot2d.StackedColumns} new instance
*/
dojox.charting.plot2d.StackedColumns=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the calculations for any axes for this plot.<br>
 * </blockquote>
 * @param {Object} dim An object in the form of { width, height }
 * @param {Object} offsets An object of the form { l, r, t, b}.
 * 
 * @returns {dojox.charting.plot2d.StackedColumns} -A reference to this plot for functional chaining.
 * @memberOf dojox.charting.plot2d.StackedColumns
*/
dojox.charting.plot2d.StackedColumns.prototype.render=function(dim, offsets){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the min/max on all attached series in both directions.<br>
 * </blockquote>
 * @memberOf dojox.charting.plot2d.StackedColumns
*/
dojox.charting.plot2d.StackedColumns.prototype.getSeriesStats=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A convenience object to create a stacked line chart.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.plot2d.Stacked
 * @returns {dojox.charting.plot2d.StackedLines} new instance
*/
dojox.charting.plot2d.StackedLines=function(){};
/**
 * @param {mixed} width 
 * @param {mixed} height 
 * @param {mixed} kwArgs 
*/
dojox.charting.plot3d.Cylinders=function(width, height, kwArgs){};
/**
 * @param {mixed} width 
 * @param {mixed} height 
 * @param {mixed} kwArgs 
*/
dojox.charting.plot3d.Base=function(width, height, kwArgs){};
/**
 * @param {mixed} width 
 * @param {mixed} height 
 * @param {mixed} kwArgs 
*/
dojox.charting.plot3d.Bars=function(width, height, kwArgs){};
/**
 * @class
 * @extends dojox.charting.plot3d.Base
 * @param {mixed} width 
 * @param {mixed} height 
 * @param {mixed} kwArgs 
 * @returns {dojox.charting.plot3d.Bars} new instance
*/
dojox.charting.plot3d.Bars=function(width, height, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot3d.Bars.material={};
/**
 * @memberOf dojox.charting.plot3d.Bars
*/
dojox.charting.plot3d.Bars.prototype.getDepth=function(){};
/**
 * @param {mixed} chart 
 * @param {mixed} creator 
 * @memberOf dojox.charting.plot3d.Bars
*/
dojox.charting.plot3d.Bars.prototype.generate=function(chart, creator){};
/**
 * @class
 * @param {mixed} width 
 * @param {mixed} height 
 * @param {mixed} kwArgs 
 * @returns {dojox.charting.plot3d.Base} new instance
*/
dojox.charting.plot3d.Base=function(width, height, kwArgs){};
/**
 * @param {mixed} data 
 * @memberOf dojox.charting.plot3d.Base
*/
dojox.charting.plot3d.Base.prototype.setData=function(data){};
/**
 * @memberOf dojox.charting.plot3d.Base
*/
dojox.charting.plot3d.Base.prototype.getDepth=function(){};
/**
 * @param {mixed} chart 
 * @param {mixed} creator 
 * @memberOf dojox.charting.plot3d.Base
*/
dojox.charting.plot3d.Base.prototype.generate=function(chart, creator){};
/**
 * @class
 * @extends dojox.charting.plot3d.Base
 * @param {mixed} width 
 * @param {mixed} height 
 * @param {mixed} kwArgs 
 * @returns {dojox.charting.plot3d.Cylinders} new instance
*/
dojox.charting.plot3d.Cylinders=function(width, height, kwArgs){};
/**
 * @namespace
*/
dojox.charting.plot3d.Cylinders.material={};
/**
 * @memberOf dojox.charting.plot3d.Cylinders
*/
dojox.charting.plot3d.Cylinders.prototype.getDepth=function(){};
/**
 * @param {mixed} chart 
 * @param {mixed} creator 
 * @memberOf dojox.charting.plot3d.Cylinders
*/
dojox.charting.plot3d.Cylinders.prototype.generate=function(chart, creator){};
/**
 * <b>Summary:</b><blockquote>
 *	 An object representing a series of data for plotting on a chart.<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.Element
 * @param {dojox.charting.Chart} chart The chart that this series belongs to.
 * @param {Array|Object:} data The array of data points (either numbers or objects) that
 * represents the data to be drawn. Or it can be an object. In<br>
 * the latter case, it should have a property &quot;data&quot; (an array),<br>
 * destroy(), and setSeriesObject().
 * @param {dojox.charting.__SeriesCtorArgs} [kwArgs] An optional keyword arguments object to set details for this series.
 * @returns {dojox.charting.Series} new instance
*/
dojox.charting.Series=function(chart, data, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set data and make this object dirty, so it can be redrawn.<br>
 * </blockquote>
 * @param {Array|Object:} data The array of data points (either numbers or objects) that
 * represents the data to be drawn. Or it can be an object. In<br>
 * the latter case, it should have a property &quot;data&quot; (an array),<br>
 * destroy(), and setSeriesObject().
 * @memberOf dojox.charting.Series
*/
dojox.charting.Series.prototype.update=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear the calculated additional parameters set on this series.<br>
 * </blockquote>
 * @memberOf dojox.charting.Series
*/
dojox.charting.Series.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An optional arguments object that can be used in the Series constructor.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.charting.__SeriesCtorArgs} new instance
*/
dojox.charting.__SeriesCtorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Series adapter for dojo object stores (dojo.store).<br>
 * </blockquote>
 * @class
 * @param {Object:} store A dojo object store.
 * @param {Object:} kwArgs A store-specific keyword parameters used for querying objects.
 * See dojo.store docs
 * @param {Function|Object|String|Null:} value Function, which takes an object handle, and
 * produces an output possibly inspecting the store's item. Or<br>
 * a dictionary object, which tells what names to extract from<br>
 * an object and how to map them to an output. Or a string, which<br>
 * is a numeric field name to use for plotting. If undefined, null<br>
 * or empty string (the default), &quot;value&quot; field is extracted.
 * @returns {dojox.charting.StoreSeries} new instance
*/
dojox.charting.StoreSeries=function(store, kwArgs, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets a dojox.charting.Series object we will be working with.<br>
 * </blockquote>
 * @param {dojox.charting.Series:} series Our interface to the chart.
 * @memberOf dojox.charting.StoreSeries
*/
dojox.charting.StoreSeries.prototype.setSeriesObject=function(series){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetches data from the store and updates a chart.<br>
 * </blockquote>
 * @memberOf dojox.charting.StoreSeries
*/
dojox.charting.StoreSeries.prototype.fetch=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clean up before GC.<br>
 * </blockquote>
 * @memberOf dojox.charting.StoreSeries
*/
dojox.charting.StoreSeries.prototype.destroy=function(){};
/**
 * @private
 * @memberOf dojox.charting.StoreSeries
*/
dojox.charting.StoreSeries.prototype._pushDataChanges=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Theme is a pre-defined object, primarily JSON-based, that makes up the definitions to<br>
 *	 style a chart.<br>
 * </blockquote>
 * While you can set up style definitions on a chart directly (usually through the various add methods<br>
 * on a dojox.charting.Chart object), a Theme simplifies this manual setup by allowing you to<br>
 * pre-define all of the various visual parameters of each element in a chart.<br>
 * <br>
 * Most of the properties of a Theme are straight-forward; if something is line-based (such as<br>
 * an axis or the ticks on an axis), they will be defined using basic stroke parameters.  Likewise,<br>
 * if an element is primarily block-based (such as the background of a chart), it will be primarily<br>
 * fill-based.<br>
 * <br>
 * In addition (for convenience), a Theme definition does not have to contain the entire JSON-based<br>
 * structure.  Each theme is built on top of a default theme (which serves as the basis for the theme<br>
 * "GreySkies"), and is mixed into the default theme object.  This allows you to create a theme based,<br>
 * say, solely on colors for data series.<br>
 * <br>
 * Defining a new theme is relatively easy; see any of the themes in dojox.charting.themes for examples<br>
 * on how to define your own.<br>
 * <br>
 * When you set a theme on a chart, the theme itself is deep-cloned.  This means that you cannot alter<br>
 * the theme itself after setting the theme value on a chart, and expect it to change your chart.  If you<br>
 * are looking to make alterations to a theme for a chart, the suggestion would be to create your own<br>
 * theme, based on the one you want to use, that makes those alterations before it is applied to a chart.<br>
 * <br>
 * Finally, a Theme contains a number of functions to facilitate rendering operations on a chart--the main<br>
 * helper of which is the ~next~ method, in which a chart asks for the information for the next data series<br>
 * to be rendered.<br>
 * <br>
 * A note on colors:<br>
 * The Theme constructor was on the use of dojox.color.Palette (in general) for creating a visually distinct<br>
 * set of colors for usage in a chart.  A palette is usually comprised of 5 different color definitions, and<br>
 * no more.  If you have a need to render a chart with more than 5 data elements, you can simply "push"<br>
 * new color definitions into the theme's .color array.  Make sure that you do that with the actual<br>
 * theme object from a Chart, and not in the theme itself (i.e. either do that before using .setTheme<br>
 * on a chart).
 * @class
 * @param {mixed} kwArgs 
 * @returns {dojox.charting.Theme} new instance
 * @example
 * The default theme (and structure) looks like so:
 * 	// all objects are structs used directly in dojox.gfx
 * 	chart:{
 * 		stroke: null,
 * 		fill: "white",
 * 		pageStyle: null // suggested page style as an object suitable for dojo.style()
 * 	},
 * 	plotarea:{
 * 		stroke: null,
 * 		fill: "white"
 * 	},
 * 	axis:{
 * 		stroke:	{ // the axis itself
 * 			color: "#333",
 * 			width: 1
 * 		},
 * 		tick: {	// used as a foundation for all ticks
 * 			color:	 "#666",
 * 			position:  "center",
 * 			font:	  "normal normal normal 7pt Tahoma",	// labels on axis
 * 			fontColor: "#333"								// color of labels
 * 		},
 * 		majorTick:	{ // major ticks on axis, and used for major gridlines
 * 			width:  1,
 * 			length: 6
 * 		},
 * 		minorTick:	{ // minor ticks on axis, and used for minor gridlines
 * 			width:  0.8,
 * 			length: 3
 * 		},
 * 		microTick:	{ // minor ticks on axis, and used for minor gridlines
 * 			width:  0.5,
 * 			length: 1
 * 		}
 * 	},
 * 	series: {
 * 		stroke:  {width: 1.5, color: "#333"},		// line
 * 		outline: {width: 0.1, color: "#ccc"},		// outline
 * 		//shadow:  {dx: 1, dy: 1, width: 2, color: [0, 0, 0, 0.3]},
 * 		shadow: null,								// no shadow
 * 		fill:	"#ccc",							// fill, if appropriate
 * 		font:	"normal normal normal 8pt Tahoma",	// if there's a label
 * 		fontColor: "#000"							// color of labels
 * 		labelWiring: {width: 1, color: "#ccc"},		// connect marker and target data item(slice, column, bar...)
 * 	},
 * 	marker: {	// any markers on a series
 * 		symbol:  "m-3,3 l3,-6 3,6 z",				// symbol
 * 		stroke:  {width: 1.5, color: "#333"},		// stroke
 * 		outline: {width: 0.1, color: "#ccc"},		// outline
 * 		shadow: null,								// no shadow
 * 		fill:	"#ccc",							// fill if needed
 * 		font:	"normal normal normal 8pt Tahoma",	// label
 * 		fontColor: "#000"
 * 	},
 * 	indicator: {
 * 		lineStroke:  {width: 1.5, color: "#333"},		// line
 * 		lineOutline: {width: 0.1, color: "#ccc"},		// line outline
 * 		lineShadow: null,								// no line shadow
 * 		stroke:  {width: 1.5, color: "#333"},			// label background stroke
 * 		outline: {width: 0.1, color: "#ccc"},			// label background outline
 * 		shadow: null,									// no label background shadow
 * 		fill:  "#ccc",									// label background fill
 * 		radius: 3,										// radius of the label background
 * 		font:	"normal normal normal 10pt Tahoma",	// label font
 * 		fontColor: "#000"								// label color
 * 		markerFill:	"#ccc",							// marker fill
 * 		markerSymbol:  "m-3,0 c0,-4 6,-4 6,0 m-6,0 c0,4 6,4 6,0",	// marker symbol
 * 		markerStroke:  {width: 1.5, color: "#333"},		// marker stroke
 * 		markerOutline: {width: 0.1, color: "#ccc"},		// marker outline
 * 		markerShadow: null,								// no marker shadow
 * 	}
 * @example
 * Defining a new theme is pretty simple:
 * 	dojox.charting.themes.Grasslands = new dojox.charting.Theme({
 * 		colors: [ "#70803a", "#dde574", "#788062", "#b1cc5d", "#eff2c2" ]
 * 	});
 * 
 * 	myChart.setTheme(dojox.charting.themes.Grasslands);
*/
dojox.charting.Theme=function(kwArgs){};
/**
 * @namespace
*/
dojox.charting.Theme.shapeSpaces={};
/**
 * <b>Summary:</b><blockquote>
 *	 Skip the next internal color.<br>
 * </blockquote>
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype.skip=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set all the markers of this theme at once.  obj should be a<br>
 *	 dictionary of keys and path segments.<br>
 * </blockquote>
 * @param {Object} obj 
 * @example
 * 	myTheme.setMarkers({ "CIRCLE": foo });
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype.setMarkers=function(obj){};
/**
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype.reverseFills=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Process any post-shape fills.<br>
 * </blockquote>
 * @param {dojox.charting.Theme} theme The theme to post process with.
 * @param {String} elementType The type of element being filled.  Can be &quot;bar&quot; or &quot;circle&quot;.
 * 
 * @returns {dojox.charting.Theme} -The post-processed theme.
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype.post=function(theme, elementType){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the next color or series theme.<br>
 * </blockquote>
 * @param {String} [elementType] An optional element type (for use with series themes)
 * @param {Object} [mixin] An optional object to mix into the theme.
 * @param {Boolean} [doPost] A flag to post-process the results.
 * 
 * @returns {Object} -An object of the structure { series, marker, symbol }
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype.next=function(elementType, mixin, doPost){};
/**
 * @param {mixed} f 
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype.inspectObjects=function(f){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculates and merges tick parameters.<br>
 * </blockquote>
 * @param {String} name Tick name, can be &quot;major&quot;, &quot;minor&quot;, or &quot;micro&quot;.
 * @param {Object} [mixin] Optional object to mix in to the tick.
 * @returns {Object} -
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype.getTick=function(name, mixin){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clone the current theme.<br>
 * </blockquote>
 * 
 * @returns {dojox.charting.Theme} -The cloned theme; any alterations made will not affect the original.
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype.clone=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear and reset the internal pointer to start fresh.<br>
 * </blockquote>
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a mixin object to the passed theme and process.<br>
 * </blockquote>
 * @param {dojox.charting.Theme} theme The theme to mixin to.
 * @param {String} elementType The type of element in question. Can be &quot;line&quot;, &quot;bar&quot; or &quot;circle&quot;
 * @param {Object|Array} mixin The object or objects to mix into the theme.
 * @param {Boolean} doPost If true, run the new theme through the post-processor.
 * 
 * @returns {dojox.charting.Theme} -The new theme.
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype.addMixin=function(theme, elementType, mixin, doPost){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a custom marker to this theme.<br>
 * </blockquote>
 * @param {String} name 
 * @param {String} segment 
 * @example
 * 	myTheme.addMarker("Ellipse", foo);
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype.addMarker=function(name, segment){};
/**
 * @private
 * @memberOf dojox.charting.Theme
*/
dojox.charting.Theme.prototype._buildMarkerArray=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The arguments object that can be passed to define colors for a theme.<br>
 * </blockquote>
 * @param {Number} [num] The number of colors to generate.  Defaults to 5.
 * @param {String[]|dojo.Color[]} [colors] A pre-defined set of colors; this is passed through to the Theme directly.
 * @param {Number} [hue] A hue to base the generated colors from (a number from 0 - 359).
 * @param {Number} [saturation] If a hue is passed, this is used for the saturation value (0 - 100).
 * @param {Number} [low] An optional value to determine the lowest value used to generate a color (HSV model)
 * @param {Number} [high] An optional value to determine the highest value used to generate a color (HSV model)
 * @param {String|dojo.Color} [base] A base color to use if we are defining colors using dojox.color.Palette
 * @param {String} [generator] The generator function name from dojox.color.Palette.
 * @private
*/
dojox.charting.Theme.__DefineColorArgs=function(num, colors, hue, saturation, low, high, base, generator){};
/**
 * <b>Summary:</b><blockquote>
 *	 The arguments object that can be passed to define colors for a theme.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.charting.Theme.__DefineColorArgs} new instance
*/
dojox.charting.Theme.__DefineColorArgs=function(){};
/**
 * @namespace
*/
dojox.themes={};
/**
 * @namespace
*/
dojox.themes.Tom={};
/**
 * @namespace
*/
dojox.themes.ThreeD={};
/**
 * @namespace
*/
dojox.themes.Renkoo={};
/**
 * @namespace
*/
dojox.themes.Electric={};
/**
 * @namespace
*/
dojox.themes.Claro={};
/**
 * @namespace
*/
dojox.themes.Chris={};
/**
 * @namespace
*/
dojox.themes.Charged={};
/**
 * @namespace
*/
dojox.charting.themes.PlotKit={};
/**
 * @namespace
*/
dojox.charting.themes.Julie={};
/**
 * @namespace
*/
dojox.charting.themes.Charged={};
/**
 * @param {mixed} theme 
 * @param {mixed} elementType 
*/
dojox.charting.themes.Charged.post=function(theme, elementType){};
/**
 * @param {mixed} elementType 
 * @param {mixed} mixin 
 * @param {mixed} doPost 
*/
dojox.charting.themes.Charged.next=function(elementType, mixin, doPost){};
/**
 * @namespace
*/
dojox.charting.themes.Chris={};
/**
 * @param {mixed} theme 
 * @param {mixed} elementType 
*/
dojox.charting.themes.Chris.post=function(theme, elementType){};
/**
 * @param {mixed} elementType 
 * @param {mixed} mixin 
 * @param {mixed} doPost 
*/
dojox.charting.themes.Chris.next=function(elementType, mixin, doPost){};
/**
 * @namespace
*/
dojox.charting.themes.Claro={};
/**
 * @param {mixed} theme 
 * @param {mixed} elementType 
*/
dojox.charting.themes.Claro.post=function(theme, elementType){};
/**
 * @param {mixed} elementType 
 * @param {mixed} mixin 
 * @param {mixed} doPost 
*/
dojox.charting.themes.Claro.next=function(elementType, mixin, doPost){};
/**
 * @namespace
*/
dojox.charting.themes.Electric={};
/**
 * @param {mixed} theme 
 * @param {mixed} elementType 
*/
dojox.charting.themes.Electric.post=function(theme, elementType){};
/**
 * @param {mixed} elementType 
 * @param {mixed} mixin 
 * @param {mixed} doPost 
*/
dojox.charting.themes.Electric.next=function(elementType, mixin, doPost){};
/**
 * @param {mixed} theme 
 * @param {mixed} elementType 
*/
dojox.charting.themes.Julie.post=function(theme, elementType){};
/**
 * @param {mixed} elementType 
 * @param {mixed} mixin 
 * @param {mixed} doPost 
*/
dojox.charting.themes.Julie.next=function(elementType, mixin, doPost){};
/**
 * @namespace
*/
dojox.pk={};
/**
 * @namespace
*/
dojox.pk.red={};
/**
 * @namespace
*/
dojox.pk.purple={};
/**
 * @namespace
*/
dojox.pk.orange={};
/**
 * @namespace
*/
dojox.pk.green={};
/**
 * @namespace
*/
dojox.pk.cyan={};
/**
 * @namespace
*/
dojox.pk.blue={};
/**
 * @namespace
*/
pk.blue={};
/**
 * @namespace
*/
pk.cyan={};
/**
 * @namespace
*/
pk.green={};
/**
 * @namespace
*/
pk.orange={};
/**
 * @namespace
*/
pk.purple={};
/**
 * @namespace
*/
pk.red={};
/**
 * @namespace
*/
dojox.charting.themes.Renkoo={};
/**
 * @param {mixed} theme 
 * @param {mixed} elementType 
*/
dojox.charting.themes.Renkoo.post=function(theme, elementType){};
/**
 * @param {mixed} elementType 
 * @param {mixed} mixin 
 * @param {mixed} doPost 
*/
dojox.charting.themes.Renkoo.next=function(elementType, mixin, doPost){};
/**
 * @namespace
*/
dojox.charting.themes.ThreeD.series={};
/**
 * @namespace
*/
dojox.charting.themes.ThreeD.series.shadow={};
/**
 * @namespace
*/
dojox.charting.themes.ThreeD={};
/**
 * @param {mixed} elementType 
 * @param {mixed} mixin 
 * @param {mixed} doPost 
*/
dojox.charting.themes.ThreeD.next=function(elementType, mixin, doPost){};
/**
 * @namespace
*/
dojox.charting.themes.Tom={};
/**
 * @param {mixed} theme 
 * @param {mixed} elementType 
*/
dojox.charting.themes.Tom.post=function(theme, elementType){};
/**
 * @param {mixed} elementType 
 * @param {mixed} mixin 
 * @param {mixed} doPost 
*/
dojox.charting.themes.Tom.next=function(elementType, mixin, doPost){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add support for bidi scripts in legend.<br>
 * </blockquote>
 * Since dojox.charting.widget.Legend inherits from _Widget use the bidi support<br>
 * that introduced there.
 * @class
 * @returns {dojox.Legend} new instance
*/
dojox.Legend=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect the setter of textDir legend to setTextDir of the chart,<br>
 *	 so _setTextDirAttr of the legend will be called after setTextDir of the chart is called.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.Legend
*/
dojox.Legend.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Setter for textDir.<br>
 * </blockquote>
 * Users shouldn't call this function; they should be calling<br>
 * set('textDir', value)
 * @param {String} textDir 
 * @private
 * @memberOf dojox.Legend
*/
dojox.Legend.prototype._setTextDirAttr=function(textDir){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect the setter of textDir legend to setTextDir of the chart,<br>
 *	 so _setTextDirAttr of the legend will be called after setTextDir of the chart is called.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {Legend.postMixInProperties} new instance
*/
Legend.postMixInProperties=function(){};
/**
 * @class
 * @returns {Chart.postMixInProperties} new instance
*/
Chart.postMixInProperties=function(){};
/**
*/
dojox.charting.widget.Sparkline=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An enhanced chart legend supporting interactive events on data series<br>
 * </blockquote>
*/
dojox.charting.widget.SelectableLegend=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A legend for a chart. A legend contains summary labels for<br>
 *	 each series of data contained in the chart.<br>
 *	 <br>
 *	 Set the horizontal attribute to boolean false to layout legend labels vertically.<br>
 *	 Set the horizontal attribute to a number to layout legend labels in horizontal<br>
 *	 rows each containing that number of labels (except possibly the last row).<br>
 *	 <br>
 *	 (Line or Scatter charts (colored lines with shape symbols) )<br>
 *	 -o- Series1		-X- Series2		-v- Series3<br>
 *	 <br>
 *	 (Area/Bar/Pie charts (letters represent colors))<br>
 *	 [a] Series1		[b] Series2		[c] Series3<br>
 * </blockquote>
*/
dojox.charting.widget.Legend=function(){};
/**
*/
dojox.charting.widget.Chart=function(){};
/**
 * @class
 * @extends dijit._Widget
 * @returns {dojox.charting.widget.Chart} new instance
*/
dojox.charting.widget.Chart=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize the widget.<br>
 * </blockquote>
 * Resize the domNode and the widget surface to the dimensions of a box of the following form:<br>
 * `{ l: 50, t: 200, w: 300: h: 150 }`<br>
 * If no box is provided, resize the surface to the marginBox of the domNode.
 * @param {If} box passed, denotes the new size of the widget.
 * @memberOf dojox.charting.widget.Chart
*/
dojox.charting.widget.Chart.prototype.resize=function(box){};
/**
 * <b>Summary:</b><blockquote>
 *	 properly destroy the widget<br>
 * </blockquote>
 * @memberOf dojox.charting.widget.Chart
*/
dojox.charting.widget.Chart.prototype.destroy=function(){};
/**
 * @memberOf dojox.charting.widget.Chart
*/
dojox.charting.widget.Chart.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A legend for a chart. A legend contains summary labels for<br>
 *	 each series of data contained in the chart.<br>
 *	 <br>
 *	 Set the horizontal attribute to boolean false to layout legend labels vertically.<br>
 *	 Set the horizontal attribute to a number to layout legend labels in horizontal<br>
 *	 rows each containing that number of labels (except possibly the last row).<br>
 *	 <br>
 *	 (Line or Scatter charts (colored lines with shape symbols) )<br>
 *	 -o- Series1		-X- Series2		-v- Series3<br>
 *	 <br>
 *	 (Area/Bar/Pie charts (letters represent colors))<br>
 *	 [a] Series1		[b] Series2		[c] Series3<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @returns {dojox.charting.widget.Legend} new instance
*/
dojox.charting.widget.Legend=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 regenerates the legend to reflect changes to the chart<br>
 * </blockquote>
 * @memberOf dojox.charting.widget.Legend
*/
dojox.charting.widget.Legend.prototype.refresh=function(){};
/**
 * @memberOf dojox.charting.widget.Legend
*/
dojox.charting.widget.Legend.prototype.postCreate=function(){};
/**
 * @memberOf dojox.charting.widget.Legend
*/
dojox.charting.widget.Legend.prototype.buildRendering=function(){};
/**
 * @param {mixed} div 
 * @param {mixed} dyn 
 * @private
 * @memberOf dojox.charting.widget.Legend
*/
dojox.charting.widget.Legend.prototype._makeIcon=function(div, dyn){};
/**
 * @private
 * @memberOf dojox.charting.widget.Legend
*/
dojox.charting.widget.Legend.prototype._isReversal=function(){};
/**
 * @param {mixed} dyn 
 * @param {mixed} label 
 * @private
 * @memberOf dojox.charting.widget.Legend
*/
dojox.charting.widget.Legend.prototype._addLabel=function(dyn, label){};
/**
 * <b>Summary:</b><blockquote>
 *	 An enhanced chart legend supporting interactive events on data series<br>
 * </blockquote>
 * @class
 * @extends dojox.charting.widget.Legend
 * @returns {dojox.charting.widget.SelectableLegend} new instance
*/
dojox.charting.widget.SelectableLegend=function(){};
/**
 * @memberOf dojox.charting.widget.SelectableLegend
*/
dojox.charting.widget.SelectableLegend.prototype.refresh=function(){};
/**
 * @memberOf dojox.charting.widget.SelectableLegend
*/
dojox.charting.widget.SelectableLegend.prototype.postCreate=function(){};
/**
 * @param {mixed} shapes 
 * @param {mixed} index 
 * @param {mixed} isOff 
 * @param {mixed} dyn 
 * @param {mixed} seriesName 
 * @param {mixed} plotName 
 * @private
 * @memberOf dojox.charting.widget.SelectableLegend
*/
dojox.charting.widget.SelectableLegend.prototype._toggle=function(shapes, index, isOff, dyn, seriesName, plotName){};
/**
 * @private
 * @memberOf dojox.charting.widget.SelectableLegend
*/
dojox.charting.widget.SelectableLegend.prototype._isPie=function(){};
/**
 * @param {mixed} e 
 * @param {mixed} iconShape 
 * @param {mixed} shapes 
 * @param {mixed} index 
 * @param {mixed} isOff 
 * @param {mixed} dyn 
 * @param {mixed} seriesName 
 * @param {mixed} plotName 
 * @private
 * @memberOf dojox.charting.widget.SelectableLegend
*/
dojox.charting.widget.SelectableLegend.prototype._highlight=function(e, iconShape, shapes, index, isOff, dyn, seriesName, plotName){};
/**
 * @param {mixed} plotName 
 * @private
 * @memberOf dojox.charting.widget.SelectableLegend
*/
dojox.charting.widget.SelectableLegend.prototype._getTransitionFill=function(plotName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get filled shape in legend icon which would be highlighted when hovered<br>
 * </blockquote>
 * @param {mixed} shapes 
 * @private
 * @memberOf dojox.charting.widget.SelectableLegend
*/
dojox.charting.widget.SelectableLegend.prototype._getFilledShape=function(shapes){};
/**
 * @param {mixed} plotName 
 * @private
 * @memberOf dojox.charting.widget.SelectableLegend
*/
dojox.charting.widget.SelectableLegend.prototype._getAnim=function(plotName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Apply click-event on checkbox and hover-event on legend icon,<br>
 *	 highlight data series or toggle it.<br>
 *	 if the chart has not yet been refreshed it will crash here (targetData.group == null)<br>
 * </blockquote>
 * @private
 * @memberOf dojox.charting.widget.SelectableLegend
*/
dojox.charting.widget.SelectableLegend.prototype._applyEvents=function(){};
/**
 * @param {mixed} dyn 
 * @param {mixed} label 
 * @private
 * @memberOf dojox.charting.widget.SelectableLegend
*/
dojox.charting.widget.SelectableLegend.prototype._addLabel=function(dyn, label){};
/**
 * @class
 * @extends dojox.charting.widget.Chart
 * @returns {dojox.charting.widget.Sparkline} new instance
*/
dojox.charting.widget.Sparkline=function(){};
/**
 * @namespace
*/
dojox.charting.widget.Sparkline.margins={};
/**
 * @memberOf dojox.charting.widget.Sparkline
*/
dojox.charting.widget.Sparkline.prototype.buildRendering=function(){};
/**
 * @param {array} [arr] 
 * @returns {bool|dojox.collections.Iterator|object|array} -
*/
dojox.collections.Stack=function(arr){};
/**
 * @param {object} [dictionary] 
 * @returns {dojox.collections.SortedList|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator|array|int} -
*/
dojox.collections.SortedList=function(dictionary){};
/**
 * @param {array} [arr] 
 * @returns {dojox.collections.Queue|bool|object|dojox.collections.Iterator} -
*/
dojox.collections.Queue=function(arr){};
/**
 * @param {array} a 
 * @returns {bool|object} -
*/
dojox.collections.Iterator=function(a){};
/**
 * @param {object} obj 
 * @returns {bool|object} -
*/
dojox.collections.DictionaryIterator=function(obj){};
/**
 * @param {string} k 
 * @param {object} v 
 * @returns {object|string} -
*/
dojox.collections.DictionaryEntry=function(k, v){};
/**
 * @param {dojox.collections.Dictionary} [dictionary] 
 * @returns {dojox.collections.Dictionary|bool|dojox.collections.DictionaryEntry|object|dojox.collections.DictionaryIterator} -
*/
dojox.collections.Dictionary=function(dictionary){};
/**
 * @param {mixed} data 
*/
dojox.collections.BinaryTree=function(data){};
/**
 * @param {array} [arr] 
 * @returns {dojox.collections.ArrayList|bool|dojox.collections.Iterator|int|object} -
*/
dojox.collections.ArrayList=function(arr){};
/**
 * @class
 * @returns {dojox.collections.ArrayList} new instance
*/
dojox.collections.ArrayList=function(){};
/**
 * @param {string} delim 
*/
dojox.collections.ArrayList.toString=function(delim){};
/**
*/
dojox.collections.ArrayList.toArray=function(){};
/**
 * @param {function} [fn] 
*/
dojox.collections.ArrayList.sort=function(fn){};
/**
 * @param {int} i 
 * @param {object} obj 
*/
dojox.collections.ArrayList.setByIndex=function(i, obj){};
/**
*/
dojox.collections.ArrayList.reverse=function(){};
/**
 * @param {int} i 
*/
dojox.collections.ArrayList.removeAt=function(i){};
/**
 * @param {object} obj 
*/
dojox.collections.ArrayList.remove=function(obj){};
/**
 * @param {int} i 
 * @returns {object} -
*/
dojox.collections.ArrayList.item=function(i){};
/**
 * @param {int} i 
 * @param {object} obj 
*/
dojox.collections.ArrayList.insert=function(i, obj){};
/**
 * @param {object} obj 
 * @returns {int} -
*/
dojox.collections.ArrayList.indexOf=function(obj){};
/**
 * @returns {dojox.collections.Iterator} -
*/
dojox.collections.ArrayList.getIterator=function(){};
/**
 * @param {function} fn 
 * @param {object} [scope] 
*/
dojox.collections.ArrayList.forEach=function(fn, scope){};
/**
 * @param {object} obj 
 * @returns {bool} -
*/
dojox.collections.ArrayList.contains=function(obj){};
/**
 * @returns {dojox.collections.ArrayList} -
*/
dojox.collections.ArrayList.clone=function(){};
/**
*/
dojox.collections.ArrayList.clear=function(){};
/**
 * @param {array} a 
*/
dojox.collections.ArrayList.addRange=function(a){};
/**
 * @param {object} obj 
*/
dojox.collections.ArrayList.add=function(obj){};
/**
 * @class
 * @returns {dojox.collections.DictionaryEntry} new instance
*/
dojox.collections.DictionaryEntry=function(){};
/**
 * @returns {object} -
*/
dojox.collections.DictionaryEntry.valueOf=function(){};
/**
 * @returns {string} -
*/
dojox.collections.DictionaryEntry.toString=function(){};
/**
 * @class
 * @returns {dojox.collections.Iterator} new instance
*/
dojox.collections.Iterator=function(){};
/**
*/
dojox.collections.Iterator.reset=function(){};
/**
 * @param {function} fn 
 * @param {object} [scope] 
*/
dojox.collections.Iterator.map=function(fn, scope){};
/**
 * @returns {object} -
*/
dojox.collections.Iterator.get=function(){};
/**
 * @returns {bool} -
*/
dojox.collections.Iterator.atEnd=function(){};
/**
 * @class
 * @returns {dojox.collections.DictionaryIterator} new instance
*/
dojox.collections.DictionaryIterator=function(){};
/**
*/
dojox.collections.DictionaryIterator.reset=function(){};
/**
 * @param {function} fn 
 * @param {object} [scope] 
*/
dojox.collections.DictionaryIterator.map=function(fn, scope){};
/**
 * @returns {object} -
*/
dojox.collections.DictionaryIterator.get=function(){};
/**
 * @returns {bool} -
*/
dojox.collections.DictionaryIterator.atEnd=function(){};
/**
 * @class
 * @returns {dojox.collections.BinaryTree} new instance
*/
dojox.collections.BinaryTree=function(){};
/**
 * @namespace
*/
dojox.collections.BinaryTree.TraversalMethods={};
/**
 * @param {mixed} order 
 * @param {mixed} sep 
*/
dojox.collections.BinaryTree.toString=function(order, sep){};
/**
 * @param {mixed} data 
*/
dojox.collections.BinaryTree.search=function(data){};
/**
*/
dojox.collections.BinaryTree.getIterator=function(){};
/**
 * @param {mixed} data 
*/
dojox.collections.BinaryTree.deleteData=function(data){};
/**
 * @param {mixed} data 
*/
dojox.collections.BinaryTree.contains=function(data){};
/**
*/
dojox.collections.BinaryTree.clone=function(){};
/**
*/
dojox.collections.BinaryTree.clear=function(){};
/**
 * @param {mixed} data 
*/
dojox.collections.BinaryTree.add=function(data){};
/**
 * @class
 * @returns {dojox.collections.Dictionary} new instance
*/
dojox.collections.Dictionary=function(){};
/**
 * @param {string} k 
 * @returns {bool} -
*/
dojox.collections.Dictionary.remove=function(k){};
/**
 * @param {string} k 
 * @returns {object} -
*/
dojox.collections.Dictionary.item=function(k){};
/**
*/
dojox.collections.Dictionary.getValueList=function(){};
/**
*/
dojox.collections.Dictionary.getKeyList=function(){};
/**
 * @returns {dojox.collections.DictionaryIterator} -
*/
dojox.collections.Dictionary.getIterator=function(){};
/**
 * @param {function} fn 
 * @param {object} [scope] 
*/
dojox.collections.Dictionary.forEach=function(fn, scope){};
/**
 * @param {string} k 
 * @returns {dojox.collections.DictionaryEntry} -
*/
dojox.collections.Dictionary.entry=function(k){};
/**
 * @param {object} v 
 * @returns {bool} -
*/
dojox.collections.Dictionary.containsValue=function(v){};
/**
 * @param {string} k 
 * @returns {bool} -
*/
dojox.collections.Dictionary.containsKey=function(k){};
/**
*/
dojox.collections.Dictionary.contains=function(){};
/**
 * @returns {dojox.collections.Dictionary} -
*/
dojox.collections.Dictionary.clone=function(){};
/**
*/
dojox.collections.Dictionary.clear=function(){};
/**
 * @param {string} k 
 * @param {object} v 
*/
dojox.collections.Dictionary.add=function(k, v){};
/**
 * @class
 * @returns {dojox.collections.Queue} new instance
*/
dojox.collections.Queue=function(){};
/**
*/
dojox.collections.Queue.toArray=function(){};
/**
*/
dojox.collections.Queue.peek=function(){};
/**
 * @returns {dojox.collections.Iterator} -
*/
dojox.collections.Queue.getIterator=function(){};
/**
 * @param {function} fn 
 * @param {object} [scope] 
*/
dojox.collections.Queue.forEach=function(fn, scope){};
/**
 * @param {object} o 
*/
dojox.collections.Queue.enqueue=function(o){};
/**
 * @returns {object} -
*/
dojox.collections.Queue.dequeue=function(){};
/**
 * @param {array} arr 
 * @param {int} i 
*/
dojox.collections.Queue.copyTo=function(arr, i){};
/**
 * @param {object} o 
 * @returns {bool} -
*/
dojox.collections.Queue.contains=function(o){};
/**
 * @returns {dojox.collections.Queue} -
*/
dojox.collections.Queue.clone=function(){};
/**
*/
dojox.collections.Queue.clear=function(){};
/**
 * @class
 * @returns {dojox.collections.SortedList} new instance
*/
dojox.collections.SortedList=function(){};
/**
 * @param {int} i 
 * @param {object} o 
*/
dojox.collections.SortedList.setByIndex=function(i, o){};
/**
 * @param {string} k 
 * @param {object} v 
 * @returns {bool} -
*/
dojox.collections.SortedList.replace=function(k, v){};
/**
 * @param {int} i 
*/
dojox.collections.SortedList.removeAt=function(i){};
/**
 * @param {string} k 
*/
dojox.collections.SortedList.remove=function(k){};
/**
 * @param {string} k 
 * @returns {object} -
*/
dojox.collections.SortedList.item=function(k){};
/**
 * @param {object} o 
 * @returns {int} -
*/
dojox.collections.SortedList.indexOfValue=function(o){};
/**
 * @param {string} k 
 * @returns {int} -
*/
dojox.collections.SortedList.indexOfKey=function(k){};
/**
 * @returns {array} -
*/
dojox.collections.SortedList.getValueList=function(){};
/**
 * @returns {array} -
*/
dojox.collections.SortedList.getKeyList=function(){};
/**
 * @param {int} i 
*/
dojox.collections.SortedList.getKey=function(i){};
/**
 * @returns {dojox.collections.DictionaryIterator} -
*/
dojox.collections.SortedList.getIterator=function(){};
/**
 * @param {int} i 
 * @returns {object} -
*/
dojox.collections.SortedList.getByIndex=function(i){};
/**
 * @param {function} fn 
 * @param {object} [scope] 
*/
dojox.collections.SortedList.forEach=function(fn, scope){};
/**
 * @param {string} k 
 * @returns {dojox.collections.DictionaryEntry} -
*/
dojox.collections.SortedList.entry=function(k){};
/**
 * @param {array} arr 
 * @param {int} i 
*/
dojox.collections.SortedList.copyTo=function(arr, i){};
/**
 * @param {object} o 
 * @returns {bool} -
*/
dojox.collections.SortedList.containsValue=function(o){};
/**
 * @param {string} k 
 * @returns {bool} -
*/
dojox.collections.SortedList.containsKey=function(k){};
/**
*/
dojox.collections.SortedList.contains=function(){};
/**
 * @returns {dojox.collections.SortedList} -
*/
dojox.collections.SortedList.clone=function(){};
/**
*/
dojox.collections.SortedList.clear=function(){};
/**
 * @param {string} k 
 * @param {object} v 
*/
dojox.collections.SortedList.add=function(k, v){};
/**
 * @class
 * @returns {dojox.collections.Stack} new instance
*/
dojox.collections.Stack=function(){};
/**
 * @returns {array} -
*/
dojox.collections.Stack.toArray=function(){};
/**
 * @param {object} o 
*/
dojox.collections.Stack.push=function(o){};
/**
 * @returns {object} -
*/
dojox.collections.Stack.pop=function(){};
/**
 * @returns {object} -
*/
dojox.collections.Stack.peek=function(){};
/**
 * @returns {dojox.collections.Iterator} -
*/
dojox.collections.Stack.getIterator=function(){};
/**
 * @param {function} fn 
 * @param {object} [scope] 
*/
dojox.collections.Stack.forEach=function(fn, scope){};
/**
 * @param {array} arr 
 * @param {int} i 
*/
dojox.collections.Stack.copyTo=function(arr, i){};
/**
 * @param {object} o 
 * @returns {bool} -
*/
dojox.collections.Stack.contains=function(o){};
/**
*/
dojox.collections.Stack.clone=function(){};
/**
*/
dojox.collections.Stack.clear=function(){};
/**
 * @param {Object} xyz 
 * @param {Object} [kwArgs] 
*/
dojox.color.fromXYZ=function(xyz, kwArgs){};
/**
 * @param {Object|Array|int} hue 
 * @param {int} saturation 
 * @param {int} value 
 * @returns {dojox.color.Color} -
*/
dojox.color.fromHsv=function(hue, saturation, value){};
/**
 * @param {Object|Array|int} hue 
 * @param {int} saturation 
 * @param {int} luminosity 
 * @returns {dojox.color.Color} -
*/
dojox.color.fromHsl=function(hue, saturation, luminosity){};
/**
 * @param {Object|Array|int} cyan 
 * @param {int} magenta 
 * @param {int} yellow 
 * @param {int} black 
 * @returns {dojox.color.Color} -
*/
dojox.color.fromCmyk=function(cyan, magenta, yellow, black){};
/**
 * @param {Object|Array|int} cyan 
 * @param {int} magenta 
 * @param {int} yellow 
 * @returns {dojox.color.Color} -
*/
dojox.color.fromCmy=function(cyan, magenta, yellow){};
/**
*/
dojox.color.Color=function(){};
/**
 * @namespace
*/
dojox.color.Palette={};
/**
 * @class
 * @returns {dojox.color.Color} new instance
*/
dojox.color.Color=function(){};
/**
 * @param {Object} kwArgs 
 * @returns {Object} -
 * @memberOf dojox.color.Color
*/
dojox.color.Color.prototype.toXYZ=function(kwArgs){};
/**
 * @namespace
*/
dojox.dxc={};
/**
 * <b>Summary:</b><blockquote>
 *	 An object that represents a palette of colors.<br>
 * </blockquote>
 * A Palette is a representation of a set of colors.  While the standard<br>
 * number of colors contained in a palette is 5, it can really handle any<br>
 * number of colors.<br>
 * <br>
 * A palette is useful for the ability to transform all the colors in it<br>
 * using a simple object-based approach.  In addition, you can generate<br>
 * palettes using dojox.color.Palette.generate; these generated palettes<br>
 * are based on the palette generators at http://kuler.adobe.com.
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @param {String|Array|dojox.color.Color|dojox.color.Palette} base 
*/
dojox.dxc.Palette=function(base){};
/**
 * <b>Summary:</b><blockquote>
 *	 An object that represents a palette of colors.<br>
 * </blockquote>
 * A Palette is a representation of a set of colors.  While the standard<br>
 * number of colors contained in a palette is 5, it can really handle any<br>
 * number of colors.<br>
 * <br>
 * A palette is useful for the ability to transform all the colors in it<br>
 * using a simple object-based approach.  In addition, you can generate<br>
 * palettes using dojox.color.Palette.generate; these generated palettes<br>
 * are based on the palette generators at http://kuler.adobe.com.
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @class
 * @returns {dxc.Palette} new instance
*/
dxc.Palette=function(){};
/**
 * @namespace
*/
dxc.Palette.generators={};
/**
 * <b>Summary:</b><blockquote>
 *	 Transform the palette using a specific transformation function<br>
 *	 and a set of transformation parameters.<br>
 * </blockquote>
 * {palette}.transform is a simple way to uniformly transform<br>
 * all of the colors in a palette using any of 5 formulae:<br>
 * RGBA, HSL, HSV, CMYK or CMY.<br>
 * <br>
 * Once the forumula to be used is determined, you can pass any<br>
 * number of parameters based on the formula "d"[param]; for instance,<br>
 * { use: "rgba", dr: 20, dg: -50 } will take all of the colors in<br>
 * palette, add 20 to the R value and subtract 50 from the G value.<br>
 * <br>
 * Unlike other types of transformations, transform does *not* alter<br>
 * the original palette but will instead return a new one.
 * @param {dojox.color.Palette.__transformArgs} kwArgs 
 * @returns {dojox.color.Palette} -
 * @memberOf dxc.Palette
*/
dxc.Palette.prototype.transform=function(kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a new Palette using any of the named functions in<br>
 *	 dojox.color.Palette.generators or an optional function definition.  Current<br>
 *	 generators include &amp;quot;analogous&amp;quot;, &amp;quot;monochromatic&amp;quot;, &amp;quot;triadic&amp;quot;, &amp;quot;complementary&amp;quot;,<br>
 *	 &amp;quot;splitComplementary&amp;quot;, and &amp;quot;shades&amp;quot;.<br>
 * </blockquote>
 * @param {String|dojox.color.Color} base 
 * @param {Function|String} type 
 * @returns {dojox.color.Palette} -
*/
dxc.Palette.generate=function(base, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clones the current palette.<br>
 * </blockquote>
 * @returns {dojox.color.Palette} -
 * @memberOf dxc.Palette
*/
dxc.Palette.prototype.clone=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a 5 color palette based on the triadic rules as implemented at<br>
 *	 http://kuler.adobe.com.<br>
 * </blockquote>
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @param {dojox.color.Palette.__generatorArgs} args 
*/
dxc.Palette.generators.triadic=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a 5 color palette based on the split complementary rules as implemented at<br>
 *	 http://kuler.adobe.com.<br>
 * </blockquote>
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @param {dojox.color.Palette.__splitComplementaryArgs} args 
*/
dxc.Palette.generators.splitComplementary=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a 5 color palette based on the shades rules as implemented at<br>
 *	 http://kuler.adobe.com.<br>
 * </blockquote>
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @param {dojox.color.Palette.__generatorArgs} args 
*/
dxc.Palette.generators.shades=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a 5 color palette based on the monochromatic rules as implemented at<br>
 *	 http://kuler.adobe.com.<br>
 * </blockquote>
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @param {dojox.color.Palette.__generatorArgs} args 
*/
dxc.Palette.generators.monochromatic=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a 5 color palette based on the compound rules as implemented at<br>
 *	 http://kuler.adobe.com.<br>
 * </blockquote>
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @param {dojox.color.Palette.__generatorArgs} args 
*/
dxc.Palette.generators.compound=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a 5 color palette based on the complementary rules as implemented at<br>
 *	 http://kuler.adobe.com.<br>
 * </blockquote>
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @param {dojox.color.Palette.__generatorArgs} args 
*/
dxc.Palette.generators.complementary=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a 5 color palette based on the analogous rules as implemented at<br>
 *	 http://kuler.adobe.com.<br>
 * </blockquote>
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @param {dojox.color.Palette.__analogousArgs} args 
*/
dxc.Palette.generators.analogous=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 The keywords argument to be passed to the dojox.color.Palette.transform function.  Note that<br>
 *	 while all arguments are optional, *some* arguments must be passed.  The basic concept is that<br>
 *	 you pass a delta value for a specific aspect of a color model (or multiple aspects of the same<br>
 *	 color model); for instance, if you wish to transform a palette based on the HSV color model,<br>
 *	 you would pass one of &amp;quot;dh&amp;quot;, &amp;quot;ds&amp;quot;, or &amp;quot;dv&amp;quot; as a value.<br>
 * </blockquote>
 * @param {String} [use] Specify the color model to use for the transformation.  Can be &quot;rgb&quot;, &quot;rgba&quot;, &quot;hsv&quot;, &quot;hsl&quot;, &quot;cmy&quot;, &quot;cmyk&quot;.
 * @param {Number} [dr] The delta to be applied to the red aspect of the RGB/RGBA color model.
 * @param {Number} [dg] The delta to be applied to the green aspect of the RGB/RGBA color model.
 * @param {Number} [db] The delta to be applied to the blue aspect of the RGB/RGBA color model.
 * @param {Number} [da] The delta to be applied to the alpha aspect of the RGBA color model.
 * @param {Number} [dc] The delta to be applied to the cyan aspect of the CMY/CMYK color model.
 * @param {Number} [dm] The delta to be applied to the magenta aspect of the CMY/CMYK color model.
 * @param {Number} [dy] The delta to be applied to the yellow aspect of the CMY/CMYK color model.
 * @param {Number} [dk] The delta to be applied to the black aspect of the CMYK color model.
 * @param {Number} [dh] The delta to be applied to the hue aspect of the HSL/HSV color model.
 * @param {Number} [ds] The delta to be applied to the saturation aspect of the HSL/HSV color model.
 * @param {Number} [dv] The delta to be applied to the value aspect of the HSV color model.
 * @param {Number} [dl] The delta to be applied to the luminosity aspect of the HSL color model.
 * @private
*/
dojox.color.Palette.__transformArgs=function(use, dr, dg, db, da, dc, dm, dy, dk, dh, ds, dv, dl){};
/**
 * <b>Summary:</b><blockquote>
 *	 The keyword arguments object used to create a palette based on the split complementary rules<br>
 *	 as implemented at http://kuler.adobe.com.<br>
 * </blockquote>
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @param {dojo.Color} base The base color to be used to generate the palette.
 * @param {Number} [da] The delta angle to be used to determine where the split for the complementary rules happen.
 * In degrees, the default is 30.
 * @private
*/
dojox.color.Palette.__splitComplementaryArgs=function(base, da){};
/**
 * <b>Summary:</b><blockquote>
 *	 The keyword arguments object used to create a palette based on a base color.<br>
 * </blockquote>
 * @param {dojo.Color} base The base color to be used to generate the palette.
 * @private
*/
dojox.color.Palette.__generatorArgs=function(base){};
/**
 * <b>Summary:</b><blockquote>
 *	 The keyword arguments object that is used to create a 5 color palette based on the<br>
 *	 analogous rules as implemented at http://kuler.adobe.com, using the HSV color model.<br>
 * </blockquote>
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @param {dojo.Color} base The base color to be used to generate the palette.
 * @param {Number} [high] The difference between the hue of the base color and the highest hue.  In degrees, default is 60.
 * @param {Number} [low] The difference between the hue of the base color and the lowest hue.  In degrees, default is 18.
 * @private
*/
dojox.color.Palette.__analogousArgs=function(base, high, low){};
/**
 * <b>Summary:</b><blockquote>
 *	 The keywords argument to be passed to the dojox.color.Palette.transform function.  Note that<br>
 *	 while all arguments are optional, *some* arguments must be passed.  The basic concept is that<br>
 *	 you pass a delta value for a specific aspect of a color model (or multiple aspects of the same<br>
 *	 color model); for instance, if you wish to transform a palette based on the HSV color model,<br>
 *	 you would pass one of &amp;quot;dh&amp;quot;, &amp;quot;ds&amp;quot;, or &amp;quot;dv&amp;quot; as a value.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.color.Palette.__transformArgs} new instance
*/
dojox.color.Palette.__transformArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The keyword arguments object used to create a palette based on a base color.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.color.Palette.__generatorArgs} new instance
*/
dojox.color.Palette.__generatorArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The keyword arguments object that is used to create a 5 color palette based on the<br>
 *	 analogous rules as implemented at http://kuler.adobe.com, using the HSV color model.<br>
 * </blockquote>
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @class
 * @private
 * @returns {dojox.color.Palette.__analogousArgs} new instance
*/
dojox.color.Palette.__analogousArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The keyword arguments object used to create a palette based on the split complementary rules<br>
 *	 as implemented at http://kuler.adobe.com.<br>
 * </blockquote>
 * @see reference <a href="http://kuler.adobe.com">http://kuler.adobe.com</a>
 * @class
 * @private
 * @returns {dojox.color.Palette.__splitComplementaryArgs} new instance
*/
dojox.color.Palette.__splitComplementaryArgs=function(){};
/**
*/
dojox.cometd.timesync=function(){};
/**
*/
dojox.cometd.longPollTransportJsonEncoded=function(){};
/**
*/
dojox.cometd.longPollTransportFormEncoded=function(){};
/**
*/
dojox.cometd.callbackPollTransport=function(){};
/**
 * @private
*/
dojox.cometd._ack=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initiates the REST Channels protocol<br>
 * </blockquote>
 * @param {Keyword} options arguments:
 * The *autoSubscribeRoot* parameter:<br>
 * When this is set, all REST service requests that have this<br>
 * prefix will be auto-subscribed. The default is '/' (all REST requests).<br>
 * The *url* parameter:<br>
 * This is the url to connect to for server-sent messages. The default<br>
 * is &quot;/channels&quot;.<br>
 * The *autoReconnectTime* parameter:<br>
 * This is amount time to wait to reconnect with a connection is broken<br>
 * The *reloadDataOnReconnect* parameter:<br>
 * This indicates whether RestChannels should re-download data when a connection<br>
 * is restored (value of true), or if it should re-subscribe with retroactive subscriptions<br>
 * (Subscribe-Since header) using HEAD requests (value of false). The<br>
 * default is true.<br>
*/
dojox.cometd.RestChannels=function(options){};
/**
 * @param {mixed} prefix 
 * @returns {dojo.Deferred} -
*/
dojox.cometd.Connection=function(prefix){};
/**
 * @class
 * @private
 * @returns {dojox.cometd._ack} new instance
*/
dojox.cometd._ack=function(){};
/**
 * @param {mixed} msg 
 * @private
*/
dojox.cometd._ack._out=function(msg){};
/**
 * @param {mixed} msg 
 * @private
*/
dojox.cometd._ack._in=function(msg){};
/**
 * @class
 * @returns {dojox.cometd.Connection} new instance
*/
dojox.cometd.Connection=function(){};
/**
 * @namespace
*/
dojox.cometd.Connection.currentTransport={};
/**
 * @namespace
 * @private
*/
dojox.cometd.Connection._advice={};
/**
 * @param {String} channel 
 * @param {Object} message 
*/
dojox.cometd.Connection.unsubscribed=function(channel, message){};
/**
 * <b>Summary:</b><blockquote>
 *	 inform the server of this client's disinterest in channel<br>
 * </blockquote>
 * @param {String} channel name of the cometd channel to unsubscribe from
 * @param {Object} [objOrFunc] an object scope for funcName or the name or reference to a
 * function to be called when messages are delivered to the<br>
 * channel. If null then all subscribers to the channel are unsubscribed.
 * @param {String} [funcName] the second half of the objOrFunc/funcName pair for identifying
 * a callback function to notifiy upon channel message delivery
 * @param {Object} [props] 
 * @returns {dojo.Deferred} -
*/
dojox.cometd.Connection.unsubscribe=function(channel, objOrFunc, funcName, props){};
/**
 * @param {mixed} childLocation 
 * @param {mixed} childDomain 
*/
dojox.cometd.Connection.tunnelInit=function(childLocation, childDomain){};
/**
*/
dojox.cometd.Connection.tunnelCollapse=function(){};
/**
 * @param {String} channel 
 * @param {Object} message 
*/
dojox.cometd.Connection.subscribed=function(channel, message){};
/**
 * <b>Summary:</b><blockquote>
 *	 inform the server of this client's interest in channel<br>
 * </blockquote>
 * `dojox.cometd.subscribe()` handles all the hard work of telling<br>
 * the server that we want to be notified when events are<br>
 * published on a particular topic. `subscribe` accepts a function<br>
 * to handle messages and returns a `dojo.Deferred` object which<br>
 * has an extra property added to it which makes it suitable for<br>
 * passing to `dojox.cometd.unsubscribe()` as a "subscription<br>
 * handle" (much like the handle object that `dojo.connect()`<br>
 * produces and which `dojo.disconnect()` expects).<br>
 * <br>
 * Note that of a subscription is registered before a connection<br>
 * with the server is established, events sent before the<br>
 * connection is established will not be delivered to this client.<br>
 * The deferred object which `subscribe` returns will callback<br>
 * when the server successfuly acknolwedges receipt of our<br>
 * "subscribe" request.
 * @param {String} channel name of the cometd channel to subscribe to
 * @param {Object} objOrFunc an object scope for funcName or the name or reference to a
 * function to be called when messages are delivered to the<br>
 * channel
 * @param {String} funcName the second half of the objOrFunc/funcName pair for identifying
 * a callback function to notifiy upon channel message delivery
 * @param {Object} [props] 
 * @returns {dojo.Deferred} -
 * @example
 * Simple subscribe use-case
 * 	dojox.cometd.init("http://myserver.com:8080/cometd");
 * 	// log out all incoming messages on /foo/bar
 * 	dojox.cometd.subscribe("/foo/bar", console, "debug");
 * @example
 * Subscribe before connection is initialized
 * 	dojox.cometd.subscribe("/foo/bar", console, "debug");
 * 	dojox.cometd.init("http://myserver.com:8080/cometd");
 * @example
 * Subscribe an unsubscribe
 * 	dojox.cometd.init("http://myserver.com:8080/cometd");
 * 	var h = dojox.cometd.subscribe("/foo/bar", console, "debug");
 * 	dojox.cometd.unsubscribe(h);
 * @example
 * Listen for successful subscription:
 * 	dojox.cometd.init("http://myserver.com:8080/cometd");
 * 	var h = dojox.cometd.subscribe("/foo/bar", console, "debug");
 * 	h.addCallback(function(){
 * 		console.debug("subscription to /foo/bar established");
 * 	});
*/
dojox.cometd.Connection.subscribe=function(channel, objOrFunc, funcName, props){};
/**
*/
dojox.cometd.Connection.state=function(){};
/**
*/
dojox.cometd.Connection.startBatch=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 publishes the passed message to the cometd server for delivery<br>
 *	 on the specified topic<br>
 * </blockquote>
 * @param {String} channel the destination channel for the message
 * @param {Object} data a JSON object containing the message &quot;payload&quot;
 * properties:<br>
 * Optional. Other meta-data to be mixed into the top-level of the<br>
 * message
 * @param {Object} [props] 
*/
dojox.cometd.Connection.publish=function(channel, data, props){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the cometd implementation of the Bayeux protocol<br>
 * </blockquote>
 * Initialize the cometd implementation of the Bayeux protocol by<br>
 * sending a handshake message. The cometd state will be changed to CONNECTING<br>
 * until a handshake response is received and the first successful connect message<br>
 * has returned.<br>
 * The protocol state changes may be monitored<br>
 * by subscribing to the dojo topic "/prefix/meta" (typically "/cometd/meta") where<br>
 * events are published in the form<br>
 * {cometd:this,action:"handshake",successful:true,state:this.state()}
 * @param {String} root The URL of the cometd server. If the root is absolute, the host
 * is examined to determine if xd transport is needed. Otherwise the<br>
 * same domain is assumed.
 * @param {Object} [props] An optional object that is used as the basis of the handshake message
 * @param {Object} [bargs] An optional object of bind args mixed in with the send of the handshake
 * @example
 * 	dojox.cometd.init("/cometd");
 * 	dojox.cometd.init("http://xdHost/cometd",{ext:{user:"fred",pwd:"secret"}});
*/
dojox.cometd.Connection.init=function(root, props, bargs){};
/**
*/
dojox.cometd.Connection.endBatch=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect from the server.<br>
 * </blockquote>
 * Disconnect from the server by sending a disconnect message
 * @example
 * 	dojox.cometd.disconnect();
*/
dojox.cometd.Connection.disconnect=function(){};
/**
 * @param {mixed} messages 
*/
dojox.cometd.Connection.deliver=function(messages){};
/**
 * @param {object} message 
 * @private
*/
dojox.cometd.Connection._sendMessage=function(message){};
/**
 * @param {mixed} action 
 * @param {mixed} successful 
 * @param {mixed} props 
 * @private
*/
dojox.cometd.Connection._publishMeta=function(action, successful, props){};
/**
 * @private
*/
dojox.cometd.Connection._onUnload=function(){};
/**
 * @private
*/
dojox.cometd.Connection._interval=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the handshake return from the server and initialize<br>
 *	 connection if all is OK<br>
 * </blockquote>
 * @param {mixed} data 
 * @private
*/
dojox.cometd.Connection._finishInit=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle extensions for inbound messages<br>
 * </blockquote>
 * @param {mixed} message 
 * @private
*/
dojox.cometd.Connection._extendOut=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle extensions for inbound messages<br>
 * </blockquote>
 * @param {mixed} message 
 * @private
*/
dojox.cometd.Connection._extendIn=function(message){};
/**
 * @param {mixed} message 
 * @private
*/
dojox.cometd.Connection._deliver=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the connect timeout in ms, calculated as the minimum of the advised timeout<br>
 *	 and the configured timeout. Else 0 to indicate no client side timeout<br>
 * </blockquote>
 * @private
*/
dojox.cometd.Connection._connectTimeout=function(){};
/**
 * @private
*/
dojox.cometd.Connection._backon=function(){};
/**
 * @private
*/
dojox.cometd.Connection._backoff=function(){};
/**
 * @class
 * @returns {dojox.cometd.callbackPollTransport} new instance
*/
dojox.cometd.callbackPollTransport=function(){};
/**
 * @namespace
 * @private
*/
dojox.cometd.callbackPollTransport._cometd={};
/**
*/
dojox.cometd.callbackPollTransport.tunnelInit=function(){};
/**
 * @param {mixed} handshakeData 
*/
dojox.cometd.callbackPollTransport.startup=function(handshakeData){};
/**
 * @param {array} messages 
*/
dojox.cometd.callbackPollTransport.sendMessages=function(messages){};
/**
 * @param {mixed} content 
 * @param {mixed} url 
*/
dojox.cometd.callbackPollTransport.openTunnelWith=function(content, url){};
/**
*/
dojox.cometd.callbackPollTransport.disconnect=function(){};
/**
 * @param {mixed} types 
 * @param {mixed} version 
 * @param {mixed} xdomain 
*/
dojox.cometd.callbackPollTransport.check=function(types, version, xdomain){};
/**
*/
dojox.cometd.callbackPollTransport.cancelConnect=function(){};
/**
 * @class
 * @returns {dojox.cometd.longPollTransportFormEncoded} new instance
*/
dojox.cometd.longPollTransportFormEncoded=function(){};
/**
 * @namespace
 * @private
*/
dojox.cometd.longPollTransportFormEncoded._cometd={};
/**
*/
dojox.cometd.longPollTransportFormEncoded.tunnelInit=function(){};
/**
*/
dojox.cometd.longPollTransportFormEncoded.tunnelCollapse=function(){};
/**
 * @param {mixed} handshakeData 
*/
dojox.cometd.longPollTransportFormEncoded.startup=function(handshakeData){};
/**
 * @param {mixed} messages 
*/
dojox.cometd.longPollTransportFormEncoded.sendMessages=function(messages){};
/**
 * @param {mixed} content 
 * @param {mixed} url 
*/
dojox.cometd.longPollTransportFormEncoded.openTunnelWith=function(content, url){};
/**
*/
dojox.cometd.longPollTransportFormEncoded.disconnect=function(){};
/**
 * @param {mixed} message 
*/
dojox.cometd.longPollTransportFormEncoded.deliver=function(message){};
/**
 * @param {mixed} types 
 * @param {mixed} version 
 * @param {mixed} xdomain 
*/
dojox.cometd.longPollTransportFormEncoded.check=function(types, version, xdomain){};
/**
*/
dojox.cometd.longPollTransportFormEncoded.cancelConnect=function(){};
/**
 * @private
*/
dojox.cometd.longPollTransportFormEncoded._connect=function(){};
/**
 * @class
 * @returns {dojox.cometd.longPollTransportJsonEncoded} new instance
*/
dojox.cometd.longPollTransportJsonEncoded=function(){};
/**
 * @namespace
 * @private
*/
dojox.cometd.longPollTransportJsonEncoded._cometd={};
/**
*/
dojox.cometd.longPollTransportJsonEncoded.tunnelInit=function(){};
/**
*/
dojox.cometd.longPollTransportJsonEncoded.tunnelCollapse=function(){};
/**
 * @param {mixed} handshakeData 
*/
dojox.cometd.longPollTransportJsonEncoded.startup=function(handshakeData){};
/**
 * @param {mixed} messages 
*/
dojox.cometd.longPollTransportJsonEncoded.sendMessages=function(messages){};
/**
 * @param {mixed} messages 
 * @param {mixed} url 
*/
dojox.cometd.longPollTransportJsonEncoded.openTunnelWith=function(messages, url){};
/**
*/
dojox.cometd.longPollTransportJsonEncoded.disconnect=function(){};
/**
 * @param {mixed} message 
*/
dojox.cometd.longPollTransportJsonEncoded.deliver=function(message){};
/**
 * @param {mixed} types 
 * @param {mixed} version 
 * @param {mixed} xdomain 
*/
dojox.cometd.longPollTransportJsonEncoded.check=function(types, version, xdomain){};
/**
*/
dojox.cometd.longPollTransportJsonEncoded.cancelConnect=function(){};
/**
 * @private
*/
dojox.cometd.longPollTransportJsonEncoded._connect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initiates the REST Channels protocol<br>
 * </blockquote>
 * @class
 * @param {Keyword} options arguments:
 * The *autoSubscribeRoot* parameter:<br>
 * When this is set, all REST service requests that have this<br>
 * prefix will be auto-subscribed. The default is '/' (all REST requests).<br>
 * The *url* parameter:<br>
 * This is the url to connect to for server-sent messages. The default<br>
 * is &quot;/channels&quot;.<br>
 * The *autoReconnectTime* parameter:<br>
 * This is amount time to wait to reconnect with a connection is broken<br>
 * The *reloadDataOnReconnect* parameter:<br>
 * This indicates whether RestChannels should re-download data when a connection<br>
 * is restored (value of true), or if it should re-subscribe with retroactive subscriptions<br>
 * (Subscribe-Since header) using HEAD requests (value of false). The<br>
 * default is true.
 * @returns {dojox.cometd.RestChannels} new instance
*/
dojox.cometd.RestChannels=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 unsubscribes from the resource<br>
 *	 See subscribe for parameter values<br>
 * </blockquote>
 * @param {String} channel 
 * @param {dojo.__XhrArgs} [args] 
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype.unsubscribe=function(channel, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subscribes to a channel/uri, and returns a dojo.Deferred object for the response from<br>
 *	 the subscription request<br>
 * </blockquote>
 * @param {String} channel the uri for the resource you want to monitor
 * @param {dojo.__XhrArgs} [args] See dojo.xhr
 * <br>
 * headers:<br>
 * These are the headers to be applied to the channel subscription request<br>
 * <br>
 * callback:<br>
 * This will be called when a event occurs for the channel<br>
 * The callback will be called with a single argument:<br>
 * 	callback(message)<br>
 * where message is an object that follows the XHR API:<br>
 * status : Http status<br>
 * statusText : Http status text<br>
 * getAllResponseHeaders() : The response headers<br>
 * getResponseHeaders(headerName) : Retrieve a header by name<br>
 * responseText : The response body as text<br>
 * with the following additional Bayeux properties<br>
 * data : The response body as JSON<br>
 * channel : The channel/url of the response
 * @returns {don't process the response, the response will be received in the main channels response} -
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype.subscribe=function(channel, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when a message is received from the server<br>
 * </blockquote>
 * @param {A} message cometd/XHR message
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype.receive=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 Publish an event.<br>
 * </blockquote>
 * This does a simple POST operation to the provided URL,<br>
 * POST is the semantic equivalent of publishing a message within REST/Channels
 * @param {Channel/resource} channel path to publish to
 * @param {data} data to publish
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype.publish=function(channel, data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Startup the transport (connect to the &amp;quot;channels&amp;quot; resource to receive updates from the server).<br>
 * </blockquote>
 * Note that if there is no connection open, this is automatically called when you do a subscription,<br>
 * it is often not necessary to call this
 * @returns {this can be called after dojo is unloaded, just do nothing in that case} -
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype.open=function(){};
/**
 * @param {mixed} xhr 
 * @param {mixed} data 
 * @param {mixed} contentType 
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype.onprogress=function(xhr, data, contentType){};
/**
 * <b>Summary:</b><blockquote>
 *	 GET the initial value of the resource and subscribe to it<br>
 *	 See subscribe for parameter values<br>
 * </blockquote>
 * @param {String} channel 
 * @param {dojo.__XhrArgs} [args] 
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype.get=function(channel, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when our channel gets disconnected<br>
 * </blockquote>
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype.disconnected=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 disconnect from the server<br>
 * </blockquote>
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype.disconnect=function(){};
/**
 * @param {mixed} baseUrl 
 * @param {mixed} relativeUrl 
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype.absoluteUrl=function(baseUrl, relativeUrl){};
/**
 * @param {mixed} method 
 * @param {mixed} args 
 * @param {mixed} data 
 * @private
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype._send=function(method, args, data){};
/**
 * @param {mixed} message 
 * @private
 * @returns {indicate an error} -
 * @memberOf dojox.cometd.RestChannels
*/
dojox.cometd.RestChannels.prototype._processMessage=function(message){};
/**
 * @class
 * @returns {dojox.cometd.timesync} new instance
*/
dojox.cometd.timesync=function(){};
/**
 * @param {function} call the function to call when the timeout occurs
 * atTimeOrTime:<br>
 * a long timestamp or a Date representing the server time at<br>
 * which the timeout should occur.
 * @param {long|Date} atTimeOrDate 
*/
dojox.cometd.timesync.setTimeout=function(call, atTimeOrDate){};
/**
*/
dojox.cometd.timesync.getServerTime=function(){};
/**
*/
dojox.cometd.timesync.getServerDate=function(){};
/**
 * Look for handshake and connect messages and add the ext:{timesync:{}} fields
 * @param {The} msg outgoing bayeux message
 * @private
*/
dojox.cometd.timesync._out=function(msg){};
/**
 * Look for ext:{timesync:{}} field and calculate offset if present.
 * @param {Object} msg The incoming bayeux message
 * @private
*/
dojox.cometd.timesync._in=function(msg){};
/**
 * @namespace
*/
dojox.css3.fx={};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation that shrinks args.node<br>
 * </blockquote>
 * Shrinks an element, same as expand({ node: node, endScale: .01 });
 * @param {mixed} args 
*/
dojox.css3.fx.shrink=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation that rotates an element<br>
 * </blockquote>
 * Rotates an element from args.startAngle to args.endAngle
 * @param {mixed} args 
*/
dojox.css3.fx.rotate=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation that will do a &amp;quot;puff&amp;quot; effect on the given node<br>
 * </blockquote>
 * Fades out an element and scales it to args.endScale
 * @param {mixed} args 
*/
dojox.css3.fx.puff=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation that flips an element around his y axis<br>
 * </blockquote>
 * Flips an element around his y axis. The default is a 360deg flip<br>
 * but it's possible to run a partial flip using args.whichAnims
 * @param {mixed} args 
 * @example
 * 	// half flip
 * 	dojox.css3.fx.flip({
 * 		node: domNode,
 * 		whichAnim: [0, 1]
 * 	}).play();
*/
dojox.css3.fx.flip=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation that expands args.node<br>
 * </blockquote>
 * Scales an element to args.endScale
 * @param {mixed} args 
*/
dojox.css3.fx.expand=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation that do a &amp;quot;bounce&amp;quot; effect on args.node<br>
 * </blockquote>
 * Vertical bounce animation, the scaleX, scaleY deformation and the<br>
 * jump height (args.jumpHeight) can be specified
 * @param {mixed} args 
*/
dojox.css3.fx.bounce=function(args){};
/**
 * @param {mixed} args 
*/
dojox.css3.transition=function(args){};
/**
 * @class
 * @param {mixed} args 
 * @returns {dojox.css3.transition} new instance
*/
dojox.css3.transition=function(args){};
/**
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype.start=function(){};
/**
 * @param {mixed} node 
 * @param {mixed} config 
*/
dojox.css3.transition.slide=function(node, config){};
/**
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype.play=function(){};
/**
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype.onAfterEnd=function(){};
/**
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype.initState=function(){};
/**
 * @param {Array} args 
*/
dojox.css3.transition.groupedPlay=function(args){};
/**
 * @param {mixed} node 
 * @param {mixed} config 
*/
dojox.css3.transition.flip=function(node, config){};
/**
 * @param {mixed} node 
 * @param {mixed} config 
*/
dojox.css3.transition.fade=function(node, config){};
/**
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype.clear=function(){};
/**
 * @param {Array} args 
*/
dojox.css3.transition.chainedPlay=function(args){};
/**
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype.beforeStart=function(){};
/**
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype.beforeClear=function(){};
/**
 * @param {mixed} state 
 * @private
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype._removeState=function(state){};
/**
 * @private
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype._onAfterEnd=function(){};
/**
 * @private
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype._beforeStart=function(){};
/**
 * @private
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype._beforeClear=function(){};
/**
 * @param {mixed} state 
 * @private
 * @memberOf dojox.css3.transition
*/
dojox.css3.transition.prototype._applyState=function(state){};
/**
 * @namespace
*/
dojox.css3.transition.node={};
/**
 * <b>Summary:</b><blockquote>
 *	 this function can be used to receive REST notifications, from Comet or from another frame<br>
 * </blockquote>
 * Example:<br>
 * 	dojo.connect(window,"onMessage",null,function(event) {<br>
 * 		var data = dojo.fromJson(event.data);<br>
 * 		dojox.restListener(data);<br>
 * 	});
 * @param {mixed} message 
*/
dojox.data.restListener=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for XML based services or documents<br>
 * </blockquote>
 * A data store for XML based services or documents
 * @param {object} args An anonymous object to initialize properties.  It expects the following values:
*/
dojox.data.XmlStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data item of 'XmlStore'<br>
 * </blockquote>
 * This class represents an item of 'XmlStore' holding an XML element.<br>
 * 'element'<br>
 * element:<br>
 * An XML element
 * @param {An} element XML element
 * @param {The} store containing store, if any.
 * @param {The} query query to use to look up a specific element.
 * Usually an XPath or dojo.query statement.<br>
*/
dojox.data.XmlItem=function(element, store, query){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the Wikipedia data store interface.<br>
 * </blockquote>
 * The WikipediaStore is a data store interface to Wikipedia, using the<br>
 * Wikipedia SMD spec from dojox.rpc. It currently is useful only for<br>
 * finding articles that contain some particular text or grabbing single<br>
 * articles by full name; no wildcards or other filtering are supported.
 * @param {mixed} options 
 * @example
 * 	var store = new dojox.data.WikipediaStore();
 * 	store.fetch({
 * 		query: {title:"Dojo Toolkit"},
 * 		onItem: function(item){
 * 			dojo.byId("somediv").innerHTML = item.text["*"];
 * 		}
 * 	});
*/
dojox.data.WikipediaStore=function(options){};
/**
 * @param {mixed} options 
*/
dojox.data.StoreExplorer=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize a SnapLogicStore object.<br>
 * </blockquote>
 * @param {Object} args An object that contains properties for initializing the new data store object. The
 * following properties are understood:<br>
*/
dojox.data.SnapLogicStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 ServiceStore constructor, instantiate a new ServiceStore<br>
 *	 A ServiceStore can be configured from a JSON Schema. Queries are just<br>
 *	 passed through to the underlying services<br>
 * </blockquote>
 * ServiceStore can do client side caching and result set updating if<br>
 * dojox.data.ClientFilter is loaded. Do this add:<br>
 * 	dojo.require("dojox.data.ClientFilter")<br>
 * prior to loading the ServiceStore (ClientFilter must be loaded before ServiceStore).<br>
 * To utilize client side filtering with a subclass, you can break queries into<br>
 * client side and server side components by putting client side actions in<br>
 * clientFilter property in fetch calls. For example you could override fetch:<br>
 * 	fetch: function(args){<br>
 * 		// do the sorting and paging on the client side<br>
 * 		args.clientFilter = {start:args.start, count: args.count, sort: args.sort};<br>
 * 		// args.query will be passed to the service object for the server side handling<br>
 * 		return this.inherited(arguments);<br>
 * 	}<br>
 * When extending this class, if you would like to create lazy objects, you can follow<br>
 * the example from dojox.data.tests.stores.ServiceStore:<br>
 * 	var lazyItem = {<br>
 * 		_loadObject: function(callback){<br>
 * 			this.name="loaded";<br>
 * 			delete this._loadObject;<br>
 * 			callback(this);<br>
 * 		}<br>
 * 	};<br>
 * setup a byId alias to the api call
 * @param {Keyword} options arguments
 * The *schema* parameter<br>
 * This is a schema object for this store. This should be JSON Schema format.<br>
 * <br>
 * The *service* parameter<br>
 * This is the service object that is used to retrieve lazy data and save results<br>
 * The function should be directly callable with a single parameter of an object id to be loaded<br>
 * <br>
 * The *idAttribute* parameter<br>
 * Defaults to 'id'. The name of the attribute that holds an objects id.<br>
 * This can be a preexisting id provided by the server.<br>
 * If an ID isn't already provided when an object<br>
 * is fetched or added to the store, the autoIdentity system<br>
 * will generate an id for it and add it to the index.<br>
 * <br>
 * The *estimateCountFactor* parameter<br>
 * This parameter is used by the ServiceStore to estimate the total count. When<br>
 * paging is indicated in a fetch and the response includes the full number of items<br>
 * requested by the fetch's count parameter, then the total count will be estimated<br>
 * to be estimateCountFactor multiplied by the provided count. If this is 1, then it is assumed that the server<br>
 * does not support paging, and the response is the full set of items, where the<br>
 * total count is equal to the numer of items returned. If the server does support<br>
 * paging, an estimateCountFactor of 2 is a good value for estimating the total count<br>
 * It is also possible to override _processResults if the server can provide an exact<br>
 * total count.<br>
 * <br>
 * The *syncMode* parameter<br>
 * Setting this to true will set the store to using synchronous calls by default.<br>
 * Sync calls return their data immediately from the calling function, so<br>
 * callbacks are unnecessary. This will only work with a synchronous capable service.<br>
*/
dojox.data.ServiceStore=function(options){};
/**
*/
dojox.data.S3Store=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 RailsStore is a data store for interacting with RESTful Rails controllers<br>
 * </blockquote>
 * @param {mixed} options 
*/
dojox.data.RailsStore=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 By default all the sorting is done serverside before the data is returned<br>
 *	 which is the proper place to be doing it for really large datasets.<br>
 * </blockquote>
 * @param {Object} params 
 * @example
 * 	// The parameter "query" contains the data that are sent to the server.
 * 	var store = new dojox.data.QueryReadStore({url:'/search.php'});
 * 	store.fetch({query:{name:'a'}, queryOptions:{ignoreCase:false}});
 * 
 * 	// Since "serverQuery" is given, it overrules and those data are
 * 	// sent to the server.
 * 	var store = new dojox.data.QueryReadStore({url:'/search.php'});
 * 	store.fetch({serverQuery:{name:'a'}, queryOptions:{ignoreCase:false}});
 * 
 * 	&lt;div dojoType="dojox.data.QueryReadStore"
 * 		jsId="store2"
 * 		url="../tests/stores/QueryReadStore.php"
 * 		requestMethod="post"&gt;&lt;/div&gt;
 * 	&lt;div dojoType="dojox.grid.data.DojoData"
 * 		jsId="model2"
 * 		store="store2"
 * 		sortFields="[{attribute: 'name', descending: true}]"
 * 		rowsPerPage="30"&gt;&lt;/div&gt;
 * 	&lt;div dojoType="dojox.Grid" id="grid2"
 * 		model="model2"
 * 		structure="gridLayout"
 * 		style="height:300px; width:800px;"&gt;&lt;/div&gt;
*/
dojox.data.QueryReadStore=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the PicasaStore store.<br>
 * </blockquote>
 * The PicasaStore is a Datastore interface to one of the basic services<br>
 * of the Picasa service, the public photo feed.  This does not provide<br>
 * access to all the services of Picasa.<br>
 * This store cannot do * and ? filtering as the picasa service<br>
 * provides no interface for wildcards.
 * @param {Object} args 
*/
dojox.data.PicasaStore=function(args){};
/**
*/
dojox.data.PersevereStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 *   The OpmlStore implements the dojo.data.api.Read API.<br>
 * </blockquote>
 * @param {Object} keywordParameters url: String, label: String}  Where label is optional and configures what should be used as the return from getLabel()
*/
dojox.data.OpmlStore=function(keywordParameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the OpenSearchStore store.<br>
 * </blockquote>
 * The OpenSearchStore is a Datastore interface to any search<br>
 * engine that implements the open search specifications.
 * @param {Object} args 
*/
dojox.data.OpenSearchStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a dojo.data store implementation.  It can take in either a Javascript<br>
 *	 array, JSON string, or URL as the data source.  Data is expected to be in the<br>
 *	 following format:<br>
 *	 [<br>
 *	 { &amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot; },<br>
 *	 { &amp;quot;key2&amp;quot;: &amp;quot;value2&amp;quot; }<br>
 *	 ]<br>
 *	 This is to mimic the Java Properties file format.  Each 'item' from this store<br>
 *	 is a JS object representing a key-value pair.  If an item in the above array has<br>
 *	 more than one key/value pair, only the first will be used/accessed.<br>
 * </blockquote>
 * @param {Object} keywordParameters dataVar: jsonObject}
*/
dojox.data.KeyValueStore=function(keywordParameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 Allow no trailing slash on target paths. This is generally discouraged since<br>
 *	 it creates prevents simple scalar values from being used a relative URLs.<br>
 *	 Disabled by default.<br>
 *	 <br>
 *	 <br>
 *	 Write API Support<br>
 *	 <br>
 *	 <br>
 *	 Notifcation Support<br>
 * </blockquote>
 * The JsonRestStore will cause all saved modifications to be sent to the server using Rest commands (PUT, POST, or DELETE).<br>
 * When using a Rest store on a public network, it is important to implement proper security measures to<br>
 * control access to resources.<br>
 * On the server side implementing a REST interface means providing GET, PUT, POST, and DELETE handlers.<br>
 * GET - Retrieve an object or array/result set, this can be by id (like /table/1) or with a<br>
 * query (like /table/?name=foo).<br>
 * PUT - This should modify a object, the URL will correspond to the id (like /table/1), and the body will<br>
 * provide the modified object<br>
 * POST - This should create a new object. The URL will correspond to the target store (like /table/)<br>
 * and the body should be the properties of the new object. The server's response should include a<br>
 * Location header that indicates the id of the newly created object. This id will be used for subsequent<br>
 * PUT and DELETE requests. JsonRestStore also includes a Content-Location header that indicates<br>
 * the temporary randomly generated id used by client, and this location is used for subsequent<br>
 * PUT/DELETEs if no Location header is provided by the server or if a modification is sent prior<br>
 * to receiving a response from the server.<br>
 * DELETE - This should delete an object by id.<br>
 * These articles include more detailed information on using the JsonRestStore:<br>
 * http://www.sitepen.com/blog/2008/06/13/restful-json-dojo-data/<br>
 * http://blog.medryx.org/2008/07/24/jsonreststore-overview/
 * @see reference <a href="http://www.sitepen.com/blog/2008/06/13/restful-json-dojo-data/">http://www.sitepen.com/blog/2008/06/13/restful-json-dojo-data/</a>
 * @param {Keyword} options arguments
 * <br>
 * The *schema* parameter<br>
 * This is a schema object for this store. This should be JSON Schema format.<br>
 * <br>
 * The *service* parameter<br>
 * This is the service object that is used to retrieve lazy data and save results<br>
 * The function should be directly callable with a single parameter of an object id to be loaded<br>
 * The function should also have the following methods:<br>
 * put(id,value) - puts the value at the given id<br>
 * post(id,value) - posts (appends) the value at the given id<br>
 * delete(id) - deletes the value corresponding to the given id<br>
 * Note that it is critical that the service parses responses as JSON.<br>
 * If you are using dojox.rpc.Service, the easiest way to make sure this<br>
 * happens is to make the responses have a content type of<br>
 * application/json. If you are creating your own service, make sure you<br>
 * use handleAs: &quot;json&quot; with your XHR requests.<br>
 * <br>
 * The *target* parameter<br>
 * This is the target URL for this Service store. This may be used in place<br>
 * of a service parameter to connect directly to RESTful URL without<br>
 * using a dojox.rpc.Service object.<br>
 * <br>
 * The *idAttribute* parameter<br>
 * Defaults to 'id'. The name of the attribute that holds an objects id.<br>
 * This can be a preexisting id provided by the server.<br>
 * If an ID isn't already provided when an object<br>
 * is fetched or added to the store, the autoIdentity system<br>
 * will generate an id for it and add it to the index.<br>
 * <br>
 * The *syncMode* parameter<br>
 * Setting this to true will set the store to using synchronous calls by default.<br>
 * Sync calls return their data immediately from the calling function, so<br>
 * callbacks are unnecessary
 * @example
 * A JsonRestStore takes a REST service or a URL and uses it the remote communication for a
 * read/write dojo.data implementation. A JsonRestStore can be created with a simple URL like:
 * 	new JsonRestStore({target:"/MyData/"});
 * @example
 * To use a JsonRestStore with a service, you should create a
 * service with a REST transport. This can be configured with an SMD:
 * 	{
 * 		services: {
 * 			jsonRestStore: {
 * 				transport: "REST",
 * 				envelope: "URL",
 * 				target: "store.php",
 * 				contentType:"application/json",
 * 				parameters: [
 * 					{name: "location", type: "string", optional: true}
 * 				]
 * 			}
 * 		}
 * 	}
 * The SMD can then be used to create service, and the service can be passed to a JsonRestStore. For example:
 * 	var myServices = new dojox.rpc.Service(dojo.moduleUrl("dojox.rpc.tests.resources", "test.smd"));
 * 	var jsonStore = new dojox.data.JsonRestStore({service:myServices.jsonRestStore});
 * @example
 * The JsonRestStore also supports lazy loading. References can be made to objects that have not been loaded.
 * For example if a service returned:
 * 	{"name":"Example","lazyLoadedObject":{"$ref":"obj2"}}
 * And this object has accessed using the dojo.data API:
 * 	var obj = jsonStore.getValue(myObject,"lazyLoadedObject");
 * The object would automatically be requested from the server (with an object id of "obj2").
*/
dojox.data.JsonRestStore=function(options){};
/**
*/
dojox.data.JsonQueryRestStore=function(){};
/**
 * @param {mixed} options 
*/
dojox.data.ItemExplorer=function(options){};
/**
 * @param {Object} args 
*/
dojox.data.HtmlTableStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the HTML table store.<br>
 * </blockquote>
 * The HtmlStore can be created in one of two ways: a) by parsing an existing<br>
 * table or list DOM node on the current page or b) by referencing an external url and giving<br>
 * the id of the table or list in that page.  The remote url will be parsed as an html page.<br>
 * <br>
 * The HTML table or list should be of the following form:<br>
 * <br>
 * 	&lt;table id="myTable"&gt;<br>
 * 		&lt;thead&gt;<br>
 * 			&lt;tr&gt;<br>
 * 				&lt;th&gt;Attribute1&lt;/th&gt;<br>
 * 				&lt;th&gt;Attribute2&lt;/th&gt;<br>
 * 			&lt;/tr&gt;<br>
 * 		&lt;/thead&gt;<br>
 * 		&lt;tbody&gt;<br>
 * 			&lt;tr&gt;<br>
 * 				&lt;td&gt;Value1.1&lt;/td&gt;<br>
 * 				&lt;td&gt;Value1.2&lt;/td&gt;<br>
 * 			&lt;/tr&gt;<br>
 * 			&lt;tr&gt;<br>
 * 				&lt;td&gt;Value2.1&lt;/td&gt;<br>
 * 				&lt;td&gt;Value2.2&lt;/td&gt;<br>
 * 			&lt;/tr&gt;<br>
 * 		&lt;/tbody&gt;<br>
 * 	&lt;/table&gt;<br>
 * <br>
 * -or-<br>
 * <br>
 * 	&lt;ul id="myUnorderedList"&gt;<br>
 * 		&lt;li&gt;Value.1&lt;/li&gt;<br>
 * 		&lt;li&gt;Value.2&lt;/li&gt;<br>
 * 	&lt;/ul&gt;<br>
 * <br>
 * -or-<br>
 * <br>
 * 	&lt;ol id="myOrderedList"&gt;<br>
 * 		&lt;li&gt;Value.1&lt;/li&gt;<br>
 * 		&lt;li&gt;Value.2&lt;/li&gt;<br>
 * 	&lt;/ol&gt;
 * @param {Object} args An anonymous object to initialize properties.  It expects the following values:
*/
dojox.data.HtmlStore=function(args){};
/**
*/
dojox.data.GoogleWebSearchStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The blog post title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The  blog post title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - A snippet of information about the blog post&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the item&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;published - The published date, in RFC-822 format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;publisher - The name of the publisher.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;duration - The approximate duration, in seconds, of the video.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbWidth - The width in pixels of the video.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbHeight - The height in pixels of the video&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbUrl - The URL to a thumbnail representation of the video.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;playUrl - If present, supplies the url of the flash version of the video that can be played inline on your page. To play this video simply create and &amp;lt;embed&amp;gt; element on your page using this value as the src attribute and using application/x-shockwave-flash as the type attribute. If you want the video to play right away, make sure to append &amp;amp;autoPlay=true to the url..&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: text - The string to search for<br>
 * </blockquote>
*/
dojox.data.GoogleVideoSearchStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 This data store acts as a base class for Google searches,<br>
 *	 and has a number of child data stores that implement different<br>
 *	 searches. This store defaults to searching the web, and is functionally<br>
 *	 identical to the dojox.data.GoogleWebSearchStore object.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the item&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;visibleUrl - The URL with no protocol specified.<br>
 *	 &amp;lt;li&amp;gt;cacheUrl - The URL to the copy of the document cached by Google<br>
 *	 &amp;lt;li&amp;gt;title - The page title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The page title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - A snippet of information about the page&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: text - The string to search for<br>
 * </blockquote>
 * The GoogleSearchStore is a Datastore interface to<br>
 * the Google search service. The constructor accepts the following arguments:<br>
 * &lt;ul&gt;<br>
 * &lt;li&gt;label - the label attribute to use. Defaults to titleNoFormatting&lt;/li&gt;<br>
 * &lt;li&gt;key - The API key to use. This is optional&lt;/li&gt;<br>
 * &lt;li&gt;lang - The language locale to use. Defaults to the browser locale&lt;/li&gt;<br>
 * &lt;/ul&gt;
 * @param {Object} args 
*/
dojox.data.GoogleSearchStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The news story title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The news story title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - A snippet of information about the news story&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the item&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;publisher - The name of the publisher&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;clusterUrl - A URL pointing to a page listing related storied.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;location - The location of the news story.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;publishedDate - The date of publication, in RFC-822 format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;relatedStories - An optional array of objects specifying related stories.<br>
 *	 Each object has the following subset of properties:<br>
 *	 &amp;quot;title&amp;quot;, &amp;quot;titleNoFormatting&amp;quot;, &amp;quot;url&amp;quot;, &amp;quot;unescapedUrl&amp;quot;, &amp;quot;publisher&amp;quot;, &amp;quot;location&amp;quot;, &amp;quot;publishedDate&amp;quot;.<br>
 *	 &amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: text - The string to search for<br>
 * </blockquote>
*/
dojox.data.GoogleNewsSearchStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The blog post title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The  blog post title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - A snippet of information about the blog post&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the item&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;lat - The latitude.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;lng - The longtitude.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;streetAddress - The street address&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;city - The city&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;region - The region&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;country - The country&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;phoneNumbers - Phone numbers associated with this address. Can be one or more.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;ddUrl - A URL that can be used to provide driving directions from the center of the search results to this search results&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;ddUrlToHere - A URL that can be used to provide driving directions from this search result to a user specified location&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;staticMapUrl - The published date, in RFC-822 format&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;viewport - Recommended viewport for the query results (same for all results in a query)<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;center - contains lat, lng properties&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;span - lat, lng properties for the viewport span&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;ne, sw - lat, lng properties for the viewport corners&amp;lt;li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 &amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts the following parameters:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;text - The string to search for&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;centerLatLong - Comma-separated lat &amp;amp; long for the center of the search (e.g. &amp;quot;48.8565,2.3509&amp;quot;)&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;searchSpan - Comma-separated lat &amp;amp; long degrees indicating the size of the desired search area (e.g. &amp;quot;0.065165,0.194149&amp;quot;)&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 * </blockquote>
*/
dojox.data.GoogleLocalSearchStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The image title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The image title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the image&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;unescapedUrl - The URL for the image, with URL escaping. This is often more readable&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbUrl - The URL for the image thumbnail&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;visibleUrl - A shortened version of the URL associated with the result, stripped of a protocol and path&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;originalContextUrl - The URL of the page containing the image.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;width - The width of the image in pixels.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;height - The height of the image in pixels.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbWidth - The width of the image thumbnail in pixels.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbHeight - The height of the image thumbnail in pixels.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - A snippet of information about the image, in HTML format&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;contentNoFormatting - A snippet of information about the image, in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: text - The string to search for<br>
 * </blockquote>
*/
dojox.data.GoogleImageSearchStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving RSS and Atom feeds from Google. The<br>
 *	 feeds can come from any source, which is specified in the &amp;quot;url&amp;quot;<br>
 *	 parameter of the query passed to the &amp;quot;fetch&amp;quot; function.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The feed entry title.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;link - The URL for the HTML version of the feed entry.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - The full content of the blog post, in HTML format&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;summary - A snippet of information about the feed entry, in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;published - The string date on which the entry was published.<br>
 *	 You can parse the date with new Date(store.getValue(item, &amp;quot;published&amp;quot;)&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;categories - An array of string tags for the entry&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: url - The URL of the feed to retrieve<br>
 * </blockquote>
*/
dojox.data.GoogleFeedStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The book title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The book title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;authors - An array of authors&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the item&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;bookId - An identifier for the book, usually an ISBN.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;pageCount - The number of pages in the book.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;publishedYear - The year of publication.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: text - The string to search for<br>
 * </blockquote>
*/
dojox.data.GoogleBookSearchStore=function(){};
/**
*/
dojox.data.GoogleBlogSearchStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the FlickrStore store.<br>
 * </blockquote>
 * The FlickrStore is a Datastore interface to one of the basic services<br>
 * of the Flickr service, the public photo feed.  This does not provide<br>
 * access to all the services of Flickr.<br>
 * This store cannot do * and ? filtering as the flickr service<br>
 * provides no interface for wildcards.
 * @param {Object} args 
*/
dojox.data.FlickrStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the FlickrRestStore store.<br>
 * </blockquote>
 * The FlickrRestStore is a Datastore interface to one of the basic services<br>
 * of the Flickr service, the public photo feed.  This does not provide<br>
 * access to all the services of Flickr.<br>
 * This store cannot do * and ? filtering as the flickr service<br>
 * provides no interface for wildcards.
 * @param {Object} args 
*/
dojox.data.FlickrRestStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple store that provides a datastore interface to a filesystem.<br>
 * </blockquote>
 * A simple store that provides a datastore interface to a filesystem.  It takes a few parameters<br>
 * for initialization:
 * @param {Object} args 
 * @example
 * options="expand,dirsOnly,showHiddenFiles"
*/
dojox.data.FileStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 The CsvStore implements the dojo.data.api.Read API and reads<br>
 *	 data from files in CSV (Comma Separated Values) format.<br>
 *	 All values are simple string values. References to other items<br>
 *	 are not supported as attribute values in this datastore.<br>
 *	 <br>
 *	 Example data file:<br>
 *	 name, color, age, tagline<br>
 *	 Kermit, green, 12, &amp;quot;Hi, I'm Kermit the Frog.&amp;quot;<br>
 *	 Fozzie Bear, orange, 10, &amp;quot;Wakka Wakka Wakka!&amp;quot;<br>
 *	 Miss Piggy, pink, 11, &amp;quot;Kermie!&amp;quot;<br>
 *	 <br>
 *	 Note that values containing a comma must be enclosed with quotes (&amp;quot;&amp;quot;)<br>
 *	 Also note that values containing quotes must be escaped with two consecutive quotes (&amp;quot;&amp;quot;quoted&amp;quot;&amp;quot;)<br>
 *	 <br>
 *	 examples:<br>
 *	 var csvStore = new dojox.data.CsvStore({url:&amp;quot;movies.csv&amp;quot;);<br>
 *	 var csvStore = new dojox.data.CsvStore({url:&amp;quot;http://example.com/movies.csv&amp;quot;);<br>
 * </blockquote>
 * @see reference <a href="http://example.com/movies.csv&quot;);">http://example.com/movies.csv&quot;);</a>
 * @param {Object} keywordParameters identifier: String} The column label for the column to use for the identity.  Optional.  If not set, the identity is the row number.
*/
dojox.data.CsvStore=function(keywordParameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 Basic store to display CSS information.<br>
 * </blockquote>
 * The CssRuleStore allows users to get information about active CSS rules in the page running the CssRuleStore.<br>
 * It can also filter out rules from specific stylesheets.  The attributes it exposes on rules are as follows:<br>
 * selector:				The selector text.<br>
 * classes:				An array of classes present in this selector.<br>
 * rule:					The actual DOM Rule object.<br>
 * style:					The actual DOM CSSStyleDeclaration object.<br>
 * cssText:				The cssText string provided on the rule object.<br>
 * styleSheet:				The originating DOM Stylesheet object.<br>
 * parentStyleSheet: 		The parent stylesheet to the sheet this rule originates from.<br>
 * parentStyleSheetHref: 	The href of the parent stylesheet.<br>
 * AND every style attribute denoted as style.*, such as style.textAlign or style.backgroundColor
 * @param {Object} keywordParameters 
*/
dojox.data.CssRuleStore=function(keywordParameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 Basic store to display CSS information.<br>
 * </blockquote>
 * The CssClassStore allows users to get information about active Css classes in the page running the CssClassStore.<br>
 * It can also filter out classes from specific stylesheets.  The attributes it exposes on classes are as follows:<br>
 * class:		The classname, including the '.'.<br>
 * classSans:	The classname without the '.'.<br>
*/
dojox.data.CssClassStore=function(){};
/**
*/
dojox.data.CouchDBRestStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract class that data stores can extend to add updateable result set functionality<br>
 *	 as well as client side querying capabilities. This enables<br>
 *	 widgets to be aware of how active results change in response to the modifications/notifications.<br>
 * </blockquote>
 * To a update a result set after a notification (onNew, onSet, and onDelete),<br>
 * widgets can call the updateResultSet method. Widgets can use the updated<br>
 * result sets to determine how to react to notifications, and how to update their displayed results<br>
 * based on changes.<br>
 * <br>
 * This module will use the best available information to update result sets, using query attribute<br>
 * objects to determine if items are in a result set, and using the sort arrays to maintain sort<br>
 * information. However, queries can be opaque strings, and this module can not update<br>
 * results by itself in this case. In this situations, data stores can provide a isUpdateable(request) function<br>
 * and matchesQuery(item,request) function. If a data store can handle a query, it can return true from<br>
 * isUpdateable and if an item matches a query, it can return true from matchesQuery. Here is<br>
 * definition of isUpdateable and matchesQuery<br>
 * isUpdateable(request)  - request is the keywords arguments as is passed to the fetch function.<br>
 * matchesQuery(item,request) - item is the item to test, and request is the value arguments object<br>
 * for the fetch function.<br>
 * <br>
 * You can define a property on this object instance "cacheByDefault" to a value of true that will<br>
 * cause all queries to be cached by default unless the cache queryOption is explicitly set to false.<br>
 * This can be defined in the constructor options for ServiceStore/JsonRestStore and subtypes.
 * @example
 * to make a updated-result-set data store from an existing data store:
 * 	dojo.declare("dojox.data.MyLiveDataStore",
 * 		dojox.data.MyDataStore,dojox.data.ClientFilter], // subclass LiveResultSets if available
 * 		{}
 * 	);
*/
dojox.data.ClientFilter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 IMPORTANT: The CDF Store is designed to work with Tibco GI, and references Tibco's<br>
 *	 JSX3 JavaScript library and will not work without it.<br>
 *	 <br>
 *	 The CDF Store implements dojo.data.Read, Write, and Identity api's.  It is a local<br>
 *	 (in memory) store that handles XML documents formatted according to the<br>
 *	 Common Data Format (CDF) spec:<br>
 *	 http://www.tibco.com/devnet/resources/gi/3_1/tips_and_techniques/CommonDataFormatCDF.pdf<br>
 *	 <br>
 *	 The purpose of this store is to provide a glue between a jsx3 CDF file and a Dijit.<br>
 *	 <br>
 *	 While a CDF document is an XML file, other than the initial input, all data returned<br>
 *	 from and written to this store should be in object format.<br>
 * </blockquote>
 * @see reference <a href="http://www.tibco.com/devnet/resources/gi/3_1/tips_and_techniques/CommonDataFormatCDF.pdf">http://www.tibco.com/devnet/resources/gi/3_1/tips_and_techniques/CommonDataFormatCDF.pdf</a>
 * @param {Object} args 
 * @example
 * 	'&lt;data jsxid="jsxroot"&gt;&lt;record jsxtext="A"/&gt;&lt;record jsxtext="B" jsxid="2" jsxid="2"/&gt;&lt;/data&gt;'
*/
dojox.data.CdfStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A read only data store for Atom XML based services or documents<br>
 * </blockquote>
 * A data store for Atom XML based services or documents.	This store is still under development<br>
 * and doesn't support wildcard filtering yet.	Attribute filtering is limited to category or id.
 * @param {object} args An anonymous object to initialize properties.	It expects the following values:
*/
dojox.data.AtomReadStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 The APP data store.<br>
 * </blockquote>
 * The APP Store is instantiated either in markup or programmatically by supplying a<br>
 * url of the Collection to be used.
 * @param {Object} args An anonymous object to initialize properties.  It expects the following values:
*/
dojox.data.AppStore=function(args){};
/**
 * @param {object} keywordParameters typeMap: object)
 * The structure of the typeMap object is as follows:<br>
 * {<br>
 * type0: function || object,<br>
 * type1: function || object,<br>
 * ...<br>
 * typeN: function || object<br>
 * }<br>
 * Where if it is a function, it is assumed to be an object constructor that takes the<br>
 * value of _value as the initialization parameters.  It is serialized assuming object.toString()<br>
 * serialization.  If it is an object, then it is assumed<br>
 * to be an object of general form:<br>
 * {<br>
 * type: function, //constructor.<br>
 * deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately.<br>
 * serialize:	function(object) //The function that converts the object back into the proper file format form.<br>
 * }<br>
*/
dojox.data.AndOrWriteStore=function(keywordParameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 AndOrReadStore uses ItemFileReadStore as a base, modifying only the query (_fetchItems) section.<br>
 *	 Supports queries of the form: query:&amp;quot;id:1* OR dept:'Sales Department' || (id:2* &amp;amp;&amp;amp; NOT dept:S*)&amp;quot;<br>
 *	 Includes legacy/widget support via:<br>
 *	 query:{complexQuery:&amp;quot;id:1* OR dept:'Sales Department' || (id:2* &amp;amp;&amp;amp; NOT dept:S*)&amp;quot;}<br>
 *	 The ItemFileReadStore implements the dojo.data.api.Read API and reads<br>
 *	 data from JSON files that have contents in this format --<br>
 *	 { items: [<br>
 *	 { name:'Kermit', color:'green', age:12, friends:['Gonzo', {_reference:{name:'Fozzie Bear'}}]},<br>
 *	 { name:'Fozzie Bear', wears:['hat', 'tie']},<br>
 *	 { name:'Miss Piggy', pets:'Foo-Foo'}<br>
 *	 ]}<br>
 *	 Note that it can also contain an 'identifer' property that specified which attribute on the items<br>
 *	 in the array of items that acts as the unique identifier for that item.<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 use &amp;quot;&amp;quot; rather than undefined for the benefit of the parser (#3539)<br>
 * </blockquote>
 * @param {Object} keywordParameters typeMap: object)
 * The structure of the typeMap object is as follows:<br>
 * {<br>
 * type0: function || object,<br>
 * type1: function || object,<br>
 * ...<br>
 * typeN: function || object<br>
 * }<br>
 * Where if it is a function, it is assumed to be an object constructor that takes the<br>
 * value of _value as the initialization parameters.  If it is an object, then it is assumed<br>
 * to be an object of general form:<br>
 * {<br>
 * type: function, //constructor.<br>
 * deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately.<br>
 * }<br>
*/
dojox.data.AndOrReadStore=function(keywordParameters){};
/**
 * @namespace
*/
dojox.data.util={};
/**
 * <b>Summary:</b><blockquote>
 *	 AndOrReadStore uses ItemFileReadStore as a base, modifying only the query (_fetchItems) section.<br>
 *	 Supports queries of the form: query:&amp;quot;id:1* OR dept:'Sales Department' || (id:2* &amp;amp;&amp;amp; NOT dept:S*)&amp;quot;<br>
 *	 Includes legacy/widget support via:<br>
 *	 query:{complexQuery:&amp;quot;id:1* OR dept:'Sales Department' || (id:2* &amp;amp;&amp;amp; NOT dept:S*)&amp;quot;}<br>
 *	 The ItemFileReadStore implements the dojo.data.api.Read API and reads<br>
 *	 data from JSON files that have contents in this format --<br>
 *	 { items: [<br>
 *	 { name:'Kermit', color:'green', age:12, friends:['Gonzo', {_reference:{name:'Fozzie Bear'}}]},<br>
 *	 { name:'Fozzie Bear', wears:['hat', 'tie']},<br>
 *	 { name:'Miss Piggy', pets:'Foo-Foo'}<br>
 *	 ]}<br>
 *	 Note that it can also contain an 'identifer' property that specified which attribute on the items<br>
 *	 in the array of items that acts as the unique identifier for that item.<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 use &amp;quot;&amp;quot; rather than undefined for the benefit of the parser (#3539)<br>
 * </blockquote>
 * @class
 * @param {Object} keywordParameters typeMap: object)
 * The structure of the typeMap object is as follows:<br>
 * {<br>
 * type0: function || object,<br>
 * type1: function || object,<br>
 * ...<br>
 * typeN: function || object<br>
 * }<br>
 * Where if it is a function, it is assumed to be an object constructor that takes the<br>
 * value of _value as the initialization parameters.  If it is an object, then it is assumed<br>
 * to be an object of general form:<br>
 * {<br>
 * type: function, //constructor.<br>
 * deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately.<br>
 * }
 * @returns {dojox.data.AndOrReadStore} new instance
*/
dojox.data.AndOrReadStore=function(keywordParameters){};
/**
 * @namespace
 * @private
*/
dojox.data.AndOrReadStore._datatypeMap={};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {object} keywordArgs 
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {boolean} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {Boolean} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttribute()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValues()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @returns {Array} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {value} [defaultValue] 
 * @returns {mixed} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {array|null} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {String|undefined} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentifierAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {null|Array} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentity()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {Number|Object||String|null} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {Array} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {anything} value 
 * @returns {boolean.} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype.close=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to execute delayed request in the store.<br>
 *	 Execute any deferred fetches now.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype._handleQueuedFetches=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to parse the loaded data into item format and build the internal items array.<br>
 * </blockquote>
 * Function to parse the loaded data into item format and build the internal items array.
 * @param {Object} dataObject The JS data object containing the raw data to convery into item format.
 * @private
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype._getItemsFromLoadedData=function(dataObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to determine which list of items to search over.<br>
 * </blockquote>
 * @param {object} [queryOptions] The query options parameter, if any.
 * @private
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype._getItemsArray=function(queryOptions){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to look an item up by its identity map.<br>
 * </blockquote>
 * @param {Object} identity 
 * @private
 * @returns {Object} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype._getItemByIdentity=function(identity){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to force a load of the store if it hasn't occurred yet.  This is required<br>
 *	 for specific functions to work properly.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype._forceLoad=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.util.simpleFetch.fetch()<br>
 *	 filter modified to permit complex queries where<br>
 *	 logical operators are case insensitive:<br>
 *	 , NOT AND OR ( ) ! &amp;amp;&amp;amp; ||<br>
 *	 Note:  &amp;quot;,&amp;quot; included for quoted/string legacy queries.<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @param {Function} findCallback 
 * @param {Function} errorCallback 
 * @private
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype._fetchItems=function(keywordArgs, findCallback, errorCallback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for looking at the values contained by the item.<br>
 * </blockquote>
 * Internal function for looking at the values contained by the item.  This<br>
 * function allows for denoting if the comparison should be case sensitive for<br>
 * strings or not (for handling filtering cases where string case should not matter)
 * @param {item} item The data item to examine for attribute values.
 * @param {attribute-name-string} attribute The attribute to inspect.
 * @param {anything} value The value to match.
 * @param {RegExp} [regexp] Optional regular expression generated off value if value was of string type to handle wildcarding.
 * If present and attribute values are string, then it can be used for comparison instead of 'value'
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype._containsValue=function(item, attribute, value, regexp){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {attribute-name-string} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype._assertIsAttribute=function(attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Method to add an reference map entry for an item and attribute.<br>
 * </blockquote>
 * Method to add an reference map entry for an item and attribute. 		 //
 * @param {item} refItem The item that is referenced.
 * @param {item} parentItem The item that holds the new reference to refItem.
 * @param {string} attribute The attribute on parentItem that contains the new reference.
 * @private
 * @memberOf dojox.data.AndOrReadStore
*/
dojox.data.AndOrReadStore.prototype._addReferenceToMap=function(refItem, parentItem, attribute){};
/**
 * @class
 * @extends dojox.data.AndOrReadStore
 * @param {object} keywordParameters typeMap: object)
 * The structure of the typeMap object is as follows:<br>
 * {<br>
 * type0: function || object,<br>
 * type1: function || object,<br>
 * ...<br>
 * typeN: function || object<br>
 * }<br>
 * Where if it is a function, it is assumed to be an object constructor that takes the<br>
 * value of _value as the initialization parameters.  It is serialized assuming object.toString()<br>
 * serialization.  If it is an object, then it is assumed<br>
 * to be an object of general form:<br>
 * {<br>
 * type: function, //constructor.<br>
 * deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately.<br>
 * serialize:	function(object) //The function that converts the object back into the proper file format form.<br>
 * }
 * @returns {dojox.data.AndOrWriteStore} new instance
*/
dojox.data.AndOrWriteStore=function(keywordParameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.unsetAttribute()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.unsetAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.setValues()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {array} values 
 * @returns {boolean} -
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.setValues=function(item, attribute, values){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.set()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {almost} value anything
 * @returns {boolean} -
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.setValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.save()<br>
 * </blockquote>
 * @param {object} keywordArgs 
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.save=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.revert()<br>
 * </blockquote>
 * @returns {boolean} -
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.revert=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Notification.onSet()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {object} oldValue | array
 * @param {object} newValue | array
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.onSet=function(item, attribute, oldValue, newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Notification.onNew()<br>
 * </blockquote>
 * @param {item} newItem 
 * @param {object} [parentInfo] 
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.onNew=function(newItem, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Notification.onDelete()<br>
 * </blockquote>
 * @param {item} deletedItem 
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.onDelete=function(deletedItem){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.newItem()<br>
 * </blockquote>
 * @param {Object} [keywordArgs] 
 * @param {Object} [parentInfo] 
 * @returns {item} -
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.newItem=function(keywordArgs, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.isDirty()<br>
 * </blockquote>
 * @param {item} [item] 
 * @returns {boolean} -
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.isDirty=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.deleteItem()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.deleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride of base close function of ItemFileReadStore to add in check for store state.<br>
 * </blockquote>
 * Over-ride of base close function of ItemFileReadStore to add in check for store state.<br>
 * If the store is still dirty (unsaved changes), then an error will be thrown instead of<br>
 * clearing the internal state for reload from the url.
 * @param {object} [request] 
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype.close=function(request){};
/**
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {anything} newValueOrValues 
 * @param {boolean} [callOnSet] 
 * @private
 * @returns {boolean} -
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype._setValueOrValues=function(item, attribute, newValueOrValues, callOnSet){};
/**
 * <b>Summary:</b><blockquote>
 *	 Method to remove an reference map entry for an item and attribute.<br>
 * </blockquote>
 * Method to remove an reference map entry for an item and attribute.  This will<br>
 * also perform cleanup on the map such that if there are no more references at all to<br>
 * the item, its reference object and entry are removed.
 * @param {item} refItem The item that is referenced.
 * @param {item} parentItem The item holding a reference to refItem.
 * @param {strin} attribute The attribute on parentItem that contains the reference.
 * @private
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype._removeReferenceFromMap=function(refItem, parentItem, attribute){};
/**
 * @param {Array} array 
 * @param {anything} element 
 * @private
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype._removeArrayElement=function(array, element){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to determine if an array or object has no properties or values.<br>
 * </blockquote>
 * @param {The} something array or object to examine.
 * @private
 * @returns {boolean} -
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype._isEmpty=function(something){};
/**
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @private
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype._getValueOrValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a string that can be saved to a file.<br>
 *	 The result should look similar to:<br>
 *	 http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json<br>
 * </blockquote>
 * @see reference <a href="http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json">http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json</a>
 * @private
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype._getNewFileContentString=function(){};
/**
 * @private
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype._getIdentifierAttribute=function(){};
/**
 * @param {anything} value 
 * @private
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype._flatten=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to dump the reverse reference map of all items in the store for debug purposes.<br>
 * </blockquote>
 * Function to dump the reverse reference map of all items in the store for debug purposes.
 * @private
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype._dumpReferenceMap=function(){};
/**
 * @param {boolean} condition 
 * @private
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype._assert=function(condition){};
/**
 * <b>Summary:</b><blockquote>
 *	 Method to add an reference map entry for an item and attribute.<br>
 * </blockquote>
 * Method to add an reference map entry for an item and attribute. 		 //
 * @param {item} refItem The item that is referenced.
 * @param {item} parentItem The item that holds the new reference to refItem.
 * @param {string} attribute The attribute on parentItem that contains the new reference.
 * @private
 * @memberOf dojox.data.AndOrWriteStore
*/
dojox.data.AndOrWriteStore.prototype._addReferenceToMap=function(refItem, parentItem, attribute){};
/**
 * @namespace
*/
dojox.data.AndOrWriteStore._datatypeMap.Date={};
/**
 * @param {mixed} obj 
*/
dojox.data.AndOrWriteStore._datatypeMap.Date.serialize=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 The APP data store.<br>
 * </blockquote>
 * The APP Store is instantiated either in markup or programmatically by supplying a<br>
 * url of the Collection to be used.
 * @class
 * @extends dojo.data.util.simpleFetch
 * @param {Object} args An anonymous object to initialize properties.  It expects the following values:
 * @returns {dojox.data.AppStore} new instance
*/
dojox.data.AppStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.unsetAttribute()<br>
 * </blockquote>
 * @param {item} item 
 * @param {string} attribute 
 * @returns {boolean} -
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.unsetAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.setValues()<br>
 * </blockquote>
 * @param {item} item 
 * @param {string} attribute 
 * @param {array} values 
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.setValues=function(item, attribute, values){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.setValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {string} attribute 
 * @param {almost} value anything
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.setValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.save()<br>
 * </blockquote>
 * @param {object} keywordArgs { onComplete: function
 * onError: function<br>
 * scope: object<br>
 * }
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.save=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.revert()<br>
 * </blockquote>
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.revert=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.newItem()<br>
 * </blockquote>
 * @param {Object} [keywordArgs] 
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.newItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {anything} something 
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {boolean} -
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.isDirty()<br>
 * </blockquote>
 * @param {item} [item] 
 * @returns {boolean} -
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.isDirty=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttribute()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValues()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @returns {Array} -
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {value} [defaultValue] 
 * @returns {Object||int|Boolean} -
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentityAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentity()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {Array} -
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity()<br>
 * </blockquote>
 * @param {mixed} keywordArgs 
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Write.deleteItem()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.deleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {anything} value 
 * @returns {boolean.} -
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 *	 nothing to do here!<br>
 * </blockquote>
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype.close=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the internal feed using a dojox.atom.io.model.Feed object.<br>
 * </blockquote>
 * Sets the internal feed using a dojox.atom.io.model.Feed object.  Also adds<br>
 * a property to the entries to track that they belong to this store. It<br>
 * also parses stored requests (since we were waiting on a callback) and<br>
 * executes those as well.
 * @param {dojox.atom.io.model.Feed} feed object
 * The Feed to use for this data store.
 * @param {unused} data Signature for this function is defined by AtomIO.getFeed, since this is a callback.
 * @private
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype._setFeed=function(feed, data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to return all entries in the Feed as an array of items.<br>
 * </blockquote>
 * Function to return all entries in the Feed as an array of items.
 * @private
 * 
 * @returns {array} -
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype._getAllItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for finishing a fetch request.<br>
 * </blockquote>
 * Internal function for finishing a fetch request.  Needed since the feed<br>
 * might not have been loaded, so we finish the fetch in a callback.
 * @param {A} request request object
 * @param {A} fetchHandler function to call for fetched items
 * @param {A} errorHandler function to call on error
 * @private
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype._finishFetchItems=function(request, fetchHandler, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch items (Atom entries) that match to a query<br>
 * </blockquote>
 * Fetch items (Atom entries) that match to a query
 * @param {A} request request object
 * @param {A} fetchHandler function to call for fetched items
 * @param {A} errorHandler function to call on error
 * @private
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype._fetchItems=function(request, fetchHandler, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for looking at the values contained by the item.<br>
 * </blockquote>
 * Internal function for looking at the values contained by the item.  This<br>
 * function allows for denoting if the comparison should be case sensitive for<br>
 * strings or not (for handling filtering cases where string case should not matter)
 * @param {item} item The data item to examine for attribute values.
 * @param {attribute-name-string} attribute The attribute to inspect.
 * @param {anything} value The value to match.
 * @param {RegExp} [regexp] Optional regular expression generated off value if value was of string type to handle wildcarding.
 * If present and attribute values are string, then it can be used for comparison instead of 'value'
 * @param {Boolean} [trim] 
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype._containsValue=function(item, attribute, value, regexp, trim){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item is an item.<br>
 * </blockquote>
 * This function tests whether the item passed in is indeed an item<br>
 * in the store.
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item is an attribute.<br>
 * </blockquote>
 * This function tests whether the item passed in is indeed a valid<br>
 * 'attribute' like type for the store.
 * @param {String} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype._assertIsAttribute=function(attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to add an updated entry to our updates array<br>
 * </blockquote>
 * Internal function to add an updated entry to our updates array
 * @param {Object} update dojox.atom.io.model.Entry object
 * The updated Entry we've changed.
 * @private
 * @memberOf dojox.data.AppStore
*/
dojox.data.AppStore.prototype._addUpdate=function(update){};
/**
 * <b>Summary:</b><blockquote>
 *	 A read only data store for Atom XML based services or documents<br>
 * </blockquote>
 * A data store for Atom XML based services or documents.	This store is still under development<br>
 * and doesn't support wildcard filtering yet.	Attribute filtering is limited to category or id.
 * @class
 * @extends dojo.data.util.simpleFetch
 * @param {object} args An anonymous object to initialize properties.	It expects the following values:
 * @returns {dojox.data.AtomReadStore} new instance
*/
dojox.data.AtomReadStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load an item (XML element)<br>
 * </blockquote>
 * @param {object} keywordArgs containing the args for loadItem.	See dojo.data.api.Read.loadItem()
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether the object is an item (XML element) and loaded<br>
 *	 item:<br>
 *	 An object to check<br>
 * </blockquote>
 * @param {anything} something 
 * 
 * @returns {boolean} -
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether the object is an item (XML element)<br>
 *	 item:<br>
 *	 An object to check<br>
 * </blockquote>
 * @param {anything} something 
 * 
 * @returns {boolean|boolran} -
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether an element has the attribute<br>
 * </blockquote>
 * @param {item} item 'item' must be created by the AtomReadStore instance.
 * @param {attribute} attribute An attribute of an Atom Entry item.
 * 
 * @returns {boolean} -
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an attribute value<br>
 * </blockquote>
 * 'item' must be an instance of an object created by the AtomReadStore instance.<br>
 * Accepted attributes are id, subtitle, title, summary, content, author, updated,<br>
 * published, category, link and alternate
 * @param {item} item An item returned by a call to the 'fetch' method.
 * @param {attribute} attribute A attribute of the Atom Entry
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an attribute value<br>
 * </blockquote>
 * 'item' must be an instance of an object created by the AtomReadStore instance.<br>
 * Accepted attributes are id, subtitle, title, summary, content, author, updated,<br>
 * published, category, link and alternate
 * @param {item} item An item returned by a call to the 'fetch' method.
 * @param {attribute} attribute A attribute of the Atom Entry
 * @param {value} [defaultValue] A default value
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {array|null} -
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {undefined} -
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Non-API method for retrieving values regarding the Atom feed,<br>
 *	 rather than the Atom entries.<br>
 * </blockquote>
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.getFeedValues=function(attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Non-API method for retrieving values regarding the Atom feed,<br>
 *	 rather than the Atom entries.<br>
 * </blockquote>
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.getFeedValue=function(attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return supported data APIs<br>
 * </blockquote>
 * 
 * @returns {array} -
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an array of attribute names<br>
 * </blockquote>
 * 'item' must be have been created by the AtomReadStore instance.<br>
 * tag names of child elements and XML attribute names of attributes<br>
 * specified to the element are returned along with special attribute<br>
 * names applicable to the element including "tagName", "childNodes"<br>
 * if the element has child elements, "text()" if the element has<br>
 * child text nodes, and attribute names in '_attributeMap' that match<br>
 * the tag name of the element.
 * @param {item} item An XML element
 * 
 * @returns {array} -
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether the attribute values contain the value<br>
 * </blockquote>
 * @param {item} item 'item' must be an instance of a dojox.data.XmlItem from the store instance.
 * @param {attribute} attribute A tag name of a child element, An XML attribute name or one of
 * special names
 * @param {anything} value 
 * 
 * @returns {boolean} -
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype.close=function(request){};
/**
 * @param {mixed} text 
 * @private
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype._unescapeHTML=function(text){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype._parseItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes an item before it can be parsed.<br>
 * </blockquote>
 * @param {mixed} item 
 * @private
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype._initItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parses the document in a first pass<br>
 * </blockquote>
 * @param {mixed} document 
 * @param {mixed} request 
 * @private
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype._getItems=function(document, request){};
/**
 * @param {mixed} element 
 * @private
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype._getItem=function(element){};
/**
 * @param {mixed} request 
 * @private
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype._getFetchUrl=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves the items from the Atom XML document.<br>
 * </blockquote>
 * @param {mixed} request 
 * @param {mixed} fetchHandler 
 * @param {mixed} errorHandler 
 * @private
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype._fetchItems=function(request, fetchHandler, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {attribute-name-string} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.AtomReadStore
*/
dojox.data.AtomReadStore.prototype._assertIsAttribute=function(attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 IMPORTANT: The CDF Store is designed to work with Tibco GI, and references Tibco's<br>
 *	 JSX3 JavaScript library and will not work without it.<br>
 *	 <br>
 *	 The CDF Store implements dojo.data.Read, Write, and Identity api's.  It is a local<br>
 *	 (in memory) store that handles XML documents formatted according to the<br>
 *	 Common Data Format (CDF) spec:<br>
 *	 http://www.tibco.com/devnet/resources/gi/3_1/tips_and_techniques/CommonDataFormatCDF.pdf<br>
 *	 <br>
 *	 The purpose of this store is to provide a glue between a jsx3 CDF file and a Dijit.<br>
 *	 <br>
 *	 While a CDF document is an XML file, other than the initial input, all data returned<br>
 *	 from and written to this store should be in object format.<br>
 * </blockquote>
 * @see reference <a href="http://www.tibco.com/devnet/resources/gi/3_1/tips_and_techniques/CommonDataFormatCDF.pdf">http://www.tibco.com/devnet/resources/gi/3_1/tips_and_techniques/CommonDataFormatCDF.pdf</a>
 * @class
 * @param {Object} args 
 * @returns {dojox.data.CdfStore} new instance
 * @example
 * 	'&lt;data jsxid="jsxroot"&gt;&lt;record jsxtext="A"/&gt;&lt;record jsxtext="B" jsxid="2" jsxid="2"/&gt;&lt;/data&gt;'
*/
dojox.data.CdfStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove an property<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @param {String} property 
 * @returns {Boolean} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.unsetAttribute=function(item, property){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set property values<br>
 *	 TODO: Needs to be fully implemented.<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @param {String} property 
 * @param {array} values 
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.setValues=function(item, property, values){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set an property value<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @param {String} property 
 * @param {almost} value anything
 * @returns {Boolean} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.setValue=function(item, property, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Invalidate changes (new and/or modified elements)<br>
 *	 Resets data by simply deleting the reference to the cdfDoc.<br>
 *	 Subsequent fetches will load the new data.<br>
 *	 Note:<br>
 *	 Any items outside the store will no longer be valid and may cause errors.<br>
 * </blockquote>
 * @returns {boolean} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.revert=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a jsx3.xml.Entity item and inserts it either inside the<br>
 *	 parent or appends it to the root<br>
 * </blockquote>
 * @param {object} [keywordArgs] 
 * @param {object} [parentInfo] || String?
 * @returns {jsx3.xml.Entity} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.newItem=function(keywordArgs, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load an item<br>
 * </blockquote>
 * The store always loads all items, so if it's an item, then it's loaded.
 * @param {object} keywordArgs 
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether the object is a jsx3.xml.Entity object and loaded<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {Boolean} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether the object is an item (jsx3.xml.Entity)<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {boolean|boolran} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether an item is new, modified or deleted.<br>
 *	 If no item is passed, checks if anything in the store has changed.<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item ?
 * @returns {Boolean} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.isDirty=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Alias for hasAttribute<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @param {String} property 
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.hasProperty=function(item, property){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether an item has a property<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @param {String} property 
 * @returns {Boolean} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.hasAttribute=function(item, property){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an array of values<br>
 *	 <br>
 *	 TODO!!! Can't find an example of an array in any CDF files<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @param {String} property 
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.getValues=function(item, property){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an property value of an item<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @param {String} property 
 * @param {value} [defaultValue] 
 * @returns {anything} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.getValue=function(item, property, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an array of what properties of the item that were used<br>
 *	 to generate its label<br>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @returns {array|null} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @returns {undefined} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the property used for the identity.<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @returns {Array} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the identifier for an item.<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @returns {String} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return supported data APIs<br>
 * </blockquote>
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an array of property names<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @returns {Array} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity(keywordArgs)<br>
 *	 <br>
 *	 Note:<br>
 *	 This method can be synchronous if mode is set.<br>
 *	 Also, there is a more finger friendly alias of this method, byId();<br>
 * </blockquote>
 * @param {Object} args || String
 * @returns {dojo.Deferred||Array} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.fetchItemByIdentity=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an Array of items based on the request arguments.<br>
 * </blockquote>
 * Returns an Array of items based on the request arguments.<br>
 * If the store is in ASYNC mode, the items should be expected in an onComplete<br>
 * method passed in the request object. If store is in SYNC mode, the items will<br>
 * be return directly as well as within the onComplete method.<br>
 * note:<br>
 * The mode can be set on store initialization or during a fetch as one of the<br>
 * parameters.<br>
 * <br>
 * query: String<br>
 * The items in the store are treated as objects, but this is reading an XML<br>
 * document. Further, the actual querying of the items takes place in Tibco GI's<br>
 * jsx3.xml.Entity. Therefore, we are using their syntax which is xpath.<br>
 * Note:<br>
 * As conforming to a CDF document, most, if not all nodes are considered "records"<br>
 * and their tagNames are as such. The root node is named "data".<br>
 * <br>
 * examples:<br>
 * All items:<br>
 * 	store.fetch({query:"*"});<br>
 * Item with a jsxid attribute equal to "1" (note you could use byId for this)<br>
 * 	store.fetch({query:"//record[@jsxid='1']"});<br>
 * All items with any jsxid attribute:<br>
 * 	"//record[@jsxid='*']"<br>
 * The items with a jsxid of '1' or '4':<br>
 * 	"//record[@jsxid='4' or @jsxid='1']"<br>
 * All children within a "group" node (could be multiple group nodes):<br>
 * "//group/record"<br>
 * All children within a specific group node:<br>
 * "//group[@name='mySecondGroup']/record"<br>
 * Any record, anywhere in the document:<br>
 * 	"//record"<br>
 * Only the records beneath the root (data) node:<br>
 * 	"//data/record"<br>
 * <br>
 * See:<br>
 * http://www.tibco.com/devnet/resources/gi/3_7/api/html/jsx3/xml/Entity.html#method:selectNodes<br>
 * http://www.w3.org/TR/xpath<br>
 * http://msdn.microsoft.com/en-us/library/ms256086.aspx<br>
 * <br>
 * See dojo.data.Read.fetch():<br>
 * onBegin<br>
 * onComplete<br>
 * onItem<br>
 * onError<br>
 * scope<br>
 * start<br>
 * count<br>
 * sort
 * @see reference <a href="http://www.tibco.com/devnet/resources/gi/3_7/api/html/jsx3/xml/Entity.html#method:selectNodes">http://www.tibco.com/devnet/resources/gi/3_7/api/html/jsx3/xml/Entity.html#method:selectNodes</a>
 * @param {Object} [request] 
 * @returns {Object} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.fetch=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Delete an jsx3.xml.Entity (wrapper to a XML element).<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @returns {boolean} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.deleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether an item contains a value<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} item 
 * @param {String} property 
 * @param {anything} value 
 * @returns {boolean} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.containsValue=function(item, property, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype.close=function(request){};
/**
 * @param {Object} args || String
*/
dojox.data.CdfStore.byId=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal method.<br>
 *	 Converts an object into an XML string.<br>
 * </blockquote>
 * @param {mixed} obj 
 * @private
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype._makeXmlString=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal method.<br>
 *	 Marks items as modified, deleted or new.<br>
 * </blockquote>
 * @param {mixed} item 
 * @private
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype._makeDirty=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal method.<br>
 *	 If a cdfDoc exists, return it. Otherwise, get one from JSX3,<br>
 *	 load the data or url, and return the doc or a deferred.<br>
 * </blockquote>
 * @private
 * @returns {jsx3.xml.CDF|dojo.Deferred|Error} -
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype._loadCDF=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal method.<br>
 *	 Requests the items from jsx3.xml.Entity with an xpath query.<br>
 * </blockquote>
 * @param {jsx3.xml.Entity} cdfDoc 
 * @param {Object} request 
 * @private
 * @memberOf dojox.data.CdfStore
*/
dojox.data.CdfStore.prototype._getItems=function(cdfDoc, request){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract class that data stores can extend to add updateable result set functionality<br>
 *	 as well as client side querying capabilities. This enables<br>
 *	 widgets to be aware of how active results change in response to the modifications/notifications.<br>
 * </blockquote>
 * To a update a result set after a notification (onNew, onSet, and onDelete),<br>
 * widgets can call the updateResultSet method. Widgets can use the updated<br>
 * result sets to determine how to react to notifications, and how to update their displayed results<br>
 * based on changes.<br>
 * <br>
 * This module will use the best available information to update result sets, using query attribute<br>
 * objects to determine if items are in a result set, and using the sort arrays to maintain sort<br>
 * information. However, queries can be opaque strings, and this module can not update<br>
 * results by itself in this case. In this situations, data stores can provide a isUpdateable(request) function<br>
 * and matchesQuery(item,request) function. If a data store can handle a query, it can return true from<br>
 * isUpdateable and if an item matches a query, it can return true from matchesQuery. Here is<br>
 * definition of isUpdateable and matchesQuery<br>
 * isUpdateable(request)  - request is the keywords arguments as is passed to the fetch function.<br>
 * matchesQuery(item,request) - item is the item to test, and request is the value arguments object<br>
 * for the fetch function.<br>
 * <br>
 * You can define a property on this object instance "cacheByDefault" to a value of true that will<br>
 * cause all queries to be cached by default unless the cache queryOption is explicitly set to false.<br>
 * This can be defined in the constructor options for ServiceStore/JsonRestStore and subtypes.
 * @class
 * @returns {dojox.data.ClientFilter} new instance
 * @example
 * to make a updated-result-set data store from an existing data store:
 * 	dojo.declare("dojox.data.MyLiveDataStore",
 * 		dojox.data.MyDataStore,dojox.data.ClientFilter], // subclass LiveResultSets if available
 * 		{}
 * 	);
*/
dojox.data.ClientFilter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Attempts to update the given result set based on previous notifications<br>
 * </blockquote>
 * This will attempt to update the provide result based on previous notification, adding new items<br>
 * from onNew calls, removing deleted items, and updating modified items, and properly removing<br>
 * and adding items as required by the query and sort parameters. This function will return:<br>
 * 0: Indicates it could not successfully update the result set<br>
 * 1: Indicates it could successfully handle all the notifications, but no changes were made to the result set<br>
 * 2: Indicates it successfully handled all the notifications and result set has been updated.
 * @param {Array} resultSet The result set array that should be updated
 * @param {Object} request This object follows the same meaning as the keywordArgs passed to a dojo.data.api.Read.fetch.
 * @memberOf dojox.data.ClientFilter
*/
dojox.data.ClientFilter.prototype.updateResultSet=function(resultSet, request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines whether the provided arguments are super/sub sets of each other<br>
 * </blockquote>
 * @param {Dojo} argsSuper Data Fetch arguments
 * @param {Dojo} argsSub Data Fetch arguments
 * @memberOf dojox.data.ClientFilter
*/
dojox.data.ClientFilter.prototype.querySuperSet=function(argsSuper, argsSub){};
/**
 * @param {mixed} item 
 * @param {mixed} request 
 * @memberOf dojox.data.ClientFilter
*/
dojox.data.ClientFilter.prototype.matchesQuery=function(item, request){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a comparator function for the given sort order array<br>
 * </blockquote>
 * @param {See} sort dojox.data.api.Read.fetch
 * @returns {keep the order unchanged} -
 * @memberOf dojox.data.ClientFilter
*/
dojox.data.ClientFilter.prototype.makeComparator=function(sort){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns whether the provide fetch arguments can be used to update an existing list<br>
 * </blockquote>
 * @param {Object} request See dojo.data.api.Read.fetch request
 * @memberOf dojox.data.ClientFilter
*/
dojox.data.ClientFilter.prototype.isUpdateable=function(request){};
/**
 * @param {Object} request 
 * @param {Array} baseResults 
 * @memberOf dojox.data.ClientFilter
*/
dojox.data.ClientFilter.prototype.clientSidePaging=function(request, baseResults){};
/**
 * <b>Summary:</b><blockquote>
 *	 Performs a query on the client side and returns the results as an array<br>
 * </blockquote>
 * @param {Object} request See dojo.data.api.Read.fetch request
 * @param {Array} baseResults This provides the result set to start with for client side querying
 * @memberOf dojox.data.ClientFilter
*/
dojox.data.ClientFilter.prototype.clientSideFetch=function(request, baseResults){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clears the cache of client side queries<br>
 * </blockquote>
 * @memberOf dojox.data.ClientFilter
*/
dojox.data.ClientFilter.prototype.clearCache=function(){};
/**
 * @param {mixed} args 
 * @memberOf dojox.data.ClientFilter
*/
dojox.data.ClientFilter.prototype.cachingFetch=function(args){};
/**
 * @class
 * @extends dojox.data.JsonRestStore
 * @returns {dojox.data.CouchDBRestStore} new instance
*/
dojox.data.CouchDBRestStore=function(){};
/**
 * @param {mixed} kwArgs 
 * @memberOf dojox.data.CouchDBRestStore
*/
dojox.data.CouchDBRestStore.prototype.save=function(kwArgs){};
/**
 * @param {mixed} couchServerUrl 
*/
dojox.data.CouchDBRestStore.getStores=function(couchServerUrl){};
/**
 * <b>Summary:</b><blockquote>
 *	 This only differs from JsonRestStore in that it, will put the query string the query part of the URL and it handles start and count<br>
 * </blockquote>
 * @param {mixed} args 
 * @memberOf dojox.data.CouchDBRestStore
*/
dojox.data.CouchDBRestStore.prototype.fetch=function(args){};
/**
 * @param {mixed} results 
 * @private
 * @memberOf dojox.data.CouchDBRestStore
*/
dojox.data.CouchDBRestStore.prototype._processResults=function(results){};
/**
 * <b>Summary:</b><blockquote>
 *	 Basic store to display CSS information.<br>
 * </blockquote>
 * The CssClassStore allows users to get information about active Css classes in the page running the CssClassStore.<br>
 * It can also filter out classes from specific stylesheets.  The attributes it exposes on classes are as follows:<br>
 * class:		The classname, including the '.'.<br>
 * classSans:	The classname without the '.'.
 * @class
 * @extends dojox.data.CssRuleStore
 * @returns {dojox.data.CssClassStore} new instance
*/
dojox.data.CssClassStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValues()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.CssClassStore
*/
dojox.data.CssClassStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.CssClassStore
*/
dojox.data.CssClassStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentityAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.CssClassStore
*/
dojox.data.CssClassStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentity()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.CssClassStore
*/
dojox.data.CssClassStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojox.data.CssClassStore
*/
dojox.data.CssClassStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.CssClassStore
*/
dojox.data.CssClassStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity()<br>
 * </blockquote>
 * @param {request} request 
 * @memberOf dojox.data.CssClassStore
*/
dojox.data.CssClassStore.prototype.fetchItemByIdentity=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles the creation of an item based on the passed rule.  In this store, this implies<br>
 *	 parsing out all available class names.<br>
 * </blockquote>
 * @param {mixed} rule 
 * @param {mixed} styleSheet 
 * @param {mixed} href 
 * @private
 * @memberOf dojox.data.CssClassStore
*/
dojox.data.CssClassStore.prototype._handleRule=function(rule, styleSheet, href){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles the return from a fetching action.  Delegates requests to act on the resulting<br>
 *	 item set to eitehr the _handleFetchReturn or _handleFetchByIdentityReturn depending on<br>
 *	 where the request originated.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.data.CssClassStore
*/
dojox.data.CssClassStore.prototype._handleReturn=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles a fetchByIdentity request by finding the correct item.<br>
 * </blockquote>
 * @param {mixed} request 
 * @private
 * @memberOf dojox.data.CssClassStore
*/
dojox.data.CssClassStore.prototype._handleFetchByIdentityReturn=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Basic store to display CSS information.<br>
 * </blockquote>
 * The CssRuleStore allows users to get information about active CSS rules in the page running the CssRuleStore.<br>
 * It can also filter out rules from specific stylesheets.  The attributes it exposes on rules are as follows:<br>
 * selector:				The selector text.<br>
 * classes:				An array of classes present in this selector.<br>
 * rule:					The actual DOM Rule object.<br>
 * style:					The actual DOM CSSStyleDeclaration object.<br>
 * cssText:				The cssText string provided on the rule object.<br>
 * styleSheet:				The originating DOM Stylesheet object.<br>
 * parentStyleSheet: 		The parent stylesheet to the sheet this rule originates from.<br>
 * parentStyleSheetHref: 	The href of the parent stylesheet.<br>
 * AND every style attribute denoted as style.*, such as style.textAlign or style.backgroundColor
 * @class
 * @param {Object} keywordParameters 
 * @returns {dojox.data.CssRuleStore} new instance
*/
dojox.data.CssRuleStore=function(keywordParameters){};
/**
 * @param {Array} context - Array of CSS string paths to execute queries within
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.setContext=function(context){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {object} keywordArgs 
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {boolean} -
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.isItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttribute()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValues()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.fetch()<br>
 * </blockquote>
 * @param {mixed} request 
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.fetch=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {anything} value 
 * @returns {boolean.} -
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 *	 Clears out the cache and allItems objects, meaning all future fetches will requery<br>
 *	 the stylesheets.<br>
 * </blockquote>
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype.close=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles the creation of an item based on the passed rule.  In this store, this implies<br>
 *	 parsing out all available class names.<br>
 * </blockquote>
 * @param {mixed} rule 
 * @param {mixed} styleSheet 
 * @param {mixed} href 
 * @private
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype._handleRule=function(rule, styleSheet, href){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles the return from a fetching action.  Delegates requests to act on the resulting<br>
 *	 item set to eitehr the _handleFetchReturn or _handleFetchByIdentityReturn depending on<br>
 *	 where the request originated.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype._handleReturn=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles a fetchByIdentity request by finding the correct items.<br>
 * </blockquote>
 * @param {Request} request 
 * @private
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype._handleFetchReturn=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Populates the _allItems object with unique class names<br>
 * </blockquote>
 * @param {mixed} request 
 * @private
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype._fetch=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for looking at the values contained by the item.<br>
 * </blockquote>
 * Internal function for looking at the values contained by the item.  This<br>
 * function allows for denoting if the comparison should be case sensitive for<br>
 * strings or not (for handling filtering cases where string case should not matter)
 * @param {item} item The data item to examine for attribute values.
 * @param {attribute-name-string} attribute The attribute to inspect.
 * @param {anything} value The value to match.
 * @param {RegExp} [regexp] Optional regular expression generated off value if value was of string type to handle wildcarding.
 * If present and attribute values are string, then it can be used for comparison instead of 'value'
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype._containsValue=function(item, attribute, value, regexp){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {attribute-name-string} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.CssRuleStore
*/
dojox.data.CssRuleStore.prototype._assertIsAttribute=function(attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 The CsvStore implements the dojo.data.api.Read API and reads<br>
 *	 data from files in CSV (Comma Separated Values) format.<br>
 *	 All values are simple string values. References to other items<br>
 *	 are not supported as attribute values in this datastore.<br>
 *	 <br>
 *	 Example data file:<br>
 *	 name, color, age, tagline<br>
 *	 Kermit, green, 12, &amp;quot;Hi, I'm Kermit the Frog.&amp;quot;<br>
 *	 Fozzie Bear, orange, 10, &amp;quot;Wakka Wakka Wakka!&amp;quot;<br>
 *	 Miss Piggy, pink, 11, &amp;quot;Kermie!&amp;quot;<br>
 *	 <br>
 *	 Note that values containing a comma must be enclosed with quotes (&amp;quot;&amp;quot;)<br>
 *	 Also note that values containing quotes must be escaped with two consecutive quotes (&amp;quot;&amp;quot;quoted&amp;quot;&amp;quot;)<br>
 *	 <br>
 *	 examples:<br>
 *	 var csvStore = new dojox.data.CsvStore({url:&amp;quot;movies.csv&amp;quot;);<br>
 *	 var csvStore = new dojox.data.CsvStore({url:&amp;quot;http://example.com/movies.csv&amp;quot;);<br>
 * </blockquote>
 * @see reference <a href="http://example.com/movies.csv&quot;);">http://example.com/movies.csv&quot;);</a>
 * @class
 * @param {Object} keywordParameters identifier: String} The column label for the column to use for the identity.  Optional.  If not set, the identity is the row number.
 * @returns {dojox.data.CsvStore} new instance
*/
dojox.data.CsvStore=function(keywordParameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * The CsvStore always loads all items, so if it's an item, then it's loaded.<br>
 * From the dojo.data.api.Read.loadItem docs:<br>
 * If a call to isItemLoaded() returns true before loadItem() is even called,<br>
 * then loadItem() need not do any work at all and will not even invoke<br>
 * the callback handlers.
 * @param {item} item 
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.loadItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 *	 The CsvStore always loads all items, so if it's an item, then it's loaded.<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {Boolean} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {Boolean} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttribute()<br>
 *	 The hasAttribute test is true if attribute has an index number within the item's array length<br>
 *	 AND if the item has a value for that attribute. Note that for the CsvStore, an<br>
 *	 empty string value is the same as no value.<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @returns {Boolean} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValues()<br>
 *	 CSV syntax does not support multi-valued attributes, so this is just a<br>
 *	 wrapper function for getValue().<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute} attribute || attribute-name-string
 * @returns {Array} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 *	 Note that for the CsvStore, an empty string value is the same as no value,<br>
 *	 so the defaultValue would be returned instead of an empty string.<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute} attribute || attribute-name-string
 * @param {value} [defaultValue] 
 * @returns {String} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {array|null} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {String|undefined} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentifierAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentity()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {String|null} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {Array} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute} attribute || attribute-name-string
 * @param {anything} value 
 * @returns {boolean.} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype.close=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to split the CSV file contents into separate lines.<br>
 *	 Since line breaks can occur inside quotes, a Regexp didn't<br>
 *	 work as well.  A quick passover parse should be just as efficient.<br>
 * </blockquote>
 * @param {mixed} csvContent 
 * @private
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype._splitLines=function(csvContent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for processing the string data from the server.<br>
 * </blockquote>
 * @param {String} data The CSV data.
 * @private
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype._processData=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to execute delayed request in the store.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype._handleQueuedFetches=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to get the internal index to the item data from the item handle<br>
 * </blockquote>
 * @param {The} item idem handle to get the index for.
 * @private
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype._getIndex=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.util.simpleFetch.fetch()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @param {Function} findCallback 
 * @param {Function} errorCallback 
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype._fetchItems=function(keywordArgs, findCallback, errorCallback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for creating a new item from its identifier.<br>
 * </blockquote>
 * @param {String} identity The identity
 * @private
 * @returns {Object} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype._createItemFromIdentity=function(identity){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for looking at the values contained by the item.<br>
 * </blockquote>
 * Internal function for looking at the values contained by the item.  This<br>
 * function allows for denoting if the comparison should be case sensitive for<br>
 * strings or not (for handling filtering cases where string case should not matter)
 * @param {item} item The data item to examine for attribute values.
 * @param {attribute} attribute The attribute to inspect.
 * @param {anything} value The value to match.
 * @param {RegExp} [regexp] Optional regular expression generated off value if value was of string type to handle wildcarding.
 * If present and attribute values are string, then it can be used for comparison instead of 'value'
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype._containsValue=function(item, attribute, value, regexp){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.CsvStore
*/
dojox.data.CsvStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple store that provides a datastore interface to a filesystem.<br>
 * </blockquote>
 * A simple store that provides a datastore interface to a filesystem.  It takes a few parameters<br>
 * for initialization:
 * @class
 * @param {Object} args 
 * @returns {dojox.data.FileStore} new instance
 * @example
 * options="expand,dirsOnly,showHiddenFiles"
*/
dojox.data.FileStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {mixed} keywordArgs 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.isItemLoaded=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.isItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttribute()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentity()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {mixed} keywordArgs 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch  items that match to a query<br>
 * </blockquote>
 * @param {A} request request object
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.fetch=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} value 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {mixed} request 
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype.close=function(request){};
/**
 * @param {mixed} data 
 * @param {mixed} request 
 * @private
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype._processResult=function(data, request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for processing an array of items for return.<br>
 * </blockquote>
 * @param {mixed} itemArray 
 * @private
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype._processItemArray=function(itemArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for processing an item returned from the store.<br>
 *	 It sets up the store ref as well as sets up the attributes necessary<br>
 *	 to invoke a lazy load on a child, if there are any.<br>
 * </blockquote>
 * @param {mixed} item 
 * @private
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype._processItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {attribute-name-string} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.FileStore
*/
dojox.data.FileStore.prototype._assertIsAttribute=function(attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the FlickrRestStore store.<br>
 * </blockquote>
 * The FlickrRestStore is a Datastore interface to one of the basic services<br>
 * of the Flickr service, the public photo feed.  This does not provide<br>
 * access to all the services of Flickr.<br>
 * This store cannot do * and ? filtering as the flickr service<br>
 * provides no interface for wildcards.
 * @class
 * @extends dojox.data.FlickrStore
 * @param {Object} args 
 * @returns {dojox.data.FlickrRestStore} new instance
*/
dojox.data.FlickrRestStore=function(args){};
/**
 * @namespace
 * @private
*/
dojox.data.FlickrRestStore._sortAttributes={};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @returns {String} -
 * @memberOf dojox.data.FlickrRestStore
*/
dojox.data.FlickrRestStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FlickrRestStore
*/
dojox.data.FlickrRestStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Processes the raw data from Flickr and updates the internal cache.<br>
 * </blockquote>
 * @param {Object} data Data returned from Flickr
 * @param {Object} request The original dojo.data.Request object passed in by the user.
 * @param {String} cacheKey 
 * @private
 * @returns {Array} -
 * @memberOf dojox.data.FlickrRestStore
*/
dojox.data.FlickrRestStore.prototype._processFlickrData=function(data, request, cacheKey){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch flickr items that match to a query<br>
 * </blockquote>
 * @param {Object} request A request object
 * @param {Function} fetchHandler A function to call for fetched items
 * @param {Function} errorHandler A function to call on error
 * @private
 * @memberOf dojox.data.FlickrRestStore
*/
dojox.data.FlickrRestStore.prototype._fetchItems=function(request, fetchHandler, errorHandler){};
/**
 * @param {mixed} primaryKey 
 * @param {mixed} start 
 * @param {mixed} count 
 * @private
 * @memberOf dojox.data.FlickrRestStore
*/
dojox.data.FlickrRestStore.prototype._checkPrevRanges=function(primaryKey, start, count){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the FlickrStore store.<br>
 * </blockquote>
 * The FlickrStore is a Datastore interface to one of the basic services<br>
 * of the Flickr service, the public photo feed.  This does not provide<br>
 * access to all the services of Flickr.<br>
 * This store cannot do * and ? filtering as the flickr service<br>
 * provides no interface for wildcards.
 * @class
 * @param {Object} args 
 * @returns {dojox.data.FlickrStore} new instance
*/
dojox.data.FlickrStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {mixed} keywordArgs 
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.isItemLoaded=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.isItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} value 
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {mixed} request 
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype.close=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Utility function to un-escape XML special characters in an<br>
 *	 HTML string.<br>
 * </blockquote>
 * @param {String} str String. The string to un-escape
 * @private
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype._unescapeHtml=function(str){};
/**
 * @param {mixed} data 
 * @private
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype._processFlickrData=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch flickr items that match to a query<br>
 * </blockquote>
 * @param {A} request request object
 * @param {A} fetchHandler function to call for fetched items
 * @param {A} errorHandler function to call on error
 * @private
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype._fetchItems=function(request, fetchHandler, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {attribute-name-string} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.FlickrStore
*/
dojox.data.FlickrStore.prototype._assertIsAttribute=function(attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving RSS and Atom feeds from Google. The<br>
 *	 feeds can come from any source, which is specified in the &amp;quot;url&amp;quot;<br>
 *	 parameter of the query passed to the &amp;quot;fetch&amp;quot; function.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The feed entry title.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;link - The URL for the HTML version of the feed entry.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - The full content of the blog post, in HTML format&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;summary - A snippet of information about the feed entry, in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;published - The string date on which the entry was published.<br>
 *	 You can parse the date with new Date(store.getValue(item, &amp;quot;published&amp;quot;)&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;categories - An array of string tags for the entry&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: url - The URL of the feed to retrieve<br>
 * </blockquote>
 * @class
 * @returns {dojox.data.GoogleFeedStore} new instance
*/
dojox.data.GoogleFeedStore=function(){};
/**
 * @namespace
 * @private
*/
dojox.data.GoogleFeedStore._queryAttrs={};
/**
 * <b>Summary:</b><blockquote>
 *	 Non-API method for retrieving values regarding the Atom feed,<br>
 *	 rather than the Atom entries.<br>
 * </blockquote>
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.GoogleFeedStore
*/
dojox.data.GoogleFeedStore.prototype.getFeedValues=function(attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Non-API method for retrieving values regarding the Atom feed,<br>
 *	 rather than the Atom entries.<br>
 * </blockquote>
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.GoogleFeedStore
*/
dojox.data.GoogleFeedStore.prototype.getFeedValue=function(attribute, defaultValue){};
/**
 * @param {mixed} item 
 * @param {mixed} request 
 * @private
 * @memberOf dojox.data.GoogleFeedStore
*/
dojox.data.GoogleFeedStore.prototype._processItem=function(item, request){};
/**
 * @param {mixed} data 
 * @private
 * @memberOf dojox.data.GoogleFeedStore
*/
dojox.data.GoogleFeedStore.prototype._getItems=function(data){};
/**
 * @param {mixed} query 
 * @param {mixed} callback 
 * @param {mixed} request 
 * @private
 * @memberOf dojox.data.GoogleFeedStore
*/
dojox.data.GoogleFeedStore.prototype._createContent=function(query, callback, request){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 This data store acts as a base class for Google searches,<br>
 *	 and has a number of child data stores that implement different<br>
 *	 searches. This store defaults to searching the web, and is functionally<br>
 *	 identical to the dojox.data.GoogleWebSearchStore object.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the item&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;visibleUrl - The URL with no protocol specified.<br>
 *	 &amp;lt;li&amp;gt;cacheUrl - The URL to the copy of the document cached by Google<br>
 *	 &amp;lt;li&amp;gt;title - The page title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The page title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - A snippet of information about the page&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: text - The string to search for<br>
 * </blockquote>
 * The GoogleSearchStore is a Datastore interface to<br>
 * the Google search service. The constructor accepts the following arguments:<br>
 * &lt;ul&gt;<br>
 * &lt;li&gt;label - the label attribute to use. Defaults to titleNoFormatting&lt;/li&gt;<br>
 * &lt;li&gt;key - The API key to use. This is optional&lt;/li&gt;<br>
 * &lt;li&gt;lang - The language locale to use. Defaults to the browser locale&lt;/li&gt;<br>
 * &lt;/ul&gt;
 * @class
 * @param {Object} args 
 * @returns {dojox.data.GoogleSearchStore} new instance
*/
dojox.data.GoogleSearchStore=function(args){};
/**
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore._queryAttrs=null;
/**
 * @namespace
 * @private
*/
dojox.data.GoogleSearchStore._aggregatedAttributes={};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {mixed} keywordArgs 
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.isItemLoaded=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.isItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch Google search items that match to a query<br>
 * </blockquote>
 * @param {A} request request object
 * fetchHandler:<br>
 * A function to call for fetched items<br>
 * errorHandler:<br>
 * A function to call on error
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.fetch=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} value 
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {mixed} request 
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype.close=function(request){};
/**
 * @param {mixed} item 
 * @param {mixed} data 
 * @private
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype._processItem=function(item, data){};
/**
 * @private
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype._getSort=function(){};
/**
 * @param {mixed} data 
 * @private
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype._getItems=function(data){};
/**
 * @param {mixed} item 
 * @param {mixed} name 
 * @private
 * @returns {base implementation does not format any items} -
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype._format=function(item, name){};
/**
 * @param {mixed} query 
 * @param {mixed} callback 
 * @param {mixed} request 
 * @private
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype._createContent=function(query, callback, request){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {attribute-name-string} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.GoogleSearchStore
*/
dojox.data.GoogleSearchStore.prototype._assertIsAttribute=function(attribute){};
/**
 * @class
 * @returns {dojox.data.GoogleWebSearchStore} new instance
*/
dojox.data.GoogleWebSearchStore=function(){};
/**
 * @class
 * @returns {dojox.data.GoogleBlogSearchStore} new instance
*/
dojox.data.GoogleBlogSearchStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The blog post title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The  blog post title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - A snippet of information about the blog post&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the item&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;lat - The latitude.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;lng - The longtitude.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;streetAddress - The street address&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;city - The city&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;region - The region&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;country - The country&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;phoneNumbers - Phone numbers associated with this address. Can be one or more.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;ddUrl - A URL that can be used to provide driving directions from the center of the search results to this search results&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;ddUrlToHere - A URL that can be used to provide driving directions from this search result to a user specified location&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;staticMapUrl - The published date, in RFC-822 format&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;viewport - Recommended viewport for the query results (same for all results in a query)<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;center - contains lat, lng properties&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;span - lat, lng properties for the viewport span&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;ne, sw - lat, lng properties for the viewport corners&amp;lt;li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 &amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts the following parameters:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;text - The string to search for&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;centerLatLong - Comma-separated lat &amp;amp; long for the center of the search (e.g. &amp;quot;48.8565,2.3509&amp;quot;)&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;searchSpan - Comma-separated lat &amp;amp; long degrees indicating the size of the desired search area (e.g. &amp;quot;0.065165,0.194149&amp;quot;)&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 * </blockquote>
 * @class
 * @returns {dojox.data.GoogleLocalSearchStore} new instance
*/
dojox.data.GoogleLocalSearchStore=function(){};
/**
 * @namespace
 * @private
*/
dojox.data.GoogleLocalSearchStore._queryAttrs={};
/**
 * @namespace
 * @private
*/
dojox.data.GoogleLocalSearchStore._aggregatedAttributes={};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The blog post title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The  blog post title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - A snippet of information about the blog post&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the item&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;published - The published date, in RFC-822 format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;publisher - The name of the publisher.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;duration - The approximate duration, in seconds, of the video.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbWidth - The width in pixels of the video.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbHeight - The height in pixels of the video&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbUrl - The URL to a thumbnail representation of the video.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;playUrl - If present, supplies the url of the flash version of the video that can be played inline on your page. To play this video simply create and &amp;lt;embed&amp;gt; element on your page using this value as the src attribute and using application/x-shockwave-flash as the type attribute. If you want the video to play right away, make sure to append &amp;amp;autoPlay=true to the url..&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: text - The string to search for<br>
 * </blockquote>
 * @class
 * @returns {dojox.data.GoogleVideoSearchStore} new instance
*/
dojox.data.GoogleVideoSearchStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The news story title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The news story title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - A snippet of information about the news story&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the item&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;publisher - The name of the publisher&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;clusterUrl - A URL pointing to a page listing related storied.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;location - The location of the news story.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;publishedDate - The date of publication, in RFC-822 format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;relatedStories - An optional array of objects specifying related stories.<br>
 *	 Each object has the following subset of properties:<br>
 *	 &amp;quot;title&amp;quot;, &amp;quot;titleNoFormatting&amp;quot;, &amp;quot;url&amp;quot;, &amp;quot;unescapedUrl&amp;quot;, &amp;quot;publisher&amp;quot;, &amp;quot;location&amp;quot;, &amp;quot;publishedDate&amp;quot;.<br>
 *	 &amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: text - The string to search for<br>
 * </blockquote>
 * @class
 * @returns {dojox.data.GoogleNewsSearchStore} new instance
*/
dojox.data.GoogleNewsSearchStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The book title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The book title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;authors - An array of authors&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the item&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;unescapedUrl - The URL for the item, with URL escaping. This is often more readable&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;bookId - An identifier for the book, usually an ISBN.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;pageCount - The number of pages in the book.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;publishedYear - The year of publication.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: text - The string to search for<br>
 * </blockquote>
 * @class
 * @returns {dojox.data.GoogleBookSearchStore} new instance
*/
dojox.data.GoogleBookSearchStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for retrieving search results from Google.<br>
 *	 The following attributes are supported on each item:<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;title - The image title in HTML format.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;titleNoFormatting - The image title in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;url - The URL for the image&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;unescapedUrl - The URL for the image, with URL escaping. This is often more readable&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbUrl - The URL for the image thumbnail&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;visibleUrl - A shortened version of the URL associated with the result, stripped of a protocol and path&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;originalContextUrl - The URL of the page containing the image.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;width - The width of the image in pixels.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;height - The height of the image in pixels.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbWidth - The width of the image thumbnail in pixels.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;tbHeight - The height of the image thumbnail in pixels.&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;content - A snippet of information about the image, in HTML format&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;contentNoFormatting - A snippet of information about the image, in plain text&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 *	 The query accepts one parameter: text - The string to search for<br>
 * </blockquote>
 * @class
 * @returns {dojox.data.GoogleImageSearchStore} new instance
*/
dojox.data.GoogleImageSearchStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the HTML table store.<br>
 * </blockquote>
 * The HtmlStore can be created in one of two ways: a) by parsing an existing<br>
 * table or list DOM node on the current page or b) by referencing an external url and giving<br>
 * the id of the table or list in that page.  The remote url will be parsed as an html page.<br>
 * <br>
 * The HTML table or list should be of the following form:<br>
 * <br>
 * 	&lt;table id="myTable"&gt;<br>
 * 		&lt;thead&gt;<br>
 * 			&lt;tr&gt;<br>
 * 				&lt;th&gt;Attribute1&lt;/th&gt;<br>
 * 				&lt;th&gt;Attribute2&lt;/th&gt;<br>
 * 			&lt;/tr&gt;<br>
 * 		&lt;/thead&gt;<br>
 * 		&lt;tbody&gt;<br>
 * 			&lt;tr&gt;<br>
 * 				&lt;td&gt;Value1.1&lt;/td&gt;<br>
 * 				&lt;td&gt;Value1.2&lt;/td&gt;<br>
 * 			&lt;/tr&gt;<br>
 * 			&lt;tr&gt;<br>
 * 				&lt;td&gt;Value2.1&lt;/td&gt;<br>
 * 				&lt;td&gt;Value2.2&lt;/td&gt;<br>
 * 			&lt;/tr&gt;<br>
 * 		&lt;/tbody&gt;<br>
 * 	&lt;/table&gt;<br>
 * <br>
 * -or-<br>
 * <br>
 * 	&lt;ul id="myUnorderedList"&gt;<br>
 * 		&lt;li&gt;Value.1&lt;/li&gt;<br>
 * 		&lt;li&gt;Value.2&lt;/li&gt;<br>
 * 	&lt;/ul&gt;<br>
 * <br>
 * -or-<br>
 * <br>
 * 	&lt;ol id="myOrderedList"&gt;<br>
 * 		&lt;li&gt;Value.1&lt;/li&gt;<br>
 * 		&lt;li&gt;Value.2&lt;/li&gt;<br>
 * 	&lt;/ol&gt;
 * @class
 * @param {Object} args An anonymous object to initialize properties.  It expects the following values:
 * @returns {dojox.data.HtmlStore} new instance
*/
dojox.data.HtmlStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {anything} something 
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {anything} something 
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttribute()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValues()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @returns {Array} -
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {value} [defaultValue] 
 * @returns {Object||int|Boolean} -
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentityAttributes()<br>
 *	 Identity isn't taken from a public attribute.<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentity()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {Array} -
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity()<br>
 * </blockquote>
 * @param {mixed} keywordArgs 
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {anything} value 
 * @returns {boolean.} -
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 *	 nothing to do here!<br>
 * </blockquote>
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype.close=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to index items found under the id.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype._indexItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to load the attribute names from the table header so that the<br>
 *	 attributes (cells in a row), can have a reasonable name.<br>
 *	 For list items, returns single implicit heading, [&amp;quot;name&amp;quot;]<br>
 * </blockquote>
 * @private
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype._getHeadings=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to return all rows in the table as an array of items.<br>
 * </blockquote>
 * @private
 * @returns {array} -
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype._getAllItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for processing the passed in request and locating the requested items.<br>
 * </blockquote>
 * @param {mixed} request 
 * @param {mixed} fetchHandler 
 * @param {mixed} errorHandler 
 * @private
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype._finishFetchItems=function(request, fetchHandler, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch items (XML elements) that match to a query<br>
 * </blockquote>
 * If '_fetchUrl' is specified, it is used to load an XML document<br>
 * with a query string.<br>
 * Otherwise and if 'url' is specified, the XML document is<br>
 * loaded and list XML elements that match to a query (set of element<br>
 * names and their text attribute values that the items to contain).<br>
 * A wildcard, "*" can be used to query values to match all<br>
 * occurrences.<br>
 * If '_rootItem' is specified, it is used to fetch items.
 * @param {A} request request object
 * @param {A} fetchHandler function to call for fetched items
 * @param {A} errorHandler function to call on error
 * @private
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype._fetchItems=function(request, fetchHandler, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for looking at the values contained by the item.<br>
 * </blockquote>
 * Internal function for looking at the values contained by the item.  This<br>
 * function allows for denoting if the comparison should be case sensitive for<br>
 * strings or not (for handling filtering cases where string case should not matter)
 * @param {item} item The data item to examine for attribute values.
 * @param {attribute-name-string} attribute The attribute to inspect.
 * @param {anything} value The value to match.
 * @param {RegExp} [regexp] Optional regular expression generated off value if value was of string type to handle wildcarding.
 * If present and attribute values are string, then it can be used for comparison instead of 'value'
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype._containsValue=function(item, attribute, value, regexp){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {String} attribute The attribute to test for being contained by the store.
 * @private
 * 
 * @returns {int} -
 * @memberOf dojox.data.HtmlStore
*/
dojox.data.HtmlStore.prototype._assertIsAttribute=function(attribute){};
/**
 * @class
 * @param {Object} args 
 * @returns {dojox.data.HtmlTableStore} new instance
*/
dojox.data.HtmlTableStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {anything} something 
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {boolean} -
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttribute()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValues()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @returns {Array} -
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {value} [defaultValue] 
 * @returns {Object||int|Boolean} -
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentityAttributes()<br>
 *	 Identity isn't taken from a public attribute.<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentity()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {int} -
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {Array} -
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity()<br>
 * </blockquote>
 * @param {mixed} keywordArgs 
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {anything} value 
 * @returns {boolean.} -
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 *	 nothing to do here!<br>
 * </blockquote>
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype.close=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to load the attribute names from the table header so that the<br>
 *	 attributes (cells in a row), can have a reasonable name.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype._getHeadings=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to return all rows in the table as an array of items.<br>
 * </blockquote>
 * @private
 * @returns {array} -
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype._getAllItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for processing the passed in request and locating the requested items.<br>
 * </blockquote>
 * @param {mixed} request 
 * @param {mixed} fetchHandler 
 * @param {mixed} errorHandler 
 * @private
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype._finishFetchItems=function(request, fetchHandler, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch items (XML elements) that match to a query<br>
 * </blockquote>
 * If '_fetchUrl' is specified, it is used to load an XML document<br>
 * with a query string.<br>
 * Otherwise and if 'url' is specified, the XML document is<br>
 * loaded and list XML elements that match to a query (set of element<br>
 * names and their text attribute values that the items to contain).<br>
 * A wildcard, "*" can be used to query values to match all<br>
 * occurrences.<br>
 * If '_rootItem' is specified, it is used to fetch items.
 * @param {A} request request object
 * @param {A} fetchHandler function to call for fetched items
 * @param {A} errorHandler function to call on error
 * @private
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype._fetchItems=function(request, fetchHandler, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for looking at the values contained by the item.<br>
 * </blockquote>
 * Internal function for looking at the values contained by the item.  This<br>
 * function allows for denoting if the comparison should be case sensitive for<br>
 * strings or not (for handling filtering cases where string case should not matter)
 * @param {item} item The data item to examine for attribute values.
 * @param {attribute-name-string} attribute The attribute to inspect.
 * @param {anything} value The value to match.
 * @param {RegExp} [regexp] Optional regular expression generated off value if value was of string type to handle wildcarding.
 * If present and attribute values are string, then it can be used for comparison instead of 'value'
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype._containsValue=function(item, attribute, value, regexp){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {String} attribute The attribute to test for being contained by the store.
 * @private
 * 
 * @returns {int} -
 * @memberOf dojox.data.HtmlTableStore
*/
dojox.data.HtmlTableStore.prototype._assertIsAttribute=function(attribute){};
/**
 * @class
 * @extends dijit.Tree
 * @param {mixed} options 
 * @returns {dojox.data.ItemExplorer} new instance
*/
dojox.data.ItemExplorer=function(options){};
/**
 * @namespace
*/
dojox.data.ItemExplorer.rootModelNode={};
/**
 * @param {mixed} store 
 * @memberOf dojox.data.ItemExplorer
*/
dojox.data.ItemExplorer.prototype.setStore=function(store){};
/**
 * @param {mixed} item 
 * @memberOf dojox.data.ItemExplorer
*/
dojox.data.ItemExplorer.prototype.setItem=function(item){};
/**
 * @memberOf dojox.data.ItemExplorer
*/
dojox.data.ItemExplorer.prototype.refreshItem=function(){};
/**
 * @memberOf dojox.data.ItemExplorer
*/
dojox.data.ItemExplorer.prototype.postCreate=function(){};
/**
 * @param {mixed} vals 
 * @private
 * @memberOf dojox.data.ItemExplorer
*/
dojox.data.ItemExplorer.prototype._updateItem=function(vals){};
/**
 * @param {mixed} selection 
 * @private
 * @memberOf dojox.data.ItemExplorer
*/
dojox.data.ItemExplorer.prototype._enableFields=function(selection){};
/**
 * @private
 * @memberOf dojox.data.ItemExplorer
*/
dojox.data.ItemExplorer.prototype._editProperty=function(){};
/**
 * @private
 * @memberOf dojox.data.ItemExplorer
*/
dojox.data.ItemExplorer.prototype._destroyProperty=function(){};
/**
 * @private
 * @returns {isFocused||this.store.getItemByIdentity(this._editDialog.attr("value")._reference);} -
 * @memberOf dojox.data.ItemExplorer
*/
dojox.data.ItemExplorer.prototype._createEditDialog=function(){};
/**
 * @private
 * @memberOf dojox.data.ItemExplorer
*/
dojox.data.ItemExplorer.prototype._addProperty=function(){};
/**
 * @class
 * @extends dojox.data.JsonRestStore
 * @extends dojox.data.util.JsonQuery
 * @returns {dojox.data.JsonQueryRestStore} new instance
*/
dojox.data.JsonQueryRestStore=function(){};
/**
 * @param {mixed} item 
 * @param {mixed} request 
 * @memberOf dojox.data.JsonQueryRestStore
*/
dojox.data.JsonQueryRestStore.prototype.matchesQuery=function(item, request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Allow no trailing slash on target paths. This is generally discouraged since<br>
 *	 it creates prevents simple scalar values from being used a relative URLs.<br>
 *	 Disabled by default.<br>
 *	 <br>
 *	 <br>
 *	 Write API Support<br>
 *	 <br>
 *	 <br>
 *	 Notifcation Support<br>
 * </blockquote>
 * The JsonRestStore will cause all saved modifications to be sent to the server using Rest commands (PUT, POST, or DELETE).<br>
 * When using a Rest store on a public network, it is important to implement proper security measures to<br>
 * control access to resources.<br>
 * On the server side implementing a REST interface means providing GET, PUT, POST, and DELETE handlers.<br>
 * GET - Retrieve an object or array/result set, this can be by id (like /table/1) or with a<br>
 * query (like /table/?name=foo).<br>
 * PUT - This should modify a object, the URL will correspond to the id (like /table/1), and the body will<br>
 * provide the modified object<br>
 * POST - This should create a new object. The URL will correspond to the target store (like /table/)<br>
 * and the body should be the properties of the new object. The server's response should include a<br>
 * Location header that indicates the id of the newly created object. This id will be used for subsequent<br>
 * PUT and DELETE requests. JsonRestStore also includes a Content-Location header that indicates<br>
 * the temporary randomly generated id used by client, and this location is used for subsequent<br>
 * PUT/DELETEs if no Location header is provided by the server or if a modification is sent prior<br>
 * to receiving a response from the server.<br>
 * DELETE - This should delete an object by id.<br>
 * These articles include more detailed information on using the JsonRestStore:<br>
 * http://www.sitepen.com/blog/2008/06/13/restful-json-dojo-data/<br>
 * http://blog.medryx.org/2008/07/24/jsonreststore-overview/
 * @see reference <a href="http://www.sitepen.com/blog/2008/06/13/restful-json-dojo-data/">http://www.sitepen.com/blog/2008/06/13/restful-json-dojo-data/</a>
 * @class
 * @extends dojox.data.ServiceStore
 * @param {Keyword} options arguments
 * <br>
 * The *schema* parameter<br>
 * This is a schema object for this store. This should be JSON Schema format.<br>
 * <br>
 * The *service* parameter<br>
 * This is the service object that is used to retrieve lazy data and save results<br>
 * The function should be directly callable with a single parameter of an object id to be loaded<br>
 * The function should also have the following methods:<br>
 * put(id,value) - puts the value at the given id<br>
 * post(id,value) - posts (appends) the value at the given id<br>
 * delete(id) - deletes the value corresponding to the given id<br>
 * Note that it is critical that the service parses responses as JSON.<br>
 * If you are using dojox.rpc.Service, the easiest way to make sure this<br>
 * happens is to make the responses have a content type of<br>
 * application/json. If you are creating your own service, make sure you<br>
 * use handleAs: &quot;json&quot; with your XHR requests.<br>
 * <br>
 * The *target* parameter<br>
 * This is the target URL for this Service store. This may be used in place<br>
 * of a service parameter to connect directly to RESTful URL without<br>
 * using a dojox.rpc.Service object.<br>
 * <br>
 * The *idAttribute* parameter<br>
 * Defaults to 'id'. The name of the attribute that holds an objects id.<br>
 * This can be a preexisting id provided by the server.<br>
 * If an ID isn't already provided when an object<br>
 * is fetched or added to the store, the autoIdentity system<br>
 * will generate an id for it and add it to the index.<br>
 * <br>
 * The *syncMode* parameter<br>
 * Setting this to true will set the store to using synchronous calls by default.<br>
 * Sync calls return their data immediately from the calling function, so<br>
 * callbacks are unnecessary
 * @returns {dojox.data.JsonRestStore} new instance
 * @example
 * A JsonRestStore takes a REST service or a URL and uses it the remote communication for a
 * read/write dojo.data implementation. A JsonRestStore can be created with a simple URL like:
 * 	new JsonRestStore({target:"/MyData/"});
 * @example
 * To use a JsonRestStore with a service, you should create a
 * service with a REST transport. This can be configured with an SMD:
 * 	{
 * 		services: {
 * 			jsonRestStore: {
 * 				transport: "REST",
 * 				envelope: "URL",
 * 				target: "store.php",
 * 				contentType:"application/json",
 * 				parameters: [
 * 					{name: "location", type: "string", optional: true}
 * 				]
 * 			}
 * 		}
 * 	}
 * The SMD can then be used to create service, and the service can be passed to a JsonRestStore. For example:
 * 	var myServices = new dojox.rpc.Service(dojo.moduleUrl("dojox.rpc.tests.resources", "test.smd"));
 * 	var jsonStore = new dojox.data.JsonRestStore({service:myServices.jsonRestStore});
 * @example
 * The JsonRestStore also supports lazy loading. References can be made to objects that have not been loaded.
 * For example if a service returned:
 * 	{"name":"Example","lazyLoadedObject":{"$ref":"obj2"}}
 * And this object has accessed using the dojo.data API:
 * 	var obj = jsonStore.getValue(myObject,"lazyLoadedObject");
 * The object would automatically be requested from the server (with an object id of "obj2").
*/
dojox.data.JsonRestStore=function(options){};
/**
 * @namespace
*/
dojox.data.JsonRestStore.service={};
/**
 * @namespace
*/
dojox.data.JsonRestStore.schema={};
/**
 * <b>Summary:</b><blockquote>
 *	 unsets 'attribute' on 'item'<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.unsetAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets 'attribute' on 'item' to 'value' value<br>
 *	 must be an array.<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} values 
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.setValues=function(item, attribute, values){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets 'attribute' on 'item' to 'value'<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} value 
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.setValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Saves the dirty data using REST Ajax methods. See dojo.data.api.Write for API.<br>
 *	 <br>
 *	 kwArgs.global:<br>
 *	 This will cause the save to commit the dirty data for all<br>
 *	 JsonRestStores as a single transaction.<br>
 *	 <br>
 *	 kwArgs.revertOnError<br>
 *	 This will cause the changes to be reverted if there is an<br>
 *	 error on the save. By default a revert is executed unless<br>
 *	 a value of false is provide for this parameter.<br>
 *	 <br>
 *	 kwArgs.incrementalUpdates<br>
 *	 For items that have been updated, if this is enabled, the server will be sent a POST request<br>
 *	 with a JSON object containing the changed properties. By default this is<br>
 *	 not enabled, and a PUT is used to deliver an update, and will include a full<br>
 *	 serialization of all the properties of the item/object.<br>
 *	 If this is true, the POST request body will consist of a JSON object with<br>
 *	 only the changed properties. The incrementalUpdates parameter may also<br>
 *	 be a function, in which case it will be called with the updated and previous objects<br>
 *	 and an object update representation can be returned.<br>
 *	 <br>
 *	 kwArgs.alwaysPostNewItems<br>
 *	 If this is true, new items will always be sent with a POST request. By default<br>
 *	 this is not enabled, and the JsonRestStore will send a POST request if<br>
 *	 the item does not include its identifier (expecting server assigned location/<br>
 *	 identifier), and will send a PUT request if the item does include its identifier<br>
 *	 (the PUT will be sent to the URI corresponding to the provided identifier).<br>
 * </blockquote>
 * @param {mixed} kwArgs 
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.save=function(kwArgs){};
/**
 * @param {mixed} kwArgs 
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.revert=function(kwArgs){};
/**
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.onSet=function(){};
/**
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.onNew=function(){};
/**
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.onDelete=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds a new item to the store at the specified point.<br>
 *	 Takes two parameters, data, and options.<br>
 * </blockquote>
 * @param {object} data The data to be added in as an item.
 * @param {mixed} parentInfo 
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.newItem=function(data, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks to see if a passed 'item'<br>
 *	 really belongs to this JsonRestStore.<br>
 * </blockquote>
 * @param {object} item The value to test for being an item
 * @param {boolean} anyStore If true, this will return true if the value is an item for any JsonRestStore,
 * not just this instance
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.isItem=function(item, anyStore){};
/**
 * @param {mixed} item 
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.isDirty=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the parent item (or query) for the given item<br>
 * </blockquote>
 * @param {The} item item to find the parent of
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.getParent=function(item){};
/**
 * @param {mixed} item 
 * @returns {String} -
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 return the store feature set<br>
 * </blockquote>
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the constructor for objects from this store<br>
 * </blockquote>
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.getConstructor=function(){};
/**
 * @param {mixed} args 
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.fetchItemByIdentity=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 deletes item and any references to that item from the store.<br>
 * </blockquote>
 * @param {item} item to delete
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.deleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds an item to the list of dirty items.	This item<br>
 *	 contains a reference to the item itself as well as a<br>
 *	 cloned and trimmed version of old item for use with<br>
 *	 revert.<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} _deleting 
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.changing=function(item, _deleting){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes an object from the list of dirty objects<br>
 *	 This will prevent that object from being saved to the server on the next save<br>
 * </blockquote>
 * @param {The} object item to cancel changes on
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype.cancelChanging=function(object){};
/**
 * @param {mixed} results 
 * @param {mixed} deferred 
 * @private
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype._processResults=function(results, deferred){};
/**
 * @param {mixed} args 
 * @private
 * @returns {don't change anything, and deal with the stupid post-commit lint complaints} -
 * @memberOf dojox.data.JsonRestStore
*/
dojox.data.JsonRestStore.prototype._doQuery=function(args){};
/**
 * @param {mixed} data 
 * @private
*/
dojox.data.JsonRestStore._constructor=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 ServiceStore constructor, instantiate a new ServiceStore<br>
 *	 A ServiceStore can be configured from a JSON Schema. Queries are just<br>
 *	 passed through to the underlying services<br>
 * </blockquote>
 * ServiceStore can do client side caching and result set updating if<br>
 * dojox.data.ClientFilter is loaded. Do this add:<br>
 * 	dojo.require("dojox.data.ClientFilter")<br>
 * prior to loading the ServiceStore (ClientFilter must be loaded before ServiceStore).<br>
 * To utilize client side filtering with a subclass, you can break queries into<br>
 * client side and server side components by putting client side actions in<br>
 * clientFilter property in fetch calls. For example you could override fetch:<br>
 * 	fetch: function(args){<br>
 * 		// do the sorting and paging on the client side<br>
 * 		args.clientFilter = {start:args.start, count: args.count, sort: args.sort};<br>
 * 		// args.query will be passed to the service object for the server side handling<br>
 * 		return this.inherited(arguments);<br>
 * 	}<br>
 * When extending this class, if you would like to create lazy objects, you can follow<br>
 * the example from dojox.data.tests.stores.ServiceStore:<br>
 * 	var lazyItem = {<br>
 * 		_loadObject: function(callback){<br>
 * 			this.name="loaded";<br>
 * 			delete this._loadObject;<br>
 * 			callback(this);<br>
 * 		}<br>
 * 	};<br>
 * setup a byId alias to the api call
 * @class
 * @param {Keyword} options arguments
 * The *schema* parameter<br>
 * This is a schema object for this store. This should be JSON Schema format.<br>
 * <br>
 * The *service* parameter<br>
 * This is the service object that is used to retrieve lazy data and save results<br>
 * The function should be directly callable with a single parameter of an object id to be loaded<br>
 * <br>
 * The *idAttribute* parameter<br>
 * Defaults to 'id'. The name of the attribute that holds an objects id.<br>
 * This can be a preexisting id provided by the server.<br>
 * If an ID isn't already provided when an object<br>
 * is fetched or added to the store, the autoIdentity system<br>
 * will generate an id for it and add it to the index.<br>
 * <br>
 * The *estimateCountFactor* parameter<br>
 * This parameter is used by the ServiceStore to estimate the total count. When<br>
 * paging is indicated in a fetch and the response includes the full number of items<br>
 * requested by the fetch's count parameter, then the total count will be estimated<br>
 * to be estimateCountFactor multiplied by the provided count. If this is 1, then it is assumed that the server<br>
 * does not support paging, and the response is the full set of items, where the<br>
 * total count is equal to the numer of items returned. If the server does support<br>
 * paging, an estimateCountFactor of 2 is a good value for estimating the total count<br>
 * It is also possible to override _processResults if the server can provide an exact<br>
 * total count.<br>
 * <br>
 * The *syncMode* parameter<br>
 * Setting this to true will set the store to using synchronous calls by default.<br>
 * Sync calls return their data immediately from the calling function, so<br>
 * callbacks are unnecessary. This will only work with a synchronous capable service.
 * @returns {dojox.data.ServiceStore} new instance
*/
dojox.data.ServiceStore=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads an item and calls the callback handler. Note, that this will call the callback<br>
 *	 handler even if the item is loaded. Consequently, you can use loadItem to ensure<br>
 *	 that an item is loaded is situations when the item may or may not be loaded yet.<br>
 *	 If you access a value directly through property access, you can use this to load<br>
 *	 a lazy value as well (doesn't need to be an item).<br>
 * </blockquote>
 * @param {mixed} args 
 * @example
 * store.loadItem({
 * item: item, // this item may or may not be loaded
 * onItem: function(item){
 * // do something with the item
 * }
 * });
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.loadItem=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks to see if the item is loaded.<br>
 * </blockquote>
 * @param {object} item 
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.isItemLoaded=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks to see if the argument is an item<br>
 * </blockquote>
 * @param {object} item attribute: /// string
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.isItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks to see if item has attribute<br>
 * </blockquote>
 * @param {object} item 
 * @param {string} attribute 
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the value of an item's 'property' and returns<br>
 *	 it.	If this value is an array it is just returned,<br>
 *	 if not, the value is added to an array and that is returned.<br>
 * </blockquote>
 * @param {object} item 
 * @param {string} property property to look up value for
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.getValues=function(item, property){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the value of an item's 'property'<br>
 * </blockquote>
 * @param {Object} item The item to get the value from
 * @param {String} property property to look up value for
 * @param {value} [defaultValue] the default value
 * @returns {return the plain value since it was found;} -
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.getValue=function(item, property, defaultValue){};
/**
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.getSchema=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an array of attributes that are used to create the label of an item<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.getLabelAttributes=function(item){};
/**
 * @param {mixed} item 
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the attributes which are used to make up the<br>
 *	 identity of an item.	Basically returns this.idAttribute<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.getIdentityAttributes=function(item){};
/**
 * @param {mixed} item 
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 return the store feature set<br>
 * </blockquote>
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the available attributes of an item's 'property' and returns<br>
 *	 it as an array.<br>
 * </blockquote>
 * @param {object} item 
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 fetch an item by its identity, by looking in our index of what we have loaded<br>
 * </blockquote>
 * @param {mixed} args 
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.fetchItemByIdentity=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.fetch<br>
 *	 <br>
 *	 The *queryOptions.cache* parameter<br>
 *	 If true, indicates that the query result should be cached for future use. This is only available<br>
 *	 if dojox.data.ClientFilter has been loaded before the ServiceStore<br>
 *	 <br>
 *	 The *syncMode* parameter<br>
 *	 Indicates that the call should be fetch synchronously if possible (this is not always possible)<br>
 *	 <br>
 *	 The *clientFetch* parameter<br>
 *	 This is a fetch keyword argument for explicitly doing client side filtering, querying, and paging<br>
 * </blockquote>
 * @param {mixed} args 
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.fetch=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks to see if 'item' has 'value' at 'attribute'<br>
 * </blockquote>
 * @param {object} item 
 * @param {string} attribute 
 * @param {anything} value 
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.containsValue=function(item, attribute, value){};
/**
 * @param {mixed} request 
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype.close=function(request){};
/**
 * @param {mixed} results 
 * @param {mixed} deferred 
 * @private
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype._processResults=function(results, deferred){};
/**
 * @param {mixed} args 
 * @private
 * @memberOf dojox.data.ServiceStore
*/
dojox.data.ServiceStore.prototype._doQuery=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a dojo.data store implementation.  It can take in either a Javascript<br>
 *	 array, JSON string, or URL as the data source.  Data is expected to be in the<br>
 *	 following format:<br>
 *	 [<br>
 *	 { &amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot; },<br>
 *	 { &amp;quot;key2&amp;quot;: &amp;quot;value2&amp;quot; }<br>
 *	 ]<br>
 *	 This is to mimic the Java Properties file format.  Each 'item' from this store<br>
 *	 is a JS object representing a key-value pair.  If an item in the above array has<br>
 *	 more than one key/value pair, only the first will be used/accessed.<br>
 * </blockquote>
 * @class
 * @param {Object} keywordParameters dataVar: jsonObject}
 * @returns {dojox.data.KeyValueStore} new instance
*/
dojox.data.KeyValueStore=function(keywordParameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * The KeyValueStore always loads all items, so if it's an item, then it's loaded.<br>
 * From the dojo.data.api.Read.loadItem docs:<br>
 * If a call to isItemLoaded() returns true before loadItem() is even called,<br>
 * then loadItem() need not do any work at all and will not even invoke<br>
 * the callback handlers.
 * @param {object} keywordArgs 
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 *	 The KeyValueStore always loads all items, so if it's an item, then it's loaded.<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {Boolean} -
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {Boolean} -
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttribute()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValues()<br>
 *	 Key/Value syntax does not support multi-valued attributes, so this is just a<br>
 *	 wrapper function for getValue().<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @returns {Array} -
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {value} [defaultValue] 
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentifierAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentity()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {String|null} -
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity()<br>
 * </blockquote>
 * @param {object} keywordArgs 
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {anything} value 
 * @returns {boolean.} -
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype.close=function(request){};
/**
 * @param {Array} data 
 * @private
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype._processData=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to execute delayed request in the store.<br>
 *	 Execute any deferred fetches now.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype._handleQueuedFetches=function(){};
/**
 * @param {Array} items 
 * @param {object} request 
 * @private
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype._finishFetchItemByIdentity=function(items, request){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.util.simpleFetch.fetch()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @param {Function} findCallback 
 * @param {Function} errorCallback 
 * @private
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype._fetchItems=function(keywordArgs, findCallback, errorCallback){};
/**
 * @param {Object} something 
 * @private
 * @returns {Object} -
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype._createItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for looking at the values contained by the item.<br>
 * </blockquote>
 * Internal function for looking at the values contained by the item.  This<br>
 * function allows for denoting if the comparison should be case sensitive for<br>
 * strings or not (for handling filtering cases where string case should not matter)
 * @param {item} item The data item to examine for attribute values.
 * @param {attribute} attribute The attribute to inspect.
 * @param {anything} value The value to match.
 * @param {RegExp} [regexp] Optional regular expression generated off value if value was of string type to handle wildcarding.
 * If present and attribute values are string, then it can be used for comparison instead of 'value'
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype._containsValue=function(item, attribute, value, regexp){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {item} item 
 * @param {String} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.KeyValueStore
*/
dojox.data.KeyValueStore.prototype._assertIsAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the OpenSearchStore store.<br>
 * </blockquote>
 * The OpenSearchStore is a Datastore interface to any search<br>
 * engine that implements the open search specifications.
 * @class
 * @param {Object} args 
 * @returns {dojox.data.OpenSearchStore} new instance
*/
dojox.data.OpenSearchStore=function(args){};
/**
 * @namespace
*/
dojox.data.OpenSearchStore.urlElement={};
/**
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.processItem=function(item, attribute){};
/**
 * @param {mixed} data 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.process=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {mixed} keywordArgs 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.isItemLoaded=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.isItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} value 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {mixed} request 
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype.close=function(request){};
/**
 * @param {mixed} doc 
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._processOsdd=function(doc){};
/**
 * @param {mixed} data 
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._processOSDxml=function(data){};
/**
 * @param {mixed} data 
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._processOSDrss=function(data){};
/**
 * @param {mixed} data 
 * @param {mixed} type 
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._processOSDfeed=function(data, type){};
/**
 * @param {mixed} data 
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._processOSDatom=function(data){};
/**
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._processItemxml=function(item, attribute){};
/**
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._processItemrss=function(item, attribute){};
/**
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} type 
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._processItemfeed=function(item, attribute, type){};
/**
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._processItematom=function(item, attribute){};
/**
 * @param {mixed} node 
 * @param {mixed} skipFirst 
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._getNodeXml=function(node, skipFirst){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch OpenSearch items that match to a query<br>
 * </blockquote>
 * @param {A} request request object
 * @param {A} fetchHandler function to call for fetched items
 * @param {A} errorHandler function to call on error
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._fetchItems=function(request, fetchHandler, errorHandler){};
/**
 * @param {mixed} request 
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._createSearchUrl=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {attribute-name-string} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.OpenSearchStore
*/
dojox.data.OpenSearchStore.prototype._assertIsAttribute=function(attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 *   The OpmlStore implements the dojo.data.api.Read API.<br>
 * </blockquote>
 * @class
 * @param {Object} keywordParameters url: String, label: String}  Where label is optional and configures what should be used as the return from getLabel()
 * @returns {dojox.data.OpmlStore} new instance
*/
dojox.data.OpmlStore=function(keywordParameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * The OpmlStore always loads all items, so if it's an item, then it's loaded.<br>
 * From the dojo.data.api.Read.loadItem docs:<br>
 * If a call to isItemLoaded() returns true before loadItem() is even called,<br>
 * then loadItem() need not do any work at all and will not even invoke the callback handlers.
 * @param {item} item 
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.loadItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 *	 OpmlStore loads every item, so if it's an item, then it's loaded.<br>
 * </blockquote>
 * @param {anything} something 
 * @returns {Boolean} -
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * Four things are verified to ensure that "something" is an item:<br>
 * something can not be null, the nodeType must be an XML Element,<br>
 * the tagName must be "outline", and the node must be a member of<br>
 * XML document for this datastore.
 * @param {anything} something 
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttribute()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute} attribute || attribute-name-string
 * @returns {Boolean} -
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValues()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute} attribute || attribute-name-string
 * @returns {Array} -
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute} attribute || attribute-name-string
 * @param {value} [defaultValue] 
 * @returns {Object} -
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {array} -
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {String|undefined} -
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentifierAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentity()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {null} -
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {Array} -
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute} attribute || attribute-name-string
 * @param {anything} value 
 * @returns {boolean.} -
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype.close=function(request){};
/**
 * @param {node} node 
 * @param {boolean} recursive 
 * @private
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype._removeChildNodesThatAreNotElementNodes=function(node, recursive){};
/**
 * @param {xmlDoc} rawXmlTree 
 * @private
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype._processRawXmlTree=function(rawXmlTree){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to execute delayed request in the store.<br>
 *	 Execute any deferred fetches now.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype._handleQueuedFetches=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to determine which list of items to search over.<br>
 * </blockquote>
 * @param {object} [queryOptions] The query options parameter, if any.
 * @private
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype._getItemsArray=function(queryOptions){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.util.simpleFetch.fetch()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @param {Function} findCallback 
 * @param {Function} errorCallback 
 * @private
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype._fetchItems=function(keywordArgs, findCallback, errorCallback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for looking at the values contained by the item.<br>
 * </blockquote>
 * Internal function for looking at the values contained by the item.  This<br>
 * function allows for denoting if the comparison should be case sensitive for<br>
 * strings or not (for handling filtering cases where string case should not matter)
 * @param {item} item The data item to examine for attribute values.
 * @param {attribute} attribute The attribute to inspect.
 * @param {anything} value The value to match.
 * @param {RegExp} [regexp] Optional regular expression generated off value if value was of string type to handle wildcarding.
 * If present and attribute values are string, then it can be used for comparison instead of 'value'
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype._containsValue=function(item, attribute, value, regexp){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to recurse over all child nodes from the store and add them<br>
 *	 As non-toplevel items<br>
 * </blockquote>
 * Internal function to recurse over all child nodes from the store and add them<br>
 * As non-toplevel items
 * @param {Node} node The child node to walk.
 * @private
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype._checkChildNodes=function(node){};
/**
 * @param {item} item 
 * @private
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {item} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.OpmlStore
*/
dojox.data.OpmlStore.prototype._assertIsAttribute=function(attribute){};
/**
 * @class
 * @extends dojox.data.JsonQueryRestStore
 * @returns {dojox.data.PersevereStore} new instance
*/
dojox.data.PersevereStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates Dojo data stores for all the table/classes on a Persevere server<br>
 * </blockquote>
 * @param {String} [path] URL of the Persevere server's root, this normally just &quot;/&quot;
 * which is the default value if the target is not provided
 * @param {Boolean} [sync] Indicates that the operation should happen synchronously.
 * return:<br>
 * A map/object of datastores will be returned if it is performed asynchronously,<br>
 * otherwise it will return a Deferred object that will provide the map/object.<br>
 * The name of each property is a the name of a store,<br>
 * and the value is the actual data store object.<br>
*/
dojox.data.PersevereStore.getStores=function(path, sync){};
/**
 * <b>Summary:</b><blockquote>
 *	 Invokes the XHR proxy plugin. Call this if you will be using x-site data.<br>
 * </blockquote>
*/
dojox.data.PersevereStore.addProxy=function(){};
/**
 * @namespace
*/
dojox.json.ref={};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a JSON serialization of an object.<br>
 *	 This has support for referencing, including circular references, duplicate references, and out-of-message references<br>
 *	 id and path-based referencing is supported as well and is based on http://www.json.com/2007/10/19/json-referencing-proposal-and-library/.<br>
 * </blockquote>
 * @see reference <a href="http://www.json.com/2007/10/19/json-referencing-proposal-and-library/.">http://www.json.com/2007/10/19/json-referencing-proposal-and-library/.</a>
 * @param {Object} it an object to be serialized.
 * @param {Boolean} [prettyPrint] if true, we indent objects and arrays to make the output prettier.
 * The variable dojo.toJsonIndentStr is used as the indent string<br>
 * -- to use something other than the default (tab),<br>
 * change that variable before calling dojo.toJson().
 * @param {Object} [idPrefix] The prefix that has been used for the absolute ids
 * <br>
 * return:<br>
 * a String representing the serialized version of the passed object.
 * @param {Object} [indexSubObjects] 
 * @returns {use the default serializer for primitives} -
*/
dojox.json.ref.toJson=function(it, prettyPrint, idPrefix, indexSubObjects){};
/**
 * <b>Summary:</b><blockquote>
 *	 Indexes and resolves references in the JSON object.<br>
 * </blockquote>
 * A JSON Schema object that can be used to advise the handling of the JSON (defining ids, date properties, urls, etc)
 * @param {Object} root The root object of the object graph to be processed
 * @param {Object} [args] with additional arguments:
 * <br>
 * The *index* parameter.<br>
 * This is the index object (map) to use to store an index of all the objects.<br>
 * If you are using inter-message referencing, you must provide the same object for each call.<br>
 * The *defaultId* parameter.<br>
 * This is the default id to use for the root object (if it doesn't define it's own id)<br>
 * The *idPrefix* parameter.<br>
 * This the prefix to use for the ids as they enter the index. This allows multiple tables<br>
 * to use ids (that might otherwise collide) that enter the same global index.<br>
 * idPrefix should be in the form &quot;/Service/&quot;.  For example,<br>
 * if the idPrefix is &quot;/Table/&quot;, and object is encountered {id:&quot;4&quot;,...}, this would go in the<br>
 * index as &quot;/Table/4&quot;.<br>
 * The *idAttribute* parameter.<br>
 * This indicates what property is the identity property. This defaults to &quot;id&quot;<br>
 * The *assignAbsoluteIds* parameter.<br>
 * This indicates that the resolveJson should assign absolute ids (__id) as the objects are being parsed.<br>
 * <br>
 * The *schemas* parameter<br>
 * This provides a map of schemas, from which prototypes can be retrieved<br>
 * The *loader* parameter<br>
 * This is a function that is called added to the reference objects that can't be resolved (lazy objects)<br>
 * return:<br>
 * An object, the result of the processing<br>
*/
dojox.json.ref.resolveJson=function(root, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 evaluates the passed string-form of a JSON object.<br>
 * </blockquote>
 * @param {String} str a string literal of a JSON item, for instance:
 * '{ &quot;foo&quot;: [ &quot;bar&quot;, 1, { &quot;baz&quot;: &quot;thud&quot; } ] }'
 * @param {Object} [args] See resolveJson
 * <br>
 * return:<br>
 * An object, the result of the evaluation<br>
*/
dojox.json.ref.fromJson=function(str, args){};
/**
 * @param {mixed} id 
 * @param {mixed} prop 
 * @private
*/
dojox.json.ref._addProp=function(id, prop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the PicasaStore store.<br>
 * </blockquote>
 * The PicasaStore is a Datastore interface to one of the basic services<br>
 * of the Picasa service, the public photo feed.  This does not provide<br>
 * access to all the services of Picasa.<br>
 * This store cannot do * and ? filtering as the picasa service<br>
 * provides no interface for wildcards.
 * @class
 * @param {Object} args 
 * @returns {dojox.data.PicasaStore} new instance
*/
dojox.data.PicasaStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {mixed} keywordArgs 
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.isItemLoaded=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.isItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} value 
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {mixed} request 
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype.close=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Utility function to un-escape XML special characters in an HTML string.<br>
 * </blockquote>
 * Utility function to un-escape XML special characters in an HTML string.
 * @param {String.} str The string to un-escape
 * @private
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype._unescapeHtml=function(str){};
/**
 * @param {mixed} data 
 * @private
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype._processPicasaData=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch picasa items that match to a query<br>
 * </blockquote>
 * @param {A} request request object
 * @param {A} fetchHandler function to call for fetched items
 * @param {A} errorHandler function to call on error
 * @private
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype._fetchItems=function(request, fetchHandler, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {attribute-name-string} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.PicasaStore
*/
dojox.data.PicasaStore.prototype._assertIsAttribute=function(attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 By default all the sorting is done serverside before the data is returned<br>
 *	 which is the proper place to be doing it for really large datasets.<br>
 * </blockquote>
 * @class
 * @param {Object} params 
 * @returns {dojox.data.QueryReadStore} new instance
 * @example
 * 	// The parameter "query" contains the data that are sent to the server.
 * 	var store = new dojox.data.QueryReadStore({url:'/search.php'});
 * 	store.fetch({query:{name:'a'}, queryOptions:{ignoreCase:false}});
 * 
 * 	// Since "serverQuery" is given, it overrules and those data are
 * 	// sent to the server.
 * 	var store = new dojox.data.QueryReadStore({url:'/search.php'});
 * 	store.fetch({serverQuery:{name:'a'}, queryOptions:{ignoreCase:false}});
 * 
 * 	&lt;div dojoType="dojox.data.QueryReadStore"
 * 		jsId="store2"
 * 		url="../tests/stores/QueryReadStore.php"
 * 		requestMethod="post"&gt;&lt;/div&gt;
 * 	&lt;div dojoType="dojox.grid.data.DojoData"
 * 		jsId="model2"
 * 		store="store2"
 * 		sortFields="[{attribute: 'name', descending: true}]"
 * 		rowsPerPage="30"&gt;&lt;/div&gt;
 * 	&lt;div dojoType="dojox.Grid" id="grid2"
 * 		model="model2"
 * 		structure="gridLayout"
 * 		style="height:300px; width:800px;"&gt;&lt;/div&gt;
*/
dojox.data.QueryReadStore=function(params){};
/**
 * @param {object} args 
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.loadItem=function(args){};
/**
 * @param {anything} something 
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.isItemLoaded=function(something){};
/**
 * @param {anything} something 
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttribute()<br>
 * </blockquote>
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.hasAttribute=function(item, attribute){};
/**
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.getValues=function(item, attribute){};
/**
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {value} [defaultValue] 
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {array|null} -
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {String|undefined} -
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentityAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.getIdentity()<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.getIdentity=function(item){};
/**
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.getFeatures=function(){};
/**
 * @param {item} item 
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity()<br>
 * </blockquote>
 * @param {Object} keywordArgs 
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.util.simpleFetch.fetch() this is just a copy and I adjusted<br>
 *	 only the paging, since it happens on the server if doClientPaging is<br>
 *	 false, thx to http://trac.dojotoolkit.org/ticket/4761 reporting this.<br>
 *	 Would be nice to be able to use simpleFetch() to reduce copied code,<br>
 *	 but i dont know how yet. Ideas please!<br>
 * </blockquote>
 * @see reference <a href="http://trac.dojotoolkit.org/ticket/4761">http://trac.dojotoolkit.org/ticket/4761</a>
 * @param {Object} [request] 
 * @returns {Object} -
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.fetch=function(request){};
/**
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {anything} value 
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.containsValue=function(item, attribute, value){};
/**
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype.close=function(request){};
/**
 * @param {mixed} data 
 * @param {mixed} request 
 * @param {mixed} fetchHandler 
 * @param {mixed} errorHandler 
 * @private
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype._xhrFetchHandler=function(data, request, fetchHandler, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 If the data from servers needs to be processed before it can be processed by this<br>
 *	 store, then this function should be re-implemented in subclass. This default<br>
 *	 implementation just return the data unchanged.<br>
 * </blockquote>
 * @param {The} data data received from server
 * @private
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype._filterResponse=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 The request contains the data as defined in the Read-API.<br>
 *	 Additionally there is following keyword &amp;quot;serverQuery&amp;quot;.<br>
 *	 <br>
 *	 The *serverQuery* parameter, optional.<br>
 *	 This parameter contains the data that will be sent to the server.<br>
 *	 If this parameter is not given the parameter &amp;quot;query&amp;quot;'s<br>
 *	 data are sent to the server. This is done for some reasons:<br>
 *	 - to specify explicitly which data are sent to the server, they<br>
 *	 might also be a mix of what is contained in &amp;quot;query&amp;quot;, &amp;quot;queryOptions&amp;quot;<br>
 *	 and the paging parameters &amp;quot;start&amp;quot; and &amp;quot;count&amp;quot; or may be even<br>
 *	 completely different things.<br>
 *	 - don't modify the request.query data, so the interface using this<br>
 *	 store can rely on unmodified data, as the combobox dijit currently<br>
 *	 does it, it compares if the query has changed<br>
 *	 - request.query is required by the Read-API<br>
 *	 <br>
 *	 I.e. the following examples might be sent via GET:<br>
 *	 fetch({query:{name:&amp;quot;abc&amp;quot;}, queryOptions:{ignoreCase:true}})<br>
 *	 the URL will become:   /url.php?name=abc<br>
 *	 <br>
 *	 fetch({serverQuery:{q:&amp;quot;abc&amp;quot;, c:true}, query:{name:&amp;quot;abc&amp;quot;}, queryOptions:{ignoreCase:true}})<br>
 *	 the URL will become:   /url.php?q=abc&amp;amp;c=true<br>
 *	 // The serverQuery-parameter has overruled the query-parameter<br>
 *	 // but the query parameter stays untouched, but is not sent to the server!<br>
 *	 // The serverQuery contains more data than the query, so they might differ!<br>
 * </blockquote>
 * @param {mixed} request 
 * @param {mixed} fetchHandler 
 * @param {mixed} errorHandler 
 * @private
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype._fetchItems=function(request, fetchHandler, errorHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 It throws an error if item is not valid, so you can call it in every method that needs to<br>
 *	 throw an error when item is invalid.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {attribute-name-string} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.QueryReadStore
*/
dojox.data.QueryReadStore.prototype._assertIsAttribute=function(attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 RailsStore is a data store for interacting with RESTful Rails controllers<br>
 * </blockquote>
 * @class
 * @extends dojox.data.JsonRestStore
 * @returns {dojox.data.RailsStore} new instance
*/
dojox.data.RailsStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 RailsStore is a data store for interacting with RESTful Rails controllers<br>
 * </blockquote>
 * @param {mixed} options 
 * @memberOf dojox.data.RailsStore
*/
dojox.data.RailsStore.prototype.preamble=function(options){};
/**
 * @param {mixed} args 
 * @memberOf dojox.data.RailsStore
*/
dojox.data.RailsStore.prototype.fetch=function(args){};
/**
 * @param {mixed} results 
 * @param {mixed} deferred 
 * @private
 * @memberOf dojox.data.RailsStore
*/
dojox.data.RailsStore.prototype._processResults=function(results, deferred){};
/**
 * @param {mixed} parameters 
 * @param {mixed} args 
*/
dojox.rpc.toOrdered=function(parameters, args){};
/**
 * @param {mixed} smd 
 * @param {mixed} method 
*/
dojox.rpc.getTarget=function(smd, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use<br>
 *	 as a definition for the service<br>
 * </blockquote>
 * dojox.rpc.Service must be loaded prior to any plugin services like dojox.rpc.Rest<br>
 * dojox.rpc.JsonRpc in order for them to register themselves, otherwise you get<br>
 * a "No match found" error.
 * @param {object} smd Takes a number of properties as kwArgs for defining the service.  It also
 * accepts a string.  When passed a string, it is treated as a url from<br>
 * which it should synchronously retrieve an smd file.  Otherwise it is a kwArgs<br>
 * object.  It accepts serviceUrl, to manually define a url for the rpc service<br>
 * allowing the rpc system to be used without an smd definition. strictArgChecks<br>
 * forces the system to verify that the # of arguments provided in a call<br>
 * matches those defined in the smd.  smdString allows a developer to pass<br>
 * a jsonString directly, which will be converted into an object or alternatively<br>
 * smdObject is accepts an smdObject directly.
 * @param {mixed} options 
*/
dojox.rpc.Service=function(smd, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a REST service using the provided path.<br>
 * </blockquote>
 * @param {String} path 
 * @param {Boolean} [isJson] 
 * @param {Object} [schema] 
 * @param {Function} [getRequest] 
*/
dojox.rpc.Rest=function(path, isJson, schema, getRequest){};
/**
 * @namespace
*/
dojox.rpc.OfflineRest={};
/**
 * @namespace
*/
dojox.rpc.JsonRest={};
/**
 * @namespace
*/
dojox.rpc.Client={};
/**
 * @param {mixed} service 
 * @param {mixed} id 
 * @private
 * @returns {server error, let the error propagate} -
*/
dojox.rpc.Rest._get=function(service, id){};
/**
 * @param {mixed} method 
 * @param {mixed} service 
 * @param {mixed} id 
 * @param {mixed} serializedContent 
 * @private
*/
dojox.rpc.Rest._change=function(method, service, id, serializedContent){};
/**
 * @class
 * @extends dojox.data.JsonRestStore
 * @returns {dojox.data.S3Store} new instance
*/
dojox.data.S3Store=function(){};
/**
 * @param {mixed} results 
 * @private
 * @memberOf dojox.data.S3Store
*/
dojox.data.S3Store.prototype._processResults=function(results){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize a SnapLogicStore object.<br>
 * </blockquote>
 * @class
 * @param {Object} args An object that contains properties for initializing the new data store object. The
 * following properties are understood:
 * @returns {dojox.data.SnapLogicStore} new instance
*/
dojox.data.SnapLogicStore=function(args){};
/**
 * @namespace
*/
dojox.data.SnapLogicStore.Parts={};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.loadItem()<br>
 * </blockquote>
 * @param {mixed} keywordArgs 
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItemLoaded()<br>
 * </blockquote>
 * @param {mixed} item 
 * @returns {Boolean} -
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.isItemLoaded=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.isItem()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.isItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.hasAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @returns {Array} -
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} defaultValue 
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getFeatures()<br>
 * </blockquote>
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getAttributes()<br>
 * </blockquote>
 * @param {mixed} item 
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {Object} request See dojo.data.api.Read.close() for generic interface.
 * <br>
 * In addition to the standard Read API fetch support, this store supports an optimization for<br>
 * for retrieving the total count of records in the Pipeline without retrieving the data. To<br>
 * use this optimization, simply provide an onBegin handler without an onItem or onComplete handler.
 * @returns {Object} -
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.fetch=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.containsValue()<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} value 
 * @returns {Boolean} -
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {mixed} request 
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype.close=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the individual replies for both data and length requests.<br>
 * </blockquote>
 * @param {Object} request The request/handle object used with the original fetch() call.
 * @param {String} part A value indicating which request this handler call is for (this.Parts).
 * @param {Object} response Response received from the underlying IO transport.
 * @private
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype._partHandler=function(request, part, response){};
/**
 * <b>Summary:</b><blockquote>
 *	 Process data retrieved via fetch and send it back to requester.<br>
 *	 response:<br>
 *	 The data returend from the I/O transport. In the normal case, it will be an array of result rows<br>
 *	 from the pipeline. In the special case for record count optimization, response will be an array<br>
 *	 with a single element containing the total pipeline result row count. See fetch() for details<br>
 *	 on this optimization.<br>
 * </blockquote>
 * @param {Object} request 
 * @private
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype._fetchHandler=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed an item in the store.<br>
 * </blockquote>
 * @param {item} item The item to test for being contained by the store.
 * @private
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype._assertIsItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.<br>
 * </blockquote>
 * @param {attribute-name-string} attribute The attribute to test for being contained by the store.
 * @private
 * @memberOf dojox.data.SnapLogicStore
*/
dojox.data.SnapLogicStore.prototype._assertIsAttribute=function(attribute){};
/**
 * @class
 * @extends dijit.layout.BorderContainer
 * @param {mixed} options 
 * @returns {dojox.data.StoreExplorer} new instance
*/
dojox.data.StoreExplorer=function(options){};
/**
 * @namespace
*/
dojox.data.StoreExplorer.grid={};
/**
 * @param {mixed} store 
 * @memberOf dojox.data.StoreExplorer
*/
dojox.data.StoreExplorer.prototype.setStore=function(store){};
/**
 * @param {mixed} query 
 * @param {mixed} options 
 * @memberOf dojox.data.StoreExplorer
*/
dojox.data.StoreExplorer.prototype.setQuery=function(query, options){};
/**
 * @param {mixed} name 
 * @memberOf dojox.data.StoreExplorer
*/
dojox.data.StoreExplorer.prototype.setItemName=function(name){};
/**
 * @memberOf dojox.data.StoreExplorer
*/
dojox.data.StoreExplorer.prototype.postCreate=function(){};
/**
 * @memberOf dojox.data.StoreExplorer
*/
dojox.data.StoreExplorer.prototype.createNew=function(){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.data.StoreExplorer
*/
dojox.data.StoreExplorer.prototype._formatCell=function(value){};
/**
 * @param {mixed} items 
 * @param {mixed} req 
 * @private
 * @memberOf dojox.data.StoreExplorer.grid
*/
dojox.data.StoreExplorer.grid.prototype._onFetchComplete=function(items, req){};
/**
*/
dojox.data.util.JsonQuery=function(){};
/**
 * @class
 * @returns {dojox.data.util.JsonQuery} new instance
*/
dojox.data.util.JsonQuery=function(){};
/**
 * @param {mixed} argsSuper 
 * @param {mixed} argsSub 
 * @memberOf dojox.data.util.JsonQuery
*/
dojox.data.util.JsonQuery.prototype.querySuperSet=function(argsSuper, argsSub){};
/**
 * @param {mixed} item 
 * @param {mixed} request 
 * @memberOf dojox.data.util.JsonQuery
*/
dojox.data.util.JsonQuery.prototype.matchesQuery=function(item, request){};
/**
 * @memberOf dojox.data.util.JsonQuery
*/
dojox.data.util.JsonQuery.prototype.isUpdateable=function(){};
/**
 * @param {mixed} args 
 * @memberOf dojox.data.util.JsonQuery
*/
dojox.data.util.JsonQuery.prototype.fetch=function(args){};
/**
 * @param {Object} request 
 * @param {Array} baseResults 
 * @memberOf dojox.data.util.JsonQuery
*/
dojox.data.util.JsonQuery.prototype.clientSideFetch=function(request, baseResults){};
/**
 * @param {mixed} args 
 * @param {mixed} jsonQueryPagination 
 * @private
 * @memberOf dojox.data.util.JsonQuery
*/
dojox.data.util.JsonQuery.prototype._toJsonQuery=function(args, jsonQueryPagination){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializer for the Wikipedia data store interface.<br>
 * </blockquote>
 * The WikipediaStore is a data store interface to Wikipedia, using the<br>
 * Wikipedia SMD spec from dojox.rpc. It currently is useful only for<br>
 * finding articles that contain some particular text or grabbing single<br>
 * articles by full name; no wildcards or other filtering are supported.
 * @class
 * @extends dojox.data.ServiceStore
 * @param {mixed} options 
 * @returns {dojox.data.WikipediaStore} new instance
 * @example
 * 	var store = new dojox.data.WikipediaStore();
 * 	store.fetch({
 * 		query: {title:"Dojo Toolkit"},
 * 		onItem: function(item){
 * 			dojo.byId("somediv").innerHTML = item.text["*"];
 * 		}
 * 	});
*/
dojox.data.WikipediaStore=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch a page or some partially-loaded search results from<br>
 *	 Wikipedia. Note that there isn't a way to sort data coming<br>
 *	 in from the API, so we just ignore the *sort* parameter.<br>
 * </blockquote>
 * @param {object} request 
 * @example
 * Loading a page:
 * 	store.fetch({
 * 		query: {title:"Dojo Toolkit"},
 * 		// define your handlers here
 * 	});
 * @example
 * Searching for pages containing "dojo":
 * 	store.fetch({
 * 		query: {
 * 			action: "query",
 * 			text: "dojo"
 * 		},
 * 		// define your handlers here
 * 	});
 * @example
 * Searching for the next 50 pages containing "dojo":
 * 	store.fetch({
 * 		query: {
 * 			action: "query",
 * 			text: "dojo",
 * 			start: 10,
 * 			count: 50 // max 500; will be capped if necessary
 * 		},
 * 		// define your handlers here
 * 	});
 * @memberOf dojox.data.WikipediaStore
*/
dojox.data.WikipediaStore.prototype.fetch=function(request){};
/**
 * @param {mixed} results 
 * @param {mixed} def 
 * @private
 * @memberOf dojox.data.WikipediaStore
*/
dojox.data.WikipediaStore.prototype._processResults=function(results, def){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data item of 'XmlStore'<br>
 * </blockquote>
 * This class represents an item of 'XmlStore' holding an XML element.<br>
 * 'element'<br>
 * element:<br>
 * An XML element
 * @class
 * @param {An} element XML element
 * @param {The} store containing store, if any.
 * @param {The} query query to use to look up a specific element.
 * Usually an XPath or dojo.query statement.
 * @returns {dojox.data.XmlItem} new instance
*/
dojox.data.XmlItem=function(element, store, query){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a value of the first text child of the element<br>
 * </blockquote>
 * 
 * @returns {String} -
 * @memberOf dojox.data.XmlItem
*/
dojox.data.XmlItem.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A data store for XML based services or documents<br>
 * </blockquote>
 * A data store for XML based services or documents
 * @class
 * @param {object} args An anonymous object to initialize properties.  It expects the following values:
 * @returns {dojox.data.XmlStore} new instance
*/
dojox.data.XmlStore=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove an attribute<br>
 * </blockquote>
 * 'item' must be an instance of a dojox.data.XmlItem from the store instance.<br>
 * 'attribute' can be an XML attribute name of the element or one of<br>
 * special names described below.<br>
 * If 'attribute' specifies "tagName", nothing is removed and false is<br>
 * returned.<br>
 * If 'attribute' specifies "childNodes" or "text()", all child nodes<br>
 * are removed.<br>
 * For generic attributes, if '_attributeMap' is specified,<br>
 * an actual attribute name is looked up with the tag name of<br>
 * the element and 'attribute' (concatenated with '.').<br>
 * Then, if 'attribute' starts with "@", the XML attribute is removed.<br>
 * Otherwise, child elements of the tag name specified with<br>
 * 'attribute' are removed.
 * @param {item} item An XML element that holds the attribute
 * @param {attribute} attribute A tag name of child elements, an XML attribute name or one of
 * special names<br>
 * 
 * @returns {boolean} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.unsetAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set attribute values<br>
 * </blockquote>
 * 'item' must be an instance of a dojox.data.XmlItem from the store instance.<br>
 * If 'attribute' specifies "tagName", nothing is set and false is<br>
 * returned.<br>
 * If 'attribute' specifies "childNodes", the value (array of XML<br>
 * elements) is set to the element's childNodes.<br>
 * If 'attribute' specifies "text()", a text node is created with<br>
 * the values and set it to the element as a child.<br>
 * For generic attributes, if '_attributeMap' is specified,<br>
 * an actual attribute name is looked up with the tag name of<br>
 * the element and 'attribute' (concatenated with '.').<br>
 * Then, if 'attribute' starts with "@", the first value is set to<br>
 * the XML attribute.<br>
 * Otherwise, child elements of the tag name specified with<br>
 * 'attribute' are replaced with new child elements and their<br>
 * child text nodes of values.
 * @param {item} item An XML element that holds the attribute
 * @param {attribute} attribute A tag name of child elements, an XML attribute name or one of
 * special names<br>
 * value:<br>
 * A attribute value to set<br>
 * notify:<br>
 * A non-API optional argument, used to indicate if notification API should be called<br>
 * or not.
 * @param {array} values 
 * 
 * @returns {boolean} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.setValues=function(item, attribute, values){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set an attribute value<br>
 * </blockquote>
 * 'item' must be an instance of a dojox.data.XmlItem from the store instance.<br>
 * If 'attribute' specifies "tagName", nothing is set and false is<br>
 * returned.<br>
 * If 'attribute' specifies "childNodes", the value (XML element) is<br>
 * added to the element.<br>
 * If 'attribute' specifies "text()", a text node is created with<br>
 * the value and set it to the element as a child.<br>
 * For generic attributes, if '_attributeMap' is specified,<br>
 * an actual attribute name is looked up with the tag name of<br>
 * the element and 'attribute' (concatenated with '.').<br>
 * Then, if 'attribute' starts with "@", the value is set to the XML<br>
 * attribute.<br>
 * Otherwise, a text node is created with the value and set it to<br>
 * the first child element of the tag name specified with 'attribute'.<br>
 * If the child element does not exist, it is created.
 * @param {item} item An XML element that holds the attribute
 * @param {attribute} attribute A tag name of a child element, An XML attribute name or one of
 * special names
 * @param {almost} value A attribute value to set
 * 
 * @returns {boolean} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.setValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Save new and/or modified items (XML elements)<br>
 * </blockquote>
 * 'url' is used to save XML documents for new, modified and/or<br>
 * deleted XML elements.
 * @param {object} keywordArgs An object for callbacks
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.save=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Invalidate changes (new and/or modified elements)<br>
 * </blockquote>
 * 
 * @returns {boolean} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.revert=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a new dojox.data.XmlItem<br>
 * </blockquote>
 * At least, 'keywordArgs' must contain "tagName" to be used for<br>
 * the new	element.<br>
 * Other attributes in 'keywordArgs' are set to the new element,<br>
 * including "text()", but excluding "childNodes".
 * @param {object} [keywordArgs] An object containing initial attributes
 * @param {mixed} parentInfo 
 * 
 * @returns {object} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.newItem=function(keywordArgs, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load an item (XML element)<br>
 * </blockquote>
 * @param {object} keywordArgs containing the args for loadItem.  See dojo.data.api.Read.loadItem()
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.loadItem=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether the object is an item (XML element) and loaded<br>
 *	 item:<br>
 *	 An object to check<br>
 * </blockquote>
 * @param {anything} something 
 * 
 * @returns {boolean} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.isItemLoaded=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether the object is an item (XML element)<br>
 *	 item:<br>
 *	 An object to check<br>
 * </blockquote>
 * @param {anything} something 
 * 
 * @returns {boolean|boolran} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.isItem=function(something){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether an item is new, modified or deleted<br>
 * </blockquote>
 * If 'item' is specified, true is returned if the item is new,<br>
 * modified or deleted.<br>
 * Otherwise, true is returned if there are any new, modified<br>
 * or deleted items.
 * @param {item} [item] An item (XML element) to check
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.isDirty=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether an element has the attribute<br>
 * </blockquote>
 * @param {item} item 'item' must be an instance of a dojox.data.XmlItem from the store instance.
 * @param {attribute} attribute A tag name of a child element, An XML attribute name or one of
 * special names<br>
 * 
 * @returns {boolean} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.hasAttribute=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an array of attribute values<br>
 * </blockquote>
 * 'item' must be an instance of a dojox.data.XmlItem from the store instance.<br>
 * If 'attribute' specifies "tagName", the tag name of the element is<br>
 * returned.<br>
 * If 'attribute' specifies "childNodes", child elements are returned.<br>
 * If 'attribute' specifies "text()", the values of child text nodes<br>
 * are returned.<br>
 * For generic attributes, if 'attributeMap' is specified,<br>
 * an actual attribute name is looked up with the tag name of<br>
 * the element and 'attribute' (concatenated with '.').<br>
 * Then, if 'attribute' starts with "@", the value of the XML<br>
 * attribute is returned.<br>
 * Otherwise, child elements of the tag name specified with<br>
 * 'attribute' are returned.
 * @param {item} item An XML element that holds the attribute
 * @param {attribute} attribute A tag name of child elements, An XML attribute name or one of
 * special names<br>
 * 
 * @returns {array} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.getValues=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an attribute value<br>
 * </blockquote>
 * 'item' must be an instance of a dojox.data.XmlItem from the store instance.<br>
 * If 'attribute' specifies "tagName", the tag name of the element is<br>
 * returned.<br>
 * If 'attribute' specifies "childNodes", the first element child is<br>
 * returned.<br>
 * If 'attribute' specifies "text()", the value of the first text<br>
 * child is returned.<br>
 * For generic attributes, if '_attributeMap' is specified,<br>
 * an actual attribute name is looked up with the tag name of<br>
 * the element and 'attribute' (concatenated with '.').<br>
 * Then, if 'attribute' starts with "@", the value of the XML<br>
 * attribute is returned.<br>
 * Otherwise, the first child element of the tag name specified with<br>
 * 'attribute' is returned.
 * @param {item} item An XML element that holds the attribute
 * @param {attribute} attribute A tag name of a child element, An XML attribute name or one of
 * special names
 * @param {value} [defaultValue] A default value
 * 
 * @returns {object|string} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.getValue=function(item, attribute, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabelAttributes()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {array|null} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.getLabelAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.getLabel()<br>
 * </blockquote>
 * @param {item} item 
 * @returns {undefined} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.getLabel=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an array of attribute names that are used to generate the identity.<br>
 * </blockquote>
 * For XmlStore, if sendQuery is false and no keyAttribute was set, then this function<br>
 * returns null, as xpath is used for the identity, which is not a public attribute of<br>
 * the item.  If sendQuery is true and keyAttribute is set, then this function<br>
 * returns an array of one attribute name: keyAttribute.   This means the server side<br>
 * implementation must apply a keyAttribute to a returned node that always allows<br>
 * it to be looked up again.
 * @param {item} item The item from the store from which to obtain the array of public attributes that
 * compose the identifier, if any.
 * @returns {array|null} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.getIdentityAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a unique identifier for an item.<br>
 * </blockquote>
 * @param {item} item The XML Item from the store from which to obtain its identifier.
 * @returns {String.} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.getIdentity=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return supported data APIs<br>
 * </blockquote>
 * 
 * @returns {array} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an array of attribute names<br>
 * </blockquote>
 * 'item' must be an instance of a dojox.data.XmlItem from the store instance.<br>
 * tag names of child elements and XML attribute names of attributes<br>
 * specified to the element are returned along with special attribute<br>
 * names applicable to the element including "tagName", "childNodes"<br>
 * if the element has child elements, "text()" if the element has<br>
 * child text nodes, and attribute names in '_attributeMap' that match<br>
 * the tag name of the element.
 * @param {item} item An XML element
 * 
 * @returns {array} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.getAttributes=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Identity.fetchItemByIdentity(keywordArgs)<br>
 * </blockquote>
 * @param {object} keywordArgs 
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.fetchItemByIdentity=function(keywordArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Delete an dojox.data.XmlItem (wrapper to a XML element).<br>
 * </blockquote>
 * @param {item} item An XML element to delete
 * 
 * @returns {boolean} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.deleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether the attribute values contain the value<br>
 * </blockquote>
 * @param {item} item 'item' must be an instance of a dojox.data.XmlItem from the store instance.
 * @param {attribute} attribute A tag name of a child element, An XML attribute name or one of
 * special names
 * @param {anything} value 
 * 
 * @returns {boolean} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.containsValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Read.close()<br>
 * </blockquote>
 * @param {dojo.data.api.Request} request || keywordArgs || null
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype.close=function(request){};
/**
 * @param {mixed} item 
 * @param {mixed} keywordArgs 
 * @param {mixed} method 
 * @private
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._saveItem=function(item, keywordArgs, method){};
/**
 * @param {mixed} items 
 * @private
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._restoreItems=function(items){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function to compute the xpath of a node in a DOM document.<br>
 * </blockquote>
 * A function to compute the xpath of a node in a DOM document.  Used for<br>
 * Client side query handling and identity.
 * @param {mixed} element 
 * @private
 * @returns {string} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getXPath=function(element){};
/**
 * @param {mixed} element 
 * @private
 * @returns {DOMElement} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getRootElement=function(element){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a URL for put<br>
 * </blockquote>
 * This default implementation just returns 'url'.<br>
 * Sub-classes may override this method for the custom URL.
 * @param {An} item item to save
 * @private
 * 
 * @returns {string} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getPutUrl=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a content to put<br>
 * </blockquote>
 * This default implementation generates an XML document for one<br>
 * (the first only) new or modified element.<br>
 * Sub-classes may override this method for the custom put content<br>
 * generation.
 * @param {An} item item to save
 * @private
 * 
 * @returns {XML string} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getPutContent=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a URL for post<br>
 * </blockquote>
 * This default implementation just returns 'url'.<br>
 * Sub-classes may override this method for the custom URL.
 * @param {An} item item to save
 * @private
 * 
 * @returns {string} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getPostUrl=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a content to post<br>
 * </blockquote>
 * This default implementation generates an XML document for one<br>
 * (the first only) new or modified element.<br>
 * Sub-classes may override this method for the custom post content<br>
 * generation.
 * @param {An} item item to save
 * @private
 * 
 * @returns {XML string} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getPostContent=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch items (XML elements) in an XML document based on a request<br>
 * </blockquote>
 * This default implementation walks through child elements of<br>
 * the document element to see if all properties of 'query' object<br>
 * match corresponding attributes of the element (item).<br>
 * If 'request' is not specified, all child elements are returned.<br>
 * Sub-classes may override this method for the custom search in<br>
 * an XML document.
 * @param {An} document XML document
 * @param {A} request request object
 * @private
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getItems=function(document, request){};
/**
 * @param {mixed} items 
 * @param {mixed} element 
 * @private
 * @returns {int} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getItemIndex=function(items, element){};
/**
 * @param {mixed} element 
 * @private
 * @returns {object} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getItem=function(element){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a URL for fetch<br>
 * </blockquote>
 * This default implementation generates a query string in the form of<br>
 * "?name1=value1&amp;name2=value2..." off properties of 'query' object<br>
 * specified in 'request' and appends it to 'url', if 'sendQuery'<br>
 * is set to false.<br>
 * Otherwise, 'url' is returned as is.<br>
 * Sub-classes may override this method for the custom URL generation.
 * @param {A} request request object
 * @private
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getFetchUrl=function(request){};
/**
 * @param {mixed} element 
 * @private
 * @returns {DOMDocument|null} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getDocument=function(element){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a URL for delete<br>
 * </blockquote>
 * This default implementation returns 'url' with 'keyAttribute'<br>
 * as a query string.<br>
 * Sub-classes may override this method for the custom URL based on<br>
 * changes (new, deleted, or modified).
 * @param {An} item item to delete
 * @private
 * 
 * @returns {string} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getDeleteUrl=function(item){};
/**
 * @param {mixed} tagName 
 * @param {mixed} attribute 
 * @private
 * @returns {object} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._getAttribute=function(tagName, attribute){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._forgetItem=function(item){};
/**
 * @param {mixed} nodes 
 * @private
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._flattenNodes=function(nodes){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch items (XML elements) that match to a query<br>
 * </blockquote>
 * If 'sendQuery' is true, an XML document is loaded from<br>
 * 'url' with a query string.<br>
 * Otherwise, an XML document is loaded and list XML elements that<br>
 * match to a query (set of element names and their text attribute<br>
 * values that the items to contain).<br>
 * A wildcard, "*" can be used to query values to match all<br>
 * occurrences.<br>
 * If 'rootItem' is specified, it is used to fetch items.
 * @param {A} request request object
 * @param {A} fetchHandler function to call for fetched items
 * @param {A} errorHandler function to call on error
 * @private
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._fetchItems=function(request, fetchHandler, errorHandler){};
/**
 * @param {mixed} item 
 * @private
 * @returns {new or already modified} -
 * @memberOf dojox.data.XmlStore
*/
dojox.data.XmlStore.prototype._backupItem=function(item){};
/**
 * @namespace
*/
dojox.date.buddhist={};
/**
 * @param {buddhist.Date} dateObject 
*/
dojox.date.buddhist.isLeapYear=function(dateObject){};
/**
 * @param {buddhist.Date} dateObject 
*/
dojox.date.buddhist.getDaysInMonth=function(dateObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 date2 - date1<br>
 *	 date2 is hebrew.Date object.  If not specified, the current hebrew.Date is used.<br>
 * </blockquote>
 * @param {dojox.date.buddhist.Date} date1 
 * @param {dojox.date.buddhist.Date} [date2] 
 * @param {String} [interval] A string representing the interval.  One of the following:
 * &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot;,<br>
 * &quot;millisecond&quot;,  &quot;week&quot;, &quot;weekday&quot;<br>
 * Defaults to &quot;day&quot;.
 * @returns {Number (integer)} -
*/
dojox.date.buddhist.difference=function(date1, date2, interval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Compare two buddhist date objects by date, time, or both.<br>
 * </blockquote>
 * @param {buddhist.Date} date1 
 * @param {buddhist.Date} date2 
 * @param {String} [portion] 
 * @returns {int} -
*/
dojox.date.buddhist.compare=function(date1, date2, portion){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add to a Date in intervals of different size, from milliseconds to years<br>
 * </blockquote>
 * @param {dojox.date.buddhist.Date} date buddhist.Date Date object to start with
 * @param {String} interval A string representing the interval.  One of the following:
 * &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot;,<br>
 * &quot;millisecond&quot;, &quot;week&quot;, &quot;weekday&quot;
 * @param {int} amount How much to add to the date.
 * @returns {dojox.date.buddhist.Date} -
*/
dojox.date.buddhist.add=function(date, interval, amount){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is the constructor<br>
 * </blockquote>
 * This fucntion initialize the date object values
 * @example
 * 		var date1 = new dojox.date.buddhist.Date();
 * 
 * 		var date2 = new dojox.date.buddhist.Date(date1);
 * 
 * 		var date3 = new dojox.date.buddhist.Date(2552,2,12);
*/
dojox.date.buddhist.Date=function(){};
/**
 * @namespace
*/
dojox.date.buddhist.locale={};
/**
 * <b>Summary:</b><blockquote>
 *	 This is the constructor<br>
 * </blockquote>
 * This fucntion initialize the date object values
 * @class
 * @returns {dojox.date.buddhist.Date} new instance
 * @example
 * 		var date1 = new dojox.date.buddhist.Date();
 * 
 * 		var date2 = new dojox.date.buddhist.Date(date1);
 * 
 * 		var date3 = new dojox.date.buddhist.Date(2552,2,12);
*/
dojox.date.buddhist.Date=function(){};
/**
*/
dojox.date.buddhist.Date.valueOf=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This returns a string representation of the date in &amp;quot;dd, MM, YYYY HH:MM:SS&amp;quot; format<br>
 * </blockquote>
 * @returns {String} -
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This returns the equivalent Gregorian date value as a Date object<br>
 * </blockquote>
 * @returns {Date} -
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.toGregorian=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the seconds (0-59) only.<br>
 * </blockquote>
 * @param {Number} seconds 
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.setSeconds=function(seconds){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function set Month<br>
 * </blockquote>
 * @param {number} month 
 * @example
 * 		var date1 = new dojox.date.buddhist.Date();
 * 		date1.setMonth(0); //first month
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.setMonth=function(month){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the minutes (0-59) only.<br>
 * </blockquote>
 * @param {Number} minutes 
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.setMinutes=function(minutes){};
/**
 * @param {Number} milliseconds 
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.setMilliseconds=function(milliseconds){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the Hours  0-23<br>
 * </blockquote>
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.setHours=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function set Year<br>
 * </blockquote>
 * @param {number} year 
 * @param {number} [month] 
 * @param {number} [date] 
 * @example
 * 		var date1 = new dojox.date.buddhist.Date();
 * 		date1.setFullYear(2552);
 * 		date1.setFullYear(2552, 1, 1);
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.setFullYear=function(year, month, date){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function sets the Date<br>
 * </blockquote>
 * @param {number} date 
 * @example
 * 		var date1 = new dojox.date.buddhist.Date();
 * 		date1.setDate(2);
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.setDate=function(date){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the seconde value<br>
 * </blockquote>
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.getSeconds=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function return the month value ( 0 - 11 )<br>
 * </blockquote>
 * @example
 * 		var date1 = new dojox.date.buddhist.Date();
 * 
 * 		console.log(date1.getMonth()+1);
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.getMonth=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the Minuites value<br>
 * </blockquote>
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.getMinutes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the Milliseconds value<br>
 * </blockquote>
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.getMilliseconds=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the Hour value<br>
 * </blockquote>
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.getHours=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function return the Year value<br>
 * </blockquote>
 * @example
 * 		var date1 = new dojox.date.buddhist.Date();
 * 
 * 		console.log(date1.getFullYear());
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.getFullYear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function return Week Day value ( 0 - 6 )<br>
 * </blockquote>
 * @returns {int} -
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.getDay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function returns the date value (0 - 30)<br>
 * </blockquote>
 * @param {boolean} [isNumber] 
 * @example
 * 		var date1 = new dojox.date.buddhist.Date();
 * 
 * 		console.log(date1.getDate());
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.getDate=function(isNumber){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function sets this Date to the Hebrew Date corresponding to the Gregorian Date<br>
 * </blockquote>
 * @param {Date} gdate 
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype.fromGregorian=function(gdate){};
/**
 * @param {number} month 
 * @param {number} year 
 * @private
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype._getDaysInMonth=function(month, year){};
/**
 * @param {Number} seconds 
 * @private
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype._addSeconds=function(seconds){};
/**
 * @param {Number} minutes 
 * @private
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype._addMinutes=function(minutes){};
/**
 * @param {Number} milliseconds 
 * @private
 * @memberOf dojox.date.buddhist.Date
*/
dojox.date.buddhist.Date.prototype._addMilliseconds=function(milliseconds){};
/**
 * <b>Summary:</b><blockquote>
 *	 mix-in to dojo.date to provide timezones based on<br>
 *	 the Olson timezone data<br>
 * </blockquote>
 * mix-in to dojo.date to provide timezones based on<br>
 * the Olson timezone data.<br>
 * If you pass "timezone" as a parameter to your format options,<br>
 * then you get the date formatted (and offset) for that timezone<br>
*/
dojox.date.timezone=function(){};
/**
 * @namespace
*/
dojox.date.relative={};
/**
 * @namespace
*/
dojox.date.posix={};
/**
 * @namespace
*/
dojox.date.php={};
/**
 * @namespace
*/
dojox.date.islamic={};
/**
 * @namespace
*/
dojox.date.hebrew={};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds the regular needed to parse a buddhist.Date<br>
 * </blockquote>
 * @param {Object} [options] 
 * @returns {String} -
*/
dojox.date.buddhist.locale.regexp=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function parses string date value according to options<br>
 * </blockquote>
 * @param {String} value 
 * @param {Object} [options] 
*/
dojox.date.buddhist.locale.parse=function(value, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used to get localized strings from dojo.cldr for day or month names.<br>
 * </blockquote>
 * @param {String} item 
 * @param {String} type 
 * @param {String} [context] 
 * @param {String} [locale] 
 * @param {buddhist} date Date Object?
*/
dojox.date.buddhist.locale.getNames=function(item, type, context, locale, date){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format a Date object as a String, using  settings.<br>
 * </blockquote>
 * @param {buddhist.Date} dateObject 
 * @param {object} [options] 
 * @returns {String} -
*/
dojox.date.buddhist.locale.format=function(dateObject, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a reference to a bundle containing localized custom formats to be<br>
 *	 used by date/time formatting and parsing routines.<br>
 * </blockquote>
 * @param {String} packageName 
 * @param {String} bundleName 
*/
dojox.date.buddhist.locale.addCustomFormats=function(packageName, bundleName){};
/**
 * @param {Object} [options] 
 * @private
*/
dojox.date.buddhist.locale._parseInfo=function(options){};
/**
 * @param {String} locale 
 * @private
*/
dojox.date.buddhist.locale._getBuddhistBundle=function(locale){};
/**
 * @param {hebrew.Date} month 
*/
dojox.date.hebrew.getDaysInMonth=function(month){};
/**
 * <b>Summary:</b><blockquote>
 *	 date2 - date1<br>
 *	 date2 is hebrew.Date object.  If not specified, the current hebrew.Date is used.<br>
 * </blockquote>
 * @param {dojox.date.hebrew.Date} date1 
 * @param {dojox.date.hebrew.Date} [date2] 
 * @param {String} [interval] A string representing the interval.  One of the following:
 * &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot;,<br>
 * &quot;millisecond&quot;,  &quot;week&quot;, &quot;weekday&quot;<br>
 * Defaults to &quot;day&quot;.
 * @returns {Number (integer)} -
*/
dojox.date.hebrew.difference=function(date1, date2, interval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Compare two hebrew date objects by date, time, or both.<br>
 * </blockquote>
 * Returns 0 if equal, positive if a &gt; b, else negative.<br>
 * date1:<br>
 * hebrew.Date object<br>
 * date2:<br>
 * hebrew.Date object.  If not specified, the current hebrew.Date is used.
 * @param {hebrew.Date} dateheb1 
 * @param {hebrew.Date} dateheb2 
 * @param {String} [portion] A string indicating the &quot;date&quot; or &quot;time&quot; portion of a Date object.
 * Compares both &quot;date&quot; and &quot;time&quot; by default.  One of the following:<br>
 * &quot;date&quot;, &quot;time&quot;, &quot;datetime&quot;<br>
*/
dojox.date.hebrew.compare=function(dateheb1, dateheb2, portion){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add to a Date in intervals of different size, from milliseconds to years<br>
 * </blockquote>
 * @param {dojox.date.hebrew.Date} date hebrew.Date Date object to start with
 * @param {String} interval A string representing the interval.  One of the following:
 * &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot;,<br>
 * &quot;millisecond&quot;, &quot;week&quot;, &quot;weekday&quot;
 * @param {int} amount How much to add to the date.
 * @returns {dojox.date.hebrew.Date} -
*/
dojox.date.hebrew.add=function(date, interval, amount){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Date-like object which implements the Hebrew calendar<br>
 * </blockquote>
 * A Date-like object which implements the Hebrew Calendar.  Because this object<br>
 * implements many of the same methods as the native JavaScript Date object, which<br>
 * implements the Gregorian calendar, it can often be used its place.  Note that<br>
 * this object does not extend Date or use its prototype.
 * @example
 * 	dojo.require("dojox.date.hebrew.Date");
 * 
 * 	var date = new dojox.date.hebrew.Date();
 * 	console.log(date.getFullYear()+'\'+date.getMonth()+'\'+date.getDate());
*/
dojox.date.hebrew.Date=function(){};
/**
 * @namespace
*/
dojox.date.hebrew.numerals={};
/**
 * @namespace
*/
dojox.date.hebrew.locale={};
/**
 * <b>Summary:</b><blockquote>
 *	 A Date-like object which implements the Hebrew calendar<br>
 * </blockquote>
 * A Date-like object which implements the Hebrew Calendar.  Because this object<br>
 * implements many of the same methods as the native JavaScript Date object, which<br>
 * implements the Gregorian calendar, it can often be used its place.  Note that<br>
 * this object does not extend Date or use its prototype.
 * @class
 * @returns {dojox.date.hebrew.Date} new instance
 * @example
 * 	dojo.require("dojox.date.hebrew.Date");
 * 
 * 	var date = new dojox.date.hebrew.Date();
 * 	console.log(date.getFullYear()+'\'+date.getMonth()+'\'+date.getDate());
*/
dojox.date.hebrew.Date=function(){};
/**
*/
dojox.date.hebrew.Date.valueOf=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a string representation of the date in &amp;quot;dd, MM, yyyy HH:mm:ss&amp;quot; format<br>
 * </blockquote>
 * returns a string representation of the date in "dd, MM, yyyy HH:mm:ss" format (all numeric)<br>
 * For user presentation, use dojox.date.hebrew.locale.format which will present in the appropriate language<br>
 * and format.  toString() language- and culturally-specific conventions to keep this module free of<br>
 * dependencies on dojox.date.locale and dojo.cldr.
 * @returns {String} -
 * @example
 * 		var date1 = new dojox.date.hebrew.Date(5769, 6, 1);
 * 		console.log(date1.toString());
 * 		&gt;&gt;&gt; "1, 6, 5769 0:0:0"
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the equivalent Grogorian date value as a native Date object<br>
 * </blockquote>
 * @returns {Date} -
 * @example
 * 		var dateHebrew = new dojox.date.hebrew.Date(5768,11,20);
 * 		var dateGregorian = dateHebrew.toGregorian();
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.toGregorian=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the seconds (0-59) only.<br>
 * </blockquote>
 * @param {Number} seconds 
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.setSeconds=function(seconds){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the month.  You should use &amp;quot;absolute&amp;quot; index in the month array:<br>
 *	 0. Tishri<br>
 *	 1. Heshvan<br>
 *	 2. Kislev<br>
 *	 3. Tevet<br>
 *	 4. Shevat<br>
 *	 5. Adar I (leap years only)<br>
 *	 6. Adar<br>
 *	 7. Nisan<br>
 *	 8. Iyar<br>
 *	 9. Sivan<br>
 *	 10. Tammuz<br>
 *	 11.	Av<br>
 *	 12. Elul - 12<br>
 *	 For non leap years, for months after Shevat, the actual position of<br>
 *	 the month in the year (used for short format) is less than<br>
 *	 the &amp;quot;absolute&amp;quot; index by 1.<br>
 * </blockquote>
 * @param {number} month 
 * @example
 * 		var date1 = new dojox.date.hebrew.Date();
 * 		date1.setMonth(0); //first month
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.setMonth=function(month){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the minutes (0-59) only.<br>
 * </blockquote>
 * @param {Number} minutes 
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.setMinutes=function(minutes){};
/**
 * @param {Number} milliseconds 
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.setMilliseconds=function(milliseconds){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the hour<br>
 * </blockquote>
 * Sets the hour and optionally minutes, seconds, milliseconds also.
 * @example
 * 		var date1 = new dojox.date.hebrew.Date();
 * 		date1.setHours(12, 30, 0, 0);
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.setHours=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the year<br>
 * </blockquote>
 * @param {number} year 
 * @param {number} [month] 
 * @param {number} [date] 
 * @example
 * 		var date1 = new dojox.date.hebrew.Date();
 * 		date1.setFullYear(5768);
 * 		date1.setFullYear(5768, 1, 1);
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.setFullYear=function(year, month, date){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the date number for a given month<br>
 * </blockquote>
 * @param {number} date 
 * @example
 * 		var date1 = new dojox.date.hebrew.Date(5769, 6, 1);
 * 		date1.setDate(2);
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.setDate=function(date){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines if the year (argument) is a leap year<br>
 * </blockquote>
 * The Leap year contains additional month adar sheni<br>
 * <br>
 * return (year * 12 + 17) % 19 &gt;= 12;
 * @param {Number} year 
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.isLeapYear=function(year){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the seconds value<br>
 * </blockquote>
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.getSeconds=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the month value (0 - 12)<br>
 * </blockquote>
 * the result is the index in the month array:<br>
 * 0. Tishri<br>
 * 1. Heshvan<br>
 * 2. Kislev<br>
 * 3. Tevet<br>
 * 4. Shevat<br>
 * 5. Adar I (leap years only)<br>
 * 6. Adar<br>
 * 7. Nisan<br>
 * 8. Iyar<br>
 * 9. Sivan<br>
 * 10. Tammuz<br>
 * 11.	Av<br>
 * 12. Elul - 12<br>
 * For non leap years, for months after Shevat, the actual position of<br>
 * the month in the year (used for short format) is less than<br>
 * the "absolute" index by 1.
 * @example
 * 		var date1 = new dojox.date.hebrew.Date(5769, 6, 1);
 * 
 * 		console.log(date1.getMonth()+1);
 * 		&gt;&gt; 7
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.getMonth=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the minutes value<br>
 * </blockquote>
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.getMinutes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the milliseconds value<br>
 * </blockquote>
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.getMilliseconds=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the hour value<br>
 * </blockquote>
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.getHours=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the Year value<br>
 * </blockquote>
 * @example
 * 		var date1 = new dojox.date.hebrew.Date(5769, 6, 1);
 * 
 * 		console.log(date1.getFullYear());
 * 		&gt;&gt; 5769
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.getFullYear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the number of days in the given month and year<br>
 * </blockquote>
 * @param {Number} month 
 * @param {Number} year 
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.getDaysInHebrewMonth=function(month, year){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns weekday value (0 - 6)<br>
 * </blockquote>
 * @example
 * 		var date1 = new dojox.date.hebrew.Date();
 * 
 * 		console.log(date1.getDay());
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.getDay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the date value as hebrew numerals for the Hebrew locale,<br>
 *	 a number for all others.<br>
 * </blockquote>
 * @param {String} [locale] 
 * @example
 * 		var date1 = new dojox.date.hebrew.Date();
 * 
 * 		console.log(date1.getDate());
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.getDateLocalized=function(locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the date value (1 - 30)<br>
 * </blockquote>
 * @returns {int} -
 * @example
 * 		var date1 = new dojox.date.hebrew.Date();
 * 
 * 		console.log(date1.getDate());
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.getDate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function sets this Date to the Hebrew Date corresponding to the Gregorian Date<br>
 * </blockquote>
 * @param {Date} gdate 
 * @example
 * 		var dateHebrew = new dojox.date.hebrew.Date();
 * 		var dateGregorian = new Date(2008,10,12);
 * 		dateHebrew.fromGregorian(dateGregorian);
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype.fromGregorian=function(gdate){};
/**
 * @param {Number} year 
 * @private
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype._yearType=function(year){};
/**
 * @param {number} year 
 * @private
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype._startOfYear=function(year){};
/**
 * @private
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype._setDay=function(){};
/**
 * @param {number} eyear 
 * @private
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype._handleGetYearLength=function(eyear){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the Julian day of a Gregorian date<br>
 * </blockquote>
 * @param {mixed} gdate 
 * @private
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype._getJulianDayFromGregorianDate=function(gdate){};
/**
 * @param {mixed} numerator 
 * @param {mixed} denominator 
 * @param {mixed} remainder 
 * @private
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype._floorDivide=function(numerator, denominator, remainder){};
/**
 * @param {Date} gdate 
 * @private
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype._computeHebrewFields=function(gdate){};
/**
 * @param {Number} seconds 
 * @private
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype._addSeconds=function(seconds){};
/**
 * @param {Number} minutes 
 * @private
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype._addMinutes=function(minutes){};
/**
 * @param {Number} milliseconds 
 * @private
 * @memberOf dojox.date.hebrew.Date
*/
dojox.date.hebrew.Date.prototype._addMilliseconds=function(milliseconds){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds the regular needed to parse a hebrew.Date<br>
 * </blockquote>
 * @param {object} [options] 
 * @returns {String} -
*/
dojox.date.hebrew.locale.regexp=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function parse string date value according to options<br>
 * </blockquote>
 * @param {String} value 
 * @param {Object} [options] 
 * @returns {hebrew.Date} -
 * @example
 * 		var dateHebrew = dojox.date.hebrew.locale.parse('11/10/5740', {datePattern:'dd/MM/yy', selector:'date'});
 * 		in Hebrew locale string for parsing contains Hebrew Numerals
 * 
 *   options = {datePattern:'dd MMMM yy', selector:'date'};
 * 
 *	y - year
 *	M, MM  - short month
 *   MMM, MMMM - long month
 *   d - date
 *   a - am, pm
 *	E, EE, EEE, EEEE  - week day
 * 
 *	 h, H, k, K, m, s, S,  -  time format
*/
dojox.date.hebrew.locale.parse=function(value, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used to get localized strings from dojo.cldr for day or month names.<br>
 * </blockquote>
 * @param {String} item 'months' || 'days'
 * @param {String} type 'wide' || 'narrow' || 'abbr' (e.g. &quot;Monday&quot;, &quot;Mon&quot;, or &quot;M&quot; respectively, in English)
 * use:<br>
 * 'standAlone' || 'format' (default)
 * @param {String} [context] 
 * @param {String} [locale] override locale used to find the names
 * @param {dojox.date.hebrew.Date} [date] required for item=months to determine leap month name
 * <br>
 * using  var monthNames = dojox.date.hebrew.locale.getNames('months', 'wide', 'format', 'he', new hebrewDate(5768, 2, 12));<br>
*/
dojox.date.hebrew.locale.getNames=function(item, type, context, locale, date){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format a Date object as a String, using  settings.<br>
 * </blockquote>
 * Create a string from a hebrew.Date object using a known pattern.<br>
 * By default, this method formats both date and time from dateObject.<br>
 * Default formatting lengths is 'short'
 * @param {hebrew.Date} dateObject the date and/or time to be formatted.  If a time only is formatted,
 * the values in the year, month, and day fields are irrelevant.  The<br>
 * opposite is true when formatting only dates.
 * @param {object} [options] 
 * @returns {String} -
*/
dojox.date.hebrew.locale.format=function(dateObject, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a reference to a bundle containing localized custom formats to be<br>
 *	 used by date/time formatting and parsing routines.<br>
 * </blockquote>
 * The user may add custom localized formats where the bundle has properties following the<br>
 * same naming convention used by dojo.cldr: `dateFormat-xxxx` / `timeFormat-xxxx`<br>
 * The pattern string should match the format used by the CLDR.<br>
 * See dojo.date.locale.format() for details.<br>
 * The resources must be loaded by dojo.requireLocalization() prior to use
 * @param {String} packageName 
 * @param {String} bundleName 
*/
dojox.date.hebrew.locale.addCustomFormats=function(packageName, bundleName){};
/**
 * @param {oblect} [options] 
 * @private
*/
dojox.date.hebrew.locale._parseInfo=function(options){};
/**
 * @param {String} locale 
 * @private
*/
dojox.date.hebrew.locale._getHebrewBundle=function(locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts the year written in Hebrew numerals to an integer<br>
 * </blockquote>
 * @param {String} year hebrew year
 * @returns {int} -
 * @example
 * 		var date = new dojox.date.hebrew.Date();
 *		 	date.setFullYear(dojox.date.hebrew.numerals.parseYearHebrewLetters('\u05ea\u05e9\u05e1\u05f4\u05d7'));
*/
dojox.date.hebrew.numerals.parseYearHebrewLetters=function(year){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts a Hebrew numeral string representing<br>
 *	 a month to an integer.  The returned value<br>
 *	 is indexed in the month name array.  To use it for<br>
 *	 setMonth, do correction for leap year<br>
 * </blockquote>
 * @param {String} monthStr 
 * @example
 * 		var date = new dojox.date.hebrew.Date();
 *			 var number = dojox.date.hebrew.numerals.parseMonthHebrewLetters("\u05ea\u05de\u05d5\u05d6"); // Tammuz
 * 		date.setMonth(number);
*/
dojox.date.hebrew.numerals.parseMonthHebrewLetters=function(monthStr){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts the string containing a Hebrew numeral to an integer<br>
 * </blockquote>
 * @param {String} day hebrew
 * @returns {int} -
 * @example
 * 		var date1 = new dojox.date.hebrew.Date();
 * 
 * 		date1.setDate(dojox.date.hebrew.numerals.parseDayHebrewLetters('\u05d0')); // ALEPH
*/
dojox.date.hebrew.numerals.parseDayHebrewLetters=function(day){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts the year from an integer to Hebrew numerals.<br>
 * </blockquote>
 * @param {Number} year 
 * @returns {String} -
 * @example
 * 		var date1 = new dojox.date.hebrew.Date();
 * 
 * 		document.writeln(dojox.date.hebrew.numerals.getYearHebrewLetters(date1.getFullYear());
*/
dojox.date.hebrew.numerals.getYearHebrewLetters=function(year){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts an integer representing a  month to a String written in Hebrew numerals<br>
 * </blockquote>
 * @param {int} month 
 * @returns {String} -
 * @example
 * 		var date1 = new dojox.date.hebrew.Date();
 * 
 * 		document.writeln(dojox.date.hebrew.numerals.getMonthHebrewLetters(date1.getMonth());
*/
dojox.date.hebrew.numerals.getMonthHebrewLetters=function(month){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts an integer to a String representing the number in Hebrew numerals.   Can be formatted with or without geresh &amp;amp;#x05f3;<br>
 * </blockquote>
 * @param {mixed} day 
 * @param {boolean} [nogrsh] 
 * @returns {String} -
 * @example
 * 		var date1 = new dojox.date.hebrew.Date();
 * 
 * 		document.writeln(dojox.date.hebrew.numerals.getDayHebrewLetters(date1.getDay());
*/
dojox.date.hebrew.numerals.getDayHebrewLetters=function(day, nogrsh){};
/**
 * @param {islamic.Date} month 
*/
dojox.date.islamic.getDaysInMonth=function(month){};
/**
 * <b>Summary:</b><blockquote>
 *	 date2 - date1<br>
 *	 date2 is islamic.Date object.  If not specified, the current islamic.Date is used.<br>
 * </blockquote>
 * @param {dojox.date.islamic.Date} date1 
 * @param {dojox.date.islamic.Date} [date2] 
 * @param {String} [interval] A string representing the interval.  One of the following:
 * &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot;,<br>
 * &quot;millisecond&quot;,  &quot;week&quot;, &quot;weekday&quot;<br>
 * Defaults to &quot;day&quot;.
 * @returns {Number (integer)} -
*/
dojox.date.islamic.difference=function(date1, date2, interval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Compare two islamic date objects by date, time, or both.<br>
 * </blockquote>
 * Returns 0 if equal, positive if a &gt; b, else negative.
 * @param {islamic.Date} date1 object
 * @param {islamic.Date} date2 object.  If not specified, the current islamic.Date is used.
 * @param {String} [portion] A string indicating the &quot;date&quot; or &quot;time&quot; portion of a Date object.
 * Compares both &quot;date&quot; and &quot;time&quot; by default.  One of the following:<br>
 * &quot;date&quot;, &quot;time&quot;, &quot;datetime&quot;<br>
*/
dojox.date.islamic.compare=function(date1, date2, portion){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add to a Date in intervals of different size, from milliseconds to years<br>
 * </blockquote>
 * @param {dojox.date.islamic.Date} date islamic.Date Date object to start with
 * @param {String} interval A string representing the interval.  One of the following:
 * &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot;,<br>
 * &quot;millisecond&quot;, &quot;week&quot;, &quot;weekday&quot;
 * @param {int} amount How much to add to the date.
 * @returns {dojox.date.islamic.Date} -
*/
dojox.date.islamic.add=function(date, interval, amount){};
/**
 * <b>Summary:</b><blockquote>
 *	 The component defines the Islamic (Hijri) Calendar Object<br>
 * </blockquote>
 * This module is similar to the Date() object provided by JavaScript
 * @example
 * 	dojo.require("dojox.date.islamic.Date");
 * 
 * 	var date = new dojox.date.islamic.Date();
 * 	document.writeln(date.getFullYear()+'\'+date.getMonth()+'\'+date.getDate());
*/
dojox.date.islamic.Date=function(){};
/**
 * @namespace
*/
dojox.date.islamic.locale={};
/**
 * <b>Summary:</b><blockquote>
 *	 The component defines the Islamic (Hijri) Calendar Object<br>
 * </blockquote>
 * This module is similar to the Date() object provided by JavaScript
 * @class
 * @returns {dojox.date.islamic.Date} new instance
 * @example
 * 	dojo.require("dojox.date.islamic.Date");
 * 
 * 	var date = new dojox.date.islamic.Date();
 * 	document.writeln(date.getFullYear()+'\'+date.getMonth()+'\'+date.getDate());
*/
dojox.date.islamic.Date=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function returns The stored time value in milliseconds<br>
 *	 since midnight, January 1, 1970 UTC<br>
 * </blockquote>
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.valueOf=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This returns a string representation of the date in &amp;quot;DDDD MMMM DD YYYY HH:MM:SS&amp;quot; format<br>
 * </blockquote>
 * @example
 * 		var date1 = new dojox.date.islamic.Date();
 * 		document.writeln(date1.toString());
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This returns the equevalent Grogorian date value in Date object<br>
 * </blockquote>
 * @example
 * 		var dateIslamic = new dojox.date.islamic.Date(1429,11,20);
 * 		var dateGregorian = dateIslamic.toGregorian();
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.toGregorian=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the seconds (0-59) only.<br>
 * </blockquote>
 * @param {Number} seconds 
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.setSeconds=function(seconds){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function set Month<br>
 * </blockquote>
 * @param {number} month 
 * @example
 * 		var date1 = new dojox.date.islamic.Date();
 * 		date1.setMonth(2);
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.setMonth=function(month){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the minutes (0-59) only.<br>
 * </blockquote>
 * @param {Number} minutes 
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.setMinutes=function(minutes){};
/**
 * @param {Number} milliseconds 
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.setMilliseconds=function(milliseconds){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the Hours<br>
 * </blockquote>
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.setHours=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function set Year<br>
 * </blockquote>
 * @param {number} year 
 * @example
 * 		var date1 = new dojox.date.islamic.Date();
 * 		date1.setYear(1429);
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.setFullYear=function(year){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function sets the Date<br>
 * </blockquote>
 * @param {number} date 
 * @example
 * 		var date1 = new dojox.date.islamic.Date();
 * 		date1.setDate(2);
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.setDate=function(date){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the seconde value<br>
 * </blockquote>
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.getSeconds=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function return the month value ( 0 - 11 )<br>
 * </blockquote>
 * @example
 * 		var date1 = new dojox.date.islamic.Date();
 * 
 * 		document.writeln(date1.getMonth()+1);
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.getMonth=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the Minuites value<br>
 * </blockquote>
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.getMinutes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the Milliseconds value<br>
 * </blockquote>
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.getMilliseconds=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the Hour value<br>
 * </blockquote>
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.getHours=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function return the Year value<br>
 * </blockquote>
 * @example
 * 		var date1 = new dojox.date.islamic.Date();
 * 
 * 		document.writeln(date1.getFullYear());
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.getFullYear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the number of days in the given Islamic Month<br>
 * </blockquote>
 * @param {Number} month dojox.date.islamic.Date
 * @param {Number} year 
 * @returns {dojox.date.islamic.Date} -
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.getDaysInIslamicMonth=function(month, year){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function return Week Day value ( 0 - 6 )<br>
 * </blockquote>
 * @example
 * 		var date1 = new dojox.date.islamic.Date();
 * 
 * 		document.writeln(date1.getDay());
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.getDay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function returns the date value (1 - 30)<br>
 * </blockquote>
 * @example
 * 		var date1 = new dojox.date.islamic.Date();
 * 
 * 		document.writeln(date1.getDate);
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.getDate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function returns the equivalent Islamic Date value for the Gregorian Date<br>
 * </blockquote>
 * @param {Date} gdate 
 * @example
 * 		var dateIslamic = new dojox.date.islamic.Date();
 * 		var dateGregorian = new Date(2008,10,12);
 * 		dateIslamic.fromGregorian(dateGregorian);
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype.fromGregorian=function(gdate){};
/**
 * <b>Summary:</b><blockquote>
 *	 return start of Islamic year<br>
 * </blockquote>
 * @param {Number} year 
 * @private
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype._yearStart=function(year){};
/**
 * <b>Summary:</b><blockquote>
 *	 return the start of Islamic Month<br>
 * </blockquote>
 * @param {Number} year 
 * @param {Number} month 
 * @private
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype._monthStart=function(year, month){};
/**
 * @param {mixed} a 
 * @param {mixed} b 
 * @private
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype._mod=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 return Boolean value if Islamic leap year<br>
 * </blockquote>
 * @param {Number} year 
 * @private
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype._civilLeapYear=function(year){};
/**
 * @param {Number} seconds 
 * @private
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype._addSeconds=function(seconds){};
/**
 * @param {Number} minutes 
 * @private
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype._addMinutes=function(minutes){};
/**
 * @param {Number} milliseconds 
 * @private
 * @memberOf dojox.date.islamic.Date
*/
dojox.date.islamic.Date.prototype._addMilliseconds=function(milliseconds){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds the regular needed to parse a islamic.Date<br>
 * </blockquote>
 * @param {object} [options] 
 * @returns {String} -
*/
dojox.date.islamic.locale.regexp=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function parse string date value according to options<br>
 * </blockquote>
 * @param {String} value 
 * @param {Object} [options] 
*/
dojox.date.islamic.locale.parse=function(value, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used to get localized strings from dojo.cldr for day or month names.<br>
 * </blockquote>
 * @param {String} item 
 * @param {String} type 
 * @param {String} [context] 
 * @param {String} [locale] 
 * @param {islamic} date Date Object?
*/
dojox.date.islamic.locale.getNames=function(item, type, context, locale, date){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format a Date object as a String, using  settings.<br>
 * </blockquote>
 * @param {islamic.Date} dateObject 
 * @param {Object} [options] 
 * @returns {String} -
*/
dojox.date.islamic.locale.format=function(dateObject, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a reference to a bundle containing localized custom formats to be<br>
 *	 used by date/time formatting and parsing routines.<br>
 * </blockquote>
 * @param {String} packageName 
 * @param {String} bundleName 
*/
dojox.date.islamic.locale.addCustomFormats=function(packageName, bundleName){};
/**
 * @param {oblect} [options] 
 * @private
*/
dojox.date.islamic.locale._parseInfo=function(options){};
/**
 * @param {String} locale 
 * @private
*/
dojox.date.islamic.locale._getIslamicBundle=function(locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get a formatted string for a given date object<br>
 * </blockquote>
 * @param {Date} date 
 * @param {String} format 
*/
dojox.date.php.format=function(date, format){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format the internal date object<br>
 * </blockquote>
 * @param {String} format 
*/
dojox.date.php.DateFormat=function(format){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format the internal date object<br>
 * </blockquote>
 * @class
 * @returns {dojox.date.php.DateFormat} new instance
*/
dojox.date.php.DateFormat=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The day of the year (starting from 0)<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.z=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A two digit representation of a year<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.y=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Numeric representation of the day of the week<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.w=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Number of days in the given month<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.t=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Seconds, with leading zeros<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.s=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 RFC 2822 formatted date<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.r=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 ISO-8601 year number. This has the same value as Y, except that if<br>
 *	 the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)<br>
 *	 TODO: Figure out what this means<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.o=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Numeric representation of a month, without leading zeros<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.n=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Numeric representation of a month, with leading zeros<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.m=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A full textual representation of the day of the week<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.l=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Day of the month without leading zeros<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.j=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Minutes with leading zeros<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.i=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 12-hour format of an hour with leading zeros<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.h=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 12-hour format of an hour without leading zeros<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.g=function(){};
/**
 * @param {Date} date 
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.format=function(date){};
/**
 * <b>Summary:</b><blockquote>
 *	 Timezone identifier (added in PHP 5.1.0)<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.e=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Day of the month, 2 digits with leading zeros<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.d=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 ISO 8601 date (added in PHP 5)<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.c=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Uppercase Ante meridiem and Post meridiem<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.b=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Lowercase Ante meridiem and Post meridiem<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.a=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Timezone offset in seconds. The offset for timezones west of UTC is always negative,<br>
 *	 and for those east of UTC is always positive.<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.Z=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A full numeric representation of a year, 4 digits<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.Y=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0)<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.W=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.U=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Timezone abbreviation<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.T=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 English ordinal suffix for the day of the month, 2 characters<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.S=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.P=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Difference to Greenwich time (GMT) in hours<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.O=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.N=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A short textual representation of a month, three letters<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.M=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Whether it's a leap year<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.L=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Whether or not the date is in daylight saving time<br>
 *	 TODO: Can dojo.date do this?<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.I=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 24-hour format of an hour with leading zeros<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.H=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 24-hour format of an hour without leading zeros<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.G=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A full textual representation of a month, such as January or March<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.F=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A textual representation of a day, three letters<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.D=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Swatch Internet time<br>
 *	 A day is 1,000 beats. All time is measured from GMT + 1<br>
 * </blockquote>
 * @memberOf dojox.date.php.DateFormat
*/
dojox.date.php.DateFormat.prototype.B=function(){};
/**
 * @class
 * @returns {dojox.date.php.DateFormat.format} new instance
*/
dojox.date.php.DateFormat.format=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Formats the date object using the specifications of the POSIX strftime function<br>
 * </blockquote>
 * see http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html
 * @see reference <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html">http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html</a>
 * @param {Date} dateObject 
 * @param {String} format 
 * @param {String} [locale] 
 * @returns {String} -
*/
dojox.date.posix.strftime=function(dateObject, format, locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the ISO8601 week number of the given date.<br>
 *	 The week containing January 4th is the first week of the year.<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @param {Number} week can be positive or negative: -1 is the year's last week.
 * @returns {Date} -
*/
dojox.date.posix.setIsoWeekOfYear=function(dateObject, week){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a date object representing the first day of the given<br>
 *	 date's week.<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @param {Number} firstDay 
 * @returns {Date} -
*/
dojox.date.posix.getStartOfWeek=function(dateObject, firstDay){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determine the number of ISO8601 weeks in the year of the given<br>
 *	 date. Most years have 52 but some have 53.<br>
 *	 See http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm<br>
 * </blockquote>
 * @see reference <a href="http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm">http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm</a>
 * @param {Date} dateObject 
 * @returns {Integer} -
*/
dojox.date.posix.getIsoWeeksInYear=function(dateObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the ISO8601 week number of the given date.<br>
 *	 The week containing January 4th is the first week of the year.<br>
 *	 See http://en.wikipedia.org/wiki/ISO_week_date<br>
 * </blockquote>
 * @see reference <a href="http://en.wikipedia.org/wiki/ISO_week_date">http://en.wikipedia.org/wiki/ISO_week_date</a>
 * @param {Date} dateObject 
 * @returns {Integer} -
*/
dojox.date.posix.getIsoWeekOfYear=function(dateObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format a Date object as a String, using locale-specific settings,<br>
 *	 relative to the current date or some other date.<br>
 * </blockquote>
 * Create a string from a Date object using the most significant information<br>
 * and a known localized pattern.  This method formats both the date and<br>
 * time from dateObject.  Formatting patterns are chosen appropriate to<br>
 * the locale.<br>
 * <br>
 * If the day portion of the date falls within the current date (or the<br>
 * relativeDate option, if present), then the time will be all that<br>
 * is displayed<br>
 * <br>
 * If the day portion of the date falls within the past week (or the<br>
 * week preceeding relativeDate, if present), then the display will show<br>
 * day of week and time.  This functionality can be turned off by setting<br>
 * weekCheck to false.<br>
 * <br>
 * If the year portion of the date falls within the current year (or the<br>
 * year portion of relativeDate, if present), then the display will show<br>
 * month and day.<br>
 * <br>
 * Otherwise, this function is equivalent to calling dojo.date.format with<br>
 * formatLength of "medium"
 * @param {Date} dateObject the date and time to be formatted.
 * @param {dojox.date.relative.__FormatOptions} [options] 
*/
dojox.date.relative.format=function(dateObject, options){};
/**
 * @private
*/
dojox.date.relative.__FormatOptions=function(){};
/**
 * @class
 * @private
 * @returns {dojox.date.relative.__FormatOptions} new instance
*/
dojox.date.relative.__FormatOptions=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads the given data object into the zone database<br>
 * </blockquote>
 * @param {Object} data The data to load - contains &quot;zones&quot; and &quot;rules&quot; parameters
*/
dojox.date.timezone.loadZoneData=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the timezone information for the given date and<br>
 *	 timezone string<br>
 * </blockquote>
 * @param {Date} dt The Date - a &quot;proxyDate&quot;
 * @param {String} tz String representation of the timezone you want to get info
 * for date<br>
*/
dojox.date.timezone.getTzInfo=function(dt, tz){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an array of zones that have been loaded<br>
 * </blockquote>
*/
dojox.date.timezone.getAllZones=function(){};
/**
 * @namespace
*/
dojox._ddl={};
/**
 * @param {mixed} dateObject 
 * @param {mixed} options 
*/
dojox._ddl.format=function(dateObject, options){};
/**
 * @param {mixed} dateObject 
 * @param {mixed} getName 
 * @param {mixed} options 
 * @private
*/
dojox._ddl._getZone=function(dateObject, getName, options){};
/**
*/
dojox.dnd.Selector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Allows the user draw bounding boxes around nodes on the page.<br>
 *	 Publishes to the &amp;quot;/dojox/dnd/bounding&amp;quot; topic to tell the selector to check<br>
 *	 to see whether any dnd items fall within the coordinates of the bounding box<br>
 * </blockquote>
 * @param {Array:} sources an array of dojox.dnd.Selectors which need to be aware of
 * the positioning of the bounding box.
 * @param {String|DomNode:} domNode the DOM node or id which represents the bounding box on the page.
*/
dojox.dnd.BoundingBoxController=function(sources, domNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Allows the user draw bounding boxes around nodes on the page.<br>
 *	 Publishes to the &amp;quot;/dojox/dnd/bounding&amp;quot; topic to tell the selector to check<br>
 *	 to see whether any dnd items fall within the coordinates of the bounding box<br>
 * </blockquote>
 * @class
 * @param {Array:} sources an array of dojox.dnd.Selectors which need to be aware of
 * the positioning of the bounding box.
 * @param {String|DomNode:} domNode the DOM node or id which represents the bounding box on the page.
 * @returns {dojox.dnd.BoundingBoxController} new instance
*/
dojox.dnd.BoundingBoxController=function(sources, domNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override-able by the client as an extra check to ensure that a bounding<br>
 *	 box should begin to be drawn. If the client has any preconditions to when a<br>
 *	 bounding box should be drawn, they should be included in this method.<br>
 * </blockquote>
 * @param {Object:} evt the mouse event which caused this callback to fire.
 * @memberOf dojox.dnd.BoundingBoxController
*/
dojox.dnd.BoundingBoxController.prototype.shouldStartDrawingBox=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 prepares this object to be garbage-collected<br>
 * </blockquote>
 * @memberOf dojox.dnd.BoundingBoxController
*/
dojox.dnd.BoundingBoxController.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override-able by the client as an extra check to ensure that a bounding<br>
 *	 box is viable. In some instances, it might not make sense that<br>
 *	 a mouse down -&amp;gt; mouse move -&amp;gt; mouse up interaction represents a bounding box.<br>
 *	 For example, if a dialog is open the client might want to suppress a bounding<br>
 *	 box. This function could be used by the client to ensure that a bounding box is only<br>
 *	 drawn on the document when certain conditions are met.<br>
 * </blockquote>
 * @param {Object:} evt the mouse event which caused this callback to fire.
 * @memberOf dojox.dnd.BoundingBoxController
*/
dojox.dnd.BoundingBoxController.prototype.boundingBoxIsViable=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Executed when the users mouses up on the document. Checks to see<br>
 *	 whether the user was drawing a bounding box and publishes to the<br>
 *	 &amp;quot;/dojox/dnd/bounding&amp;quot; topic if the user is finished drawing their bounding box.<br>
 * </blockquote>
 * @param {Object:} evt the mouse event which caused this callback to fire.
 * @private
 * @memberOf dojox.dnd.BoundingBoxController
*/
dojox.dnd.BoundingBoxController.prototype._onMouseUp=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Executed when the user moves the mouse over the document. Delegates to<br>
 *	 this._drawBoundingBox if the user is trying to draw a bounding box.<br>
 *	 whether the user was drawing a bounding box and publishes to the<br>
 *	 &amp;quot;/dojox/dnd/bounding&amp;quot; topic if the user is finished drawing their bounding box.<br>
 * </blockquote>
 * @param {Object:} evt the mouse event which caused this callback to fire.
 * @private
 * @memberOf dojox.dnd.BoundingBoxController
*/
dojox.dnd.BoundingBoxController.prototype._onMouseMove=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Executed when the user mouses down on the document. Resets the<br>
 *	 this._startX and this._startY member variables.<br>
 * </blockquote>
 * @param {Object:} evt the mouse event which caused this callback to fire.
 * @private
 * @memberOf dojox.dnd.BoundingBoxController
*/
dojox.dnd.BoundingBoxController.prototype._onMouseDown=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 hide the bounding box and reset for the next time around<br>
 * </blockquote>
 * @private
 * @memberOf dojox.dnd.BoundingBoxController
*/
dojox.dnd.BoundingBoxController.prototype._finishSelecting=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 draws the bounding box over the document.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.dnd.BoundingBoxController
*/
dojox.dnd.BoundingBoxController.prototype._drawBoundingBox=function(){};
/**
 * @class
 * @extends dojo.dnd.Selector
 * @returns {dojox.dnd.Selector} new instance
*/
dojox.dnd.Selector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 shifts the currently selected dnd item forwards and backwards.<br>
 *	 One possible use would be to allow a user select different<br>
 *	 dnd items using the right and left keys.<br>
 * </blockquote>
 * @param {Boolean:} toNext If true, we select the next node, otherwise the previous one.
 * @param {Boolean:} [add] If true, add to selection, otherwise current selection is
 * removed before adding any nodes.
 * @memberOf dojox.dnd.Selector
*/
dojox.dnd.Selector.prototype.shift=function(toNext, add){};
/**
 * <b>Summary:</b><blockquote>
 *	 selects a node<br>
 * </blockquote>
 * @param {String|DomNode:} node Node to select (id or DOM Node)
 * @param {Boolean:} [add] If true, node is added to selection, otherwise current
 * selection is removed, and node will be the only selection.
 * @returns {self} -
 * @memberOf dojox.dnd.Selector
*/
dojox.dnd.Selector.prototype.selectNode=function(node, add){};
/**
 * <b>Summary:</b><blockquote>
 *	 selects nodes by bounding box<br>
 * </blockquote>
 * @param {Number:} left Left coordinate of the bounding box
 * @param {Number:} top Top coordinate of the bounding box
 * @param {Number:} right Right coordinate of the bounding box
 * @param {Number:} bottom Bottom coordinate of the bounding box
 * @param {Boolean:} [add] If true, node is added to selection, otherwise current
 * selection is removed, and node will be the only selection.
 * @returns {self} -
 * @memberOf dojox.dnd.Selector
*/
dojox.dnd.Selector.prototype.selectByBBox=function(left, top, right, bottom, add){};
/**
 * <b>Summary:</b><blockquote>
 *	 checks if node is selected<br>
 * </blockquote>
 * @param {String|DomNode:} node Node to check (id or DOM Node)
 * @returns {Boolean} -
 * @memberOf dojox.dnd.Selector
*/
dojox.dnd.Selector.prototype.isSelected=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 deselects a node<br>
 * </blockquote>
 * @param {String|DomNode:} node Node to deselect (id or DOM Node)
 * @returns {self} -
 * @memberOf dojox.dnd.Selector
*/
dojox.dnd.Selector.prototype.deselectNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 logic which determines whether a node is bounded by the<br>
 *	 left,top,right,bottom parameters. Allows for the case where<br>
 *	 any section of the box determined by the left,top,right,bottom parameters<br>
 *	 overlapping the coordinates of the node parameter constitutes a true<br>
 *	 return value<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} left 
 * @param {mixed} top 
 * @param {mixed} right 
 * @param {mixed} bottom 
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.dnd.Selector
*/
dojox.dnd.Selector.prototype._liberalBBLogic=function(node, left, top, right, bottom){};
/**
 * <b>Summary:</b><blockquote>
 *	 figures out whether certain coodinates bound a particular<br>
 *	 dom node.<br>
 * </blockquote>
 * @param {String|DomNode:} node Node to check (id or DOM Node)
 * @param {Number:} left Left coordinate of the bounding box
 * @param {Number:} top Top coordinate of the bounding box
 * @param {Number:} right Right coordinate of the bounding box
 * @param {Number:} bottom Bottom coordinate of the bounding box
 * @private
 * @memberOf dojox.dnd.Selector
*/
dojox.dnd.Selector.prototype._isBoundedByBox=function(node, left, top, right, bottom){};
/**
 * <b>Summary:</b><blockquote>
 *	 finds a next/previous node in relation to nodeId<br>
 * </blockquote>
 * @param {String:} nodeId the id of the node to use as the base node
 * @param {Boolean:} toNext If true, we select the next node, otherwise the previous one.
 * @private
 * @memberOf dojox.dnd.Selector
*/
dojox.dnd.Selector.prototype._getNodeId=function(nodeId, toNext){};
/**
 * <b>Summary:</b><blockquote>
 *	 logic which determines whether a node is bounded by the<br>
 *	 left,top,right,bottom parameters. This function returns true<br>
 *	 only if the coordinates of the node parameter are fully<br>
 *	 encompassed by the box determined by the left, top, right, bottom parameters.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} left 
 * @param {mixed} top 
 * @param {mixed} right 
 * @param {mixed} bottom 
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.dnd.Selector
*/
dojox.dnd.Selector.prototype._conservativeBBLogic=function(node, left, top, right, bottom){};
/**
 * @param {mixed} item 
 * @param {mixed} type 
*/
dojox.drawing.register=function(item, type){};
/**
 * @param {mixed} type 
 * @param {mixed} id 
*/
dojox.drawing.getRegistered=function(type, id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Drawing is a project that sits on top of DojoX GFX and uses SVG and<br>
 *	 VML vector graphics to draw and display.<br>
 * </blockquote>
 * Drawing is similar to DojoX Sketch, but is designed to be more versatile<br>
 * extendable and customizable.<br>
 * Drawing currently only initiates from HTML although it's technically not<br>
 * a Dijit to keep the file size light. But if Dijit is available, Drawing<br>
 * will register itself with it and can be accessed dijit.byId('myDrawing')<br>
 * <br>
 * NOTES:<br>
 * Although not Drawing and Toolbar, all other objects are created with a custom<br>
 * declare. See dojox.drawing.util.oo<br>
 * <br>
 * The files are laid out as such:<br>
 * - Drawing<br>
 * The master class. More than one instance of a Drawing can be placed<br>
 * on a page at one time (although this has not yet been tested). Plugins<br>
 * can be added in markup.<br>
 * - Toolbar<br>
 * Like Drawing, Toolbar is a psudeo Dijit that does not need Dijit. It is<br>
 * optional. It can be oriented horizontal or vertical by placing one of<br>
 * those params in the class (at least one is required).  Plugins<br>
 * can be added in markup. A drawingId is required to point toolbar to<br>
 * the drawing.<br>
 * - defaults<br>
 * Contains the default styles and dimensions for Stencils. An individual<br>
 * Stencil can be changed by calling stencil.att({color obj}); To change<br>
 * all styles, a custom defaults file should be used.<br>
 * -Stencils<br>
 * Drawing uses a concept of 'Stencils' to avoid confusion between a<br>
 * Dojox Shape and a Drawing Shape. The classes in the 'stencils' package<br>
 * are display only, they are not used for actually drawing (see 'tools').<br>
 * This package contains _Base from which stencils inherit most of their<br>
 * methods.(Path and Image are display only and not found in Tools)<br>
 * - Tools<br>
 * The Tools package contains Stencils that are attached to mouse events<br>
 * and can be used for drawing. Items in this package can also be selected<br>
 * and modified.<br>
 * - Tools / Custom<br>
 * Holds tools that do not directly extend Stencil base classes and often<br>
 * have very custom code.<br>
 * - Library (not implemented)<br>
 * The Library package, which is not yet implemented, will be the place to<br>
 * hold stencils that have very specific data points that result in a picture.<br>
 * Flag-like-banners, fancy borders, or other complex shapes would go here.<br>
 * - Annotations<br>
 * Annotations 'decorate' and attach to other Stencils, such as a 'Label'<br>
 * that can show text on a stencil, or an 'Angle' that shows while dragging<br>
 * or modifying a Vector, or an Arrow head that is attached to the beginning<br>
 * or end of a line.<br>
 * - Manager<br>
 * Contains classes that control functionality of a Drawing.<br>
 * - Plugins<br>
 * Contains optional classes that are 'plugged into' a Drawing. There are two<br>
 * types: 'drawing' plugins that modify the canvas, and 'tools' which would<br>
 * show in the toolbar.<br>
 * - Util<br>
 * A collection of common tasks.
 * @param {Object} props 
 * @param {HTMLNode} node 
 * @example
 * 	&lt;div dojoType="dojox.drawing.Drawing" id="drawing" defaults="myCustom.defaults"
 * 		plugins="[{'name':'dojox.drawing.plugins.drawing.Grid', 'options':{gap:100}}]"&gt;
 *	&lt;/div&gt;
 * @example
 * 	&lt;div dojoType="dojox.drawing.Toolbar" drawingId="drawing" class="drawingToolbar vertical"&gt;
 * 		&lt;div tool="dojox.drawing.tools.Line" selected="false"&gt;Line&lt;/div&gt;
 * 		&lt;div tool="dojox.drawing.tools.Rect" selected="false"&gt;Rect&lt;/div&gt;
 * 		&lt;div tool="dojox.drawing.tools.Ellipse" selected="false"&gt;Ellipse&lt;/div&gt;
 * 		&lt;div tool="dojox.drawing.tools.TextBlock" selected="false"&gt;Statement&lt;/div&gt;
 * 		&lt;div tool="dojox.drawing.tools.custom.Equation" selected="false"&gt;Equation&lt;/div&gt;
 * 		&lt;div plugin="dojox.drawing.plugins.tools.Pan" options="{}"&gt;Pan&lt;/div&gt;
 * 		&lt;div plugin="dojox.drawing.plugins.tools.Zoom" options="{zoomInc:.1,minZoom:.5,maxZoom:2}"&gt;Zoom&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.drawing.Drawing=function(props, node){};
/**
 * @namespace
*/
dojox.drawing.util={};
/**
 * @namespace
*/
dojox.drawing.ui={};
/**
 * @namespace
*/
dojox.drawing.tools={};
/**
 * @namespace
*/
dojox.drawing.stencil={};
/**
 * @namespace
*/
dojox.drawing.plugins={};
/**
 * @namespace
*/
dojox.drawing.manager={};
/**
 * @namespace
*/
dojox.drawing.library={};
/**
 * @namespace
*/
dojox.drawing.defaults={};
/**
 * @namespace
*/
dojox.drawing.annotations={};
/**
*/
dojox.drawing.defaults.copy=function(){};
/**
 * @namespace
*/
dojox.drawing.defaults.textMode={};
/**
 * @namespace
*/
dojox.drawing.defaults.textDisabled={};
/**
 * @namespace
*/
dojox.drawing.defaults.text={};
/**
 * @namespace
*/
dojox.drawing.defaults.selected={};
/**
 * @namespace
*/
dojox.drawing.defaults.norm={};
/**
 * @namespace
*/
dojox.drawing.defaults.hitSelected={};
/**
 * @namespace
*/
dojox.drawing.defaults.hitNorm={};
/**
 * @namespace
*/
dojox.drawing.defaults.hitHighlighted={};
/**
 * @namespace
*/
dojox.drawing.defaults.highlighted={};
/**
 * @namespace
*/
dojox.drawing.defaults.disabled={};
/**
 * @namespace
*/
dojox.drawing.defaults.button={};
/**
 * @namespace
*/
dojox.drawing.defaults.arrows={};
/**
 * @namespace
*/
dojox.drawing.defaults.anchors={};
/**
 * @namespace
*/
dojox.drawing.defaults.hitNorm.fill={};
/**
 * @namespace
*/
dojox.drawing.defaults.hitNorm.color={};
/**
 * @namespace
*/
dojox.drawing.defaults.hitSelected.fill={};
/**
 * @namespace
*/
dojox.drawing.defaults.hitHighlighted.fill={};
/**
 * @namespace
*/
dojox.drawing.defaults.textMode.edit={};
/**
 * @namespace
*/
dojox.drawing.defaults.textMode.create={};
/**
 * @namespace
*/
dojox.drawing.defaults.button.selected={};
/**
 * @namespace
*/
dojox.drawing.defaults.button.over={};
/**
 * @namespace
*/
dojox.drawing.defaults.button.norm={};
/**
 * @namespace
*/
dojox.drawing.defaults.button.icon={};
/**
 * @namespace
*/
dojox.drawing.defaults.button.down={};
/**
 * @namespace
*/
dojox.drawing.defaults.button.norm.fill={};
/**
 * @namespace
*/
dojox.drawing.defaults.button.over.fill={};
/**
 * @namespace
*/
dojox.drawing.defaults.button.down.fill={};
/**
 * @namespace
*/
dojox.drawing.defaults.button.selected.fill={};
/**
 * @namespace
*/
dojox.drawing.defaults.button.icon.selected={};
/**
 * @namespace
*/
dojox.drawing.defaults.button.icon.norm={};
/**
 * <b>Summary:</b><blockquote>
 *	 Drawing is a project that sits on top of DojoX GFX and uses SVG and<br>
 *	 VML vector graphics to draw and display.<br>
 * </blockquote>
 * Drawing is similar to DojoX Sketch, but is designed to be more versatile<br>
 * extendable and customizable.<br>
 * Drawing currently only initiates from HTML although it's technically not<br>
 * a Dijit to keep the file size light. But if Dijit is available, Drawing<br>
 * will register itself with it and can be accessed dijit.byId('myDrawing')<br>
 * <br>
 * NOTES:<br>
 * Although not Drawing and Toolbar, all other objects are created with a custom<br>
 * declare. See dojox.drawing.util.oo<br>
 * <br>
 * The files are laid out as such:<br>
 * - Drawing<br>
 * The master class. More than one instance of a Drawing can be placed<br>
 * on a page at one time (although this has not yet been tested). Plugins<br>
 * can be added in markup.<br>
 * - Toolbar<br>
 * Like Drawing, Toolbar is a psudeo Dijit that does not need Dijit. It is<br>
 * optional. It can be oriented horizontal or vertical by placing one of<br>
 * those params in the class (at least one is required).  Plugins<br>
 * can be added in markup. A drawingId is required to point toolbar to<br>
 * the drawing.<br>
 * - defaults<br>
 * Contains the default styles and dimensions for Stencils. An individual<br>
 * Stencil can be changed by calling stencil.att({color obj}); To change<br>
 * all styles, a custom defaults file should be used.<br>
 * -Stencils<br>
 * Drawing uses a concept of 'Stencils' to avoid confusion between a<br>
 * Dojox Shape and a Drawing Shape. The classes in the 'stencils' package<br>
 * are display only, they are not used for actually drawing (see 'tools').<br>
 * This package contains _Base from which stencils inherit most of their<br>
 * methods.(Path and Image are display only and not found in Tools)<br>
 * - Tools<br>
 * The Tools package contains Stencils that are attached to mouse events<br>
 * and can be used for drawing. Items in this package can also be selected<br>
 * and modified.<br>
 * - Tools / Custom<br>
 * Holds tools that do not directly extend Stencil base classes and often<br>
 * have very custom code.<br>
 * - Library (not implemented)<br>
 * The Library package, which is not yet implemented, will be the place to<br>
 * hold stencils that have very specific data points that result in a picture.<br>
 * Flag-like-banners, fancy borders, or other complex shapes would go here.<br>
 * - Annotations<br>
 * Annotations 'decorate' and attach to other Stencils, such as a 'Label'<br>
 * that can show text on a stencil, or an 'Angle' that shows while dragging<br>
 * or modifying a Vector, or an Arrow head that is attached to the beginning<br>
 * or end of a line.<br>
 * - Manager<br>
 * Contains classes that control functionality of a Drawing.<br>
 * - Plugins<br>
 * Contains optional classes that are 'plugged into' a Drawing. There are two<br>
 * types: 'drawing' plugins that modify the canvas, and 'tools' which would<br>
 * show in the toolbar.<br>
 * - Util<br>
 * A collection of common tasks.
 * @class
 * @param {Object} props 
 * @param {HTMLNode} node 
 * @returns {dojox.drawing.Drawing} new instance
 * @example
 * 	&lt;div dojoType="dojox.drawing.Drawing" id="drawing" defaults="myCustom.defaults"
 * 		plugins="[{'name':'dojox.drawing.plugins.drawing.Grid', 'options':{gap:100}}]"&gt;
 *	&lt;/div&gt;
 * @example
 * 	&lt;div dojoType="dojox.drawing.Toolbar" drawingId="drawing" class="drawingToolbar vertical"&gt;
 * 		&lt;div tool="dojox.drawing.tools.Line" selected="false"&gt;Line&lt;/div&gt;
 * 		&lt;div tool="dojox.drawing.tools.Rect" selected="false"&gt;Rect&lt;/div&gt;
 * 		&lt;div tool="dojox.drawing.tools.Ellipse" selected="false"&gt;Ellipse&lt;/div&gt;
 * 		&lt;div tool="dojox.drawing.tools.TextBlock" selected="false"&gt;Statement&lt;/div&gt;
 * 		&lt;div tool="dojox.drawing.tools.custom.Equation" selected="false"&gt;Equation&lt;/div&gt;
 * 		&lt;div plugin="dojox.drawing.plugins.tools.Pan" options="{}"&gt;Pan&lt;/div&gt;
 * 		&lt;div plugin="dojox.drawing.plugins.tools.Zoom" options="{zoomInc:.1,minZoom:.5,maxZoom:2}"&gt;Zoom&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.drawing.Drawing=function(props, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroys current tool<br>
 * </blockquote>
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.unSetTool=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call a function within all selected Stencils<br>
 *	 like attr()<br>
 * </blockquote>
 * @param {String} func 
 * @example
 * 	myDrawing.toSelected('attr', {x:10})
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.toSelected=function(func){};
/**
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets up a new class to be used to draw. Called from Toolbar,<br>
 *	 and this class... after a tool is used a new one of the same<br>
 *	 type is initialized. Could be called externally.<br>
 * </blockquote>
 * @param {String} type 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.setTool=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Drawing registers as a widget and needs to support<br>
 *	 widget's api.<br>
 * </blockquote>
 * @param {mixed} name 
 * @param {mixed} value 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.set=function(name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Selects all stencils<br>
 * </blockquote>
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.selectAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resizes the canvas.<br>
 *	 If within a ContentPane this will get called automatically.<br>
 *	 Can also be called directly.<br>
 * </blockquote>
 * @param {Object} box 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.resize=function(box){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use this method to programmatically remove Stencils from the canvas.<br>
 *	 arguments:<br>
 *	 Stencil: Object<br>
 *	 The Stencil to be removed<br>
 * </blockquote>
 * @param {Object} stencil 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.removeStencil=function(stencil){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deletes all Stencils on the canvas.<br>
 * </blockquote>
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.removeAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Registers a tool that can be accessed. Internal.<br>
 * </blockquote>
 * @param {String} type 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.registerTool=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event that to which can be connected.<br>
 *	 Fired when the canvas is ready and can be drawn to.<br>
 * </blockquote>
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.onSurfaceReady=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event that fires when a stencil is drawn. Does not fire from<br>
 *	 'addStencil'.<br>
 *	 <br>
 *	 console.info(&amp;quot;--------------------------------------dojox.drawing.onRenderStencil:&amp;quot;, stencil.id);<br>
 * </blockquote>
 * @param {Object} stencil 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.onRenderStencil=function(stencil){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired from a stencil that has destroyed itself<br>
 *	 will also be called when it is removed by &amp;quot;removeStencil&amp;quot;<br>
 *	 or stencils.onDelete.<br>
 * </blockquote>
 * @param {Object} stencil 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.onDeleteStencil=function(stencil){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called from Toolbar after a plugin has been loaded<br>
 *	 The call to this coming from toobar is a bit funky as the timing<br>
 *	 of IE for canvas load is different than other browsers<br>
 * </blockquote>
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.initPlugins=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles an Array of stencil data and imports the objects<br>
 *	 to the drawing.<br>
 * </blockquote>
 * @param {Array} objects 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.importer=function(objects){};
/**
 * <b>Summary:</b><blockquote>
 *	 The common objects that are mixed into<br>
 *	 a new Stencil. Mostly internal, but could be used.<br>
 * </blockquote>
 * @param {Object} data 
 * @param {mixed} mode 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.getShapeProps=function(data, mode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a Stencil constructor base on<br>
 *	 abbreviation<br>
 * </blockquote>
 * @param {String} abbr 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.getConstructor=function(abbr){};
/**
 * <b>Summary:</b><blockquote>
 *	 Collects all Stencil data and returns an<br>
 *	 Array of objects.<br>
 * </blockquote>
 * @returns {Array} -
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.exporter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Change the defaults so that all Stencils from this<br>
 *	 point on will use the newly changed style.<br>
 *	 arguments:<br>
 * </blockquote>
 * @param {Object} newStyle An object that represents one of the objects in
 * drawing.style that will be mixed in. Not all<br>
 * properties are necessary. Only one object may<br>
 * be changed at a time. The object boolean parameter<br>
 * is not required and if not set objects will automatically<br>
 * be changed.<br>
 * Changing non-objects like angleSnap requires value<br>
 * to be true.
 * @param {boolean} value 
 * @example
 * 	myDrawing.changeDefaults({
 * 		norm:{
 * 			fill:"#0000ff",
 * 			width:5,
 * 			color:"#ffff00"
 * 		}
 * 	});
 * 
 * console.log("-----&gt;&gt;&gt; changeDefault: ",newStyle, " value?: ",value);
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.changeDefaults=function(newStyle, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use this method to programmatically add Stencils that display on<br>
 *	 the canvas.<br>
 *	 FIXME: Currently only supports Stencils that have been registered,<br>
 *	 which is items in the toolbar, and the additional Stencils at the<br>
 *	 end of onSurfaceReady. This covers all Stencils, but you can't<br>
 *	 use 'display only' Stencils for Line, Rect, and Ellipse.<br>
 *	 arguments:<br>
 * </blockquote>
 * @param {String} type Object The parameters used to draw the object. See stencil._Base and each
 * tool for specific parameters of teh data or points objects.
 * @param {Object} options 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.addUI=function(type, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use this method to programmatically add Stencils that display on<br>
 *	 the canvas.<br>
 *	 FIXME: Currently only supports Stencils that have been registered,<br>
 *	 which is items in the toolbar, and the additional Stencils at the<br>
 *	 end of onSurfaceReady. This covers all Stencils, but you can't<br>
 *	 use 'display only' Stencils for Line, Rect, and Ellipse.<br>
 *	 arguments:<br>
 * </blockquote>
 * @param {String} type Object The parameters used to draw the object. See stencil._Base and each
 * tool for specific parameters of teh data or points objects.
 * @param {Object} options 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.addStencil=function(type, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a toolbar plugin object to plugins array<br>
 *	 to be parsed<br>
 * </blockquote>
 * @param {Object} plugin 
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype.addPlugin=function(plugin){};
/**
 * @private
 * @memberOf dojox.drawing.Drawing
*/
dojox.drawing.Drawing.prototype._createCanvas=function(){};
/**
 * @namespace
*/
dojox.drawing.library.icons={};
/**
 * @namespace
*/
dojox.drawing.library.greek={};
/**
 * @namespace
*/
dojox.drawing.library.icons.zoomOut={};
/**
 * @namespace
*/
dojox.drawing.library.icons.zoomIn={};
/**
 * @namespace
*/
dojox.drawing.library.icons.zoom100={};
/**
 * @namespace
*/
dojox.drawing.library.icons.vector={};
/**
 * @namespace
*/
dojox.drawing.library.icons.triangle={};
/**
 * @namespace
*/
dojox.drawing.library.icons.textBlock={};
/**
 * @namespace
*/
dojox.drawing.library.icons.rect={};
/**
 * @namespace
*/
dojox.drawing.library.icons.plus={};
/**
 * @namespace
*/
dojox.drawing.library.icons.pencil={};
/**
 * @namespace
*/
dojox.drawing.library.icons.path={};
/**
 * @namespace
*/
dojox.drawing.library.icons.pan={};
/**
 * @namespace
*/
dojox.drawing.library.icons.line={};
/**
 * @namespace
*/
dojox.drawing.library.icons.iconize={};
/**
 * @namespace
*/
dojox.drawing.library.icons.equation={};
/**
 * @namespace
*/
dojox.drawing.library.icons.ellipse={};
/**
 * @namespace
*/
dojox.drawing.library.icons.axes={};
/**
 * @namespace
*/
dojox.drawing.library.icons.arrow={};


/**
 * @namespace
*/
dojox.drawing.manager.keys={};
/**
 * <b>Summary:</b><blockquote>
 *	 Scans the document for inputs<br>
 *	 and calls this automatically. However you may need<br>
 *	 to call this if you create inputs after the fact.<br>
 * </blockquote>
*/
dojox.drawing.manager.keys.scanForFields=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register an object and callback to be notified<br>
 *	 of events.<br>
 *	 NOTE: Not really used in code, but should work.<br>
 *	 See manager.mouse for similar usage<br>
 * </blockquote>
 * @param {mixed} options 
*/
dojox.drawing.manager.keys.register=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fires when any key is released<br>
 * </blockquote>
 * @param {Event} evt 
*/
dojox.drawing.manager.keys.onKeyUp=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fires when any key is pressed<br>
 * </blockquote>
 * @param {Event} evt 
*/
dojox.drawing.manager.keys.onKeyDown=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fires when ESC key is released<br>
 * </blockquote>
 * @param {Event} evt 
*/
dojox.drawing.manager.keys.onEsc=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fires when Enter key is released<br>
 * </blockquote>
 * @param {Event} evt 
*/
dojox.drawing.manager.keys.onEnter=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fires when Delete key is released<br>
 * </blockquote>
 * @param {Event} evt 
*/
dojox.drawing.manager.keys.onDelete=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fires when an Arrow key is released<br>
 *	 You will have to further check if evt.keyCode<br>
 *	 is 37,38,39, or 40<br>
 * </blockquote>
 * @param {Event} evt 
*/
dojox.drawing.manager.keys.onArrow=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the keys object<br>
 *	 <br>
 *	 a little extra time is needed in some browsers<br>
 * </blockquote>
*/
dojox.drawing.manager.keys.init=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enables or disables key events, to relinquish<br>
 *	 control to something outside of Drawing; input<br>
 *	 fields for example.<br>
 *	 You may need to call this directly if you are<br>
 *	 using textareas or contenteditables.<br>
 *	 NOTE: See scanForFields<br>
 * </blockquote>
 * @param {mixed} _enabled 
*/
dojox.drawing.manager.keys.enable=function(_enabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Relinquishes control of events to another portion<br>
 *	 of Drawing; namely the TextBlock.<br>
 * </blockquote>
 * @param {mixed} _isedit 
*/
dojox.drawing.manager.keys.editMode=function(_isedit){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Mixes in key events.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @private
*/
dojox.drawing.manager.keys._mixin=function(evt){};
/**
 * @param {mixed} evt 
 * @private
*/
dojox.drawing.manager.keys._getLetter=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Scans the document for inputs<br>
 *	 and calls this automatically. However you may need<br>
 *	 to call this if you create inputs after the fact.<br>
 * </blockquote>
 * @class
 * @returns {dojox.drawing.manager.keys.scanForFields} new instance
*/
dojox.drawing.manager.keys.scanForFields=function(){};
/**
 * @namespace
*/
dojox.drawing.plugins.drawing={};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin uses the palette dijit in order to give tips for<br>
 *	 non-english (mostly greek for now) letters.<br>
 *	 <br>
 *	 IMPORTANT!  Because it is a full blown dijit it is NOT loaded<br>
 *	 like the other plugins.  INSTEAD currently it is instantiated<br>
 *	 in markup.  TextBlock LOOKS FOR IT by ID - &amp;quot;greekPalette&amp;quot;<br>
 *	 and if it finds it does the necessary initialization/connections.<br>
 * </blockquote>
 * Grid showing all available entity options which the<br>
 * user can pick from.  The library loaded for use by the picker<br>
 * is found in dojox.drawing.library.greek.  Adding characters<br>
 * there will automatically add them to the palette.<br>
 * <br>
 * This works as a popup and as such its onChange and onCancel<br>
 * close it.  TextBlock manages it, since it's what uses the assist<br>
 * so it calls show (all actual popup management happens here).<br>
 * In order to activate the plugin require it and then include the<br>
 * markup in the example:
 * @example
 * 	&lt;!--Because this is a widget it is included in markup and NOT like the other plugins--&gt;
 * 	&lt;div dojoType="dojox.drawing.plugins.drawing.GreekPalette" id="greekPalette"&gt;&lt;/div&gt;
*/
dojox.drawing.plugins.drawing.GreekPalette=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin uses the palette dijit in order to give tips for<br>
 *	 non-english (mostly greek for now) letters.<br>
 *	 <br>
 *	 IMPORTANT!  Because it is a full blown dijit it is NOT loaded<br>
 *	 like the other plugins.  INSTEAD currently it is instantiated<br>
 *	 in markup.  TextBlock LOOKS FOR IT by ID - &amp;quot;greekPalette&amp;quot;<br>
 *	 and if it finds it does the necessary initialization/connections.<br>
 * </blockquote>
 * Grid showing all available entity options which the<br>
 * user can pick from.  The library loaded for use by the picker<br>
 * is found in dojox.drawing.library.greek.  Adding characters<br>
 * there will automatically add them to the palette.<br>
 * <br>
 * This works as a popup and as such its onChange and onCancel<br>
 * close it.  TextBlock manages it, since it's what uses the assist<br>
 * so it calls show (all actual popup management happens here).<br>
 * In order to activate the plugin require it and then include the<br>
 * markup in the example:
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._PaletteMixin
 * @returns {dojox.drawing.plugins.drawing.GreekPalette} new instance
 * @example
 * 	&lt;!--Because this is a widget it is included in markup and NOT like the other plugins--&gt;
 * 	&lt;div dojoType="dojox.drawing.plugins.drawing.GreekPalette" id="greekPalette"&gt;&lt;/div&gt;
*/
dojox.drawing.plugins.drawing.GreekPalette=function(){};
/**
 * @param {mixed} obj 
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype.show=function(obj){};
/**
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype.postCreate=function(){};
/**
 * @param {mixed} val 
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype.onChange=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 attach point for notification about when the user cancels the current menu<br>
 * </blockquote>
 * @param {Boolean} closeAll 
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype.onCancel=function(closeAll){};
/**
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets which node is the focused cell.<br>
 * </blockquote>
 * At any point in time there's exactly one<br>
 * cell with tabIndex != -1.   If focus is inside the palette then<br>
 * focus is on that cell.<br>
 * <br>
 * After calling this method, arrow key handlers and mouse click handlers<br>
 * should focus the cell in a setTimeout().
 * @param {DOMNode} node 
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype._setCurrent=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subclass must call _preparePalette() from postCreate(), passing in the tooltip<br>
 *	 for each cell<br>
 * </blockquote>
 * @param {String[][]} choices id's for each cell of the palette, used to create Dye JS object for each cell
 * @param {String[]} titles Localized tooltip for each cell
 * @private
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype._preparePalette=function(choices, titles){};
/**
 * <b>Summary:</b><blockquote>
 *	 Simple function to handle updating the display at the bottom of<br>
 *	 the palette.<br>
 * </blockquote>
 * @param {The} e event.
 * @private
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype._onCellMouseEnter=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for click, enter key &amp;amp; space key. Selects the cell.<br>
 * </blockquote>
 * @param {Event} evt The event.
 * @private
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype._onCellClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a departure from the dijit, the textBlock needs<br>
 *	 navigation without losing focus, this allows that<br>
 *	 increment:<br>
 *	 How much the key is navigated.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype._navigateByArrow=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Display the details of the currently focused entity in the preview pane<br>
 * </blockquote>
 * @param {DOMNode} cell 
 * @private
 * @memberOf dojox.drawing.plugins.drawing.GreekPalette
*/
dojox.drawing.plugins.drawing.GreekPalette.prototype._displayDetails=function(cell){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents a character.<br>
 *	 Initialized using an alias for the character (like cent) rather<br>
 *	 than with the character itself.<br>
 * </blockquote>
 * @param {String} alias 
*/
dojox.drawing.plugins.Greeks=function(alias){};
/**
 * @namespace
*/
dojox.drawing.plugins.tools={};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents a character.<br>
 *	 Initialized using an alias for the character (like cent) rather<br>
 *	 than with the character itself.<br>
 * </blockquote>
 * @class
 * @param {String} alias 
 * @returns {dojox.drawing.plugins.Greeks} new instance
*/
dojox.drawing.plugins.Greeks=function(alias){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns HTML representing the character, like &amp;amp;amp;<br>
 * </blockquote>
 * @memberOf dojox.drawing.plugins.Greeks
*/
dojox.drawing.plugins.Greeks.prototype.getValue=function(){};
/**
 * @param {DOMNode} cell 
 * @memberOf dojox.drawing.plugins.Greeks
*/
dojox.drawing.plugins.Greeks.prototype.fillCell=function(cell){};
/**
 * @namespace
*/
dojox.drawing.plugins.tools.ZoomOut={};
/**
 * @namespace
*/
dojox.drawing.plugins.tools.ZoomIn={};
/**
 * @namespace
*/
dojox.drawing.plugins.tools.Zoom100={};
/**
 * @namespace
*/
dojox.drawing.plugins.tools.Pan={};
/**
 * @namespace
*/
dojox.drawing.plugins.tools.Iconize={};
/**
 * @namespace
*/
dojox.drawing.plugins.tools.Iconize.setup={};
/**
 * @namespace
*/
dojox.drawing.plugins.tools.Pan.setup={};
/**
 * @namespace
*/
dojox.drawing.plugins.tools.ZoomIn.setup={};
/**
 * @namespace
*/
dojox.drawing.plugins.tools.Zoom100.setup={};
/**
 * @namespace
*/
dojox.drawing.plugins.tools.ZoomOut.setup={};
/**
 * @namespace
*/
dojox.drawing.tools.custom={};
/**
 * @namespace
*/
dojox.drawing.tools.TextBlock={};
/**
 * @namespace
*/
dojox.drawing.tools.Rect={};
/**
 * @namespace
*/
dojox.drawing.tools.Pencil={};
/**
 * @namespace
*/
dojox.drawing.tools.Path={};
/**
 * @namespace
*/
dojox.drawing.tools.Line={};
/**
 * @namespace
*/
dojox.drawing.tools.Ellipse={};
/**
 * @namespace
*/
dojox.drawing.tools.Arrow={};
/**
 * @namespace
*/
dojox.drawing.tools.Arrow.setup={};
/**
 * @namespace
*/
dojox.drawing.tools.custom.Vector={};
/**
 * @namespace
*/
dojox.drawing.tools.custom.Equation={};
/**
 * @namespace
*/
dojox.drawing.tools.custom.Axes={};
/**
 * @namespace
*/
dojox.drawing.tools.custom.Axes.setup={};
/**
 * @namespace
*/
dojox.drawing.tools.custom.Equation.setup={};
/**
 * @namespace
*/
dojox.drawing.tools.custom.Vector.setup={};
/**
 * @namespace
*/
dojox.drawing.tools.custom.Vector.setup.secondary={};
/**
 * <b>Summary:</b><blockquote>
 *	 All functions, variables and connections defined here<br>
 *	 are treated as if they were added directly to toolbar.<br>
 *	 They are included with the tool because secondary buttons<br>
 *	 are tool specific.<br>
 * </blockquote>
*/
dojox.drawing.tools.custom.Vector.setup.secondary.setup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Depending on the secondary tool, it may need<br>
 *	 extra functionality for some of the basic functions.<br>
 *	 Post is passed the button so those connections can<br>
 *	 be made.<br>
 * </blockquote>
 * @param {mixed} btn 
*/
dojox.drawing.tools.custom.Vector.setup.secondary.postSetup=function(btn){};
/**
 * @param {mixed} button 
*/
dojox.drawing.tools.custom.Vector.setup.secondary.funct=function(button){};
/**
 * @class
 * @returns {dojox.drawing.tools.custom.Vector.setup.secondary.funct} new instance
*/
dojox.drawing.tools.custom.Vector.setup.secondary.funct=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 All functions, variables and connections defined here<br>
 *	 are treated as if they were added directly to toolbar.<br>
 *	 They are included with the tool because secondary buttons<br>
 *	 are tool specific.<br>
 * </blockquote>
 * @class
 * @returns {dojox.drawing.tools.custom.Vector.setup.secondary.setup} new instance
*/
dojox.drawing.tools.custom.Vector.setup.secondary.setup=function(){};
/**
 * @param {mixed} button 
*/
dojox.drawing.tools.custom.Vector.setup.secondary.setup.zSelect=function(button){};
/**
 * @param {mixed} button 
*/
dojox.drawing.tools.custom.Vector.setup.secondary.setup.zDeselect=function(button){};
/**
*/
dojox.drawing.tools.custom.Vector.setup.secondary.setup.vectorTest=function(){};
/**
 * @namespace
*/
dojox.drawing.tools.Ellipse.setup={};
/**
 * @namespace
*/
dojox.drawing.tools.Line.setup={};
/**
 * @namespace
*/
dojox.drawing.tools.Path.setup={};
/**
 * @namespace
*/
dojox.drawing.tools.Pencil.setup={};
/**
 * @namespace
*/
dojox.drawing.tools.Rect.setup={};
/**
 * @namespace
*/
dojox.drawing.tools.TextBlock.setup={};
/**
 * <b>Summary:</b><blockquote>
 *	 A Toolbar used for holding buttons; typically representing the Stencils<br>
 *	 used for a DojoX Drawing.<br>
 * </blockquote>
 * Creates a GFX-based toobar that holds GFX-based buttons. Can be either created<br>
 * within the actual drawing or within a seperate DOM element. When within the<br>
 * drawing, the toolbar will cover a portion of the drawing; hence the option.<br>
 * <br>
 * A Toolbar can be created programmtically or in markup. Currently markup is as<br>
 * a separate DOM element and programmtic is within the drawing.<br>
 * examples:<br>
 * 	dojo.connect(myDrawing, "onSurfaceReady", function(){<br>
 * 		new dojox.drawing.ui.Toolbar({<br>
 * 			drawing:myDrawing,<br>
 * 			tools:"all",<br>
 * 			plugs:"all",<br>
 * 			selected:"ellipse"<br>
 * 		});<br>
 * 	});<br>
 * <br>
 *  &lt;div dojoType="dojox.drawing.ui.Toolbar" id="gfxToolbarNode" drawingId="drawingNode"<br>
 * 		class="gfxToolbar" tools="all" plugs="all" selected="ellipse" orient="H"&gt;&lt;/div&gt;
 * @param {mixed} props 
 * @param {mixed} node 
*/
dojox.drawing.ui.Toolbar=function(props, node){};
/**
 * @namespace
*/
dojox.drawing.ui.dom={};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a Toolbar to be used with a DojoX Drawing.<br>
 * </blockquote>
 * Currently works in markup only. A class is required with<br>
 * either horizontal or vertical as a class (IE prevented using<br>
 * either as a default). Assign an attribute of 'drawingId' with<br>
 * the id of the DojoX Drawing to which this is assigned.<br>
 * The node children will be assigned as the Tools in the toolbar.<br>
 * Plugins can also be assigned.<br>
 * The Toolbar is largely self contained and has no real public<br>
 * methods or events. the Drawing object should be used.
 * @param {mixed} props 
 * @param {mixed} node 
 * @example
 * 	&lt;div dojoType="dojox.drawing.Toolbar" drawingId="drawing" class="drawingToolbar vertical"&gt;
 * 		&lt;div tool="dojox.drawing.tools.Line" 				selected="false"&gt;	Line&lt;/div&gt;
 * 		&lt;div tool="dojox.drawing.tools.Rect" 				selected="true"&gt;	Rect&lt;/div&gt;
 * 		&lt;div plugin="dojox.drawing.plugins.tools.Zoom" options="{zoomInc:.1,minZoom:.5,maxZoom:2}"&gt;Zoom&lt;/div&gt;
 * 	&lt;/div&gt;
 * 
 * TODO: Toolbar works in markup only. Need programmatic.
 * NOTE: There are plans to make the toolbar out of dojox.gfx vectors.
 * This may change the APIs in the future.
*/
dojox.drawing.ui.dom.Toolbar=function(props, node){};
/**
 * @namespace
*/
dojox.drawing.ui.dom.Pan={};
/**
 * @namespace
*/
dojox.drawing.ui.dom.Pan.setup={};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a Toolbar to be used with a DojoX Drawing.<br>
 * </blockquote>
 * Currently works in markup only. A class is required with<br>
 * either horizontal or vertical as a class (IE prevented using<br>
 * either as a default). Assign an attribute of 'drawingId' with<br>
 * the id of the DojoX Drawing to which this is assigned.<br>
 * The node children will be assigned as the Tools in the toolbar.<br>
 * Plugins can also be assigned.<br>
 * The Toolbar is largely self contained and has no real public<br>
 * methods or events. the Drawing object should be used.
 * @class
 * @param {mixed} props 
 * @param {mixed} node 
 * @returns {dojox.drawing.ui.dom.Toolbar} new instance
 * @example
 * 	&lt;div dojoType="dojox.drawing.Toolbar" drawingId="drawing" class="drawingToolbar vertical"&gt;
 * 		&lt;div tool="dojox.drawing.tools.Line" 				selected="false"&gt;	Line&lt;/div&gt;
 * 		&lt;div tool="dojox.drawing.tools.Rect" 				selected="true"&gt;	Rect&lt;/div&gt;
 * 		&lt;div plugin="dojox.drawing.plugins.tools.Zoom" options="{zoomInc:.1,minZoom:.5,maxZoom:2}"&gt;Zoom&lt;/div&gt;
 * 	&lt;/div&gt;
 * 
 * TODO: Toolbar works in markup only. Need programmatic.
 * NOTE: There are plans to make the toolbar out of dojox.gfx vectors.
 * This may change the APIs in the future.
*/
dojox.drawing.ui.dom.Toolbar=function(props, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializing method that reads the dom node and its<br>
 *	 children for tools and plugins.<br>
 * </blockquote>
 * @memberOf dojox.drawing.ui.dom.Toolbar
*/
dojox.drawing.ui.dom.Toolbar.prototype.parse=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 handles buttons clicks and selects or deselects<br>
 * </blockquote>
 * @param {String} type 
 * @memberOf dojox.drawing.ui.dom.Toolbar
*/
dojox.drawing.ui.dom.Toolbar.prototype.onSetTool=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired from clicking a Tool, not a PLugin.<br>
 *	 Plugin clicks are handled within the plugin's class.<br>
 *	 arguments:<br>
 * </blockquote>
 * @param {String} type Fully qualified name of class. ex:
 * dojox.drawing.tools.Ellipse
 * @memberOf dojox.drawing.ui.dom.Toolbar
*/
dojox.drawing.ui.dom.Toolbar.prototype.onClick=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a button on the Toolbar that is<br>
 *	 a Tool, not a Plugin. Tools draw Stencils,<br>
 *	 Plugins do actions.<br>
 *	 arguments:<br>
 * </blockquote>
 * @param {HTMLNode} node The button node.
 * @memberOf dojox.drawing.ui.dom.Toolbar
*/
dojox.drawing.ui.dom.Toolbar.prototype.createTool=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Creates an icon node for each button.<br>
 *	 arguments:<br>
 * </blockquote>
 * @param {HTMLNode} node The button node.
 * @param {?} constr Function Optional. If not supplied, an icon is not created.
 * Information for each icon is derived from<br>
 * the ToolsSetup object defined at the end<br>
 * of each tool. See: stencil._Base
 * @memberOf dojox.drawing.ui.dom.Toolbar
*/
dojox.drawing.ui.dom.Toolbar.prototype.createIcon=function(node, constr){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Toolbar used for holding buttons; typically representing the Stencils<br>
 *	 used for a DojoX Drawing.<br>
 * </blockquote>
 * Creates a GFX-based toobar that holds GFX-based buttons. Can be either created<br>
 * within the actual drawing or within a seperate DOM element. When within the<br>
 * drawing, the toolbar will cover a portion of the drawing; hence the option.<br>
 * <br>
 * A Toolbar can be created programmtically or in markup. Currently markup is as<br>
 * a separate DOM element and programmtic is within the drawing.<br>
 * examples:<br>
 * 	dojo.connect(myDrawing, "onSurfaceReady", function(){<br>
 * 		new dojox.drawing.ui.Toolbar({<br>
 * 			drawing:myDrawing,<br>
 * 			tools:"all",<br>
 * 			plugs:"all",<br>
 * 			selected:"ellipse"<br>
 * 		});<br>
 * 	});<br>
 * <br>
 *  &lt;div dojoType="dojox.drawing.ui.Toolbar" id="gfxToolbarNode" drawingId="drawingNode"<br>
 * 		class="gfxToolbar" tools="all" plugs="all" selected="ellipse" orient="H"&gt;&lt;/div&gt;
 * @class
 * @param {mixed} props 
 * @param {mixed} node 
 * @returns {dojox.drawing.ui.Toolbar} new instance
*/
dojox.drawing.ui.Toolbar=function(props, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tool click event. May be connected to.<br>
 * </blockquote>
 * @param {Object} button 
 * @memberOf dojox.drawing.ui.Toolbar
*/
dojox.drawing.ui.Toolbar.prototype.onToolClick=function(button){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stencil render event.<br>
 * </blockquote>
 * @param {Object} stencil 
 * @memberOf dojox.drawing.ui.Toolbar
*/
dojox.drawing.ui.Toolbar.prototype.onRenderStencil=function(stencil){};
/**
 * <b>Summary:</b><blockquote>
 *	 Plugin click event. May be connected to.<br>
 * </blockquote>
 * @param {Object} button 
 * @memberOf dojox.drawing.ui.Toolbar
*/
dojox.drawing.ui.Toolbar.prototype.onPlugClick=function(button){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. create buttons.<br>
 * </blockquote>
 * @memberOf dojox.drawing.ui.Toolbar
*/
dojox.drawing.ui.Toolbar.prototype.makeButtons=function(){};
/**
 * @memberOf dojox.drawing.ui.Toolbar
*/
dojox.drawing.ui.Toolbar.prototype.addTool=function(){};
/**
 * @memberOf dojox.drawing.ui.Toolbar
*/
dojox.drawing.ui.Toolbar.prototype.addPlugin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Adds the back, behind the toolbar.<br>
 * </blockquote>
 * @memberOf dojox.drawing.ui.Toolbar
*/
dojox.drawing.ui.Toolbar.prototype.addBack=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internally used for mixing in props from an object or<br>
 *	 from a dom node.<br>
 * </blockquote>
 * @param {Array} props 
 * @param {Object} objNode | Node
 * @private
 * @memberOf dojox.drawing.ui.Toolbar
*/
dojox.drawing.ui.Toolbar.prototype._mixprops=function(props, objNode){};
/**
 * @namespace
*/
dojox.drawing.util.typeset={};
/**
 * @namespace
*/
dojox.drawing.util.positioning={};
/**
 * @namespace
*/
dojox.drawing.util.oo={};
/**
 * @namespace
*/
dojox.drawing.util.common={};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a unique ID.<br>
 *	 arguments:<br>
 * </blockquote>
 * @param {?} str String If provided, kept in a map, incremented
 * and used in the id. Otherwise 'shape' is used.
 * @returns {String} -
*/
dojox.drawing.util.common.uid=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 Snaps a line to the nearest angle<br>
 * </blockquote>
 * @param {EventObject} obj Mouse object (see dojox.drawing.Mouse)
 * @param {Float} ca Fractional amount to snap to
 * A decimal number fraction of a half circle<br>
 * .5 would snap to 90 degrees<br>
 * .25  would snap to 45 degrees<br>
 * .125 would snap to 22.5 degrees, etc.
 * @returns {Object} -
*/
dojox.drawing.util.common.snapAngle=function(obj, ca){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given two poits of a line, returns the slope.<br>
 * </blockquote>
 * @param {Object} p1 
 * @param {Object} p2 
 * @returns {Number} -
*/
dojox.drawing.util.common.slope=function(p1, p2){};
/**
 * <b>Summary:</b><blockquote>
 *	 Since util is the only Singleton in Drawing (besides<br>
 *	 keys) it is used to help connect the Drawing object<br>
 *	 the Toolbar. Since multiple drawings can be on one<br>
 *	 page, this function serves a little more use than<br>
 *	 on first apearance.<br>
 * </blockquote>
 * @param {Object} obj 
*/
dojox.drawing.util.common.register=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the radians derived from the coordinates<br>
 *	 in the Mouse object.<br>
 *	 <br>
 *	 var o = this.argsToObj.apply(this, arguments);<br>
 * </blockquote>
 * @param {EventObject} o 
*/
dojox.drawing.util.common.radians=function(o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convert the passed number to degrees.<br>
 * </blockquote>
 * @param {Numer} n 
 * @returns {Number} -
*/
dojox.drawing.util.common.radToDeg=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 A *very* helpful method. If you know the center<br>
 *	 (or starting) point, length and angle, find the<br>
 *	 x,y point at the end of that line.<br>
 * </blockquote>
 * @param {Number} cx 
 * @param {Number} cy 
 * @param {Number} radius 
 * @param {Number} angle 
*/
dojox.drawing.util.common.pointOnCircle=function(cx, cy, radius, angle){};
/**
 * @param {Angle} ang 
*/
dojox.drawing.util.common.oppAngle=function(ang){};
/**
 * @param {mixed} o1 
 * @param {mixed} o2 
*/
dojox.drawing.util.common.mixin=function(o1, o2){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subtract an amount from a line<br>
 * </blockquote>
 * x1,y1,x2,y2 represents the Line. 'amt' represents the amount<br>
 * to subtract from it.
 * @param {Number} x1 
 * @param {Number} y1 
 * @param {Number} x2 
 * @param {Number} y2 
 * @param {Number} amt 
 * @returns {Object} -
*/
dojox.drawing.util.common.lineSub=function(x1, y1, x2, y2, amt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the length derived from the coordinates<br>
 *	 in the Mouse object.<br>
 * </blockquote>
 * @param {EventObject} o 
*/
dojox.drawing.util.common.length=function(o){};
/**
 * @param {mixed} num 
*/
dojox.drawing.util.common.idSetStart=function(num){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the length derived from the coordinates<br>
 *	 in the Mouse object. Different from util.length<br>
 *	 in that this always returns an absolute value.<br>
 * </blockquote>
 * @returns {Number} -
*/
dojox.drawing.util.common.distance=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convert the passed number to radians.<br>
 * </blockquote>
 * @param {Numer} n 
 * @returns {Number} -
*/
dojox.drawing.util.common.degToRad=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ensures the angle in the Mouse Object is within the<br>
 *	 min and max limits. If not one of those limits is used.<br>
 *	 Returns an x,y point for the angle used.<br>
 * </blockquote>
 * @param {EventObject} obj 
 * @param {Number} min 
 * @param {Number} max 
 * @returns {Object} -
*/
dojox.drawing.util.common.constrainAngle=function(obj, min, max){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get an object that was registered with util.register<br>
 * </blockquote>
 * @param {String} id 
*/
dojox.drawing.util.common.byId=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function to attach attributes to SVG and VML raw nodes.<br>
 * </blockquote>
 * @param {Object} elem 
 * @param {property} prop 
 * @param {?} value value
 * @param {mixed} squelchErrors 
*/
dojox.drawing.util.common.attr=function(elem, prop, value, squelchErrors){};
/**
 * <b>Summary:</b><blockquote>
 *	 Attempts to determine in a Mouse Object<br>
 *	 was passed or indiviual numbers. Returns<br>
 *	 an object.<br>
 * </blockquote>
*/
dojox.drawing.util.common.argsToObj=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return angle based on mouse object<br>
 *	 arguments:<br>
 * </blockquote>
 * @param {EventObject} obj Manager.Mouse event.
 * @param {?} snap Float Returns nearest angle within snap limits
 * <br>
 * obj = this.argsToObj.apply(this, arguments);
 * @returns {Whole Number|Float} -
*/
dojox.drawing.util.common.angle=function(obj, snap){};
/**
 * <b>Summary:</b><blockquote>
 *	 Converts a namespace (typically a tool or a stencil) into<br>
 *	 an abbreviation<br>
 * </blockquote>
 * @param {mixed} type 
*/
dojox.drawing.util.common.abbr=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extends constructors to inherit from other<br>
 *	 constructors .<br>
 * </blockquote>
 * Typically not used by itself - it's used as<br>
 * part of declare(). Could be used by itself<br>
 * however, to mix together two or more<br>
 * constructors.<br>
 * arguments:<br>
 * Function, [ Function...]<br>
 * Any number of arguments, all must be<br>
 * function constructors. The first is<br>
 * considered the base object and its<br>
 * constructor will fire first.
 * @returns {Function} -
 * @example
 * 	var A = function(){};
 * 	var B = function(){};
 * 	var C = function(){};
 * 	var D = dojox.drawing.util.oo.extend(A, B, C);
 * 	var e = new D();
*/
dojox.drawing.util.oo.extend=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a constructor Function from a<br>
 *	 Function, and collection of methods, and<br>
 *	 more Functions that are extended.<br>
 * </blockquote>
 * Similar in look and feel to Dojo declare as<br>
 * far as order and number of arguments, although<br>
 * constructed a little closer to prototypical<br>
 * inheritance. All arguments passed into the<br>
 * constructor are passed into all sub constructors.<br>
 * arguments:<br>
 * Function, [Object|Function....]<br>
 * The first argument is always the base<br>
 * constructor. The last argument is always<br>
 * an object of methods (or empty object) to<br>
 * be mixed in (in the future would like to<br>
 * make that object optional). Remaining<br>
 * arguments are other constructors mixed in<br>
 * using extend() (See below).
 * @returns {Function} -
 * @example
 * 	MyFunction = dojox.drawing.util.oo.declare(
 * 		MyOtherFunction,
 * 		YetAnotherFunction,
 * 		function(options){
 * 			// This is my constructor. It will fire last.
 * 			// The other constructors will fire before this.
 * 		},
 * 		{
 * 			customType:"equation", // mixed in property
 * 			doThing: function(){   // mixed in method
 * 
 * 			}
 * 		}
 * 	);
 * 
 * 	var f = new MyFunction();
*/
dojox.drawing.util.oo.declare=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the optimal text positions for annotations.Label.<br>
 * </blockquote>
 * @param {Object} start 
 * @param {Object} end 
 * @returns {Object} -
*/
dojox.drawing.util.positioning.label=function(start, end){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the optimal position for annotations.Angle.<br>
 *	 <br>
 *	 angle at first third of vector<br>
 * </blockquote>
 * @param {Object} start 
 * @param {Object} end 
 * @returns {Object} -
*/
dojox.drawing.util.positioning.angle=function(start, end){};
/**
 * @param {mixed} inText 
*/
dojox.drawing.util.typeset.convertLaTeX=function(inText){};
/**
 * @param {mixed} inText 
*/
dojox.drawing.util.typeset.convertHTML=function(inText){};
/**
 * <b>Summary:</b><blockquote>
 *	 This class provides a bidi transformation engine, i.e.<br>
 *	 functions for reordering and shaping bidi text.<br>
 * </blockquote>
 * Bidi stands for support for languages with a bidirectional script.<br>
 * <br>
 * Usually Unicode Bidi Algorithm used by OS platform (and web browsers) is capable of properly transforming<br>
 * Bidi text and as a result it is adequately displayed on the screen. However, in some situations,<br>
 * Unicode Bidi Algorithm is not invoked or is not properly applied. This may occur in situation in which software<br>
 * responsible for rendering the text is not leveraging Unicode Bidi Algorithm implemented by OS (e.g. dojox.GFX renderers).<br>
 * <br>
 * Bidi engine provided in this class implements Unicode Bidi Algorithm as specified at:<br>
 * http://www.unicode.org/reports/tr9/.<br>
 * <br>
 * For more information on basic Bidi concepts please read following article:<br>
 * "Bidirectional script support - A primer" available from:<br>
 * http://www.ibm.com/developerworks/websphere/library/techarticles/bidi/bidigen.html<br>
 * <br>
 * As of February 2011, Bidi engine has following limitations:<br>
 * 1. No support for following numeric shaping options:<br>
 * H - Hindi,<br>
 * C - Contextual,<br>
 * N - Nominal.<br>
 * 2. No support for following shaping options:<br>
 * I - Initial shaping,<br>
 * M - Middle shaping,<br>
 * F - Final shaping,<br>
 * B - Isolated shaping.<br>
 * 3. No support for source-to-target or/and target-to-source maps.<br>
 * 4. No support for LRE/RLE/LRO/RLO/PDF (they are handled like neutrals).<br>
 * 5. No support for Windows compatibility.<br>
 * 6. No support for  insert/remove marks.<br>
 * 7. No support for code pages (currently only UTF-8 is supported. Ideally we should convert from any code page to UTF-8).
 * @see reference <a href="http://www.unicode.org/reports/tr9/.">http://www.unicode.org/reports/tr9/.</a>
*/
dojox.string.BidiEngine=function(){};
/**
 * @class
 * @returns {dojox.dtl.Token} new instance
*/
dojox.dtl.Token=function(){};
/**
 * @namespace
*/
dojox.dtl.Token.contents={};
/**
 * @param {Integer} [limit] 
*/
dojox.dtl.Token.split_contents=function(limit){};
/**
*/
dojox.dtl.Token.split=function(){};
/**
 * @param {mixed} str 
*/
dojox.dtl.text.tokenize=function(str){};
/**
 * @param {mixed} file 
*/
dojox.dtl.text.getTemplateString=function(file){};
/**
 * @param {mixed} file 
*/
dojox.dtl.text.getTemplate=function(file){};
/**
 * @param {mixed} name 
 * @param {mixed} errorless 
*/
dojox.dtl.text.getTag=function(name, errorless){};
/**
 * @param {mixed} name 
 * @param {mixed} errorless 
*/
dojox.dtl.text.getFilter=function(name, errorless){};
/**
 * @param {mixed} arg 
 * @param {mixed} sync 
 * @private
*/
dojox.dtl.text._resolveTemplateArg=function(arg, sync){};
/**
 * @param {mixed} location 
 * @param {mixed} sync 
 * @param {mixed} json 
 * @private
*/
dojox.dtl.text._resolveLazy=function(location, sync, json){};
/**
 * @param {mixed} arg 
 * @param {mixed} sync 
 * @private
*/
dojox.dtl.text._resolveContextArg=function(arg, sync){};
/**
 * @param {mixed} varr 
 * @param {mixed} load 
 * @param {mixed} tag 
 * @private
*/
dojox.dtl.text._parseDelims=function(varr, load, tag){};
/**
 * @param {mixed} arg 
 * @private
*/
dojox.dtl.text._isTemplate=function(arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used to find both tags and filters<br>
 * </blockquote>
 * @param {mixed} module 
 * @param {mixed} name 
 * @param {mixed} errorless 
 * @private
*/
dojox.dtl.text._get=function(module, name, errorless){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates this template according to the given context.<br>
 * </blockquote>
 * @param {DOMNode|String|dojo.NodeList} node A node reference or set of nodes
 * @param {dojo._Url|String|Object} context The context object or location
*/
dojox.dtl.Template.update=function(node, context){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders this template.<br>
 * </blockquote>
 * @param {Object} context The runtime context.
 * @param {StringBuilder} [buffer] A string buffer.
*/
dojox.dtl.Template.render=function(context, buffer){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a no-op node. Useful in custom tags<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.dtl._noOpNode} new instance
*/
dojox.dtl._noOpNode=function(){};
/**
*/
dojox.dtl._noOpNode.unrender=function(){};
/**
*/
dojox.dtl._noOpNode.render=function(){};
/**
*/
dojox.dtl._noOpNode.clone=function(){};
/**
 * @param {String} base 
 * @param {Object} locations 
*/
dojox.dtl.register.tags=function(base, locations){};
/**
*/
dojox.dtl.register.getAttributeTags=function(){};
/**
 * @param {String} module 
 * @param {String} name 
*/
dojox.dtl.register.get=function(module, name){};
/**
 * @param {String} base 
 * @param {Object} locations 
*/
dojox.dtl.register.filters=function(base, locations){};
/**
 * @param {mixed} type 
 * @param {mixed} base 
 * @param {mixed} locations 
 * @private
*/
dojox.dtl.register._any=function(type, base, locations){};
/**
 * @namespace
 * @private
*/
dojox.dtl.register._registry={};
/**
 * @param {mixed} value 
*/
dojox.dtl._base.safe=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Escapes a string's HTML<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl._base.escape=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents a runtime context used by DTL templates.<br>
 * </blockquote>
 * @class
 * @returns {dojox.dtl.Context} new instance
*/
dojox.dtl.Context=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the object on which to perform operations.<br>
 * </blockquote>
 * @param {Object} _this the this ref.
 * @memberOf dojox.dtl.Context
*/
dojox.dtl.Context.prototype.setThis=function(_this){};
/**
 * <b>Summary:</b><blockquote>
 *	 Indicates whether the specified key is defined on this context.<br>
 * </blockquote>
 * @param {String} key The key to look up.
 * @memberOf dojox.dtl.Context
*/
dojox.dtl.Context.prototype.hasKey=function(key){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the object on which to perform operations.<br>
 * </blockquote>
 * @memberOf dojox.dtl.Context
*/
dojox.dtl.Context.prototype.getThis=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the set of keys exported by this context.<br>
 * </blockquote>
 * @memberOf dojox.dtl.Context
*/
dojox.dtl.Context.prototype.getKeys=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a clone of this context, only containing the items<br>
 *	 defined in the filter.<br>
 * </blockquote>
 * @param {dojox.dtl.Context|Object|String} filter 
 * @memberOf dojox.dtl.Context
*/
dojox.dtl.Context.prototype.filter=function(filter){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a clone of this context object, with the items from the<br>
 *	 passed objecct mixed in.<br>
 * </blockquote>
 * @param {dojox.dtl.Context|Object} obj 
 * @memberOf dojox.dtl.Context
*/
dojox.dtl.Context.prototype.extend=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the object on which to perform operations.<br>
 * </blockquote>
 * @class
 * @returns {dojox.dtl.Context.setThis} new instance
*/
dojox.dtl.Context.setThis=function(){};
/**
 * @namespace
*/
dojox.dtl.contrib.data={};
/**
 * <b>Summary:</b><blockquote>
 *	 Queries a data store and makes the returned items DTL compatible<br>
 * </blockquote>
 * @param {mixed} parser 
 * @param {mixed} token 
 * @example
 * You can only use this with data stores that work in a synchronous
 * way (meaning that `onComplete` is fired during the `fetch` call).
 * A `sync` flag is sent to the fetch call so that stores that usually
 * work asynchronously make themselves syncrhonous if possible.
 * 	{% bind_query contextQuery to contextStore as newVariable %}
*/
dojox.dtl.contrib.data.bind_query=function(parser, token){};
/**
 * <b>Summary:</b><blockquote>
 *	 Turns a list of data store items into DTL compatible items<br>
 * </blockquote>
 * @param {mixed} parser 
 * @param {mixed} token 
 * @example
 * `contextItems` and `contextStore` should be an item list
 * and a data store that get assigned to `newVariable`
 * 
 * 	{% bind_data contextItems to contextStore as newVariable %}
*/
dojox.dtl.contrib.data.bind_data=function(parser, token){};
/**
 * @param {mixed} key 
 * @private
*/
dojox.dtl.contrib.data._get=function(key){};
/**
 * @namespace
*/
dojox.dtl.contrib.objects={};
/**
 * @namespace
*/
dojox.dtl.contrib.dijit={};
/**
 * <b>Summary:</b><blockquote>
 *	 Associates an event type to a function (on the current widget) by name<br>
 * </blockquote>
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.contrib.dijit.on=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.contrib.dijit.dojoType=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.contrib.dijit.dojoAttachPoint=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.contrib.dijit.dojoAttachEvent=function(parser, token){};
/**
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.contrib.objects.key=function(value, arg){};
/**
 * @class
 * @returns {dojox.dtl.DomInline} new instance
*/
dojox.dtl.DomInline=function(){};
/**
 * @param {dojox.dtl.Context} [context] 
 * @memberOf dojox.dtl.DomInline
*/
dojox.dtl.DomInline.prototype.render=function(context){};
/**
 * @memberOf dojox.dtl.DomInline
*/
dojox.dtl.DomInline.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.dtl.DomInline
*/
dojox.dtl.DomInline.prototype.buildRendering=function(){};
/**
 * @class
 * @returns {dojox.dtl.DomInline.render} new instance
*/
dojox.dtl.DomInline.render=function(){};
/**
 * @class
 * @returns {dojox.dtl.DomInline.buildRendering} new instance
*/
dojox.dtl.DomInline.buildRendering=function(){};
/**
 * @class
 * @returns {dojox.dtl.DomInline.postMixInProperties} new instance
*/
dojox.dtl.DomInline.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The template class for DOM templating.<br>
 * </blockquote>
 * @class
 * @returns {dojox.dtl.DomTemplate} new instance
*/
dojox.dtl.DomTemplate=function(){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl.DomTemplate
*/
dojox.dtl.DomTemplate.prototype.unrender=function(context, buffer){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the specified class name on the root node.<br>
 * </blockquote>
 * @param {String} str 
 * @memberOf dojox.dtl.DomTemplate
*/
dojox.dtl.DomTemplate.prototype.setClass=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders this template.<br>
 * </blockquote>
 * @param {dojox.dtl.Context} [context] 
 * @param {concatenable} [buffer] 
 * @memberOf dojox.dtl.DomTemplate
*/
dojox.dtl.DomTemplate.prototype.render=function(context, buffer){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the template root node.<br>
 * </blockquote>
 * @memberOf dojox.dtl.DomTemplate
*/
dojox.dtl.DomTemplate.prototype.getRootNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a new buffer.<br>
 * </blockquote>
 * @memberOf dojox.dtl.DomTemplate
*/
dojox.dtl.DomTemplate.prototype.getBuffer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders this template.<br>
 * </blockquote>
 * @class
 * @returns {dojox.dtl.DomTemplate.render} new instance
*/
dojox.dtl.DomTemplate.render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Allows the manipulation of DOM<br>
 * </blockquote>
 * Use this to append a child, change the parent, or<br>
 * change the attribute of the current node.
 * @class
 * @returns {dojox.dtl.DomBuffer} new instance
*/
dojox.dtl.DomBuffer=function(){};
/**
 * @param {mixed} node 
 * @param {Boolean} [up] 
 * @param {Boolean} [root] 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.setParent=function(node, up, root){};
/**
 * @param {mixed} key 
 * @param {mixed} value 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.setAttribute=function(key, value){};
/**
 * @param {String|DomNode} obj 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.remove=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub called when setParent is used.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} up 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.onSetParent=function(node, up){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub called when nodes are removed<br>
 * </blockquote>
 * @param {mixed} node 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.onRemoveNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub called when a node is duplicated<br>
 * </blockquote>
 * @param {DOMNode} from 
 * @param {DOMNode} to 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.onClone=function(from, to){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub called when a data in a node is changed<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} old 
 * @param {mixed} updated 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.onChangeData=function(node, old, updated){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub called when an attribute is changed<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} attribute 
 * @param {mixed} old 
 * @param {mixed} updated 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.onChangeAttribute=function(node, attribute, old, updated){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub called after new nodes are added<br>
 * </blockquote>
 * @param {mixed} node 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.onAddNodeComplete=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub called before new nodes are added<br>
 * </blockquote>
 * @param {mixed} node 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.onAddNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub to call when you're adding an event<br>
 * </blockquote>
 * String
 * @param {DOMNode} node 
 * @param {String} type 
 * @param {mixed} description 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.onAddEvent=function(node, type, description){};
/**
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.getRootNode=function(){};
/**
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.getParent=function(){};
/**
 * @param {DOMNode} node 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.concat=function(node){};
/**
 * @param {mixed} context 
 * @param {mixed} type 
 * @param {mixed} fn 
 * @param {Array|Function} args 
 * @memberOf dojox.dtl.DomBuffer
*/
dojox.dtl.DomBuffer.prototype.addEvent=function(context, type, fn, args){};
/**
 * @class
 * @returns {dojox.dtl.DomBuffer.concat} new instance
*/
dojox.dtl.DomBuffer.concat=function(){};
/**
 * @namespace
 * @private
*/
dojox.dtl.DomBuffer.concat._parent={};
/**
 * @memberOf dojox.dtl.DomBuffer.concat._parent
*/
dojox.dtl.DomBuffer.concat._parent._cache=[];
/**
 * @class
 * @returns {dojox.dtl.DomBuffer.remove} new instance
*/
dojox.dtl.DomBuffer.remove=function(){};
/**
 * @class
 * @returns {dojox.dtl.DomBuffer.setAttribute} new instance
*/
dojox.dtl.DomBuffer.setAttribute=function(){};
/**
 * @class
 * @returns {dojox.dtl.DomBuffer.setParent} new instance
*/
dojox.dtl.DomBuffer.setParent=function(){};
/**
 * @namespace
 * @private
*/
dojox.dtl.DomBuffer.setParent._parent={};
/**
 * <b>Summary:</b><blockquote>
 *	 Places a node into DOM<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.dtl._DomNode} new instance
*/
dojox.dtl._DomNode=function(){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl._DomNode
*/
dojox.dtl._DomNode.prototype.unrender=function(context, buffer){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl._DomNode
*/
dojox.dtl._DomNode.prototype.render=function(context, buffer){};
/**
 * @param {mixed} buffer 
 * @memberOf dojox.dtl._DomNode
*/
dojox.dtl._DomNode.prototype.clone=function(buffer){};
/**
 * @class
 * @returns {dojox.dtl._DomNode.render} new instance
*/
dojox.dtl._DomNode.render=function(){};
/**
 * @class
 * @returns {dojox.dtl._DomNode.unrender} new instance
*/
dojox.dtl._DomNode.unrender=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A list of any DOM-specific node objects<br>
 * </blockquote>
 * Any object that's used in the constructor or added<br>
 * through the push function much implement the<br>
 * render, unrender, and clone functions.
 * @class
 * @private
 * @returns {dojox.dtl._DomNodeList} new instance
*/
dojox.dtl._DomNodeList=function(){};
/**
 * @param {mixed} node 
 * @memberOf dojox.dtl._DomNodeList
*/
dojox.dtl._DomNodeList.prototype.unshift=function(node){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @param {mixed} instance 
 * @memberOf dojox.dtl._DomNodeList
*/
dojox.dtl._DomNodeList.prototype.unrender=function(context, buffer, instance){};
/**
 * @memberOf dojox.dtl._DomNodeList
*/
dojox.dtl._DomNodeList.prototype.rtrim=function(){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @param {Node} instance 
 * @memberOf dojox.dtl._DomNodeList
*/
dojox.dtl._DomNodeList.prototype.render=function(context, buffer, instance){};
/**
 * @param {mixed} node 
 * @memberOf dojox.dtl._DomNodeList
*/
dojox.dtl._DomNodeList.prototype.push=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 A really expensive way of checking to see how a rendering will look.<br>
 *	 Used in the ifchanged tag<br>
 * </blockquote>
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @param {mixed} asNode 
 * @memberOf dojox.dtl._DomNodeList
*/
dojox.dtl._DomNodeList.prototype.dummyRender=function(context, buffer, asNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used to create an identical copy of a NodeList, useful for things like the for tag.<br>
 * </blockquote>
 * @param {mixed} buffer 
 * @memberOf dojox.dtl._DomNodeList
*/
dojox.dtl._DomNodeList.prototype.clone=function(buffer){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used to create an identical copy of a NodeList, useful for things like the for tag.<br>
 * </blockquote>
 * @class
 * @returns {dojox.dtl._DomNodeList.clone} new instance
*/
dojox.dtl._DomNodeList.clone=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A node to be processed as a variable<br>
 * </blockquote>
 * Will render an object that supports the render function<br>
 * and the getRootNode function
 * @class
 * @private
 * @returns {dojox.dtl._DomVarNode} new instance
*/
dojox.dtl._DomVarNode=function(){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl._DomVarNode
*/
dojox.dtl._DomVarNode.prototype.unrender=function(context, buffer){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl._DomVarNode
*/
dojox.dtl._DomVarNode.prototype.render=function(context, buffer){};
/**
 * @memberOf dojox.dtl._DomVarNode
*/
dojox.dtl._DomVarNode.prototype.clone=function(){};
/**
 * @class
 * @returns {dojox.dtl._DomVarNode.render} new instance
*/
dojox.dtl._DomVarNode.render=function(){};
/**
 * @namespace
 * @private
*/
dojox.dtl._DomVarNode.render._txt={};
/**
 * @class
 * @returns {dojox.dtl._DomVarNode.unrender} new instance
*/
dojox.dtl._DomVarNode.unrender=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes the parent during render/unrender<br>
 * </blockquote>
 * @class
 * @returns {dojox.dtl.ChangeNode} new instance
*/
dojox.dtl.ChangeNode=function(){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl.ChangeNode
*/
dojox.dtl.ChangeNode.prototype.unrender=function(context, buffer){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl.ChangeNode
*/
dojox.dtl.ChangeNode.prototype.render=function(context, buffer){};
/**
 * @memberOf dojox.dtl.ChangeNode
*/
dojox.dtl.ChangeNode.prototype.clone=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Works on attributes<br>
 * </blockquote>
 * @class
 * @returns {dojox.dtl.AttributeNode} new instance
*/
dojox.dtl.AttributeNode=function(){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl.AttributeNode
*/
dojox.dtl.AttributeNode.prototype.unrender=function(context, buffer){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl.AttributeNode
*/
dojox.dtl.AttributeNode.prototype.render=function(context, buffer){};
/**
 * @param {mixed} buffer 
 * @memberOf dojox.dtl.AttributeNode
*/
dojox.dtl.AttributeNode.prototype.clone=function(buffer){};
/**
 * @class
 * @returns {dojox.dtl.AttributeNode.render} new instance
*/
dojox.dtl.AttributeNode.render=function(){};
/**
 * @class
 * @returns {dojox.dtl.AttributeNode.unrender} new instance
*/
dojox.dtl.AttributeNode.unrender=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a straight text node without any processing<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.dtl._DomTextNode} new instance
*/
dojox.dtl._DomTextNode=function(){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl._DomTextNode
*/
dojox.dtl._DomTextNode.prototype.unrender=function(context, buffer){};
/**
 * @param {mixed} data 
 * @memberOf dojox.dtl._DomTextNode
*/
dojox.dtl._DomTextNode.prototype.set=function(data){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl._DomTextNode
*/
dojox.dtl._DomTextNode.prototype.render=function(context, buffer){};
/**
 * @memberOf dojox.dtl._DomTextNode
*/
dojox.dtl._DomTextNode.prototype.isEmpty=function(){};
/**
 * @memberOf dojox.dtl._DomTextNode
*/
dojox.dtl._DomTextNode.prototype.clone=function(){};
/**
 * @class
 * @returns {dojox.dtl._DomTextNode.set} new instance
*/
dojox.dtl._DomTextNode.set=function(){};
/**
 * @class
 * @returns {dojox.dtl._DomTextNode.render} new instance
*/
dojox.dtl._DomTextNode.render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Turn a simple array into a set of objects<br>
 * </blockquote>
 * This is also used by all tags to move through<br>
 * the list of nodes.
 * @class
 * @private
 * @returns {dojox.dtl._DomParser} new instance
*/
dojox.dtl._DomParser=function(){};
/**
 * @param {mixed} endtag 
 * @memberOf dojox.dtl._DomParser
*/
dojox.dtl._DomParser.prototype.skip_past=function(endtag){};
/**
 * @param {Array} [stop_at] 
 * @memberOf dojox.dtl._DomParser
*/
dojox.dtl._DomParser.prototype.parse=function(stop_at){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the next token in the list.<br>
 * </blockquote>
 * @memberOf dojox.dtl._DomParser
*/
dojox.dtl._DomParser.prototype.next_token=function(){};
/**
 * @param {String} loc 
 * @memberOf dojox.dtl._DomParser
*/
dojox.dtl._DomParser.prototype.getTemplate=function(loc){};
/**
 * @memberOf dojox.dtl._DomParser
*/
dojox.dtl._DomParser.prototype.delete_first_token=function(){};
/**
 * @param {mixed} expr 
 * @memberOf dojox.dtl._DomParser
*/
dojox.dtl._DomParser.prototype.create_variable_node=function(expr){};
/**
 * @param {mixed} expr 
 * @memberOf dojox.dtl._DomParser
*/
dojox.dtl._DomParser.prototype.create_text_node=function(expr){};
/**
 * @class
 * @returns {dojox.dtl._DomParser.parse} new instance
*/
dojox.dtl._DomParser.parse=function(){};
/**
 * @param {Node} nodes 
*/
dojox.dtl.dom.tokenize=function(nodes){};
/**
 * @param {mixed} text 
*/
dojox.dtl.dom.getTemplate=function(text){};
/**
 * @param {Node} node 
 * @param {Array} tokens 
 * @private
*/
dojox.dtl.dom._tokenize=function(node, tokens){};
/**
 * @param {mixed} child 
 * @param {mixed} tokens 
 * @private
*/
dojox.dtl.dom.__tokenize=function(child, tokens){};
/**
 * @class
 * @returns {dojox.dtl.dom.getTemplate} new instance
*/
dojox.dtl.dom.getTemplate=function(){};
/**
 * @class
 * @private
 * @returns {dojox.dtl._DomTemplated} new instance
*/
dojox.dtl._DomTemplated=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Quickly switch between templated by location<br>
 * </blockquote>
 * @param {String|dojo._Url} template The new template.
 * @param {dojox.dtl.Context} [context] The runtime context.
 * @memberOf dojox.dtl._DomTemplated
*/
dojox.dtl._DomTemplated.prototype.setTemplate=function(template, context){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders this template.<br>
 * </blockquote>
 * @param {dojox.dtl.Context} [context] The runtime context.
 * @param {dojox.dtl.DomTemplate} [tpl] The template to render. Optional.
 * @memberOf dojox.dtl._DomTemplated
*/
dojox.dtl._DomTemplated.prototype.render=function(context, tpl){};
/**
 * <b>Summary:</b><blockquote>
 *	 Construct the UI for this widget, setting this.domNode.<br>
 * </blockquote>
 * @memberOf dojox.dtl._DomTemplated
*/
dojox.dtl._DomTemplated.prototype.buildRendering=function(){};
/**
 * @param {mixed} context 
 * @private
 * @memberOf dojox.dtl._DomTemplated
*/
dojox.dtl._DomTemplated.prototype._getContext=function(context){};
/**
 * @param {mixed} templatePath 
 * @param {mixed} templateString 
 * @private
 * @memberOf dojox.dtl._DomTemplated
*/
dojox.dtl._DomTemplated.prototype._getCachedTemplate=function(templatePath, templateString){};
/**
 * <b>Summary:</b><blockquote>
 *	 Construct the UI for this widget, setting this.domNode.<br>
 * </blockquote>
 * @class
 * @returns {dojox.dtl._DomTemplated.buildRendering} new instance
*/
dojox.dtl._DomTemplated.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Quickly switch between templated by location<br>
 * </blockquote>
 * @class
 * @returns {dojox.dtl._DomTemplated.setTemplate} new instance
*/
dojox.dtl._DomTemplated.setTemplate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders this template.<br>
 * </blockquote>
 * @class
 * @returns {dojox.dtl._DomTemplated.render} new instance
*/
dojox.dtl._DomTemplated.render=function(){};
/**
 * @class
 * @private
 * @returns {dojox.dtl._DomTemplated._getCachedTemplate} new instance
*/
dojox.dtl._DomTemplated._getCachedTemplate=function(){};
/**
 * @class
 * @returns {dojo.Nodelist} new instance
*/
dojo.Nodelist=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders the specified template in each of the Nodelist entries.<br>
 * </blockquote>
 * @param {dojox.dtl.__StringArgs|String} template The template string or location
 * @param {dojox.dtl.__ObjectArgs|Object} context The context object or location
 * @memberOf dojo.Nodelist
*/
dojo.Nodelist.prototype.dtl=function(template, context){};
/**
 * @namespace
*/
dojox.dtl.filter.dates={};
/**
 * <b>Summary:</b><blockquote>
 *	 Formats a date as the time until that date (i.e. &amp;quot;4 days, 6 hours&amp;quot;)<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.dates.timeuntil=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Formats a date as the time since that date (i.e. &amp;quot;4 days, 6 hours&amp;quot;)<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.dates.timesince=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Formats a time according to the given format<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.dates.time=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Formats a date according to the given format<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.dates.date=function(value, arg){};
/**
 * @param {mixed} value 
 * @private
*/
dojox.dtl.filter.dates._toDate=function(value){};
/**
 * @namespace
*/
dojox.dtl.filter.strings={};
/**
 * @namespace
*/
dojox.dtl.filter.misc={};
/**
 * @namespace
*/
dojox.dtl.filter.logic={};
/**
 * @namespace
*/
dojox.dtl.filter.lists={};
/**
 * @namespace
*/
dojox.dtl.filter.integers={};
/**
 * @namespace
*/
dojox.dtl.filter.htmlstrings={};
/**
 * <b>Summary:</b><blockquote>
 *	 Strips all [X]HTML tags<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.htmlstrings.striptags=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes a space separated list of [X]HTML tags from the output&amp;quot;<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.htmlstrings.removetags=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Converts newlines into &amp;lt;br /&amp;gt;s<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.htmlstrings.linebreaksbr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Converts newlines into &amp;lt;p&amp;gt; and &amp;lt;br /&amp;gt;s<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.htmlstrings.linebreaks=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given a whole number, returns the 1-based requested digit of it<br>
 *	 desciprtion:<br>
 *	 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the<br>
 *	 original value for invalid input (if input or argument is not an integer,<br>
 *	 or if argument is less than 1). Otherwise, output is always an integer.<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.integers.get_digit=function(value, arg){};
/**
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.integers.add=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Recursively takes a self-nested list and returns an HTML unordered list --<br>
 *	 WITHOUT opening and closing &amp;lt;ul&amp;gt; tags.<br>
 * </blockquote>
 * The list is assumed to be in the proper format. For example, if ``var`` contains<br>
 * ``['States', [['Kansas', [['Lawrence', []], ['Topeka', []]]], ['Illinois', []]]]``,<br>
 * then ``{{ var|unordered_list }}`` would return::<br>
 * <br>
 * 	&lt;li&gt;States<br>
 * 	&lt;ul&gt;<br>
 * 		&lt;li&gt;Kansas<br>
 * 		&lt;ul&gt;<br>
 * 			&lt;li&gt;Lawrence&lt;/li&gt;<br>
 * 			&lt;li&gt;Topeka&lt;/li&gt;<br>
 * 		&lt;/ul&gt;<br>
 * 		&lt;/li&gt;<br>
 * 		&lt;li&gt;Illinois&lt;/li&gt;<br>
 * 	&lt;/ul&gt;<br>
 * 	&lt;/li&gt;
 * @param {mixed} value 
*/
dojox.dtl.filter.lists.unordered_list=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a slice of the list.<br>
 * </blockquote>
 * Uses the same syntax as Python's list slicing; see<br>
 * http://diveintopython.org/native_data_types/lists.html#odbchelper.list.slice<br>
 * for an introduction.<br>
 * Also uses the optional third value to denote every X item.
 * @see reference <a href="http://diveintopython.org/native_data_types/lists.html#odbchelper.list.slice">http://diveintopython.org/native_data_types/lists.html#odbchelper.list.slice</a>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.lists.slice=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a random item from the list<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.lists.random=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a boolean of whether the value's length is the argument<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.lists.length_is=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the length of the value - useful for lists<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.lists.length=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Joins a list with a string, like Python's ``str.join(list)``<br>
 * </blockquote>
 * Django throws a compile error, but JS can't do arg checks<br>
 * so we're left with run time errors, which aren't wise for something<br>
 * as trivial here as an empty arg.
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.lists.join=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the first item in a list<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.lists.first=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Takes a list of dicts, returns that list sorted in reverse order by the property given in the argument.<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.lists.dictsortreversed=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Takes a list of dicts, returns that list sorted by the property given in the argument.<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.lists.dictsort=function(value, arg){};
/**
 * @param {mixed} value 
 * @param {mixed} tabs 
 * @private
*/
dojox.dtl.filter.lists._unordered_list=function(value, tabs){};
/**
 * @param {mixed} a 
 * @param {mixed} b 
 * @private
*/
dojox.dtl.filter.lists._dictsort=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 arg being a comma-delimited string, value of true/false/none<br>
 *	 chooses the appropriate item from the string<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.logic.yesno=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the value is devisible by the argument&amp;quot;<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.logic.divisibleby=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 If value is null, use given default<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.logic.default_if_none=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 If value is unavailable, use given default<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.logic.default_=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 A wrapper around toJson unless something better comes along<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.misc.pprint=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a plural suffix if the value is not 1, for '1 vote' vs. '2 votes'<br>
 * </blockquote>
 * By default, 's' is used as a suffix; if an argument is provided, that string<br>
 * is used instead. If the provided argument contains a comma, the text before<br>
 * the comma is used for the singular case.
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.misc.pluralize=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Takes a phone number and converts it in to its numerical equivalent<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.misc.phone2numeric=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB, 102bytes, etc).<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.misc.filesizeformat=function(value){};
/**
 * @namespace
 * @private
*/
dojox.dtl.filter.misc._phone2numeric={};
/**
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.strings.wordwrap=function(value, arg){};
/**
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.wordcount=function(value){};
/**
 * @param {mixed} value 
 * @param {mixed} arg 
 * @returns {' + middle + '" rel="nofollow">' + trimmed + '</a>';} -
*/
dojox.dtl.filter.strings.urlizetrunc=function(value, arg){};
/**
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.urlize=function(value){};
/**
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.urlencode=function(value){};
/**
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.upper=function(value){};
/**
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.strings.truncatewords_html=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Truncates a string after a certain number of words<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {Integer} arg Number of words to truncate after
*/
dojox.dtl.filter.strings.truncatewords=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Converts a string into titlecase<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.title=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Formats the variable according to the argument, a string formatting specifier.<br>
 *	 This specifier uses Python string formating syntax, with the exception that<br>
 *	 the leading &amp;quot;%&amp;quot; is dropped.<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.strings.stringformat=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Converts to lowercase, removes<br>
 *	 non-alpha chars and converts spaces to hyphens<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.slugify=function(value){};
/**
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.strings.rjust=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the value turned into a list. For an integer, it's a list of<br>
 *	 digits. For a string, it's a list of characters.<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.make_list=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Converts a string into all lowercase<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.lower=function(value){};
/**
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.strings.ljust=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Displays text with line numbers<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.linenumbers=function(value){};
/**
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.iriencode=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format a number according to arg<br>
 * </blockquote>
 * If called without an argument, displays a floating point<br>
 * number as 34.2 -- but only if there's a point to be displayed.<br>
 * With a positive numeric argument, it displays that many decimal places<br>
 * always.<br>
 * With a negative numeric argument, it will display that many decimal<br>
 * places -- but only if there's places to be displayed.
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.strings.floatformat=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Replaces ampersands with ``&amp;amp;amp;`` entities<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.fix_ampersands=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes all values of arg from the given string<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.strings.cut=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Centers the value in a field of a given width<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} arg 
*/
dojox.dtl.filter.strings.center=function(value, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Capitalizes the first character of the value<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.capfirst=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds slashes - useful for passing strings to JavaScript, for example.<br>
 * </blockquote>
 * @param {mixed} value 
*/
dojox.dtl.filter.strings.addslashes=function(value){};
/**
 * @param {String} url 
 * @param {String} [safe] 
 * @private
*/
dojox.dtl.filter.strings._urlquote=function(url, safe){};
/**
 * @namespace
 * @private
*/
dojox.dtl.filter.strings._truncate_singlets={};
/**
 * @class
 * @returns {dojox.dtl.Inline} new instance
*/
dojox.dtl.Inline=function(){};
/**
 * @param {Object|dojox.dtl.Context} [context] 
 * @memberOf dojox.dtl.Inline
*/
dojox.dtl.Inline.prototype.render=function(context){};
/**
 * @memberOf dojox.dtl.Inline
*/
dojox.dtl.Inline.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.dtl.Inline
*/
dojox.dtl.Inline.prototype.buildRendering=function(){};
/**
 * @class
 * @returns {dojox.dtl.Inline.render} new instance
*/
dojox.dtl.Inline.render=function(){};
/**
 * @class
 * @returns {dojox.dtl.Inline.buildRendering} new instance
*/
dojox.dtl.Inline.buildRendering=function(){};
/**
 * @class
 * @returns {dojox.dtl.Inline.postMixInProperties} new instance
*/
dojox.dtl.Inline.postMixInProperties=function(){};
/**
 * @namespace
*/
dojox.dtl.render.dom={};
/**
 * @param {DOMNode} [attachPoint] 
 * @param {dojox.dtl.DomTemplate} [tpl] 
*/
dojox.dtl.render.dom.Render=function(attachPoint, tpl){};
/**
 * @class
 * @returns {dojox.dtl.render.dom.Render} new instance
*/
dojox.dtl.render.dom.Render=function(){};
/**
 * @param {Node} node 
 * @memberOf dojox.dtl.render.dom.Render
*/
dojox.dtl.render.dom.Render.prototype.setAttachPoint=function(node){};
/**
 * @param {Object} context 
 * @param {dojox.dtl.DomTemplate} [tpl] 
 * @param {dojox.dtl.DomBuffer} [buffer] 
 * @memberOf dojox.dtl.render.dom.Render
*/
dojox.dtl.render.dom.Render.prototype.render=function(context, tpl, buffer){};
/**
 * @class
 * @returns {dojox.dtl.render.dom.Render.setAttachPoint} new instance
*/
dojox.dtl.render.dom.Render.setAttachPoint=function(){};
/**
 * @class
 * @returns {dojox.dtl.render.dom.Render.render} new instance
*/
dojox.dtl.render.dom.Render.render=function(){};
/**
 * @namespace
*/
dojox.dtl.render.html={};
/**
 * @namespace
*/
dojox.dtl.tag.date={};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.date.now=function(parser, token){};
/**
 * @param {mixed} format 
 * @param {mixed} node 
*/
dojox.dtl.tag.date.NowNode=function(format, node){};
/**
 * @class
 * @returns {dojox.dtl.tag.date.NowNode} new instance
*/
dojox.dtl.tag.date.NowNode=function(){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl.tag.date.NowNode
*/
dojox.dtl.tag.date.NowNode.prototype.unrender=function(context, buffer){};
/**
 * @param {mixed} context 
 * @param {mixed} buffer 
 * @memberOf dojox.dtl.tag.date.NowNode
*/
dojox.dtl.tag.date.NowNode.prototype.render=function(context, buffer){};
/**
 * @param {mixed} buffer 
 * @memberOf dojox.dtl.tag.date.NowNode
*/
dojox.dtl.tag.date.NowNode.prototype.clone=function(buffer){};
/**
 * @namespace
*/
dojox.dtl.tag.loader={};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.loader.ssi=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.loader.include=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.loader.extends_=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.loader.block=function(parser, token){};
/**
 * @namespace
*/
dojox.dtl.tag.logic={};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.logic.ifnotequal=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.logic.ifequal=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.logic.if_=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.logic.for_=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
 * @param {mixed} negate 
 * @private
*/
dojox.dtl.tag.logic._ifequal=function(parser, token, negate){};
/**
 * @namespace
*/
dojox.dtl.tag.loop={};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.loop.regroup=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.loop.ifchanged=function(parser, token){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cycle among the given strings each time this tag is encountered<br>
 * </blockquote>
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.loop.cycle=function(parser, token){};
/**
 * @namespace
*/
dojox.dtl.tag.misc={};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.misc.with_=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.misc.widthratio=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.misc.templatetag=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.misc.spaceless=function(parser, token){};
/**
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.misc.firstof=function(parser, token){};
/**
 * <b>Summary:</b><blockquote>
 *	 Filter the contents of the blog through variable filters.<br>
 * </blockquote>
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.misc.filter=function(parser, token){};
/**
 * <b>Summary:</b><blockquote>
 *	 Output the current context, maybe add more stuff later.<br>
 * </blockquote>
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.misc.debug=function(parser, token){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ignore everything between {% comment %} and {% endcomment %}<br>
 * </blockquote>
 * @param {mixed} parser 
 * @param {mixed} token 
*/
dojox.dtl.tag.misc.comment=function(parser, token){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base-class for DTL-templated widgets.<br>
 * </blockquote>
 * @class
 * @extends dijit._TemplatedMixin
 * @returns {dojox.dtl._Templated} new instance
*/
dojox.dtl._Templated=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The method overrides dijit._TemplatedMixin.startup.<br>
 * </blockquote>
 * @memberOf dojox.dtl._Templated
*/
dojox.dtl._Templated.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders the widget.<br>
 * </blockquote>
 * @memberOf dojox.dtl._Templated
*/
dojox.dtl._Templated.prototype.render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Layer for dijit._Templated.getCachedTemplate<br>
 * </blockquote>
 * @param {mixed} templatePath 
 * @param {mixed} templateString 
 * @param {mixed} alwaysUseString 
 * @memberOf dojox.dtl._Templated
*/
dojox.dtl._Templated.prototype.getCachedTemplate=function(templatePath, templateString, alwaysUseString){};
/**
 * <b>Summary:</b><blockquote>
 *	 The method overrides dijit._TemplatedMixin.startup.<br>
 * </blockquote>
 * @memberOf dojox.dtl._Templated
*/
dojox.dtl._Templated.prototype.buildRendering=function(){};
/**
 * @namespace
*/
dojox.dtl.utils.date={};
/**
 * <b>Summary:</b><blockquote>
 *	 Takes two datetime objects and returns the time between then and now<br>
 *	 as a nicely formatted string, e.g &amp;quot;10 minutes&amp;quot;<br>
 * </blockquote>
 * Adapted from http://blog.natbat.co.uk/archive/2003/Jun/14/time_since
 * @see reference <a href="http://blog.natbat.co.uk/archive/2003/Jun/14/time_since">http://blog.natbat.co.uk/archive/2003/Jun/14/time_since</a>
 * @param {mixed} d 
 * @param {mixed} now 
*/
dojox.dtl.utils.date.timesince=function(d, now){};
/**
 * @param {Date} date 
 * @param {String} format 
*/
dojox.dtl.utils.date.format=function(date, format){};
/**
*/
dojox.dtl.utils.date.DateFormat=function(){};
/**
 * @class
 * @returns {dojox.dtl.utils.date.DateFormat} new instance
*/
dojox.dtl.utils.date.DateFormat=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Time, in 12-hour hours and minutes, with minutes left off if they're zero.<br>
 * </blockquote>
 * Examples: '1', '1:30', '2:05', '2'<br>
 * Proprietary extension.
 * @memberOf dojox.dtl.utils.date.DateFormat
*/
dojox.dtl.utils.date.DateFormat.prototype.f=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off<br>
 *	 if they're zero and the strings 'midnight' and 'noon' if appropriate.<br>
 * </blockquote>
 * Examples: '1 a.m.', '1:30 p.m.', 'midnight', 'noon', '12:30 p.m.'<br>
 * Proprietary extension.
 * @memberOf dojox.dtl.utils.date.DateFormat
*/
dojox.dtl.utils.date.DateFormat.prototype.P=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Month abbreviation in Associated Press style. Proprietary extension.<br>
 * </blockquote>
 * @memberOf dojox.dtl.utils.date.DateFormat
*/
dojox.dtl.utils.date.DateFormat.prototype.N=function(){};
/**
 * @namespace
*/
dojox.editor.plugins={};
/**
 * <b>Summary:</b><blockquote>
 *	 The widget that is used for the UI of the batch spelling check<br>
 * </blockquote>
 * @private
*/
dojox.editor.plugins._spellCheckControl=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A smple widget that uses/creates a dropdown with a dojox.widget.ColorPicker.  Also provides<br>
 *	 passthroughs to the value of the color picker and convenient hook points.<br>
 * </blockquote>
*/
dojox.editor.plugins._TextColorDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A global object that handles common tasks for all the plugins. Since<br>
 *	 there are several plugins that are all calling common methods, it's preferable<br>
 *	 that they call a centralized location that either has a set variable or a<br>
 *	 timeout to only repeat code-heavy calls when necessary.<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 Using custom undo for all browsers.<br>
 * </blockquote>
*/
dojox.editor.plugins._TableHandler=function(){};
/**
*/
dojox.editor.plugins._StatusBar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 It is a base network service component. It transfers text to a remote service port<br>
 *	 with cross domain ability enabled. It can split text into specified pieces and send<br>
 *	 them out one by one so that it can handle the case when the service has a limitation of<br>
 *	 the capability.<br>
 *	 The encoding is UTF-8.<br>
 * </blockquote>
*/
dojox.editor.plugins._SpellCheckScriptMultiPart=function(){};
/**
*/
dojox.editor.plugins._SpellCheckParser=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A keyboard accessible emoticon-picking widget (for inserting smiley characters)<br>
 * </blockquote>
 * Grid showing various emoticons.<br>
 * Can be used standalone, or as a popup.
 * @example
 * 	&lt;div dojoType="dojox.editor.plugins._SmileyPalette"&gt;&lt;/div&gt;
 * @example
 * 	var picker = new dojox.editor.plugins._SmileyPalette({ },srcNode);
 * 	picker.startup();
*/
dojox.editor.plugins._SmileyPalette=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A toolbar that derived from dijit.Toolbar, which<br>
 *	 eliminates some unnecessary event response such as LEFT_ARROW pressing<br>
 *	 and click bubbling.<br>
 * </blockquote>
*/
dojox.editor.plugins._FindReplaceToolbar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets that contains a label (like &amp;quot;Font:&amp;quot;)<br>
 *	 and a TextBox to pick a value.<br>
 *	 Used as Toolbar entry.<br>
 * </blockquote>
*/
dojox.editor.plugins._FindReplaceTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets that contains a button labeled X<br>
 *	 to close the tool bar.<br>
 * </blockquote>
*/
dojox.editor.plugins._FindReplaceCloseBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets that contains a label (like &amp;quot;Match case: &amp;quot;)<br>
 *	 and a checkbox to indicate if it is checked or not.<br>
 *	 Used as Toolbar entry.<br>
 * </blockquote>
*/
dojox.editor.plugins._FindReplaceCheckBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Simple internal widget for representing a clickable button for expand/collapse<br>
 *	 with A11Y support.<br>
 * </blockquote>
*/
dojox.editor.plugins._CollapsibleToolbarButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A smple widget that uses/creates a dropdown with a dojox.widget.ColorPicker.  Also provides<br>
 *	 passthroughs to the value of the color picker and convenient hook points.<br>
 * </blockquote>
*/
dojox.editor.plugins._CellColorDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 SImple internal, non-clickable, menu entry to act as a menu title bar.<br>
 * </blockquote>
*/
dojox.editor.plugins._BreadcrumbMenuTitle=function(){};
/**
*/
dojox.editor.plugins._AutoSaveSettingDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds an icon to the Editor toolbar that when clicked, opens a system dialog<br>
 *	 Although the toolbar icon is a tiny &amp;quot;image&amp;quot; the uploader could be used for<br>
 *	 any file type<br>
 * </blockquote>
*/
dojox.editor.plugins.UploadImage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A 'line break' between two `dijit.Toolbar` items so that very<br>
 *	 long toolbars can be organized a bit.<br>
 * </blockquote>
*/
dojox.editor.plugins.ToolbarLineBreak=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides dropdown color pickers for setting text color and background color<br>
 *	 and makes use of the nicer-looking (though not entirely accessible), dojox.widget.ColorPicker.<br>
 * </blockquote>
 * The commands provided by this plugin are:<br>
 * * foreColor - sets the text color<br>
 * * hiliteColor - sets the background color<br>
*/
dojox.editor.plugins.TextColor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A collection of Plugins for inserting and modifying tables in the Editor<br>
 *	 See end of this document for all avaiable plugs<br>
 *	 and dojox/editorPlugins/tests/editorTablePlugs.html for an example<br>
 *	 <br>
 *	 NOT IMPLEMENTED: Not handling cell merge, span or split<br>
 * </blockquote>
*/
dojox.editor.plugins.TablePlugins=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize certain plugins<br>
 * </blockquote>
*/
dojox.editor.plugins.TableContextMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides StatusBar cabability to the editor.<br>
 *	 Basically a footer bar where status can be published.  It also<br>
 *	 puts a resize handle on the status bar, allowing you to resize the<br>
 *	 editor via mouse.<br>
 * </blockquote>
*/
dojox.editor.plugins.StatusBar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a spelling check cabability for the editor.<br>
 * </blockquote>
*/
dojox.editor.plugins.SpellCheck=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin allows the user to select from emoticons or &amp;quot;smileys&amp;quot;<br>
 *	 to insert at the current cursor position.<br>
 * </blockquote>
 * The commands provided by this plugin are:<br>
 * * smiley - inserts the selected emoticon<br>
*/
dojox.editor.plugins.Smiley=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides ShowBlockNodes cabability to the editor.  When<br>
 *	 clicked, the document in the editor will apply a class to specific<br>
 *	 block nodes to make them visible in the layout.  This info is not<br>
 *	 exposed/extracted when the editor value is obtained, it is purely for help<br>
 *	 while working on the page.<br>
 * </blockquote>
*/
dojox.editor.plugins.ShowBlockNodes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides Save cabability to the editor.  When<br>
 *	 clicked, the document in the editor frame will be osted to the URL<br>
 *	 provided, or none, if none provided.  Users who desire a different save<br>
 *	 function can extend this plugin (via dojo.extend) and over-ride the<br>
 *	 save method	while save is in process, the save button is disabled.<br>
 * </blockquote>
*/
dojox.editor.plugins.Save=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin extends from the PasteFromWord plugin and provides<br>
 *	 'safe pasting', meaning that it will not allow keyboard/menu pasting<br>
 *	 into the dijit editor.  It still runs all of the word cleanup code,<br>
 *	 including script strippers.  If you use this plugin, you don't need to<br>
 *	 use the 'PasteFromWord Plugin'<br>
 * </blockquote>
*/
dojox.editor.plugins.SafePaste=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Because IE will ignore the cursor style when the editMode of the document is on,<br>
 *	 we need to create a div within the outer document to mimic the behavior of drag&amp;amp;drop<br>
 * </blockquote>
*/
dojox.editor.plugins.ResizeTableColumn=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides Preview cabability to the editor.  When<br>
 *	 clicked, the document in the editor frame will displayed in a separate<br>
 *	 window/tab<br>
 * </blockquote>
*/
dojox.editor.plugins.Preview=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a mechanism by which to 'beautify HTML'<br>
 *	 generated by the editor.  It is by no means perfect.<br>
 * </blockquote>
*/
dojox.editor.plugins.PrettyPrint=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides PasteFromWord cabability to the editor.  When<br>
 *	 clicked, a dialog opens with a spartan RichText instance to paste<br>
 *	 word content into via the keyboard commands.  The contents are<br>
 *	 then filtered to remove word style classes and other meta-junk<br>
 *	 that tends to cause issues.<br>
 * </blockquote>
*/
dojox.editor.plugins.PasteFromWord=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a simple CSS page break plugin that<br>
 *	 lets you insert browser pring recognizable page breaks in<br>
 *	 the document.<br>
 *	 This plugin registers the hotkey command: CTRL-SHIFT-ENTER<br>
 * </blockquote>
*/
dojox.editor.plugins.PageBreak=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides NormalizeStyle cabability to the editor.  It is<br>
 *	 a headless plugin that tries to normalize how content is styled when<br>
 *	 it comes out of th editor ('b' or css).   It also auto-converts<br>
 *	 incoming content to the proper one expected by the browser as well so<br>
 *	 that the native styling buttons work.<br>
 * </blockquote>
*/
dojox.editor.plugins.NormalizeStyle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides improved indent and outdent handling to<br>
 *	 the editor.  It tries to generate valid HTML, as well as be<br>
 *	 consistent about how it indents and outdents lists and blocks/elements.<br>
 * </blockquote>
*/
dojox.editor.plugins.NormalizeIndentOutdent=function(){};
/**
*/
dojox.editor.plugins.ModifyTable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides an enhanced image link dialog that<br>
 *	 not only insert the online images, but upload the local image files onto<br>
 *	 to server then insert them as well.<br>
 *	 Dependencies:<br>
 *	 This plugin depends on dojox.form.FileUploader to upload the images on the local driver.<br>
 *	 Do the regression test whenever FileUploader is upgraded.<br>
 * </blockquote>
*/
dojox.editor.plugins.LocalImage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents a character.<br>
 *	 Initialized using an alias for the character (like cent) rather<br>
 *	 than with the character itself.<br>
 * </blockquote>
 * @param {String} alias 
*/
dojox.editor.plugins.LatinEntity=function(alias){};
/**
*/
dojox.editor.plugins.InsertTable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin allows the user to select from standard Symbols (HTML Entities)<br>
 *	 to insert at the current cursor position.  It binds to the key pattern:<br>
 *	 ctrl-shift-s for opening the insert symbol dropdown.<br>
 * </blockquote>
 * The commands provided by this plugin are:<br>
 * * insertEntity - inserts the selected HTML entity character<br>
*/
dojox.editor.plugins.InsertEntity=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides the basis for an insert anchor dialog for the<br>
 *	 dijit.Editor<br>
 * </blockquote>
 * The command provided by this plugin is:<br>
 * * insertAnchor<br>
*/
dojox.editor.plugins.InsertAnchor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a Find/Replace cabability for the editor.<br>
 *	 Note that this plugin is NOT supported on Opera currently, as opera<br>
 *	 does not implement a window.find or equiv function.<br>
 * </blockquote>
*/
dojox.editor.plugins.FindReplace=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A keyboard accessible HTML entity-picking widget (for inserting symbol characters)<br>
 * </blockquote>
 * Grid showing various entities, so the user can pick a certain entity.<br>
 * Can be used standalone, or as a popup.
 * @example
 * 	&lt;div dojoType="dojox.editor.plugins.EntityPalette"&gt;&lt;/div&gt;
 * @example
 * 	var picker = new dojox.editor.plugins.EntityPalette({ },srcNode);
 * 	picker.startup();
*/
dojox.editor.plugins.EntityPalette=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 JS Object representing an emoticon<br>
 * </blockquote>
 * @param {String} id 
*/
dojox.editor.plugins.Emoticon=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dialog box with options for table creation<br>
 * </blockquote>
*/
dojox.editor.plugins.EditorTableDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dialog box with options for editing a table<br>
 * </blockquote>
*/
dojox.editor.plugins.EditorModifyTableDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize ColorTableCell plugin<br>
 * </blockquote>
*/
dojox.editor.plugins.ColorTableCell=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a weappable toolbar container to allow expand/collapse<br>
 *	 of the editor toolbars.  This plugin should be registered first in most cases to<br>
 *	 avoid conflicts in toolbar construction.<br>
 * </blockquote>
*/
dojox.editor.plugins.CollapsibleToolbar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides Breadcrumb cabability to the editor.  When<br>
 *	 As you move around the editor, it updates with your current indention<br>
 *	 depth.<br>
 * </blockquote>
*/
dojox.editor.plugins.Breadcrumb=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides Blockquote cabability to the editor.<br>
 *	 window/tab<br>
 * </blockquote>
*/
dojox.editor.plugins.Blockquote=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin can recognize a URL like string<br>
 *	 (such as http://www.website.com) and turn it into<br>
 *	 a hyperlink that points to that URL.<br>
 * </blockquote>
 * @see reference <a href="http://www.website.com">http://www.website.com</a>
*/
dojox.editor.plugins.AutoUrlLink=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides the auto save capability to the editor. The<br>
 *	 plugin saves the content of the editor in interval. When<br>
 *	 the save action is performed, the document in the editor frame<br>
 *	 will be posted to the URL provided, or none, if none provided.<br>
 * </blockquote>
*/
dojox.editor.plugins.AutoSave=function(){};
/**
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.editor.plugins._AutoSaveSettingDialog} new instance
*/
dojox.editor.plugins._AutoSaveSettingDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Display the setting dialog. If the internal interval value is &amp;quot;&amp;quot;<br>
 *	 set it to zero<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._AutoSaveSettingDialog
*/
dojox.editor.plugins._AutoSaveSettingDialog.prototype.show=function(){};
/**
 * @memberOf dojox.editor.plugins._AutoSaveSettingDialog
*/
dojox.editor.plugins._AutoSaveSettingDialog.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the OK event and close the dialog.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._AutoSaveSettingDialog
*/
dojox.editor.plugins._AutoSaveSettingDialog.prototype.onOk=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the Cancel event and close the dialog.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._AutoSaveSettingDialog
*/
dojox.editor.plugins._AutoSaveSettingDialog.prototype.onCancel=function(){};
/**
 * @memberOf dojox.editor.plugins._AutoSaveSettingDialog
*/
dojox.editor.plugins._AutoSaveSettingDialog.prototype.hide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the value attribute if it is acceptable<br>
 * </blockquote>
 * @param {String} val The invertal value
 * @private
 * @memberOf dojox.editor.plugins._AutoSaveSettingDialog
*/
dojox.editor.plugins._AutoSaveSettingDialog.prototype._setValueAttr=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the keydown event<br>
 * </blockquote>
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.editor.plugins._AutoSaveSettingDialog
*/
dojox.editor.plugins._AutoSaveSettingDialog.prototype._onKeyDown=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if the value is between 1 - 999.<br>
 * </blockquote>
 * @param {String} val 
 * @private
 * @memberOf dojox.editor.plugins._AutoSaveSettingDialog
*/
dojox.editor.plugins._AutoSaveSettingDialog.prototype._onChange=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if this value between 1- 999<br>
 * </blockquote>
 * @param {String} val 
 * @private
 * @memberOf dojox.editor.plugins._AutoSaveSettingDialog
*/
dojox.editor.plugins._AutoSaveSettingDialog.prototype._isValidValue=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the interval value<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._AutoSaveSettingDialog
*/
dojox.editor.plugins._AutoSaveSettingDialog.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides the auto save capability to the editor. The<br>
 *	 plugin saves the content of the editor in interval. When<br>
 *	 the save action is performed, the document in the editor frame<br>
 *	 will be posted to the URL provided, or none, if none provided.<br>
 * </blockquote>
 * @class
 * @extends dojox.editor.plugins.Save
 * @returns {dojox.editor.plugins.AutoSave} new instance
*/
dojox.editor.plugins.AutoSave=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor. No toggle button for<br>
 *	 this plugin. And start to save the content of the editor in<br>
 *	 interval<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 User over-ridable save success function for editor content.<br>
 * </blockquote>
 * @param {The} resp response from the server, if any, in text format.
 * @param {mixed} ioargs 
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype.onSuccess=function(resp, ioargs){};
/**
 * <b>Summary:</b><blockquote>
 *	 User over-ridable save success function for editor content.<br>
 *	 resp:<br>
 *	 The response from the server, if any, in text format.<br>
 * </blockquote>
 * @param {mixed} error 
 * @param {mixed} ioargs 
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype.onError=function(error, ioargs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cleanup of our plugin.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the setting dialog<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype._showAutSaveSettingDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to trigger saving of the editor document<br>
 * </blockquote>
 * @param {Number} interval 
 * @private
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype._setSaveInterval=function(interval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the interval value.<br>
 *	 Delay the boundary check to _isValidValue of the dialog class<br>
 * </blockquote>
 * @param {The} val interval value.
 * @private
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype._setIntervalAttr=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stop auto-save<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype._onStopClick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If the interval is set (larger than 0), enable auto-save.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype._onDialogOk=function(){};
/**
 * @private
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the interval value<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype._getIntervalAttr=function(){};
/**
 * @private
 * @memberOf dojox.editor.plugins.AutoSave
*/
dojox.editor.plugins.AutoSave.prototype._clearSaveInterval=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin can recognize a URL like string<br>
 *	 (such as http://www.website.com) and turn it into<br>
 *	 a hyperlink that points to that URL.<br>
 * </blockquote>
 * @see reference <a href="http://www.website.com">http://www.website.com</a>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.AutoUrlLink} new instance
*/
dojox.editor.plugins.AutoUrlLink=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called by the editor it belongs to.<br>
 * </blockquote>
 * @param {dijit.Editor} editor The editor it belongs to.
 * @memberOf dojox.editor.plugins.AutoUrlLink
*/
dojox.editor.plugins.AutoUrlLink.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Recognize the URL like strings and turn them into a link<br>
 * </blockquote>
 * @param {mixed} args 
 * @private
 * @memberOf dojox.editor.plugins.AutoUrlLink
*/
dojox.editor.plugins.AutoUrlLink.prototype._recognize=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the keypress event and dispatch it to the target handler<br>
 * </blockquote>
 * @param {The} evt keypress event object.
 * @memberOf dojox.editor.plugins.AutoUrlLink
*/
dojox.editor.plugins.AutoUrlLink.prototype._keyPress=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if the node is already embraced within a &amp;lt;a&amp;gt;...&amp;lt;/a&amp;gt; tag.<br>
 * </blockquote>
 * @param {DomNode} node The node to be examed.
 * @private
 * @memberOf dojox.editor.plugins.AutoUrlLink
*/
dojox.editor.plugins.AutoUrlLink.prototype._inLink=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find the occurrace of the URL strings.<br>
 *	 FF, Chrome &amp;amp;&amp;amp; Safri have a behavior that when insertHTML is executed,<br>
 *	 the orignal referrence to the text node will be the text node next to<br>
 *	 the inserted anchor automatically. So we have to re-caculate the index of<br>
 *	 the following URL occurrence.<br>
 *	 value:<br>
 *	 A text to be scanned.<br>
 * </blockquote>
 * @param {DomNode} node 
 * @param {DomNode} bm 
 * @param {Number} bmOff 
 * @private
 * @memberOf dojox.editor.plugins.AutoUrlLink
*/
dojox.editor.plugins.AutoUrlLink.prototype._findUrls=function(node, bm, bmOff){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find the last node that was edited so that we can<br>
 *	 get the last edited text.<br>
 * </blockquote>
 * @param {DomNode} node The current node that the cursor is at.
 * @private
 * @memberOf dojox.editor.plugins.AutoUrlLink
*/
dojox.editor.plugins.AutoUrlLink.prototype._findLastEditingNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides Blockquote cabability to the editor.<br>
 *	 window/tab<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.Blockquote} new instance
*/
dojox.editor.plugins.Blockquote=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides _Plugin.updateState().  This controls whether or not the current<br>
 *	 cursor position should toggle on the quote button or not.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.Blockquote
*/
dojox.editor.plugins.Blockquote.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.Blockquote
*/
dojox.editor.plugins.Blockquote.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to trigger previewing of the editor document<br>
 * </blockquote>
 * @param {mixed} arg 
 * @private
 * @memberOf dojox.editor.plugins.Blockquote
*/
dojox.editor.plugins.Blockquote.prototype._toggleQuote=function(arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function to check for text nodes.<br>
 * </blockquote>
 * @param {The} node node to check.
 * @private
 * @memberOf dojox.editor.plugins.Blockquote
*/
dojox.editor.plugins.Blockquote.prototype._isTextElement=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 This functions tests whether an indicated node is in root as inline<br>
 *	 or rooted inline elements in the page.<br>
 * </blockquote>
 * @param {The} node node to start at.
 * @private
 * @memberOf dojox.editor.plugins.Blockquote
*/
dojox.editor.plugins.Blockquote.prototype._isRootInline=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to determine if the current tag is an inline<br>
 *	 element that does formatting, as we don't want to<br>
 *	 break/indent around it, as it can screw up text.<br>
 * </blockquote>
 * @param {The} tag tag to examine
 * @private
 * @memberOf dojox.editor.plugins.Blockquote
*/
dojox.editor.plugins.Blockquote.prototype._isInlineFormat=function(tag){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to determine if a node is 'empty'<br>
 *	 Eg, contains only blank text.  Used to determine if<br>
 *	 an empty list element should be removed or not.<br>
 * </blockquote>
 * @param {The} node node to check.
 * @private
 * @memberOf dojox.editor.plugins.Blockquote
*/
dojox.editor.plugins.Blockquote.prototype._isEmpty=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the preview button.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Blockquote
*/
dojox.editor.plugins.Blockquote.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to get the tag name of an element<br>
 *	 if any.<br>
 * </blockquote>
 * @param {The} node node to look at.
 * @private
 * @memberOf dojox.editor.plugins.Blockquote
*/
dojox.editor.plugins.Blockquote.prototype._getTagName=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 function to find a ll the blocknode elements in a collection of<br>
 *	 nodes<br>
 * </blockquote>
 * @param {The} nodeList list of nodes.
 * @private
 * @memberOf dojox.editor.plugins.Blockquote
*/
dojox.editor.plugins.Blockquote.prototype._findBlockQuotes=function(nodeList){};
/**
 * <b>Summary:</b><blockquote>
 *	 SImple internal, non-clickable, menu entry to act as a menu title bar.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._Contained
 * @returns {dojox.editor.plugins._BreadcrumbMenuTitle} new instance
*/
dojox.editor.plugins._BreadcrumbMenuTitle=function(){};
/**
 * @memberOf dojox.editor.plugins._BreadcrumbMenuTitle
*/
dojox.editor.plugins._BreadcrumbMenuTitle.prototype.postCreate=function(){};
/**
 * @param {mixed} str 
 * @private
 * @memberOf dojox.editor.plugins._BreadcrumbMenuTitle
*/
dojox.editor.plugins._BreadcrumbMenuTitle.prototype._setMenuTitleAttr=function(str){};
/**
 * @param {mixed} str 
 * @private
 * @memberOf dojox.editor.plugins._BreadcrumbMenuTitle
*/
dojox.editor.plugins._BreadcrumbMenuTitle.prototype._getMenuTitleAttr=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides Breadcrumb cabability to the editor.  When<br>
 *	 As you move around the editor, it updates with your current indention<br>
 *	 depth.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.Breadcrumb} new instance
*/
dojox.editor.plugins.Breadcrumb=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride of updateState to hide the toolbar when the iframe is not visible.<br>
 *	 Also triggers the breadcrumb update.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.Breadcrumb
*/
dojox.editor.plugins.Breadcrumb.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.Breadcrumb
*/
dojox.editor.plugins.Breadcrumb.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to clean up the breadcrumb toolbar.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.Breadcrumb
*/
dojox.editor.plugins.Breadcrumb.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to trigger updating of the breadcrumb<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Breadcrumb
*/
dojox.editor.plugins.Breadcrumb.prototype._updateBreadcrumb=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for selecting the contents of a node.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Breadcrumb
*/
dojox.editor.plugins.Breadcrumb.prototype._selectElement=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for selecting the contents of a node.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Breadcrumb
*/
dojox.editor.plugins.Breadcrumb.prototype._selectContents=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for selecting the contents of a node.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Breadcrumb
*/
dojox.editor.plugins.Breadcrumb.prototype._moveCToStart=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for selecting the contents of a node.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Breadcrumb
*/
dojox.editor.plugins.Breadcrumb.prototype._moveCToEnd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for selecting the contents of a node.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Breadcrumb
*/
dojox.editor.plugins.Breadcrumb.prototype._deleteElement=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for selecting the contents of a node.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Breadcrumb
*/
dojox.editor.plugins.Breadcrumb.prototype._deleteContents=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Simple internal widget for representing a clickable button for expand/collapse<br>
 *	 with A11Y support.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.editor.plugins._CollapsibleToolbarButton} new instance
*/
dojox.editor.plugins._CollapsibleToolbarButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Simple synthetic event to listen for dijit click events (mouse or keyboard)<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.editor.plugins._CollapsibleToolbarButton
*/
dojox.editor.plugins._CollapsibleToolbarButton.prototype.onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a weappable toolbar container to allow expand/collapse<br>
 *	 of the editor toolbars.  This plugin should be registered first in most cases to<br>
 *	 avoid conflicts in toolbar construction.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.CollapsibleToolbar} new instance
*/
dojox.editor.plugins.CollapsibleToolbar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.CollapsibleToolbar
*/
dojox.editor.plugins.CollapsibleToolbar.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride of destroy method for cleanup.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.CollapsibleToolbar
*/
dojox.editor.plugins.CollapsibleToolbar.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for handling a click event that will open the toolbar.<br>
 * </blockquote>
 * @param {The} e click event.
 * @private
 * @memberOf dojox.editor.plugins.CollapsibleToolbar
*/
dojox.editor.plugins.CollapsibleToolbar.prototype._onOpen=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for handling a click event that will close the toolbar.<br>
 * </blockquote>
 * @param {The} e click event.
 * @private
 * @memberOf dojox.editor.plugins.CollapsibleToolbar
*/
dojox.editor.plugins.CollapsibleToolbar.prototype._onClose=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to construct a wrapper for the toolbar/header that allows<br>
 *	 it to expand and collapse.  It effectively builds a containing table,<br>
 *	 which handles the layout nicely and gets BIDI support by default.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.CollapsibleToolbar
*/
dojox.editor.plugins.CollapsibleToolbar.prototype._constructContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A keyboard accessible HTML entity-picking widget (for inserting symbol characters)<br>
 * </blockquote>
 * Grid showing various entities, so the user can pick a certain entity.<br>
 * Can be used standalone, or as a popup.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._PaletteMixin
 * @returns {dojox.editor.plugins.EntityPalette} new instance
 * @example
 * 	&lt;div dojoType="dojox.editor.plugins.EntityPalette"&gt;&lt;/div&gt;
 * @example
 * 	var picker = new dojox.editor.plugins.EntityPalette({ },srcNode);
 * 	picker.startup();
*/
dojox.editor.plugins.EntityPalette=function(){};
/**
 * @memberOf dojox.editor.plugins.EntityPalette
*/
dojox.editor.plugins.EntityPalette.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.editor.plugins.EntityPalette
*/
dojox.editor.plugins.EntityPalette.prototype.postCreate=function(){};
/**
 * @memberOf dojox.editor.plugins.EntityPalette
*/
dojox.editor.plugins.EntityPalette.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when a entity is hovered or focused.<br>
 * </blockquote>
 * Removes highlight of the old entity, and highlights<br>
 * the new entity.
 * @param {DOMNode} node 
 * @memberOf dojox.editor.plugins.EntityPalette
*/
dojox.editor.plugins.EntityPalette.prototype._setCurrent=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Simple function to handle updating the display at the bottom of<br>
 *	 the palette.<br>
 * </blockquote>
 * @param {The} e event.
 * @private
 * @memberOf dojox.editor.plugins.EntityPalette
*/
dojox.editor.plugins.EntityPalette.prototype._onCellMouseEnter=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Display the details of the currently focused entity in the preview pane<br>
 * </blockquote>
 * @param {DOMNode} cell 
 * @private
 * @memberOf dojox.editor.plugins.EntityPalette
*/
dojox.editor.plugins.EntityPalette.prototype._displayDetails=function(cell){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents a character.<br>
 *	 Initialized using an alias for the character (like cent) rather<br>
 *	 than with the character itself.<br>
 * </blockquote>
 * @class
 * @param {String} alias 
 * @returns {dojox.editor.plugins.LatinEntity} new instance
*/
dojox.editor.plugins.LatinEntity=function(alias){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns HTML representing the character, like &amp;amp;amp;<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.LatinEntity
*/
dojox.editor.plugins.LatinEntity.prototype.getValue=function(){};
/**
 * @param {DOMNode} cell 
 * @memberOf dojox.editor.plugins.LatinEntity
*/
dojox.editor.plugins.LatinEntity.prototype.fillCell=function(cell){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets that contains a button labeled X<br>
 *	 to close the tool bar.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.editor.plugins._FindReplaceCloseBox} new instance
*/
dojox.editor.plugins._FindReplaceCloseBox=function(){};
/**
 * @memberOf dojox.editor.plugins._FindReplaceCloseBox
*/
dojox.editor.plugins._FindReplaceCloseBox.prototype.startup=function(){};
/**
 * @memberOf dojox.editor.plugins._FindReplaceCloseBox
*/
dojox.editor.plugins._FindReplaceCloseBox.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.editor.plugins._FindReplaceCloseBox
*/
dojox.editor.plugins._FindReplaceCloseBox.prototype.onClick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets that contains a label (like &amp;quot;Font:&amp;quot;)<br>
 *	 and a TextBox to pick a value.<br>
 *	 Used as Toolbar entry.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.editor.plugins._FindReplaceTextBox} new instance
*/
dojox.editor.plugins._FindReplaceTextBox=function(){};
/**
 * @memberOf dojox.editor.plugins._FindReplaceTextBox
*/
dojox.editor.plugins._FindReplaceTextBox.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.editor.plugins._FindReplaceTextBox
*/
dojox.editor.plugins._FindReplaceTextBox.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function for change events on the box.<br>
 * </blockquote>
 * @param {String} val 
 * @memberOf dojox.editor.plugins._FindReplaceTextBox
*/
dojox.editor.plugins._FindReplaceTextBox.prototype.onChange=function(val){};
/**
 * @memberOf dojox.editor.plugins._FindReplaceTextBox
*/
dojox.editor.plugins._FindReplaceTextBox.prototype.focus=function(){};
/**
 * @param {String} value 
 * @private
 * @memberOf dojox.editor.plugins._FindReplaceTextBox
*/
dojox.editor.plugins._FindReplaceTextBox.prototype._setValueAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the textbox's 'disabled' attribute so that it can be<br>
 *	 disabled programmatically.<br>
 * </blockquote>
 * @param {Boolean} value The boolean value to indicate if the textbox should be disabled or not
 * @private
 * @memberOf dojox.editor.plugins._FindReplaceTextBox
*/
dojox.editor.plugins._FindReplaceTextBox.prototype._setDisabledAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the arrow key events<br>
 * </blockquote>
 * @param {Event} evt object passed to this handler
 * @private
 * @memberOf dojox.editor.plugins._FindReplaceTextBox
*/
dojox.editor.plugins._FindReplaceTextBox.prototype._onKeyPress=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets that contains a label (like &amp;quot;Match case: &amp;quot;)<br>
 *	 and a checkbox to indicate if it is checked or not.<br>
 *	 Used as Toolbar entry.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.editor.plugins._FindReplaceCheckBox} new instance
*/
dojox.editor.plugins._FindReplaceCheckBox=function(){};
/**
 * @memberOf dojox.editor.plugins._FindReplaceCheckBox
*/
dojox.editor.plugins._FindReplaceCheckBox.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.editor.plugins._FindReplaceCheckBox
*/
dojox.editor.plugins._FindReplaceCheckBox.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the focus event when this widget gets focused<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins._FindReplaceCheckBox
*/
dojox.editor.plugins._FindReplaceCheckBox.prototype.focus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Passthrough for checkbox.<br>
 * </blockquote>
 * @param {Boolean} value 
 * @private
 * @memberOf dojox.editor.plugins._FindReplaceCheckBox
*/
dojox.editor.plugins._FindReplaceCheckBox.prototype._setValueAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the button's 'disabled' attribute so that it can be<br>
 *	 disabled programmatically.<br>
 * </blockquote>
 * @param {Boolean} value The flag that indicates if the checkbox is disabled or not.
 * @private
 * @memberOf dojox.editor.plugins._FindReplaceCheckBox
*/
dojox.editor.plugins._FindReplaceCheckBox.prototype._setDisabledAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Passthrough for checkbox.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins._FindReplaceCheckBox
*/
dojox.editor.plugins._FindReplaceCheckBox.prototype._getValueAttr=function(){};
/**
 * @namespace
*/
dojox.editor.plugins._FindReplaceCheckBox.checkBox={};
/**
 * @memberOf dojox.editor.plugins._FindReplaceCheckBox.checkBox
*/
dojox.editor.plugins._FindReplaceCheckBox.checkBox.prototype.isFocusable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A toolbar that derived from dijit.Toolbar, which<br>
 *	 eliminates some unnecessary event response such as LEFT_ARROW pressing<br>
 *	 and click bubbling.<br>
 * </blockquote>
 * @class
 * @extends dijit.Toolbar
 * @returns {dojox.editor.plugins._FindReplaceToolbar} new instance
*/
dojox.editor.plugins._FindReplaceToolbar=function(){};
/**
 * @memberOf dojox.editor.plugins._FindReplaceToolbar
*/
dojox.editor.plugins._FindReplaceToolbar.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a child to our _Container and prevent the default<br>
 *	 arrow key navigation function. This function may bring in<br>
 *	 side effect<br>
 * </blockquote>
 * @param {dijit._Widget} widget 
 * @param {int} [insertIndex] 
 * @memberOf dojox.editor.plugins._FindReplaceToolbar
*/
dojox.editor.plugins._FindReplaceToolbar.prototype.addChild=function(widget, insertIndex){};
/**
 * @param {Event} evt The Event object
 * tages:<br>
 * private
 * @private
 * @memberOf dojox.editor.plugins._FindReplaceToolbar
*/
dojox.editor.plugins._FindReplaceToolbar.prototype._onToolbarEvent=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a Find/Replace cabability for the editor.<br>
 *	 Note that this plugin is NOT supported on Opera currently, as opera<br>
 *	 does not implement a window.find or equiv function.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.FindReplace} new instance
*/
dojox.editor.plugins.FindReplace=function(){};
/**
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.editor=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to allow programmatic toggling of the find toolbar.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype.toggle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride so that find/replace toolbar is appended after the current toolbar.<br>
 * </blockquote>
 * @param {dijit.Toolbar} toolbar The current toolbar of the editor
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype.setToolbar=function(toolbar){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a callback handler that set a reference to the editor this plugin<br>
 *	 hosts in<br>
 * </blockquote>
 * @param {mixed} editor 
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cleanup of our custom toolbar.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to toggle whether or not find/replace is displayed.<br>
 * </blockquote>
 * @param {Boolean} show Indicate if the toolbar is shown or not
 * @param {Boolean} [ignoreState] Indicate if the status should be ignored or not
 * blurEditor:<br>
 * Indicate if the focus should be removed from the editor or not
 * @param {Boolean} [buttonDisabled] 
 * @private
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype._toggleFindReplace=function(show, ignoreState, buttonDisabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function replaces all the matched content on the editor document<br>
 *	 with the noted options for replace<br>
 * </blockquote>
 * @param {Boolean} [showMessage] Indicate if the prompt message is shown or not when the action is done.
 * @private
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype._replaceAll=function(showMessage){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function invokes a replace on the editor document with the noted options for replace<br>
 * </blockquote>
 * @param {Boolean} [showMessage] Indicate if the prompt message is shown or not when the replacement
 * reaches the end
 * @private
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype._replace=function(showMessage){};
/**
 * <b>Summary:</b><blockquote>
 *	 Populate the Find field with selected text when dialog initially displayed.<br>
 *	 Auto-select text in Find field after it is populated.<br>
 *	 If nothing selected, restore previous entry from the same session.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype._populateFindField=function(){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype._onReplaceKeyDown=function(evt){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype._onFindKeyDown=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the resize button.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function invokes a find with specific options<br>
 * </blockquote>
 * @param {String} txt The text to locate in the document.
 * @param {Boolean} caseSensitive Whether or ot to search case-sensitively.
 * @param {Boolean} backwards Whether or not to search backwards in the document.
 * @private
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype._findText=function(txt, caseSensitive, backwards){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function invokes a find on the editor document with the noted options for<br>
 *	 find.<br>
 * </blockquote>
 * @param {Boolean} [showMessage] Indicated whether the tooltip is shown or not when the search reaches the end
 * @private
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype._find=function(showMessage){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function to convert a simple pattern to a regular expression for matching.<br>
 * </blockquote>
 * Returns a regular expression object that conforms to the defined conversion rules.<br>
 * For example:<br>
 * ca*   -&gt; /^ca.*$/<br>
 * *ca*  -&gt; /^.*ca.*$/<br>
 * *c\*a*  -&gt; /^.*c\*a.*$/<br>
 * *c\*a?*  -&gt; /^.*c\*a..*$/<br>
 * and so on.
 * @param {String} pattern string A simple matching pattern to convert that follows basic rules:
 * * Means match anything, so ca* means match anything starting with ca<br>
 * ? Means match single character.  So, b?b will match to bob and bab, and so on.<br>
 * \ is an escape character.  So for example, \* means do not treat * as a match, but literal character *.<br>
 * To use a \ as a character in the string, it must be escaped.  So in the pattern it should be<br>
 * represented by \\ to be treated as an ordinary \ character instead of an escape.
 * @param {Boolean} ignoreCase An optional flag to indicate if the pattern matching should be treated as case-sensitive or not when comparing
 * By default, it is assumed case sensitive.
 * @private
 * @returns {RegExp} -
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype._filterRegexp=function(pattern, ignoreCase){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ensure that all the buttons are in a correct status<br>
 *	 when certain events are fired.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.FindReplace
*/
dojox.editor.plugins.FindReplace.prototype._checkButtons=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides the basis for an insert anchor dialog for the<br>
 *	 dijit.Editor<br>
 * </blockquote>
 * The command provided by this plugin is:<br>
 * * insertAnchor
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.InsertAnchor} new instance
*/
dojox.editor.plugins.InsertAnchor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback from the dialog when user presses &amp;quot;set&amp;quot; button.<br>
 * </blockquote>
 * @param {mixed} args 
 * @private
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype.setValue=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ridable function for getting the style to apply to the anchor.<br>
 *	 The default is a dashed border with an anchor symbol.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype.getAnchorStyle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ridable function that connects tag specific events.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._setup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A filter to identify the 'a' tags and if they're anchors,<br>
 *	 apply the right style to them.<br>
 * </blockquote>
 * @param {The} node node to search from.
 * @private
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._preDomFilter=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 A filter to identify the 'a' tags and if they're anchors,<br>
 *	 remove the class style that shows up in the editor from<br>
 *	 them.<br>
 * </blockquote>
 * @param {The} node node to search from.
 * @private
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._postDomFilter=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for when the dialog is opened.<br>
 *	 If the caret is currently in a URL then populate the URL's info into the dialog.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._onOpenDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to define a behavior on double clicks on the element<br>
 *	 type this dialog edits to select it and pop up the editor<br>
 *	 dialog.<br>
 * </blockquote>
 * @param {Object} e The double-click event.
 * @private
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._onDblClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for close event on the dialog<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._onCloseDialog=function(){};
/**
 * @private
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for getting the values to set in the dropdown.<br>
 * </blockquote>
 * @param {The} a anchor/link to process for data for the dropdown.
 * @returns {Object;} -
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._getCurrentValues=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to check the values in args and 'fix' them up as needed.<br>
 * </blockquote>
 * @param {Object} args Content being set.
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._checkValues=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to check the input to the dialog is valid<br>
 *	 and enable/disable set button<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._checkInput=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function used to figure out the full root url (no relatives)<br>
 *	 for loading images in the styles in the iframe.<br>
 * </blockquote>
 * @param {String} fullUrl The full url to tear down to the base.
 * @private
 * @returns {String} -
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._calcBaseUrl=function(fullUrl){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to apply a style to inserted anchor tags so that<br>
 *	 they are obviously anchors.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.InsertAnchor
*/
dojox.editor.plugins.InsertAnchor.prototype._applyStyles=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin allows the user to select from standard Symbols (HTML Entities)<br>
 *	 to insert at the current cursor position.  It binds to the key pattern:<br>
 *	 ctrl-shift-s for opening the insert symbol dropdown.<br>
 * </blockquote>
 * The commands provided by this plugin are:<br>
 * * insertEntity - inserts the selected HTML entity character
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.InsertEntity} new instance
*/
dojox.editor.plugins.InsertEntity=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.InsertEntity
*/
dojox.editor.plugins.InsertEntity.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.InsertEntity
*/
dojox.editor.plugins.InsertEntity.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function to filter out entity characters into their UTF-8 character form<br>
 *	 displayed in the editor.  It gets registered with the preFilters<br>
 *	 of the editor.<br>
 * </blockquote>
 * @param {String} s content passed in
 * @private
 * @memberOf dojox.editor.plugins.InsertEntity
*/
dojox.editor.plugins.InsertEntity.prototype._preFilterEntities=function(s){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function to filter out entity characters into encoded form so they<br>
 *	 are properly displayed in the editor.  It gets registered with the<br>
 *	 postFilters of the editor.<br>
 * </blockquote>
 * @param {String} s content passed in
 * @private
 * @memberOf dojox.editor.plugins.InsertEntity
*/
dojox.editor.plugins.InsertEntity.prototype._postFilterEntities=function(s){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the save button.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.InsertEntity
*/
dojox.editor.plugins.InsertEntity.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides an enhanced image link dialog that<br>
 *	 not only insert the online images, but upload the local image files onto<br>
 *	 to server then insert them as well.<br>
 *	 Dependencies:<br>
 *	 This plugin depends on dojox.form.FileUploader to upload the images on the local driver.<br>
 *	 Do the regression test whenever FileUploader is upgraded.<br>
 * </blockquote>
 * @class
 * @returns {dojox.editor.plugins.LocalImage} new instance
*/
dojox.editor.plugins.LocalImage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cleanup of the plugin.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.LocalImage
*/
dojox.editor.plugins.LocalImage.prototype.destroy=function(){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dojox.editor.plugins.LocalImage
*/
dojox.editor.plugins.LocalImage.prototype._setDialogStatus=function(value){};
/**
 * @private
 * @memberOf dojox.editor.plugins.LocalImage
*/
dojox.editor.plugins.LocalImage.prototype._isValid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the FileUploader and connect up its events<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.LocalImage
*/
dojox.editor.plugins.LocalImage.prototype._initialFileUploader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override _Plugin._initButton() to initialize DropDownButton and TooltipDialog.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.LocalImage
*/
dojox.editor.plugins.LocalImage.prototype._initButton=function(){};
/**
 * @private
 * @memberOf dojox.editor.plugins.LocalImage
*/
dojox.editor.plugins.LocalImage.prototype._checkAndSetValue=function(){};
/**
 * @private
 * @memberOf dojox.editor.plugins.LocalImage
*/
dojox.editor.plugins.LocalImage.prototype._checkAndFixInput=function(){};
/**
 * @private
 * @memberOf dojox.editor.plugins.LocalImage
*/
dojox.editor.plugins.LocalImage.prototype._cancelFileUpload=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides improved indent and outdent handling to<br>
 *	 the editor.  It tries to generate valid HTML, as well as be<br>
 *	 consistent about how it indents and outdents lists and blocks/elements.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.NormalizeIndentOutdent} new instance
*/
dojox.editor.plugins.NormalizeIndentOutdent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 An over-ride for the editor's query command enabled,<br>
 *	 so that we can prevent indents, etc, on bad elements<br>
 *	 or positions (like first element in a list).<br>
 * </blockquote>
 * @param {The} command command passed in to check enablement.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._queryCommandEnabled=function(command){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to handle outdenting a list element.<br>
 * </blockquote>
 * @param {The} listItem list item to outdent.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._outdentList=function(listItem){};
/**
 * <b>Summary:</b><blockquote>
 *	 Improved implementation of outdent, generates correct indent for<br>
 *	 ul/ol and other elements.<br>
 * </blockquote>
 * @param {String} html 
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._outdentImpl=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to outdent a block type tag.<br>
 * </blockquote>
 * @param {The} node node who's content to outdent.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._outdentElement=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function to check for text nodes.<br>
 * </blockquote>
 * @param {The} node node to check.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._isTextElement=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 This functions tests whether an indicated node is in root as inline<br>
 *	 or rooted inline elements in the page.<br>
 * </blockquote>
 * @param {The} node node to start at.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._isRootInline=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to detect if the editor body is in RTL or LTR.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._isLtr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to determine if the current tag is an inline<br>
 *	 element that does formatting, as we don't want to<br>
 *	 break/indent around it, as it can screw up text.<br>
 * </blockquote>
 * @param {The} tag tag to examine
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._isInlineFormat=function(tag){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to detect what element types<br>
 *	 are indent-controllable by us.<br>
 * </blockquote>
 * @param {The} tag tag to check
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._isIndentableElement=function(tag){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to determine if a node is 'empty'<br>
 *	 Eg, contains only blank text.  Used to determine if<br>
 *	 an empty list element should be removed or not.<br>
 * </blockquote>
 * @param {The} node node to check.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._isEmpty=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to handle indenting a list element.<br>
 * </blockquote>
 * @param {The} listItem list item to indent.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._indentList=function(listItem){};
/**
 * <b>Summary:</b><blockquote>
 *	 Improved implementation of indent, generates correct indent for<br>
 *	 ul/ol<br>
 * </blockquote>
 * @param {String} html 
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._indentImpl=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to indent a block type tag.<br>
 * </blockquote>
 * @param {The} node node who's content to indent.
 * @private
 * @returns {Return the node that was indented.} -
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._indentElement=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to get the tag name of an element<br>
 *	 if any.<br>
 * </blockquote>
 * @param {The} node node to look at.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._getTagName=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to convert the current indent style to<br>
 *	 the units we're using by some heuristic.<br>
 * </blockquote>
 * @param {The} indent indent amount to convert.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeIndentOutdent
*/
dojox.editor.plugins.NormalizeIndentOutdent.prototype._convertIndent=function(indent){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides NormalizeStyle cabability to the editor.  It is<br>
 *	 a headless plugin that tries to normalize how content is styled when<br>
 *	 it comes out of th editor ('b' or css).   It also auto-converts<br>
 *	 incoming content to the proper one expected by the browser as well so<br>
 *	 that the native styling buttons work.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.NormalizeStyle} new instance
*/
dojox.editor.plugins.NormalizeStyle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.NormalizeStyle
*/
dojox.editor.plugins.NormalizeStyle.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function to handle normalizing certain tag types contained under 'node'<br>
 * </blockquote>
 * @param {The} node node to search from.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeStyle
*/
dojox.editor.plugins.NormalizeStyle.prototype._normalizeTags=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to determine if the current tag is an inline<br>
 *	 element that does formatting, as we don't want to<br>
 *	 try to combine inlines with divs on styles.<br>
 * </blockquote>
 * @param {The} tag tag to examine
 * @private
 * @memberOf dojox.editor.plugins.NormalizeStyle
*/
dojox.editor.plugins.NormalizeStyle.prototype._isInline=function(tag){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to trap and over-ride the editor inserthtml implementation<br>
 *	 to try and filter it to match the editor's internal styling mode.<br>
 *	 Helpful for plugins like PasteFromWord, in that it extra-filters<br>
 *	 and normalizes the input if it can.<br>
 * </blockquote>
 * @param {The} html HTML string to insert.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeStyle
*/
dojox.editor.plugins.NormalizeStyle.prototype._inserthtmlImpl=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function to convert the HTML structure of 'node' into<br>
 *	 semantic tags where possible.<br>
 * </blockquote>
 * @param {DOMNode} node The node to process.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeStyle
*/
dojox.editor.plugins.NormalizeStyle.prototype._convertToSemantic=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function to convert the HTML structure of 'node' into<br>
 *	 css span styles around text instead of semantic tags.<br>
 *	 Note:  It does not do compression of spans together.<br>
 * </blockquote>
 * @param {DOMNode} node The node to process
 * @private
 * @memberOf dojox.editor.plugins.NormalizeStyle
*/
dojox.editor.plugins.NormalizeStyle.prototype._convertToCss=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Method to condense spans if you end up with multi-wrapping from<br>
 *	 from converting b, i, u, to span nodes.<br>
 * </blockquote>
 * @param {The} node node (and its children), to process.
 * @private
 * @memberOf dojox.editor.plugins.NormalizeStyle
*/
dojox.editor.plugins.NormalizeStyle.prototype._condenseSpans=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a simple CSS page break plugin that<br>
 *	 lets you insert browser pring recognizable page breaks in<br>
 *	 the document.<br>
 *	 This plugin registers the hotkey command: CTRL-SHIFT-ENTER<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.PageBreak} new instance
*/
dojox.editor.plugins.PageBreak=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.PageBreak
*/
dojox.editor.plugins.PageBreak.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.PageBreak
*/
dojox.editor.plugins.PageBreak.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function for inserting dynamic css.  This was originally<br>
 *	 in an editor.onLoadDeferred, but I ran into issues in Chrome with<br>
 *	 the tag being ignored.  Having it done at insert worked better.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.PageBreak
*/
dojox.editor.plugins.PageBreak.prototype._style=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to insert a CSS page break at the current point in the document<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.PageBreak
*/
dojox.editor.plugins.PageBreak.prototype._insertPageBreak=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the resize button.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.PageBreak
*/
dojox.editor.plugins.PageBreak.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to see if we should allow a page break at the document<br>
 *	 location.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.PageBreak
*/
dojox.editor.plugins.PageBreak.prototype._allowBreak=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides PasteFromWord cabability to the editor.  When<br>
 *	 clicked, a dialog opens with a spartan RichText instance to paste<br>
 *	 word content into via the keyboard commands.  The contents are<br>
 *	 then filtered to remove word style classes and other meta-junk<br>
 *	 that tends to cause issues.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.PasteFromWord} new instance
*/
dojox.editor.plugins.PasteFromWord=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.PasteFromWord
*/
dojox.editor.plugins.PasteFromWord.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.PasteFromWord
*/
dojox.editor.plugins.PasteFromWord.prototype.setEditor=function(editor){};
/**
 * @memberOf dojox.editor.plugins.PasteFromWord
*/
dojox.editor.plugins.PasteFromWord.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to handle setting the contents of the copy from dialog<br>
 *	 into the editor.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.PasteFromWord
*/
dojox.editor.plugins.PasteFromWord.prototype._paste=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to trigger opening the copy dialog.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.PasteFromWord
*/
dojox.editor.plugins.PasteFromWord.prototype._openDialog=function(){};
/**
 * @private
 * @memberOf dojox.editor.plugins.PasteFromWord
*/
dojox.editor.plugins.PasteFromWord.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 simple function to cleat the contents when hide is calledon dialog<br>
 *	 copy from dialog into the editor.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.PasteFromWord
*/
dojox.editor.plugins.PasteFromWord.prototype._clearDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to handle cancelling setting the contents of the<br>
 *	 copy from dialog into the editor.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.PasteFromWord
*/
dojox.editor.plugins.PasteFromWord.prototype._cancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a mechanism by which to 'beautify HTML'<br>
 *	 generated by the editor.  It is by no means perfect.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.PrettyPrint} new instance
*/
dojox.editor.plugins.PrettyPrint=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to do nothing.<br>
 *	 We don't want to append a button, we take over getValue.<br>
 * </blockquote>
 * @param {mixed} toolbar 
 * @memberOf dojox.editor.plugins.PrettyPrint
*/
dojox.editor.plugins.PrettyPrint.prototype.setToolbar=function(toolbar){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to take over getValue of editor so that<br>
 *	 we can 'pretty' the output.<br>
 * </blockquote>
 * @param {mixed} editor 
 * @memberOf dojox.editor.plugins.PrettyPrint
*/
dojox.editor.plugins.PrettyPrint.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the resize button.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.PrettyPrint
*/
dojox.editor.plugins.PrettyPrint.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides Preview cabability to the editor.  When<br>
 *	 clicked, the document in the editor frame will displayed in a separate<br>
 *	 window/tab<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.Preview} new instance
*/
dojox.editor.plugins.Preview=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.Preview
*/
dojox.editor.plugins.Preview.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.Preview
*/
dojox.editor.plugins.Preview.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to trigger previewing of the editor document<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Preview
*/
dojox.editor.plugins.Preview.prototype._preview=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the preview button.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Preview
*/
dojox.editor.plugins.Preview.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Because IE will ignore the cursor style when the editMode of the document is on,<br>
 *	 we need to create a div within the outer document to mimic the behavior of drag&amp;amp;drop<br>
 * </blockquote>
 * @class
 * @extends dojox.editor.plugins.TablePlugins
 * @returns {dojox.editor.plugins.ResizeTableColumn} new instance
*/
dojox.editor.plugins.ResizeTableColumn=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the drag&amp;amp;drop events<br>
 * </blockquote>
 * @param {The} editor editor which this plugin belongs to
 * @memberOf dojox.editor.plugins.ResizeTableColumn
*/
dojox.editor.plugins.ResizeTableColumn.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin extends from the PasteFromWord plugin and provides<br>
 *	 'safe pasting', meaning that it will not allow keyboard/menu pasting<br>
 *	 into the dijit editor.  It still runs all of the word cleanup code,<br>
 *	 including script strippers.  If you use this plugin, you don't need to<br>
 *	 use the 'PasteFromWord Plugin'<br>
 * </blockquote>
 * @class
 * @extends dojox.editor.plugins.PasteFromWord
 * @returns {dojox.editor.plugins.SafePaste} new instance
*/
dojox.editor.plugins.SafePaste=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides _Plugin.updateState().<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.SafePaste
*/
dojox.editor.plugins.SafePaste.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.SafePaste
*/
dojox.editor.plugins.SafePaste.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride the editor paste controls<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SafePaste
*/
dojox.editor.plugins.SafePaste.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides Save cabability to the editor.  When<br>
 *	 clicked, the document in the editor frame will be osted to the URL<br>
 *	 provided, or none, if none provided.  Users who desire a different save<br>
 *	 function can extend this plugin (via dojo.extend) and over-ride the<br>
 *	 save method	while save is in process, the save button is disabled.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.Save} new instance
*/
dojox.editor.plugins.Save=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.Save
*/
dojox.editor.plugins.Save.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.Save
*/
dojox.editor.plugins.Save.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 User over-ridable save function for the editor content.<br>
 *	 Please note that the service URL provided should do content<br>
 *	 filtering of the posted content to avoid XSS injection via<br>
 *	 the data from the editor.<br>
 * </blockquote>
 * @param {mixed} content 
 * @memberOf dojox.editor.plugins.Save
*/
dojox.editor.plugins.Save.prototype.save=function(content){};
/**
 * <b>Summary:</b><blockquote>
 *	 User over-ridable save success function for editor content.<br>
 *	 Be sure to call this.inherited(arguments) if over-riding this method.<br>
 * </blockquote>
 * @param {The} resp response from the server, if any, in text format.
 * @param {mixed} ioargs 
 * @memberOf dojox.editor.plugins.Save
*/
dojox.editor.plugins.Save.prototype.onSuccess=function(resp, ioargs){};
/**
 * <b>Summary:</b><blockquote>
 *	 User over-ridable save success function for editor content.<br>
 *	 Be sure to call this.inherited(arguments) if over-riding this method.<br>
 *	 resp:<br>
 *	 The response from the server, if any, in text format.<br>
 * </blockquote>
 * @param {mixed} error 
 * @param {mixed} ioargs 
 * @memberOf dojox.editor.plugins.Save
*/
dojox.editor.plugins.Save.prototype.onError=function(error, ioargs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to trigger saving of the editor document<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Save
*/
dojox.editor.plugins.Save.prototype._save=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the save button.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.Save
*/
dojox.editor.plugins.Save.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides ShowBlockNodes cabability to the editor.  When<br>
 *	 clicked, the document in the editor will apply a class to specific<br>
 *	 block nodes to make them visible in the layout.  This info is not<br>
 *	 exposed/extracted when the editor value is obtained, it is purely for help<br>
 *	 while working on the page.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.ShowBlockNodes} new instance
*/
dojox.editor.plugins.ShowBlockNodes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.ShowBlockNodes
*/
dojox.editor.plugins.ShowBlockNodes.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to allow programmatic toggling of the view.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.ShowBlockNodes
*/
dojox.editor.plugins.ShowBlockNodes.prototype.toggle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.ShowBlockNodes
*/
dojox.editor.plugins.ShowBlockNodes.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to trigger printing of the editor document<br>
 * </blockquote>
 * @param {mixed} show 
 * @private
 * @memberOf dojox.editor.plugins.ShowBlockNodes
*/
dojox.editor.plugins.ShowBlockNodes.prototype._showBlocks=function(show){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for creation of the preview button.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.ShowBlockNodes
*/
dojox.editor.plugins.ShowBlockNodes.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function used to figure out the full root url (no relatives)<br>
 *	 for loading images in the styles in the iframe.<br>
 * </blockquote>
 * @param {String} fullUrl The full url to tear down to the base.
 * @private
 * @returns {String} -
 * @memberOf dojox.editor.plugins.ShowBlockNodes
*/
dojox.editor.plugins.ShowBlockNodes.prototype._calcBaseUrl=function(fullUrl){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin allows the user to select from emoticons or &amp;quot;smileys&amp;quot;<br>
 *	 to insert at the current cursor position.<br>
 * </blockquote>
 * The commands provided by this plugin are:<br>
 * * smiley - inserts the selected emoticon
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.Smiley} new instance
*/
dojox.editor.plugins.Smiley=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.Smiley
*/
dojox.editor.plugins.Smiley.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.Smiley
*/
dojox.editor.plugins.Smiley.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function to filter out emoticons into their UTF-8 character form<br>
 *	 displayed in the editor.  It gets registered with the preFilters<br>
 *	 of the editor.<br>
 * </blockquote>
 * @param {String} value content passed in
 * @private
 * @memberOf dojox.editor.plugins.Smiley
*/
dojox.editor.plugins.Smiley.prototype._preFilterEntities=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function to filter out emoticons into encoded form so they<br>
 *	 are properly displayed in the editor.  It gets registered with the<br>
 *	 postFilters of the editor.<br>
 * </blockquote>
 * @param {String} value content passed in
 * @private
 * @memberOf dojox.editor.plugins.Smiley
*/
dojox.editor.plugins.Smiley.prototype._postFilterEntities=function(value){};
/**
 * @private
 * @memberOf dojox.editor.plugins.Smiley
*/
dojox.editor.plugins.Smiley.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Post-filter for editor to convert &amp;lt;img&amp;gt; nodes of smileys into strings like [:-)]<br>
 * </blockquote>
 * @param {mixed} str 
 * @private
 * @memberOf dojox.editor.plugins.Smiley
*/
dojox.editor.plugins.Smiley.prototype._encode=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pre-filter for editor to convert strings like [:-)] into an &amp;lt;img&amp;gt; of the corresponding smiley<br>
 * </blockquote>
 * @param {mixed} str 
 * @param {mixed} ascii 
 * @private
 * @memberOf dojox.editor.plugins.Smiley
*/
dojox.editor.plugins.Smiley.prototype._decode=function(str, ascii){};
/**
 * <b>Summary:</b><blockquote>
 *	 A keyboard accessible emoticon-picking widget (for inserting smiley characters)<br>
 * </blockquote>
 * Grid showing various emoticons.<br>
 * Can be used standalone, or as a popup.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._PaletteMixin
 * @returns {dojox.editor.plugins._SmileyPalette} new instance
 * @example
 * 	&lt;div dojoType="dojox.editor.plugins._SmileyPalette"&gt;&lt;/div&gt;
 * @example
 * 	var picker = new dojox.editor.plugins._SmileyPalette({ },srcNode);
 * 	picker.startup();
*/
dojox.editor.plugins._SmileyPalette=function(){};
/**
 * @memberOf dojox.editor.plugins._SmileyPalette
*/
dojox.editor.plugins._SmileyPalette.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 JS Object representing an emoticon<br>
 * </blockquote>
 * @class
 * @param {String} id 
 * @returns {dojox.editor.plugins.Emoticon} new instance
*/
dojox.editor.plugins.Emoticon=function(id){};
/**
 * @namespace
*/
dojox.editor.plugins.Emoticon.ascii={};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the HTML string for an &amp;lt;img&amp;gt; node that shows this smiley<br>
 * </blockquote>
 * @param {String} clazz 
 * @memberOf dojox.editor.plugins.Emoticon
*/
dojox.editor.plugins.Emoticon.prototype.imgHtml=function(clazz){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a emoticon string in ascii representation, ex: :-)<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.Emoticon
*/
dojox.editor.plugins.Emoticon.prototype.getValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Factory to create Emoticon object based on string like &amp;quot;:-)&amp;quot; rather than id like &amp;quot;smile&amp;quot;<br>
 * </blockquote>
 * @param {String} str 
*/
dojox.editor.plugins.Emoticon.fromAscii=function(str){};
/**
 * @param {DOMNode} cell 
 * @param {String} blankGif 
 * @memberOf dojox.editor.plugins.Emoticon
*/
dojox.editor.plugins.Emoticon.prototype.fillCell=function(cell, blankGif){};
/**
 * <b>Summary:</b><blockquote>
 *	 The widget that is used for the UI of the batch spelling check<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @private
 * @returns {dojox.editor.plugins._spellCheckControl} new instance
*/
dojox.editor.plugins._spellCheckControl=function(){};
/**
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype.postCreate=function(){};
/**
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype.onSkipAll=function(){};
/**
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype.onSkip=function(){};
/**
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype.onReplaceAll=function(){};
/**
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype.onReplace=function(){};
/**
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype.onEnter=function(){};
/**
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype.onCancel=function(){};
/**
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype.onAddToDic=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the focus of the control<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype.focus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Indicate that the Not Found textbox is changed or not<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype._unfoundTextBoxChange=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the value of the Not Found textbox<br>
 * </blockquote>
 * @param {String} value The value of the Not Found textbox
 * @private
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype._setUnfoundWordAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the items of the suggestion list<br>
 * </blockquote>
 * @param {Array} values The list of the suggestion items
 * @private
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype._setSuggestionListAttr=function(values){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the visibility of the progress icon<br>
 * </blockquote>
 * @param {Boolean} show 
 * @private
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype._setInProgressAttr=function(show){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enable/disable the control<br>
 * </blockquote>
 * @param {Boolean} disabled 
 * @private
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype._setDisabledAttr=function(disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the value of the Not Found textbox<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype._getUnfoundWordAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the suggested word.<br>
 *	 If the select box is selected, the value is the selected item's value,<br>
 *	 else the value the the textbox's value<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype._getSelectedWordAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the enter event<br>
 * </blockquote>
 * @param {Event} evt The event object
 * @private
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype._enter=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the cancel event<br>
 * </blockquote>
 * @param {Event} evt The event object
 * @private
 * @memberOf dojox.editor.plugins._spellCheckControl
*/
dojox.editor.plugins._spellCheckControl.prototype._cancel=function(evt){};
/**
 * @namespace
*/
dojox.editor.plugins._spellCheckControl.suggestionSelect={};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove all the items within the select widget<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._spellCheckControl.suggestionSelect
*/
dojox.editor.plugins._spellCheckControl.suggestionSelect.prototype.removeItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 De-select all the selected items<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._spellCheckControl.suggestionSelect
*/
dojox.editor.plugins._spellCheckControl.suggestionSelect.prototype.deselectAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add items to the select widget<br>
 * </blockquote>
 * @param {Array} items An array of items be added to the select
 * @memberOf dojox.editor.plugins._spellCheckControl.suggestionSelect
*/
dojox.editor.plugins._spellCheckControl.suggestionSelect.prototype.addItems=function(items){};
/**
 * <b>Summary:</b><blockquote>
 *	 It is a base network service component. It transfers text to a remote service port<br>
 *	 with cross domain ability enabled. It can split text into specified pieces and send<br>
 *	 them out one by one so that it can handle the case when the service has a limitation of<br>
 *	 the capability.<br>
 *	 The encoding is UTF-8.<br>
 * </blockquote>
 * @class
 * @returns {dojox.editor.plugins._SpellCheckScriptMultiPart} new instance
*/
dojox.editor.plugins._SpellCheckScriptMultiPart=function(){};
/**
 * @param {Number} seconds 
 * @memberOf dojox.editor.plugins._SpellCheckScriptMultiPart
*/
dojox.editor.plugins._SpellCheckScriptMultiPart.prototype.setWaitingTime=function(seconds){};
/**
 * <b>Summary:</b><blockquote>
 *	 Send the content to the service port with the specified action<br>
 * </blockquote>
 * @param {String} content The text to be sent
 * @param {String} [action] The action the service should take. Current support actions are
 * ACTION_QUERY and ACTION_UPDATE
 * @memberOf dojox.editor.plugins._SpellCheckScriptMultiPart
*/
dojox.editor.plugins._SpellCheckScriptMultiPart.prototype.send=function(content, action){};
/**
 * @param {String} data 
 * @memberOf dojox.editor.plugins._SpellCheckScriptMultiPart
*/
dojox.editor.plugins._SpellCheckScriptMultiPart.prototype.onLoad=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Assemble the responses into one result.<br>
 * </blockquote>
 * @param {The} action action token
 * @private
 * @memberOf dojox.editor.plugins._SpellCheckScriptMultiPart
*/
dojox.editor.plugins._SpellCheckScriptMultiPart.prototype._finalizeCollection=function(action){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a spelling check cabability for the editor.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.SpellCheck} new instance
*/
dojox.editor.plugins.SpellCheck=function(){};
/**
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck._spanList=[];
/**
 * @namespace
 * @private
*/
dojox.editor.plugins.SpellCheck._normalIncorrectStyle={};
/**
 * @namespace
 * @private
*/
dojox.editor.plugins.SpellCheck._ignoredIncorrectStyle={};
/**
 * @namespace
 * @private
*/
dojox.editor.plugins.SpellCheck._highlightedIncorrectStyle={};
/**
 * @namespace
 * @private
*/
dojox.editor.plugins.SpellCheck._editor={};
/**
 * @namespace
 * @private
*/
dojox.editor.plugins.SpellCheck._dialogContent={};
/**
 * @param {dijit.Editor} editor 
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Functions to submit the content of the editor<br>
 * </blockquote>
 * @param {Boolean} [delay] Indicate if the action is taken immediately or not
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._submitContent=function(delay){};
/**
 * <b>Summary:</b><blockquote>
 *	 Filter out the incorrect word style so that the value of the edtior<br>
 *	 won't include the spans that wrap around the incorrect words<br>
 * </blockquote>
 * @param {String} value The html value of the editor
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._spellCheckFilter=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Skip the all the word that have the same text as the word at the index<br>
 *	 or the given word<br>
 * </blockquote>
 * @param {The} index index of the span list
 * @param {String} [word] If this argument is given, skip all the words that have the same text
 * as the word
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._skipWordAll=function(index, word){};
/**
 * <b>Summary:</b><blockquote>
 *	 Skip the word at the index<br>
 * </blockquote>
 * @param {The} index index of the span list
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._skipWord=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ignore all the same words<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._skipAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ignore this word and move to the next unignored one.<br>
 * </blockquote>
 * @param {Event} [evt] The event object
 * @param {Boolean} [noUpdate] Indicate whether to update the status of the span list or not
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._skip=function(evt, noUpdate){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set up the underlying network service<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._setNetwork=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select the incorrect word. Move to it and highlight it<br>
 * </blockquote>
 * @param {The} index index of the span list
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._selectWord=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Replace the word at the given index with the text<br>
 * </blockquote>
 * @param {The} index index of the span list
 * @param {The} text text to be replaced with
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._replaceWord=function(index, text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Replace all the words with the same text<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._replaceAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Replace the incorrect word with the selected one,<br>
 *	 or the one the user types in the textbox<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._replace=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Send the query text to the service. The query text is a string of words<br>
 *	 separated by space.<br>
 * </blockquote>
 * @param {String} html The html value of the editor
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._query=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Populate the content of the dailog<br>
 * </blockquote>
 * @param {The} index idex of the span list
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._populateDialog=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 The handler of the onOpen event<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._openDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Move to the position when the cursor was.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._moveToBookmark=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mark the incorrect words and set up menus if available<br>
 * </blockquote>
 * @param {String} html The html value of the editor
 * @param {Object} cache The local word cache
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._markIncorrectWords=function(html, cache){};
/**
 * <b>Summary:</b><blockquote>
 *	 Apply the query result to the content<br>
 * </blockquote>
 * @param {Array} data The result of the query
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._loadData=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 The handler of the onKeyPress event of the editor<br>
 * </blockquote>
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._keyPress=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the button displayed on the editor's toolbar<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Substitute the tag with white charactors so that the server<br>
 *	 can easily process the text. For example:<br>
 *	 &amp;quot;&amp;lt;a src=&amp;quot;sample.html&amp;quot;&amp;gt;Hello, world!&amp;lt;/a&amp;gt;&amp;quot; ==&amp;gt;<br>
 *	 &amp;quot;					 Hello, world!	&amp;quot;<br>
 * </blockquote>
 * @param {The} html html code
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._html2Text=function(html){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the cursor position. It is the index of the characters<br>
 *	 where the cursor is.<br>
 * </blockquote>
 * @param {String} eValue The html value of the editor
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._getBookmark=function(eValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function invokes a find with specific options<br>
 * </blockquote>
 * @param {String} txt The text to locate in the document.
 * @param {Boolean} caseSensitive Whether or ot to search case-sensitively.
 * @param {Boolean} backwards Whether or not to search backwards in the document.
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._findText=function(txt, caseSensitive, backwards){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the ENTER event<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._enter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 When the plugin is disabled (the button is disabled), reset all to their initial status.<br>
 *	 If the interactive mode is on, check the content once it is enabled.<br>
 * </blockquote>
 * @param {Command} name name
 * @param {Command} disabled argument
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._disabled=function(name, disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect up all the events with their event handlers<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._connectUp=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancel this check action<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._cancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add the word at the index to the dictionary<br>
 * </blockquote>
 * @param {The} index index of the span list
 * @param {String} [word] If this argument is given, add the word to the dictionary and
 * skip all the words like it
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._addWord=function(index, word){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add the unrecognized word into the dictionary<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins.SpellCheck
*/
dojox.editor.plugins.SpellCheck.prototype._add=function(){};
/**
 * @class
 * @returns {dojox.editor.plugins._SpellCheckParser} new instance
*/
dojox.editor.plugins._SpellCheckParser=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parse the text into words<br>
 * </blockquote>
 * @param {String} text Plain text without html tags
 * @memberOf dojox.editor.plugins._SpellCheckParser
*/
dojox.editor.plugins._SpellCheckParser.prototype.parseIntoWords=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the indices of the words. They are in one-to-one correspondence<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._SpellCheckParser
*/
dojox.editor.plugins._SpellCheckParser.prototype.getIndices=function(){};
/**
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.editor.plugins._StatusBar} new instance
*/
dojox.editor.plugins._StatusBar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to set the value of the status bar from the widget.<br>
 *	 If no value is set, it is replaced with a non-blocking space.<br>
 * </blockquote>
 * @param {String} str The string to set as the status bar content.
 * @memberOf dojox.editor.plugins._StatusBar
*/
dojox.editor.plugins._StatusBar.prototype._setValueAttr=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to get the value of the status bar from the widget.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins._StatusBar
*/
dojox.editor.plugins._StatusBar.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides StatusBar cabability to the editor.<br>
 *	 Basically a footer bar where status can be published.  It also<br>
 *	 puts a resize handle on the status bar, allowing you to resize the<br>
 *	 editor via mouse.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.StatusBar} new instance
*/
dojox.editor.plugins.StatusBar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for the setting of the editor.<br>
 * </blockquote>
 * @param {Object} editor The editor to configure for this plugin to use.
 * @memberOf dojox.editor.plugins.StatusBar
*/
dojox.editor.plugins.StatusBar.prototype.setEditor=function(editor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Quick and dirty implementation of 'set' pattern<br>
 * </blockquote>
 * @param {The} attr attribute to set.
 * @param {The} val value to set it to.
 * @memberOf dojox.editor.plugins.StatusBar
*/
dojox.editor.plugins.StatusBar.prototype.set=function(attr, val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Quick and dirty implementation of 'get' pattern<br>
 * </blockquote>
 * @param {The} attr attribute to get.
 * @memberOf dojox.editor.plugins.StatusBar
*/
dojox.editor.plugins.StatusBar.prototype.get=function(attr){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to clean up the breadcrumb toolbar.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.StatusBar
*/
dojox.editor.plugins.StatusBar.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to set the value of the status bar from the widget.<br>
 *	 If no value is set, it is replaced with a non-blocking space.<br>
 * </blockquote>
 * @param {String} str The String value to set in the bar.
 * @memberOf dojox.editor.plugins.StatusBar
*/
dojox.editor.plugins.StatusBar.prototype._setValueAttr=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to get the value of the status bar from the widget.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.StatusBar
*/
dojox.editor.plugins.StatusBar.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A global object that handles common tasks for all the plugins. Since<br>
 *	 there are several plugins that are all calling common methods, it's preferable<br>
 *	 that they call a centralized location that either has a set variable or a<br>
 *	 timeout to only repeat code-heavy calls when necessary.<br>
 *	 <br>
 *	 <br>
 *	 <br>
 *	 Using custom undo for all browsers.<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins._TableHandler} new instance
*/
dojox.editor.plugins._TableHandler=function(){};
/**
 * @namespace
*/
dojox.editor.plugins._TableHandler.editorDomNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to handle cleaning up of connects<br>
 *	 and such.  It only finally destroys everything once<br>
 *	 all 'references' to it have gone.  As in all plugins<br>
 *	 that called init on it destroyed their refs in their<br>
 *	 cleanup calls.<br>
 * </blockquote>
 * @param {The} editor editor to detach from.
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.uninitialize=function(editor){};
/**
 * @param {mixed} evt 
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.onKeyUp=function(evt){};
/**
 * @param {mixed} evt 
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.onKeyDown=function(evt){};
/**
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.onDragStart=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Detects that an object has been dragged into place<br>
 *	 Currently, this code is only used for when a table is dragged<br>
 *	 and clears the &amp;quot;align&amp;quot; attribute, so that the table will look<br>
 *	 to be more in the place that the user expected.<br>
 *	 TODO: This code can be used for other things, most<br>
 *	 notably UNDO, which currently is not quite usable.<br>
 *	 This code could also find itself in the Editor code when it is<br>
 *	 complete.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.onDragEnd=function(){};
/**
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.onDisplayChanged=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the global handler upon a plugin's first instance of setEditor<br>
 * </blockquote>
 * @param {mixed} editor 
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.initialize=function(editor){};
/**
 * @returns {Fixed the bug that this method always returns the same timestamp} -
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.getTimeStamp=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the table in focus<br>
 *	 Collects info on the table - see return params<br>
 * </blockquote>
 * @param {mixed} forceNewData 
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.getTableInfo=function(forceNewData){};
/**
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.doMixins=function(){};
/**
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.disconnectTableKeys=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 When a table is in focus, start detecting keys<br>
 *	 Mainly checking for the TAB key so user can tab<br>
 *	 through a table (blocking the browser's desire to<br>
 *	 tab away from teh editor completely)<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.connectTableKeys=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Detects drag-n-drop in the editor (could probably be moved to there)<br>
 *	 Currently only checks if item dragged was a TABLE, and removes its align attr<br>
 *	 DOES NOT WORK IN FF - it could - but FF's drag detection is a monster<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.connectDraggable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 For table plugs<br>
 *	 Checking if a table or part of a table has focus so that<br>
 *	 Plugs can change their status<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype.checkAvailable=function(){};
/**
 * @param {mixed} type 
 * @private
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype._tempStoreTableData=function(type){};
/**
 * @param {mixed} type 
 * @private
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype._tempAvailability=function(type){};
/**
 * @param {mixed} tbl 
 * @private
 * @memberOf dojox.editor.plugins._TableHandler
*/
dojox.editor.plugins._TableHandler.prototype._prepareTable=function(tbl){};
/**
 * <b>Summary:</b><blockquote>
 *	 A collection of Plugins for inserting and modifying tables in the Editor<br>
 *	 See end of this document for all avaiable plugs<br>
 *	 and dojox/editorPlugins/tests/editorTablePlugs.html for an example<br>
 *	 <br>
 *	 NOT IMPLEMENTED: Not handling cell merge, span or split<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.TablePlugins} new instance
*/
dojox.editor.plugins.TablePlugins=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.updateState=function(){};
/**
 * @param {mixed} editor 
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.setEditor=function(editor){};
/**
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.selectTable=function(){};
/**
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.onEditorLoaded=function(){};
/**
 * @param {mixed} withinTable 
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.onDisplayChanged=function(withinTable){};
/**
 * <b>Summary:</b><blockquote>
 *	 Where each plugin performs its action<br>
 *	 Note: not using execCommand. In spite of their presence in the<br>
 *	 Editor as query-able plugins, I was not able to find any evidence<br>
 *	 that they are supported (especially in NOT IE). If they are<br>
 *	 supported in other browsers, it may help with the undo problem.<br>
 * </blockquote>
 * @param {mixed} cmd 
 * @param {mixed} args 
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.modTable=function(cmd, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 After changing column amount, change widths to<br>
 *	 keep columns even<br>
 *	 <br>
 *	 the timeout helps prevent an occasional snafu<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.makeColumnsEven=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the table in focus<br>
 *	 Collects info on the table - see return params<br>
 * </blockquote>
 * @param {mixed} forceNewData 
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.getTableInfo=function(forceNewData){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the selected cells from the passed table<br>
 *	 Returns: array of TDs or empty array<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.getSelectedCells=function(){};
/**
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.endEdit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ridden destroy to do some cleanup.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.destroy=function(){};
/**
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype.begEdit=function(){};
/**
 * @param {mixed} str 
 * @private
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype._makeTitle=function(str){};
/**
 * @private
 * @memberOf dojox.editor.plugins.TablePlugins
*/
dojox.editor.plugins.TablePlugins.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize certain plugins<br>
 * </blockquote>
 * @class
 * @extends dojox.editor.plugins.TablePlugins
 * @returns {dojox.editor.plugins.TableContextMenu} new instance
*/
dojox.editor.plugins.TableContextMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to do menu cleanup.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.TableContextMenu
*/
dojox.editor.plugins.TableContextMenu.prototype.destroy=function(){};
/**
 * @private
 * @memberOf dojox.editor.plugins.TableContextMenu
*/
dojox.editor.plugins.TableContextMenu.prototype._initButton=function(){};
/**
 * @private
 * @memberOf dojox.editor.plugins.TableContextMenu
*/
dojox.editor.plugins.TableContextMenu.prototype._createContextMenu=function(){};
/**
 * @class
 * @extends dojox.editor.plugins.TablePlugins
 * @returns {dojox.editor.plugins.InsertTable} new instance
*/
dojox.editor.plugins.InsertTable=function(){};
/**
 * @memberOf dojox.editor.plugins.InsertTable
*/
dojox.editor.plugins.InsertTable.prototype.modTable=function(){};
/**
 * @class
 * @extends dojox.editor.plugins.TablePlugins
 * @returns {dojox.editor.plugins.ModifyTable} new instance
*/
dojox.editor.plugins.ModifyTable=function(){};
/**
 * @memberOf dojox.editor.plugins.ModifyTable
*/
dojox.editor.plugins.ModifyTable.prototype.modTable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A smple widget that uses/creates a dropdown with a dojox.widget.ColorPicker.  Also provides<br>
 *	 passthroughs to the value of the color picker and convenient hook points.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.editor.plugins._CellColorDropDown} new instance
*/
dojox.editor.plugins._CellColorDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride of startup to do the basic connect setups and such.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._CellColorDropDown
*/
dojox.editor.plugins._CellColorDropDown.prototype.startup=function(){};
/**
 * @param {String} color 
 * @memberOf dojox.editor.plugins._CellColorDropDown
*/
dojox.editor.plugins._CellColorDropDown.prototype.setColor=function(color){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook point to get the value when the color picker value is selected.<br>
 * </blockquote>
 * @param {String} value The value from the color picker.
 * @memberOf dojox.editor.plugins._CellColorDropDown
*/
dojox.editor.plugins._CellColorDropDown.prototype.onChange=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook point to get when the dialog is canceled.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._CellColorDropDown
*/
dojox.editor.plugins._CellColorDropDown.prototype.onCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Passthrough function for the color picker value.<br>
 * </blockquote>
 * @param {String} value The value to set in the color picker
 * @param {Value} priorityChange to indicate whether or not to trigger an onChange event.
 * @private
 * @memberOf dojox.editor.plugins._CellColorDropDown
*/
dojox.editor.plugins._CellColorDropDown.prototype._setValueAttr=function(value, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Passthrough function for the color picker value.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins._CellColorDropDown
*/
dojox.editor.plugins._CellColorDropDown.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize ColorTableCell plugin<br>
 * </blockquote>
 * @class
 * @extends dojox.editor.plugins.TablePlugins
 * @returns {dojox.editor.plugins.ColorTableCell} new instance
*/
dojox.editor.plugins.ColorTableCell=function(){};
/**
 * @param {mixed} cmd 
 * @param {mixed} args 
 * @memberOf dojox.editor.plugins.ColorTableCell
*/
dojox.editor.plugins.ColorTableCell.prototype.modTable=function(cmd, args){};
/**
 * @private
 * @memberOf dojox.editor.plugins.ColorTableCell
*/
dojox.editor.plugins.ColorTableCell.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dialog box with options for table creation<br>
 * </blockquote>
 * @class
 * @extends dijit.Dialog
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.editor.plugins.EditorTableDialog} new instance
*/
dojox.editor.plugins.EditorTableDialog=function(){};
/**
 * @memberOf dojox.editor.plugins.EditorTableDialog
*/
dojox.editor.plugins.EditorTableDialog.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.editor.plugins.EditorTableDialog
*/
dojox.editor.plugins.EditorTableDialog.prototype.postCreate=function(){};
/**
 * @memberOf dojox.editor.plugins.EditorTableDialog
*/
dojox.editor.plugins.EditorTableDialog.prototype.onInsert=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to clean up memory so that the dialog is destroyed<br>
 *	 when closed.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.EditorTableDialog
*/
dojox.editor.plugins.EditorTableDialog.prototype.onCancel=function(){};
/**
 * @param {mixed} tableText 
 * @memberOf dojox.editor.plugins.EditorTableDialog
*/
dojox.editor.plugins.EditorTableDialog.prototype.onBuildTable=function(tableText){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dialog box with options for editing a table<br>
 * </blockquote>
 * @class
 * @extends dijit.Dialog
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.editor.plugins.EditorModifyTableDialog} new instance
*/
dojox.editor.plugins.EditorModifyTableDialog=function(){};
/**
 * @param {mixed} color 
 * @memberOf dojox.editor.plugins.EditorModifyTableDialog
*/
dojox.editor.plugins.EditorModifyTableDialog.prototype.setBrdColor=function(color){};
/**
 * @param {mixed} color 
 * @memberOf dojox.editor.plugins.EditorModifyTableDialog
*/
dojox.editor.plugins.EditorModifyTableDialog.prototype.setBkColor=function(color){};
/**
 * @memberOf dojox.editor.plugins.EditorModifyTableDialog
*/
dojox.editor.plugins.EditorModifyTableDialog.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.editor.plugins.EditorModifyTableDialog
*/
dojox.editor.plugins.EditorModifyTableDialog.prototype.postCreate=function(){};
/**
 * @param {mixed} tableText 
 * @memberOf dojox.editor.plugins.EditorModifyTableDialog
*/
dojox.editor.plugins.EditorModifyTableDialog.prototype.onSetTable=function(tableText){};
/**
 * @memberOf dojox.editor.plugins.EditorModifyTableDialog
*/
dojox.editor.plugins.EditorModifyTableDialog.prototype.onSet=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to clean up memory so that the dialog is destroyed<br>
 *	 when closed.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.EditorModifyTableDialog
*/
dojox.editor.plugins.EditorModifyTableDialog.prototype.onCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cleanup function.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.EditorModifyTableDialog
*/
dojox.editor.plugins.EditorModifyTableDialog.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A smple widget that uses/creates a dropdown with a dojox.widget.ColorPicker.  Also provides<br>
 *	 passthroughs to the value of the color picker and convenient hook points.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.editor.plugins._TextColorDropDown} new instance
*/
dojox.editor.plugins._TextColorDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride of startup to do the basic connect setups and such.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._TextColorDropDown
*/
dojox.editor.plugins._TextColorDropDown.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook point to get the value when the color picker value is selected.<br>
 * </blockquote>
 * @param {String} value The value from the color picker.
 * @memberOf dojox.editor.plugins._TextColorDropDown
*/
dojox.editor.plugins._TextColorDropDown.prototype.onChange=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook point to get when the dialog is canceled.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins._TextColorDropDown
*/
dojox.editor.plugins._TextColorDropDown.prototype.onCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Passthrough function for the color picker value.<br>
 * </blockquote>
 * @param {String} value The value to set in the color picker
 * @param {Value} priorityChange to indicate whether or not to trigger an onChange event.
 * @private
 * @memberOf dojox.editor.plugins._TextColorDropDown
*/
dojox.editor.plugins._TextColorDropDown.prototype._setValueAttr=function(value, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Passthrough function for the color picker value.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.editor.plugins._TextColorDropDown
*/
dojox.editor.plugins._TextColorDropDown.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides dropdown color pickers for setting text color and background color<br>
 *	 and makes use of the nicer-looking (though not entirely accessible), dojox.widget.ColorPicker.<br>
 * </blockquote>
 * The commands provided by this plugin are:<br>
 * * foreColor - sets the text color<br>
 * * hiliteColor - sets the background color
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.TextColor} new instance
*/
dojox.editor.plugins.TextColor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides _Plugin.updateState().  This updates the ColorPalette<br>
 *	 to show the color of the currently selected text.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.TextColor
*/
dojox.editor.plugins.TextColor.prototype.updateState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride cleanup function.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.TextColor
*/
dojox.editor.plugins.TextColor.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A 'line break' between two `dijit.Toolbar` items so that very<br>
 *	 long toolbars can be organized a bit.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.editor.plugins.ToolbarLineBreak} new instance
*/
dojox.editor.plugins.ToolbarLineBreak=function(){};
/**
 * @memberOf dojox.editor.plugins.ToolbarLineBreak
*/
dojox.editor.plugins.ToolbarLineBreak.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This widget isn't focusable, so pass along that fact.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.ToolbarLineBreak
*/
dojox.editor.plugins.ToolbarLineBreak.prototype.isFocusable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds an icon to the Editor toolbar that when clicked, opens a system dialog<br>
 *	 Although the toolbar icon is a tiny &amp;quot;image&amp;quot; the uploader could be used for<br>
 *	 any file type<br>
 * </blockquote>
 * @class
 * @extends dijit._editor._Plugin
 * @returns {dojox.editor.plugins.UploadImage} new instance
*/
dojox.editor.plugins.UploadImage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride for button state control for disabled to work.<br>
 * </blockquote>
 * @memberOf dojox.editor.plugins.UploadImage
*/
dojox.editor.plugins.UploadImage.prototype.updateState=function(){};
/**
 * @param {mixed} toolbar 
 * @memberOf dojox.editor.plugins.UploadImage
*/
dojox.editor.plugins.UploadImage.prototype.setToolbar=function(toolbar){};
/**
 * @param {mixed} data 
 * @param {mixed} ioArgs 
 * @param {mixed} widgetRef 
 * @memberOf dojox.editor.plugins.UploadImage
*/
dojox.editor.plugins.UploadImage.prototype.onComplete=function(data, ioArgs, widgetRef){};
/**
 * @memberOf dojox.editor.plugins.UploadImage
*/
dojox.editor.plugins.UploadImage.prototype.insertTempImage=function(){};
/**
 * @memberOf dojox.editor.plugins.UploadImage
*/
dojox.editor.plugins.UploadImage.prototype.createFileInput=function(){};
/**
 * @private
 * @memberOf dojox.editor.plugins.UploadImage
*/
dojox.editor.plugins.UploadImage.prototype._initButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a wrapper object around a Flash movie; this is the DojoX equivilent<br>
 *	 to SWFObject.<br>
 * </blockquote>
 * Creates a wrapper object around a Flash movie.  Wrapper object will<br>
 * insert the movie reference in node; when the browser first starts<br>
 * grabbing the movie, onReady will be fired; when the movie has finished<br>
 * loading, it will fire onLoad.<br>
 * <br>
 * If your movie uses ExternalInterface, you should use the onLoad event<br>
 * to do any kind of proxy setup (see dojox.embed.Flash.proxy); this seems<br>
 * to be the only consistent time calling EI methods are stable (since the<br>
 * Flash movie will shoot several methods into the window object before<br>
 * EI callbacks can be used properly).
 * @see dojox.embed.Flash
 * @class
 * @returns {dojox.embed.Flash} new instance
 * @example
 * Embed a flash movie in a document using the new operator, and get a reference to it.
 * 	var movie = new dojox.embed.Flash({
 * 		path: "path/to/my/movie.swf",
 * 		width: 400,
 * 		height: 300
 * 	}, myWrapperNode, "testLoaded");
 * @example
 * Embed a flash movie in a document without using the new operator.
 * 	var movie = dojox.embed.Flash({
 * 		path: "path/to/my/movie.swf",
 * 		width: 400,
 * 		height: 300,
 * 		style: "position:absolute;top:0;left:0"
 * 	}, myWrapperNode, "testLoaded");
 * 
 * File can only be run from a server, due to SWF dependency.
*/
dojox.embed.Flash=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create the set of passed methods on the dojox.embed.Flash object<br>
 *	 so that you can call that object directly, as opposed to having to<br>
 *	 delve into the internal movie to do this.  Intended to make working<br>
 *	 with Flash movies that use ExternalInterface much easier to use.<br>
 * </blockquote>
 * @param {dojox.embed.Flash} obj 
 * @param {Array|String} methods 
 * @example
 * Create "setMessage" and "getMessage" methods on foo.
 * 	var foo = new dojox.embed.Flash(args, someNode);
 * 	dojo.connect(foo, "onLoad", dojo.hitch(foo, function(){
 * 		dojox.embed.Flash.proxy(this, [ "setMessage", "getMessage" ]);
 * 		this.setMessage("dojox.embed.Flash.proxy is pretty cool...");
 * 		console.log(this.getMessage());
 * 	}));
*/
dojox.embed.Flash.proxy=function(obj, methods){};
/**
 * @param {mixed} kwArgs 
 * @param {mixed} node 
*/
dojox.embed.Flash.place=function(kwArgs, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function for you to attach to when the movie reference is first<br>
 *	 pushed into the document.<br>
 * </blockquote>
 * @param {HTMLObject} movie 
 * @memberOf dojox.embed.Flash
*/
dojox.embed.Flash.prototype.onReady=function(movie){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function for you to attach to when the movie has finished downloading<br>
 *	 and is ready to be manipulated.<br>
 * </blockquote>
 * @param {HTMLObject} movie 
 * @memberOf dojox.embed.Flash
*/
dojox.embed.Flash.prototype.onLoad=function(movie){};
/**
 * <b>Summary:</b><blockquote>
 *	 A stub you can connect to if you are looking to fire code when the<br>
 *	 engine becomes available.  A note: DO NOT use this event to<br>
 *	 place a movie in a document; it will usually fire before DOMContentLoaded<br>
 *	 is fired, and you will get an error.  Use dojo.addOnLoad instead.<br>
 * </blockquote>
*/
dojox.embed.Flash.onInitialize=function(){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.embed.Flash
*/
dojox.embed.Flash.prototype.onError=function(msg){};
/**
 * @param {dojox.embed.__flashArgs} kwArgs 
 * @param {DOMNode} [node] 
 * @memberOf dojox.embed.Flash
*/
dojox.embed.Flash.prototype.init=function(kwArgs, node){};
/**
 * @memberOf dojox.embed.Flash
*/
dojox.embed.Flash.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets Flash movie by id.<br>
 * </blockquote>
 * Probably includes methods for outdated<br>
 * browsers, but this should catch all cases.<br>
 * arguments:
 * @param {String} movieName The name of the SWF
 * @param {Object} doc The document, if not current window
 * (not fully supported)
 * @example
 *  var movie = dojox.embed.Flash.byId("myId");
 * @memberOf dojox.embed.Flash
*/
dojox.embed.Flash.prototype.byId=function(movieName, doc){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Cleans up before calling onLoad.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.embed.Flash
*/
dojox.embed.Flash.prototype._onload=function(){};
/**
 * @private
 * @memberOf dojox.embed.Flash
*/
dojox.embed.Flash.prototype._destroy=function(){};
/**
 * @param {mixed} kwArgs 
 * @private
*/
dojox.embed.Flash.__ie_markup__=function(kwArgs){};
/**
 * @param {String} path The URL of the movie to embed.
 * @param {String} [id] A unique key that will be used as the id of the created markup.  If you don't
 * provide this, a unique key will be generated.
 * @param {Number} [width] The width of the embedded movie; the default value is 320px.
 * @param {Number} [height] The height of the embedded movie; the default value is 240px
 * @param {String} [style] Any CSS style information (i.e. style=&quot;background-color:transparent&quot;) you want
 * to define on the markup.
 * @param {Object} [params] A set of key/value pairs that you want to define in the resultant markup.
 * @param {Object} [vars] A set of key/value pairs that the Flash movie will interpret as FlashVars.
 * @param {Boolean} [expressInstall] Whether or not to include any kind of expressInstall info. Default is false.
 * @param {String} [redirect] A url to redirect the browser to if the current Flash version is not supported.
 * @private
*/
dojox.embed.__flashArgs=function(path, id, width, height, style, params, vars, expressInstall, redirect){};
/**
 * @param {String} path The URL of the movie to embed.
 * @param {String} [id] A unique key that will be used as the id of the created markup.  If you don't
 * provide this, a unique key will be generated.
 * @param {Number} [width] The width of the embedded movie; the default value is 320px.
 * @param {Number} [height] The height of the embedded movie; the default value is 240px
 * @param {Object} [params] A set of key/value pairs that you want to define in the resultant markup.
 * @param {String} [redirect] A url to redirect the browser to if the current QuickTime version is not supported.
 * @private
*/
dojox.embed.__QTArgs=function(path, id, width, height, params, redirect){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget you can use to embed either a Flash or Quicktime<br>
 *	 movie.<br>
 * </blockquote>
 * @example
 * From markup:
 * 	&lt;div dojoType="dojox.embed.Object" src="path/to/movie.swf"&gt;&lt;/div&gt;
 * @example
 * Programmatic:
 * 	var mov=new dojox.embed.Object({
 * 		src: "path/to/movie.swf"
 * 	}, node);
*/
dojox.embed.Object=function(){};
/**
 * @namespace
*/
dojox.embed.flashVars={};
/**
 * @class
 * @returns {dojox.embed.Flash.init} new instance
*/
dojox.embed.Flash.init=function(){};
/**
 * @class
 * @private
 * @returns {dojox.embed.Flash._destroy} new instance
*/
dojox.embed.Flash._destroy=function(){};
/**
 * @class
 * @private
 * @returns {dojox.embed.__flashArgs} new instance
*/
dojox.embed.__flashArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Key method. Serializes an object.<br>
 * </blockquote>
 * @param {String} n The name for the object, such as: &quot;button&quot;
 * @param {Object} o The object to serialize
 * @returns {String} -
*/
dojox.embed.flashVars.serialize=function(n, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget you can use to embed either a Flash or Quicktime<br>
 *	 movie.<br>
 * </blockquote>
 * @class
 * @returns {dojox.embed.Object} new instance
 * @example
 * From markup:
 * 	&lt;div dojoType="dojox.embed.Object" src="path/to/movie.swf"&gt;&lt;/div&gt;
 * @example
 * Programmatic:
 * 	var mov=new dojox.embed.Object({
 * 		src: "path/to/movie.swf"
 * 	}, node);
*/
dojox.embed.Object=function(){};
/**
 * @memberOf dojox.embed.Object
*/
dojox.embed.Object.prototype.postCreate=function(){};
/**
 * @namespace
*/
dojox.embed.Object.domNode={};
/**
 * @class
 * @private
 * @returns {dojox.embed.__QTArgs} new instance
*/
dojox.embed.__QTArgs=function(){};
/**
 * @namespace
*/
dojox.encoding.easy64={};
/**
 * @namespace
*/
dojox.encoding.digests={};
/**
 * @namespace
*/
dojox.encoding.crypto={};
/**
 * @namespace
*/
dojox.encoding.compression={};
/**
 * @namespace
*/
dojox.encoding.bits={};
/**
 * @namespace
*/
dojox.encoding.base64={};
/**
 * @namespace
*/
dojox.encoding.ascii85={};
/**
 * <b>Summary:</b><blockquote>
 *	 encodes input data in ascii85 string<br>
 * </blockquote>
 * @param {Array:} input an array of numbers (0-255) to encode
 * @returns {String} -
*/
dojox.encoding.ascii85.encode=function(input){};
/**
 * <b>Summary:</b><blockquote>
 *	 decodes the input string back to array of numbers<br>
 * </blockquote>
 * @param {String:} input the input string to decode
*/
dojox.encoding.ascii85.decode=function(input){};
/**
 * @param {byte[]} ba 
 * @returns {string} -
*/
dojox.encoding.base64.encode=function(ba){};
/**
 * @param {string} str 
 * @returns {byte[]} -
*/
dojox.encoding.base64.decode=function(str){};
/**
*/
dojox.encoding.bits.OutputStream=function(){};
/**
 * @param {mixed} buffer 
 * @param {mixed} width 
*/
dojox.encoding.bits.InputStream=function(buffer, width){};
/**
 * @class
 * @returns {dojox.encoding.bits.OutputStream} new instance
*/
dojox.encoding.bits.OutputStream=function(){};
/**
 * @memberOf dojox.encoding.bits.OutputStream
*/
dojox.encoding.bits.OutputStream.prototype.reset=function(){};
/**
 * @param {mixed} value 
 * @param {mixed} width 
 * @memberOf dojox.encoding.bits.OutputStream
*/
dojox.encoding.bits.OutputStream.prototype.putBits=function(value, width){};
/**
 * @memberOf dojox.encoding.bits.OutputStream
*/
dojox.encoding.bits.OutputStream.prototype.getWidth=function(){};
/**
 * @memberOf dojox.encoding.bits.OutputStream
*/
dojox.encoding.bits.OutputStream.prototype.getBuffer=function(){};
/**
 * @class
 * @returns {dojox.encoding.bits.OutputStream.reset} new instance
*/
dojox.encoding.bits.OutputStream.reset=function(){};
/**
 * @class
 * @returns {dojox.encoding.bits.OutputStream.putBits} new instance
*/
dojox.encoding.bits.OutputStream.putBits=function(){};
/**
 * @class
 * @returns {dojox.encoding.bits.OutputStream.getBuffer} new instance
*/
dojox.encoding.bits.OutputStream.getBuffer=function(){};
/**
 * @class
 * @returns {dojox.encoding.bits.InputStream} new instance
*/
dojox.encoding.bits.InputStream=function(){};
/**
 * @memberOf dojox.encoding.bits.InputStream
*/
dojox.encoding.bits.InputStream.prototype.getWidth=function(){};
/**
 * @param {mixed} width 
 * @memberOf dojox.encoding.bits.InputStream
*/
dojox.encoding.bits.InputStream.prototype.getBits=function(width){};
/**
 * @class
 * @returns {dojox.encoding.bits.InputStream.getBits} new instance
*/
dojox.encoding.bits.InputStream.getBits=function(){};
/**
 * @namespace
*/
dojox.encoding.compression.lzw={};
/**
 * @param {mixed} n 
*/
dojox.encoding.compression.lzw.Encoder=function(n){};
/**
 * @param {mixed} n 
*/
dojox.encoding.compression.lzw.Decoder=function(n){};
/**
 * @class
 * @returns {dojox.encoding.compression.lzw.Encoder} new instance
*/
dojox.encoding.compression.lzw.Encoder=function(){};
/**
 * @memberOf dojox.encoding.compression.lzw.Encoder
*/
dojox.encoding.compression.lzw.Encoder.prototype.init=function(){};
/**
 * @param {mixed} stream 
 * @memberOf dojox.encoding.compression.lzw.Encoder
*/
dojox.encoding.compression.lzw.Encoder.prototype.flush=function(stream){};
/**
 * @param {mixed} value 
 * @param {mixed} stream 
 * @memberOf dojox.encoding.compression.lzw.Encoder
*/
dojox.encoding.compression.lzw.Encoder.prototype.encode=function(value, stream){};
/**
 * @class
 * @returns {dojox.encoding.compression.lzw.Encoder.init} new instance
*/
dojox.encoding.compression.lzw.Encoder.init=function(){};
/**
 * @class
 * @returns {dojox.encoding.compression.lzw.Encoder.encode} new instance
*/
dojox.encoding.compression.lzw.Encoder.encode=function(){};
/**
 * @class
 * @returns {dojox.encoding.compression.lzw.Encoder.flush} new instance
*/
dojox.encoding.compression.lzw.Encoder.flush=function(){};
/**
 * @class
 * @returns {dojox.encoding.compression.lzw.Decoder} new instance
*/
dojox.encoding.compression.lzw.Decoder=function(){};
/**
 * @memberOf dojox.encoding.compression.lzw.Decoder
*/
dojox.encoding.compression.lzw.Decoder.prototype.init=function(){};
/**
 * @param {mixed} stream 
 * @memberOf dojox.encoding.compression.lzw.Decoder
*/
dojox.encoding.compression.lzw.Decoder.prototype.decode=function(stream){};
/**
 * @class
 * @returns {dojox.encoding.compression.lzw.Decoder.init} new instance
*/
dojox.encoding.compression.lzw.Decoder.init=function(){};
/**
 * @class
 * @returns {dojox.encoding.compression.lzw.Decoder.decode} new instance
*/
dojox.encoding.compression.lzw.Decoder.decode=function(){};
/**
 * @param {mixed} n 
*/
dojox.encoding.compression.Splay=function(n){};
/**
 * @class
 * @returns {dojox.encoding.compression.Splay} new instance
*/
dojox.encoding.compression.Splay=function(){};
/**
 * @param {mixed} i 
 * @memberOf dojox.encoding.compression.Splay
*/
dojox.encoding.compression.Splay.prototype.splay=function(i){};
/**
 * @memberOf dojox.encoding.compression.Splay
*/
dojox.encoding.compression.Splay.prototype.reset=function(){};
/**
 * @param {mixed} value 
 * @param {mixed} stream 
 * @memberOf dojox.encoding.compression.Splay
*/
dojox.encoding.compression.Splay.prototype.encode=function(value, stream){};
/**
 * @param {mixed} stream 
 * @memberOf dojox.encoding.compression.Splay
*/
dojox.encoding.compression.Splay.prototype.decode=function(stream){};
/**
 * <b>Summary:</b><blockquote>
 *	 &amp;quot;empty&amp;quot; RSA key constructor<br>
 *	 rndf: Function?:<br>
 *	 function that returns an instance of a random number generator<br>
 *	 (see dojox.math.random for details)<br>
 * </blockquote>
 * @see dojox.math.random
 * @param {mixed} rngf 
*/
dojox.encoding.crypto.RSAKey=function(rngf){};
/**
 * @namespace
*/
dojox.encoding.crypto.outputTypes={};
/**
 * @namespace
*/
dojox.encoding.crypto.cipherModes={};
/**
 * @class
 * @returns {dojox.RSAKey} new instance
*/
dojox.RSAKey=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the private key fields N, e, d and CRT params from hex strings<br>
 * </blockquote>
 * @param {mixed} N 
 * @param {mixed} E 
 * @param {mixed} D 
 * @param {mixed} P 
 * @param {mixed} Q 
 * @param {mixed} DP 
 * @param {mixed} DQ 
 * @param {mixed} C 
 * @memberOf dojox.RSAKey
*/
dojox.RSAKey.prototype.setPrivateEx=function(N, E, D, P, Q, DP, DQ, C){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the private key fields N, e, d and CRT params from hex strings<br>
 * </blockquote>
 * @param {mixed} N 
 * @param {mixed} E 
 * @param {mixed} D 
 * @memberOf dojox.RSAKey
*/
dojox.RSAKey.prototype.setPrivate=function(N, E, D){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a new random private key B bits long, using public expt E<br>
 * </blockquote>
 * @param {mixed} B 
 * @param {mixed} E 
 * @memberOf dojox.RSAKey
*/
dojox.RSAKey.prototype.generate=function(B, E){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the PKCS#1 RSA decryption of &amp;quot;ctext&amp;quot;.<br>
 * </blockquote>
 * @param {String:} ctext an even-length hex string
 * @memberOf dojox.RSAKey
*/
dojox.RSAKey.prototype.decrypt=function(ctext){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the private key fields N, e, d and CRT params from hex strings<br>
 * </blockquote>
 * @class
 * @returns {RSAKey.setPrivate} new instance
*/
RSAKey.setPrivate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the private key fields N, e, d and CRT params from hex strings<br>
 * </blockquote>
 * @class
 * @returns {RSAKey.setPrivateEx} new instance
*/
RSAKey.setPrivateEx=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a new random private key B bits long, using public expt E<br>
 * </blockquote>
 * @class
 * @returns {RSAKey.generate} new instance
*/
RSAKey.generate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 &amp;quot;empty&amp;quot; RSA key constructor<br>
 *	 rndf: Function?:<br>
 *	 function that returns an instance of a random number generator<br>
 *	 (see dojox.math.random for details)<br>
 * </blockquote>
 * @see dojox.math.random
 * @class
 * @param {mixed} rngf 
 * @returns {dojox.encoding.crypto.RSAKey} new instance
*/
dojox.encoding.crypto.RSAKey=function(rngf){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the public key fields N and e from hex strings<br>
 * </blockquote>
 * @param {mixed} N 
 * @param {mixed} E 
 * @memberOf dojox.encoding.crypto.RSAKey
*/
dojox.encoding.crypto.RSAKey.prototype.setPublic=function(N, E){};
/**
 * @param {mixed} text 
 * @memberOf dojox.encoding.crypto.RSAKey
*/
dojox.encoding.crypto.RSAKey.prototype.encrypt=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 convert an array of words to a string<br>
 * </blockquote>
 * @param {word[]} wa 
 * @returns {string} -
*/
dojox.encoding.digests.wordToString=function(wa){};
/**
 * <b>Summary:</b><blockquote>
 *	 convert an array of words to a hex tab<br>
 * </blockquote>
 * @param {word[]} wa 
 * @returns {string} -
*/
dojox.encoding.digests.wordToHex=function(wa){};
/**
 * <b>Summary:</b><blockquote>
 *	 convert an array of words to base64 encoding, should be more efficient<br>
 *	 than using dojox.encoding.base64<br>
 * </blockquote>
 * @param {word[]} wa 
 * @returns {string} -
*/
dojox.encoding.digests.wordToBase64=function(wa){};
/**
 * <b>Summary:</b><blockquote>
 *	 convert a string to a word array<br>
 * </blockquote>
 * @param {string} s 
 * @returns {word[]} -
*/
dojox.encoding.digests.stringToWord=function(s){};
/**
 * <b>Summary:</b><blockquote>
 *	 add a pair of words together with rollover<br>
 * </blockquote>
 * @param {word} a 
 * @param {word} b 
 * @returns {word} -
*/
dojox.encoding.digests.addWords=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 Computes the SHA1 digest of the data, and returns the result according to output type.<br>
 * </blockquote>
 * @param {String} data 
 * @param {dojox.encoding.digests.outputTypes} [outputType] 
 * @returns {word[]|string} -
*/
dojox.encoding.digests.SHA1=function(data, outputType){};
/**
 * @param {string} data 
 * @param {dojox.encoding.digests.outputTypes} [outputType] 
 * @returns {word[]|string} -
*/
dojox.encoding.digests.MD5=function(data, outputType){};
/**
 * @namespace
*/
dojox.encoding.digests.outputTypes={};
/**
 * @param {string} data 
 * @param {string} key 
 * @param {dojox.encoding.digests.outputTypes} [outputType] 
 * @private
 * @returns {word[]|string} -
*/
dojox.encoding.digests.MD5._hmac=function(data, key, outputType){};
/**
 * <b>Summary:</b><blockquote>
 *	 computes the digest of data, and returns the result according to type outputType<br>
 * </blockquote>
 * @param {string} data 
 * @param {string} key 
 * @param {dojox.encoding.digests.outputTypes} [outputType] 
 * @private
 * @returns {word[]|string} -
*/
dojox.encoding.digests.SHA1._hmac=function(data, key, outputType){};
/**
 * <b>Summary:</b><blockquote>
 *	 encodes input data in easy64 string<br>
 * </blockquote>
 * @param {Array:} input an array of numbers (0-255) to encode
 * @returns {String} -
*/
dojox.encoding.easy64.encode=function(input){};
/**
 * <b>Summary:</b><blockquote>
 *	 decodes the input string back to array of numbers<br>
 * </blockquote>
 * @param {String:} input the input string to decode
*/
dojox.encoding.easy64.decode=function(input){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the SWF files and versions we are using.<br>
 * </blockquote>
 * @param {String} url The URL to this Flash file.
 * @param {boolean} [visible] Whether the Flash file is visible or not. If it is not visible we hide
 * it off the screen. This defaults to true (i.e. the Flash file is<br>
 * visible).<br>
*/
dojox.flash.setSwf=function(url, visible){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called back when the Flash subsystem is finished loading.<br>
 * </blockquote>
 * A callback when the Flash subsystem is finished loading and can be<br>
 * worked with. To be notified when Flash is finished loading, add a<br>
 * loaded listener:<br>
 * <br>
 * dojox.flash.addLoadedListener(loadedListener);<br>
*/
dojox.flash.loaded=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called if Flash is being installed.<br>
 * </blockquote>
 * A callback to know if Flash is currently being installed or<br>
 * having its version revved. To be notified if Flash is installing, connect<br>
 * your callback to this method using the following:<br>
 * <br>
 * dojo.event.connect(dojox.flash, "installing", myInstance, "myCallback");<br>
*/
dojox.flash.installing=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a listener to know when Flash is finished loading.<br>
 *	 Useful if you don't want a dependency on dojo.event.<br>
 * </blockquote>
 * @param {Function} listener A function that will be called when Flash is done loading.
*/
dojox.flash.addLoadedListener=function(listener){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a listener to know if Flash is being installed.<br>
 *	 Useful if you don't want a dependency on dojo.event.<br>
 * </blockquote>
 * @param {Function} listener A function that will be called if Flash is being
 * installed<br>
*/
dojox.flash.addInstallingListener=function(listener){};
/**
 * @private
*/
dojox.flash._initialize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helps install Flash plugin if needed.<br>
 * </blockquote>
 * Figures out the best way to automatically install the Flash plugin<br>
 * for this browser and platform. Also determines if installation or<br>
 * revving of the current plugin is needed on this platform.<br>
*/
dojox.flash.Install=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class that helps us determine whether Flash is available.<br>
 * </blockquote>
 * A class that helps us determine whether Flash is available,<br>
 * it's major and minor versions, and what Flash version features should<br>
 * be used for Flash/JavaScript communication. Parts of this code<br>
 * are adapted from the automatic Flash plugin detection code autogenerated<br>
 * by the Macromedia Flash 8 authoring environment.<br>
 * <br>
 * An instance of this class can be accessed on dojox.flash.info after<br>
 * the page is finished loading.<br>
*/
dojox.flash.Info=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class that is used to write out the Flash object into the page.<br>
 * </blockquote>
 * Writes out the necessary tags to embed a Flash file into the page. Note that<br>
 * these tags are written out as the page is loaded using document.write, so<br>
 * you must call this class before the page has finished loading.
 * @param {mixed} visible 
*/
dojox.flash.Embed=function(visible){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class that is used to communicate between Flash and JavaScript.<br>
 * </blockquote>
 * This class helps mediate Flash and JavaScript communication. Internally<br>
 * it uses Flash 8's ExternalInterface API, but adds functionality to fix<br>
 * various encoding bugs that ExternalInterface has.<br>
*/
dojox.flash.Communicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the SWF files and versions we are using.<br>
 * </blockquote>
 * @class
 * @returns {dojox.flash.setSwf} new instance
*/
dojox.flash.setSwf=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class that helps us determine whether Flash is available.<br>
 * </blockquote>
 * A class that helps us determine whether Flash is available,<br>
 * it's major and minor versions, and what Flash version features should<br>
 * be used for Flash/JavaScript communication. Parts of this code<br>
 * are adapted from the automatic Flash plugin detection code autogenerated<br>
 * by the Macromedia Flash 8 authoring environment.<br>
 * <br>
 * An instance of this class can be accessed on dojox.flash.info after<br>
 * the page is finished loading.
 * @class
 * @returns {dojox.flash.Info} new instance
*/
dojox.flash.Info=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Asserts that this environment has the given major, minor, and revision<br>
 *	 numbers for the Flash player.<br>
 * </blockquote>
 * Asserts that this environment has the given major, minor, and revision<br>
 * numbers for the Flash player.<br>
 * <br>
 * Example- To test for Flash Player 7r14:<br>
 * <br>
 * dojox.flash.info.isVersionOrAbove(7, 0, 14)
 * @param {int} reqMajorVer 
 * @param {int} reqMinorVer 
 * @param {int} reqVer 
 * @memberOf dojox.flash.Info
*/
dojox.flash.Info.prototype.isVersionOrAbove=function(reqMajorVer, reqMinorVer, reqVer){};
/**
 * @private
 * @memberOf dojox.flash.Info
*/
dojox.flash.Info.prototype._detectVersion=function(){};
/**
 * @param {mixed} testVersion 
 * @private
 * @memberOf dojox.flash.Info
*/
dojox.flash.Info.prototype._JSFlashInfo=function(testVersion){};
/**
 * @class
 * @private
 * @returns {dojox.flash.Info._detectVersion} new instance
*/
dojox.flash.Info._detectVersion=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class that is used to write out the Flash object into the page.<br>
 * </blockquote>
 * Writes out the necessary tags to embed a Flash file into the page. Note that<br>
 * these tags are written out as the page is loaded using document.write, so<br>
 * you must call this class before the page has finished loading.
 * @class
 * @returns {dojox.flash.Embed} new instance
*/
dojox.flash.Embed=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Writes the Flash into the page.<br>
 * </blockquote>
 * This must be called before the page<br>
 * is finished loading.
 * @param {Boolean} [doExpressInstall] Whether to write out Express Install
 * information. Optional value; defaults to false.
 * @memberOf dojox.flash.Embed
*/
dojox.flash.Embed.prototype.write=function(doExpressInstall){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the visibility of this Flash object.<br>
 * </blockquote>
 * @param {Boolean} visible 
 * @memberOf dojox.flash.Embed
*/
dojox.flash.Embed.prototype.setVisible=function(visible){};
/**
 * @memberOf dojox.flash.Embed
*/
dojox.flash.Embed.prototype.protocol=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the Flash object DOM node.<br>
 * </blockquote>
 * @memberOf dojox.flash.Embed
*/
dojox.flash.Embed.prototype.get=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Centers the flash applet on the page.<br>
 * </blockquote>
 * @memberOf dojox.flash.Embed
*/
dojox.flash.Embed.prototype.center=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Centers the flash applet on the page.<br>
 * </blockquote>
 * @class
 * @returns {dojox.flash.Embed.center} new instance
*/
dojox.flash.Embed.center=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class that is used to communicate between Flash and JavaScript.<br>
 * </blockquote>
 * This class helps mediate Flash and JavaScript communication. Internally<br>
 * it uses Flash 8's ExternalInterface API, but adds functionality to fix<br>
 * various encoding bugs that ExternalInterface has.
 * @class
 * @returns {dojox.flash.Communicator} new instance
*/
dojox.flash.Communicator=function(){};
/**
 * @param {mixed} methodName 
 * @param {mixed} methodArgs 
 * @private
 * @memberOf dojox.flash.Communicator
*/
dojox.flash.Communicator.prototype._execFlash=function(methodName, methodArgs){};
/**
 * @param {mixed} data 
 * @private
 * @memberOf dojox.flash.Communicator
*/
dojox.flash.Communicator.prototype._encodeData=function(data){};
/**
 * @param {mixed} data 
 * @private
 * @memberOf dojox.flash.Communicator
*/
dojox.flash.Communicator.prototype._decodeData=function(data){};
/**
 * @param {mixed} methodName 
 * @private
 * @memberOf dojox.flash.Communicator
*/
dojox.flash.Communicator.prototype._addExternalInterfaceCallback=function(methodName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helps install Flash plugin if needed.<br>
 * </blockquote>
 * Figures out the best way to automatically install the Flash plugin<br>
 * for this browser and platform. Also determines if installation or<br>
 * revving of the current plugin is needed on this platform.
 * @class
 * @returns {dojox.flash.Install} new instance
*/
dojox.flash.Install=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines if installation or revving of the current plugin is<br>
 *	 needed.<br>
 * </blockquote>
 * @memberOf dojox.flash.Install
*/
dojox.flash.Install.prototype.needed=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Performs installation or revving of the Flash plugin.<br>
 * </blockquote>
 * @memberOf dojox.flash.Install
*/
dojox.flash.Install.prototype.install=function(){};
/**
 * @param {mixed} msg 
 * @private
 * @memberOf dojox.flash.Install
*/
dojox.flash.Install.prototype._onInstallStatus=function(msg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle Uploader plugins. When the dojox.form.addUploaderPlugin() function is called,<br>
 *	 the dojox.form.Uploader is recreated using the new plugin (mixin).<br>
 * </blockquote>
 * @param {mixed} plug 
*/
dojox.form.addUploaderPlugin=function(plug){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class representing our verify textbox<br>
 * </blockquote>
*/
dojox.form._VerifyPWBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mix this class in to a dijit.form._FormSelectWidget in order to<br>
 *	 provide support for &amp;quot;selectable&amp;quot; multiforms.  The widget is pointed<br>
 *	 to a dijit.layout.StackContainer and will handle displaying and<br>
 *	 submitting the values of only the appropriate pane.<br>
 *	 <br>
 *	 The options for this widget will be automatically set - based on<br>
 *	 the panes that are in the stack container.  The &amp;quot;title&amp;quot; attribute of<br>
 *	 the pane will be used for the display of the option.  The &amp;quot;id&amp;quot; attribute<br>
 *	 of the pane will be used as the value of the option.  In order to<br>
 *	 avoid running into unique ID constraint issues, a stackPrefix mechanism<br>
 *	 is provided.<br>
 * </blockquote>
 * @private
*/
dojox.form._SelectStackMixin=function(){};
/**
*/
dojox.form._RangeSliderMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class representing our &amp;quot;old password&amp;quot; box.<br>
 * </blockquote>
*/
dojox.form._OldPWBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class representing our new password textbox<br>
 * </blockquote>
*/
dojox.form._NewPWBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Item created by ListInputInput when delimiter is found<br>
 * </blockquote>
 * Simple &lt;li&gt; with close button added to ListInputInput when delimiter is found<br>
*/
dojox.form._ListInputInputItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 auto-sized text box<br>
 * </blockquote>
 * Auto sized textbox based on dijit.form.TextBox<br>
*/
dojox.form._ListInputInputBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class that is shared between all our children - extends<br>
 *	 ValidationTextBox and provides some shared functionality<br>
 * </blockquote>
*/
dojox.form._ChildTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A checkbox-like menu item for toggling on and off<br>
 * </blockquote>
*/
dojox.form._CheckedMultiSelectMenuItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An internally-used menu for dropdown that allows us a vertical scrollbar<br>
 * </blockquote>
*/
dojox.form._CheckedMultiSelectMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The individual items for a CheckedMultiSelect<br>
 * </blockquote>
*/
dojox.form._CheckedMultiSelectItem=function(){};
/**
*/
dojox.form._BusyButtonMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound date text box with a popup calendar that contains only years<br>
 * </blockquote>
*/
dojox.form.YearTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A form widget that allows one to select a range with two vertically draggable images<br>
 * </blockquote>
*/
dojox.form.VerticalRangeSlider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget that creates a stylable file-input button, with optional multi-file selection,<br>
 *	 using only HTML elements. Non-HTML5 browsers have fallback options of Flash or an iframe.<br>
 * </blockquote>
 * A bare-bones, stylable file-input button, with optional multi-file selection. The list<br>
 * of files is not displayed, that is for you to handle by connecting to the onChange<br>
 * event, or use the dojox.form.uploader.FileList.<br>
 * <br>
 * Uploader without plugins does not have any ability to upload - it is for use in forms<br>
 * where you handle the upload either by a standard POST or with Ajax using an iFrame. This<br>
 * class is for convenience of multiple files only. No progress events are available.<br>
 * <br>
 * If the browser supports a file-input with the "multiple" attribute, that will be used.<br>
 * If the browser does not support "multiple" (ergo, IE) multiple inputs are used,<br>
 * one for each selection.<br>
*/
dojox.form.Uploader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checkbox with three states<br>
 * </blockquote>
*/
dojox.form.TriStateCheckBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Time Spinner<br>
 * </blockquote>
 * This widget is the same as a normal NumberSpinner, but for the time component of a date object instead<br>
*/
dojox.form.TimeSpinner=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget for rating using stars.<br>
 *	 <br>
 *	 required: Boolean<br>
 *	 TODO: Can be true or false, default is false.<br>
 *	 required: false,<br>
 * </blockquote>
 * @param {Object} params 
*/
dojox.form.Rating=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 A radio-based select stack.<br>
 * </blockquote>
*/
dojox.form.RadioStack=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A password validation widget that simplifies the &amp;quot;old/new/verify&amp;quot;<br>
 *	 style of requesting passwords.  You will probably want to override<br>
 *	 this class and implement your own pwCheck function.<br>
 * </blockquote>
*/
dojox.form.PasswordValidator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A ComboBox that accepts multiple inputs on a single line<br>
 * </blockquote>
*/
dojox.form.MultiComboBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound date text box with a popup calendar that contains only years<br>
 * </blockquote>
*/
dojox.form.MonthTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The widget to orchestrate dynamic forms.<br>
 * </blockquote>
 * This widget hosts dojox.form.manager mixins.<br>
 * See _Mixin for more info.<br>
*/
dojox.form.Manager=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An automatic list maker<br>
 * </blockquote>
 * you can add value to list with add method.<br>
 * you can only remove by clicking close button<br>
*/
dojox.form.ListInput=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A form widget that allows one to select a range with two horizontally draggable images<br>
 * </blockquote>
*/
dojox.form.HorizontalRangeSlider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles File Uploading to a server (PHP script included for testing)<br>
 *	 <br>
 *	 FileUploader is now a WIDGET. You do not have to pass a button<br>
 *	 in. Passing a button is still supported until version 1.5 to maintain<br>
 *	 backwards compatibility, but it is not reccomended. Just create your<br>
 *	 uploader like any other widget.<br>
 * </blockquote>
 * If the correct version of Flash Player is available (&gt; 9.0) , a SWF<br>
 * is used. If Flash Player is not installed or is outdated, a typical<br>
 * html fileInput is used. This process can be overridden with
 * @example
 * fileMask = ["Images", "*.jpg;*.jpeg;*.gif;*.png"]
 * or
 * fileMask = [
 * ["Jpeg File", 	"*.jpg;*.jpeg"],
 * ["GIF File", 	"*.gif"],
 * ["PNG File", 	"*.png"],
 * ["All Images", 	"*.jpg;*.jpeg;*.gif;*.png"],
 * ]
 * NOTE: MacType is not supported, as it does not work very well.
 * fileMask will work on a Mac, but differently than
 * Windows.
*/
dojox.form.FileUploader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating text box tied to a file picker popup<br>
 * </blockquote>
*/
dojox.form.FilePickerTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An extended version of dojox.form.FileInputAuto<br>
 *	 that does not display an input node, but rather only a button<br>
 *	 and otherwise behaves just like FileInputAuto<br>
 * </blockquote>
*/
dojox.form.FileInputBlind=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An extension on FileInput providing background upload progress<br>
 * </blockquote>
 * An extended version of FileInput - when the user focuses away from the input<br>
 * the selected file is posted via ioIframe to the url. example implementation<br>
 * comes with PHP solution for handling upload, and returning required data.<br>
 * <br>
 * notes: the return data from the io.iframe is used to populate the input element with<br>
 * data regarding the results. it will be a JSON object, like:<br>
 * <br>
 * results = { size: "1024", filename: "file.txt" }<br>
 * <br>
 * all the parameters allowed to FileInput apply<br>
*/
dojox.form.FileInputAuto=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A styled input type=&amp;quot;file&amp;quot;<br>
 * </blockquote>
 * A input type="file" form widget, with a button for uploading to be styled via css,<br>
 * a cancel button to clear selection, and FormWidget mixin to provide standard dijit.form.Form<br>
 * support (FIXME: maybe not fully implemented)<br>
*/
dojox.form.FileInput=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A dropdown-based select stack.<br>
 * </blockquote>
*/
dojox.form.DropDownStack=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound date text box with a popup calendar that contains just months.<br>
 * </blockquote>
*/
dojox.form.DayTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound date text box with a popup calendar<br>
 * </blockquote>
*/
dojox.form.DateTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extends the core dijit MultiSelect to provide a &amp;quot;checkbox&amp;quot; selector<br>
 * </blockquote>
*/
dojox.form.CheckedMultiSelect=function(){};
/**
*/
dojox.form.BusyDropDownButton=function(){};
/**
*/
dojox.form.BusyComboButton=function(){};
/**
*/
dojox.form.BusyButton=function(){};
/**
 * @namespace
*/
dojox.form.uploader={};
/**
 * @namespace
*/
dojox.form.manager={};
/**
 * @class
 * @returns {dojox.form._BusyButtonMixin} new instance
*/
dojox.form._BusyButtonMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 reset the label (text) of the button; takes an HTML string<br>
 * </blockquote>
 * @param {String} content 
 * @param {Int} timeout 
 * @memberOf dojox.form._BusyButtonMixin
*/
dojox.form._BusyButtonMixin.prototype.setLabel=function(content, timeout){};
/**
 * <b>Summary:</b><blockquote>
 *	 to reset existing timeout and setting a new timeout<br>
 * </blockquote>
 * @param {Int} timeout 
 * @memberOf dojox.form._BusyButtonMixin
*/
dojox.form._BusyButtonMixin.prototype.resetTimeout=function(timeout){};
/**
 * @memberOf dojox.form._BusyButtonMixin
*/
dojox.form._BusyButtonMixin.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 stores initial label and timeout for reference<br>
 * </blockquote>
 * @memberOf dojox.form._BusyButtonMixin
*/
dojox.form._BusyButtonMixin.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets state from idle to busy<br>
 * </blockquote>
 * @memberOf dojox.form._BusyButtonMixin
*/
dojox.form._BusyButtonMixin.prototype.makeBusy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 if no timeout is set or for other reason the user can put the button back<br>
 *	 to being idle<br>
 * </blockquote>
 * @memberOf dojox.form._BusyButtonMixin
*/
dojox.form._BusyButtonMixin.prototype.cancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 on button click the button state gets changed<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.form._BusyButtonMixin
*/
dojox.form._BusyButtonMixin.prototype._onClick=function(e){};
/**
 * @class
 * @extends dijit.form.Button
 * @returns {dojox.form.BusyButton} new instance
*/
dojox.form.BusyButton=function(){};
/**
 * @class
 * @extends dijit.form.ComboButton
 * @returns {dojox.form.BusyComboButton} new instance
*/
dojox.form.BusyComboButton=function(){};
/**
 * @class
 * @extends dijit.form.DropDownButton
 * @returns {dojox.form.BusyDropDownButton} new instance
*/
dojox.form.BusyDropDownButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The individual items for a CheckedMultiSelect<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.form._CheckedMultiSelectItem} new instance
*/
dojox.form._CheckedMultiSelectItem=function(){};
/**
 * @memberOf dojox.form._CheckedMultiSelectItem
*/
dojox.form._CheckedMultiSelectItem.option=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Set the appropriate _subClass value - based on if we are multi-<br>
 *	 or single-select<br>
 * </blockquote>
 * @memberOf dojox.form._CheckedMultiSelectItem
*/
dojox.form._CheckedMultiSelectItem.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set innerHTML here - since the template gets messed up sometimes<br>
 *	 with rich text<br>
 * </blockquote>
 * @memberOf dojox.form._CheckedMultiSelectItem
*/
dojox.form._CheckedMultiSelectItem.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called to force the box to match the state of the select<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form._CheckedMultiSelectItem
*/
dojox.form._CheckedMultiSelectItem.prototype._updateBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets read only (or unsets) all the children as well<br>
 * </blockquote>
 * @param {mixed} value 
 * @private
 * @memberOf dojox.form._CheckedMultiSelectItem
*/
dojox.form._CheckedMultiSelectItem.prototype._setReadOnlyAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disables (or enables) all the children as well<br>
 * </blockquote>
 * @param {mixed} value 
 * @private
 * @memberOf dojox.form._CheckedMultiSelectItem
*/
dojox.form._CheckedMultiSelectItem.prototype._setDisabledAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the click state (passes through to the check box)<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.form._CheckedMultiSelectItem
*/
dojox.form._CheckedMultiSelectItem.prototype._onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called to force the select to match the state of the check box<br>
 *	 (only on click of the checkbox)	 Radio-based calls _setValueAttr<br>
 *	 instead.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form._CheckedMultiSelectItem
*/
dojox.form._CheckedMultiSelectItem.prototype._changeBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An internally-used menu for dropdown that allows us a vertical scrollbar<br>
 * </blockquote>
 * @class
 * @extends dijit.Menu
 * @returns {dojox.form._CheckedMultiSelectMenu} new instance
*/
dojox.form._CheckedMultiSelectMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridden so that we are able to handle resizing our<br>
 *	 internal widget.  Note that this is not a &amp;quot;full&amp;quot; resize<br>
 *	 implementation - it only works correctly if you pass it a<br>
 *	 marginBox.<br>
 * </blockquote>
 * @param {Object} mb The margin box to set this dropdown to.
 * @memberOf dojox.form._CheckedMultiSelectMenu
*/
dojox.form._CheckedMultiSelectMenu.prototype.resize=function(mb){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle clicks on an item.<br>
 * </blockquote>
 * @param {dijit._Widget} item 
 * @param {Event} evt 
 * @private
 * @memberOf dojox.form._CheckedMultiSelectMenu
*/
dojox.form._CheckedMultiSelectMenu.prototype.onItemClick=function(item, evt){};
/**
 * @memberOf dojox.form._CheckedMultiSelectMenu
*/
dojox.form._CheckedMultiSelectMenu.prototype.onClose=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub in our own changes, so that our domNode is not a table<br>
 *	 otherwise, we won't respond correctly to heights/overflows<br>
 * </blockquote>
 * @memberOf dojox.form._CheckedMultiSelectMenu
*/
dojox.form._CheckedMultiSelectMenu.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A checkbox-like menu item for toggling on and off<br>
 * </blockquote>
 * @class
 * @extends dijit.MenuItem
 * @returns {dojox.form._CheckedMultiSelectMenuItem} new instance
*/
dojox.form._CheckedMultiSelectMenuItem=function(){};
/**
 * @memberOf dojox.form._CheckedMultiSelectMenuItem
*/
dojox.form._CheckedMultiSelectMenuItem.option=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Set the appropriate _subClass value - based on if we are multi-<br>
 *	 or single-select<br>
 * </blockquote>
 * @memberOf dojox.form._CheckedMultiSelectMenuItem
*/
dojox.form._CheckedMultiSelectMenuItem.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 User defined function to handle check/uncheck events<br>
 * </blockquote>
 * @param {Boolean} checked 
 * @memberOf dojox.form._CheckedMultiSelectMenuItem
*/
dojox.form._CheckedMultiSelectMenuItem.prototype.onChange=function(checked){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called to force the box to match the state of the select<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form._CheckedMultiSelectMenuItem
*/
dojox.form._CheckedMultiSelectMenuItem.prototype._updateBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clicking this item just toggles its state<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.form._CheckedMultiSelectMenuItem
*/
dojox.form._CheckedMultiSelectMenuItem.prototype._onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extends the core dijit MultiSelect to provide a &amp;quot;checkbox&amp;quot; selector<br>
 * </blockquote>
 * @class
 * @extends dijit.form._FormSelectWidget
 * @returns {dojox.form.CheckedMultiSelect} new instance
*/
dojox.form.CheckedMultiSelect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function used to validate that an item is selected if required =<br>
 *	 true.<br>
 * </blockquote>
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.validator=function(){};
/**
 * @param {mixed} isFocused 
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.validate=function(isFocused){};
/**
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.uninitialize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the value to be the first, or the selected index<br>
 * </blockquote>
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If there is any items selected in the store, the value<br>
 *	 of the widget will be set to the values of these items.<br>
 * </blockquote>
 * @param {mixed} store 
 * @param {mixed} selectedValue 
 * @param {mixed} fetchArgs 
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.setStore=function(store, selectedValue, fetchArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridden so that the state will be cleared.<br>
 * </blockquote>
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.reset=function(){};
/**
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validate if selection changes.<br>
 * </blockquote>
 * @param {mixed} newValue 
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.onChange=function(newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 a function that can be connected to in order to receive a<br>
 *	 notification that an item as been added to this dijit.<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} option 
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.onAfterAddOptionItem=function(item, option){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tests if the required items are selected.<br>
 *	 Can override with your own routine in a subclass.<br>
 * </blockquote>
 * @param {Boolean} isFocused 
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.isValid=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 Invert the selection<br>
 * </blockquote>
 * @param {Boolean} onChange If null, onChange is not fired.
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.invertSelection=function(onChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an error message to show if appropriate<br>
 * </blockquote>
 * @param {Boolean} isFocused 
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.getErrorMessage=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable method to display validation errors/hints.<br>
 *	 By default uses a tooltip.<br>
 * </blockquote>
 * @param {String} message 
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype.displayMessage=function(message){};
/**
 * @private
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype._updateSelection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets read only (or unsets) all the children as well<br>
 * </blockquote>
 * @param {mixed} value 
 * @private
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype._setReadOnlyAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disable (or enable) all the children as well<br>
 * </blockquote>
 * @param {mixed} value 
 * @private
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype._setDisabledAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validate if selection changes.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype._refreshState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancels the mousedown event to prevent others from stealing<br>
 *	 focus<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype._onMouseDown=function(e){};
/**
 * @private
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype._getChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the value to be the first, or the selected index<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype._fillContent=function(){};
/**
 * @param {dojox.form.__SelectOption} option 
 * @private
 * @memberOf dojox.form.CheckedMultiSelect
*/
dojox.form.CheckedMultiSelect.prototype._addOptionItem=function(option){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound date text box with a popup calendar<br>
 * </blockquote>
 * @class
 * @extends dijit.form._DateTimeTextBox
 * @returns {dojox.form.DateTextBox} new instance
*/
dojox.form.DateTextBox=function(){};
/**
 * @memberOf dojox.form.DateTextBox
*/
dojox.form.DateTextBox.prototype.openDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound date text box with a popup calendar that contains just months.<br>
 * </blockquote>
 * @class
 * @returns {dojox.form.DayTextBox} new instance
*/
dojox.form.DayTextBox=function(){};
/**
 * @param {mixed} value 
 * @memberOf dojox.form.DayTextBox
*/
dojox.form.DayTextBox.prototype.validator=function(value){};
/**
 * @param {mixed} displayVal 
 * @memberOf dojox.form.DayTextBox
*/
dojox.form.DayTextBox.prototype.parse=function(displayVal){};
/**
 * @memberOf dojox.form.DayTextBox
*/
dojox.form.DayTextBox.prototype.openDropDown=function(){};
/**
 * @param {mixed} value 
 * @memberOf dojox.form.DayTextBox
*/
dojox.form.DayTextBox.prototype.format=function(value){};
/**
 * @param {mixed} value 
 * @param {mixed} priorityChange 
 * @param {mixed} formattedValue 
 * @private
 * @memberOf dojox.form.DayTextBox
*/
dojox.form.DayTextBox.prototype._setValueAttr=function(value, priorityChange, formattedValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound date text box with a popup calendar that contains only years<br>
 * </blockquote>
 * @class
 * @returns {dojox.form.MonthTextBox} new instance
*/
dojox.form.MonthTextBox=function(){};
/**
 * @param {mixed} value 
 * @memberOf dojox.form.MonthTextBox
*/
dojox.form.MonthTextBox.prototype.validator=function(value){};
/**
 * @param {mixed} value 
 * @param {mixed} constraints 
 * @memberOf dojox.form.MonthTextBox
*/
dojox.form.MonthTextBox.prototype.serialize=function(value, constraints){};
/**
 * @memberOf dojox.form.MonthTextBox
*/
dojox.form.MonthTextBox.prototype.postMixInProperties=function(){};
/**
 * @param {mixed} value 
 * @param {mixed} constraints 
 * @memberOf dojox.form.MonthTextBox
*/
dojox.form.MonthTextBox.prototype.parse=function(value, constraints){};
/**
 * @memberOf dojox.form.MonthTextBox
*/
dojox.form.MonthTextBox.prototype.openDropDown=function(){};
/**
 * @param {mixed} value 
 * @memberOf dojox.form.MonthTextBox
*/
dojox.form.MonthTextBox.prototype.format=function(value){};
/**
 * @param {mixed} value 
 * @param {mixed} priorityChange 
 * @param {mixed} formattedValue 
 * @private
 * @memberOf dojox.form.MonthTextBox
*/
dojox.form.MonthTextBox.prototype._setValueAttr=function(value, priorityChange, formattedValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating, serializable, range-bound date text box with a popup calendar that contains only years<br>
 * </blockquote>
 * @class
 * @returns {dojox.form.YearTextBox} new instance
*/
dojox.form.YearTextBox=function(){};
/**
 * @param {mixed} value 
 * @memberOf dojox.form.YearTextBox
*/
dojox.form.YearTextBox.prototype.validator=function(value){};
/**
 * @param {String} value 
 * @param {dojo.date.locale.__FormatOptions} constraints 
 * @returns {Date} -
 * @memberOf dojox.form.YearTextBox
*/
dojox.form.YearTextBox.prototype.parse=function(value, constraints){};
/**
 * @memberOf dojox.form.YearTextBox
*/
dojox.form.YearTextBox.prototype.openDropDown=function(){};
/**
 * @param {mixed} value 
 * @memberOf dojox.form.YearTextBox
*/
dojox.form.YearTextBox.prototype.format=function(value){};
/**
 * @param {mixed} val 
 * @memberOf dojox.form.YearTextBox
*/
dojox.form.YearTextBox.prototype.filter=function(val){};
/**
 * @param {mixed} value 
 * @param {mixed} priorityChange 
 * @param {mixed} formattedValue 
 * @private
 * @memberOf dojox.form.YearTextBox
*/
dojox.form.YearTextBox.prototype._setValueAttr=function(value, priorityChange, formattedValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 A dropdown-based select stack.<br>
 * </blockquote>
 * @class
 * @extends dijit.form.Select
 * @extends dojox.form._SelectStackMixin
 * @returns {dojox.form.DropDownStack} new instance
*/
dojox.form.DropDownStack=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mix this class in to a dijit.form._FormSelectWidget in order to<br>
 *	 provide support for &amp;quot;selectable&amp;quot; multiforms.  The widget is pointed<br>
 *	 to a dijit.layout.StackContainer and will handle displaying and<br>
 *	 submitting the values of only the appropriate pane.<br>
 *	 <br>
 *	 The options for this widget will be automatically set - based on<br>
 *	 the panes that are in the stack container.  The &amp;quot;title&amp;quot; attribute of<br>
 *	 the pane will be used for the display of the option.  The &amp;quot;id&amp;quot; attribute<br>
 *	 of the pane will be used as the value of the option.  In order to<br>
 *	 avoid running into unique ID constraint issues, a stackPrefix mechanism<br>
 *	 is provided.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.form._SelectStackMixin} new instance
*/
dojox.form._SelectStackMixin=function(){};
/**
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the stack container is started up<br>
 * </blockquote>
 * @param {Object} info 
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype.onStartup=function(info){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the stack container selects a new pane<br>
 * </blockquote>
 * @param {dijit._Widget} pane 
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype.onSelectChild=function(pane){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the stack container removes a pane<br>
 * </blockquote>
 * @param {dijit._Widget} pane 
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype.onRemoveChild=function(pane){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the stack container adds a new pane<br>
 * </blockquote>
 * @param {dijit._Widget} pane 
 * @param {Integer} [insertIndex] 
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype.onAddChild=function(pane, insertIndex){};
/**
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype.destroy=function(){};
/**
 * @param {String|Object} name 
 * @param {Object} [value] 
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype.attr=function(name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when a pane is either shown or hidden (so that<br>
 *	 we can toggle the widgets on it)<br>
 * </blockquote>
 * @param {dijit._Widget} pane 
 * @param {Boolean} shown 
 * @private
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype._togglePane=function(pane, shown){};
/**
 * @param {mixed} v 
 * @private
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype._setValueAttr=function(v){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the pane ID given an option value<br>
 * </blockquote>
 * @param {String} oVal 
 * @private
 * @returns {String} -
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype._paneIdFromOption=function(oVal){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the option value given a pane ID<br>
 * </blockquote>
 * @param {String} id 
 * @private
 * @returns {String} -
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype._optionValFromPane=function(id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when form select widget's value has changed<br>
 * </blockquote>
 * @param {String} val 
 * @private
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype._handleSelfOnChange=function(val){};
/**
 * @param {dijit._Widget} pane 
 * @param {String} value 
 * @private
 * @memberOf dojox.form._SelectStackMixin
*/
dojox.form._SelectStackMixin.prototype._connectTitle=function(pane, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 An extension on FileInput providing background upload progress<br>
 * </blockquote>
 * An extended version of FileInput - when the user focuses away from the input<br>
 * the selected file is posted via ioIframe to the url. example implementation<br>
 * comes with PHP solution for handling upload, and returning required data.<br>
 * <br>
 * notes: the return data from the io.iframe is used to populate the input element with<br>
 * data regarding the results. it will be a JSON object, like:<br>
 * <br>
 * results = { size: "1024", filename: "file.txt" }<br>
 * <br>
 * all the parameters allowed to FileInput apply
 * @class
 * @extends dojox.form.FileInput
 * @returns {dojox.form.FileInputAuto} new instance
*/
dojox.form.FileInputAuto=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 add our extra blur listeners<br>
 * </blockquote>
 * @memberOf dojox.form.FileInputAuto
*/
dojox.form.FileInputAuto.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the text of the progressbar<br>
 * </blockquote>
 * @param {String} title 
 * @memberOf dojox.form.FileInputAuto
*/
dojox.form.FileInputAuto.prototype.setMessage=function(title){};
/**
 * <b>Summary:</b><blockquote>
 *	 accomodate our extra focusListeners<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.form.FileInputAuto
*/
dojox.form.FileInputAuto.prototype.reset=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub function fired when an upload has finished.<br>
 * </blockquote>
 * @param {the} data raw data found in the first [TEXTAREA] tag of the post url
 * @param {the} ioArgs Deferred data being passed from the handle: callback
 * @param {this} widgetRef widget pointer, so you can set this.overlay to a completed/error message easily
 * @memberOf dojox.form.FileInputAuto
*/
dojox.form.FileInputAuto.prototype.onComplete=function(data, ioArgs, widgetRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called immediately before a FileInput sends it's file via io.iframe.send.<br>
 *	 The return of this function is passed as the `content` member in the io.iframe IOArgs<br>
 *	 object.<br>
 * </blockquote>
 * @memberOf dojox.form.FileInputAuto
*/
dojox.form.FileInputAuto.prototype.onBeforeSend=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 triggers the chain of events needed to upload a file in the background.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.form.FileInputAuto
*/
dojox.form.FileInputAuto.prototype._sendFile=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 clear the upload timer<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileInputAuto
*/
dojox.form.FileInputAuto.prototype._onFocus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 start the upload timer<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileInputAuto
*/
dojox.form.FileInputAuto.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The callback to toggle the progressbar, and fire the user-defined callback<br>
 * </blockquote>
 * @param {mixed} data 
 * @param {mixed} ioArgs 
 * @private
 * @memberOf dojox.form.FileInputAuto
*/
dojox.form.FileInputAuto.prototype._handleSend=function(data, ioArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 An extended version of dojox.form.FileInputAuto<br>
 *	 that does not display an input node, but rather only a button<br>
 *	 and otherwise behaves just like FileInputAuto<br>
 * </blockquote>
 * @class
 * @returns {dojox.form.FileInputBlind} new instance
*/
dojox.form.FileInputBlind=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 hide our fileInput input field<br>
 * </blockquote>
 * @memberOf dojox.form.FileInputBlind
*/
dojox.form.FileInputBlind.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 onclick, we need to reposition our newly created input type=&amp;quot;file&amp;quot;<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.form.FileInputBlind
*/
dojox.form.FileInputBlind.prototype.reset=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 in this case, set the button under where the visible button is<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileInputBlind
*/
dojox.form.FileInputBlind.prototype._fixPosition=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A styled input type=&amp;quot;file&amp;quot;<br>
 * </blockquote>
 * A input type="file" form widget, with a button for uploading to be styled via css,<br>
 * a cancel button to clear selection, and FormWidget mixin to provide standard dijit.form.Form<br>
 * support (FIXME: maybe not fully implemented)
 * @class
 * @extends dijit.form._FormWidget
 * @returns {dojox.form.FileInput} new instance
*/
dojox.form.FileInput=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 listen for changes on our real file input<br>
 * </blockquote>
 * @memberOf dojox.form.FileInput
*/
dojox.form.FileInput.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 method to allow use to change button label<br>
 * </blockquote>
 * @param {String} label 
 * @param {String} [cssClass] 
 * @memberOf dojox.form.FileInput
*/
dojox.form.FileInput.prototype.setLabel=function(label, cssClass){};
/**
 * <b>Summary:</b><blockquote>
 *	 on click of cancel button, since we can't clear the input because of<br>
 *	 security reasons, we destroy it, and add a new one in it's place.<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.form.FileInput
*/
dojox.form.FileInput.prototype.reset=function(e){};
/**
 * @memberOf dojox.form.FileInput
*/
dojox.form.FileInput.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the content of the upper input based on the semi-hidden file input<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileInput
*/
dojox.form.FileInput.prototype._matchValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A validating text box tied to a file picker popup<br>
 * </blockquote>
 * @class
 * @extends dijit.form.ValidationTextBox
 * @extends dijit._HasDropDown
 * @returns {dojox.form.FilePickerTextBox} new instance
*/
dojox.form.FilePickerTextBox=function(){};
/**
 * @namespace
*/
dojox.form.FilePickerTextBox.dropDown={};
/**
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype.toggleDropDown=function(){};
/**
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype.startup=function(){};
/**
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to convert a formatted string to a value - we use<br>
 *	 it to verify that it *really* is a valid value<br>
 * </blockquote>
 * @param {String} value 
 * @param {Object} constraints 
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype.parse=function(value, constraints){};
/**
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype.openDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 kicks off a search based off the current text value of the widget<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype._startSearchFromInput=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the value of this widget<br>
 * </blockquote>
 * @param {string} value 
 * @param {mixed} priorityChange 
 * @param {mixed} fromWidget 
 * @private
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype._setValueAttr=function(value, priorityChange, fromWidget){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the value of the widget once focus has left<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype._setBlurValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when the path gets changed in the dropdown<br>
 * </blockquote>
 * @param {item} item 
 * @private
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype._onWidgetChange=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback when the user presses a key on menu popup node<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype._onKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when focus is shifted away from this widget<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when the focus node gets focus<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype._focusFocus=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when the focus node gets blurred<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.form.FilePickerTextBox
*/
dojox.form.FilePickerTextBox.prototype._focusBlur=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles File Uploading to a server (PHP script included for testing)<br>
 *	 <br>
 *	 FileUploader is now a WIDGET. You do not have to pass a button<br>
 *	 in. Passing a button is still supported until version 1.5 to maintain<br>
 *	 backwards compatibility, but it is not reccomended. Just create your<br>
 *	 uploader like any other widget.<br>
 * </blockquote>
 * If the correct version of Flash Player is available (&gt; 9.0) , a SWF<br>
 * is used. If Flash Player is not installed or is outdated, a typical<br>
 * html fileInput is used. This process can be overridden with
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._Contained
 * @returns {dojox.form.FileUploader} new instance
 * @example
 * fileMask = ["Images", "*.jpg;*.jpeg;*.gif;*.png"]
 * or
 * fileMask = [
 * ["Jpeg File", 	"*.jpg;*.jpeg"],
 * ["GIF File", 	"*.gif"],
 * ["PNG File", 	"*.png"],
 * ["All Images", 	"*.jpg;*.jpeg;*.gif;*.png"],
 * ]
 * NOTE: MacType is not supported, as it does not work very well.
 * fileMask will work on a Mac, but differently than
 * Windows.
*/
dojox.form.FileUploader=function(){};
/**
 * @namespace
*/
dojox.form.FileUploader.norm={};
/**
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.insideNode=null;
/**
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.flashObject=null;
/**
 * @namespace
*/
dojox.form.FileUploader.fhtml={};
/**
 * @namespace
 * @private
*/
dojox.form.FileUploader._formNode={};
/**
 * @namespace
 * @private
*/
dojox.form.FileUploader._fileInput={};
/**
 * @param {mixed} url 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.urlencode=function(url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. You could use this, but you should use upload() or submit();<br>
 *	 which can also handle the post data.<br>
 *	 <br>
 *	 NOTE on deferredUploading:<br>
 *	 This is not enabled for HTML. Workaround would be to force<br>
 *	 singleFile uploads.<br>
 *	 TODO:<br>
 *	 Investigate removing fileInputs and resending form<br>
 *	 multiple times adding each fileInput<br>
 * </blockquote>
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.uploadHTML=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. You should use upload() or submit();<br>
 * </blockquote>
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.uploadFlash=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 When called, begins file upload<br>
 * </blockquote>
 * @param {Object} data postData to be sent to server
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.upload=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 If FileUploader is in a form, and other data should be sent<br>
 *	 along with the files, use this instead of form submit.<br>
 * </blockquote>
 * @param {form} form node ?
 * @returns {Boolean} -
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.submit=function(form){};
/**
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal.<br>
 *	 Set up internal dom nodes for button construction.<br>
 * </blockquote>
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.setButtonStyle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes a file from the pending file list.<br>
 *	 Removes pending data from the Flash movie<br>
 *	 and fileInputes from the HTML uploader.<br>
 *	 If a file container node is bound, the file<br>
 *	 will also be removed.<br>
 * </blockquote>
 * @param {String} name The name of the file to be removed. Typically the file name,
 * such as: picture01.png
 * @param {Boolean} noListEdit Internal. If true don't remove files from list.
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.removeFile=function(name, noListEdit){};
/**
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub - Fired when embedFlash has created the<br>
 *	 Flash object, but it has not necessarilly finished<br>
 *	 downloading, and is ready to be communicated with.<br>
 * </blockquote>
 * @param {dojox.form.FileUploader} uploader 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.onReady=function(uploader){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub to connect<br>
 *	 Fires as progress returns from SWF<br>
 *	 Event is an array of all files uploading<br>
 *	 Can be connected to for HTML uploader,<br>
 *	 but will not return anything.<br>
 * </blockquote>
 * @param {mixed} dataArray 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.onProgress=function(dataArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub - SWF has been downloaded 100%.<br>
 * </blockquote>
 * @param {dojox.form.FileUploader} uploader 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.onLoad=function(uploader){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires on errors<br>
 *	 <br>
 *	 FIXME: Unsure of a standard form for receiving errors<br>
 * </blockquote>
 * @param {Object} evtObject or String
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.onError=function(evtObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub to connect<br>
 *	 Fires when all files have uploaded<br>
 *	 Event is an array of all files<br>
 * </blockquote>
 * @param {mixed} dataArray 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.onComplete=function(dataArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub to connect<br>
 *	 Fires when files are selected<br>
 *	 Event is an array of last files selected<br>
 * </blockquote>
 * @param {mixed} dataArray 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.onChange=function(dataArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub to connect<br>
 *	 Fires when dialog box has been closed<br>
 *	 without a file selection<br>
 * </blockquote>
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.onCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Due to the excessive logging necessary to make this code happen,<br>
 *	 It's easier to turn it on and off here in one place.<br>
 *	 Also helpful if there are multiple uploaders on one page.<br>
 * </blockquote>
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.log=function(){};
/**
 * @param {mixed} node 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.isButton=function(node){};
/**
 * @param {mixed} node 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.getTextStyle=function(node){};
/**
 * @param {mixed} node 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.getText=function(node){};
/**
 * @param {mixed} node 
 * @param {mixed} _class 
 * @param {mixed} isDijitButton 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.getTempNodeStyle=function(node, _class, isDijitButton){};
/**
 * @param {mixed} node 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.getStyle=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal.<br>
 *	 If a parent node is styled as display:none,<br>
 *	 returns that node. This node will be temporarilly<br>
 *	 changed to display:block. Note if the node is in<br>
 *	 a widget that has an onShow event, this is<br>
 *	 overridden.<br>
 * </blockquote>
 * @param {DomNode} node 
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.getHiddenNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal.<br>
 *	 Get necessary style information from srcRefNode and<br>
 *	 assigned styles<br>
 * </blockquote>
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.getButtonStyle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The SWF. Mostly Internal.<br>
 * </blockquote>
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.flashMovie=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroys uploader button<br>
 * </blockquote>
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Fires of methods to build HTML Uploader.<br>
 * </blockquote>
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.createHtmlUploader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Creates Flash Uploader<br>
 * </blockquote>
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype.createFlashUploader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal.Apply style to node<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._styleContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal.Apply postData to hidden fields in form<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._setHtmlPostData=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Apply a dynamic style to the form and input<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._setFormStyle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. To set disabled use: widget.set(&amp;quot;disabled&amp;quot;, true | false);<br>
 * </blockquote>
 * @param {mixed} disabled 
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._setDisabledAttr=function(disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. After upload, this is called to clear the form and build a new<br>
 *	 fileInput.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._resetHTML=function(){};
/**
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._renumberInputs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Calculate progress<br>
 * </blockquote>
 * @param {mixed} dataObject 
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._progress=function(dataObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Detects when Flash movies reliquishes focus.<br>
 *	 We have to find all the tabIndexes in the doc and figure<br>
 *	 out whom to give focus to next.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._onFlashBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. To get disabled use: widget.get(&amp;quot;disabled&amp;quot;);<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._getDisabledAttr=function(){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._error=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Shortcut for subscribes to Flash movie<br>
 * </blockquote>
 * @param {mixed} subStr 
 * @param {mixed} funcStr 
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._doSub=function(subStr, funcStr){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shows and updates the built-in progress bar.<br>
 * </blockquote>
 * @param {Boolean} display or Number
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._displayProgress=function(display){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Disconnects fileInput in favor of new one.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. HTML Uploader connections. These get disconnected<br>
 *	 after upload or if multi upload.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._connectInput=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subscribing to published topics coming from the<br>
 *	 Flash uploader.<br>
 * </blockquote>
 * Sacrificing some readbilty for compactness. this.id<br>
 * will be on the beginning of the topic, so more than<br>
 * one uploader can be on a page and can have unique calls.
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._connectFlash=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Handles tasks after files have finished uploading<br>
 * </blockquote>
 * @param {mixed} dataArray 
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._complete=function(dataArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Check if the dialog was opened and canceled without file selection.<br>
 * </blockquote>
 * @param {mixed} mouseType 
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._checkHtmlCancel=function(mouseType){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Updates uploader selection<br>
 * </blockquote>
 * @param {mixed} dataArray 
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._change=function(dataArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Build the form that holds the fileInput<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._buildForm=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Build the fileInput field<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._buildFileInput=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Animated the built-in progress bar<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._animateProgress=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal only. If there is a file list, adds a file to it.<br>
 *	 If you need to use a function such as this, connect to<br>
 *	 onChange and update outside of this widget.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.FileUploader
*/
dojox.form.FileUploader.prototype._addToFileList=function(){};

/**
 * <b>Summary:</b><blockquote>
 *	 An automatic list maker<br>
 * </blockquote>
 * you can add value to list with add method.<br>
 * you can only remove by clicking close button
 * @class
 * @extends dijit.form._FormValueWidget
 * @returns {dojox.form.ListInput} new instance
*/
dojox.form.ListInput=function(){};
/**
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.inputProperties='';
/**
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput._lastAddedItem=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function used to generate regExp when dependent on constraints.<br>
 *	 Do not specify both regExp and regExpGen.<br>
 * </blockquote>
 * @param {ValidationTextBox.__Constraints} constraints 
 * @returns {String} -
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype.regExpGen=function(constraints){};
/**
 * <b>Summary:</b><blockquote>
 *	 If closeButton is used, add a class<br>
 * </blockquote>
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy all widget<br>
 * </blockquote>
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Compare 2 values (as returned by attr('value') for this widget).<br>
 * </blockquote>
 * @param {Array} val1 
 * @param {Array} val2 
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype.compare=function(val1, val2){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create new list element<br>
 * </blockquote>
 * @param {String} values || Array
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype.add=function(values){};
/**
 * <b>Summary:</b><blockquote>
 *	 update this.value and the select node<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._updateValues=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Change class of item (match, mismatch)<br>
 * </blockquote>
 * @param {Object} item 
 * @param {String} value 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._testItem=function(item, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so attr('value', value) works.<br>
 * </blockquote>
 * Sets the value of the widget.<br>
 * If the value has changed, then fire onChange event, unless priorityChange<br>
 * is specified as null (or false?)
 * @param {Array} newValue || String
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._setValueAttr=function(newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 put all item in the select (for a submit)<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._setSelectNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set input to readonly when max is reached<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._setReadOnlyWhenMaxItemsReached=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set read only items<br>
 * </blockquote>
 * @param {Boolean} value 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._setReadOnlyItemAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Change status and if needed, create the inputbox<br>
 * </blockquote>
 * @param {Boolean} value 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._setReadOnlyInputAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 also enable/disable editable items<br>
 * </blockquote>
 * @param {Boolean} value 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._setDisabledAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Place item in the list<br>
 * </blockquote>
 * @param {domNode} node 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._placeItem=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 search for delemiters and split if needed<br>
 * </blockquote>
 * @param {String} newValue 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._parseValue=function(newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call when item get a keypress<br>
 * </blockquote>
 * @param {dijit._Widget} item 
 * @param {Event} e 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._onItemKeyDown=function(item, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call when item is edited<br>
 * </blockquote>
 * @param {dijit._Widget} item 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._onItemEdit=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy a list element when close button is clicked<br>
 * </blockquote>
 * @param {dijit._Widget} item 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._onItemClose=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call when item value change<br>
 * </blockquote>
 * @param {dijit._Widget} item 
 * @param {String} value 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._onItemChange=function(item, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 When handlers of input are fired, this method check input value and (if needed) modify it<br>
 * </blockquote>
 * @param {String} value 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._onHandler=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 give focus to inputbox<br>
 * </blockquote>
 * @param {event} e 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 return true or false<br>
 * </blockquote>
 * @param {String} itemValue 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._nullValidator=function(itemValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 return true or false<br>
 * </blockquote>
 * @param {String} itemValue 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._mismatchValidator=function(itemValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 return true or false<br>
 * </blockquote>
 * @param {String} itemValue 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._matchValidator=function(itemValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used to add keybord interactivity<br>
 * </blockquote>
 * @param {event} e 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._inputOnKeyDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove focus class and act like pressing ENTER key<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._inputOnBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 return values with comparator constraint<br>
 * </blockquote>
 * @param {function} validator 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._getValues=function(validator){};
/**
 * <b>Summary:</b><blockquote>
 *	 get all value in then list and return an array<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 return the item before the one in params<br>
 * </blockquote>
 * @param {dijit._Widget} item 
 * @param {String} position 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._getSomeItem=function(item, position){};
/**
 * <b>Summary:</b><blockquote>
 *	 return the item before the one in params<br>
 * </blockquote>
 * @param {dijit._Widget} item 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._getPreviousItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 return the item before the one in params<br>
 * </blockquote>
 * @param {dijit._Widget} item 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._getNextItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 get value that mismatch regexp in then list and return an array<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._getMismatchedValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 get value that match regexp in then list and return an array<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._getMatchedValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 return the last item in list<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._getLastItemAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 get current cursor pos<br>
 * </blockquote>
 * @param {domNode} node 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._getCursorPos=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 give focus to input<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._focusInput=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 move trough items<br>
 * </blockquote>
 * @param {widget} item 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._editBefore=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 move trough items<br>
 * </blockquote>
 * @param {widget} item 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._editAfter=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 destroy an item<br>
 * </blockquote>
 * @param {dijit._Widget} item 
 * @param {Boolean} [updateValue] 
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._destroyItem=function(item, updateValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 destroy all items<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._destroyAllItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create the input box<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.ListInput
*/
dojox.form.ListInput.prototype._createInputBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Item created by ListInputInput when delimiter is found<br>
 * </blockquote>
 * Simple &lt;li&gt; with close button added to ListInputInput when delimiter is found
 * @class
 * @extends dijit._Widget
 * @returns {dojox.form._ListInputInputItem} new instance
*/
dojox.form._ListInputInputItem=function(){};
/**
 * @namespace
*/
dojox.form._ListInputInputItem.attributeMap={};
/**
 * <b>Summary:</b><blockquote>
 *	 add the edit box<br>
 * </blockquote>
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype.startup=function(){};
/**
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create the close button if needed<br>
 * </blockquote>
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback when widget get a KeyDown<br>
 * </blockquote>
 * @param {String} value 
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype.onKeyDown=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback when widget come in edition<br>
 * </blockquote>
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype.onEdit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback when close button is clicked<br>
 * </blockquote>
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype.onClose=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback when widget is click<br>
 * </blockquote>
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype.onClick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback when widget change its content<br>
 * </blockquote>
 * @param {String} value 
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype.onChange=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 enter inline editbox in edit mode<br>
 * </blockquote>
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype.edit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy the inline editbox<br>
 * </blockquote>
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 change the readonly state<br>
 * </blockquote>
 * @param {Boolean} value 
 * @private
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype._setReadOnlyItemAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 disable inline edit box<br>
 * </blockquote>
 * @param {Boolean} value 
 * @private
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype._setDisabledAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 call when inline editor start editing<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype._onEdit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when user stops hovering over close icon<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype._onCloseLeave=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when user hovers over close icon<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype._onCloseEnter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 call when inline editor close himself<br>
 * </blockquote>
 * @param {String} value 
 * @private
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype._onCloseEdit=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 return value<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 create the inline editbox if needed<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form._ListInputInputItem
*/
dojox.form._ListInputInputItem.prototype._createInlineEditBox=function(){};
/**
 * @namespace
*/
dojox.form._ListInputInputItem.attributeMap.value={};
/**
 * <b>Summary:</b><blockquote>
 *	 auto-sized text box<br>
 * </blockquote>
 * Auto sized textbox based on dijit.form.TextBox
 * @class
 * @extends dijit.form.ValidationTextBox
 * @returns {dojox.form._ListInputInputBox} new instance
*/
dojox.form._ListInputInputBox=function(){};
/**
 * @memberOf dojox.form._ListInputInputBox
*/
dojox.form._ListInputInputBox._sizer=null;
/**
 * <b>Summary:</b><blockquote>
 *	 compute content width<br>
 * </blockquote>
 * @param {string} value 
 * @memberOf dojox.form._ListInputInputBox
*/
dojox.form._ListInputInputBox.prototype.onChange=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 destroy the widget<br>
 * </blockquote>
 * @memberOf dojox.form._ListInputInputBox
*/
dojox.form._ListInputInputBox.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Form manager's mixin for getting/setting form values in the unified manner.<br>
 * </blockquote>
 * This mixin adds unified access to form widgets and form elements<br>
 * in terms of name-value regardless of the underlying type of<br>
 * an element. It should be used together with dojox.form.manager.Mixin.
 * @private
*/
dojox.form.manager._ValueMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to orchestrate dynamic forms (works with DOM nodes).<br>
 * </blockquote>
 * This mixin provideas a foundation for an enhanced form<br>
 * functionality: unified access to individual form elements,<br>
 * unified "onchange" event processing, and general event<br>
 * processing. It complements dojox.form.manager._Mixin<br>
 * extending the functionality to DOM nodes.
 * @private
*/
dojox.form.manager._NodeMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to orchestrate dynamic forms.<br>
 * </blockquote>
 * This mixin provideas a foundation for an enhanced form<br>
 * functionality: unified access to individual form elements,<br>
 * unified "onchange" event processing, general event<br>
 * processing, I/O orchestration, and common form-related<br>
 * functionality. See additional mixins in dojox.form.manager<br>
 * namespace.
 * @private
*/
dojox.form.manager._Mixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Form manager's mixin for form-specific functionality.<br>
 * </blockquote>
 * This mixin adds automated "onreset", and "onsubmit" event processing<br>
 * if we are based on a form node, defines onReset(), onSubmit(),<br>
 * reset(), submit(), and isValid() methods like dijit.form.Form.<br>
 * It should be used together with dojox.form.manager.Mixin.
 * @private
*/
dojox.form.manager._FormMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Form manager's mixin for controlling enable/disable state of<br>
 *	 form elements.<br>
 * </blockquote>
 * This mixin provides unified enable/disable functionality for<br>
 * form widgets and form elements. It should be used together<br>
 * with dojox.form.manager.Mixin.
 * @private
*/
dojox.form.manager._EnableMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Form manager's mixin for controlling show/hide state of<br>
 *	 controlled elements (defined by dojoAttachPoint attributes).<br>
 * </blockquote>
 * This mixin provides unified show/hide functionality for<br>
 * controlled elements (indicated by dojoAttachPoint attribute).<br>
 * Essentially it provides a way to change "style.display"<br>
 * parameter of controlled nodes.<br>
 * It should be used together with dojox.form.manager.Mixin.
 * @private
*/
dojox.form.manager._DisplayMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Form manager's mixin for testing/assigning/removing<br>
 *	 classes of controlled elements.<br>
 * </blockquote>
 * This mixin provides unified way to check/add/remove a class<br>
 * of controlled elements.<br>
 * It should be used together with dojox.form.manager.Mixin.
 * @private
*/
dojox.form.manager._ClassMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Form manager's mixin for testing/assigning/removing<br>
 *	 classes of controlled elements.<br>
 * </blockquote>
 * This mixin provides unified way to check/add/remove a class<br>
 * of controlled elements.<br>
 * It should be used together with dojox.form.manager.Mixin.
 * @class
 * @private
 * @returns {dojox.form.manager._ClassMixin} new instance
*/
dojox.form.manager._ClassMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove a class from nodes according to the supplied set of names<br>
 * </blockquote>
 * @param {String:} className Class name to remove.
 * @param {Object:} [names] If it is an array, it is a list of names to be processed.
 * If it is an object, dictionary keys are names to be processed.<br>
 * If it is omitted, all known form elements are to be processed.
 * @returns {self} -
 * @memberOf dojox.form.manager._ClassMixin
*/
dojox.form.manager._ClassMixin.prototype.removeClass=function(className, names){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gather the presence of a certain class in all controlled elements.<br>
 * </blockquote>
 * @param {String:} className The class name to test for.
 * @param {Object:} [names] If it is an array, it is a list of names to be processed.
 * If it is an object, dictionary keys are names to be processed.<br>
 * If it is omitted, all known form elements are to be processed.
 * @returns {Object} -
 * @memberOf dojox.form.manager._ClassMixin
*/
dojox.form.manager._ClassMixin.prototype.gatherClassState=function(className, names){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a class to nodes according to the supplied set of names<br>
 * </blockquote>
 * @param {String:} className Class name to add.
 * @param {Object:} [names] If it is an array, it is a list of names to be processed.
 * If it is an object, dictionary keys are names to be processed.<br>
 * If it is omitted, all known form elements are to be processed.
 * @returns {self} -
 * @memberOf dojox.form.manager._ClassMixin
*/
dojox.form.manager._ClassMixin.prototype.addClass=function(className, names){};
/**
 * <b>Summary:</b><blockquote>
 *	 Form manager's mixin for controlling show/hide state of<br>
 *	 controlled elements (defined by dojoAttachPoint attributes).<br>
 * </blockquote>
 * This mixin provides unified show/hide functionality for<br>
 * controlled elements (indicated by dojoAttachPoint attribute).<br>
 * Essentially it provides a way to change "style.display"<br>
 * parameter of controlled nodes.<br>
 * It should be used together with dojox.form.manager.Mixin.
 * @class
 * @private
 * @returns {dojox.form.manager._DisplayMixin} new instance
*/
dojox.form.manager._DisplayMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show attached nodes according to the supplied state object.<br>
 * </blockquote>
 * @param {Object:} [state] Optional. If a name-value dictionary, the value is true
 * to show and false to hide. If an array, all names in the<br>
 * array will be set to defaultState. If omitted, all form<br>
 * elements will be set to defaultState.
 * @param {Boolean:} [defaultState] The default state (true, if omitted).
 * @returns {self} -
 * @memberOf dojox.form.manager._DisplayMixin
*/
dojox.form.manager._DisplayMixin.prototype.show=function(state, defaultState){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide attached nodes according to the supplied state object.<br>
 * </blockquote>
 * @param {Object:} [state] Optional. If a name-value dictionary, the value is true
 * to show and false to hide. If an array, all names in the<br>
 * array will be hidden. If omitted, all form elements<br>
 * will be hidden.
 * @returns {self} -
 * @memberOf dojox.form.manager._DisplayMixin
*/
dojox.form.manager._DisplayMixin.prototype.hide=function(state){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gather display state of all attached elements and return as a dictionary.<br>
 * </blockquote>
 * @param {Object:} [names] If it is an array, it is a list of names to be processed.
 * If it is an object, dictionary keys are names to be processed.<br>
 * If it is omitted, all known attach point nodes are to be processed.
 * @returns {Object} -
 * @memberOf dojox.form.manager._DisplayMixin
*/
dojox.form.manager._DisplayMixin.prototype.gatherDisplayState=function(names){};
/**
 * <b>Summary:</b><blockquote>
 *	 Form manager's mixin for controlling enable/disable state of<br>
 *	 form elements.<br>
 * </blockquote>
 * This mixin provides unified enable/disable functionality for<br>
 * form widgets and form elements. It should be used together<br>
 * with dojox.form.manager.Mixin.
 * @class
 * @private
 * @returns {dojox.form.manager._EnableMixin} new instance
*/
dojox.form.manager._EnableMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gather enable state of all form elements and return as a dictionary.<br>
 * </blockquote>
 * @param {Object:} [names] If it is an array, it is a list of names to be processed.
 * If it is an object, dictionary keys are names to be processed.<br>
 * If it is omitted, all known form elements are to be processed.
 * @returns {Object} -
 * @memberOf dojox.form.manager._EnableMixin
*/
dojox.form.manager._EnableMixin.prototype.gatherEnableState=function(names){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enable form controls according to the supplied state object.<br>
 * </blockquote>
 * @param {Object:} [state] Optional. If a name-value dictionary, the value is true
 * to enable and false to disable. If an array, all names in the<br>
 * array will be set to defaultState. If omitted, all form<br>
 * elements will be set to defaultState.
 * @param {Boolean:} defaultState The default state (true, if omitted).
 * @returns {self} -
 * @memberOf dojox.form.manager._EnableMixin
*/
dojox.form.manager._EnableMixin.prototype.enable=function(state, defaultState){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disable form controls according to the supplied state object<br>
 *	 returning the previous state.<br>
 * </blockquote>
 * @param {Object:} [state] Optional. If a name-value dictionary, the value is true
 * to enable and false to disable. If an array, all names in the<br>
 * array will be disabled. If omitted, disables all.
 * @returns {Object} -
 * @memberOf dojox.form.manager._EnableMixin
*/
dojox.form.manager._EnableMixin.prototype.disable=function(state){};
/**
 * <b>Summary:</b><blockquote>
 *	 Form manager's mixin for form-specific functionality.<br>
 * </blockquote>
 * This mixin adds automated "onreset", and "onsubmit" event processing<br>
 * if we are based on a form node, defines onReset(), onSubmit(),<br>
 * reset(), submit(), and isValid() methods like dijit.form.Form.<br>
 * It should be used together with dojox.form.manager.Mixin.
 * @class
 * @private
 * @returns {dojox.form.manager._FormMixin} new instance
*/
dojox.form.manager._FormMixin=function(){};
/**
 * @memberOf dojox.form.manager._FormMixin
*/
dojox.form.manager._FormMixin.prototype.validate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 programmatically submit form if and only if the `onSubmit` returns true<br>
 * </blockquote>
 * @memberOf dojox.form.manager._FormMixin
*/
dojox.form.manager._FormMixin.prototype.submit=function(){};
/**
 * @memberOf dojox.form.manager._FormMixin
*/
dojox.form.manager._FormMixin.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resets form widget values.<br>
 * </blockquote>
 * @memberOf dojox.form.manager._FormMixin
*/
dojox.form.manager._FormMixin.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when user submits the form. This method is<br>
 *	 intended to be over-ridden, but by default it checks and<br>
 *	 returns the validity of form elements. When the `submit`<br>
 *	 method is called programmatically, the return value from<br>
 *	 `onSubmit` is used to compute whether or not submission<br>
 *	 should proceed<br>
 * </blockquote>
 * @returns {Boolean} -
 * @memberOf dojox.form.manager._FormMixin
*/
dojox.form.manager._FormMixin.prototype.onSubmit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when user resets the form. This method is intended<br>
 *	 to be over-ridden. When the `reset` method is called<br>
 *	 programmatically, the return value from `onReset` is used<br>
 *	 to compute whether or not resetting should proceed<br>
 * </blockquote>
 * @returns {Boolean} -
 * @memberOf dojox.form.manager._FormMixin
*/
dojox.form.manager._FormMixin.prototype.onReset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Make sure that every widget that has a validator function returns true.<br>
 * </blockquote>
 * @memberOf dojox.form.manager._FormMixin
*/
dojox.form.manager._FormMixin.prototype.isValid=function(){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.form.manager._FormMixin
*/
dojox.form.manager._FormMixin.prototype._onSubmit=function(evt){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.form.manager._FormMixin
*/
dojox.form.manager._FormMixin.prototype._onReset=function(evt){};
/**
 * @class
 * @returns {dojox.Widget} new instance
*/
dojox.Widget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to orchestrate dynamic forms.<br>
 * </blockquote>
 * This mixin provideas a foundation for an enhanced form<br>
 * functionality: unified access to individual form elements,<br>
 * unified "onchange" event processing, general event<br>
 * processing, I/O orchestration, and common form-related<br>
 * functionality. See additional mixins in dojox.form.manager<br>
 * namespace.
 * @class
 * @private
 * @returns {dojox.form.manager._Mixin} new instance
*/
dojox.form.manager._Mixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Unregister widget's descendants with the form manager<br>
 * </blockquote>
 * @param {String|Node|dijit._Widget:} widget A widget, or its widgetId, or its DOM node
 * @memberOf dojox.form.manager._Mixin
*/
dojox.form.manager._Mixin.prototype.unregisterWidgetDescendants=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the widget by name from internal tables unregistering<br>
 *	 connected observers<br>
 * </blockquote>
 * @param {String:} name Name of the to unregister
 * @memberOf dojox.form.manager._Mixin
*/
dojox.form.manager._Mixin.prototype.unregisterWidget=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called after all the widgets have been instantiated and their<br>
 *	 dom nodes have been inserted somewhere under win.doc.body.<br>
 * </blockquote>
 * @memberOf dojox.form.manager._Mixin
*/
dojox.form.manager._Mixin.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register widget's descendants with the form manager<br>
 * </blockquote>
 * @param {String|Node|dijit._Widget:} widget A widget, or its widgetId, or its DOM node
 * @memberOf dojox.form.manager._Mixin
*/
dojox.form.manager._Mixin.prototype.registerWidgetDescendants=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register a widget with the form manager<br>
 * </blockquote>
 * @param {String|Node|dijit.form._FormWidget:} widget A widget, or its widgetId, or its DOM node
 * @memberOf dojox.form.manager._Mixin
*/
dojox.form.manager._Mixin.prototype.registerWidget=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run an inspector function on controlled widgets returning a result object.<br>
 * </blockquote>
 * @param {Function:} inspector A function to be called on a widget. Takes three arguments: a name, a widget object
 * or an array of widget objects, and a supplied value. Runs in the context of<br>
 * the form manager. Returns a value that will be collected and returned as a state.
 * @param {Object:} [state] Optional. If a name-value dictionary --- only listed names will be processed.
 * If an array, all names in the array will be processed with defaultValue.<br>
 * If omitted or null, all widgets will be processed with defaultValue.
 * @param {Object:} [defaultValue] Optional. The default state (true, if omitted).
 * @returns {Object} -
 * @memberOf dojox.form.manager._Mixin
*/
dojox.form.manager._Mixin.prototype.inspectFormWidgets=function(inspector, state, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run an inspector function on &amp;quot;dojoAttachPoint&amp;quot; nodes returning a result object.<br>
 * </blockquote>
 * @param {Function:} inspector A function to be called on a node. Takes three arguments: a name, a node or
 * an array of nodes, and a supplied value. Runs in the context of the form manager.<br>
 * Returns a value that will be collected and returned as a state.
 * @param {Object:} [state] Optional. If a name-value dictionary --- only listed names will be processed.
 * If an array, all names in the array will be processed with defaultValue.<br>
 * If omitted or null, all attached point nodes will be processed with defaultValue.
 * @param {Object:} [defaultValue] Optional. The default state (true, if omitted).
 * @returns {Object} -
 * @memberOf dojox.form.manager._Mixin
*/
dojox.form.manager._Mixin.prototype.inspectAttachedPoints=function(inspector, state, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run an inspector function on controlled elements returning a result object.<br>
 * </blockquote>
 * @param {Function:} inspector A function to be called on a widget, form element, and an attached node.
 * Takes three arguments: a name, a node (domNode in the case of widget) or<br>
 * an array of such objects, and a supplied value. Runs in the context of<br>
 * the form manager. Returns a value that will be collected and returned as a state.
 * @param {Object:} [state] Optional. If a name-value dictionary --- only listed names will be processed.
 * If an array, all names in the array will be processed with defaultValue.<br>
 * If omitted or null, all controlled elements will be processed with defaultValue.
 * @param {Object:} [defaultValue] Optional. The default state (true, if omitted).
 * @returns {Object} -
 * @memberOf dojox.form.manager._Mixin
*/
dojox.form.manager._Mixin.prototype.inspect=function(inspector, state, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set or get a form widget by name.<br>
 * </blockquote>
 * @param {String|Object|Array:} elem Form element's name, widget object, or array or radio widgets.
 * @param {Object:} [value] Optional. The value to set.
 * 
 * @returns {Object|self|String} -For a getter it returns the value, for a setter it returns
 * self. If the elem is not valid, null will be returned.
 * @memberOf dojox.form.manager._Mixin
*/
dojox.form.manager._Mixin.prototype.formWidgetValue=function(elem, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set or get a node context by name (using dojoAttachPoint).<br>
 * </blockquote>
 * @param {String|Object|Array:} elem A node.
 * @param {Object:} [value] Optional. The value to set.
 * 
 * @returns {Object|self|String} -For a getter it returns the value, for a setter it returns
 * self. If the elem is not valid, null will be returned.
 * @memberOf dojox.form.manager._Mixin
*/
dojox.form.manager._Mixin.prototype.formPointValue=function(elem, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the widget is being destroyed<br>
 * </blockquote>
 * @memberOf dojox.form.manager._Mixin
*/
dojox.form.manager._Mixin.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin to orchestrate dynamic forms (works with DOM nodes).<br>
 * </blockquote>
 * This mixin provideas a foundation for an enhanced form<br>
 * functionality: unified access to individual form elements,<br>
 * unified "onchange" event processing, and general event<br>
 * processing. It complements dojox.form.manager._Mixin<br>
 * extending the functionality to DOM nodes.
 * @class
 * @private
 * @returns {dojox.form.manager._NodeMixin} new instance
*/
dojox.form.manager._NodeMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Unregister node's descendants (form nodes) with the form manager<br>
 * </blockquote>
 * @param {String|Node:} node A widget, or its widgetId, or its DOM node
 * @memberOf dojox.form.manager._NodeMixin
*/
dojox.form.manager._NodeMixin.prototype.unregisterNodeDescendants=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the node by name from internal tables unregistering<br>
 *	 connected observers<br>
 * </blockquote>
 * @param {String:} name Name of the to unregister
 * @memberOf dojox.form.manager._NodeMixin
*/
dojox.form.manager._NodeMixin.prototype.unregisterNode=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register node's descendants (form nodes) with the form manager<br>
 * </blockquote>
 * @param {String|Node:} node A widget, or its widgetId, or its DOM node
 * @memberOf dojox.form.manager._NodeMixin
*/
dojox.form.manager._NodeMixin.prototype.registerNodeDescendants=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register a node with the form manager<br>
 * </blockquote>
 * @param {String|Node:} node A node, or its id
 * @memberOf dojox.form.manager._NodeMixin
*/
dojox.form.manager._NodeMixin.prototype.registerNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run an inspector function on controlled form elements returning a result object.<br>
 * </blockquote>
 * @param {Function:} inspector A function to be called on a form element. Takes three arguments: a name, a node or
 * an array of nodes, and a supplied value. Runs in the context of the form manager.<br>
 * Returns a value that will be collected and returned as a state.
 * @param {Object:} [state] Optional. If a name-value dictionary --- only listed names will be processed.
 * If an array, all names in the array will be processed with defaultValue.<br>
 * If omitted or null, all form elements will be processed with defaultValue.
 * @param {Object:} [defaultValue] Optional. The default state (true, if omitted).
 * @returns {Object} -
 * @memberOf dojox.form.manager._NodeMixin
*/
dojox.form.manager._NodeMixin.prototype.inspectFormNodes=function(inspector, state, defaultValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set or get a form element by name.<br>
 * </blockquote>
 * @param {String|Node|Array:} elem Form element's name, DOM node, or array or radio nodes.
 * @param {Object:} [value] Optional. The value to set.
 * 
 * @returns {Object|self|String} -For a getter it returns the value, for a setter it returns
 * self. If the elem is not valid, null will be returned.
 * @memberOf dojox.form.manager._NodeMixin
*/
dojox.form.manager._NodeMixin.prototype.formNodeValue=function(elem, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the widget is being destroyed<br>
 * </blockquote>
 * @memberOf dojox.form.manager._NodeMixin
*/
dojox.form.manager._NodeMixin.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Form manager's mixin for getting/setting form values in the unified manner.<br>
 * </blockquote>
 * This mixin adds unified access to form widgets and form elements<br>
 * in terms of name-value regardless of the underlying type of<br>
 * an element. It should be used together with dojox.form.manager.Mixin.
 * @class
 * @private
 * @returns {dojox.form.manager._ValueMixin} new instance
*/
dojox.form.manager._ValueMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set values to form elements<br>
 * </blockquote>
 * @param {Object:} values A dictionary of key-value pairs.
 * @memberOf dojox.form.manager._ValueMixin
*/
dojox.form.manager._ValueMixin.prototype.setFormValues=function(values){};
/**
 * <b>Summary:</b><blockquote>
 *	 Collect form values.<br>
 * </blockquote>
 * @param {Object:} [names] If it is an array, it is a list of names of form elements to be collected.
 * If it is an object, dictionary keys are names to be collected.<br>
 * If it is omitted, all known form elements are to be collected.
 * @returns {Object} -
 * @memberOf dojox.form.manager._ValueMixin
*/
dojox.form.manager._ValueMixin.prototype.gatherFormValues=function(names){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set or get a form widget/element or an attached point node by name.<br>
 * </blockquote>
 * @param {String:} name The name.
 * @param {Object:} [value] Optional. The value to set.
 * @returns {Object} -
 * @memberOf dojox.form.manager._ValueMixin
*/
dojox.form.manager._ValueMixin.prototype.elementValue=function(name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 The widget to orchestrate dynamic forms.<br>
 * </blockquote>
 * This widget hosts dojox.form.manager mixins.<br>
 * See _Mixin for more info.
 * @class
 * @extends dijit._Widget
 * @extends dojox.form.manager._Mixin
 * @extends dojox.form.manager._NodeMixin
 * @extends dojox.form.manager._FormMixin
 * @extends dojox.form.manager._ValueMixin
 * @extends dojox.form.manager._EnableMixin
 * @extends dojox.form.manager._DisplayMixin
 * @extends dojox.form.manager._ClassMixin
 * @returns {dojox.form.Manager} new instance
*/
dojox.form.Manager=function(){};
/**
 * @param {mixed} preserveDom 
 * @memberOf dojox.form.Manager
*/
dojox.form.Manager.prototype.destroyRendering=function(preserveDom){};
/**
 * @memberOf dojox.form.Manager
*/
dojox.form.Manager.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A ComboBox that accepts multiple inputs on a single line<br>
 * </blockquote>
 * @class
 * @extends dijit.form.ValidationTextBox
 * @extends dijit.form.ComboBoxMixin
 * @returns {dojox.form.MultiComboBox} new instance
*/
dojox.form.MultiComboBox=function(){};
/**
 * @param {String} text 
 * @private
 * @memberOf dojox.form.MultiComboBox
*/
dojox.form.MultiComboBox.prototype._startSearch=function(text){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.form.MultiComboBox
*/
dojox.form.MultiComboBox.prototype._setValueAttr=function(value){};
/**
 * @param {String} text 
 * @private
 * @memberOf dojox.form.MultiComboBox
*/
dojox.form.MultiComboBox.prototype._cleanupDelimiters=function(text){};
/**
 * @param {String} text 
 * @private
 * @memberOf dojox.form.MultiComboBox
*/
dojox.form.MultiComboBox.prototype._autoCompleteText=function(text){};
/**
 * @param {String} text 
 * @private
 * @returns {String} -
 * @memberOf dojox.form.MultiComboBox
*/
dojox.form.MultiComboBox.prototype._addPreviousMatches=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class that is shared between all our children - extends<br>
 *	 ValidationTextBox and provides some shared functionality<br>
 * </blockquote>
 * @class
 * @extends dijit.form.ValidationTextBox
 * @returns {dojox.form._ChildTextBox} new instance
*/
dojox.form._ChildTextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Force-set to empty string (we don't save passwords EVER)...and<br>
 *	 since _OldPWBox overrides _setValueAttr to check for empty string,<br>
 *	 call our parent class directly (not this.inherited())<br>
 * </blockquote>
 * @memberOf dojox.form._ChildTextBox
*/
dojox.form._ChildTextBox.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 We want to remove the &amp;quot;name&amp;quot; attribute from our focus node if<br>
 *	 we don't have one set - this prevents all our extra values<br>
 *	 from being posted on submit<br>
 * </blockquote>
 * @memberOf dojox.form._ChildTextBox
*/
dojox.form._ChildTextBox.prototype.postCreate=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.form._ChildTextBox
*/
dojox.form._ChildTextBox.prototype._onChildKeyPress=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class representing our &amp;quot;old password&amp;quot; box.<br>
 * </blockquote>
 * @class
 * @returns {dojox.form._OldPWBox} new instance
*/
dojox.form._OldPWBox=function(){};
/**
 * @param {boolean} isFocused 
 * @memberOf dojox.form._OldPWBox
*/
dojox.form._OldPWBox.prototype.isValid=function(isFocused){};
/**
 * @param {event} e 
 * @private
 * @memberOf dojox.form._OldPWBox
*/
dojox.form._OldPWBox.prototype._update=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates _isPWValid if this isn't our initial update by calling<br>
 *	 our PasswordValidator's pwCheck function<br>
 * </blockquote>
 * @param {anything} newVal 
 * @param {boolean} [priority] 
 * @private
 * @memberOf dojox.form._OldPWBox
*/
dojox.form._OldPWBox.prototype._setValueAttr=function(newVal, priority){};
/**
 * @private
 * @memberOf dojox.form._OldPWBox
*/
dojox.form._OldPWBox.prototype._setBlurValue=function(){};
/**
 * @private
 * @memberOf dojox.form._OldPWBox
*/
dojox.form._OldPWBox.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class representing our new password textbox<br>
 * </blockquote>
 * @class
 * @returns {dojox.form._NewPWBox} new instance
*/
dojox.form._NewPWBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validates our verify box - to make sure that a change to me is<br>
 *	 reflected there<br>
 * </blockquote>
 * @memberOf dojox.form._NewPWBox
*/
dojox.form._NewPWBox.prototype.onChange=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class representing our verify textbox<br>
 * </blockquote>
 * @class
 * @returns {dojox.form._VerifyPWBox} new instance
*/
dojox.form._VerifyPWBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validates that we match the &amp;quot;real&amp;quot; password<br>
 * </blockquote>
 * @param {mixed} isFocused 
 * @memberOf dojox.form._VerifyPWBox
*/
dojox.form._VerifyPWBox.prototype.isValid=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 A password validation widget that simplifies the &amp;quot;old/new/verify&amp;quot;<br>
 *	 style of requesting passwords.  You will probably want to override<br>
 *	 this class and implement your own pwCheck function.<br>
 * </blockquote>
 * @class
 * @extends dijit.form._FormValueWidget
 * @returns {dojox.form.PasswordValidator} new instance
*/
dojox.form.PasswordValidator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validating this widget validates all our children<br>
 * </blockquote>
 * @param {boolean} isFocused 
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype.validate=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resetting this widget resets all our children<br>
 * </blockquote>
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridable function for validation of the old password box.<br>
 *	 <br>
 *	 This function is called and passed the old password.  Return<br>
 *	 true if it's OK to continue, and false if it is not.<br>
 *	 <br>
 *	 IMPORTANT SECURITY NOTE:  Do NOT EVER EVER EVER check this in<br>
 *	 HTML or JavaScript!!!<br>
 *	 <br>
 *	 You will probably want to override this function to callback<br>
 *	 to a server to verify the password (the callback will need to<br>
 *	 be syncronous) - and it's probably a good idea to validate<br>
 *	 it again on form submission before actually doing<br>
 *	 anything destructive - that's why the &amp;quot;oldName&amp;quot; value<br>
 *	 is available.<br>
 *	 <br>
 *	 And don't just fetch the password from the server<br>
 *	 either :)  Send the test password (probably hashed, for<br>
 *	 security) and return from the server a status instead.<br>
 *	 <br>
 *	 Again - DON'T BE INSECURE!!!  Security is left as an exercise<br>
 *	 for the reader :)<br>
 * </blockquote>
 * @param {string} password 
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype.pwCheck=function(password){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets up the correct widgets.  You *MUST* specify one child<br>
 *	 text box (a simple HTML &amp;lt;input&amp;gt; element) with pwType=&amp;quot;new&amp;quot;<br>
 *	 *and* one child text box with pwType=&amp;quot;verify&amp;quot;.  You *MAY*<br>
 *	 specify a third child text box with pwType=&amp;quot;old&amp;quot; in order to<br>
 *	 prompt the user to enter in their old password before the<br>
 *	 widget returns that it is valid.<br>
 * </blockquote>
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 we are valid if ALL our children are valid<br>
 * </blockquote>
 * @param {boolean} isFocused 
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype.isValid=function(isFocused){};
/**
 * <b>Summary:</b><blockquote>
 *	 places focus on the first invalid input widget - if all<br>
 *	 input widgets are valid, the first widget is focused.<br>
 * </blockquote>
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype.focus=function(){};
/**
 * @param {mixed} v 
 * @private
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype._setValueAttr=function(v){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype._setRequiredAttribute=function(value){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype._setDisabledAttr=function(value){};
/**
 * @private
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Turns the inputs inside this widget into &amp;quot;real&amp;quot; validation<br>
 *	 widgets - and sets up the needed connections.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype._createSubWidgets=function(){};
/**
 * @param {mixed} v 
 * @private
 * @memberOf dojox.form.PasswordValidator
*/
dojox.form.PasswordValidator.prototype._childValueAttr=function(v){};
/**
 * <b>Summary:</b><blockquote>
 *	 A radio-based select stack.<br>
 * </blockquote>
 * @class
 * @extends dojox.form.CheckedMultiSelect
 * @extends dojox.form._SelectStackMixin
 * @returns {dojox.form.RadioStack} new instance
*/
dojox.form.RadioStack=function(){};
/**
 * @class
 * @returns {dojox.form._RangeSliderMixin} new instance
*/
dojox.form._RangeSliderMixin=function(){};
/**
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype.postCreate=function(){};
/**
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype.destroy=function(){};
/**
 * @param {Array} value or Number
 * @param {Boolean,} priorityChange optional
 * @param {Boolean,} isMaxVal optional
 * @private
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype._setValueAttr=function(value, priorityChange, isMaxVal){};
/**
 * @param {Number} pixelValue 
 * @param {Number} maxPixels 
 * @param {Boolean} priorityChange 
 * @param {Boolean} isMaxVal 
 * @private
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype._setPixelValue=function(pixelValue, maxPixels, priorityChange, isMaxVal){};
/**
 * @param {mixed} priorityChange 
 * @param {mixed} isMaxVal 
 * @private
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype._printSliderBar=function(priorityChange, isMaxVal){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype._onRemainingBarClick=function(e){};
/**
 * @param {Event} e 
 * @private
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype._onKeyPress=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype._onHandleClickMax=function(e){};
/**
 * @private
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype._onClkIncBumper=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype._onBarClick=function(e){};
/**
 * @param {Number} pixelValue 
 * @param {Number} maxPixels 
 * @private
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype._getValueByPixelValue=function(pixelValue, maxPixels){};
/**
 * @param {mixed} signedChange 
 * @param {mixed} useMaxValue 
 * @private
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype._getBumpValue=function(signedChange, useMaxValue){};
/**
 * @param {mixed} signedChange 
 * @param {mixed} useMaxValue 
 * @private
 * @memberOf dojox.form._RangeSliderMixin
*/
dojox.form._RangeSliderMixin.prototype._bumpValue=function(signedChange, useMaxValue){};
/**
 * @class
 * @extends dijit.form._SliderMover
 * @returns {dijit.form._SliderMoverMax} new instance
*/
dijit.form._SliderMoverMax=function(){};
/**
 * @param {mixed} e 
 * @memberOf dijit.form._SliderMoverMax
*/
dijit.form._SliderMoverMax.prototype.onMouseMove=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dijit.form._SliderMoverMax
*/
dijit.form._SliderMoverMax.prototype.destroy=function(e){};
/**
 * @class
 * @returns {dijit.form._SliderBarMover} new instance
*/
dijit.form._SliderBarMover=function(){};
/**
 * @param {mixed} e 
 * @memberOf dijit.form._SliderBarMover
*/
dijit.form._SliderBarMover.prototype.onMouseMove=function(e){};
/**
 * @memberOf dijit.form._SliderBarMover
*/
dijit.form._SliderBarMover.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A form widget that allows one to select a range with two horizontally draggable images<br>
 * </blockquote>
 * @class
 * @returns {dojox.form.HorizontalRangeSlider} new instance
*/
dojox.form.HorizontalRangeSlider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A form widget that allows one to select a range with two vertically draggable images<br>
 * </blockquote>
 * @class
 * @returns {dojox.form.VerticalRangeSlider} new instance
*/
dojox.form.VerticalRangeSlider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget for rating using stars.<br>
 *	 <br>
 *	 required: Boolean<br>
 *	 TODO: Can be true or false, default is false.<br>
 *	 required: false,<br>
 * </blockquote>
 * @class
 * @extends dijit.form._FormWidget
 * @param {Object} params 
 * @returns {dojox.form.Rating} new instance
*/
dojox.form.Rating=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 When calling setAttribute(&amp;quot;value&amp;quot;, 4), set the value and render the stars accordingly.<br>
 * </blockquote>
 * @param {String} key 
 * @param {mixed} value 
 * @memberOf dojox.form.Rating
*/
dojox.form.Rating.prototype.setAttribute=function(key, value){};
/**
 * @memberOf dojox.form.Rating
*/
dojox.form.Rating.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect on this method to get noticed when a star was clicked.<br>
 * </blockquote>
 * @param {Event} evt 
 * @example
 * connect(widget, "onStarClick", function(event){ ... })
 * @memberOf dojox.form.Rating
*/
dojox.form.Rating.prototype.onStarClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect here, the value is passed to this function as the second parameter!<br>
 * </blockquote>
 * @memberOf dojox.form.Rating
*/
dojox.form.Rating.prototype.onMouseOver=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Render the stars depending on the value.<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} hover 
 * @private
 * @memberOf dojox.form.Rating
*/
dojox.form.Rating.prototype._renderStars=function(value, hover){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.form.Rating
*/
dojox.form.Rating.prototype._onMouse=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Time Spinner<br>
 * </blockquote>
 * This widget is the same as a normal NumberSpinner, but for the time component of a date object instead
 * @class
 * @extends dijit.form._Spinner
 * @returns {dojox.form.TimeSpinner} new instance
*/
dojox.form.TimeSpinner=function(){};
/**
 * @param {mixed} time 
 * @param {mixed} locale 
 * @memberOf dojox.form.TimeSpinner
*/
dojox.form.TimeSpinner.prototype.parse=function(time, locale){};
/**
 * @memberOf dojox.form.TimeSpinner
*/
dojox.form.TimeSpinner.prototype.isValid=function(){};
/**
 * @param {mixed} time 
 * @param {mixed} locale 
 * @memberOf dojox.form.TimeSpinner
*/
dojox.form.TimeSpinner.prototype.format=function(time, locale){};
/**
 * @param {Object} val 
 * @param {Number} delta 
 * @memberOf dojox.form.TimeSpinner
*/
dojox.form.TimeSpinner.prototype.adjust=function(val, delta){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.form.TimeSpinner
*/
dojox.form.TimeSpinner.prototype._onKeyPress=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checkbox with three states<br>
 * </blockquote>
 * @class
 * @extends dijit.form.ToggleButton
 * @returns {dojox.form.TriStateCheckBox} new instance
*/
dojox.form.TriStateCheckBox=function(){};
/**
 * @namespace
*/
dojox.form.TriStateCheckBox.stateValues={};
/**
 * @namespace
 * @private
*/
dojox.form.TriStateCheckBox._stateLabels={};
/**
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use set('checked', true/false) instead.<br>
 * </blockquote>
 * @param {String|Boolean} checked 
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype.setChecked=function(checked){};
/**
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for values = attribute to constructor, and also calls to<br>
 *	 set('values', val).<br>
 * </blockquote>
 * Change the value of the TriStateCheckBox in 'mixed' and true states.
 * @param {Array} newValues If the length of newValues is 1, it will replace the value of
 * the TriStateCheckBox in true state. Otherwise, the values of<br>
 * the TriStateCheckBox in true state and 'mixed' state will be<br>
 * replaced by the first two values in newValues.
 * @private
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype._setValuesAttr=function(newValues){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for value = attribute to constructor, and also calls to<br>
 *	 set('value', val).<br>
 * </blockquote>
 * During initialization, just saves as attribute to the &lt;input type=checkbox&gt;.<br>
 * <br>
 * After initialization,<br>
 * when passed a boolean or the string 'mixed', controls the state of the<br>
 * TriStateCheckBox.<br>
 * If passed a string except 'mixed', changes the value attribute of the<br>
 * TriStateCheckBox. Sets the state of the TriStateCheckBox to checked.
 * @param {String|Boolean} newValue 
 * @param {Boolean} priorityChange 
 * @private
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype._setValueAttr=function(newValue, priorityChange){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype._setReadOnlyAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for checked = attribute to constructor, and also calls to<br>
 *	 set('checked', val).<br>
 * </blockquote>
 * Controls the state of the TriStateCheckBox. Set this.checked,<br>
 * this._currentState, value attribute of the &lt;input type=checkbox&gt;<br>
 * according to the value of 'checked'.
 * @param {String|Boolean} checked true, false or 'mixed'
 * @param {Boolean} [priorityChange] 
 * @private
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype._setCheckedAttr=function(checked, priorityChange){};
/**
 * @private
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype._onFocus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to handle click actions - need to check<br>
 *	 readOnly and disabled<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @returns {user click actions} -
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype._onClick=function(e){};
/**
 * @private
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype._onBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so get('value') works.<br>
 * </blockquote>
 * Returns value according to current state of the TriStateCheckBox.
 * @private
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to return the type of a certain state<br>
 *	 false: False<br>
 *	 true: True<br>
 *	 &amp;quot;mixed&amp;quot;: Mixed<br>
 * </blockquote>
 * @param {String|Boolean} state 
 * @private
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype._getStateType=function(state){};
/**
 * @param {DomNode} source 
 * @private
 * @memberOf dojox.form.TriStateCheckBox
*/
dojox.form.TriStateCheckBox.prototype._fillContent=function(source){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple widget that provides a list of the files currently selected by<br>
 *	 dojox.form.Uploader<br>
 * </blockquote>
 * There is a required CSS file: resources/UploaderFileList.css.<br>
 * This is a very simple widget, and not beautifully styled. It is here mainly for test<br>
 * cases, but could very easily be used, extended, modified, or copied.<br>
*/
dojox.form.uploader.FileList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The Base class used for dojox.form.Uploader and dojox.form.uploader.FileList.<br>
 * </blockquote>
 * Should not be used as a standalone. To be mixed in with other classes.<br>
*/
dojox.form.uploader.Base=function(){};
/**
 * @namespace
*/
dojox.form.uploader.plugins={};
/**
 * <b>Summary:</b><blockquote>
 *	 The Base class used for dojox.form.Uploader and dojox.form.uploader.FileList.<br>
 * </blockquote>
 * Should not be used as a standalone. To be mixed in with other classes.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.form.uploader.Base} new instance
*/
dojox.form.uploader.Base=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Does feature testing for uploader capabilities. (No browser sniffing - yay)<br>
 * </blockquote>
 * @param {mixed} what 
 * @returns {Boolean} -
 * @memberOf dojox.form.uploader.Base
*/
dojox.form.uploader.Base.prototype.supports=function(what){};
/**
 * <b>Summary:</b><blockquote>
 *	 Finds the URL to upload to, whether it be the action in the parent form, this.url or<br>
 *	 this.uploadUrl<br>
 * </blockquote>
 * @returns {String} -
 * @memberOf dojox.form.uploader.Base
*/
dojox.form.uploader.Base.prototype.getUrl=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the mime type that should be used in an HTML5 upload form. Return result<br>
 *	 may change as the current use is very generic.<br>
 * </blockquote>
 * @returns {image/gif} -
 * @memberOf dojox.form.uploader.Base
*/
dojox.form.uploader.Base.prototype.getMimeType=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Finds the parent form of the Uploader, if it exists.<br>
 * </blockquote>
 * @returns {Node;} -
 * @memberOf dojox.form.uploader.Base
*/
dojox.form.uploader.Base.prototype.getForm=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the extension of a file<br>
 * </blockquote>
 * @param {String} name 
 * @returns {String} -
 * @memberOf dojox.form.uploader.Base
*/
dojox.form.uploader.Base.prototype.getFileType=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Converts bytes. Returns an object with all conversions. The &amp;quot;value&amp;quot; property is<br>
 *	 considered the most likely desired result.<br>
 * </blockquote>
 * @param {mixed} bytes 
 * @memberOf dojox.form.uploader.Base
*/
dojox.form.uploader.Base.prototype.convertBytes=function(bytes){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Connects to form if there is one.<br>
 * </blockquote>
 * @memberOf dojox.form.uploader.Base
*/
dojox.form.uploader.Base.prototype.connectForm=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple widget that provides a list of the files currently selected by<br>
 *	 dojox.form.Uploader<br>
 * </blockquote>
 * There is a required CSS file: resources/UploaderFileList.css.<br>
 * This is a very simple widget, and not beautifully styled. It is here mainly for test<br>
 * cases, but could very easily be used, extended, modified, or copied.
 * @class
 * @extends dojox.form.uploader.Base
 * @returns {dojox.form.uploader.FileList} new instance
*/
dojox.form.uploader.FileList=function(){};
/**
 * @param {Boolean} animate 
 * @memberOf dojox.form.uploader.FileList
*/
dojox.form.uploader.FileList.prototype.showProgress=function(animate){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connects to the Uploader based on the uploader or the uploaderId properties.<br>
 * </blockquote>
 * @memberOf dojox.form.uploader.FileList
*/
dojox.form.uploader.FileList.prototype.setUploader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clears all rows of items. Happens automatically if Uploader is reset, but you<br>
 *	 could call this directly.<br>
 * </blockquote>
 * @memberOf dojox.form.uploader.FileList
*/
dojox.form.uploader.FileList.prototype.reset=function(){};
/**
 * @memberOf dojox.form.uploader.FileList
*/
dojox.form.uploader.FileList.prototype.postCreate=function(){};
/**
 * @param {Boolean} animate 
 * @memberOf dojox.form.uploader.FileList
*/
dojox.form.uploader.FileList.prototype.hideProgress=function(animate){};
/**
 * @param {Object} customEvent 
 * @private
 * @memberOf dojox.form.uploader.FileList
*/
dojox.form.uploader.FileList.prototype._progress=function(customEvent){};
/**
 * @param {mixed} fileArray 
 * @private
 * @memberOf dojox.form.uploader.FileList
*/
dojox.form.uploader.FileList.prototype._onUploaderChange=function(fileArray){};
/**
 * @param {mixed} o 
 * @private
 * @memberOf dojox.form.uploader.FileList
*/
dojox.form.uploader.FileList.prototype._hideShowProgress=function(o){};
/**
 * @param {mixed} index 
 * @param {mixed} type 
 * @param {mixed} name 
 * @param {mixed} size 
 * @private
 * @memberOf dojox.form.uploader.FileList
*/
dojox.form.uploader.FileList.prototype._addRow=function(index, type, name, size){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plugin for dojox.form.Uploader that adds Ajax upload capabilities.<br>
 * </blockquote>
 * Only supported by IE, due to the specifc iFrame hack used. The<br>
 * formUploaderPluginsHTML5 plugin should be used along with this to add HTML5<br>
 * capabilities to browsers that support them. Progress events are not supported.<br>
 * Inherits all properties from dojox.form.Uploader and formUploaderPluginsHTML5.<br>
*/
dojox.form.uploader.plugins.IFrame=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plugin for dojox.form.Uploader that adds HTML5 multiple-file upload capabilities and<br>
 *	 progress events.<br>
 * </blockquote>
 * Add this plugin to have HTML5 capabilities in the Uploader. Note that it does not add<br>
 * these capabilities to browsers that don't support them. For IE or older browsers, add<br>
 * additional plugins: IFrame or Flash.<br>
*/
dojox.form.uploader.plugins.HTML5=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plugin for dojox.form.Uploader that utilizes a Flash SWF for handling to upload in IE.<br>
 *	 All other browsers will use the HTML5 plugin, unless force=&amp;quot;flash&amp;quot; is used, then Flash<br>
 *	 will be used in all browsers. force=&amp;quot;flash&amp;quot;	is provided because Flash has some features<br>
 *	 that HTML5 does not yet have. But it is still not recommended because of the many problems<br>
 *	 that Firefox and Webkit have with the Flash plugin.<br>
 * </blockquote>
 * Inherits all properties from dojox.form.Uploader and formUploaderPluginsHTML5.<br>
 * All properties and methods listed here are specific to the Flash plugin only.<br>
*/
dojox.form.uploader.plugins.Flash=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plugin for dojox.form.Uploader that utilizes a Flash SWF for handling to upload in IE.<br>
 *	 All other browsers will use the HTML5 plugin, unless force=&amp;quot;flash&amp;quot; is used, then Flash<br>
 *	 will be used in all browsers. force=&amp;quot;flash&amp;quot;	is provided because Flash has some features<br>
 *	 that HTML5 does not yet have. But it is still not recommended because of the many problems<br>
 *	 that Firefox and Webkit have with the Flash plugin.<br>
 * </blockquote>
 * Inherits all properties from dojox.form.Uploader and formUploaderPluginsHTML5.<br>
 * All properties and methods listed here are specific to the Flash plugin only.
 * @class
 * @returns {dojox.form.uploader.plugins.Flash} new instance
*/
dojox.form.uploader.plugins.Flash=function(){};
/**
 * @namespace
*/
dojox.form.uploader.plugins.Flash.flashObject={};
/**
 * <b>Summary:</b><blockquote>
 *	 Uploads selected files. Alias &amp;quot;upload()&amp;quot; should be used instead.<br>
 * </blockquote>
 * @param {Object} formData ?
 * @private
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype.uploadFlash=function(formData){};
/**
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub - Fired when embedFlash has created the<br>
 *	 Flash object, but it has not necessarilly finished<br>
 *	 downloading, and is ready to be communicated with.<br>
 * </blockquote>
 * @param {dojox.form.FileUploader} uploader 
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype.onReady=function(uploader){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub - SWF has been downloaded 100%.<br>
 * </blockquote>
 * @param {dojox.form.FileUploader} uploader 
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype.onLoad=function(uploader){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub - Flash-specific event. Fires on progress of upload<br>
 *	 and only provides a file-specific event<br>
 * </blockquote>
 * @param {mixed} fileArray 
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype.onFileProgress=function(fileArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub - Flash-specific event. Fires on each selection of files<br>
 *	 and only provides the files selected on that event - not all files<br>
 *	 selected, as with HTML5<br>
 * </blockquote>
 * @param {mixed} fileArray 
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype.onFileChange=function(fileArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns list of currently selected files<br>
 * </blockquote>
 * @returns {Array} -
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype.getFlashFileList=function(){};
/**
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype.flashReset=function(){};
/**
 * @param {mixed} f 
 * @private
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype._progress=function(f){};
/**
 * @param {mixed} fileArray 
 * @private
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype._onFlashBlur=function(fileArray){};
/**
 * @private
 * @returns {Object} -
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype._getCustomEvent=function(){};
/**
 * @param {mixed} err 
 * @private
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype._error=function(err){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Creates Flash Uploader<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype._createFlashUploader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subscribing to published topics coming from the<br>
 *	 Flash uploader.<br>
 * </blockquote>
 * Sacrificing some readbilty for compactness. this.id<br>
 * will be on the beginning of the topic, so more than<br>
 * one uploader can be on a page and can have unique calls.
 * @private
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype._connectFlash=function(){};
/**
 * @param {mixed} fileArray 
 * @private
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype._complete=function(fileArray){};
/**
 * @param {mixed} fileArray 
 * @private
 * @memberOf dojox.form.uploader.plugins.Flash
*/
dojox.form.uploader.plugins.Flash.prototype._change=function(fileArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plugin for dojox.form.Uploader that adds HTML5 multiple-file upload capabilities and<br>
 *	 progress events.<br>
 * </blockquote>
 * Add this plugin to have HTML5 capabilities in the Uploader. Note that it does not add<br>
 * these capabilities to browsers that don't support them. For IE or older browsers, add<br>
 * additional plugins: IFrame or Flash.
 * @class
 * @returns {dojox.form.uploader.plugins.HTML5} new instance
*/
dojox.form.uploader.plugins.HTML5=function(){};
/**
 * @param {Object} data 
 * @private
 * @memberOf dojox.form.uploader.plugins.HTML5
*/
dojox.form.uploader.plugins.HTML5.prototype.uploadWithFormData=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 See: dojox.form.Uploader.upload<br>
 * </blockquote>
 * @param {Object} formData ?
 * @memberOf dojox.form.uploader.plugins.HTML5
*/
dojox.form.uploader.plugins.HTML5.prototype.upload=function(formData){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used primarily in FF &amp;lt; 4.0. Sends files and form object as binary data, written to<br>
 *	 still enable use of $_FILES in PHP (or equivalent).<br>
 * </blockquote>
 * @param {Object} data 
 * @private
 * @memberOf dojox.form.uploader.plugins.HTML5
*/
dojox.form.uploader.plugins.HTML5.prototype.sendAsBinary=function(data){};
/**
 * @memberOf dojox.form.uploader.plugins.HTML5
*/
dojox.form.uploader.plugins.HTML5.prototype.postCreate=function(){};
/**
 * @memberOf dojox.form.uploader.plugins.HTML5
*/
dojox.form.uploader.plugins.HTML5.prototype.createXhr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a dom node which will act as the drop target area so user<br>
 *	 can drop files to this node.<br>
 * </blockquote>
 * If onlyConnectDrop is true, dragenter/dragover/dragleave events<br>
 * won't be connected to dojo.stopEvent, and they need to be<br>
 * canceled by user code to allow DnD files to happen.<br>
 * This API is only available in HTML5 plugin (only HTML5 allows<br>
 * DnD files).
 * @param {mixed} node 
 * @param {Boolean} [onlyConnectDrop] 
 * @memberOf dojox.form.uploader.plugins.HTML5
*/
dojox.form.uploader.plugins.HTML5.prototype.addDropTarget=function(node, onlyConnectDrop){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.form.uploader.plugins.HTML5
*/
dojox.form.uploader.plugins.HTML5.prototype._xhrProgress=function(evt){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.form.uploader.plugins.HTML5
*/
dojox.form.uploader.plugins.HTML5.prototype._drop=function(e){};
/**
 * @param {mixed} data 
 * @param {mixed} boundary 
 * @private
 * @memberOf dojox.form.uploader.plugins.HTML5
*/
dojox.form.uploader.plugins.HTML5.prototype._buildRequestBody=function(data, boundary){};
/**
 * <b>Summary:</b><blockquote>
 *	 A plugin for dojox.form.Uploader that adds Ajax upload capabilities.<br>
 * </blockquote>
 * Only supported by IE, due to the specifc iFrame hack used. The<br>
 * formUploaderPluginsHTML5 plugin should be used along with this to add HTML5<br>
 * capabilities to browsers that support them. Progress events are not supported.<br>
 * Inherits all properties from dojox.form.Uploader and formUploaderPluginsHTML5.
 * @class
 * @returns {dojox.form.uploader.plugins.IFrame} new instance
*/
dojox.form.uploader.plugins.IFrame=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. You could use this, but you should use upload() or submit();<br>
 *	 which can also handle the post data.<br>
 * </blockquote>
 * @param {mixed} data 
 * @memberOf dojox.form.uploader.plugins.IFrame
*/
dojox.form.uploader.plugins.IFrame.prototype.uploadIFrame=function(data){};
/**
 * @memberOf dojox.form.uploader.plugins.IFrame
*/
dojox.form.uploader.plugins.IFrame.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget that creates a stylable file-input button, with optional multi-file selection,<br>
 *	 using only HTML elements. Non-HTML5 browsers have fallback options of Flash or an iframe.<br>
 * </blockquote>
 * A bare-bones, stylable file-input button, with optional multi-file selection. The list<br>
 * of files is not displayed, that is for you to handle by connecting to the onChange<br>
 * event, or use the dojox.form.uploader.FileList.<br>
 * <br>
 * Uploader without plugins does not have any ability to upload - it is for use in forms<br>
 * where you handle the upload either by a standard POST or with Ajax using an iFrame. This<br>
 * class is for convenience of multiple files only. No progress events are available.<br>
 * <br>
 * If the browser supports a file-input with the "multiple" attribute, that will be used.<br>
 * If the browser does not support "multiple" (ergo, IE) multiple inputs are used,<br>
 * one for each selection.
 * @class
 * @extends dojox.form.uploader.Base
 * @returns {dojox.form.Uploader} new instance
*/
dojox.form.Uploader=function(){};
/**
 * @namespace
*/
dojox.form.Uploader.inputNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 When called, begins file upload. Only supported with plugins.<br>
 * </blockquote>
 * @param {Object} formData ?
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.upload=function(formData){};
/**
 * <b>Summary:</b><blockquote>
 *	 If Uploader is in a form, and other data should be sent along with the files, use<br>
 *	 this instead of form submit.<br>
 * </blockquote>
 * @param {form} form Node ?
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.submit=function(form){};
/**
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.startup=function(){};
/**
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.reset=function(){};
/**
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub to connect<br>
 *	 Fires on upload progress. Event is a normalized object of common properties<br>
 *	 from HTML5 uploaders and the Flash uploader. Will not fire for IFrame.<br>
 * </blockquote>
 * @param {Object} customEvent bytesLoaded: Number
 * Amount of bytes uploaded so far of entire payload (all files)<br>
 * bytesTotal: Number<br>
 * Amount of bytes of entire payload (all files)<br>
 * type: String<br>
 * Type of event (progress or load)<br>
 * timeStamp: Number<br>
 * Timestamp of when event occurred
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.onProgress=function(customEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires on errors<br>
 *	 <br>
 *	 FIXME: Unsure of a standard form of error events<br>
 * </blockquote>
 * @param {Object} evtObject or String
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.onError=function(evtObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub to connect<br>
 *	 Fires when all files have uploaded<br>
 *	 Event is an array of all files<br>
 * </blockquote>
 * @param {Object} customEvent 
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.onComplete=function(customEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub to connect<br>
 *	 Fires when files are selected<br>
 *	 Event is an array of last files selected<br>
 * </blockquote>
 * @param {Array} fileArray 
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.onChange=function(fileArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub to connect<br>
 *	 Fires when dialog box has been closed<br>
 *	 without a file selection<br>
 * </blockquote>
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.onCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fires when upload begins<br>
 * </blockquote>
 * @param {Array} dataArray 
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.onBegin=function(dataArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub to connect<br>
 *	 Fires when upload in progress was canceled<br>
 * </blockquote>
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.onAbort=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a list of selected files.<br>
 * </blockquote>
 * @returns {Array} -
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.getFileList=function(){};
/**
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype.buildRendering=function(){};
/**
 * @param {mixed} disabled 
 * @private
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype._setValueAttr=function(disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. To set disabled use: uploader.set(&amp;quot;disabled&amp;quot;, true);<br>
 * </blockquote>
 * @param {mixed} disabled 
 * @private
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype._setDisabledAttr=function(disabled){};
/**
 * @private
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype._setButtonStyle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. To get disabled use: uploader.get(&amp;quot;disabled&amp;quot;);<br>
 * </blockquote>
 * @private
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype._getValueAttr=function(){};
/**
 * @param {mixed} node 
 * @private
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype._getButtonStyle=function(node){};
/**
 * @private
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype._disconnectButton=function(){};
/**
 * @private
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype._createInput=function(){};
/**
 * @private
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype._connectButton=function(){};
/**
 * @private
 * @memberOf dojox.form.Uploader
*/
dojox.form.Uploader.prototype._buildDisplay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A class that takes a complex property such as<br>
 *	 clip style: rect(10px 30px 10px 50px), and breaks it<br>
 *	 into seperate animatable units. The object has a getValue()<br>
 *	 that will return a string with the modified units.<br>
 * </blockquote>
 * @class
 * @param {mixed} options 
 * @returns {dojox.fx._Complex} new instance
*/
dojox.fx._Complex=function(options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object that stores the numeric value and<br>
 *	 units of the beggining and ending properties.<br>
 * </blockquote>
 * @param {String} beg 
 * @param {String} end 
 * @memberOf dojox.fx._Complex
*/
dojox.fx._Complex.prototype.makePropObject=function(beg, end){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a string with teh same integrity as the<br>
 *	 original star and end, but with the modified units.<br>
 * </blockquote>
 * @param {Float} r 
 * @returns {String} -
 * @memberOf dojox.fx._Complex
*/
dojox.fx._Complex.prototype.getValue=function(r){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function that splits a stringified set of properties<br>
 *	 into individual units.<br>
 * </blockquote>
 * @param {String} str 
 * @returns {String} -
 * @memberOf dojox.fx._Complex
*/
dojox.fx._Complex.prototype.getProps=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function that returns the numeric verion of the string<br>
 *	 property (or dojo.Color object) and the unit in which it was<br>
 *	 defined.<br>
 * </blockquote>
 * @param {mixed} prop 
 * @returns {Object} -
 * @memberOf dojox.fx._Complex
*/
dojox.fx._Complex.prototype.getNumAndUnits=function(prop){};
/**
 * @namespace
*/
dojox.baseFx={};
/**
 * <b>Summary:</b><blockquote>
 *	 An extension of dojo.animateProperty which adds functionality<br>
 *	 that animates a &amp;quot;complex property&amp;quot;. The primary example is the<br>
 *	 clip style: rect(10px 30px 10px 50px).<br>
 *	 Note this can also be used with (and is actually intended for)<br>
 *	 CSS3 properties, such as transform:<br>
 *	 transform: rotate(10deg) translateX(0px)<br>
 * </blockquote>
 * The standard animation doesn't know what to do with something like<br>
 * rect(...). This class identifies complex properties by they being a<br>
 * string and having parenthesis. If so, that property is made into a<br>
 * dojox.fx._Complex object and the getValue() is obtained from<br>
 * there.
 * @param {mixed} options 
 * @returns {dojo.Animation} -
 * @example
 * 	var ani = dojo.animateProperty({
 * 		node:dojo.byId("myDiv"),
 * 		duration:600,
 * 		properties:{
 * 			clip:{start:'rect(0px 50px 50px 0px)', end:'rect(10px 30px 30px 10px)'}
 * 		}
 * 	}).play();
*/
dojox.baseFx.animateProperty=function(options){};
/**
 * @class
 * @returns {dojox.NodeList} new instance
*/
dojox.NodeList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Wipe all elements of the NodeList to a specified width: or height:<br>
 * </blockquote>
 * @param {mixed} args 
 * @example
 *  dojo.query(".box").wipeTo({ width: 300px }).play();
 * @memberOf dojox.NodeList
*/
dojox.NodeList.prototype.wipeTo=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Animate the effect of adding or removing a class to all nodes in this list.<br>
 *	 see `dojox.fx.toggleClass`<br>
 * </blockquote>
 * @see dojox.fx.toggleClass
 * @param {mixed} cssClass 
 * @param {mixed} force 
 * @param {mixed} args 
 * @returns {dojo.Animation} -
 * @example
 *  dojo.query(".box").toggleClass("bar").play();
 * @memberOf dojox.NodeList
*/
dojox.NodeList.prototype.toggleClassFx=function(cssClass, force, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 slide all elements of this NodeList. Returns an instance of dojo.Animation<br>
 * </blockquote>
 * @param {mixed} args 
 * @returns {dojo.Animation} -
 * @example
 * 	// slide all tables with class "blah" 10 px
 * 	dojo.query("table.blah").slideBy({ top:10, left:10 }).play();
 * @memberOf dojox.NodeList
*/
dojox.NodeList.prototype.slideBy=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 size all elements of this NodeList. Returns an instance of dojo.Animation<br>
 * </blockquote>
 * @param {mixed} args 
 * @returns {dojo.Animation} -
 * @example
 * 	// size all divs with class "blah"
 * 	dojo.query("div.blah").sizeTo({
 * 		width:50,
 * 		height:50
 * 	}).play();
 * @memberOf dojox.NodeList
*/
dojox.NodeList.prototype.sizeTo=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Animate the effect of removing a class to all nodes in this list.<br>
 *	 see `dojox.fx.removeClass`<br>
 * </blockquote>
 * @see dojox.fx.removeClass
 * @param {mixed} cssClass 
 * @param {mixed} args 
 * @returns {dojo.Animation} -
 * @example
 *  dojo.query(".box").removeClassFx("bar").play();
 * @memberOf dojox.NodeList
*/
dojox.NodeList.prototype.removeClassFx=function(cssClass, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 highlight all elements of the node list.<br>
 *	 Returns an instance of dojo.Animation<br>
 * </blockquote>
 * @param {mixed} args 
 * @returns {dojo.Animation} -
 * @example
 * 	// highlight all links with class "foo"
 * 	dojo.query("a.foo").hightlight().play();
 * @memberOf dojox.NodeList
*/
dojox.NodeList.prototype.highlight=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 fade all elements of the node list to a specified opacity<br>
 * </blockquote>
 * @param {mixed} args 
 * @example
 * 	// fade all elements with class "bar" to to 50% opacity
 * 	dojo.query(".bar").fadeTo({ end: 0.5 }).play();
 * @memberOf dojox.NodeList
*/
dojox.NodeList.prototype.fadeTo=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Animate the effects of adding a class to all nodes in this list.<br>
 *	 see `dojox.fx.addClass`<br>
 * </blockquote>
 * @see dojox.fx.addClass
 * @param {mixed} cssClass 
 * @param {mixed} args 
 * @returns {dojo.Animation} -
 * @example
 * 	// fade all elements with class "bar" to to 50% opacity
 * 	dojo.query(".bar").addClassFx("bar").play();
 * @memberOf dojox.NodeList
*/
dojox.NodeList.prototype.addClassFx=function(cssClass, args){};
/**
 * @namespace
*/
dojox.fxExt={};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation that will smooth-scroll to a node<br>
 * </blockquote>
 * This implementation support either horizontal or vertical scroll, as well as<br>
 * both. In addition, element in iframe can be scrolled to correctly.<br>
 * offset: {x: int, y: int} this will be added to the target position<br>
 * duration: Duration of the animation in milliseconds.<br>
 * win: a node or window object to scroll
 * @param {Object} args 
 * @returns {dojo.Animation} -
*/
dojox.fxExt.smoothScroll=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 An extension to `dojox.fx.flip` providing a page flip like animation.<br>
 * </blockquote>
 * An extension to `dojox.fx.flip` providing a page flip effect.<br>
 * Behaves the same as `dojox.fx.flip`, using the same attributes and<br>
 * other standard `dojo.Animation` properties.
 * @param {Object} args 
 * @example
 * See `dojox.fx.flip`
*/
dojox.fxExt.flipPage=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 An extension to `dojox.fx.flip` providing a decomposition in rows * cols flipping elements<br>
 * </blockquote>
 * An extension to `dojox.fx.flip` providing a page flip effect.<br>
 * Behaves the same as `dojox.fx.flip`, using the same attributes and<br>
 * other standard `dojo.Animation` properties and<br>
 * <br>
 * cols: Integer columns<br>
 * rows: Integer rows<br>
 * <br>
 * duration: the single flip duration
 * @param {Object} args 
 * @example
 * See `dojox.fx.flip`
*/
dojox.fxExt.flipGrid=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 An extension to `dojox.fx.flip` providing a more 3d-like rotation<br>
 * </blockquote>
 * An extension to `dojox.fx.flip` providing a more 3d-like rotation.<br>
 * Behaves the same as `dojox.fx.flip`, using the same attributes and<br>
 * other standard `dojo.Animation` properties.
 * @param {Object} args 
 * @example
 * See `dojox.fx.flip`
*/
dojox.fxExt.flipCube=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Animate a node flipping following a specific direction<br>
 * </blockquote>
 * Returns an animation that will flip the<br>
 * node around a central axis:<br>
 * if args.dir is "left" or "right" --&gt; y axis<br>
 * if args.dir is "top" or "bottom" --&gt; x axis<br>
 * <br>
 * This effect is obtained using a border distorsion applied to a helper node.<br>
 * <br>
 * The user can specify three background colors for the helper node:<br>
 * darkColor: the darkest color reached during the animation<br>
 * lightColor: the brightest color<br>
 * endColor: the final backgroundColor for the node<br>
 * <br>
 * depth: Float<br>
 * 0 &lt;= depth &lt;= 1 overrides the computed "depth"<br>
 * (0: min distorsion, 1: max distorsion)<br>
 * <br>
 * whichAnim: String<br>
 * "first"			 : the first half animation<br>
 * "last"			 : the second one<br>
 * "both" (default) : both<br>
 * <br>
 * axis: String<br>
 * "center" (default)	  : the node is flipped around his center<br>
 * "shortside"			  : the node is flipped around his "short" (in perspective) side<br>
 * "longside"			  : the node is flipped around his "long" (in perspective) side<br>
 * "cube"				  : the node flips around the central axis of the cube<br>
 * <br>
 * shift: Integer<br>
 * node translation, perpendicular to the rotation axis
 * @param {Object} args 
 * @returns {dojo.Animation} -
 * @example
 * 	var anim = dojox.fx.flip({
 * 		node: dojo.byId("nodeId"),
 * 		dir: "top",
 * 		darkColor: "#555555",
 * 		lightColor: "#dddddd",
 * 		endColor: "#666666",
 * 		depth: .5,
 * 		shift: 50,
 * 		duration:300
 * 	  });
*/
dojox.fxExt.flip=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a drop-shadow to a node.<br>
 * </blockquote>
 * @class
 * @returns {dojox.fx.Shadow} new instance
 * @example
 * 	// add drop shadows to all nodes with class="hasShadow"
 * 	dojo.query(".hasShadow").forEach(function(n){
 * 		var foo = new dojox.fx.Shadow({ node: n });
 * 		foo.startup();
 * 	});
*/
dojox.fx.Shadow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes the shadow.<br>
 * </blockquote>
 * @memberOf dojox.fx.Shadow
*/
dojox.fx.Shadow.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the opacity of the underlay<br>
 *	 note: does not work in IE? FIXME.<br>
 * </blockquote>
 * @param {Float} n 
 * @param {Object} [animArgs] 
 * @memberOf dojox.fx.Shadow
*/
dojox.fx.Shadow.prototype.setOpacity=function(n, animArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 enable / disable the shadow<br>
 * </blockquote>
 * @param {Boolean} disabled 
 * @memberOf dojox.fx.Shadow
*/
dojox.fx.Shadow.prototype.setDisabled=function(disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resizes the shadow based on width and height.<br>
 * </blockquote>
 * @param {dojox.fx._arg.ShadowResizeArgs} args 
 * @memberOf dojox.fx.Shadow
*/
dojox.fx.Shadow.prototype.resize=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 append a shadow pieces to the node, and position it<br>
 * </blockquote>
 * @param {mixed} name 
 * @param {mixed} vertAttach 
 * @param {mixed} vertCoord 
 * @param {mixed} horzAttach 
 * @param {mixed} horzCoord 
 * @param {mixed} sizing 
 * @private
 * @memberOf dojox.fx.Shadow
*/
dojox.fx.Shadow.prototype._makePiece=function(name, vertAttach, vertCoord, horzAttach, horzCoord, sizing){};
/**
 * @namespace
*/
dojox.dojoxFx={};
/**
 * <b>Summary:</b><blockquote>
 *	 An add-on to dojo.fx that provides the ability to create<br>
 *	 a complex property animation based on an array of &amp;quot;keyframes&amp;quot;.<br>
 * </blockquote>
 * The Timeline is a replacement for the default dojo._Line.<br>
 * Instead of _Line.getValue returning a float between 0-1,<br>
 * _Timeline.getValue returns an object with all properties and<br>
 * their current values.<br>
 * A property does not have to appear in every keyframe.<br>
 * As in the example below, "height" is transitioned from the first<br>
 * keyframe to the third. "width" is transitioned from the first<br>
 * to the second to the third.<br>
 * Each keyframe can accept the following custom properties:<br>
 * step: String<br>
 * The start, finish or percentage that this keyframe represents.<br>
 * Allowed parameters are:<br>
 * 0%-100%<br>
 * from (same as 0%, used to conform with the Webkit animation spec)<br>
 * to (same as 100%, used to conform with the Webkit animation spec)<br>
 * ease: String<br>
 * The string name of a dojo.fx.easing ease. Defaults to "linear". Use<br>
 * the suffix name of the ease, like: "quadIn", not: "dojo.fx.quadIn".
 * @param {Object} options The paramters passed to the timeline animation. Includes:
 * keys: Array<br>
 * An array of objects, with style properties and values.<br>
 * duration:<br>
 * Duration of the animation in milliseconds.<br>
 * Defaults to 1000.
 * @param {DomNode|String} node DomNode The DomNode or id to be animated.
 * @returns {dojo.Animation} -
 * @example
 * 	var keys = [
 * 	{
 * 		step:"0px",
 * 		ease:"quadInOut",
 * 		width:"50px",
 * 		height:"50px",
 * 	},{
 * 		step:"25%",
 * 		width:"190px"
 * 	},{
 * 		step:"100%",
 * 		width:"10px",
 * 		height:"200px",
 * 	}
 * 	];
 * 	ani = dojox.fx.animateTimeline({keys:keys, duration:2000}, "myDiv").play();
*/
dojox.dojoxFx.animateTimeline=function(options, node){};
/**
 * @param {mixed} id 
 * @param {mixed} description 
 * @param {mixed} type 
 * @param {mixed} showOInfo 
 * @param {mixed} tabMenu 
 * @param {mixed} withDefaultValue 
*/
dojox.gantt.contextMenuTab=function(id, description, type, showOInfo, tabMenu, withDefaultValue){};
/**
 * @param {mixed} chart 
*/
dojox.gantt.TabMenu=function(chart){};
/**
 * @param {mixed} configuration 
*/
dojox.gantt.GanttTaskItem=function(configuration){};
/**
 * @param {mixed} taskInfo 
 * @param {mixed} project 
 * @param {mixed} chart 
*/
dojox.gantt.GanttTaskControl=function(taskInfo, project, chart){};
/**
 * @param {mixed} ganttchart 
*/
dojox.gantt.GanttResourceItem=function(ganttchart){};
/**
 * @param {mixed} configuration 
*/
dojox.gantt.GanttProjectItem=function(configuration){};
/**
 * @param {mixed} ganttChart 
 * @param {mixed} projectItem 
*/
dojox.gantt.GanttProjectControl=function(ganttChart, projectItem){};
/**
 * @param {mixed} configuration 
 * @param {mixed} node 
*/
dojox.gantt.GanttChart=function(configuration, node){};
/**
 * @class
 * @param {mixed} configuration 
 * @param {mixed} node 
 * @returns {dojox.gantt.GanttChart} new instance
*/
dojox.gantt.GanttChart=function(configuration, node){};
/**
 * @namespace
*/
dojox.gantt.GanttChart.panelNames={};
/**
 * @namespace
*/
dojox.gantt.GanttChart.contentData={};
/**
 * @param {mixed} dip 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.switchTeleMicroView=function(dip){};
/**
 * @param {mixed} project 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.sortTasksByStartTime=function(project){};
/**
 * @param {mixed} a 
 * @param {mixed} b 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.sortTaskStartTime=function(a, b){};
/**
 * @param {mixed} a 
 * @param {mixed} b 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.sortProjStartDate=function(a, b){};
/**
 * @param {mixed} parenttask 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.sortChildTasks=function(parenttask){};
/**
 * @param {mixed} parentTask 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.setStartTimeChild=function(parentTask){};
/**
 * @param {mixed} parentTask 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.setPreviousTaskInTree=function(parentTask){};
/**
 * @param {mixed} project 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.setPreviousTask=function(project){};
/**
 * @param {mixed} fileName 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.saveJSONData=function(fileName){};
/**
 * @param {mixed} row 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.removeCell=function(row){};
/**
 * @param {mixed} pixelsPerDay 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.refreshParams=function(pixelsPerDay){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.refreshController=function(){};
/**
 * @param {mixed} count 
 * @param {mixed} current 
 * @param {mixed} multi 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.refresh=function(count, current, multi){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.postLoadData=function(){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.postBindEvents=function(){};
/**
 * @param {mixed} parentTask 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.openTree=function(parentTask){};
/**
 * @param {mixed} parentTask 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.openNode=function(parentTask){};
/**
 * @param {mixed} content 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.loadJSONString=function(content){};
/**
 * @param {mixed} filename 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.loadJSONData=function(filename){};
/**
 * @param {mixed} id 
 * @param {mixed} name 
 * @param {mixed} startDate 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.insertProject=function(id, name, startDate){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.init=function(){};
/**
 * @param {mixed} height 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.incHeightPanelTasks=function(height){};
/**
 * @param {mixed} height 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.incHeightPanelNames=function(height){};
/**
 * @param {mixed} duration 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.getWidthOnDuration=function(duration){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.getStartDate=function(){};
/**
 * @param {mixed} id 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.getProjectItemById=function(id){};
/**
 * @param {mixed} id 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.getProject=function(id){};
/**
 * @param {mixed} startTime 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.getPosOnDate=function(startTime){};
/**
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.getLastCloseParent=function(task){};
/**
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.getLastChildTask=function(task){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.getJSONData=function(){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.getCountDays=function(){};
/**
 * @param {mixed} childTasks 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.getChildTasksData=function(childTasks){};
/**
 * @param {mixed} id 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.deleteProject=function(id){};
/**
 * @param {mixed} project 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.createTasks=function(project){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.createPanelTime=function(){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.createPanelTasks=function(){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.createPanelNamesTasksHeader=function(){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.createPanelNamesTasks=function(){};
/**
 * @param {mixed} arrChildTasks 
 * @param {mixed} project 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.createChildItemControls=function(arrChildTasks, project){};
/**
 * @param {mixed} predTask 
 * @param {mixed} ctask 
 * @param {mixed} ctaskObj 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.correctPosPreviousTask=function(predTask, ctask, ctaskObj){};
/**
 * @param {mixed} parentTask 
 * @param {mixed} ctask 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.correctPosParentTask=function(parentTask, ctask){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.clearItems=function(){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.clearEvents=function(){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.clearData=function(){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.clearAll=function(){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.checkPosition=function(){};
/**
 * @param {mixed} predTask 
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.checkPosPreviousTask=function(predTask, task){};
/**
 * @param {mixed} parentTask 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.checkPosParentTaskInTree=function(parentTask){};
/**
 * @param {mixed} parentTask 
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.checkPosParentTask=function(parentTask, task){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.checkHeighPanelTasks=function(){};
/**
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.buildUIContent=function(){};
/**
 * @param {mixed} parentTask 
 * @param {mixed} childTaskItems 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.buildChildTasksData=function(parentTask, childTaskItems){};
/**
 * @param {mixed} width 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.adjustPanelTime=function(width){};
/**
 * @param {mixed} row 
 * @param {mixed} count 
 * @param {mixed} year 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.addYearInPanelTime=function(row, count, year){};
/**
 * @param {mixed} row 
 * @param {mixed} count 
 * @param {mixed} week 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.addWeekInPanelTime=function(row, count, week){};
/**
 * @param {mixed} projectItem 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.addProject=function(projectItem){};
/**
 * @param {mixed} row 
 * @param {mixed} count 
 * @param {mixed} month 
 * @param {mixed} year 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.addMonthInPanelTime=function(row, count, month, year){};
/**
 * @param {mixed} row 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.addHourInPanelTime=function(row){};
/**
 * @param {mixed} row 
 * @memberOf dojox.gantt.GanttChart
*/
dojox.gantt.GanttChart.prototype.addDayInPanelTime=function(row){};
/**
 * @namespace
*/
dojox.gantt.GanttChart.panelTime.firstChild.firstChild={};
/**
 * @memberOf dojox.gantt.GanttChart.contentData
*/
dojox.gantt.GanttChart.contentData.prototype.onscroll=function(){};
/**
 * @namespace
*/
dojox.gantt.GanttChart.panelTime.firstChild={};
/**
 * @class
 * @param {mixed} ganttChart 
 * @param {mixed} projectItem 
 * @returns {dojox.gantt.GanttProjectControl} new instance
*/
dojox.gantt.GanttProjectControl=function(ganttChart, projectItem){};
/**
 * @namespace
*/
dojox.gantt.GanttProjectControl.projectNameItem={};
/**
 * @namespace
*/
dojox.gantt.GanttProjectControl.projectItem={};
/**
 * @namespace
*/
dojox.gantt.GanttProjectControl.descrProject={};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.showDescrProject=function(){};
/**
 * @param {mixed} task 
 * @param {mixed} height 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.shiftTask=function(task, height){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.shiftProjectItem=function(){};
/**
 * @param {mixed} height 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.shiftProject=function(height){};
/**
 * @param {mixed} project 
 * @param {mixed} height 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.shiftNextProject=function(project, height){};
/**
 * @param {mixed} task 
 * @param {mixed} height 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.shiftNextParentTask=function(task, height){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.shiftDescrProject=function(){};
/**
 * @param {mixed} task 
 * @param {mixed} height 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.shiftChildTasks=function(task, height){};
/**
 * @param {mixed} percentage 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.setPercentCompleted=function(percentage){};
/**
 * @param {mixed} name 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.setName=function(name){};
/**
 * @param {mixed} task 
 * @param {mixed} id 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.searchTaskInTree=function(task, id){};
/**
 * @param {mixed} width 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.resizeProjectItem=function(width){};
/**
 * @param {mixed} projectItem 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.refreshProjectItem=function(projectItem){};
/**
 * @param {mixed} divDesc 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.refreshDescrProject=function(divDesc){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.refresh=function(){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.postLoadData=function(){};
/**
 * @param {mixed} id 
 * @param {mixed} name 
 * @param {mixed} startTime 
 * @param {mixed} duration 
 * @param {mixed} percentage 
 * @param {mixed} previousTaskId 
 * @param {mixed} taskOwner 
 * @param {mixed} parentTaskId 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.insertTask=function(id, name, startTime, duration, percentage, previousTaskId, taskOwner, parentTaskId){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.hideDescrProject=function(){};
/**
 * @param {mixed} id 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.getTaskById=function(id){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.getPercentCompleted=function(){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.getDuration=function(){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.getDescStr=function(){};
/**
 * @param {mixed} id 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.deleteTask=function(id){};
/**
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.deleteChildTask=function(task){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.createProjectNameItem=function(){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.createProjectItem=function(){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.createDescrProject=function(){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.create=function(){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.checkWidthProjectNameItem=function(){};
/**
 * @memberOf dojox.gantt.GanttProjectControl
*/
dojox.gantt.GanttProjectControl.prototype.adjustPanelTime=function(){};


/**
 * @namespace
*/
dojox.gantt.GanttProjectControl.ganttChart={};
/**
 * @class
 * @param {mixed} configuration 
 * @returns {dojox.gantt.GanttProjectItem} new instance
*/
dojox.gantt.GanttProjectItem=function(configuration){};
/**
 * @param {mixed} parentTask 
 * @param {mixed} id 
 * @memberOf dojox.gantt.GanttProjectItem
*/
dojox.gantt.GanttProjectItem.prototype.getTaskByIdInTree=function(parentTask, id){};
/**
 * @param {mixed} id 
 * @memberOf dojox.gantt.GanttProjectItem
*/
dojox.gantt.GanttProjectItem.prototype.getTaskById=function(id){};
/**
 * @param {mixed} id 
 * @memberOf dojox.gantt.GanttProjectItem
*/
dojox.gantt.GanttProjectItem.prototype.deleteTask=function(id){};
/**
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttProjectItem
*/
dojox.gantt.GanttProjectItem.prototype.addTask=function(task){};
/**
 * @class
 * @param {mixed} ganttchart 
 * @returns {dojox.gantt.GanttResourceItem} new instance
*/
dojox.gantt.GanttResourceItem=function(ganttchart){};
/**
 * @namespace
*/
dojox.gantt.GanttResourceItem.contentData={};
/**
 * @param {mixed} tItem 
 * @param {mixed} owner 
 * @param {mixed} displayType 
 * @param {mixed} topOffset 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.styleOwnerItem=function(tItem, owner, displayType, topOffset){};
/**
 * @param {mixed} item 
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.refreshTaskItem=function(item, task){};
/**
 * @param {mixed} owner 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.refreshOwnerItem=function(owner){};
/**
 * @param {mixed} owner 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.refreshOwnerEntry=function(owner){};
/**
 * @param {mixed} owner 
 * @param {mixed} item 
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.refreshDetailedTaskEntry=function(owner, item, task){};
/**
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.refresh=function(){};
/**
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.reConstruct=function(){};
/**
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.postAdjustment=function(){};
/**
 * @param {mixed} ownerNameItem 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.createTreeImg=function(ownerNameItem){};
/**
 * @param {mixed} owner 
 * @param {mixed} posY 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.createTaskNameItem=function(owner, posY){};
/**
 * @param {mixed} task 
 * @param {mixed} posY 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.createTaskItem=function(task, posY){};
/**
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.createPanelOwners=function(){};
/**
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.createPanelNamesOwners=function(){};
/**
 * @param {mixed} owner 
 * @param {mixed} posY 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.createOwnerNameItem=function(owner, posY){};
/**
 * @param {mixed} owner 
 * @param {mixed} posY 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.createOwnerItem=function(owner, posY){};
/**
 * @param {mixed} owner 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.createOwnerEntry=function(owner){};
/**
 * @param {mixed} owner 
 * @param {mixed} parentNode 
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.createDetailedTaskEntry=function(owner, parentNode, task){};
/**
 * @param {mixed} parentNode 
 * @param {mixed} currentNode 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.createConnectingLinesPN=function(parentNode, currentNode){};
/**
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.create=function(){};
/**
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.clearItems=function(){};
/**
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.clearData=function(){};
/**
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.clearAll=function(){};
/**
 * @param {mixed} taskNameItem 
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.checkWidthTaskNameItem=function(taskNameItem){};
/**
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.buildResource=function(){};
/**
 * @memberOf dojox.gantt.GanttResourceItem
*/
dojox.gantt.GanttResourceItem.prototype.buildOwnerTimeConsume=function(){};
/**
 * @memberOf dojox.gantt.GanttResourceItem.contentData
*/
dojox.gantt.GanttResourceItem.contentData.prototype.onscroll=function(){};
/**
 * @class
 * @param {mixed} taskInfo 
 * @param {mixed} project 
 * @param {mixed} chart 
 * @returns {dojox.gantt.GanttTaskControl} new instance
*/
dojox.gantt.GanttTaskControl=function(taskInfo, project, chart){};
/**
 * @namespace
*/
dojox.gantt.GanttTaskControl.previousParentTask={};
/**
 * @namespace
*/
dojox.gantt.GanttTaskControl.previousChildTask={};
/**
 * @namespace
*/
dojox.gantt.GanttTaskControl.predTask={};
/**
 * @namespace
*/
dojox.gantt.GanttTaskControl.descrTask={};
/**
 * @namespace
*/
dojox.gantt.GanttTaskControl.cTaskNameItem={};
/**
 * @namespace
*/
dojox.gantt.GanttTaskControl.cTaskItem={};
/**
 * @param {mixed} event 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.startResize=function(event){};
/**
 * @param {mixed} event 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.startMove=function(event){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.showDescTask=function(){};
/**
 * @param {mixed} task 
 * @param {mixed} isOpen 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.showChildTasks=function(task, isOpen){};
/**
 * @param {mixed} task 
 * @param {mixed} height 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.shiftTask=function(task, height){};
/**
 * @param {mixed} task 
 * @param {mixed} height 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.shiftNextTask=function(task, height){};
/**
 * @param {mixed} task 
 * @param {mixed} height 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.shiftCurrentTasks=function(task, height){};
/**
 * @param {mixed} task 
 * @param {mixed} height 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.shiftChildTask=function(task, height){};
/**
 * @param {mixed} owner 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.setTaskOwner=function(owner){};
/**
 * @param {mixed} startTime 
 * @param {mixed} shiftChild 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.setStartTime=function(startTime, shiftChild){};
/**
 * @param {mixed} previousTaskId 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.setPreviousTask=function(previousTaskId){};
/**
 * @param {mixed} percentage 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.setPercentCompleted=function(percentage){};
/**
 * @param {mixed} name 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.setName=function(name){};
/**
 * @param {mixed} duration 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.setDuration=function(duration){};
/**
 * @param {mixed} width 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.resizeTaskItem=function(width){};
/**
 * @param {mixed} event 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.resizeItem=function(event){};
/**
 * @param {mixed} itemControl 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.refreshTaskItem=function(itemControl){};
/**
 * @param {mixed} divDesc 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.refreshTaskDesc=function(divDesc){};
/**
 * @param {mixed} arrLines 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.refreshConnectingLinesDS=function(arrLines){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.refresh=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.postLoadData=function(){};
/**
 * @param {mixed} obj 
 * @param {mixed} delm 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.objKeyToStr=function(obj, delm){};
/**
 * @param {mixed} posX 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.moveTaskItem=function(posX){};
/**
 * @param {mixed} event 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.moveItem=function(event){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.moveDescTask=function(){};
/**
 * @param {mixed} width 
 * @param {mixed} moveChild 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.moveCurrentTaskItem=function(width, moveChild){};
/**
 * @param {mixed} task 
 * @param {mixed} width 
 * @param {mixed} moveChild 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.moveChildTaskItems=function(task, width, moveChild){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.hideDescTask=function(){};
/**
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.hideChildTasks=function(task){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.getTaskOwner=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.getResizeInfo=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.getMoveInfo=function(){};
/**
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.getMaxPosPredChildTaskItemInTree=function(task){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.getMaxPosPredChildTaskItem=function(){};
/**
 * @param {mixed} position 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.getDateOnPosition=function(position){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.endResizeItem=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.endMove=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.createTreeImg=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.createTaskNameItem=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.createTaskItem=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.createTaskDescItem=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.createConnectingLinesPN=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.createConnectingLinesDS=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.create=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.clearPredTask=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.checkWidthTaskNameItem=function(){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.checkPosition=function(){};
/**
 * @param {mixed} startTime 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.checkPos=function(startTime){};
/**
 * @param {mixed} resourceInfo 
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.buildResourceInfo=function(resourceInfo){};
/**
 * @memberOf dojox.gantt.GanttTaskControl
*/
dojox.gantt.GanttTaskControl.prototype.adjustPanelTime=function(){};



/**
 * @class
 * @param {mixed} configuration 
 * @returns {dojox.gantt.GanttTaskItem} new instance
*/
dojox.gantt.GanttTaskItem=function(configuration){};
/**
 * @param {mixed} project 
 * @memberOf dojox.gantt.GanttTaskItem
*/
dojox.gantt.GanttTaskItem.prototype.setProject=function(project){};
/**
 * @param {mixed} task 
 * @memberOf dojox.gantt.GanttTaskItem
*/
dojox.gantt.GanttTaskItem.prototype.addChildTask=function(task){};
/**
 * @class
 * @param {mixed} chart 
 * @returns {dojox.gantt.TabMenu} new instance
*/
dojox.gantt.TabMenu=function(chart){};
/**
 * @namespace
*/
dojox.gantt.TabMenu.tabPanelDlg={};
/**
 * @namespace
*/
dojox.gantt.TabMenu.paneContentArea={};
/**
 * @namespace
*/
dojox.gantt.TabMenu.menuPanel={};
/**
 * @param {mixed} elem 
 * @param {mixed} object 
 * @memberOf dojox.gantt.TabMenu
*/
dojox.gantt.TabMenu.prototype.show=function(elem, object){};
/**
 * @memberOf dojox.gantt.TabMenu
*/
dojox.gantt.TabMenu.prototype.hide=function(){};
/**
 * @memberOf dojox.gantt.TabMenu
*/
dojox.gantt.TabMenu.prototype.createTabPanel=function(){};
/**
 * @param {mixed} id 
 * @param {mixed} desc 
 * @param {mixed} type 
 * @param {mixed} showOInfo 
 * @param {mixed} menu 
 * @param {mixed} withDefaultValue 
 * @memberOf dojox.gantt.TabMenu
*/
dojox.gantt.TabMenu.prototype.createTab=function(id, desc, type, showOInfo, menu, withDefaultValue){};
/**
 * @memberOf dojox.gantt.TabMenu
*/
dojox.gantt.TabMenu.prototype.createMenuPanel=function(){};
/**
 * @memberOf dojox.gantt.TabMenu
*/
dojox.gantt.TabMenu.prototype.clear=function(){};
/**
 * @memberOf dojox.gantt.TabMenu
*/
dojox.gantt.TabMenu.prototype.buildContent=function(){};
/**
 * @param {mixed} tab 
 * @memberOf dojox.gantt.TabMenu
*/
dojox.gantt.TabMenu.prototype.addItemMenuPanel=function(tab){};

/**
 * @class
 * @param {mixed} id 
 * @param {mixed} description 
 * @param {mixed} type 
 * @param {mixed} showOInfo 
 * @param {mixed} tabMenu 
 * @param {mixed} withDefaultValue 
 * @returns {dojox.gantt.contextMenuTab} new instance
*/
dojox.gantt.contextMenuTab=function(id, description, type, showOInfo, tabMenu, withDefaultValue){};
/**
 * @namespace
*/
dojox.gantt.contextMenuTab.object={};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.show=function(){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.renameTaskAction=function(){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.renameProjectAction=function(){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.ptUpdateAction=function(){};
/**
 * @param {mixed} items 
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.preValueValidation=function(items){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.ownerUpdateAction=function(){};
/**
 * @param {mixed} content 
 * @param {mixed} name 
 * @param {mixed} value 
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.insertData=function(content, name, value){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.hide=function(){};
/**
 * @param {mixed} date 
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.encodeDate=function(date){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.durationUpdateAction=function(){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.deleteProjectAction=function(){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.deleteAction=function(){};
/**
 * @param {mixed} dateStr 
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.decodeDate=function(dateStr){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.cpUpdateAction=function(){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.cpProjectAction=function(){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.addTaskAction=function(){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.addSuccessorTaskAction=function(){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.addProjectAction=function(){};
/**
 * @param {mixed} id 
 * @param {mixed} name 
 * @param {mixed} key 
 * @param {mixed} required 
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.addItem=function(id, name, key, required){};
/**
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.addChildTaskAction=function(){};
/**
 * @param {mixed} handler 
 * @memberOf dojox.gantt.contextMenuTab
*/
dojox.gantt.contextMenuTab.prototype.addAction=function(handler){};

/**
 * @namespace
*/
dojox.gantt.contextMenuTab.tabMenu={};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator to be used in a gauge<br>
 * </blockquote>
 * An indicator widget, which has given properties.  drawn by a gauge.
 * @private
 * @example
 * 	&lt;script type="text/javascript"&gt;
 * 		require(["dojox/gauges/AnalogGauge","dojox/gauges/Indicator"]);
 * 	&lt;/script&gt;
 * 	...
 * 	&lt;div	dojoType="dojox.gauges.AnalogGauge"
 * 			id="testGauge"
 * 			width="300"
 * 			height="200"
 * 			cx=150
 * 			cy=175
 * 			radius=125
 * 			image="gaugeOverlay.png"
 * 			imageOverlay="false"
 * 			imageWidth="280"
 * 			imageHeight="155"
 * 			imageX="12"
 * 			imageY="38"&gt;
 * 		&lt;div 	dojoType="dojox.gauges.Indicator"
 * 				value=17
 * 				type="arrow"
 * 				length=135
 * 				width=3
 * 				hover="Value: 17"
 * 				onDragMove="handleDragMove"&gt;
 * 		&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges._Indicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The abstract base class for gauges.<br>
 * </blockquote>
 * using dojo.gfx (and thus either SVG or VML based on what is supported), this widget<br>
 * builds a gauge component, used to display numerical data in a familiar format.<br>
 * This widget is not to be used alone. it is meant to be subclassed, such as<br>
 * dojox.gauges.BarGauge or dojox.gauges.AnalogGauge
 * @private
*/
dojox.gauges._Gauge=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A gauge indicator the simply draws its value as text.<br>
 * </blockquote>
*/
dojox.gauges.TextIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a range to be used in a _Gauge<br>
 * </blockquote>
 * a range widget, which has given properties.  drawn by a _Gauge.
 * @example
 * 	&lt;script type="text/javascript"&gt;
 * 		require(["dojox/gauges/AnalogGauge"]);
 * 	&lt;/script&gt;
 * 	...
 * 	&lt;div	dojoType="dojox.gauges.AnalogGauge"
 * 			id="testGauge"
 * 			width="300"
 * 			height="200"
 * 			cx=150
 * 			cy=175
 * 			radius=125
 * 			image="gaugeOverlay.png"
 * 			imageOverlay="false"
 * 			imageWidth="280"
 * 			imageHeight="155"
 * 			imageX="12"
 * 			imageY="38"&gt;
 * 		&lt;div	dojoType="dojox.gauges.Range"
 * 				low=5
 * 				high=10
 * 				hover="5 - 10"
 * 		&gt;&lt;/div&gt;
 * 		&lt;div	dojoType="dojox.gauges.Range"
 * 				low=10
 * 				high=20
 * 				hover="10 - 20"
 * 		&gt;&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges.Range=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents a semi circular gauge with a glossy appearance.<br>
 * </blockquote>
 * @example
 * 	&lt;div	dojoType="dojox.gauges.GlossySemiCircularGauge"
 * 		id="testGauge"
 * 		width="300"
 * 		height="300"
 * 		min="0"
 * 		max="100"
 * 		value="0"
 * 		majorTicksInterval="10"
 * 		majorTicksColor="#c4c4c4"
 * 		minorTicksInterval="5"
 * 		minorTicksColor="#c4c4c4"
 * 		color="black"
 * 		needleColor="#c4c4c4"
 * 		font="normal normal normal 10pt sans-serif"
 * 		textIndicatorFont="normal normal normal 20pt sans-serif"
 * 		textIndicatorVisible="true"
 * 		textIndicatorColor="#c4c4c4"
 * 		majorTicksLabelPlacement="inside"|"outside"
 * 		noChange="true"
 * 		title="title"
 * 		scalePrecision="0"
 * 		textIndicatorPrecision="0"
 * 	&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges.GlossySemiCircularGauge=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The marker for the dojox.gauges.GlossyHorizontalGauge.<br>
 * </blockquote>
 * This object defines the marker for the dojox.gauges.GlossyHorizontalGauge.<br>
 * Since the needle is created by the gauges class, you do not have to use this class directly.<br>
*/
dojox.gauges.GlossyHorizontalGaugeMarker=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents an horizontal bar gauge with a glossy appearance.<br>
 * </blockquote>
 * @example
 * 	&lt;div dojoType="dojox.gauges.GlossyHorizontalGauge"
 * 		id="testGauge"
 * 		width="500"
 * 		height="100"
 * 		min="0"
 * 		max="100"
 * 		value="0"
 * 		majorTicksInterval="10"
 * 		majorTicksColor="#c4c4c4"
 * 		minorTicksInterval="5"
 * 		minorTicksColor="#c4c4c4"
 * 		color="black"
 * 		markerColor="#c4c4c4"
 * 		font="normal normal normal 10pt sans-serif"
 * 		noChange="true"
 * 		title="title"
 * 		scalePrecision="0"
 * 	&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges.GlossyHorizontalGauge=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The needle for the dojox.gauges.GlossyCircularGauge and<br>
 *	 dojox.gauges.GlossySemiCircularGauge.<br>
 * </blockquote>
 * This object defines the needle for the dojox.gauges.GlossyCircularGauge and<br>
 * dojox.gauges.GlossySemiCircularGauge.<br>
 * Since the needle is created by the gauges class, you do not have to use this class directly.<br>
*/
dojox.gauges.GlossyCircularGaugeNeedle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base class for GlossyCircularGauge and GlossySemiCircularGauge.<br>
 * </blockquote>
*/
dojox.gauges.GlossyCircularGaugeBase=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents a circular gauge with a glossy appearance.<br>
 * </blockquote>
 * @example
 * 	&lt;div	dojoType="dojox.gauges.GlossyCircularGauge"
 * 		id="testGauge"
 * 		width="300"
 * 		height="300"
 * 		min="0"
 * 		max="100"
 * 		value="0"
 * 		majorTicksInterval="10"
 * 		majorTicksColor="#c4c4c4"
 * 		minorTicksInterval="5"
 * 		minorTicksColor="#c4c4c4"
 * 		color="black"
 * 		needleColor="#c4c4c4"
 * 		font="normal normal normal 10pt sans-serif"
 * 		textIndicatorFont="normal normal normal 20pt sans-serif"
 * 		textIndicatorVisible="true"
 * 		textIndicatorColor="#c4c4c4"
 * 		majorTicksLabelPlacement="inside"|"outside"
 * 		noChange="true"
 * 		title="title"
 * 		scalePrecision="0"
 * 		textIndicatorPrecision="0"&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges.GlossyCircularGauge=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the BarGauge that draws a segment a line corresponding to the indicator value.<br>
 * </blockquote>
*/
dojox.gauges.BarLineIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the BarGauge that draws a bar corresponding to the indicator value.<br>
 * </blockquote>
*/
dojox.gauges.BarIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a bar graph built using the dojox.gfx package.<br>
 * </blockquote>
 * using dojo.gfx (and thus either SVG or VML based on what is supported), this widget<br>
 * builds a bar graph component, used to display numerical data in a familiar format.<br>
 * <br>
 * usage:<br>
 * &lt;script type="text/javascript"&gt;<br>
 * require(["dojox/gauges/BarGauge"]);<br>
 * &lt;/script&gt;<br>
 * ...<br>
 * &lt;div 	dojoType="dojox.gauges.BarGauge"<br>
 * id="testBarGauge"<br>
 * barGaugeHeight="55"<br>
 * dataY="25"<br>
 * dataHeight="25"<br>
 * dataWidth="225"&gt;<br>
 * &lt;/div&gt;<br>
*/
dojox.gauges.BarGauge=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the BarGauge that draws a circle at a position that corresponds to the<br>
 *	 indicator value. This indicator is mainly used to draw round ticks for the scale.<br>
 * </blockquote>
*/
dojox.gauges.BarCircleIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the AnalogGauge that draws a needle. The needle is drawn on the angle that corresponds<br>
 *	 to the value of the indicator.<br>
 * </blockquote>
*/
dojox.gauges.AnalogNeedleIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the AnalogGauge that draws a segment of line that has for length the length of the indicator<br>
 *	 and that starts at an offset from the center of the gauge. The line is drawn on the angle that corresponds<br>
 *	 to the value of the indicator.<br>
 * </blockquote>
*/
dojox.gauges.AnalogLineIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An abstract base class for indicators that can be used in an AnalogGauge.<br>
 * </blockquote>
*/
dojox.gauges.AnalogIndicatorBase=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a gauge built using the dojox.gfx package.<br>
 * </blockquote>
 * using dojo.gfx (and thus either SVG or VML based on what is supported), this widget<br>
 * builds a gauge component, used to display numerical data in a familiar format
 * @example
 * 	&lt;script type="text/javascript"&gt;
 * 		require(["dojox/gauges/AnalogGauge"]);
 * 	&lt;/script&gt;
 * 
 * 	&lt;div	dojoType="dojox.gauges.AnalogGauge"
 * 			id="testGauge"
 * 			width="300"
 * 			height="200"
 * 			cx=150
 * 			cy=175
 * 			radius=125
 * 			image="gaugeOverlay.png"
 * 			imageOverlay="false"
 * 			imageWidth="280"
 * 			imageHeight="155"
 * 			imageX="12"
 * 			imageY="38"&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges.AnalogGauge=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the AnalogGauge that draws a circle. The center of the circle is positioned<br>
 *	 on the circular gauge according to the value of the indicator. The circle has for radius the<br>
 *	 length of the indicator. This indicator is mainly used to draw round ticks for the scale.<br>
 * </blockquote>
*/
dojox.gauges.AnalogCircleIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the AnalogGauge that draws an arrow. The arrow is drawn on the angle that corresponds<br>
 *	 to the value of the indicator.<br>
 * </blockquote>
*/
dojox.gauges.AnalogArrowIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the AnalogGauge that draws a segment of arc.<br>
 *	 The segment of arc starts at the start angle of the gauge and ends at the<br>
 *	 angle that corresponds to the value of the indicator.<br>
 * </blockquote>
*/
dojox.gauges.AnalogArcIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the AnalogGauge that draws a segment of arc.<br>
 *	 The segment of arc starts at the start angle of the gauge and ends at the<br>
 *	 angle that corresponds to the value of the indicator.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges.AnalogIndicatorBase
 * @returns {dojox.gauges.AnalogArcIndicator} new instance
*/
dojox.gauges.AnalogArcIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override of dojox.gauges._Indicator.draw<br>
 * </blockquote>
 * @param {mixed} group 
 * @param {Boolean} [dontAnimate] 
 * @memberOf dojox.gauges.AnalogArcIndicator
*/
dojox.gauges.AnalogArcIndicator.prototype.draw=function(group, dontAnimate){};
/**
 * @param {mixed} val 
 * @private
 * @memberOf dojox.gauges.AnalogArcIndicator
*/
dojox.gauges.AnalogArcIndicator.prototype._createArc=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 An abstract base class for indicators that can be used in an AnalogGauge.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges._indicator
 * @returns {dojox.gauges.AnalogIndicatorBase} new instance
*/
dojox.gauges.AnalogIndicatorBase=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override of dojox.gauges._Indicator.draw<br>
 * </blockquote>
 * @param {dojox.gfx.Group} group The GFX group when the indicator must be drawn
 * @param {Boolean} [dontAnimate] Indicates if the drawing should not be animated (vs. the default of doing an animation)
 * @memberOf dojox.gauges.AnalogIndicatorBase
*/
dojox.gauges.AnalogIndicatorBase.prototype.draw=function(group, dontAnimate){};
/**
 * @param {Boolean} [dontAnimate] Indicates if the drawing should not be animated (vs. the default of doing an animation)
 * @private
 * @memberOf dojox.gauges.AnalogIndicatorBase
*/
dojox.gauges.AnalogIndicatorBase.prototype._move=function(dontAnimate){};
/**
 * <b>Summary:</b><blockquote>
 *	 Places the label on the side of the tick.<br>
 * </blockquote>
 * @param {mixed} group 
 * @param {mixed} txt 
 * @param {mixed} ox 
 * @param {mixed} oy 
 * @param {mixed} lrad 
 * @param {mixed} angle 
 * @param {mixed} labelPlacement 
 * @private
 * @memberOf dojox.gauges.AnalogIndicatorBase
*/
dojox.gauges.AnalogIndicatorBase.prototype._layoutLabel=function(group, txt, ox, oy, lrad, angle, labelPlacement){};
/**
 * @param {mixed} x1 
 * @param {mixed} y1 
 * @param {mixed} x2 
 * @param {mixed} y2 
 * @private
 * @memberOf dojox.gauges.AnalogIndicatorBase
*/
dojox.gauges.AnalogIndicatorBase.prototype._distance=function(x1, y1, x2, y2){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the AnalogGauge that draws an arrow. The arrow is drawn on the angle that corresponds<br>
 *	 to the value of the indicator.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges.AnalogIndicatorBase
 * @returns {dojox.gauges.AnalogArrowIndicator} new instance
*/
dojox.gauges.AnalogArrowIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override of dojox.gauges.AnalogLineIndicator._getShapes<br>
 * </blockquote>
 * @param {mixed} group 
 * @private
 * @memberOf dojox.gauges.AnalogArrowIndicator
*/
dojox.gauges.AnalogArrowIndicator.prototype._getShapes=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the AnalogGauge that draws a circle. The center of the circle is positioned<br>
 *	 on the circular gauge according to the value of the indicator. The circle has for radius the<br>
 *	 length of the indicator. This indicator is mainly used to draw round ticks for the scale.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges.AnalogIndicatorBase
 * @returns {dojox.gauges.AnalogCircleIndicator} new instance
*/
dojox.gauges.AnalogCircleIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override of dojox.gauges.AnalogLineIndicator._getShapes<br>
 * </blockquote>
 * @param {mixed} group 
 * @private
 * @memberOf dojox.gauges.AnalogCircleIndicator
*/
dojox.gauges.AnalogCircleIndicator.prototype._getShapes=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 a gauge built using the dojox.gfx package.<br>
 * </blockquote>
 * using dojo.gfx (and thus either SVG or VML based on what is supported), this widget<br>
 * builds a gauge component, used to display numerical data in a familiar format
 * @class
 * @extends dojox.gauges._Gauge
 * @returns {dojox.gauges.AnalogGauge} new instance
 * @example
 * 	&lt;script type="text/javascript"&gt;
 * 		require(["dojox/gauges/AnalogGauge"]);
 * 	&lt;/script&gt;
 * 
 * 	&lt;div	dojoType="dojox.gauges.AnalogGauge"
 * 			id="testGauge"
 * 			width="300"
 * 			height="200"
 * 			cx=150
 * 			cy=175
 * 			radius=125
 * 			image="gaugeOverlay.png"
 * 			imageOverlay="false"
 * 			imageWidth="280"
 * 			imageHeight="155"
 * 			imageX="12"
 * 			imageY="38"&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges.AnalogGauge=function(){};
/**
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines which range the mouse is currently over<br>
 * </blockquote>
 * @param {Object} e The event object as received by the mouse handling functions below.
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype.getRangeUnderMouse=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is used to draw (or redraw) a range<br>
 * </blockquote>
 * Draws a range (colored area on the background of the gauge)<br>
 * based on the given arguments.
 * @param {dojox.gfx.Group} group The GFX group where the range must be drawn.
 * @param {Object} range A range is a dojox.gauges.Range or an object
 * with similar parameters (low, high, hover, etc.).
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype.drawRange=function(group, range){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the angle between 0 and 360;<br>
 * </blockquote>
 * @param {mixed} v 
 * @private
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype._mod360=function(v){};
/**
 * <b>Summary:</b><blockquote>
 *	 internal method to check if the scale is fully circular<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype._isScaleCircular=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a helper function used to determine the value represented by a<br>
 *	 given angle on the gauge<br>
 * </blockquote>
 * @param {Number} angle A angle to be converted to a value for this gauge.
 * @private
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype._getValueForAngle=function(angle){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a helper function than converts degrees to radians<br>
 * </blockquote>
 * @param {Number} angle An angle, in degrees, to be converted to radians.
 * @private
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype._getRadians=function(angle){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a helper function that converts radians to degrees<br>
 * </blockquote>
 * @param {Number} radians An angle, in radians, to be converted to degrees.
 * @private
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype._getDegrees=function(radians){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a helper function that returns the angle range<br>
 *	 from startAngle to endAngle according to orientation.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype._getAngleRange=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a helper function used to determine the angle that represents<br>
 *	 a given value on the gauge<br>
 * </blockquote>
 * @param {Number} value A value to be converted to an angle for this gauge.
 * @private
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype._getAngle=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles the dragging of an indicator to a specific position, including moving/re-drawing<br>
 *	 get angle for mouse position<br>
 * </blockquote>
 * @param {Object} widget 
 * @param {mixed} x 
 * @param {mixed} y 
 * @private
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype._dragIndicatorAt=function(widget, x, y){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles the dragging of an indicator to the event position, including moving/re-drawing<br>
 *	 get angle for mouse position<br>
 * </blockquote>
 * @param {Object} widget 
 * @param {Object} e 
 * @private
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype._dragIndicator=function(widget, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Test if the angle value is in the startAngle/endAngle range<br>
 * </blockquote>
 * @param {mixed} value 
 * @private
 * @memberOf dojox.gauges.AnalogGauge
*/
dojox.gauges.AnalogGauge.prototype._angleInRange=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 The abstract base class for gauges.<br>
 * </blockquote>
 * using dojo.gfx (and thus either SVG or VML based on what is supported), this widget<br>
 * builds a gauge component, used to display numerical data in a familiar format.<br>
 * This widget is not to be used alone. it is meant to be subclassed, such as<br>
 * dojox.gauges.BarGauge or dojox.gauges.AnalogGauge
 * @class
 * @extends dijit._Widget
 * @private
 * @returns {dojox.gauges._Gauge} new instance
*/
dojox.gauges._Gauge=function(){};
/**
 * @namespace
 * @private
*/
dojox.gauges._Gauge._backgroundDefault={};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the tooltip for the gauge to display the given text.<br>
 * </blockquote>
 * @param {String} txt The text to put in the tooltip.
 * @param {Event} e 
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.updateTooltip=function(txt, e){};
/**
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates and draws the minor tick marks based on the passed object (expecting the same format<br>
 *	 as the minorTicks object documented above)<br>
 * </blockquote>
 * @param {Object} ticks 
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.setMinorTicks=function(ticks){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates and draws the major tick marks based on the passed object (expecting the same format<br>
 *	 as the majorTicks object documented above)<br>
 * </blockquote>
 * @param {Object} ticks 
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.setMajorTicks=function(ticks){};
/**
 * <b>Summary:</b><blockquote>
 *	 This method is used to set the background of the gauge after it is created.<br>
 * </blockquote>
 * Sets the background using the given object.  Must be the same 'type' of object<br>
 * as the original background argument.
 * @param {Object} background An object in one of the two forms:
 * {'color': 'color-name'}<br>
 * OR<br>
 * (for a gradient:)<br>
 * {'type': 'linear', 'colors': [{offset: 0, color:'#C0C0C0'}, {offset: 1, color: '#E0E0E0'}] }<br>
 * If background is null or undefined, this will set the fill to this._backgroundDefault
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.setBackground=function(background){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes a text element from the gauge.<br>
 * </blockquote>
 * @param {String} t The text to remove.
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.removeText=function(t){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the given indicator from the gauge by calling it's remove function<br>
 *	 and removing it from the local cache.<br>
 * </blockquote>
 * @param {Object} indicator dojox.gauges._Indicator The indicator to remove.
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.removeIndicator=function(indicator){};
/**
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is used to move an indicator the the front (top)<br>
 *	 of the gauge<br>
 * </blockquote>
 * @param {Object} indicator dojox.gauges._Indicator A dojox.gauges._Indicator or an object with similar parameters
 * (value, color, offset, etc.).
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.moveIndicatorToFront=function(indicator){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if widget has children, i.e. if this.containerNode contains something.<br>
 * </blockquote>
 * @returns {Boolean} -
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.hasChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support using<br>
 *	 touch events to drag an indicator to modify it's value<br>
 * </blockquote>
 * @param {_Indicator} indicator The indicator object
 * @param {Object} e The event object
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.handleTouchStartIndicator=function(indicator, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support using<br>
 *	 touch events to drag an indicator to modify it's value<br>
 * </blockquote>
 * @param {Object} e The touch event object
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.handleTouchStart=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support using<br>
 *	 touch events to drag an indicator to modify it's value<br>
 * </blockquote>
 * @param {Object} e The touch event object
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.handleTouchMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support using<br>
 *	 touch events to drag an indicator to modify it's value<br>
 * </blockquote>
 * @param {Object} e The touch e object
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.handleTouchEnd=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support<br>
 *	 hover text<br>
 * </blockquote>
 * @param {Object} e The event object
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.handleMouseOver=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support<br>
 *	 hover text<br>
 * </blockquote>
 * @param {Object} e The event object
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.handleMouseOut=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support using<br>
 *	 the mouse to show the tooltips<br>
 * </blockquote>
 * @param {Object} e The event object
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.handleMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support using<br>
 *	 the mouse to move indicators<br>
 * </blockquote>
 * @param {Object} e The event object
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.handleMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is used draw text onto the gauge.  The text object<br>
 *	 is also returned by the function so that may be removed later<br>
 *	 by calling removeText<br>
 * </blockquote>
 * @param {dojox.gfx.Group} group The GFX Group where the text will be added.
 * @param {String} txt The text to be drawn
 * @param {Number} x The x coordinate at which to place the text
 * @param {Number} y The y coordinate at which to place the text
 * align?:	String<br>
 * Indicates how to align the text<br>
 * Valid value is 'right', otherwise text is left-aligned<br>
 * color?:	String<br>
 * Indicates the color of the text<br>
 * font?:	Object<br>
 * A font object, generally of the following format:<br>
 * {family: &quot;Helvetica&quot;, style: &quot;italic&quot;, variant: 'small-caps', weight: 'bold', size: &quot;18pt&quot;}
 * @param {String} [align] 
 * @param {String} [color] 
 * @param {Object} [font] 
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.drawText=function(group, txt, x, y, align, color, font){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is used to draw (or redraw) the foreground of the gauge.<br>
 * </blockquote>
 * The method may be used by subclasses to draw (or redraw) the foreground of the gauge.
 * @param {mixed} group 
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.drawForeground=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is used to draw (or redraw) the background of the gauge.<br>
 * </blockquote>
 * The method may be used by subclasses to draw (or redraw) the background of the gauge.
 * @param {mixed} group 
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.drawBackground=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is used to draw (or redraw) the gauge.<br>
 * </blockquote>
 * Draws the gauge by drawing the surface, the ranges, and the indicators.
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.draw=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal method used by the gauge to create the graphics surface area<br>
 * </blockquote>
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.createSurface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides _Widget.buildRendering<br>
 * </blockquote>
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This method is used to add ranges to the gauge.<br>
 * </blockquote>
 * Creates a range (colored area on the background of the gauge)<br>
 * based on the given arguments.<br>
 * range: Range<br>
 * A range is either a dojox.gauges.Range object, or a object<br>
 * with similar parameters (low, high, hover, etc.).
 * @param {Array} ranges 
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.addRanges=function(ranges){};
/**
 * <b>Summary:</b><blockquote>
 *	 This method is used to add a range to the gauge.<br>
 * </blockquote>
 * Creates a range (colored area on the background of the gauge)<br>
 * based on the given arguments.
 * @param {Object} range A range is either a dojox.gauges.Range object, or a object
 * with similar parameters (low, high, hover, etc.).
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.addRange=function(range){};
/**
 * <b>Summary:</b><blockquote>
 *	 This method is used to add an indicator to the gauge.<br>
 * </blockquote>
 * This method adds an indicator, such as a t needle,<br>
 * to the gauge.
 * @param {Object} indicator dojox.gauges._Indicator A dojox.gauges._Indicator or an object with similar parameters
 * (value, color, offset, etc.).
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype.addIndicator=function(indicator){};
/**
 * <b>Summary:</b><blockquote>
 *	 internal method used to clear existing tick marks, then add new ones<br>
 * </blockquote>
 * @param {Object} oldTicks 
 * @param {Object} newTicks 
 * @param {Boolean} major 
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._setTicks=function(oldTicks, newTicks, major){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the given scale tick from the gauge by calling it's remove function<br>
 *	 and removing it from the local cache.<br>
 * </blockquote>
 * @param {Object} indicator 
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._removeScaleTick=function(indicator){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal method to check if the scale is fully circular<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._isScaleCircular=function(){};
/**
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._hideTooltip=function(){};
/**
 * @param {mixed} range 
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._handleMouseOverRange=function(range, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support using<br>
 *	 the mouse to drag an indicator to modify it's value<br>
 * </blockquote>
 * @param {_Indicator} indicator The indicator object
 * @param {Object} e The event object
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._handleMouseOverIndicator=function(indicator, e){};
/**
 * @param {mixed} range 
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._handleMouseOutRange=function(range, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support using<br>
 *	 the mouse to drag an indicator to modify it's value<br>
 * </blockquote>
 * @param {_Indicator} indicator The indicator object
 * @param {Object} e The event object
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._handleMouseOutIndicator=function(indicator, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support using<br>
 *	 the mouse to drag an indicator to modify it's value<br>
 * </blockquote>
 * @param {_Indicator} indicator The indicator object
 * @param {Object} e The event object
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._handleMouseDownIndicator=function(indicator, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support using<br>
 *	 the mouse to drag an indicator to modify it's value<br>
 * </blockquote>
 * @param {Object} e The event object
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._handleDragInteractionMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an internal handler used by the gauge to support using<br>
 *	 the mouse to drag an indicator to modify it's value<br>
 * </blockquote>
 * @param {Object} e The event object
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._handleDragInteractionMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tests is AMD dojo/number is loaded<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._getNumberModule=function(){};
/**
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._getInteractiveIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a scale ticks, that is an indicator.<br>
 * </blockquote>
 * This method adds  a tick mark to the gauge
 * @param {Object} indicator dojox.gauges._Indicator A dojox.gauges._Indicator or an object with similar parameters
 * (value, color, offset, etc.).
 * @param {Boolean} major 
 * @private
 * @memberOf dojox.gauges._Gauge
*/
dojox.gauges._Gauge.prototype._addScaleTick=function(indicator, major){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the AnalogGauge that draws a segment of line that has for length the length of the indicator<br>
 *	 and that starts at an offset from the center of the gauge. The line is drawn on the angle that corresponds<br>
 *	 to the value of the indicator.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges.AnalogIndicatorBase
 * @returns {dojox.gauges.AnalogLineIndicator} new instance
*/
dojox.gauges.AnalogLineIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Private function for generating the shapes for this indicator. An indicator that behaves the<br>
 *	 same might override this one and simply replace the shapes (such as ArrowIndicator).<br>
 * </blockquote>
 * @param {dojox.gfx.Group} group 
 * @private
 * @memberOf dojox.gauges.AnalogLineIndicator
*/
dojox.gauges.AnalogLineIndicator.prototype._getShapes=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the AnalogGauge that draws a needle. The needle is drawn on the angle that corresponds<br>
 *	 to the value of the indicator.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges.AnalogIndicatorBase
 * @returns {dojox.gauges.AnalogNeedleIndicator} new instance
*/
dojox.gauges.AnalogNeedleIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override of dojox.gauges.AnalogLineIndicator._getShapes<br>
 * </blockquote>
 * @param {mixed} group 
 * @private
 * @memberOf dojox.gauges.AnalogNeedleIndicator
*/
dojox.gauges.AnalogNeedleIndicator.prototype._getShapes=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the BarGauge that draws a circle at a position that corresponds to the<br>
 *	 indicator value. This indicator is mainly used to draw round ticks for the scale.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges.BarLineIndicator
 * @returns {dojox.gauges.BarCircleIndicator} new instance
*/
dojox.gauges.BarCircleIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override of dojox.gauges.BarLineIndicator._getShapes<br>
 * </blockquote>
 * @param {mixed} group 
 * @private
 * @memberOf dojox.gauges.BarCircleIndicator
*/
dojox.gauges.BarCircleIndicator.prototype._getShapes=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the BarGauge that draws a segment a line corresponding to the indicator value.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges._Indicator
 * @returns {dojox.gauges.BarLineIndicator} new instance
*/
dojox.gauges.BarLineIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override of dojox.gauges._Indicator.draw<br>
 * </blockquote>
 * @param {dojox.gfx.Group} group 
 * @param {Boolean} [dontAnimate] Indicates if the drawing should not be animated (vs. the default of doing an animation)
 * @memberOf dojox.gauges.BarLineIndicator
*/
dojox.gauges.BarLineIndicator.prototype.draw=function(group, dontAnimate){};
/**
 * <b>Summary:</b><blockquote>
 *	 Moves this indicator (since it's already been drawn once)<br>
 * </blockquote>
 * @param {Boolean} [dontAnimate] Indicates if the drawing should not be animated (vs. the default of doing an animation)
 * @private
 * @memberOf dojox.gauges.BarLineIndicator
*/
dojox.gauges.BarLineIndicator.prototype._move=function(dontAnimate){};
/**
 * <b>Summary:</b><blockquote>
 *	 Private function for generating the shapes for this indicator. An indicator that behaves the<br>
 *	 same might override this one and simply replace the shapes (such as BarIndicator).<br>
 * </blockquote>
 * @param {dojox.gfx.Group} group 
 * @private
 * @memberOf dojox.gauges.BarLineIndicator
*/
dojox.gauges.BarLineIndicator.prototype._getShapes=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 a bar graph built using the dojox.gfx package.<br>
 * </blockquote>
 * using dojo.gfx (and thus either SVG or VML based on what is supported), this widget<br>
 * builds a bar graph component, used to display numerical data in a familiar format.<br>
 * <br>
 * usage:<br>
 * &lt;script type="text/javascript"&gt;<br>
 * require(["dojox/gauges/BarGauge"]);<br>
 * &lt;/script&gt;<br>
 * ...<br>
 * &lt;div 	dojoType="dojox.gauges.BarGauge"<br>
 * id="testBarGauge"<br>
 * barGaugeHeight="55"<br>
 * dataY="25"<br>
 * dataHeight="25"<br>
 * dataWidth="225"&gt;<br>
 * &lt;/div&gt;
 * @class
 * @extends dojox.gauges._Gauge
 * @returns {dojox.gauges.BarGauge} new instance
*/
dojox.gauges.BarGauge=function(){};
/**
 * @memberOf dojox.gauges.BarGauge
*/
dojox.gauges.BarGauge.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines which range the mouse is currently over<br>
 * </blockquote>
 * @param {Object} e The event object as received by the mouse handling functions below.
 * @memberOf dojox.gauges.BarGauge
*/
dojox.gauges.BarGauge.prototype.getRangeUnderMouse=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is used to draw (or redraw) a range<br>
 * </blockquote>
 * Draws a range (colored area on the background of the gauge)<br>
 * based on the given arguments.
 * @param {dojox.gfx.Group} group The GFX group where the range must be drawn.
 * @param {Object} range A range is either a dojox.gauges.Range or an object
 * with similar parameters (low, high, hover, etc.).
 * @memberOf dojox.gauges.BarGauge
*/
dojox.gauges.BarGauge.prototype.drawRange=function(group, range){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a helper function used to determine the value represented by<br>
 *	 a position on the bar graph<br>
 * </blockquote>
 * @param {Number} pos A position to be converted to a value.
 * @private
 * @memberOf dojox.gauges.BarGauge
*/
dojox.gauges.BarGauge.prototype._getValueForPosition=function(pos){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a helper function used to determine the position that represents<br>
 *	 a given value on the bar graph<br>
 * </blockquote>
 * @param {Number} value A value to be converted to a position for this bar graph.
 * @private
 * @memberOf dojox.gauges.BarGauge
*/
dojox.gauges.BarGauge.prototype._getPosition=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles the dragging of an indicator, including moving/re-drawing<br>
 *	 get new value based on mouse position<br>
 * </blockquote>
 * @param {Object} widget 
 * @param {mixed} x 
 * @param {mixed} y 
 * @private
 * @memberOf dojox.gauges.BarGauge
*/
dojox.gauges.BarGauge.prototype._dragIndicatorAt=function(widget, x, y){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles the dragging of an indicator to the event position, including moving/re-drawing<br>
 *	 get angle for mouse position<br>
 * </blockquote>
 * @param {Object} widget 
 * @param {Object} e 
 * @private
 * @memberOf dojox.gauges.BarGauge
*/
dojox.gauges.BarGauge.prototype._dragIndicator=function(widget, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator for the BarGauge that draws a bar corresponding to the indicator value.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges.BarLineIndicator
 * @returns {dojox.gauges.BarIndicator} new instance
*/
dojox.gauges.BarIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override of dojox.gauges.BarLineIndicator._move to resize the bar (rather than moving it)<br>
 * </blockquote>
 * @param {Boolean} [dontAnimate] 
 * @private
 * @memberOf dojox.gauges.BarIndicator
*/
dojox.gauges.BarIndicator.prototype._move=function(dontAnimate){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override of dojox.gauges.BarLineIndicator._getShapes<br>
 * </blockquote>
 * @param {mixed} group 
 * @private
 * @memberOf dojox.gauges.BarIndicator
*/
dojox.gauges.BarIndicator.prototype._getShapes=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a shallow copy of the current shapes while adjusting for the new value<br>
 * </blockquote>
 * @param {mixed} val 
 * @private
 * @memberOf dojox.gauges.BarIndicator
*/
dojox.gauges.BarIndicator.prototype._createShapes=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 An indicator to be used in a gauge<br>
 * </blockquote>
 * An indicator widget, which has given properties.  drawn by a gauge.
 * @class
 * @extends dijit._Widget
 * @private
 * @returns {dojox.gauges._Indicator} new instance
 * @example
 * 	&lt;script type="text/javascript"&gt;
 * 		require(["dojox/gauges/AnalogGauge","dojox/gauges/Indicator"]);
 * 	&lt;/script&gt;
 * 	...
 * 	&lt;div	dojoType="dojox.gauges.AnalogGauge"
 * 			id="testGauge"
 * 			width="300"
 * 			height="200"
 * 			cx=150
 * 			cy=175
 * 			radius=125
 * 			image="gaugeOverlay.png"
 * 			imageOverlay="false"
 * 			imageWidth="280"
 * 			imageHeight="155"
 * 			imageX="12"
 * 			imageY="38"&gt;
 * 		&lt;div 	dojoType="dojox.gauges.Indicator"
 * 				value=17
 * 				type="arrow"
 * 				length=135
 * 				width=3
 * 				hover="Value: 17"
 * 				onDragMove="handleDragMove"&gt;
 * 		&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges._Indicator=function(){};
/**
 * @namespace
*/
dojox.gauges._Indicator.valueNode={};
/**
 * @namespace
*/
dojox.gauges._Indicator.font={};
/**
 * <b>Summary:</b><blockquote>
 *	 Invoked every time the value of the indicator changes.<br>
 * </blockquote>
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.valueChanged=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the value of the indicator, including moving/re-drawing at it's new location and<br>
 *	 updating the text box<br>
 * </blockquote>
 * @param {mixed} value 
 * @param {mixed} animate 
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.update=function(value, animate){};
/**
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the indicator's shape from the gauge surface.<br>
 * </blockquote>
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.remove=function(){};
/**
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles updating the text box and the hover text while dragging an indicator<br>
 * </blockquote>
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.onDragMove=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles touch start events in the indicator.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.handleTouchStart=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles mouse-over events in the indicator.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.handleMouseOver=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles mouse-out events in the indicator.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.handleMouseOut=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles mouse-down events in the indicator.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.handleMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Performs the initial drawing of the indicator.<br>
 * </blockquote>
 * @param {Boolean} [dontAnimate] Indicates if the drawing should not be animated (rather than teh default, to animate)
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.draw=function(dontAnimate){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides _Widget.buildRendering<br>
 * </blockquote>
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A private function, handling the updating of the gauge<br>
 * </blockquote>
 * @param {mixed} animate 
 * @private
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype._updateValue=function(animate){};
/**
 * <b>Summary:</b><blockquote>
 *	 A private function, handling the updating of the gauge<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gauges._Indicator
*/
dojox.gauges._Indicator.prototype._update=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base class for GlossyCircularGauge and GlossySemiCircularGauge.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges.AnalogGauge
 * @returns {dojox.gauges.GlossyCircularGaugeBase} new instance
*/
dojox.gauges.GlossyCircularGaugeBase=function(){};
/**
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase._textIndicator=null;
/**
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase._needle=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides AnalogGauge.startup<br>
 * </blockquote>
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the distance from gauge's center to minor ticks<br>
 * </blockquote>
 * @param {mixed} offset 
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype.setMinorTicksOffset=function(offset){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the size of the minor ticks.<br>
 * </blockquote>
 * @param {mixed} length 
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype.setMinorTicksLength=function(length){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the distance from gauge's center to major ticks<br>
 * </blockquote>
 * @param {mixed} offset 
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype.setMajorTicksOffset=function(offset){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the size of the major ticks.<br>
 * </blockquote>
 * @param {mixed} length 
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype.setMajorTicksLength=function(length){};
/**
 * <b>Summary:</b><blockquote>
 *	 Invoked when the value of the gauge has changed.<br>
 * </blockquote>
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype.onValueChanged=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the distance from gauge's center to minor ticks<br>
 * </blockquote>
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype.getMinorTicksOffset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the size of the minor ticks.<br>
 * </blockquote>
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype.getMinorTicksLength=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the distance from gauge's center to major ticks<br>
 * </blockquote>
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype.getMajorTicksOffset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the size of the major ticks.<br>
 * </blockquote>
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype.getMajorTicksLength=function(){};
/**
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._updateNeedle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes the value of the gauge<br>
 * </blockquote>
 * @param {Number} value The new value for the gauge.
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setValueAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the title displayed by the needle's tooltip .<br>
 * </blockquote>
 * @param {String} value the title
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setTitleAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes the visibility of the text indicator displaying the gauge's value.<br>
 * </blockquote>
 * @param {boolean} value true to show the indicator, false to hide.
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setTextIndicatorVisibleAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes precision of the numbers in the text indicator<br>
 * </blockquote>
 * @param {Number} value The new value
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setTextIndicatorPrecisionAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the font of the text indicator<br>
 * </blockquote>
 * @param {String} font An string representing the font such as 'normal normal normal 10pt Helvetica,Arial,sans-serif'
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setTextIndicatorFontAttr=function(font){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the color of text indicator display the gauge's value<br>
 * </blockquote>
 * @param {String} color The color
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setTextIndicatorColorAttr=function(color){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes precision of the numbers in the scale of the gauge<br>
 * </blockquote>
 * @param {Number} value The new value
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setScalePrecisionAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the orientation of the gauge<br>
 * </blockquote>
 * @param {String} orientation Either &quot;clockwise&quot; or &quot;cclockwise&quot;
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setOrientationAttr=function(orientation){};
/**
 * <b>Summary:</b><blockquote>
 *	 Indicates if the value of the gauge can be changed or not<br>
 * </blockquote>
 * @param {boolean} value true indicates that the gauge's value cannot be changed
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setNoChangeAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the main color of the needle<br>
 * </blockquote>
 * @param {String} color The color
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setNeedleColorAttr=function(color){};
/**
 * @param {mixed} prop 
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setMinorTicksProperty=function(prop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the interval between minor ticks<br>
 * </blockquote>
 * @param {mixed} interval 
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setMinorTicksIntervalAttr=function(interval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the color of the minor ticks.<br>
 * </blockquote>
 * @param {mixed} color 
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setMinorTicksColorAttr=function(color){};
/**
 * @param {mixed} min 
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setMinAttr=function(min){};
/**
 * @param {mixed} max 
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setMaxAttr=function(max){};
/**
 * @param {mixed} prop 
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setMajorTicksProperty=function(prop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the placement of labels relatively to major ticks.<br>
 * </blockquote>
 * @param {String} placement 'inside' or 'outside'
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setMajorTicksLabelPlacementAttr=function(placement){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the interval between major ticks<br>
 * </blockquote>
 * @param {mixed} interval 
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setMajorTicksIntervalAttr=function(interval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the color of the major ticks.<br>
 * </blockquote>
 * @param {mixed} color 
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setMajorTicksColorAttr=function(color){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the font of the gauge<br>
 * </blockquote>
 * @param {String} font An string representing the font such as 'normal normal normal 10pt Helvetica,Arial,sans-serif'
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setFontAttr=function(font){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the main color of the gauge<br>
 * </blockquote>
 * @param {String} color The color
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeBase
*/
dojox.gauges.GlossyCircularGaugeBase.prototype._setColorAttr=function(color){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents a circular gauge with a glossy appearance.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges.GlossyCircularGaugeBase
 * @returns {dojox.gauges.GlossyCircularGauge} new instance
 * @example
 * 	&lt;div	dojoType="dojox.gauges.GlossyCircularGauge"
 * 		id="testGauge"
 * 		width="300"
 * 		height="300"
 * 		min="0"
 * 		max="100"
 * 		value="0"
 * 		majorTicksInterval="10"
 * 		majorTicksColor="#c4c4c4"
 * 		minorTicksInterval="5"
 * 		minorTicksColor="#c4c4c4"
 * 		color="black"
 * 		needleColor="#c4c4c4"
 * 		font="normal normal normal 10pt sans-serif"
 * 		textIndicatorFont="normal normal normal 20pt sans-serif"
 * 		textIndicatorVisible="true"
 * 		textIndicatorColor="#c4c4c4"
 * 		majorTicksLabelPlacement="inside"|"outside"
 * 		noChange="true"
 * 		title="title"
 * 		scalePrecision="0"
 * 		textIndicatorPrecision="0"&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges.GlossyCircularGauge=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Draws the foreground of the gauge.<br>
 * </blockquote>
 * @param {dojox.gfx.Group} group The GFX group where the foreground must be drawn
 * @memberOf dojox.gauges.GlossyCircularGauge
*/
dojox.gauges.GlossyCircularGauge.prototype.drawForeground=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 Draws the background of the gauge.<br>
 * </blockquote>
 * @param {dojox.gfx.Group} group The GFX group where the background must be drawn
 * @memberOf dojox.gauges.GlossyCircularGauge
*/
dojox.gauges.GlossyCircularGauge.prototype.drawBackground=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 The needle for the dojox.gauges.GlossyCircularGauge and<br>
 *	 dojox.gauges.GlossySemiCircularGauge.<br>
 * </blockquote>
 * This object defines the needle for the dojox.gauges.GlossyCircularGauge and<br>
 * dojox.gauges.GlossySemiCircularGauge.<br>
 * Since the needle is created by the gauges class, you do not have to use this class directly.
 * @class
 * @extends dojox.gauges.AnalogIndicatorBase
 * @returns {dojox.gauges.GlossyCircularGaugeNeedle} new instance
*/
dojox.gauges.GlossyCircularGaugeNeedle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides AnalogIndicatorBase._getShapes<br>
 * </blockquote>
 * @param {mixed} group 
 * @private
 * @memberOf dojox.gauges.GlossyCircularGaugeNeedle
*/
dojox.gauges.GlossyCircularGaugeNeedle.prototype._getShapes=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents an horizontal bar gauge with a glossy appearance.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges.BarGauge
 * @returns {dojox.gauges.GlossyHorizontalGauge} new instance
 * @example
 * 	&lt;div dojoType="dojox.gauges.GlossyHorizontalGauge"
 * 		id="testGauge"
 * 		width="500"
 * 		height="100"
 * 		min="0"
 * 		max="100"
 * 		value="0"
 * 		majorTicksInterval="10"
 * 		majorTicksColor="#c4c4c4"
 * 		minorTicksInterval="5"
 * 		minorTicksColor="#c4c4c4"
 * 		color="black"
 * 		markerColor="#c4c4c4"
 * 		font="normal normal normal 10pt sans-serif"
 * 		noChange="true"
 * 		title="title"
 * 		scalePrecision="0"
 * 	&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges.GlossyHorizontalGauge=function(){};
/**
 * @namespace
 * @private
*/
dojox.gauges.GlossyHorizontalGauge._needle={};
/**
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the size of the minor ticks.<br>
 * </blockquote>
 * @param {mixed} length 
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype.setMinorTicksLength=function(length){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the size of the major ticks.<br>
 * </blockquote>
 * @param {mixed} length 
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype.setMajorTicksLength=function(length){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when the value of the gauge has changed.<br>
 * </blockquote>
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype.onValueChanged=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the size of the minor ticks.<br>
 * </blockquote>
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype.getMinorTicksLength=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the size of the major ticks.<br>
 * </blockquote>
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype.getMajorTicksLength=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Draws the background of the gauge<br>
 * </blockquote>
 * @param {dojox.gfx.Group} group The GFX group where the background must be drawn
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype.drawBackground=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes the value of the gauge<br>
 * </blockquote>
 * @param {Number} value The new value for the gauge.
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setValueAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the title displayed by the needle's tooltip .<br>
 * </blockquote>
 * @param {String} value the title
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setTitleAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes precision of the numbers in the scale of the gauge<br>
 * </blockquote>
 * @param {Number} value The new value
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setScalePrecisionAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Indicates if the value of the gauge can be changed or not<br>
 * </blockquote>
 * @param {boolean} value true indicates that the gauge's value cannot be changed
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setNoChangeAttr=function(value){};
/**
 * @param {mixed} prop 
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setMinorTicksProperty=function(prop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the interval between minor ticks<br>
 * </blockquote>
 * @param {mixed} interval 
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setMinorTicksIntervalAttr=function(interval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the color of the minor ticks.<br>
 * </blockquote>
 * @param {mixed} color 
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setMinorTicksColorAttr=function(color){};
/**
 * @param {mixed} min 
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setMinAttr=function(min){};
/**
 * @param {mixed} max 
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setMaxAttr=function(max){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the main color of the marker<br>
 * </blockquote>
 * @param {String} color The color
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setMarkerColorAttr=function(color){};
/**
 * @param {mixed} prop 
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setMajorTicksProperty=function(prop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the interval between major ticks<br>
 * </blockquote>
 * @param {mixed} interval 
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setMajorTicksIntervalAttr=function(interval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the color of the major ticks.<br>
 * </blockquote>
 * @param {mixed} color 
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setMajorTicksColorAttr=function(color){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the font of the gauge<br>
 * </blockquote>
 * @param {String} font An string representing the font such as 'normal normal normal 10pt Helvetica,Arial,sans-serif'
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setFontAttr=function(font){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the main color of the gauge<br>
 * </blockquote>
 * @param {String} color The color
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._setColorAttr=function(color){};
/**
 * <b>Summary:</b><blockquote>
 *	 Layout the gauge elements depending on the various parameters (size, font, tick length..)<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._layoutGauge=function(){};
/**
 * @param {mixed} s 
 * @param {mixed} font 
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._getTextWidth=function(s, font){};
/**
 * <b>Summary:</b><blockquote>
 *	 Computes the width of the border surrounding the gauge<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._getBorderWidth=function(){};
/**
 * @param {mixed} val 
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._formatNumber=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Computes the rectangle that defines the data area of the gauge.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGauge
*/
dojox.gauges.GlossyHorizontalGauge.prototype._computeDataRectangle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The marker for the dojox.gauges.GlossyHorizontalGauge.<br>
 * </blockquote>
 * This object defines the marker for the dojox.gauges.GlossyHorizontalGauge.<br>
 * Since the needle is created by the gauges class, you do not have to use this class directly.
 * @class
 * @extends dojox.gauges.BarLineIndicator
 * @returns {dojox.gauges.GlossyHorizontalGaugeMarker} new instance
*/
dojox.gauges.GlossyHorizontalGaugeMarker=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides BarLineIndicator._getShapes<br>
 * </blockquote>
 * @param {mixed} group 
 * @private
 * @memberOf dojox.gauges.GlossyHorizontalGaugeMarker
*/
dojox.gauges.GlossyHorizontalGaugeMarker.prototype._getShapes=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 Represents a semi circular gauge with a glossy appearance.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges.GlossyCircularGaugeBase
 * @returns {dojox.gauges.GlossySemiCircularGauge} new instance
 * @example
 * 	&lt;div	dojoType="dojox.gauges.GlossySemiCircularGauge"
 * 		id="testGauge"
 * 		width="300"
 * 		height="300"
 * 		min="0"
 * 		max="100"
 * 		value="0"
 * 		majorTicksInterval="10"
 * 		majorTicksColor="#c4c4c4"
 * 		minorTicksInterval="5"
 * 		minorTicksColor="#c4c4c4"
 * 		color="black"
 * 		needleColor="#c4c4c4"
 * 		font="normal normal normal 10pt sans-serif"
 * 		textIndicatorFont="normal normal normal 20pt sans-serif"
 * 		textIndicatorVisible="true"
 * 		textIndicatorColor="#c4c4c4"
 * 		majorTicksLabelPlacement="inside"|"outside"
 * 		noChange="true"
 * 		title="title"
 * 		scalePrecision="0"
 * 		textIndicatorPrecision="0"
 * 	&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges.GlossySemiCircularGauge=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Draws the foreground of the gauge<br>
 * </blockquote>
 * @param {dojox.gfx.Group} group The GFX group where the foreground must be drawn
 * @memberOf dojox.gauges.GlossySemiCircularGauge
*/
dojox.gauges.GlossySemiCircularGauge.prototype.drawForeground=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 Draws the background of the gauge<br>
 * </blockquote>
 * @param {dojox.gfx.Group} group The GFX group where the background must be drawn
 * @memberOf dojox.gauges.GlossySemiCircularGauge
*/
dojox.gauges.GlossySemiCircularGauge.prototype.drawBackground=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 a range to be used in a _Gauge<br>
 * </blockquote>
 * a range widget, which has given properties.  drawn by a _Gauge.
 * @class
 * @extends dijit._Widget
 * @returns {dojox.gauges.Range} new instance
 * @example
 * 	&lt;script type="text/javascript"&gt;
 * 		require(["dojox/gauges/AnalogGauge"]);
 * 	&lt;/script&gt;
 * 	...
 * 	&lt;div	dojoType="dojox.gauges.AnalogGauge"
 * 			id="testGauge"
 * 			width="300"
 * 			height="200"
 * 			cx=150
 * 			cy=175
 * 			radius=125
 * 			image="gaugeOverlay.png"
 * 			imageOverlay="false"
 * 			imageWidth="280"
 * 			imageHeight="155"
 * 			imageX="12"
 * 			imageY="38"&gt;
 * 		&lt;div	dojoType="dojox.gauges.Range"
 * 				low=5
 * 				high=10
 * 				hover="5 - 10"
 * 		&gt;&lt;/div&gt;
 * 		&lt;div	dojoType="dojox.gauges.Range"
 * 				low=10
 * 				high=20
 * 				hover="10 - 20"
 * 		&gt;&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.gauges.Range=function(){};
/**
 * @memberOf dojox.gauges.Range
*/
dojox.gauges.Range.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A gauge indicator the simply draws its value as text.<br>
 * </blockquote>
 * @class
 * @extends dojox.gauges._Indicator
 * @returns {dojox.gauges.TextIndicator} new instance
*/
dojox.gauges.TextIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override of dojox.gauges._Indicator.draw<br>
 * </blockquote>
 * @param {mixed} group 
 * @param {Boolean} [dontAnimate] 
 * @memberOf dojox.gauges.TextIndicator
*/
dojox.gauges.TextIndicator.prototype.draw=function(group, dontAnimate){};
/**
 * @namespace
*/
dojox.geo.charting={};
/**
 * @param {mixed} markerData 
 * @param {mixed} map 
*/
dojox.geo.charting._Marker=function(markerData, map){};
/**
 * <b>Summary:</b><blockquote>
 *	 class to handle touch interactions on a dojox.geo.charting.Map widget<br>
 * </blockquote>
 * @param {dojox.geo.charting.Map} map the Map widget this class provides touch navigation for.
 * @param {mixed} options 
*/
dojox.geo.charting.TouchInteractionSupport=function(map, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 class to handle mouse interactions on a dojox.geo.charting.Map widget<br>
 * </blockquote>
 * @param {Map} map dojox.geo.charting.Map the Map widget this class provides touch navigation for.
 * @param {boolean} options object to enable panning and mouse wheel zooming
*/
dojox.geo.charting.MouseInteractionSupport=function(map, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Map widget interacted with charting.<br>
 * </blockquote>
 * Support rendering Americas, AsiaPacific, ContinentalEurope, EuropeMiddleEastAfrica,<br>
 * USStates, WorldCountries, and WorldCountriesMercator by default.
 * @param {HTML} container map container html node/id
 * @param {String} shapeData map shape data json object, or url to json file
 * @example
 * 	var usaMap = new dojox.geo.charting.Map(srcNode, "dojotoolkit/dojox/geo/charting/resources/data/USStates.json");
 * 	&lt;div id="map" style="width:600px;height:400px;"&gt;&lt;/div&gt;
*/
dojox.geo.charting.Map=function(container, shapeData){};
/**
 * <b>Summary:</b><blockquote>
 *	 class to handle keyboard interactions on a dojox.geo.charting.Map widget<br>
 *	 <br>
 *	 The sections on the leading edge should receive the focus in response to a TAB event.<br>
 *	 Then use cursor keys to the peer sections. The cursor event should go the adjacent section<br>
 *	 in that direction. With the focus, the section zooms in upon SPACE. The map should zoom out<br>
 *	 on ESC. Finally, while it has the focus, the map should lose the focus on TAB.<br>
 * </blockquote>
 * @param {dojox.geo.charting.Map} map the Map widget this class provides touch navigation for.
 * @param {mixed} options 
*/
dojox.geo.charting.KeyboardInteractionSupport=function(map, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 class to encapsulate a map element.<br>
 * </blockquote>
 * @param {mixed} parent 
 * @param {mixed} name 
 * @param {mixed} shapeData 
*/
dojox.geo.charting.Feature=function(parent, name, shapeData){};
/**
 * @namespace
*/
dojox.geo.charting.widget={};
/**
 * @namespace
*/
dojox.geo.openlayers={};
/**
 * <b>Summary:</b><blockquote>
 *	 class to encapsulate a map element.<br>
 * </blockquote>
 * @class
 * @param {mixed} parent 
 * @param {mixed} name 
 * @param {mixed} shapeData 
 * @returns {dojox.geo.charting.Feature} new instance
*/
dojox.geo.charting.Feature=function(parent, name, shapeData){};
/**
 * @namespace
*/
dojox.geo.charting.Feature.shape={};
/**
 * <b>Summary:</b><blockquote>
 *	 clears the numeric value on this Feature object (removes color).<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype.unsetValue=function(){};
/**
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype.unsetColor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a numeric value on this Feature object (used together with series to apply a color).<br>
 * </blockquote>
 * @param {a} value number
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype.setValue=function(value){};
/**
 * @param {mixed} selected 
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype.select=function(selected){};
/**
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype.init=function(){};
/**
 * @private
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype._zoomOut=function(){};
/**
 * @private
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype._zoomIn=function(){};
/**
 * @param {mixed} stroke 
 * @private
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype._setStrokeWith=function(stroke){};
/**
 * @param {mixed} color 
 * @private
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype._setFillWith=function(color){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype._onmouseoverHandler=function(evt){};
/**
 * @private
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype._onmouseoutHandler=function(){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype._onmousemoveHandler=function(evt){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype._onclickHandler=function(evt){};
/**
 * @param {mixed} weight 
 * @private
 * @memberOf dojox.geo.charting.Feature
*/
dojox.geo.charting.Feature.prototype._normalizeStrokeWeight=function(weight){};
/**
 * <b>Summary:</b><blockquote>
 *	 class to handle keyboard interactions on a dojox.geo.charting.Map widget<br>
 *	 <br>
 *	 The sections on the leading edge should receive the focus in response to a TAB event.<br>
 *	 Then use cursor keys to the peer sections. The cursor event should go the adjacent section<br>
 *	 in that direction. With the focus, the section zooms in upon SPACE. The map should zoom out<br>
 *	 on ESC. Finally, while it has the focus, the map should lose the focus on TAB.<br>
 * </blockquote>
 * @class
 * @param {dojox.geo.charting.Map} map the Map widget this class provides touch navigation for.
 * @param {mixed} options 
 * @returns {dojox.geo.charting.KeyboardInteractionSupport} new instance
*/
dojox.geo.charting.KeyboardInteractionSupport=function(map, options){};
/**
 * @namespace
 * @private
*/
dojox.geo.charting.KeyboardInteractionSupport._map={};
/**
 * @param {mixed} e 
 * @memberOf dojox.geo.charting.KeyboardInteractionSupport
*/
dojox.geo.charting.KeyboardInteractionSupport.prototype.onFocus=function(e){};
/**
 * @memberOf dojox.geo.charting.KeyboardInteractionSupport
*/
dojox.geo.charting.KeyboardInteractionSupport.prototype.onBlur=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.geo.charting.KeyboardInteractionSupport
*/
dojox.geo.charting.KeyboardInteractionSupport.prototype.keydownHandler=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 disconnects any installed listeners<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.KeyboardInteractionSupport
*/
dojox.geo.charting.KeyboardInteractionSupport.prototype.disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 connects this keyboard support class to the Map component<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.KeyboardInteractionSupport
*/
dojox.geo.charting.KeyboardInteractionSupport.prototype.connect=function(){};
/**
 * @param {mixed} up 
 * @param {mixed} down 
 * @param {mixed} left 
 * @param {mixed} right 
 * @private
 * @memberOf dojox.geo.charting.KeyboardInteractionSupport
*/
dojox.geo.charting.KeyboardInteractionSupport.prototype._directTo=function(up, down, left, right){};
/**
 * <b>Summary:</b><blockquote>
 *	 Map widget interacted with charting.<br>
 * </blockquote>
 * Support rendering Americas, AsiaPacific, ContinentalEurope, EuropeMiddleEastAfrica,<br>
 * USStates, WorldCountries, and WorldCountriesMercator by default.
 * @class
 * @param {HTML} container map container html node/id
 * @param {String} shapeData map shape data json object, or url to json file
 * @returns {dojox.geo.charting.Map} new instance
 * @example
 * 	var usaMap = new dojox.geo.charting.Map(srcNode, "dojotoolkit/dojox/geo/charting/resources/data/USStates.json");
 * 	&lt;div id="map" style="width:600px;height:400px;"&gt;&lt;/div&gt;
*/
dojox.geo.charting.Map=function(container, shapeData){};
/**
 * @namespace
*/
dojox.geo.charting.Map.mapObj={};
/**
 * <b>Summary:</b><blockquote>
 *	 import markers from outside file, associate with map feature by feature id<br>
 *	 which identified in map shape file, e.g: &amp;quot;NY&amp;quot;:&amp;quot;New York&amp;quot;<br>
 * </blockquote>
 * @param {String} markerFile outside marker data url, handled as json style.
 * data format: {&quot;NY&quot;:&quot;New York&quot;,.....}
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.setMarkerData=function(markerFile){};
/**
 * <b>Summary:</b><blockquote>
 *	 set this component's transformation so that the map is scaled to the specified scale, and the specified<br>
 *	 point (in map coordinates) stays fixed on this Map component<br>
 * </blockquote>
 * @param {mixed} scale 
 * @param {float} fixedMapX the X coordinate (in map coordinates) of the fixed screen point
 * @param {float} fixedMapY the Y coordinate (in map coordinates) of the fixed screen point
 * @param {boolean} animate true if the transform change should be animated
 * @param {callback} onAnimationEnd function a callback function to be executed when the animation completes (if animate set to true).
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.setMapScaleAt=function(scale, fixedMapX, fixedMapY, animate, onAnimationEnd){};
/**
 * <b>Summary:</b><blockquote>
 *	 set this component's transformation so that the map is scaled to the specified scale.<br>
 * </blockquote>
 * @param {mixed} scale 
 * @param {boolean} animate true if the transform change should be animated
 * @param {callback} onAnimationEnd function a callback function to be executed when the animation completes (if animate set to true).
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.setMapScale=function(scale, animate, onAnimationEnd){};
/**
 * <b>Summary:</b><blockquote>
 *	 set this component's transformation so that the map is centered on the specified map coordinates<br>
 *	 and scaled to the specified scale.<br>
 * </blockquote>
 * @param {float} centerX the X coordinate (in map coordinates) of the new center
 * @param {float} centerY the Y coordinate (in map coordinates) of the new center
 * @param {float} scale the scale of the map
 * @param {boolean} animate true if the transform change should be animated
 * @param {callback} onAnimationEnd function a callback function to be executed when the animation completes (if animate set to true).
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.setMapCenterAndScale=function(centerX, centerY, scale, animate, onAnimationEnd){};
/**
 * <b>Summary:</b><blockquote>
 *	 set this component's transformation so that the map is centered on the specified map coordinates<br>
 * </blockquote>
 * @param {float} centerX the X coordinate (in map coordinates) of the new center
 * @param {float} centerY the Y coordinate (in map coordinates) of the new center
 * @param {boolean} animate true if the transform change should be animated
 * @param {callback} onAnimationEnd function a callback function to be executed when the animation completes (if animate set to true).
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.setMapCenter=function(centerX, centerY, animate, onAnimationEnd){};
/**
 * <b>Summary:</b><blockquote>
 *	 populate data for each map feature from fetched data store<br>
 * </blockquote>
 * @param {ItemFileReadStore} dataStore the dataStore to fetch the information from
 * @param {String} dataBindingProp sets the property name of the dataStore items to use as value
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.setDataStore=function(dataStore, dataBindingProp){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the function that extracts values from dataStore items,to use as Feature values (see Feature.setValue function)<br>
 *	 prop:<br>
 *	 the function<br>
 * </blockquote>
 * @param {function} valueFunction 
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.setDataBindingValueFunction=function(valueFunction){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the property name of the dataStore items to use as value (see Feature.setValue function)<br>
 * </blockquote>
 * @param {String} prop the property
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.setDataBindingAttribute=function(prop){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts screen coordinates to map coordinates given the current transform of this Map component<br>
 * </blockquote>
 * @param {mixed} screenX 
 * @param {mixed} screenY 
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.screenCoordsToMapCoords=function(screenX, screenY){};
/**
 * <b>Summary:</b><blockquote>
 *	 resize the underlying GFX surface to accommodate to parent DOM Node size change<br>
 * </blockquote>
 * @param {*boolean*} adjustMapCenter boolean keeps the center of the map when resizing the surface
 * @param {boolean} adjustMapScale adjusts the map scale to keep the visible portion of the map as much as possible
 * @param {*boolean*} animate 
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.resize=function(adjustMapCenter, adjustMapScale, animate){};
/**
 * @param {mixed} feature 
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.onZoomEnd=function(feature){};
/**
 * @param {mixed} feature 
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.onFeatureOver=function(feature){};
/**
 * @param {mixed} feature 
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.onFeatureClick=function(feature){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts map coordinates to screen coordinates given the current transform of this Map component<br>
 * </blockquote>
 * @param {mixed} mapX 
 * @param {mixed} mapY 
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.mapCoordsToScreenCoords=function(mapX, mapY){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the scale of this Map component.<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.getMapScale=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the map coordinates of the center of this Map component.<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.getMapCenter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set this component's transformation so that the whole map data fits in the component (centered)<br>
 * </blockquote>
 * @param {int} pixelMargin a margin (in pixels) from the borders of the Map component.
 * @param {boolean} animate true if the transform change should be animated
 * @param {callback} onAnimationEnd function a callback function to be executed when the animation completes (if animate set to true).
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.fitToMapContents=function(pixelMargin, animate, onAnimationEnd){};
/**
 * <b>Summary:</b><blockquote>
 *	 set this component's transformation so that the specified area fits in the component (centered)<br>
 * </blockquote>
 * @param {bbox:} mapArea the map area that needs to fill the component
 * @param {int} pixelMargin a margin (in pixels) from the borders of the Map component.
 * @param {boolean} animate true if the transform change should be animated
 * @param {callback} onAnimationEnd function a callback function to be executed when the animation completes (if animate set to true).
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.fitToMapArea=function(mapArea, pixelMargin, animate, onAnimationEnd){};
/**
 * <b>Summary:</b><blockquote>
 *	 deselect all features of map<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.deselectAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets ranges of data values (associated with label, color) to style map data values<br>
 * </blockquote>
 * @param {url} series array of range objects such as : [{name:'label 1', min:20, max:70, color:'#DDDDDD'},{...},...]
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype.addSeries=function(series){};
/**
 * @private
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype._queryDataStore=function(){};
/**
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} oldValue 
 * @param {mixed} newValue 
 * @private
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype._onSet=function(item, attribute, oldValue, newValue){};
/**
 * @param {mixed} newItem 
 * @param {mixed} parentItem 
 * @private
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype._onNew=function(newItem, parentItem){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype._onDelete=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 tests whether the application is running on a mobile device (android or iOS)<br>
 * </blockquote>
 * @private
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype._isMobileDevice=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 inits this Map component.<br>
 * </blockquote>
 * @param {mixed} shapeData 
 * @private
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype._init=function(shapeData){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the bounds {x:, y:, w: ,h:} of the DOM node container in absolute coordinates<br>
 * </blockquote>
 * @private
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype._getContainerBounds=function(){};
/**
 * @private
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype._createZoomingCursor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a transform animation object (between two transforms) used internally<br>
 * </blockquote>
 * @param {mixed} onShape 
 * @param {dojox.gfx.matrix.Matrix2D} fromTransform the start transformation (when animation begins)
 * @param {dojox.gfx.matrix.Matrix2D} toTransform the end transormation (when animation ends)
 * @param {callback} onAnimationEnd function callback function to be executed when the animation completes.
 * @private
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype._createAnimation=function(onShape, fromTransform, toTransform, onAnimationEnd){};
/**
 * @param {mixed} markerData 
 * @private
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype._appendMarker=function(markerData){};
/**
 * @param {Json} series object
 * @private
 * @memberOf dojox.geo.charting.Map
*/
dojox.geo.charting.Map.prototype._addSeriesImpl=function(series){};
/**
 * @namespace
*/
dojox.geo.charting.Map.mapObj.marker={};
/**
 * @class
 * @param {mixed} markerData 
 * @param {mixed} map 
 * @returns {dojox.geo.charting._Marker} new instance
*/
dojox.geo.charting._Marker=function(markerData, map){};
/**
 * @param {mixed} featureId 
 * @param {mixed} evt 
 * @memberOf dojox.geo.charting._Marker
*/
dojox.geo.charting._Marker.prototype.show=function(featureId, evt){};
/**
 * @memberOf dojox.geo.charting._Marker
*/
dojox.geo.charting._Marker.prototype.hide=function(){};
/**
 * @param {mixed} arround 
 * @param {mixed} coords 
 * @param {mixed} containerSize 
 * @private
 * @memberOf dojox.geo.charting._Marker
*/
dojox.geo.charting._Marker.prototype._toWindowCoords=function(arround, coords, containerSize){};
/**
 * @param {mixed} group 
 * @private
 * @memberOf dojox.geo.charting._Marker
*/
dojox.geo.charting._Marker.prototype._getGroupBoundingBox=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 class to handle mouse interactions on a dojox.geo.charting.Map widget<br>
 * </blockquote>
 * @class
 * @param {Map} map dojox.geo.charting.Map the Map widget this class provides touch navigation for.
 * @param {boolean} options object to enable panning and mouse wheel zooming
 * @returns {dojox.geo.charting.MouseInteractionSupport} new instance
*/
dojox.geo.charting.MouseInteractionSupport=function(map, options){};
/**
 * @namespace
 * @private
*/
dojox.geo.charting.MouseInteractionSupport._screenClickLocation={};
/**
 * @namespace
 * @private
*/
dojox.geo.charting.MouseInteractionSupport._mapClickLocation={};
/**
 * @namespace
 * @private
*/
dojox.geo.charting.MouseInteractionSupport._map={};
/**
 * <b>Summary:</b><blockquote>
 *	 enables mouse zoom on the map<br>
 * </blockquote>
 * @param {mixed} enable 
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype.setEnableZoom=function(enable){};
/**
 * <b>Summary:</b><blockquote>
 *	 enables mouse panning on the map<br>
 * </blockquote>
 * @param {mixed} enable 
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype.setEnablePan=function(enable){};
/**
 * <b>Summary:</b><blockquote>
 *	 disconnects any installed listeners<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype.disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 connects this mouse support class to the Map component<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype.connect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a mouse wheel up/down was performed<br>
 * </blockquote>
 * @param {the} mouseEvent mouse event
 * @private
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype._mouseWheelHandler=function(mouseEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a mouse up was performed<br>
 * </blockquote>
 * @param {the} mouseEvent mouse event
 * @private
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype._mouseUpHandler=function(mouseEvent){};
/**
 * @param {mixed} mouseEvent 
 * @private
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype._mouseUpClickHandler=function(mouseEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a mouse move was performed<br>
 * </blockquote>
 * @param {the} mouseEvent mouse event
 * @private
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype._mouseMoveHandler=function(mouseEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a mouse drag was performed<br>
 * </blockquote>
 * @param {the} mouseEvent mouse event
 * @private
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype._mouseDragHandler=function(mouseEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a mouse down was performed<br>
 * </blockquote>
 * @param {the} mouseEvent mouse event
 * @private
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype._mouseDownHandler=function(mouseEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a mouse click was performed<br>
 * </blockquote>
 * @param {the} mouseEvent mouse event
 * @private
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype._mouseClickHandler=function(mouseEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 utility function to return the feature located at this mouse event location<br>
 * </blockquote>
 * @param {the} mouseEvent mouse event
 * @private
 * @memberOf dojox.geo.charting.MouseInteractionSupport
*/
dojox.geo.charting.MouseInteractionSupport.prototype._getFeatureFromMouseEvent=function(mouseEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 class to handle touch interactions on a dojox.geo.charting.Map widget<br>
 * </blockquote>
 * @class
 * @param {dojox.geo.charting.Map} map the Map widget this class provides touch navigation for.
 * @param {mixed} options 
 * @returns {dojox.geo.charting.TouchInteractionSupport} new instance
*/
dojox.geo.charting.TouchInteractionSupport=function(map, options){};
/**
 * @namespace
 * @private
*/
dojox.geo.charting.TouchInteractionSupport._lastTap={};
/**
 * @namespace
 * @private
*/
dojox.geo.charting.TouchInteractionSupport._centerTouchLocation={};
/**
 * <b>Summary:</b><blockquote>
 *	 disconnects any installed listeners. Must be called only when disposing of this instance<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype.disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 install touch listeners<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype.connect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a touch start was triggered<br>
 * </blockquote>
 * @param {a} touchEvent touch event
 * @private
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype._touchStartHandler=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a touch move was triggered<br>
 * </blockquote>
 * @param {a} touchEvent touch event
 * @private
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype._touchMoveHandler=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a tap was triggered<br>
 * </blockquote>
 * @param {a} touchEvent touch event
 * @private
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype._touchEndTapHandler=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a touch end was triggered<br>
 * </blockquote>
 * @param {a} touchEvent touch event
 * @private
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype._touchEndHandler=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a single tap was triggered<br>
 * </blockquote>
 * @param {a} touchEvent touch event
 * @private
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype._singleTapHandler=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 checks whether the specified touchStart event is a double tap<br>
 *	 (i.e. follows closely a previous touchStart at approximately the same location)<br>
 * </blockquote>
 * @param {a} touchEvent touch event
 * @private
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype._isDoubleTap=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the midpoint of the two first fingers (or the first finger location if only one)<br>
 * </blockquote>
 * @param {a} touchEvent touch event
 * @private
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype._getTouchBarycenter=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 computes the distance between the first two fingers<br>
 * </blockquote>
 * @param {a} touchEvent touch event
 * @private
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype._getFingerSpacing=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 utility function to return the feature located at this touch event location<br>
 * </blockquote>
 * @param {a} touchEvent touch event
 * @private
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype._getFeatureFromTouchEvent=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a double tap was triggered<br>
 * </blockquote>
 * @param {a} touchEvent touch event
 * @private
 * @memberOf dojox.geo.charting.TouchInteractionSupport
*/
dojox.geo.charting.TouchInteractionSupport.prototype._doubleTapHandler=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 A map viewer widget based on the dojox.geo.charting.Map component<br>
 * </blockquote>
 * The `dojox.geo.charting.widget.Map` widget combines map display together with charting capabilities.<br>
 * It encapsulates  an `dojox.geo.charting.Map` object on which most operations are delegated.<br>
 * Parameters can be passed as argument at construction time to specify map data file (json shape format)<br>
 * as well as charting data.<br>
 * <br>
 * The parameters are :<br>
 * <br>
 * * `shapeData`: The json object containing map data or the name of the file containing map data.<br>
 * * `dataStore`: the dataStore to fetch the charting data from<br>
 * * `dataBindingAttribute`: property name of the dataStore items to use as value for charting<br>
 * * `markerData`: tooltips to display for map features, handled as json style.<br>
 * * `adjustMapCenterOnResize`: if true, the center of the map remains the same when resizing the widget<br>
 * * `adjustMapScaleOnResize`: if true, the map scale is adjusted to leave the visible portion of the map identical as much as possible
 * @param {Object} options 
 * @param {HtmlNode} div 
 * @example
 * 	var map = new dojox.geo.charting.widget.Map({
 * 		shapeData : 'map.json',
 * 		adjustMapCenterOnresize : true,
 * 		adjustMapScaleOnresize : true,
 * 	});
*/
dojox.geo.charting.widget.Map=function(options, div){};
/**
 * <b>Summary:</b><blockquote>
 *	 A legend widget displaying association between colors and Feature value ranges.<br>
 * </blockquote>
 * This widget basically is a table comprising (icon,string) pairs, describing the color scheme<br>
 * used for the map and its associated text descriptions.
 * @example
 * 	var legend = new dojox.geo.charting.widget.Legend({
 * 		map: map
 * 	});
*/
dojox.geo.charting.widget.Legend=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A legend widget displaying association between colors and Feature value ranges.<br>
 * </blockquote>
 * This widget basically is a table comprising (icon,string) pairs, describing the color scheme<br>
 * used for the map and its associated text descriptions.
 * @class
 * @returns {dojox.geo.charting.widget.Legend} new instance
 * @example
 * 	var legend = new dojox.geo.charting.widget.Legend({
 * 		map: map
 * 	});
*/
dojox.geo.charting.widget.Legend=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Refreshes this legend contents when Map series has changed.<br>
 *	 cleanup<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.widget.Legend
*/
dojox.geo.charting.widget.Legend.prototype.refresh=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 inherited Dijit's postCreate function<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.widget.Legend
*/
dojox.geo.charting.widget.Legend.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Construct the UI for this widget, creates the underlying real dojox.geo.charting.Map object.<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.widget.Legend
*/
dojox.geo.charting.widget.Legend.prototype.buildRendering=function(){};
/**
 * @param {mixed} color 
 * @param {mixed} label 
 * @private
 * @memberOf dojox.geo.charting.widget.Legend
*/
dojox.geo.charting.widget.Legend.prototype._addLabel=function(color, label){};
/**
 * <b>Summary:</b><blockquote>
 *	 A map viewer widget based on the dojox.geo.charting.Map component<br>
 * </blockquote>
 * The `dojox.geo.charting.widget.Map` widget combines map display together with charting capabilities.<br>
 * It encapsulates  an `dojox.geo.charting.Map` object on which most operations are delegated.<br>
 * Parameters can be passed as argument at construction time to specify map data file (json shape format)<br>
 * as well as charting data.<br>
 * <br>
 * The parameters are :<br>
 * <br>
 * * `shapeData`: The json object containing map data or the name of the file containing map data.<br>
 * * `dataStore`: the dataStore to fetch the charting data from<br>
 * * `dataBindingAttribute`: property name of the dataStore items to use as value for charting<br>
 * * `markerData`: tooltips to display for map features, handled as json style.<br>
 * * `adjustMapCenterOnResize`: if true, the center of the map remains the same when resizing the widget<br>
 * * `adjustMapScaleOnResize`: if true, the map scale is adjusted to leave the visible portion of the map identical as much as possible
 * @class
 * @param {Object} options 
 * @param {HtmlNode} div 
 * @returns {dojox.geo.charting.widget.Map} new instance
 * @example
 * 	var map = new dojox.geo.charting.widget.Map({
 * 		shapeData : 'map.json',
 * 		adjustMapCenterOnresize : true,
 * 		adjustMapScaleOnresize : true,
 * 	});
*/
dojox.geo.charting.widget.Map=function(options, div){};
/**
 * @namespace
*/
dojox.geo.charting.widget.Map.map={};
/**
 * @memberOf dojox.geo.charting.widget.Map
*/
dojox.geo.charting.widget.Map.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize the widget.<br>
 * </blockquote>
 * Resize the domNode and the widget to the dimensions of a box of the following form:<br>
 * `{ l: 50, t: 200, w: 300: h: 150 }`<br>
 * box:<br>
 * If passed, denotes the new size of the widget.
 * @param {mixed} b 
 * @memberOf dojox.geo.charting.widget.Map
*/
dojox.geo.charting.widget.Map.prototype.resize=function(b){};
/**
 * @memberOf dojox.geo.charting.widget.Map
*/
dojox.geo.charting.widget.Map.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.geo.charting.widget.Map
*/
dojox.geo.charting.widget.Map.prototype.getInnerMap=function(){};
/**
 * @param {Object} [params] 
 * @param {DomNode|String} [srcNodeRef] 
 * @memberOf dojox.geo.charting.widget.Map
*/
dojox.geo.charting.widget.Map.prototype.create=function(params, srcNodeRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 Construct the UI for this widget, creates the underlying real dojox.geo.charting.Map object.<br>
 * </blockquote>
 * @memberOf dojox.geo.charting.widget.Map
*/
dojox.geo.charting.widget.Map.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parses the specified string and returns degree minute second or decimal degree.<br>
 * </blockquote>
 * Parses the specified string and returns degree minute second or decimal degree.
 * @param {String} v The string to parse
 * @param {Boolean} toDecimal Specifies if the result should be returned in decimal degrees or in an array
 * containg the degrees, minutes, seconds values.<br>
*/
dojox.geo.openlayers.parseDMS=function(v, toDecimal){};
/**
 * <b>Summary:</b><blockquote>
 *	 Wraps a Dojo widget, provide geolocalisation of the widget and interface<br>
 *	 to Layer class.<br>
 * </blockquote>
 * This class allows to add a widget in a `dojox.geo.openlayers.Layer`.<br>
 * Parameters are passed to the constructor. These parameters describe the widget<br>
 * and provide geo-localisation of this widget.<br>
 * parameters can be:<br>
 * * _createWidget_: Function for widget creation. Must return a `dijit._Widget`.<br>
 * * _dojoType_: The class of a widget to create;<br>
 * * _dijitId_: The digitId of an existing widget.<br>
 * * _widget_: An already created widget.<br>
 * * _width_: The width of the widget.<br>
 * * _height_: The height of the widget.<br>
 * * _longitude_: The longitude, in decimal degrees where to place the widget.<br>
 * * _latitude_: The latitude, in decimal degrees where to place the widget.<br>
 * You must define a least one widget retrieval parameter and the geo-localization parameters.
 * @param {Object} params The parameters describing the widget.
*/
dojox.geo.openlayers.WidgetFeature=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 class to handle touch interactions on a OpenLayers.Map widget<br>
 * </blockquote>
 * @param {OpenLayers.Map} map the Map widget this class provides touch navigation for.
*/
dojox.geo.openlayers.TouchInteractionSupport=function(map){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Point geometry handles description of points to be rendered in a GfxLayer<br>
 * </blockquote>
*/
dojox.geo.openlayers.Point=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The underlying OpenLayers.Map object.<br>
 *	 Should be accessed on read mode only.<br>
 * </blockquote>
 * The `dojox.geo.openlayers.Map` object allows to view maps from various map providers.<br>
 * It encapsulates  an `OpenLayers.Map` object on which most operations are delegated.<br>
 * GFX layers can be added to display GFX georeferenced shapes as well as Dojo widgets.<br>
 * Parameters can be passed as argument at construction time to define the base layer<br>
 * type and the base layer parameters such as url or options depending on the type<br>
 * specified. These parameters can be any of :<br>
 * &lt;br /&gt;<br>
 * _baseLayerType_: type of the base layer. Can be any of<br>
 * <br>
 * * `dojox.geo.openlayers.BaseLayerType.OSM`: Open Street Map base layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.WMS`: Web Map Service layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.GOOGLE`: Google layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.VIRTUAL_EARTH`: Virtual Earth layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.BING`: Bing layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.YAHOO`: Yahoo layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.ARCGIS`: ESRI ArgGIS layer<br>
 * <br>
 * Note that access to commercial server such as Google, Virtual Earth or Yahoo may need specific licencing.<br>
 * <br>
 * The parameters value also include :<br>
 * <br>
 * * `baseLayerName`: The name of the base layer.<br>
 * * `baseLayerUrl`: Some layer may need an url such as Web Map Server<br>
 * * `baseLayerOptions`: Addtional specific options passed to OpensLayers layer,<br>
 * such as The list of layer to display, for Web Map Server layer.
 * @param {mixed} div 
 * @param {mixed} options 
 * @example
 * 	var map = new dojox.geo.openlayers.widget.Map(div, {
 * 		baseLayerType : dojox.geo.openlayers.BaseLayerType.OSM,
 * 		baseLayerName : 'Open Street Map Layer'
 * 	});
*/
dojox.geo.openlayers.Map=function(div, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base layer class for dojox.geo.openlayers.Map specific layers extending OpenLayers.Layer class.<br>
 *	 This layer class accepts Features which encapsulates graphic objects to be added to the map.<br>
 *	 This layer class encapsulates an OpenLayers.Layer.<br>
 *	 This class provides Feature management such as add, remove and feature access.<br>
 * </blockquote>
 * @param {String} name The name of the layer.
 * @param {Object} options Options passed to the underlying OpenLayers.Layer object.
*/
dojox.geo.openlayers.Layer=function(name, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class to load JSON formated ShapeFile as output of the JSon Custom Map Converter.<br>
 * </blockquote>
 * This class loads JSON formated ShapeFile produced by the JSon Custom Map Converter.<br>
 * When loading the JSON file, it calls a iterator function each time a feature is read.<br>
 * This iterator function is provided as parameter to the constructor.
 * @param {Object} params 
*/
dojox.geo.openlayers.JsonImport=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 A layer dedicated to render dojox.geo.openlayers.GeometryFeature<br>
 * </blockquote>
 * A layer class for rendering geometries as dojox.gfx.Shape objects.<br>
 * This layer class accepts Features which encapsulates graphic objects to be added to the map.<br>
 * All objects should be added to this group.
 * @param {mixed} name 
 * @param {mixed} options 
*/
dojox.geo.openlayers.GfxLayer=function(name, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Feature encapsulating a geometry.<br>
 * </blockquote>
 * This Feature renders a geometry such as a Point or LineString geometry. This Feature<br>
 * is responsible for reprojecting the geometry before creating a gfx shape to display it.<br>
 * By default the shape created is a circle for a Point geometry and a polyline for a<br>
 * LineString geometry. User can change these behavior by overriding the createShape<br>
 * method to create the desired shape.
 * @param {dojox.geo.openlayers.Geometry} geometry OpenLayer.Geometry The geometry to render.
 * @example
 *   var geom = new dojox.geo.openlayers.Point({x:0, y:0});
 *   var gf = new dojox.geo.openlayers.GeometryFeature(geom);
*/
dojox.geo.openlayers.GeometryFeature=function(geometry){};
/**
 * <b>Summary:</b><blockquote>
 *	 The associated shape when rendered<br>
 *	 shape : dojox.gfx.Shape<br>
 *	 The shape<br>
 * </blockquote>
 * @param {x,} coords y}
 * Coordinates of the geometry. {x:&lt;x&gt;, y:&lt;y&gt;} object for a point geometry, array of {x:&lt;x&gt;, y:&lt;y&gt;}<br>
 * objects for line string geometry, array of geometries for collection geometry.<br>
*/
dojox.geo.openlayers.Geometry=function(coords){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Feature encapsulates an item so that it can be added to a Layer.<br>
 *	 This class is not attended to be used as it, but serve as a base class<br>
 *	 for specific features such as GeometryFeature which can display georeferenced<br>
 *	 geometries and WidgetFeature which can display georeferenced widgets.<br>
 * </blockquote>
*/
dojox.geo.openlayers.Feature=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves the geometries.<br>
 * </blockquote>
*/
dojox.geo.openlayers.Collection=function(){};
/**
 * @namespace
*/
dojox.geo.openlayers.widget={};
/**
 * @namespace
*/
dojox.geo.openlayers.GreatCircle={};
/**
 * @namespace
*/
dojox.geo.openlayers.BaseLayerType={};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves the geometries.<br>
 * </blockquote>
 * @class
 * @extends dojox.geo.openlayers.Geometry
 * @returns {dojox.geo.openlayers.Collection} new instance
*/
dojox.geo.openlayers.Collection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the geometries<br>
 * </blockquote>
 * @param {Array} g The array of geometries.
 * @memberOf dojox.geo.openlayers.Collection
*/
dojox.geo.openlayers.Collection.prototype.setGeometries=function(g){};
/**
 * @memberOf dojox.geo.openlayers.Collection
*/
dojox.geo.openlayers.Collection.prototype.getGeometries=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The associated shape when rendered<br>
 *	 shape : dojox.gfx.Shape<br>
 *	 The shape<br>
 * </blockquote>
 * @class
 * @param {x,} coords y}
 * Coordinates of the geometry. {x:&lt;x&gt;, y:&lt;y&gt;} object for a point geometry, array of {x:&lt;x&gt;, y:&lt;y&gt;}<br>
 * objects for line string geometry, array of geometries for collection geometry.
 * @returns {dojox.geo.openlayers.Geometry} new instance
*/
dojox.geo.openlayers.Geometry=function(coords){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Feature encapsulates an item so that it can be added to a Layer.<br>
 *	 This class is not attended to be used as it, but serve as a base class<br>
 *	 for specific features such as GeometryFeature which can display georeferenced<br>
 *	 geometries and WidgetFeature which can display georeferenced widgets.<br>
 * </blockquote>
 * @class
 * @returns {dojox.geo.openlayers.Feature} new instance
*/
dojox.geo.openlayers.Feature=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the coordinate system in which coordinates of this feature are expressed.<br>
 * </blockquote>
 * @param {OpenLayers.Projection} cs The coordinate system in which coordinates of this feature are expressed.
 * @memberOf dojox.geo.openlayers.Feature
*/
dojox.geo.openlayers.Feature.prototype.setCoordinateSystem=function(cs){};
/**
 * <b>Summary:</b><blockquote>
 *	 subclasses implements drawing specific behavior.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Feature
*/
dojox.geo.openlayers.Feature.prototype.render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subclasses implements specific behavior.<br>
 *	 Called when removed from the layer.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Feature
*/
dojox.geo.openlayers.Feature.prototype.remove=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the Layer to which this feature belongs.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Feature
*/
dojox.geo.openlayers.Feature.prototype.getLayer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the coordinate system in which coordinates of this feature are expressed.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Feature
*/
dojox.geo.openlayers.Feature.prototype.getCoordinateSystem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the layer to which this Feature belongs<br>
 * </blockquote>
 * Called when the feature is added to the Layer.
 * @param {dojox.geo.openlayers.Layer} l 
 * @private
 * @memberOf dojox.geo.openlayers.Feature
*/
dojox.geo.openlayers.Feature.prototype._setLayer=function(l){};
/**
 * <b>Summary:</b><blockquote>
 *	 From projected coordinates to screen coordinates<br>
 * </blockquote>
 * @param {Object} p Object with x and y fields
 * @private
 * @memberOf dojox.geo.openlayers.Feature
*/
dojox.geo.openlayers.Feature.prototype._getLocalXY=function(p){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Feature encapsulating a geometry.<br>
 * </blockquote>
 * This Feature renders a geometry such as a Point or LineString geometry. This Feature<br>
 * is responsible for reprojecting the geometry before creating a gfx shape to display it.<br>
 * By default the shape created is a circle for a Point geometry and a polyline for a<br>
 * LineString geometry. User can change these behavior by overriding the createShape<br>
 * method to create the desired shape.
 * @class
 * @extends dojox.geo.openlayers.Feature
 * @param {dojox.geo.openlayers.Geometry} geometry OpenLayer.Geometry The geometry to render.
 * @returns {dojox.geo.openlayers.GeometryFeature} new instance
 * @example
 *   var geom = new dojox.geo.openlayers.Point({x:0, y:0});
 *   var gf = new dojox.geo.openlayers.GeometryFeature(geom);
*/
dojox.geo.openlayers.GeometryFeature=function(geometry){};
/**
 * @namespace
 * @private
*/
dojox.geo.openlayers.GeometryFeature._defaults={};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the stroke style to be applied on the rendered shape.<br>
 * </blockquote>
 * @param {Object} s The stroke style
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.setStroke=function(s){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the shape properties.<br>
 * </blockquote>
 * @param {Object} s The shape properties to set.
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.setShapeProperties=function(s){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the fill style to be applied on the rendered shape.<br>
 * </blockquote>
 * @param {Object} f The fill style
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.setFill=function(f){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders a point geometry.<br>
 * </blockquote>
 * @param {undefined} g | dojox.geo.openlayers.Point
 * The geometry to render.
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.renderPoint=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders a line string geometry.<br>
 * </blockquote>
 * @param {undefined} g | dojox.geo.openlayers.Geometry
 * The geometry to render.
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.renderLineString=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders a geometry collection.<br>
 * </blockquote>
 * @param {undefined} g | dojox.geo.openlayers.Geometry
 * The geometry to render.
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.renderCollection=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Render a geometry.<br>
 *	 Called by the Layer on which the feature is added.<br>
 * </blockquote>
 * @param {undefined} g || dojox.geo.openlayer.Geometry
 * The geometry to draw
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.render=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the shape from the Surface.<br>
 *	 Called when the feature is removed from the layer.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.remove=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves the stroke style<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.getStroke=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the shape properties.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.getShapeProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves the shape rendering the geometry<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.getShape=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves the fill style<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.getFill=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the shape rendering the geometry has to be created.<br>
 *	 This default implementation creates a circle for a point geometry, a polyline for<br>
 *	 a LineString geometry and is recursively called when creating a collection.<br>
 *	 User may replace this method to produce a custom shape.<br>
 * </blockquote>
 * @param {Surface} s dojox.gfx.Surface The surface on which the method create the shapes.
 * @param {dojox.geo.openlayers.Geometry} g The reference geometry
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype.createShape=function(s, g){};
/**
 * <b>Summary:</b><blockquote>
 *	 get the point geometry shape, create it if necessary<br>
 * </blockquote>
 * @param {dojox.geo.openlayers.Geometry} g 
 * @private
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype._getPointShape=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the line string geometry shape, create it if necessary<br>
 * </blockquote>
 * @param {dojox.geo.openlayers.Geometry} g 
 * @private
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype._getLineStringShape=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the collection shape, create it if necessary<br>
 * </blockquote>
 * @param {dojox.geo.openlayers.Geometry} g 
 * @private
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype._getCollectionShape=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a point shape<br>
 * </blockquote>
 * @param {dojox.geo.openlayer.Geometry} g 
 * @private
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype._createPoint=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create polyline shape and add it to the viewport.<br>
 * </blockquote>
 * @param {dojox.geo.openlayers.Geometry} g 
 * @private
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype._createLineString=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create collection shape and add it to the viewport.<br>
 * </blockquote>
 * @param {dojox.geo.openlayers.Geometry} g 
 * @private
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype._createCollection=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Apply the style on the geometry's shape.<br>
 * </blockquote>
 * @param {Geometry} g dojox.geo.openlayers.Geometry The geometry.
 * @private
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype._applyStyle=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Apply the style on the geometry's shape recursively.<br>
 * </blockquote>
 * @param {dojox.geo.openlayers.Geometry} g The geometry.
 * @param {Object} stroke The stroke
 * @param {Object} fill The fill
 * @private
 * @memberOf dojox.geo.openlayers.GeometryFeature
*/
dojox.geo.openlayers.GeometryFeature.prototype._applyRecusiveStyle=function(g, stroke, fill){};
/**
 * @namespace
*/
dojox.geo.openlayers.GeometryFeature._defaults.pointShape={};
/**
 * <b>Summary:</b><blockquote>
 *	 A layer dedicated to render dojox.geo.openlayers.GeometryFeature<br>
 * </blockquote>
 * A layer class for rendering geometries as dojox.gfx.Shape objects.<br>
 * This layer class accepts Features which encapsulates graphic objects to be added to the map.<br>
 * All objects should be added to this group.
 * @class
 * @extends dojox.geo.openlayers.Layer
 * @param {mixed} name 
 * @param {mixed} options 
 * @returns {dojox.geo.openlayers.GfxLayer} new instance
*/
dojox.geo.openlayers.GfxLayer=function(name, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the viewport<br>
 * </blockquote>
 * @param {dojox.gfx.Group} g 
 * @memberOf dojox.geo.openlayers.GfxLayer
*/
dojox.geo.openlayers.GfxLayer.prototype.setViewport=function(g){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the map for this layer.<br>
 *	 tag:<br>
 *	 protected<br>
 * </blockquote>
 * @param {mixed} map 
 * @memberOf dojox.geo.openlayers.GfxLayer
*/
dojox.geo.openlayers.GfxLayer.prototype.setMap=function(map){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when map is resized.<br>
 *	 tag:<br>
 *	 protected<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.GfxLayer
*/
dojox.geo.openlayers.GfxLayer.prototype.onMapResize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when this layer is moved or zoommed.<br>
 * </blockquote>
 * @param {The} event event
 * @memberOf dojox.geo.openlayers.GfxLayer
*/
dojox.geo.openlayers.GfxLayer.prototype.moveTo=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the viewport<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.GfxLayer
*/
dojox.geo.openlayers.GfxLayer.prototype.getViewport=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the underlying dojox.gfx.Surface<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.GfxLayer
*/
dojox.geo.openlayers.GfxLayer.prototype.getSurface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get data extent<br>
 * </blockquote>
 * @private
 * @memberOf dojox.geo.openlayers.GfxLayer
*/
dojox.geo.openlayers.GfxLayer.prototype.getDataExtent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when added to a map.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.GfxLayer
*/
dojox.geo.openlayers.GfxLayer.prototype.added=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Recomputes the surface size when being resized.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.geo.openlayers.GfxLayer
*/
dojox.geo.openlayers.GfxLayer.prototype._surfaceSize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base layer class for dojox.geo.openlayers.Map specific layers extending OpenLayers.Layer class.<br>
 *	 This layer class accepts Features which encapsulates graphic objects to be added to the map.<br>
 *	 This layer class encapsulates an OpenLayers.Layer.<br>
 *	 This class provides Feature management such as add, remove and feature access.<br>
 * </blockquote>
 * @class
 * @param {String} name The name of the layer.
 * @param {Object} options Options passed to the underlying OpenLayers.Layer object.
 * @returns {dojox.geo.openlayers.Layer} new instance
*/
dojox.geo.openlayers.Layer=function(name, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when rendering a feature is necessary.<br>
 *	 f : Feature<br>
 *	 The feature to draw.<br>
 * </blockquote>
 * @param {Feature} f 
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.renderFeature=function(f){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove the feature at the specified index.<br>
 * </blockquote>
 * Remove the feature at the specified index.
 * @param {Number} index The index of the feature to remove.
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.removeFeatureAt=function(index){};
/**
 * @param {Feature} f | Array
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.removeFeature=function(f){};
/**
 * <b>Summary:</b><blockquote>
 *	 Redraws this layer<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.redraw=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the layer is panned or zoomed.<br>
 * </blockquote>
 * @param {Object} event The event
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.moveTo=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves the feature hold by this layer.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the number of the features contained by this layer.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.getFeatureCount=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the i-th feature of this layer.<br>
 *	 i : int<br>
 *	 The index of the feature to return.<br>
 *	 returns : ibm_maps.maps.Layer<br>
 *	 The i-th feature of this layer.<br>
 * </blockquote>
 * @param {mixed} i 
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.getFeatureAt=function(i){};
/**
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.getDojoMap=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes all the features from this layer.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.clear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the layer is added to the map<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.added=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a feature or an array of features to the layer.<br>
 *	 f : Feature or Array<br>
 *	 The Feature or array of features to add.<br>
 * </blockquote>
 * @param {Feature} f | Array
 * @memberOf dojox.geo.openlayers.Layer
*/
dojox.geo.openlayers.Layer.prototype.addFeature=function(f){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a geodetic line as an array of OpenLayers.Point.<br>
 *	 descritpion:<br>
 *	 Create a geodetic line as an array of OpenLayers.Point between the point p1<br>
 *	 and the point p2. Result is a polyline approximation for which a new point is<br>
 *	 calculated every &amp;lt;em&amp;gt;increment&amp;lt;/em&amp;gt; degrees.<br>
 * </blockquote>
 * @param {Point} p1 The first point of the geodetic line. x and y fields are longitude and
 * latitude in decimal degrees.
 * @param {Point} p2 The second point of the geodetic line. x and y fields are longitude and
 * latitude in decimal degrees.
 * @param {Float} increment The value at which a new point is computed.
*/
dojox.geo.openlayers.GreatCircle.toPointArray=function(p1, p2, increment){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a geodetic line as an array of OpenLayers.Geometry.LineString.<br>
 *	 descritpion:<br>
 *	 Create a geodetic line as a OpenLayers.Geometry.LineString between the point p1<br>
 *	 and the point p2. Result is a polyline approximation for which a new point is<br>
 *	 calculated every &amp;lt;em&amp;gt;increment&amp;lt;/em&amp;gt; degrees.<br>
 * </blockquote>
 * @param {Point} p1 The first point of the geodetic line. x and y fields are longitude and
 * latitude in decimal degrees.
 * @param {Point} p2 The second point of the geodetic line. x and y fields are longitude and
 * latitude in decimal degrees.
 * @param {Float} increment The value at which a new point is computed.
*/
dojox.geo.openlayers.GreatCircle.toLineString=function(p1, p2, increment){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a geodetic line as an array of dojox.geo.openlayers.GeometryFeature.<br>
 * </blockquote>
 * Create a geodetic line as a dojox.geo.openlayers.GeometryFeature between the point p1<br>
 * ant the point p2. Result is a polyline approximation for which a new point is<br>
 * calculated every &lt;em&gt;increment&lt;/em&gt; degrees.
 * @param {Point} p1 The first point of the geodetic line. x and y fields are longitude and
 * latitude in decimal degrees.
 * @param {Point} p2 The second point of the geodetic line. x and y fields are longitude and
 * latitude in decimal degrees.
 * @param {Float} increment The value at which a new point is computed.
*/
dojox.geo.openlayers.GreatCircle.toGeometryFeature=function(p1, p2, increment){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a geodetic line as an array of OpenLayers.Point.<br>
 *	 descritpion:<br>
 *	 Create a geodetic line as an array of OpenLayers.Point between the point p1<br>
 *	 and the point p2. Result is a polyline approximation for which a new point is<br>
 *	 calculated every &amp;lt;em&amp;gt;increment&amp;lt;/em&amp;gt; degrees.<br>
 * </blockquote>
 * @class
 * @returns {dojox.geo.openlayers.GreatCircle.toPointArray} new instance
*/
dojox.geo.openlayers.GreatCircle.toPointArray=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Class to load JSON formated ShapeFile as output of the JSon Custom Map Converter.<br>
 * </blockquote>
 * This class loads JSON formated ShapeFile produced by the JSon Custom Map Converter.<br>
 * When loading the JSON file, it calls a iterator function each time a feature is read.<br>
 * This iterator function is provided as parameter to the constructor.
 * @class
 * @param {Object} params 
 * @returns {dojox.geo.openlayers.JsonImport} new instance
*/
dojox.geo.openlayers.JsonImport=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 Triggers the loading.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.JsonImport
*/
dojox.geo.openlayers.JsonImport.prototype.loadData=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Make a geometry with the specified points.<br>
 * </blockquote>
 * @param {Array} s 
 * @param {Float} ulx 
 * @param {Float} uly 
 * @param {Float} lrx 
 * @param {Float} lry 
 * @param {Float} ulxLL 
 * @param {Float} ulyLL 
 * @param {Float} lrxLL 
 * @param {Float} lryLL 
 * @private
 * @memberOf dojox.geo.openlayers.JsonImport
*/
dojox.geo.openlayers.JsonImport.prototype._makeGeometry=function(s, ulx, uly, lrx, lry, ulxLL, ulyLL, lrxLL, lryLL){};
/**
 * <b>Summary:</b><blockquote>
 *	 Make a GeometryFeature with the specified points.<br>
 * </blockquote>
 * @param {Array} s 
 * @param {Float} ulx 
 * @param {Float} uly 
 * @param {Float} lrx 
 * @param {Float} lry 
 * @param {Float} ulxLL 
 * @param {Float} ulyLL 
 * @param {Float} lrxLL 
 * @param {Float} lryLL 
 * @private
 * @memberOf dojox.geo.openlayers.JsonImport
*/
dojox.geo.openlayers.JsonImport.prototype._makeFeature=function(s, ulx, uly, lrx, lry, ulxLL, ulyLL, lrxLL, lryLL){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when an error occurs. Calls the error function is provided in the parameters.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.geo.openlayers.JsonImport
*/
dojox.geo.openlayers.JsonImport.prototype._loadError=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when loading is complete.<br>
 * </blockquote>
 * @param {Object} items 
 * @private
 * @memberOf dojox.geo.openlayers.JsonImport
*/
dojox.geo.openlayers.JsonImport.prototype._gotData=function(items){};
/**
 * <b>Summary:</b><blockquote>
 *	 The underlying OpenLayers.Map object.<br>
 *	 Should be accessed on read mode only.<br>
 * </blockquote>
 * The `dojox.geo.openlayers.Map` object allows to view maps from various map providers.<br>
 * It encapsulates  an `OpenLayers.Map` object on which most operations are delegated.<br>
 * GFX layers can be added to display GFX georeferenced shapes as well as Dojo widgets.<br>
 * Parameters can be passed as argument at construction time to define the base layer<br>
 * type and the base layer parameters such as url or options depending on the type<br>
 * specified. These parameters can be any of :<br>
 * &lt;br /&gt;<br>
 * _baseLayerType_: type of the base layer. Can be any of<br>
 * <br>
 * * `dojox.geo.openlayers.BaseLayerType.OSM`: Open Street Map base layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.WMS`: Web Map Service layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.GOOGLE`: Google layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.VIRTUAL_EARTH`: Virtual Earth layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.BING`: Bing layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.YAHOO`: Yahoo layer<br>
 * * `dojox.geo.openlayers.BaseLayerType.ARCGIS`: ESRI ArgGIS layer<br>
 * <br>
 * Note that access to commercial server such as Google, Virtual Earth or Yahoo may need specific licencing.<br>
 * <br>
 * The parameters value also include :<br>
 * <br>
 * * `baseLayerName`: The name of the base layer.<br>
 * * `baseLayerUrl`: Some layer may need an url such as Web Map Server<br>
 * * `baseLayerOptions`: Addtional specific options passed to OpensLayers layer,<br>
 * such as The list of layer to display, for Web Map Server layer.
 * @class
 * @param {mixed} div 
 * @param {mixed} options 
 * @returns {dojox.geo.openlayers.Map} new instance
 * @example
 * 	var map = new dojox.geo.openlayers.widget.Map(div, {
 * 		baseLayerType : dojox.geo.openlayers.BaseLayerType.OSM,
 * 		baseLayerName : 'Open Street Map Layer'
 * 	});
*/
dojox.geo.openlayers.Map=function(div, options){};
/**
 * @namespace
*/
dojox.geo.openlayers.Map.olMap={};
/**
 * Transforms the coordinates passed as argument. The coordinate are supposed to be expressed<br>
 * in the &lt;em&gt;from&lt;/em&gt; coordinate system and are transformed to the map coordinate system.<br>
 * x : Number<br>
 * The longitude coordinate to transform.<br>
 * y : Number<br>
 * The latitude coordinate to transform.
 * @param {mixed} x 
 * @param {mixed} y 
 * @param {OpenLayers.Projection} from The projection in which the point is expressed.
 * @param {mixed} to 
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.transformXY=function(x, y, from, to){};
/**
 * <b>Summary:</b><blockquote>
 *	 Transforms the point passed as argument, expressed in the &amp;lt;em&amp;gt;from&amp;lt;/em&amp;gt;<br>
 *	 coordinate system to the map coordinate system.<br>
 * </blockquote>
 * Transforms the point passed as argument without modifying it. The point is supposed to be expressed<br>
 * in the &lt;em&gt;from&lt;/em&gt; coordinate system and is transformed to the map coordinate system.<br>
 * p : Object {x, y}<br>
 * The point to transform
 * @param {mixed} p 
 * @param {OpenLayers.Projection} from The projection in which the point is expressed.
 * @param {mixed} to 
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.transform=function(p, from, to){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the base layer type, replacing the existing base layer<br>
 * </blockquote>
 * @param {dojox.geo.openlayers.Map.BaseLayerType} type dojox.geo.openlayers.BaseLayerType base layer type
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.setBaseLayerType=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove the specified layer from the map.<br>
 * </blockquote>
 * @param {dojox.geo.openlayers.Layer} layer The layer to remove from the map.
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.removeLayer=function(layer){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set or retrieve the layer index.<br>
 * </blockquote>
 * Set or get the layer index, that is the z-order of the layer.<br>
 * if the index parameter is provided, the layer index is set to<br>
 * this value. If the index parameter is not provided, the index of<br>
 * the layer is returned.
 * @param {dojox.geo.openlayers.Layer} layer 
 * @param {undefined} index | int
 * index of the layer
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.layerIndex=function(layer, index){};
/**
 * @param {mixed} params 
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.initialFit=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the current scale<br>
 * </blockquote>
 * @param {Boolean} geodesic Tell if geodesic calculation should be performed. If set to
 * true, the scale will be calculated based on the horizontal size of the<br>
 * pixel in the center of the map viewport.
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.getScale=function(geodesic){};
/**
 * <b>Summary:</b><blockquote>
 *	 gets the underlying OpenLayers map object.<br>
 *	 returns : OpenLayers.Map<br>
 *	 The underlying OpenLayers map object.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.getOLMap=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the count of layers of this map.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.getLayerCount=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the layer whose property matches the value.<br>
 * </blockquote>
 * @param {String} property The property to check
 * @param {Object} value The value to match
 * @example
 * var layers = map.getLayer("name", "Layer Name");
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.getLayer=function(property, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves the base layer type.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.getBaseLayerType=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fits the map on a point,or an area<br>
 * </blockquote>
 * Fits the map on the point or extent specified as parameter.
 * @param {Object} o Object with key values fit parameters or a JSON string.
 * @example
 * Examples of arguments passed to the fitTo function :
 * 	null
 * The map is fit on full extent
 * 
 * 	{
 * 	bounds : [ulx, uly, lrx, lry]
 * 	}
 * The map is fit on the specified bounds expressed as decimal degrees latitude and longitude.
 * The bounds are defined with their upper left and lower right corners coordinates.
 * 
 * 	{
 * 	position : [longitude, latitude],
 * 	extent : degrees
 * 	}
 * The map is fit on the specified position showing the extent &lt;extent&gt; around
 * the specified center position.
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.fitTo=function(o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add the specified layer to the map.<br>
 * </blockquote>
 * @param {dojox.geo.openlayers.Layer} layer dojox.geo.openlayer.Layer The layer to add to the map.
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype.addLayer=function(layer){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieve the dojox.geo.openlayer.Layer from the OpenLayer.Layer<br>
 * </blockquote>
 * @param {OpenLayer.Layer} ol 
 * @private
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype._getLayer=function(ol){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates the base layer.<br>
 * </blockquote>
 * @param {mixed} params 
 * @private
 * @memberOf dojox.geo.openlayers.Map
*/
dojox.geo.openlayers.Map.prototype._createBaseLayer=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Point geometry handles description of points to be rendered in a GfxLayer<br>
 * </blockquote>
 * @class
 * @extends dojox.geo.openlayers.Geometry
 * @returns {dojox.geo.openlayers.Point} new instance
*/
dojox.geo.openlayers.Point=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the point for this geometry.<br>
 *	 p : {x, y} Object<br>
 *	 The point geometry.<br>
 * </blockquote>
 * @param {mixed} p 
 * @memberOf dojox.geo.openlayers.Point
*/
dojox.geo.openlayers.Point.prototype.setPoint=function(p){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the point defining this geometry.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.Point
*/
dojox.geo.openlayers.Point.prototype.getPoint=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 class to handle touch interactions on a OpenLayers.Map widget<br>
 * </blockquote>
 * @class
 * @param {OpenLayers.Map} map the Map widget this class provides touch navigation for.
 * @returns {dojox.geo.openlayers.TouchInteractionSupport} new instance
*/
dojox.geo.openlayers.TouchInteractionSupport=function(map){};
/**
 * @namespace
 * @private
*/
dojox.geo.openlayers.TouchInteractionSupport._map={};
/**
 * @namespace
 * @private
*/
dojox.geo.openlayers.TouchInteractionSupport._lastTap={};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a touch start was triggered<br>
 * </blockquote>
 * @param {Event} touchEvent a touch event
 * @private
 * @memberOf dojox.geo.openlayers.TouchInteractionSupport
*/
dojox.geo.openlayers.TouchInteractionSupport.prototype._touchStartHandler=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a touch move was triggered<br>
 * </blockquote>
 * @param {Event} touchEvent a touch event
 * @private
 * @memberOf dojox.geo.openlayers.TouchInteractionSupport
*/
dojox.geo.openlayers.TouchInteractionSupport.prototype._touchMoveHandler=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a touch end was triggered<br>
 * </blockquote>
 * @param {Event} touchEvent a touch event
 * @private
 * @memberOf dojox.geo.openlayers.TouchInteractionSupport
*/
dojox.geo.openlayers.TouchInteractionSupport.prototype._touchEndHandler=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 checks whether the specified touchStart event is a double tap<br>
 *	 (i.e. follows closely a previous touchStart at approximately the same location)<br>
 * </blockquote>
 * @param {Event} touchEvent a touch event
 * @private
 * @memberOf dojox.geo.openlayers.TouchInteractionSupport
*/
dojox.geo.openlayers.TouchInteractionSupport.prototype._isDoubleTap=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the midpoint of the two first fingers (or the first finger location if only one)<br>
 * </blockquote>
 * @param {Event} touchEvent a touch event
 * @private
 * @memberOf dojox.geo.openlayers.TouchInteractionSupport
*/
dojox.geo.openlayers.TouchInteractionSupport.prototype._getTouchBarycenter=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 computes the distance between the first two fingers<br>
 * </blockquote>
 * @param {Event} touchEvent a touch event
 * @private
 * @memberOf dojox.geo.openlayers.TouchInteractionSupport
*/
dojox.geo.openlayers.TouchInteractionSupport.prototype._getFingerSpacing=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 action performed on the map when a double tap was triggered<br>
 * </blockquote>
 * @param {Event} touchEvent a touch event
 * @private
 * @memberOf dojox.geo.openlayers.TouchInteractionSupport
*/
dojox.geo.openlayers.TouchInteractionSupport.prototype._doubleTapHandler=function(touchEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 The underlying `dojox.geo.openlayers.Map` object.<br>
 *	 This is s readonly member.<br>
 * </blockquote>
 * Tells if the touch handler should be attached to the map or not.<br>
 * Touch handler handles touch events so that the widget can be used<br>
 * on mobile applications.
 * @example
 *  &lt;div id="map" dojoType="dojox.geo.openlayers.widget.Map" baseLayerType="Google" initialLocation="{
 *	position : [7.154126, 43.651748],
 *	extent : 0.2 }"
 *  style="background-color: #b5d0d0; width: 100%; height: 100%;"&gt;
*/
dojox.geo.openlayers.widget.Map=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The underlying `dojox.geo.openlayers.Map` object.<br>
 *	 This is s readonly member.<br>
 * </blockquote>
 * Tells if the touch handler should be attached to the map or not.<br>
 * Touch handler handles touch events so that the widget can be used<br>
 * on mobile applications.
 * @class
 * @extends dijit.Widget
 * @returns {dojox.geo.openlayers.widget.Map} new instance
 * @example
 *  &lt;div id="map" dojoType="dojox.geo.openlayers.widget.Map" baseLayerType="Google" initialLocation="{
 *	position : [7.154126, 43.651748],
 *	extent : 0.2 }"
 *  style="background-color: #b5d0d0; width: 100%; height: 100%;"&gt;
*/
dojox.geo.openlayers.widget.Map=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Processing after the DOM fragment is added to the document<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.widget.Map
*/
dojox.geo.openlayers.widget.Map.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize the widget.<br>
 * </blockquote>
 * Resize the domNode and the widget to the dimensions of a box of the following form:<br>
 * `{ l: 50, t: 200, w: 300: h: 150 }`
 * @param {undefined} b | Box | width, height
 * If passed, denotes the new size of the widget.<br>
 * Can be either nothing (widget adapts to the div),<br>
 * a box, or a width and a height.
 * @memberOf dojox.geo.openlayers.widget.Map
*/
dojox.geo.openlayers.widget.Map.prototype.resize=function(b){};
/**
 * <b>Summary:</b><blockquote>
 *	 Construct the UI for this widget, creates the real dojox.geo.openlayers.Map object.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.widget.Map
*/
dojox.geo.openlayers.widget.Map.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates layers defined as markup.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.geo.openlayers.widget.Map
*/
dojox.geo.openlayers.widget.Map.prototype._makeLayers=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Wraps a Dojo widget, provide geolocalisation of the widget and interface<br>
 *	 to Layer class.<br>
 * </blockquote>
 * This class allows to add a widget in a `dojox.geo.openlayers.Layer`.<br>
 * Parameters are passed to the constructor. These parameters describe the widget<br>
 * and provide geo-localisation of this widget.<br>
 * parameters can be:<br>
 * * _createWidget_: Function for widget creation. Must return a `dijit._Widget`.<br>
 * * _dojoType_: The class of a widget to create;<br>
 * * _dijitId_: The digitId of an existing widget.<br>
 * * _widget_: An already created widget.<br>
 * * _width_: The width of the widget.<br>
 * * _height_: The height of the widget.<br>
 * * _longitude_: The longitude, in decimal degrees where to place the widget.<br>
 * * _latitude_: The latitude, in decimal degrees where to place the widget.<br>
 * You must define a least one widget retrieval parameter and the geo-localization parameters.
 * @class
 * @extends dojox.geo.openlayers.Feature
 * @param {Object} params The parameters describing the widget.
 * @returns {dojox.geo.openlayers.WidgetFeature} new instance
*/
dojox.geo.openlayers.WidgetFeature=function(params){};
/**
 * @namespace
 * @private
*/
dojox.geo.openlayers.WidgetFeature._widget={};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the parameters describing the widget.<br>
 * </blockquote>
 * @param {Object} params The parameters describing the widget.
 * @memberOf dojox.geo.openlayers.WidgetFeature
*/
dojox.geo.openlayers.WidgetFeature.prototype.setParameters=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 renders the widget.<br>
 *	 descrption:<br>
 *	 Places the widget accordingly to longitude and latitude defined in parameters.<br>
 *	 This function is called when the center of the maps or zoom factor changes.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.WidgetFeature
*/
dojox.geo.openlayers.WidgetFeature.prototype.render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes this feature.<br>
 * </blockquote>
 * Remove this feature by disconnecting the widget from the dom.
 * @memberOf dojox.geo.openlayers.WidgetFeature
*/
dojox.geo.openlayers.WidgetFeature.prototype.remove=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retreives the parameters describing the widget.<br>
 * </blockquote>
 * @memberOf dojox.geo.openlayers.WidgetFeature
*/
dojox.geo.openlayers.WidgetFeature.prototype.getParameters=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Places the widget with the computed x and y values<br>
 * </blockquote>
 * @param {mixed} box 
 * @private
 * @memberOf dojox.geo.openlayers.WidgetFeature
*/
dojox.geo.openlayers.WidgetFeature.prototype._updateWidgetPosition=function(box){};
/**
 * <b>Summary:</b><blockquote>
 *	 gets the widget width<br>
 * </blockquote>
 * @private
 * @memberOf dojox.geo.openlayers.WidgetFeature
*/
dojox.geo.openlayers.WidgetFeature.prototype._getWidgetWidth=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 gets the widget height<br>
 * </blockquote>
 * @private
 * @memberOf dojox.geo.openlayers.WidgetFeature
*/
dojox.geo.openlayers.WidgetFeature.prototype._getWidgetHeight=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates, if necessary the widget and returns it;<br>
 * </blockquote>
 * @private
 * @memberOf dojox.geo.openlayers.WidgetFeature
*/
dojox.geo.openlayers.WidgetFeature.prototype._getWidget=function(){};
/**
 * @namespace
 * @private
*/
dojox.geo.openlayers.WidgetFeature._params={};
/**
 * @namespace
*/
dojox.geo.openlayers.WidgetFeature._params.widget={};
/**
 * <b>Summary:</b><blockquote>
 *	 This module provides tap gesture event handlers:<br>
 *	 <br>
 *	 1. dojox.gesture.tap: 'tap' event<br>
 *	 <br>
 *	 2. dojox.gesture.tap.hold: 'tap.hold' event<br>
 *	 <br>
 *	 3. dojox.gesture.tap.doubletap: 'tap.doubletap' event<br>
 * </blockquote>
 * @example
 * A. Used with dojo.connect()
 * 	dojo.connect(node, dojox.gesture.tap, function(e){});
 * 	dojo.connect(node, dojox.gesture.tap.hold, function(e){});
 * 	dojo.connect(node, dojox.gesture.tap.doubletap, function(e){});
 * 
 * B. Used with dojo.on
 * 	define(['dojo/on', 'dojox/gesture/tap'], function(on, tap){
 * 		on(node, tap, function(e){});
 * 		on(node, tap.hold, function(e){});
 * 		on(node, tap.doubletap, function(e){});
 * 
 * C. Used with dojox.gesture.tap.* directly
 * 	dojox.gesture.tap(node, function(e){});
 * 	dojox.gesture.tap.hold(node, function(e){});
 * 	dojox.gesture.tap.doubletap(node, function(e){});
 * 
 * Though there is always a default gesture instance after being required, e.g
 * 	require(['dojox/gesture/tap'], function(){...});
 * 
 * It's possible to create a new one with different parameter setting:
 * 	var myTap = new dojox.gesture.tap.Tap({holdThreshold: 300});
 * 	dojo.connect(node, myTap, function(e){});
 * 	dojo.connect(node, myTap.hold, function(e){});
 * 	dojo.connect(node, myTap.doubletap, function(e){});
*/
dojox.gesture.tap=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This module provides swipe gestures including:<br>
 *	 <br>
 *	 1. dojox.gesture.swipe<br>
 *	 <br>
 *	 A series of 'swipe' will be fired during touchmove, this will mostly<br>
 *	 be used to keep sliding the Dom target based on the swiped distance(dx, dy).<br>
 *	 <br>
 *	 2. dojox.gesture.swipe.end<br>
 *	 <br>
 *	 Fired when a swipe is ended so that an bounce animation may be applied<br>
 *	 to the dom target sliding to the final position.<br>
 *	 <br>
 *	 Following information will be included in the fired swipe events:<br>
 *	 <br>
 *	 1. type: 'swipe'|'swipe.end'<br>
 *	 <br>
 *	 2. time: an integer indicating the delta time(in milliseconds)<br>
 *	 <br>
 *	 3. dx: delta distance on X axis, dx less than 0 - moving left, dx larger than 0 - moving right<br>
 *	 <br>
 *	 4. dy: delta distance on Y axis, dy less than 0 - moving up, dY larger than 0 - moving down<br>
 *	 <br>
 *	 Note - dx and dy can also be used together for a hybrid swipe(both vertically and horizontally)<br>
 * </blockquote>
 * @example
 * A. Used with dojo.connect()
 * 	dojo.connect(node, dojox.gesture.swipe, function(e){});
 * 	dojo.connect(node, dojox.gesture.swipe.end, function(e){});
 * 
 * B. Used with dojo.on
 * 	define(['dojo/on', 'dojox/gesture/swipe'], function(on, swipe){
 * 		on(node, swipe, function(e){});
 * 		on(node, swipe.end, function(e){});
 * 
 * C. Used with dojox.gesture.swipe.* directly
 * 	dojox.gesture.swipe(node, function(e){});
 * 	dojox.gesture.swipe.end(node, function(e){});
*/
dojox.gesture.swipe=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An abstract parental class for various gesture implementations.<br>
 *	 <br>
 *	 It's mainly responsible for:<br>
 *	 <br>
 *	 1. Binding on() listening handlers for supported gesture events.<br>
 *	 <br>
 *	 2. Monitoring underneath events and process different phases - 'press'|'move'|'release'|'cancel'.<br>
 *	 <br>
 *	 3. Firing and bubbling gesture events with on() API.<br>
 *	 <br>
 *	 A gesture implementation only needs to extend this class and overwrite appropriate phase handlers:<br>
 *	 <br>
 *	 - press()|move()|release()|cancel for recognizing and firing gestures<br>
 * </blockquote>
 * @param {mixed} args 
 * @example
 * 1. A typical gesture implementation.
 * 
 * Suppose we have dojox/gesture/a which provides 3 gesture events:"a", "a.x", "a.y" to be used as:
 * 	dojo.connect(node, dojox.gesture.a, function(e){});
 * 	dojo.connect(node, dojox.gesture.a.x, function(e){});
 * 	dojo.connect(node, dojox.gesture.a.y, function(e){});
 * 
 * The definition of the gesture "a" may look like:
 * 	define([..., "./Base"], function(..., Base){
 * 		var clz = declare(Base, {
 * 			defaultEvent: "a",
 * 
 * 			subEvents: ["x", "y"],
 * 
 * 			press: function(data, e){
 * 				this.fire(node, {type: "a.x", ...});
 * 			},
 * 			move: function(data, e){
 * 				this.fire(node, {type: "a.y", ...});
 * 			},
 * 			release: function(data, e){
 * 				this.fire(node, {type: "a", ...});
 * 			},
 * 			cancel: function(data, e){
 * 				// clean up
 * 			}
 * 		});
 * 
 * 		// in order to have a default instance for handy use
 * 		dojox.gesture.a = new clz();
 * 
 * 		// so that we can create new instances like
 * 		// var mine = new dojox.gesture.a.A({...})
 * 		dojox.gesture.a.A = clz;
 * 
 * 		return dojox.gesture.a;
 * 	});
 * 
 * 2. A gesture can be used in the following ways(taking dojox.gestre.tap for example):
 * 
 * A. Used with dojo.connect()
 * 	dojo.connect(node, dojox.gesture.tap, function(e){});
 * 	dojo.connect(node, dojox.gesture.tap.hold, function(e){});
 * 	dojo.connect(node, dojox.gesture.tap.doubletap, function(e){});
 * 
 * B. Used with dojo.on
 * 	define(["dojo/on", "dojox/gesture/tap"], function(on, tap){
 * 		on(node, tap, function(e){});
 * 		on(node, tap.hold, function(e){});
 * 		on(node, tap.doubletap, function(e){});
 * 
 * C. Used with dojox.gesture.tap directly
 * 	dojox.gesture.tap(node, function(e){});
 * 	dojox.gesture.tap.hold(node, function(e){});
 * 	dojox.gesture.tap.doubletap(node, function(e){});
 * 
 * Though there is always a default gesture instance after being required, e.g
 * 	require(["dojox/gesture/tap"], function(){...});
 * 
 * It's possible to create a new one with different parameter setting:
 * 	var myTap = new dojox.gesture.tap.Tap({holdThreshold: 300});
 * 	dojo.connect(node, myTap, function(e){});
 * 	dojo.connect(node, myTap.hold, function(e){});
 * 	dojo.connect(node, myTap.doubletap, function(e){});
 * 
 * Please refer to dojox/gesture/ for more gesture usages
*/
dojox.gesture.Base=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 An abstract parental class for various gesture implementations.<br>
 *	 <br>
 *	 It's mainly responsible for:<br>
 *	 <br>
 *	 1. Binding on() listening handlers for supported gesture events.<br>
 *	 <br>
 *	 2. Monitoring underneath events and process different phases - 'press'|'move'|'release'|'cancel'.<br>
 *	 <br>
 *	 3. Firing and bubbling gesture events with on() API.<br>
 *	 <br>
 *	 A gesture implementation only needs to extend this class and overwrite appropriate phase handlers:<br>
 *	 <br>
 *	 - press()|move()|release()|cancel for recognizing and firing gestures<br>
 * </blockquote>
 * @class
 * @param {mixed} args 
 * @returns {dojox.gesture.Base} new instance
 * @example
 * 1. A typical gesture implementation.
 * 
 * Suppose we have dojox/gesture/a which provides 3 gesture events:"a", "a.x", "a.y" to be used as:
 * 	dojo.connect(node, dojox.gesture.a, function(e){});
 * 	dojo.connect(node, dojox.gesture.a.x, function(e){});
 * 	dojo.connect(node, dojox.gesture.a.y, function(e){});
 * 
 * The definition of the gesture "a" may look like:
 * 	define([..., "./Base"], function(..., Base){
 * 		var clz = declare(Base, {
 * 			defaultEvent: "a",
 * 
 * 			subEvents: ["x", "y"],
 * 
 * 			press: function(data, e){
 * 				this.fire(node, {type: "a.x", ...});
 * 			},
 * 			move: function(data, e){
 * 				this.fire(node, {type: "a.y", ...});
 * 			},
 * 			release: function(data, e){
 * 				this.fire(node, {type: "a", ...});
 * 			},
 * 			cancel: function(data, e){
 * 				// clean up
 * 			}
 * 		});
 * 
 * 		// in order to have a default instance for handy use
 * 		dojox.gesture.a = new clz();
 * 
 * 		// so that we can create new instances like
 * 		// var mine = new dojox.gesture.a.A({...})
 * 		dojox.gesture.a.A = clz;
 * 
 * 		return dojox.gesture.a;
 * 	});
 * 
 * 2. A gesture can be used in the following ways(taking dojox.gestre.tap for example):
 * 
 * A. Used with dojo.connect()
 * 	dojo.connect(node, dojox.gesture.tap, function(e){});
 * 	dojo.connect(node, dojox.gesture.tap.hold, function(e){});
 * 	dojo.connect(node, dojox.gesture.tap.doubletap, function(e){});
 * 
 * B. Used with dojo.on
 * 	define(["dojo/on", "dojox/gesture/tap"], function(on, tap){
 * 		on(node, tap, function(e){});
 * 		on(node, tap.hold, function(e){});
 * 		on(node, tap.doubletap, function(e){});
 * 
 * C. Used with dojox.gesture.tap directly
 * 	dojox.gesture.tap(node, function(e){});
 * 	dojox.gesture.tap.hold(node, function(e){});
 * 	dojox.gesture.tap.doubletap(node, function(e){});
 * 
 * Though there is always a default gesture instance after being required, e.g
 * 	require(["dojox/gesture/tap"], function(){...});
 * 
 * It's possible to create a new one with different parameter setting:
 * 	var myTap = new dojox.gesture.tap.Tap({holdThreshold: 300});
 * 	dojo.connect(node, myTap, function(e){});
 * 	dojo.connect(node, myTap.hold, function(e){});
 * 	dojo.connect(node, myTap.doubletap, function(e){});
 * 
 * Please refer to dojox/gesture/ for more gesture usages
*/
dojox.gesture.Base=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Release the lock<br>
 * </blockquote>
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype.unLock=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Process the 'release' phase of a gesture<br>
 * </blockquote>
 * @param {mixed} data 
 * @param {mixed} e 
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype.release=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Process the 'press' phase of a gesture<br>
 * </blockquote>
 * @param {mixed} data 
 * @param {mixed} e 
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype.press=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Process the 'move' phase of a gesture<br>
 * </blockquote>
 * @param {mixed} data 
 * @param {mixed} e 
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype.move=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Lock all descendants of the node.<br>
 * </blockquote>
 * @param {Dom} node 
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype.lock=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if the node is locked, isLocked(node) means<br>
 *	 whether it's a descendant of the currently locked node.<br>
 * </blockquote>
 * @param {mixed} node 
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype.isLocked=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialization works<br>
 * </blockquote>
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype.init=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fire a gesture event and invoke registered listeners<br>
 *	 a simulated GestureEvent will also be sent along<br>
 * </blockquote>
 * @param {DomNode} node Target node to fire the gesture
 * @param {Object} event An object containing specific gesture info e.g {type: 'tap.hold'|'swipe.left'), ...}
 * all these properties will be put into a simulated GestureEvent when fired.<br>
 * Note - Default properties in a native Event won't be overwritten, see on.emit() for more details.
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype.fire=function(node, event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Release all handlers and resources<br>
 * </blockquote>
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Process the 'cancel' phase of a gesture<br>
 * </blockquote>
 * @param {mixed} data 
 * @param {mixed} e 
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype.cancel=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check and remove underneath handlers if node<br>
 *	 is not being listened for 'this' gesture anymore,<br>
 *	 this happens when user removed all previous on() handlers.<br>
 * </blockquote>
 * @param {Dom} node 
 * @param {String} type 
 * @private
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype._remove=function(node, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Process and dispatch to appropriate phase handlers.<br>
 *	 Also provides the machinery for managing gesture bubbling.<br>
 * </blockquote>
 * 1. e._locking is used to make sure only the most inner node<br>
 * will be processed for the same gesture, suppose we have:<br>
 * 	on(inner, dojox.gesture.tap, func1);<br>
 * 	on(outer, dojox.gesture.tap, func2);<br>
 * only the inner node will be processed by tap gesture, once matched,<br>
 * the 'tap' event will be bubbled up from inner to outer, dojo.StopEvent(e)<br>
 * can be used at any level to stop the 'tap' event.<br>
 * <br>
 * 2. Once a node starts being processed, all it's descendant nodes will be locked.<br>
 * The same gesture won't be processed on its descendant nodes until the lock is released.
 * @param {Object} element Gesture element
 * @param {String} phase Phase of a gesture to be processed, might be 'press'|'move'|'release'|'cancel'
 * @param {Event} e Native event
 * @private
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype._process=function(element, phase, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Bind listen handler for the given gesture event(e.g. 'tap', 'tap.hold' etc.)<br>
 *	 the returned handle will be used internally by dojo/on<br>
 * </blockquote>
 * @param {String} eventType 
 * @private
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype._handle=function(eventType){};
/**
 * <b>Summary:</b><blockquote>
 *	 Obtain a gesture element for the give node<br>
 * </blockquote>
 * @param {Dom} node 
 * @private
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype._getGestureElement=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clean up on handles<br>
 * </blockquote>
 * @param {Object} handles 
 * @private
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype._cleanHandles=function(handles){};
/**
 * <b>Summary:</b><blockquote>
 *	 Bind dojo/on handlers for both gesture event(e.g 'tab.hold')<br>
 *	 and underneath 'press'|'move'|'release' events<br>
 * </blockquote>
 * @param {Dom} node 
 * @param {String} type 
 * @param {function} listener 
 * @private
 * @returns {handle} -
 * @memberOf dojox.gesture.Base
*/
dojox.gesture.Base.prototype._add=function(node, type, listener){};
/**
 * <b>Summary:</b><blockquote>
 *	 This module provides swipe gestures including:<br>
 *	 <br>
 *	 1. dojox.gesture.swipe<br>
 *	 <br>
 *	 A series of 'swipe' will be fired during touchmove, this will mostly<br>
 *	 be used to keep sliding the Dom target based on the swiped distance(dx, dy).<br>
 *	 <br>
 *	 2. dojox.gesture.swipe.end<br>
 *	 <br>
 *	 Fired when a swipe is ended so that an bounce animation may be applied<br>
 *	 to the dom target sliding to the final position.<br>
 *	 <br>
 *	 Following information will be included in the fired swipe events:<br>
 *	 <br>
 *	 1. type: 'swipe'|'swipe.end'<br>
 *	 <br>
 *	 2. time: an integer indicating the delta time(in milliseconds)<br>
 *	 <br>
 *	 3. dx: delta distance on X axis, dx less than 0 - moving left, dx larger than 0 - moving right<br>
 *	 <br>
 *	 4. dy: delta distance on Y axis, dy less than 0 - moving up, dY larger than 0 - moving down<br>
 *	 <br>
 *	 Note - dx and dy can also be used together for a hybrid swipe(both vertically and horizontally)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gesture.swipe} new instance
 * @example
 * A. Used with dojo.connect()
 * 	dojo.connect(node, dojox.gesture.swipe, function(e){});
 * 	dojo.connect(node, dojox.gesture.swipe.end, function(e){});
 * 
 * B. Used with dojo.on
 * 	define(['dojo/on', 'dojox/gesture/swipe'], function(on, swipe){
 * 		on(node, swipe, function(e){});
 * 		on(node, swipe.end, function(e){});
 * 
 * C. Used with dojox.gesture.swipe.* directly
 * 	dojox.gesture.swipe(node, function(e){});
 * 	dojox.gesture.swipe.end(node, function(e){});
*/
dojox.gesture.swipe=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, fire matched 'swipe.end' when touchend<br>
 * </blockquote>
 * @param {Object} data 
 * @param {Event} e 
 * @memberOf dojox.gesture.swipe
*/
dojox.gesture.swipe.prototype.release=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, set initial swipe info<br>
 * </blockquote>
 * @param {Object} data 
 * @param {Event} e 
 * @memberOf dojox.gesture.swipe
*/
dojox.gesture.swipe.prototype.press=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, fire matched 'swipe' during touchmove<br>
 * </blockquote>
 * @param {Object} data 
 * @param {Event} e 
 * @memberOf dojox.gesture.swipe
*/
dojox.gesture.swipe.prototype.move=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} data 
 * @param {mixed} e 
 * @memberOf dojox.gesture.swipe
*/
dojox.gesture.swipe.prototype.cancel=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Recognize and fire appropriate gesture events<br>
 * </blockquote>
 * @param {Object} data 
 * @param {Event} e 
 * @param {String} type 
 * @private
 * @memberOf dojox.gesture.swipe
*/
dojox.gesture.swipe.prototype._recognize=function(data, e, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate swipe information - time, dx and dy<br>
 * </blockquote>
 * @param {Object} data 
 * @param {Event} e 
 * @private
 * @memberOf dojox.gesture.swipe
*/
dojox.gesture.swipe.prototype._getSwipeInfo=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This module provides tap gesture event handlers:<br>
 *	 <br>
 *	 1. dojox.gesture.tap: 'tap' event<br>
 *	 <br>
 *	 2. dojox.gesture.tap.hold: 'tap.hold' event<br>
 *	 <br>
 *	 3. dojox.gesture.tap.doubletap: 'tap.doubletap' event<br>
 * </blockquote>
 * @class
 * @returns {dojox.gesture.tap} new instance
 * @example
 * A. Used with dojo.connect()
 * 	dojo.connect(node, dojox.gesture.tap, function(e){});
 * 	dojo.connect(node, dojox.gesture.tap.hold, function(e){});
 * 	dojo.connect(node, dojox.gesture.tap.doubletap, function(e){});
 * 
 * B. Used with dojo.on
 * 	define(['dojo/on', 'dojox/gesture/tap'], function(on, tap){
 * 		on(node, tap, function(e){});
 * 		on(node, tap.hold, function(e){});
 * 		on(node, tap.doubletap, function(e){});
 * 
 * C. Used with dojox.gesture.tap.* directly
 * 	dojox.gesture.tap(node, function(e){});
 * 	dojox.gesture.tap.hold(node, function(e){});
 * 	dojox.gesture.tap.doubletap(node, function(e){});
 * 
 * Though there is always a default gesture instance after being required, e.g
 * 	require(['dojox/gesture/tap'], function(){...});
 * 
 * It's possible to create a new one with different parameter setting:
 * 	var myTap = new dojox.gesture.tap.Tap({holdThreshold: 300});
 * 	dojo.connect(node, myTap, function(e){});
 * 	dojo.connect(node, myTap.hold, function(e){});
 * 	dojo.connect(node, myTap.doubletap, function(e){});
*/
dojox.gesture.tap=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, fire matched 'tap' or 'tap.doubletap' during touchend<br>
 * </blockquote>
 * @param {Object} data 
 * @param {Event} e 
 * @memberOf dojox.gesture.tap
*/
dojox.gesture.tap.prototype.release=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, record initial tap info and register a timeout checker for 'tap.hold'<br>
 * </blockquote>
 * @param {Object} data 
 * @param {Event} e 
 * @memberOf dojox.gesture.tap
*/
dojox.gesture.tap.prototype.press=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether it's an valid tap<br>
 * </blockquote>
 * @param {Object} data 
 * @param {Event} e 
 * @private
 * @memberOf dojox.gesture.tap
*/
dojox.gesture.tap.prototype._isTap=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the gesture data with new tap info<br>
 * </blockquote>
 * @param {Object} data 
 * @param {Event} e 
 * @private
 * @memberOf dojox.gesture.tap
*/
dojox.gesture.tap.prototype._initTap=function(data, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 switch the graphics implementation to the specified renderer.<br>
 * </blockquote>
 * @param {String|Object} renderer Either the string name of a renderer (eg. 'canvas', 'svg, ...) or the renderer
 * object to switch to.<br>
*/
dojox.gfx.switchTo=function(renderer){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts a CSS font string to a font object<br>
 * </blockquote>
 * Converts a CSS font string to a gfx font object. The CSS font<br>
 * string components should follow the W3C specified order<br>
 * (see http://www.w3.org/TR/CSS2/fonts.html#font-shorthand):<br>
 * style, variant, weight, size, optional line height (will be<br>
 * ignored), and family.
 * @see reference <a href="http://www.w3.org/TR/CSS2/fonts.html#font-shorthand):">http://www.w3.org/TR/CSS2/fonts.html#font-shorthand):</a>
 * @param {String} str a CSS font string
 * @returns {Object} -
*/
dojox.gfx.splitFontString=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the current number of pixels per point.<br>
 * </blockquote>
 * @returns {Number} -
*/
dojox.gfx.px_in_pt=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts pixels to points<br>
 * </blockquote>
 * @param {Number} len a value in pixels
 * @returns {Number} -
*/
dojox.gfx.px2pt=function(len){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts points to pixels<br>
 * </blockquote>
 * @param {Number} len a value in points
 * @returns {Number} -
*/
dojox.gfx.pt2px=function(len){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts any length value to pixels<br>
 * </blockquote>
 * @param {String} len a length, e.g., '12pc'
 * @returns {Number} -
*/
dojox.gfx.normalizedLength=function(len){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates an existing object with properties from an 'update'<br>
 *	 object<br>
 * </blockquote>
 * @param {Object} existed the target object to be updated
 * @param {Object} update the 'update' object, whose properties will be used to update
 * the existed object
 * @returns {Object} -
*/
dojox.gfx.normalizeParameters=function(existed, update){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts any legal color representation to normalized<br>
 *	 dojo.Color object<br>
 * </blockquote>
 * @param {dojo.Color|Array|string|Object} color 
 * @returns {dojo.Color} -
*/
dojox.gfx.normalizeColor=function(color){};
/**
 * <b>Summary:</b><blockquote>
 *	 copies the original object, and all copied properties from the<br>
 *	 'update' object<br>
 * </blockquote>
 * @param {Object} defaults the object to be cloned before updating
 * @param {Object} update the object, which properties are to be cloned during updating
 * @returns {Object} -
*/
dojox.gfx.makeParameters=function(defaults, update){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts a font object to a CSS font string<br>
 * </blockquote>
 * @param {Object:} font font object (see dojox.gfx.defaultFont)
 * @returns {Object} -
*/
dojox.gfx.makeFontString=function(font){};
/**
 * @param {String} url 
*/
dojox.gfx.getVectorFont=function(url){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts a number to a string using a fixed notation<br>
 * </blockquote>
 * @param {Number} x number to be converted
 * @param {Boolean} addSpace whether to add a space before a positive number
 * @returns {String} -
*/
dojox.gfx.formatNumber=function(x, addSpace){};
/**
 * <b>Summary:</b><blockquote>
 *	 compares event sources, returns true if they are equal<br>
 * </blockquote>
 * @param {Object} a first event source
 * @param {Object} b event source to compare against a
*/
dojox.gfx.equalSources=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 Decompose a 2D matrix into translation, scaling, and rotation components.<br>
 * </blockquote>
 * This function decompose a matrix into four logical components:<br>
 * translation, rotation, scaling, and one more rotation using SVD.<br>
 * The components should be applied in following order:<br>
 *  [translate, rotate(angle2), scale, rotate(angle1)]
 * @param {dojox.gfx.matrix.Matrix2D:} matrix a 2D matrix-like object
 * @returns {Object} -
*/
dojox.gfx.decompose=function(matrix){};
/**
 * @param {mixed} parentNode 
 * @param {mixed} width 
 * @param {mixed} height 
 * @param {mixed} textDir 
*/
dojox.gfx.createSurface=function(parentNode, width, height, textDir){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes classes from node.<br>
 * </blockquote>
 * @param {DomNode} node 
 * @param {String} classStr 
 * @private
*/
dojox.gfx._removeClass=function(node, classStr){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns whether or not the specified classes are a portion of the<br>
 *	 class list currently applied to the node.<br>
 *	 return (new RegExp('(^|\\s+)'+classStr+'(\\s+|$)')).test(node.className)	// Boolean<br>
 * </blockquote>
 * @param {DomNode} node 
 * @param {String} classStr 
 * @private
 * @returns {Boolean} -
*/
dojox.gfx._hasClass=function(node, classStr){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds the specified classes to the end of the class list on the<br>
 *	 passed node.<br>
 * </blockquote>
 * @param {DomNode} node 
 * @param {String} classStr 
 * @private
*/
dojox.gfx._addClass=function(node, classStr){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create this font object based on the SVG Font definition at url.<br>
 * </blockquote>
 * @param {String|dojo._Url} url 
*/
dojox.gfx.VectorFont=function(url){};
/**
*/
dojox.gfx.TextPath=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides some of dojox.gfx.Text properties, and adds some<br>
 *	 for bidi support.<br>
 * </blockquote>
*/
dojox.gfx.Text=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a hypothetical rectangle - {x, y, width, height}<br>
 * </blockquote>
 * This object is defined for documentation purposes.<br>
 * You should use the naked object instead: {x: 1, y: 2, width: 100, height: 200}.<br>
*/
dojox.gfx.Rectangle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a hypothetical 2D point to be used for drawings - {x, y}<br>
 * </blockquote>
 * This object is defined for documentation purposes.<br>
 * You should use the naked object instead: {x: 1, y: 2}.<br>
*/
dojox.gfx.Point=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object, which makes a shape follow the mouse,<br>
 *	 used as a default mover, and as a base class for custom movers<br>
 * </blockquote>
 * @param {dojox.gfx.Shape:} shape a shape object to be moved
 * @param {Event:} e a mouse event, which started the move;
 * only clientX and clientY properties are used
 * @param {Object:} [host] object which implements the functionality of the move,
 * and defines proper events (onMoveStart and onMoveStop)<br>
*/
dojox.gfx.Mover=function(shape, e, host){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object, which makes a shape moveable<br>
 * </blockquote>
 * @param {dojox.gfx.Shape:} shape a shape object to be moved
 * @param {Object:} params an optional object with additional parameters;
 * following parameters are recognized:<br>
*/
dojox.gfx.Moveable=function(shape, params){};
/**
*/
dojox.gfx.Group=function(){};
/**
 * @namespace
*/
dojox.gfx.vml={};
/**
 * @namespace
*/
dojox.gfx.vectorFontFitting={};
/**
 * @namespace
*/
dojox.gfx.utils={};
/**
 * @namespace
*/
dojox.gfx.svg={};
/**
 * @namespace
*/
dojox.gfx.silverlight={};
/**
 * @namespace
*/
dojox.gfx.shape={};
/**
 * @namespace
*/
dojox.gfx.path={};
/**
 * @namespace
*/
dojox.gfx.matrix={};
/**
 * @namespace
*/
dojox.gfx.gradutils={};
/**
 * @namespace
*/
dojox.gfx.gradient={};
/**
 * @namespace
*/
dojox.gfx.fx={};
/**
 * @namespace
*/
dojox.gfx.defaultVectorText={};
/**
 * @namespace
*/
dojox.gfx.defaultVectorFont={};
/**
 * @namespace
*/
dojox.gfx.defaultTextPath={};
/**
 * @namespace
*/
dojox.gfx.defaultText={};
/**
 * @namespace
*/
dojox.gfx.defaultStroke={};
/**
 * @namespace
*/
dojox.gfx.defaultRect={};
/**
 * @namespace
*/
dojox.gfx.defaultRadialGradient={};
/**
 * @namespace
*/
dojox.gfx.defaultPolyline={};
/**
 * @namespace
*/
dojox.gfx.defaultPattern={};
/**
 * @namespace
*/
dojox.gfx.defaultPath={};
/**
 * @namespace
*/
dojox.gfx.defaultLinearGradient={};
/**
 * @namespace
*/
dojox.gfx.defaultLine={};
/**
 * @namespace
*/
dojox.gfx.defaultImage={};
/**
 * @namespace
*/
dojox.gfx.defaultFont={};
/**
 * @namespace
*/
dojox.gfx.defaultEllipse={};
/**
 * @namespace
*/
dojox.gfx.defaultCircle={};
/**
 * @namespace
*/
dojox.gfx.canvasWithEvents={};
/**
 * @namespace
*/
dojox.gfx.canvas={};
/**
 * @namespace
*/
dojox.gfx.arc={};
/**
 * @namespace
 * @private
*/
dojox.gfx._base={};
/**
 * <b>Summary:</b><blockquote>
 *	 return a start point, 1st and 2nd control points, and an end point of<br>
 *	 a an arc, which is reflected on the x axis<br>
 * </blockquote>
 * @param {Number} alpha angle in radians, the arc will be 2 * angle size
*/
dojox.gfx.arc.unitArcAsBezier=function(alpha){};
/**
 * <b>Summary:</b><blockquote>
 *	 calculates an arc as a series of Bezier curves<br>
 *	 given the last point and a standard set of SVG arc parameters,<br>
 *	 it returns an array of arrays of parameters to form a series of<br>
 *	 absolute Bezier curves.<br>
 * </blockquote>
 * @param {Object} last a point-like object as a start of the arc
 * @param {Number} rx a horizontal radius for the virtual ellipse
 * @param {Number} ry a vertical radius for the virtual ellipse
 * @param {Number} xRotg a rotation of an x axis of the virtual ellipse in degrees
 * @param {Boolean} large which part of the ellipse will be used (the larger arc if true)
 * @param {Boolean} sweep direction of the arc (CW if true)
 * @param {Number} x the x coordinate of the end point of the arc
 * @param {Number} y the y coordinate of the end point of the arc
 * @returns {Array} -
*/
dojox.gfx.arc.arcAsBezier=function(last, rx, ry, xRotg, large, sweep, x, y){};

/**
 * <b>Summary:</b><blockquote>
 *	 returns a unique string for use with any DOM element<br>
 * </blockquote>
 * @private
*/
dojox.gfx._base._getUniqueId=function(){};
/**
 * @param {String} text 
 * @param {Object} style 
 * @param {String} [className] 
 * @private
*/
dojox.gfx._base._getTextBox=function(text, style, className){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object that has pixel equivilents of standard font<br>
 *	 size values.<br>
 * </blockquote>
 * @private
 * @returns {object} -
*/
dojox.gfx._base._getFontMeasurements=function(){};
/**
 * @param {mixed} recalculate 
 * @private
*/
dojox.gfx._base._getCachedFontMeasurements=function(recalculate){};
/**
 * @namespace
*/
dojox.canvas={};
/**
*/
dojox.canvas.attachSurface=function(){};
/**
 * @returns {for now} -
*/
dojox.canvas.attachNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a text shape (Canvas)<br>
 * </blockquote>
*/
dojox.gfx.canvas.TextPath=function(){};
/**
*/
dojox.gfx.canvas.Text=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a surface object to be used for drawings (Canvas)<br>
 * </blockquote>
*/
dojox.gfx.canvas.Surface=function(){};
/**
*/
dojox.gfx.canvas.Shape=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a rectangle shape (Canvas)<br>
 * </blockquote>
*/
dojox.gfx.canvas.Rect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a polyline/polygon shape (Canvas)<br>
 * </blockquote>
*/
dojox.gfx.canvas.Polyline=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a path shape (Canvas)<br>
 * </blockquote>
*/
dojox.gfx.canvas.Path=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a line shape (Canvas)<br>
 * </blockquote>
*/
dojox.gfx.canvas.Line=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an image shape (Canvas)<br>
 * </blockquote>
*/
dojox.gfx.canvas.Image=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a group shape (Canvas), which can be used<br>
 *	 to logically group shapes (e.g, to propagate matricies)<br>
 * </blockquote>
*/
dojox.gfx.canvas.Group=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an ellipse shape (Canvas)<br>
 * </blockquote>
*/
dojox.gfx.canvas.Ellipse=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a circle shape (Canvas)<br>
 * </blockquote>
*/
dojox.gfx.canvas.Circle=function(){};
/**
 * @class
 * @extends dojox.gfx.shape.Shape
 * @returns {dojox.gfx.canvas.Shape} new instance
*/
dojox.gfx.canvas.Shape=function(){};
/**
 * @memberOf dojox.gfx.canvas.Shape
*/
dojox.gfx.canvas.Shape.prototype.getEventSource=function(){};
/**
 * @memberOf dojox.gfx.canvas.Shape
*/
dojox.gfx.canvas.Shape.prototype.disconnect=function(){};
/**
 * @memberOf dojox.gfx.canvas.Shape
*/
dojox.gfx.canvas.Shape.prototype.connect=function(){};
/**
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Shape
*/
dojox.gfx.canvas.Shape.prototype._renderTransform=function(ctx){};
/**
 * @param {Object} ctx 
 * @param {Boolean} apply 
 * @private
 * @memberOf dojox.gfx.canvas.Shape
*/
dojox.gfx.canvas.Shape.prototype._renderStroke=function(ctx, apply){};
/**
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Shape
*/
dojox.gfx.canvas.Shape.prototype._renderShape=function(ctx){};
/**
 * @param {Object} ctx 
 * @param {Boolean} apply 
 * @private
 * @memberOf dojox.gfx.canvas.Shape
*/
dojox.gfx.canvas.Shape.prototype._renderFill=function(ctx, apply){};
/**
 * <b>Summary:</b><blockquote>
 *	 render the shape<br>
 * </blockquote>
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Shape
*/
dojox.gfx.canvas.Shape.prototype._render=function(ctx){};
/**
 * <b>Summary:</b><blockquote>
 *	 a group shape (Canvas), which can be used<br>
 *	 to logically group shapes (e.g, to propagate matricies)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.canvas.Group} new instance
*/
dojox.gfx.canvas.Group=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 render the group<br>
 * </blockquote>
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Group
*/
dojox.gfx.canvas.Group.prototype._render=function(ctx){};
/**
 * <b>Summary:</b><blockquote>
 *	 a rectangle shape (Canvas)<br>
 * </blockquote>
 * @class
 * @extends dojox.gfx.shape.Rect
 * @returns {dojox.gfx.canvas.Rect} new instance
*/
dojox.gfx.canvas.Rect=function(){};
/**
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Rect
*/
dojox.gfx.canvas.Rect.prototype._renderShape=function(ctx){};
/**
 * <b>Summary:</b><blockquote>
 *	 an ellipse shape (Canvas)<br>
 * </blockquote>
 * @class
 * @extends dojox.gfx.shape.Ellipse
 * @returns {dojox.gfx.canvas.Ellipse} new instance
*/
dojox.gfx.canvas.Ellipse=function(){};
/**
 * @memberOf dojox.gfx.canvas.Ellipse
*/
dojox.gfx.canvas.Ellipse.prototype.setShape=function(){};
/**
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Ellipse
*/
dojox.gfx.canvas.Ellipse.prototype._renderShape=function(ctx){};
/**
 * <b>Summary:</b><blockquote>
 *	 a circle shape (Canvas)<br>
 * </blockquote>
 * @class
 * @extends dojox.gfx.shape.Circle
 * @returns {dojox.gfx.canvas.Circle} new instance
*/
dojox.gfx.canvas.Circle=function(){};
/**
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Circle
*/
dojox.gfx.canvas.Circle.prototype._renderShape=function(ctx){};
/**
 * <b>Summary:</b><blockquote>
 *	 a line shape (Canvas)<br>
 * </blockquote>
 * @class
 * @extends dojox.gfx.shape.Line
 * @returns {dojox.gfx.canvas.Line} new instance
*/
dojox.gfx.canvas.Line=function(){};
/**
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Line
*/
dojox.gfx.canvas.Line.prototype._renderShape=function(ctx){};
/**
 * <b>Summary:</b><blockquote>
 *	 a polyline/polygon shape (Canvas)<br>
 * </blockquote>
 * @class
 * @extends dojox.gfx.shape.Polyline
 * @returns {dojox.gfx.canvas.Polyline} new instance
*/
dojox.gfx.canvas.Polyline=function(){};
/**
 * @memberOf dojox.gfx.canvas.Polyline
*/
dojox.gfx.canvas.Polyline.prototype.setShape=function(){};
/**
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Polyline
*/
dojox.gfx.canvas.Polyline.prototype._renderShape=function(ctx){};
/**
 * @namespace
*/
dojox.gfx.canvas.Polyline.shape={};
/**
 * <b>Summary:</b><blockquote>
 *	 an image shape (Canvas)<br>
 * </blockquote>
 * @class
 * @extends dojox.gfx.shape.Image
 * @returns {dojox.gfx.canvas.Image} new instance
*/
dojox.gfx.canvas.Image=function(){};
/**
 * @memberOf dojox.gfx.canvas.Image
*/
dojox.gfx.canvas.Image.prototype.setShape=function(){};
/**
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Image
*/
dojox.gfx.canvas.Image.prototype._renderShape=function(ctx){};
/**
 * @class
 * @extends dojox.gfx.shape.Text
 * @returns {dojox.gfx.canvas.Text} new instance
*/
dojox.gfx.canvas.Text=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 get the text width in pixels<br>
 * </blockquote>
 * @memberOf dojox.gfx.canvas.Text
*/
dojox.gfx.canvas.Text.prototype.getTextWidth=function(){};
/**
 * @private
 * @memberOf dojox.gfx.canvas.Text
*/
dojox.gfx.canvas.Text.prototype._setFont=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a text shape (Canvas)<br>
 *	 ctx : Object: the drawing context.<br>
 * </blockquote>
 * @param {mixed} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Text
*/
dojox.gfx.canvas.Text.prototype._renderShape=function(ctx){};
/**
 * <b>Summary:</b><blockquote>
 *	 render the shape<br>
 *	 ctx : Object: the drawing context.<br>
 * </blockquote>
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Text
*/
dojox.gfx.canvas.Text.prototype._render=function(ctx){};
/**
 * <b>Summary:</b><blockquote>
 *	 a path shape (Canvas)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.canvas.Path} new instance
*/
dojox.gfx.canvas.Path=function(){};
/**
 * @namespace
*/
dojox.gfx.canvas.Path.lastControl={};
/**
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype.setShape=function(){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._vLineToR=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._vLineToA=function(result, action, args){};
/**
 * @param {mixed} segment 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._updateWithSegment=function(segment){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._smoothCurveToR=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._smoothCurveToA=function(result, action, args){};
/**
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._renderShape=function(ctx){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._qSmoothCurveToR=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._qSmoothCurveToA=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._qCurveToR=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._qCurveToA=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._moveToR=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._moveToA=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._lineToR=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._lineToA=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._hLineToR=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._hLineToA=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._curveToR=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._curveToA=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._closePath=function(result, action, args){};
/**
 * @param {mixed} result 
 * @param {mixed} action 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.gfx.canvas.Path
*/
dojox.gfx.canvas.Path.prototype._arcTo=function(result, action, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 a text shape (Canvas)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.canvas.TextPath} new instance
*/
dojox.gfx.canvas.TextPath=function(){};
/**
 * @private
 * @memberOf dojox.gfx.canvas.TextPath
*/
dojox.gfx.canvas.TextPath.prototype._setText=function(){};
/**
 * @private
 * @memberOf dojox.gfx.canvas.TextPath
*/
dojox.gfx.canvas.TextPath.prototype._setFont=function(){};
/**
 * @param {Object} ctx 
 * @private
 * @memberOf dojox.gfx.canvas.TextPath
*/
dojox.gfx.canvas.TextPath.prototype._renderShape=function(ctx){};
/**
 * <b>Summary:</b><blockquote>
 *	 a surface object to be used for drawings (Canvas)<br>
 * </blockquote>
 * @class
 * @extends dojox.gfx.shape.Surface
 * @returns {dojox.gfx.canvas.Surface} new instance
*/
dojox.gfx.canvas.Surface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the width and height of the rawNode<br>
 * </blockquote>
 * @param {String:} width width of surface, e.g., &quot;100px&quot;
 * @param {String:} height height of surface, e.g., &quot;100px&quot;
 * @returns {self} -
 * @memberOf dojox.gfx.canvas.Surface
*/
dojox.gfx.canvas.Surface.prototype.setDimensions=function(width, height){};
/**
 * @memberOf dojox.gfx.canvas.Surface
*/
dojox.gfx.canvas.Surface.prototype.onImageLoad=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 internal method, which is called when we may need to redraw<br>
 * </blockquote>
 * @memberOf dojox.gfx.canvas.Surface
*/
dojox.gfx.canvas.Surface.prototype.makeDirty=function(){};
/**
 * @memberOf dojox.gfx.canvas.Surface
*/
dojox.gfx.canvas.Surface.prototype.getEventSource=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an object with properties &amp;quot;width&amp;quot; and &amp;quot;height&amp;quot;<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.gfx.canvas.Surface
*/
dojox.gfx.canvas.Surface.prototype.getDimensions=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 internal method, which starts an image download and renders, when it is ready<br>
 * </blockquote>
 * @param {Image:} img the image object
 * @param {String:} url the url of the image
 * @memberOf dojox.gfx.canvas.Surface
*/
dojox.gfx.canvas.Surface.prototype.downloadImage=function(img, url){};
/**
 * @memberOf dojox.gfx.canvas.Surface
*/
dojox.gfx.canvas.Surface.prototype.disconnect=function(){};
/**
 * @memberOf dojox.gfx.canvas.Surface
*/
dojox.gfx.canvas.Surface.prototype.connect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 render the all shapes<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gfx.canvas.Surface
*/
dojox.gfx.canvas.Surface.prototype._render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic text<br>
 * </blockquote>
 * @param {Node} rawNode a DOM Node
*/
dojox.gfx.shape.Text=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a surface object to be used for drawings<br>
 * </blockquote>
*/
dojox.gfx.shape.Surface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Shape object, which knows how to apply<br>
 *	 graphical attributes and transformations<br>
 * </blockquote>
*/
dojox.gfx.shape.Shape=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic rectangle<br>
 * </blockquote>
 * @param {Node} rawNode The underlying graphics system object (typically a DOM Node)
*/
dojox.gfx.shape.Rect=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic polyline/polygon<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @param {Node} rawNode a DOM Node
*/
dojox.gfx.shape.Polyline=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic line<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @param {Node} rawNode a DOM Node
*/
dojox.gfx.shape.Line=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic image<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @param {Node} rawNode a DOM Node
*/
dojox.gfx.shape.Image=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic ellipse<br>
 * </blockquote>
 * @param {Node} rawNode a DOM Node
*/
dojox.gfx.shape.Ellipse=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic circle<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @param {Node} rawNode a DOM Node
*/
dojox.gfx.shape.Circle=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Shape object, which knows how to apply<br>
 *	 graphical attributes and transformations<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.shape.Shape} new instance
*/
dojox.gfx.shape.Shape=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a transformation matrix<br>
 * </blockquote>
 * @param {dojox.gfx.Matrix2D} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx.Matrix2D<br>
 * constructor for a list of acceptable arguments)<br>
 * COULD BE RE-IMPLEMENTED BY THE RENDERER!
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.setTransform=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a stroke object<br>
 *	 (the default implementation simply ignores it)<br>
 * </blockquote>
 * @param {Object} stroke a stroke object
 * (see dojox.gfx.defaultStroke)<br>
 * COULD BE RE-IMPLEMENTED BY THE RENDERER!
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.setStroke=function(stroke){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a shape object<br>
 *	 (the default implementation simply ignores it)<br>
 * </blockquote>
 * @param {Object} shape a shape object
 * (see dojox.gfx.defaultPath,<br>
 * dojox.gfx.defaultPolyline,<br>
 * dojox.gfx.defaultRect,<br>
 * dojox.gfx.defaultEllipse,<br>
 * dojox.gfx.defaultCircle,<br>
 * dojox.gfx.defaultLine,<br>
 * or dojox.gfx.defaultImage)<br>
 * COULD BE RE-IMPLEMENTED BY THE RENDERER!
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.setShape=function(shape){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a fill object<br>
 *	 (the default implementation simply ignores it)<br>
 * </blockquote>
 * @param {Object} fill a fill object
 * (see dojox.gfx.defaultLinearGradient,<br>
 * dojox.gfx.defaultRadialGradient,<br>
 * dojox.gfx.defaultPattern,<br>
 * or dojo.Color)<br>
 * COULD BE RE-IMPLEMENTED BY THE RENDERER!
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.setFill=function(fill){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes the shape from its parent's list of shapes<br>
 * </blockquote>
 * @param {Boolean} silently if true, do not redraw a picture yet
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.removeShape=function(silently){};
/**
 * <b>Summary:</b><blockquote>
 *	 moves a shape to front of its parent's list of shapes<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.moveToFront=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 moves a shape to back of its parent's list of shapes<br>
 * </blockquote>
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.moveToBack=function(){};
/**
*/
dojox.gfx.shape.Shape.getUID=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an array of four points or null<br>
 *	 four points represent four corners of the untransformed bounding box<br>
 * </blockquote>
 * @returns {null|Array} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.getTransformedBoundingBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the current transformation matrix applied to this Shape or null<br>
 * </blockquote>
 * @returns {dojox.gfx.Matrix2D} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.getTransform=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the current stroke object or null<br>
 *	 (see dojox.gfx.defaultStroke)<br>
 * </blockquote>
 * @see dojox.gfx#defaultStroke
 * @returns {Object} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.getStroke=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the current Shape object or null<br>
 *	 (see dojox.gfx.defaultPath,<br>
 *	 dojox.gfx.defaultPolyline,<br>
 *	 dojox.gfx.defaultRect,<br>
 *	 dojox.gfx.defaultEllipse,<br>
 *	 dojox.gfx.defaultCircle,<br>
 *	 dojox.gfx.defaultLine,<br>
 *	 or dojox.gfx.defaultImage)<br>
 * </blockquote>
 * @see dojox.gfx.defaultPath
 * @returns {Object} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.getShape=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the parent Shape, Group or VirtualGroup or null if this Shape is unparented.<br>
 *	 (see dojox.gfx.Surface,<br>
 *	 dojox.gfx.shape.VirtualGroup,<br>
 *	 or dojox.gfx.Group)<br>
 * </blockquote>
 * @see dojox.gfx.Surface
 * @returns {Object} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.getParent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Different graphics rendering subsystems implement shapes in different ways.  This<br>
 *	 method provides access to the underlying graphics subsystem object.  Clients calling this<br>
 *	 method and using the return value must be careful not to try sharing or using the underlying node<br>
 *	 in a general way across renderer implementation.<br>
 *	 Returns the underlying graphics Node, or null if no underlying graphics node is used by this shape.<br>
 * </blockquote>
 * @returns {Node} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.getNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the current fill object or null<br>
 *	 (see dojox.gfx.defaultLinearGradient,<br>
 *	 dojox.gfx.defaultRadialGradient,<br>
 *	 dojox.gfx.defaultPattern,<br>
 *	 or dojo.Color)<br>
 * </blockquote>
 * @see dojox.gfx.defaultLinearGradient
 * @returns {Object} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.getFill=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a Node, which is used as<br>
 *	 a source of events for this shape<br>
 *	 COULD BE RE-IMPLEMENTED BY THE RENDERER!<br>
 * </blockquote>
 * @returns {Node} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.getEventSource=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the bounding box Rectanagle for this shape or null if a BoundingBox cannot be<br>
 *	 calculated for the shape on the current renderer or for shapes with no geometric area (points).<br>
 *	 A bounding box is a rectangular geometric region<br>
 *	 defining the X and Y extent of the shape.<br>
 *	 (see dojox.gfx.defaultRect)<br>
 * </blockquote>
 * @see dojox.gfx#defaultRect
 * @returns {dojox.gfx.Rectangle} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.getBoundingBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a shortcut for dojox.gfx.Shape.applyRightTransform<br>
 * </blockquote>
 * @param {dojox.gfx.Matrix2D} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx.Matrix2D<br>
 * constructor for a list of acceptable arguments)
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.applyTransform=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 multiplies the existing matrix with an argument on right side<br>
 *	 (this.matrix * matrix)<br>
 * </blockquote>
 * @param {dojox.gfx.Matrix2D} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx.Matrix2D<br>
 * constructor for a list of acceptable arguments)
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.applyRightTransform=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 multiplies the existing matrix with an argument on left side<br>
 *	 (matrix * this.matrix)<br>
 * </blockquote>
 * @param {dojox.gfx.Matrix2D} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx.Matrix2D<br>
 * constructor for a list of acceptable arguments)
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype.applyLeftTransform=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the parent matrix with new matrix<br>
 * </blockquote>
 * @param {dojox.gfx.Matrix2D} matrix a 2D matrix or a matrix-like object
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype._updateParentMatrix=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a parent<br>
 * </blockquote>
 * @param {Object} parent a parent or null
 * (see dojox.gfx.Surface,<br>
 * dojox.gfx.shape.VirtualGroup,<br>
 * or dojox.gfx.Group)
 * @param {dojox.gfx.Matrix2D} matrix a 2D matrix or a matrix-like object
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype._setParent=function(parent, matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 renderer-specific hook, see dojox.gfx.shape.Shape.moveToFront()<br>
 *	 COULD BE RE-IMPLEMENTED BY THE RENDERER!<br>
 * </blockquote>
 * @see dojox.gfx.shape
 * @private
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype._moveToFront=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 renderer-specific hook, see dojox.gfx.shape.Shape.moveToFront()<br>
 *	 COULD BE RE-IMPLEMENTED BY THE RENDERER!<br>
 * </blockquote>
 * @see dojox.gfx.shape
 * @private
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype._moveToBack=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the cumulative ('real') transformation matrix<br>
 *	 by combining the shape's matrix with its parent's matrix<br>
 * </blockquote>
 * @private
 * @returns {dojox.gfx.Matrix2D} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype._getRealMatrix=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 physically sets a matrix<br>
 *	 COULD BE RE-IMPLEMENTED BY THE RENDERER!<br>
 * </blockquote>
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Shape
*/
dojox.gfx.shape.Shape.prototype._applyTransform=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic rectangle<br>
 * </blockquote>
 * @class
 * @param {Node} rawNode The underlying graphics system object (typically a DOM Node)
 * @returns {dojox.gfx.shape.Rect} new instance
*/
dojox.gfx.shape.Rect=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the bounding box (its shape in this case)<br>
 * </blockquote>
 * @returns {dojox.gfx.Rectangle} -
 * @memberOf dojox.gfx.shape.Rect
*/
dojox.gfx.shape.Rect.prototype.getBoundingBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic ellipse<br>
 * </blockquote>
 * @class
 * @param {Node} rawNode a DOM Node
 * @returns {dojox.gfx.shape.Ellipse} new instance
*/
dojox.gfx.shape.Ellipse=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the bounding box<br>
 * </blockquote>
 * @returns {dojox.gfx.Rectangle} -
 * @memberOf dojox.gfx.shape.Ellipse
*/
dojox.gfx.shape.Ellipse.prototype.getBoundingBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic circle<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @class
 * @param {Node} rawNode a DOM Node
 * @returns {dojox.gfx.shape.Circle} new instance
*/
dojox.gfx.shape.Circle=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the bounding box<br>
 * </blockquote>
 * @returns {dojox.gfx.Rectangle} -
 * @memberOf dojox.gfx.shape.Circle
*/
dojox.gfx.shape.Circle.prototype.getBoundingBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic line<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @class
 * @param {Node} rawNode a DOM Node
 * @returns {dojox.gfx.shape.Line} new instance
*/
dojox.gfx.shape.Line=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the bounding box<br>
 * </blockquote>
 * @returns {dojox.gfx.Rectangle} -
 * @memberOf dojox.gfx.shape.Line
*/
dojox.gfx.shape.Line.prototype.getBoundingBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic image<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @class
 * @param {Node} rawNode a DOM Node
 * @returns {dojox.gfx.shape.Image} new instance
*/
dojox.gfx.shape.Image=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 ignore setting a stroke style<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Image
*/
dojox.gfx.shape.Image.prototype.setStroke=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 ignore setting a fill style<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Image
*/
dojox.gfx.shape.Image.prototype.setFill=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the bounding box (its shape in this case)<br>
 * </blockquote>
 * @returns {dojox.gfx.Rectangle} -
 * @memberOf dojox.gfx.shape.Image
*/
dojox.gfx.shape.Image.prototype.getBoundingBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic text<br>
 * </blockquote>
 * @class
 * @param {Node} rawNode a DOM Node
 * @returns {dojox.gfx.shape.Text} new instance
*/
dojox.gfx.shape.Text=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a font for text<br>
 * </blockquote>
 * @param {Object} newFont a font object (see dojox.gfx.defaultFont) or a font string
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Text
*/
dojox.gfx.shape.Text.prototype.setFont=function(newFont){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the current font object or null<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.gfx.shape.Text
*/
dojox.gfx.shape.Text.prototype.getFont=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a surface object to be used for drawings<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.shape.Surface} new instance
*/
dojox.gfx.shape.Surface=function(){};
/**
 * @namespace
 * @private
*/
dojox.gfx.shape.Surface._parent={};
/**
 * @param {Object|Null} context 
 * @param {Function|String} method 
 * @memberOf dojox.gfx.shape.Surface
*/
dojox.gfx.shape.Surface.prototype.whenLoaded=function(context, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used for propogation and change of textDir.<br>
 *	 newTextDir will be forced as textDir for all of it's children (Group/Text/TextPath).<br>
 * </blockquote>
 * @param {String} newTextDir 
 * @memberOf dojox.gfx.shape.Surface
*/
dojox.gfx.shape.Surface.prototype.setTextDir=function(newTextDir){};
/**
 * <b>Summary:</b><blockquote>
 *	 local event, fired once when the surface is created<br>
 *	 asynchronously, used only when isLoaded is false, required<br>
 *	 only for Silverlight.<br>
 * </blockquote>
 * @param {dojox.gfx.Surface} surface 
 * @memberOf dojox.gfx.shape.Surface
*/
dojox.gfx.shape.Surface.prototype.onLoad=function(surface){};
/**
 * @memberOf dojox.gfx.shape.Surface
*/
dojox.gfx.shape.Surface.prototype.getTextDir=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a node, which can be used to attach event listeners<br>
 * </blockquote>
 * @returns {Node} -
 * @memberOf dojox.gfx.shape.Surface
*/
dojox.gfx.shape.Surface.prototype.getEventSource=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 destroy all relevant external resources and release all<br>
 *	 external references to make this object garbage-collectible<br>
 * </blockquote>
 * @memberOf dojox.gfx.shape.Surface
*/
dojox.gfx.shape.Surface.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 always returns the identity matrix<br>
 * </blockquote>
 * @private
 * @returns {dojox.gfx.Matrix2D} -
 * @memberOf dojox.gfx.shape.Surface
*/
dojox.gfx.shape.Surface.prototype._getRealMatrix=function(){};
/**
*/
dojox.gfx.canvasWithEvents.TextPath=function(){};
/**
*/
dojox.gfx.canvasWithEvents.Text=function(){};
/**
*/
dojox.gfx.canvasWithEvents.Surface=function(){};
/**
*/
dojox.gfx.canvasWithEvents.Shape=function(){};
/**
*/
dojox.gfx.canvasWithEvents.Rect=function(){};
/**
*/
dojox.gfx.canvasWithEvents.Polyline=function(){};
/**
*/
dojox.gfx.canvasWithEvents.Path=function(){};
/**
*/
dojox.gfx.canvasWithEvents.Line=function(){};
/**
*/
dojox.gfx.canvasWithEvents.Image=function(){};
/**
*/
dojox.gfx.canvasWithEvents.Group=function(){};
/**
*/
dojox.gfx.canvasWithEvents.Ellipse=function(){};
/**
*/
dojox.gfx.canvasWithEvents.Circle=function(){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.Shape} new instance
*/
dojox.gfx.canvasWithEvents.Shape=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.touchstart=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.touchmove=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.touchend=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.ontouchstart=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.ontouchmove=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.ontouchend=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.onmouseup=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.onmouseover=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.onmouseout=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.onmousemove=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.onmouseleave=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.onmouseenter=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.onmousedown=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.onkeyup=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.onkeydown=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.ondblclick=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.oncontextmenu=function(){};
/**
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.onclick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns this gfx shape event source, which is the surface rawnode in the case of canvas.<br>
 * </blockquote>
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.getEventSource=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 disconnects an event handler<br>
 * </blockquote>
 * @param {mixed} token 
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.disconnect=function(token){};
/**
 * <b>Summary:</b><blockquote>
 *	 connects a handler to an event on this shape<br>
 * </blockquote>
 * @param {mixed} name 
 * @param {mixed} object 
 * @param {mixed} method 
 * @returns {Object} -
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype.connect=function(name, object, method){};
/**
 * @param {Object} ctx 
 * @param {Array} pos 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype._testInputs=function(ctx, pos){};
/**
 * <b>Summary:</b><blockquote>
 *	 render stroke for the shape<br>
 * </blockquote>
 * @param {Object} ctx a canvas context object
 * @param {Boolean} apply whether ctx.stroke() shall be called
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype._renderStroke=function(ctx, apply){};
/**
 * <b>Summary:</b><blockquote>
 *	 render fill for the shape<br>
 * </blockquote>
 * @param {Object} ctx a canvas context object
 * @param {Boolean} apply whether ctx.fill() shall be called
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype._renderFill=function(ctx, apply){};
/**
 * @param {Object} ctx 
 * @param {Array} pos 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype._hitTestPixel=function(ctx, pos){};
/**
 * @param {mixed} ctx 
 * @param {mixed} x 
 * @param {mixed} y 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Shape
*/
dojox.gfx.canvasWithEvents.Shape.prototype._hitTestGeometry=function(ctx, x, y){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.Group} new instance
*/
dojox.gfx.canvasWithEvents.Group=function(){};
/**
 * @param {Object} ctx 
 * @param {Array} pos 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Group
*/
dojox.gfx.canvasWithEvents.Group.prototype._testInputs=function(ctx, pos){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.Image} new instance
*/
dojox.gfx.canvasWithEvents.Image=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 render image<br>
 * </blockquote>
 * @param {Object} ctx a canvas context object
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Image
*/
dojox.gfx.canvasWithEvents.Image.prototype._renderShape=function(ctx){};
/**
 * @param {mixed} ctx 
 * @param {mixed} x 
 * @param {mixed} y 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Image
*/
dojox.gfx.canvasWithEvents.Image.prototype._hitTestGeometry=function(ctx, x, y){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.Text} new instance
*/
dojox.gfx.canvasWithEvents.Text=function(){};
/**
 * @param {mixed} ctx 
 * @param {mixed} pos 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Text
*/
dojox.gfx.canvasWithEvents.Text.prototype._testInputs=function(ctx, pos){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.Rect} new instance
*/
dojox.gfx.canvasWithEvents.Rect=function(){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.Circle} new instance
*/
dojox.gfx.canvasWithEvents.Circle=function(){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.Ellipse} new instance
*/
dojox.gfx.canvasWithEvents.Ellipse=function(){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.Line} new instance
*/
dojox.gfx.canvasWithEvents.Line=function(){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.Polyline} new instance
*/
dojox.gfx.canvasWithEvents.Polyline=function(){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.Path} new instance
*/
dojox.gfx.canvasWithEvents.Path=function(){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.TextPath} new instance
*/
dojox.gfx.canvasWithEvents.TextPath=function(){};
/**
 * @class
 * @returns {dojox.gfx.canvasWithEvents.Surface} new instance
*/
dojox.gfx.canvasWithEvents.Surface=function(){};
/**
 * @namespace
 * @private
*/
dojox.gfx.canvasWithEvents.Surface._eventsH={};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the canvas DOM node for surface-level events<br>
 * </blockquote>
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype.getEventSource=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 stops the move, deletes all references, so the object can be garbage-collected<br>
 * </blockquote>
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 connects a handler to an event on this surface<br>
 *	 name : String<br>
 *	 The event name<br>
 * </blockquote>
 * @param {String} name 
 * @param {Object} object The object that method will receive as &quot;this&quot;.
 * @param {Function|String} method Function A function reference, or name of a function in context.
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype.connect=function(name, object, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the shape under the mouse event<br>
 * </blockquote>
 * @param {mouse} evt event
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._whatsUnderEvent=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 setup event listeners if not yet<br>
 * </blockquote>
 * @param {mixed} eventName 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._setupEvents=function(eventName){};
/**
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._ontouchstartImpl_=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 triggers ontouchstart<br>
 *	 this._pick.curr = an array of target for touch event, one target instance for mouse events<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._ontouchstart=function(e){};
/**
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._ontouchmoveImpl_=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 triggers ontouchmove<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._ontouchmove=function(e){};
/**
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._ontouchendImpl_=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 triggers ontouchend<br>
 *	 this._pick.curr = an array of target for touch event, one target instance for mouse events<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._ontouchend=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 triggers onmouseup<br>
 *	 this._pick.curr = an array of target for touch event, one target instance for mouse events<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._onmouseup=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 triggers onmousemove, onmouseenter, onmouseleave<br>
 *	 this._pick.curr = an array of target for touch event, one target instance for mouse events<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._onmousemove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 triggers onmousedown<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._onmousedown=function(e){};
/**
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._onkeyup=function(){};
/**
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._onkeydown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 triggers onclick<br>
 *	 this._pick.curr = an array of target for touch event, one target instance for mouse events<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._ondblclick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 triggers onclick<br>
 *	 this._pick.curr = an array of target for touch event, one target instance for mouse events<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._oncontextmenu=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 triggers onclick<br>
 *	 this._pick.curr = an array of target for touch event, one target instance for mouse events<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._onclick=function(e){};
/**
 * @param {mixed} base 
 * @param {mixed} method 
 * @param {mixed} event 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._invokeHandler=function(base, method, event){};
/**
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._initMirrorCanvas=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.gfx.canvasWithEvents.Surface
*/
dojox.gfx.canvasWithEvents.Surface.prototype._fireTouchEvent=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation which will change transformation over time.<br>
 * </blockquote>
 * @param {Object} args 
 * @returns {dojo.Animation} -
 * @example
 * 	dojox.gfx.fx.animateTransform{{
 * 		shape: shape,
 * 		duration: 500,
 * 		transform: [
 * 			{name: "translate", start: [0, 0], end: [200, 200]},
 * 			{name: "original"}
 * 		]
 * 	}).play();
*/
dojox.gfx.fx.animateTransform=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation which will change stroke properties over time.<br>
 * </blockquote>
 * @param {Object} args 
 * @returns {dojo.Animation} -
 * @example
 * 	dojox.gfx.fx.animateStroke{{
 * 		shape: shape,
 * 		duration: 500,
 * 		color: {start: "red", end: "green"},
 * 		width: {end: 15},
 * 		join:  {values: ["miter", "bevel", "round"]}
 * 	}).play();
*/
dojox.gfx.fx.animateStroke=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation which will change font properties over time.<br>
 * </blockquote>
 * @param {Object} args 
 * @returns {dojo.Animation} -
 * @example
 * 	dojox.gfx.fx.animateFont{{
 * 		shape: shape,
 * 		duration: 500,
 * 		variant: {values: ["normal", "small-caps"]},
 * 		size:  {end: 10, units: "pt"}
 * 	}).play();
*/
dojox.gfx.fx.animateFont=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an animation which will change fill color over time.<br>
 *	 Only solid fill color is supported at the moment<br>
 * </blockquote>
 * @param {Object} args 
 * @returns {dojo.Animation} -
 * @example
 * 	dojox.gfx.fx.animateFill{{
 * 		shape: shape,
 * 		duration: 500,
 * 		color: {start: "red", end: "green"}
 * 	}).play();
*/
dojox.gfx.fx.animateFill=function(args){};
/**
 * @class
 * @returns {dojox.gfx.Group} new instance
*/
dojox.gfx.Group=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Used for propogation and change of textDir.<br>
 *	 newTextDir will be forced as textDir for all of it's children (Group/Text/TextPath).<br>
 * </blockquote>
 * @param {String} newTextDir 
 * @memberOf dojox.gfx.Group
*/
dojox.gfx.Group.prototype.setTextDir=function(newTextDir){};
/**
 * @memberOf dojox.gfx.Group
*/
dojox.gfx.Group.prototype.getTextDir=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides some of dojox.gfx.Text properties, and adds some<br>
 *	 for bidi support.<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.Text} new instance
*/
dojox.gfx.Text=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Applies the right transform on text, according to renderer.<br>
 * </blockquote>
 * @param {String} text the string for manipulation, by default return value.
 * @param {String} textDir Text direction.
 * Can be:<br>
 * 1. &quot;ltr&quot; - for left to right layout.<br>
 * 2. &quot;rtl&quot; - for right to left layout<br>
 * 3. &quot;auto&quot; - for contextual layout: the first strong letter decides the direction.<br>
 * discription:<br>
 * Finds the right transformation that should be applied on the text, according to renderer.<br>
 * Was tested in:<br>
 * Renderers (browser for testing):<br>
 * canvas (FF, Chrome, Safari),<br>
 * vml (IE),<br>
 * svg (FF, Chrome, Safari, Opera),<br>
 * silverlight (IE, Chrome, Safari, Opera),<br>
 * svgWeb(FF, Chrome, Safari, Opera, IE).<br>
 * Browsers [browser version that was tested]:<br>
 * IE [6,7,8], FF [3.6],<br>
 * Chrome (latest for March 2011),<br>
 * Safari [5.0.3],<br>
 * Opera [11.01].
 * @memberOf dojox.gfx.Text
*/
dojox.gfx.Text.prototype.formatText=function(text, textDir){};
/**
 * @param {mixed} newShape 
 * @memberOf dojox.gfx.Text
*/
dojox.gfx.Text.prototype.bidiPreprocess=function(newShape){};
/**
 * @class
 * @returns {dojox.gfx.TextPath} new instance
*/
dojox.gfx.TextPath=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Applies the right transform on text, according to renderer.<br>
 * </blockquote>
 * @param {String} text the string for manipulation, by default return value.
 * @param {String} textDir text direction direction.
 * Can be:<br>
 * 1. &quot;ltr&quot; - for left to right layout.<br>
 * 2. &quot;rtl&quot; - for right to left layout<br>
 * 3. &quot;auto&quot; - for contextual layout: the first strong letter decides the direction.<br>
 * discription:<br>
 * Finds the right transformation that should be applied on the text, according to renderer.<br>
 * Was tested in:<br>
 * Renderers:<br>
 * canvas (FF, Chrome, Safari), vml (IE), svg (FF, Chrome, Safari, Opera), silverlight (IE8), svgWeb(FF, Chrome, Safari, Opera, IE).<br>
 * Browsers:<br>
 * IE [6,7,8], FF [3.6], Chrome (latest for February 2011), Safari [5.0.3], Opera [11.01].
 * @memberOf dojox.gfx.TextPath
*/
dojox.gfx.TextPath.prototype.formatText=function(text, textDir){};
/**
 * @param {mixed} newText 
 * @memberOf dojox.gfx.TextPath
*/
dojox.gfx.TextPath.prototype.bidiPreprocess=function(newText){};
/**
 * @class
 * @returns {dojox.gfx.TextPath.bidiPreprocess} new instance
*/
dojox.gfx.TextPath.bidiPreprocess=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Recalculates a gradient from 0-1 window to<br>
 *	 &amp;quot;from&amp;quot;-&amp;quot;to&amp;quot; window blending and replicating colors,<br>
 *	 if necessary.<br>
 * </blockquote>
 * @param {Array} stops input gradient as a list of colors with offsets
 * (see dojox.gfx.defaultLinearGradient and dojox.gfx.defaultRadialGradient)
 * @param {Number} from the beginning of the window, should be less than &quot;to&quot;
 * @param {Number} to the end of the window, should be more than &quot;from&quot;
*/
dojox.gfx.gradient.rescale=function(stops, from, to){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a new gradient using the &amp;quot;VML algorithm&amp;quot; and suitable for VML.<br>
 * </blockquote>
 * @param {dojox.gfx.Matrix2D|Null:} matrix matrix to apply to a shape and its gradient
 * @param {Object:} gradient a linear gradient object to be transformed
 * @param {dojox.gfx.Point:} tl top-left corner of shape's bounding box
 * @param {dojox.gfx.Point:} rb right-bottom corner of shape's bounding box
 * @param {dojox.gfx.Point:} ttl top-left corner of shape's transformed bounding box
 * @param {dojox.gfx.Point:} trb right-bottom corner of shape's transformed bounding box
*/
dojox.gfx.gradient.project=function(matrix, gradient, tl, rb, ttl, trb){};
/**
 * <b>Summary:</b><blockquote>
 *	 reverses a gradient<br>
 * </blockquote>
 * @param {Object:} fill fill object
 * @returns {Object} -
*/
dojox.gfx.gradutils.reverse=function(fill){};
/**
 * <b>Summary:</b><blockquote>
 *	 sample a color from a gradient using a point<br>
 * </blockquote>
 * @param {Object:} fill fill object
 * @param {dojox.gfx.Point:} pt point where to sample a color
 * @returns {dojo.Color} -
*/
dojox.gfx.gradutils.getColor=function(fill, pt){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a translation matrix<br>
 * </blockquote>
 * The resulting matrix is used to translate (move) points by specified offsets.
 * @param {Number:} a an x coordinate value
 * @param {Number:} b a y coordinate value
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.translate=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 skews a picture along the y axis using a specified point as a center of skewing<br>
 * </blockquote>
 * Compare with dojox.gfx.matrix.skewYg().
 * @param {Number} degree Number: an skewing angle in degrees
 * @param {Number||Point} a Number: an x component of a central point
 * @param {Number} [b] Number: a y component of a central point
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.skewYgAt=function(degree, a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a y skewing matrix<br>
 * </blockquote>
 * The resulting matrix is used to skew points in the y dimension<br>
 * around the origin of coordinates (0, 0) by specified degree.<br>
 * See dojox.gfx.matrix.skewY() for comparison.
 * @param {Number:} degree an skewing angle in degrees
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.skewYg=function(degree){};
/**
 * <b>Summary:</b><blockquote>
 *	 skews a picture along the y axis using a specified point as a center of skewing<br>
 * </blockquote>
 * Compare with dojox.gfx.matrix.skewY().
 * @param {Number:} angle an skewing angle in radians
 * @param {Number:} a an x component of a central point
 * @param {Number:} b a y component of a central point
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.skewYAt=function(angle, a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a y skewing matrix<br>
 * </blockquote>
 * The resulting matrix is used to skew points in the y dimension<br>
 * around the origin of coordinates (0, 0) by specified angle.
 * @param {Number:} angle an skewing angle in radians
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.skewY=function(angle){};
/**
 * <b>Summary:</b><blockquote>
 *	 skews a picture along the x axis using a specified point as a center of skewing<br>
 * </blockquote>
 * Compare with dojox.gfx.matrix.skewXg().
 * @param {Number:} degree an skewing angle in degrees
 * @param {Number:} a an x component of a central point
 * @param {Number:} b a y component of a central point
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.skewXgAt=function(degree, a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms an x skewing matrix<br>
 * </blockquote>
 * The resulting matrix is used to skew points in the x dimension<br>
 * around the origin of coordinates (0, 0) by specified degree.<br>
 * See dojox.gfx.matrix.skewX() for comparison.
 * @param {Number:} degree an skewing angle in degrees
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.skewXg=function(degree){};
/**
 * <b>Summary:</b><blockquote>
 *	 skews a picture along the x axis using a specified point as a center of skewing<br>
 * </blockquote>
 * Compare with dojox.gfx.matrix.skewX().
 * @param {Number:} angle an skewing angle in radians
 * @param {Number:} a an x component of a central point
 * @param {Number:} b a y component of a central point
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.skewXAt=function(angle, a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms an x skewing matrix<br>
 * </blockquote>
 * The resulting matrix is used to skew points in the x dimension<br>
 * around the origin of coordinates (0, 0) by specified angle.
 * @param {Number:} angle an skewing angle in radians
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.skewX=function(angle){};
/**
 * <b>Summary:</b><blockquote>
 *	 scales a picture using a specified point as a center of scaling<br>
 * </blockquote>
 * Compare with dojox.gfx.matrix.scale().
 * @param {Number:} a a scaling factor used for the x coordinate
 * @param {Number:} b a scaling factor used for the y coordinate
 * @param {Number:} c an x component of a central point
 * @param {Number:} d a y component of a central point
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.scaleAt=function(a, b, c, d){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a scaling matrix<br>
 * </blockquote>
 * The resulting matrix is used to scale (magnify) points by specified offsets.
 * @param {Number:} a a scaling factor used for the x coordinate
 * @param {Number:} b a scaling factor used for the y coordinate
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.scale=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 rotates a picture using a specified point as a center of rotation<br>
 * </blockquote>
 * Compare with dojox.gfx.matrix.rotateg().
 * @param {Number:} degree an angle of rotation in degrees (&gt;0 for CW)
 * @param {Number:} a an x component of a central point
 * @param {Number:} b a y component of a central point
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.rotategAt=function(degree, a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified degree.<br>
 * See dojox.gfx.matrix.rotate() for comparison.
 * @param {Number:} degree an angle of rotation in degrees (&gt;0 for CW)
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.rotateg=function(degree){};
/**
 * <b>Summary:</b><blockquote>
 *	 rotates a picture using a specified point as a center of rotation<br>
 * </blockquote>
 * Compare with dojox.gfx.matrix.rotate().
 * @param {Number:} angle an angle of rotation in radians (&gt;0 for CW)
 * @param {Number:} a an x component of a central point
 * @param {Number:} b a y component of a central point
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.rotateAt=function(angle, a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified angle.
 * @param {Number:} angle an angle of rotation in radians (&gt;0 for CW)
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.rotate=function(angle){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a reflection matrix<br>
 * </blockquote>
 * The resulting matrix is used to reflect points around a vector,<br>
 * which goes through the origin.
 * @param {dojox.gfx.Point:} a a point-like object, which specifies a vector of reflection
 * @param {null} b 
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.reflect=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms an orthogonal projection matrix<br>
 * </blockquote>
 * The resulting matrix is used to project points orthogonally on a vector,<br>
 * which goes through the origin.
 * @param {dojox.gfx.Point:} a a point-like object, which specifies a vector of projection
 * @param {null} b 
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.project=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts an object to a matrix, if necessary<br>
 * </blockquote>
 * Converts any 2D matrix-like object or an array of<br>
 * such objects to a valid dojox.gfx.matrix.Matrix2D object.
 * @param {Object:} matrix an object, which is converted to a matrix, if necessary
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.normalize=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a matrix to a point<br>
 * </blockquote>
 * @param {dojox.gfx.matrix.Matrix2D:} matrix a 2D matrix object to be applied
 * @param {Number||Point} a Number: an x coordinate of a point
 * @param {Number} [b] Number: a y coordinate of a point
 * @returns {dojox.gfx.Point} -
*/
dojox.gfx.matrix.multiplyPoint=function(matrix, a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 combines matrices by multiplying them sequentially in the given order<br>
 * </blockquote>
 * @param {dojox.gfx.matrix.Matrix2D:} matrix a 2D matrix-like object,
 * all subsequent arguments are matrix-like objects too
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.multiply=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 inverts a 2D matrix<br>
 * </blockquote>
 * @param {dojox.gfx.matrix.Matrix2D:} matrix a 2D matrix-like object to be inverted
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.invert=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a copy of a 2D matrix<br>
 * </blockquote>
 * @param {dojox.gfx.matrix.Matrix2D:} matrix a 2D matrix-like object to be cloned
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix.clone=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a matrix at a centrtal point<br>
 * </blockquote>
 * @param {dojox.gfx.matrix.Matrix2D:} matrix a 2D matrix-like object, which is applied at a central point
 * @param {Number:} x an x component of the central point
 * @param {Number:} y a y component of the central point
 * @private
 * @returns {dojox.gfx.matrix.Matrix2D} -
*/
dojox.gfx.matrix._sandwich=function(matrix, x, y){};
/**
 * @param {mixed} radian 
 * @private
*/
dojox.gfx.matrix._radToDeg=function(radian){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a matrix to a point<br>
 * </blockquote>
 * @param {dojox.gfx.matrix.Matrix2D:} matrix a 2D matrix object to be applied
 * @param {Number:} x an x coordinate of a point
 * @param {Number:} y a y coordinate of a point
 * @private
 * @returns {dojox.gfx.Point} -
*/
dojox.gfx.matrix._multiplyPoint=function(matrix, x, y){};
/**
 * @param {mixed} degree 
 * @private
*/
dojox.gfx.matrix._degToRad=function(degree){};
/**
 * <b>Summary:</b><blockquote>
 *	 a 2D matrix object<br>
 * </blockquote>
 * Normalizes a 2D matrix-like object. If arrays is passed,<br>
 * all objects of the array are normalized and multiplied sequentially.
 * @param {Object} arg a 2D matrix-like object, a number, or an array of such objects
*/
dojox.gfx.matrix.Matrix2D=function(arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 a 2D matrix object<br>
 * </blockquote>
 * Normalizes a 2D matrix-like object. If arrays is passed,<br>
 * all objects of the array are normalized and multiplied sequentially.
 * @class
 * @returns {dojox.gfx.matrix.Matrix2D} new instance
*/
dojox.gfx.matrix.Matrix2D=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object, which makes a shape moveable<br>
 * </blockquote>
 * @class
 * @param {dojox.gfx.Shape:} shape a shape object to be moved
 * @param {Object:} params an optional object with additional parameters;
 * following parameters are recognized:
 * @returns {dojox.gfx.Moveable} new instance
*/
dojox.gfx.Moveable=function(shape, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 called before every incremental move,<br>
 *	 can be overwritten.<br>
 * </blockquote>
 * @param {dojox.gfx.Mover} mover 
 * @param {Object} shift 
 * @memberOf dojox.gfx.Moveable
*/
dojox.gfx.Moveable.prototype.onMoving=function(mover, shift){};
/**
 * <b>Summary:</b><blockquote>
 *	 called after every incremental move,<br>
 *	 can be overwritten.<br>
 * </blockquote>
 * @param {dojox.gfx.Mover} mover 
 * @param {Object} shift 
 * @memberOf dojox.gfx.Moveable
*/
dojox.gfx.Moveable.prototype.onMoved=function(mover, shift){};
/**
 * <b>Summary:</b><blockquote>
 *	 called after every move operation<br>
 * </blockquote>
 * @param {dojox.gfx.Mover} mover 
 * @memberOf dojox.gfx.Moveable
*/
dojox.gfx.Moveable.prototype.onMoveStop=function(mover){};
/**
 * <b>Summary:</b><blockquote>
 *	 called before every move operation<br>
 * </blockquote>
 * @param {dojox.gfx.Mover} mover 
 * @memberOf dojox.gfx.Moveable
*/
dojox.gfx.Moveable.prototype.onMoveStart=function(mover){};
/**
 * <b>Summary:</b><blockquote>
 *	 called during every move notification,<br>
 *	 should actually move the node, can be overwritten.<br>
 * </blockquote>
 * @param {dojox.gfx.Mover} mover 
 * @param {Object} shift 
 * @memberOf dojox.gfx.Moveable
*/
dojox.gfx.Moveable.prototype.onMove=function(mover, shift){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmouseup, used only for delayed delayed drags<br>
 * </blockquote>
 * @param {Event:} e mouse event
 * @memberOf dojox.gfx.Moveable
*/
dojox.gfx.Moveable.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousemove, used only for delayed drags<br>
 * </blockquote>
 * @param {Event:} e mouse event
 * @memberOf dojox.gfx.Moveable
*/
dojox.gfx.Moveable.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousedown, creates a Mover for the shape<br>
 * </blockquote>
 * @param {Event:} e mouse event
 * @memberOf dojox.gfx.Moveable
*/
dojox.gfx.Moveable.prototype.onMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 called during the very first move notification,<br>
 *	 can be used to initialize coordinates, can be overwritten.<br>
 * </blockquote>
 * @param {dojox.gfx.Mover} mover 
 * @memberOf dojox.gfx.Moveable
*/
dojox.gfx.Moveable.prototype.onFirstMove=function(mover){};
/**
 * <b>Summary:</b><blockquote>
 *	 stops watching for possible move, deletes all references, so the object can be garbage-collected<br>
 * </blockquote>
 * @memberOf dojox.gfx.Moveable
*/
dojox.gfx.Moveable.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an object, which makes a shape follow the mouse,<br>
 *	 used as a default mover, and as a base class for custom movers<br>
 * </blockquote>
 * @class
 * @param {dojox.gfx.Shape:} shape a shape object to be moved
 * @param {Event:} e a mouse event, which started the move;
 * only clientX and clientY properties are used
 * @param {Object:} [host] object which implements the functionality of the move,
 * and defines proper events (onMoveStart and onMoveStop)
 * @returns {dojox.gfx.Mover} new instance
*/
dojox.gfx.Mover=function(shape, e, host){};
/**
 * <b>Summary:</b><blockquote>
 *	 event processor for onmousemove<br>
 * </blockquote>
 * @param {Event:} e mouse event
 * @memberOf dojox.gfx.Mover
*/
dojox.gfx.Mover.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 it is meant to be called only once<br>
 * </blockquote>
 * @memberOf dojox.gfx.Mover
*/
dojox.gfx.Mover.prototype.onFirstMove=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 stops the move, deletes all references, so the object can be garbage-collected<br>
 * </blockquote>
 * @memberOf dojox.gfx.Mover
*/
dojox.gfx.Mover.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generalized TextPath shape<br>
 * </blockquote>
 * @param {Node} rawNode a DOM node to be used by this TextPath object
*/
dojox.gfx.path.TextPath=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generalized path shape<br>
 * </blockquote>
 * @param {Node} rawNode a DOM node to be used by this path object
*/
dojox.gfx.path.Path=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generalized path shape<br>
 * </blockquote>
 * @class
 * @param {Node} rawNode a DOM node to be used by this path object
 * @returns {dojox.gfx.path.Path} new instance
*/
dojox.gfx.path.Path=function(rawNode){};
/**
 * @namespace
*/
dojox.gfx.path.Path.shape={};
/**
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.segments=[];
/**
 * @namespace
*/
dojox.gfx.path.Path.last={};
/**
 * @namespace
*/
dojox.gfx.path.Path.bbox={};
/**
 * @namespace
 * @private
*/
dojox.gfx.path.Path._validSegments={};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a vertical line segment<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.vLineTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a smooth curve segment<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.smoothCurveTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a path using a shape<br>
 * </blockquote>
 * @param {Object} newShape an SVG path string or a path object (see dojox.gfx.defaultPath)
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets an absolute or relative mode for path points<br>
 * </blockquote>
 * @param {Boolean} mode true/false or &quot;absolute&quot;/&quot;relative&quot; to specify the mode
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.setAbsoluteMode=function(mode){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a quadratic smooth curve segment<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.qSmoothCurveTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a quadratic curve segment<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.qCurveTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a move segment<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.moveTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a line segment<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.lineTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a horizontal line segment<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.hLineTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the last point in the path, or null<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.getLastPosition=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the bounding box {x, y, width, height} or null<br>
 * </blockquote>
 * @returns {dojox.gfx.Rectangle} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.getBoundingBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a current value of the absolute mode<br>
 * </blockquote>
 * @returns {Boolean} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.getAbsoluteMode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a curve segment<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.curveTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 closes a path<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.closePath=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms an elliptic arc segment<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype.arcTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the bounding box of path with new segment<br>
 * </blockquote>
 * @param {Object} segment a segment
 * @param {mixed} matrix 
 * @private
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype._updateWithSegment=function(segment, matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the bounding box of path with new point<br>
 * </blockquote>
 * @param {Number} x an x coordinate
 * @param {Number} y a y coordinate
 * @param {mixed} m 
 * @private
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype._updateBBox=function(x, y, m){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a path using an SVG path string<br>
 * </blockquote>
 * @param {String} path an SVG path string
 * @private
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype._setPath=function(path){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds a segment<br>
 * </blockquote>
 * @param {String} action valid SVG code for a segment's type
 * @param {Array} args a list of parameters for this segment
 * @private
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype._pushSegment=function(action, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an array of four points or null<br>
 *	 four points represent four corners of the untransformed bounding box<br>
 * </blockquote>
 * @private
 * @returns {Array} -
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype._getRealBBox=function(){};
/**
 * @private
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype._confirmSegmented=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts an array of arguments to plain numeric values<br>
 * </blockquote>
 * @param {Array} array an output argument (array of numbers)
 * @param {Array} args an input argument (can be values of Boolean, Number, dojox.gfx.Point, or an embedded array of them)
 * @private
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype._collectArgs=function(array, args){};
/**
 * @private
 * @memberOf dojox.gfx.path.Path
*/
dojox.gfx.path.Path.prototype._applyTransform=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generalized TextPath shape<br>
 * </blockquote>
 * @class
 * @param {Node} rawNode a DOM node to be used by this TextPath object
 * @returns {dojox.gfx.path.TextPath} new instance
*/
dojox.gfx.path.TextPath=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a text to be drawn along the path<br>
 * </blockquote>
 * @param {mixed} newText 
 * @returns {self} -
 * @memberOf dojox.gfx.path.TextPath
*/
dojox.gfx.path.TextPath.prototype.setText=function(newText){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a font for text<br>
 * </blockquote>
 * @param {mixed} newFont 
 * @returns {self} -
 * @memberOf dojox.gfx.path.TextPath
*/
dojox.gfx.path.TextPath.prototype.setFont=function(newFont){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the current text object or null<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.gfx.path.TextPath
*/
dojox.gfx.path.TextPath.prototype.getText=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the current font object or null<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.gfx.path.TextPath
*/
dojox.gfx.path.TextPath.prototype.getFont=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a hypothetical 2D point to be used for drawings - {x, y}<br>
 * </blockquote>
 * This object is defined for documentation purposes.<br>
 * You should use the naked object instead: {x: 1, y: 2}.
 * @class
 * @returns {dojox.gfx.Point} new instance
*/
dojox.gfx.Point=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a hypothetical rectangle - {x, y, width, height}<br>
 * </blockquote>
 * This object is defined for documentation purposes.<br>
 * You should use the naked object instead: {x: 1, y: 2, width: 100, height: 200}.
 * @class
 * @returns {dojox.gfx.Rectangle} new instance
*/
dojox.gfx.Rectangle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic polyline/polygon<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @class
 * @param {Node} rawNode a DOM Node
 * @returns {dojox.gfx.shape.Polyline} new instance
*/
dojox.gfx.shape.Polyline=function(rawNode){};
/**
 * @namespace
*/
dojox.gfx.shape.Polyline.shape={};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a polyline/polygon shape object<br>
 * </blockquote>
 * @param {Object} points a polyline/polygon shape object
 * @param {Boolean} closed close the polyline to make a polygon
 * @returns {self} -
 * @memberOf dojox.gfx.shape.Polyline
*/
dojox.gfx.shape.Polyline.prototype.setShape=function(points, closed){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the bounding box<br>
 * </blockquote>
 * @returns {dojox.gfx.Rectangle} -
 * @memberOf dojox.gfx.shape.Polyline
*/
dojox.gfx.shape.Polyline.prototype.getBoundingBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 normalize points to array of {x:number, y:number}<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gfx.shape.Polyline
*/
dojox.gfx.shape.Polyline.prototype._normalizePoints=function(){};
/**
 * @namespace
*/
dojox.sl={};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a surface from a Node<br>
 * </blockquote>
 * @param {Node:} node an Silverlight node
 * @returns {dojox.gfx.Surface} -
*/
dojox.sl.attachSurface=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a shape from a Node<br>
 * </blockquote>
 * @param {Node:} node an Silverlight node
 * @returns {not implemented} -
*/
dojox.sl.attachNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 a textpath shape (Silverlight)<br>
 * </blockquote>
*/
dojox.gfx.silverlight.TextPath=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an anchored text (Silverlight)<br>
 * </blockquote>
*/
dojox.gfx.silverlight.Text=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a surface object to be used for drawings (Silverlight)<br>
 * </blockquote>
*/
dojox.gfx.silverlight.Surface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Silverlight-specific implementation of dojox.gfx.Shape methods<br>
 * </blockquote>
*/
dojox.gfx.silverlight.Shape=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a rectangle shape (Silverlight)<br>
 * </blockquote>
*/
dojox.gfx.silverlight.Rect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a polyline/polygon shape (Silverlight)<br>
 * </blockquote>
*/
dojox.gfx.silverlight.Polyline=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a path shape (Silverlight)<br>
 * </blockquote>
*/
dojox.gfx.silverlight.Path=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a line shape (Silverlight)<br>
 * </blockquote>
*/
dojox.gfx.silverlight.Line=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an image (Silverlight)<br>
 * </blockquote>
*/
dojox.gfx.silverlight.Image=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a group shape (Silverlight), which can be used<br>
 *	 to logically group shapes (e.g, to propagate matricies)<br>
 * </blockquote>
*/
dojox.gfx.silverlight.Group=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an ellipse shape (Silverlight)<br>
 * </blockquote>
*/
dojox.gfx.silverlight.Ellipse=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a circle shape (Silverlight)<br>
 * </blockquote>
*/
dojox.gfx.silverlight.Circle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Silverlight-specific implementation of dojox.gfx.Shape methods<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.Shape} new instance
*/
dojox.gfx.silverlight.Shape=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a stroke object (Silverlight)<br>
 * </blockquote>
 * @param {Object:} stroke a stroke object
 * (see dojox.gfx.defaultStroke)
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Shape
*/
dojox.gfx.silverlight.Shape.prototype.setStroke=function(stroke){};
/**
 * <b>Summary:</b><blockquote>
 *	 assigns and clears the underlying node that will represent this<br>
 *	 shape. Once set, transforms, gradients, etc, can be applied.<br>
 *	 (no fill &amp;amp; stroke by default)<br>
 * </blockquote>
 * @param {mixed} rawNode 
 * @memberOf dojox.gfx.silverlight.Shape
*/
dojox.gfx.silverlight.Shape.prototype.setRawNode=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a fill object (Silverlight)<br>
 * </blockquote>
 * @param {Object:} fill a fill object
 * (see dojox.gfx.defaultLinearGradient,<br>
 * dojox.gfx.defaultRadialGradient,<br>
 * dojox.gfx.defaultPattern,<br>
 * or dojo.Color)
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Shape
*/
dojox.gfx.silverlight.Shape.prototype.setFill=function(fill){};
/**
 * @param {mixed} f 
 * @private
 * @memberOf dojox.gfx.silverlight.Shape
*/
dojox.gfx.silverlight.Shape.prototype._setFillAttr=function(f){};
/**
 * <b>Summary:</b><blockquote>
 *	 moves a shape to front of its parent's list of shapes (Silverlight)<br>
 * </blockquote>
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Shape
*/
dojox.gfx.silverlight.Shape.prototype._moveToFront=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 moves a shape to back of its parent's list of shapes (Silverlight)<br>
 * </blockquote>
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Shape
*/
dojox.gfx.silverlight.Shape.prototype._moveToBack=function(){};
/**
 * @private
 * @memberOf dojox.gfx.silverlight.Shape
*/
dojox.gfx.silverlight.Shape.prototype._getParentSurface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the adjusted (&amp;quot;real&amp;quot;) transformation matrix<br>
 * </blockquote>
 * @private
 * @returns {dojox.gfx.Matrix2D} -
 * @memberOf dojox.gfx.silverlight.Shape
*/
dojox.gfx.silverlight.Shape.prototype._getAdjustedMatrix=function(){};
/**
 * @private
 * @memberOf dojox.gfx.silverlight.Shape
*/
dojox.gfx.silverlight.Shape.prototype._applyTransform=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a group shape (Silverlight), which can be used<br>
 *	 to logically group shapes (e.g, to propagate matricies)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.Group} new instance
*/
dojox.gfx.silverlight.Group=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a raw Silverlight node to be used by this shape<br>
 * </blockquote>
 * @param {Node:} rawNode an Silverlight node
 * @memberOf dojox.gfx.silverlight.Group
*/
dojox.gfx.silverlight.Group.prototype.setRawNode=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a rectangle shape (Silverlight)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.Rect} new instance
*/
dojox.gfx.silverlight.Rect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a rectangle shape object (Silverlight)<br>
 * </blockquote>
 * @param {Object:} newShape a rectangle shape object
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Rect
*/
dojox.gfx.silverlight.Rect.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the adjusted (&amp;quot;real&amp;quot;) transformation matrix<br>
 * </blockquote>
 * @private
 * @returns {dojox.gfx.Matrix2D} -
 * @memberOf dojox.gfx.silverlight.Rect
*/
dojox.gfx.silverlight.Rect.prototype._getAdjustedMatrix=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an ellipse shape (Silverlight)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.Ellipse} new instance
*/
dojox.gfx.silverlight.Ellipse=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets an ellipse shape object (Silverlight)<br>
 * </blockquote>
 * @param {Object:} newShape an ellipse shape object
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Ellipse
*/
dojox.gfx.silverlight.Ellipse.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the adjusted (&amp;quot;real&amp;quot;) transformation matrix<br>
 * </blockquote>
 * @private
 * @returns {dojox.gfx.Matrix2D} -
 * @memberOf dojox.gfx.silverlight.Ellipse
*/
dojox.gfx.silverlight.Ellipse.prototype._getAdjustedMatrix=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a circle shape (Silverlight)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.Circle} new instance
*/
dojox.gfx.silverlight.Circle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a circle shape object (Silverlight)<br>
 * </blockquote>
 * @param {Object:} newShape a circle shape object
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Circle
*/
dojox.gfx.silverlight.Circle.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the adjusted (&amp;quot;real&amp;quot;) transformation matrix<br>
 * </blockquote>
 * @private
 * @returns {dojox.gfx.Matrix2D} -
 * @memberOf dojox.gfx.silverlight.Circle
*/
dojox.gfx.silverlight.Circle.prototype._getAdjustedMatrix=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a line shape (Silverlight)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.Line} new instance
*/
dojox.gfx.silverlight.Line=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a line shape object (Silverlight)<br>
 * </blockquote>
 * @param {Object:} newShape a line shape object
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Line
*/
dojox.gfx.silverlight.Line.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 a polyline/polygon shape (Silverlight)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.Polyline} new instance
*/
dojox.gfx.silverlight.Polyline=function(){};
/**
 * @namespace
*/
dojox.gfx.silverlight.Polyline.shape={};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a polyline/polygon shape object (Silverlight)<br>
 * </blockquote>
 * @param {Object:} points a polyline/polygon shape object
 * @param {mixed} closed 
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Polyline
*/
dojox.gfx.silverlight.Polyline.prototype.setShape=function(points, closed){};
/**
 * <b>Summary:</b><blockquote>
 *	 an image (Silverlight)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.Image} new instance
*/
dojox.gfx.silverlight.Image=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets an image shape object (Silverlight)<br>
 * </blockquote>
 * @param {Object:} newShape an image shape object
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Image
*/
dojox.gfx.silverlight.Image.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 assigns and clears the underlying node that will represent this<br>
 *	 shape. Once set, transforms, gradients, etc, can be applied.<br>
 *	 (no fill &amp;amp; stroke by default)<br>
 * </blockquote>
 * @param {mixed} rawNode 
 * @memberOf dojox.gfx.silverlight.Image
*/
dojox.gfx.silverlight.Image.prototype.setRawNode=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the adjusted (&amp;quot;real&amp;quot;) transformation matrix<br>
 * </blockquote>
 * @private
 * @returns {dojox.gfx.Matrix2D} -
 * @memberOf dojox.gfx.silverlight.Image
*/
dojox.gfx.silverlight.Image.prototype._getAdjustedMatrix=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an anchored text (Silverlight)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.Text} new instance
*/
dojox.gfx.silverlight.Text=function(){};
/**
 * @namespace
*/
dojox.gfx.silverlight.Text.shape={};
/**
 * <b>Summary:</b><blockquote>
 *	 ignore setting a stroke style<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Text
*/
dojox.gfx.silverlight.Text.prototype.setStroke=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a text shape object (Silverlight)<br>
 * </blockquote>
 * @param {Object:} newShape a text shape object
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Text
*/
dojox.gfx.silverlight.Text.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 assigns and clears the underlying node that will represent this<br>
 *	 shape. Once set, transforms, gradients, etc, can be applied.<br>
 *	 (no fill &amp;amp; stroke by default)<br>
 * </blockquote>
 * @param {mixed} rawNode 
 * @memberOf dojox.gfx.silverlight.Text
*/
dojox.gfx.silverlight.Text.prototype.setRawNode=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 get the text width in pixels<br>
 * </blockquote>
 * @memberOf dojox.gfx.silverlight.Text
*/
dojox.gfx.silverlight.Text.prototype.getTextWidth=function(){};
/**
 * @param {mixed} f 
 * @private
 * @memberOf dojox.gfx.silverlight.Text
*/
dojox.gfx.silverlight.Text.prototype._setFillAttr=function(f){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the adjusted (&amp;quot;real&amp;quot;) transformation matrix<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gfx.silverlight.Text
*/
dojox.gfx.silverlight.Text.prototype._getAdjustedMatrix=function(){};
/**
 * @private
 * @memberOf dojox.gfx.silverlight.Text
*/
dojox.gfx.silverlight.Text.prototype._delayAlignment=function(){};
/**
 * @namespace
*/
dojox.gfx.silverlight.Text.rawNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 a path shape (Silverlight)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.Path} new instance
*/
dojox.gfx.silverlight.Path=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a path using a shape (Silverlight)<br>
 * </blockquote>
 * @param {Object:} newShape an SVG path string or a path object (see dojox.gfx.defaultPath)
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Path
*/
dojox.gfx.silverlight.Path.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the bounding box of path with new segment<br>
 * </blockquote>
 * @param {Object:} segment a segment
 * @private
 * @memberOf dojox.gfx.silverlight.Path
*/
dojox.gfx.silverlight.Path.prototype._updateWithSegment=function(segment){};
/**
 * <b>Summary:</b><blockquote>
 *	 a textpath shape (Silverlight)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.TextPath} new instance
*/
dojox.gfx.silverlight.TextPath=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a path using a shape (Silverlight)<br>
 * </blockquote>
 * @param {Object:} newShape an SVG path string or a path object (see dojox.gfx.defaultPath)
 * @memberOf dojox.gfx.silverlight.TextPath
*/
dojox.gfx.silverlight.TextPath.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the bounding box of path with new segment<br>
 * </blockquote>
 * @param {Object:} segment a segment
 * @private
 * @memberOf dojox.gfx.silverlight.TextPath
*/
dojox.gfx.silverlight.TextPath.prototype._updateWithSegment=function(segment){};
/**
 * @private
 * @memberOf dojox.gfx.silverlight.TextPath
*/
dojox.gfx.silverlight.TextPath.prototype._setText=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a surface object to be used for drawings (Silverlight)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.silverlight.Surface} new instance
*/
dojox.gfx.silverlight.Surface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the width and height of the rawNode<br>
 * </blockquote>
 * @param {String:} width width of surface, e.g., &quot;100px&quot;
 * @param {String:} height height of surface, e.g., &quot;100px&quot;
 * @returns {self} -
 * @memberOf dojox.gfx.silverlight.Surface
*/
dojox.gfx.silverlight.Surface.prototype.setDimensions=function(width, height){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an object with properties &amp;quot;width&amp;quot; and &amp;quot;height&amp;quot;<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.gfx.silverlight.Surface
*/
dojox.gfx.silverlight.Surface.prototype.getDimensions=function(){};
/**
 * @memberOf dojox.gfx.silverlight.Surface
*/
dojox.gfx.silverlight.Surface.prototype.destroy=function(){};
/**
 * @namespace
*/
dojox.svg={};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a surface from a Node<br>
 * </blockquote>
 * @param {Node:} node an SVG node
 * @returns {dojox.gfx.Surface} -
*/
dojox.svg.attachSurface=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a shape from a Node<br>
 * </blockquote>
 * @param {Node:} node an SVG node
 * @returns {dojox.gfx.Shape} -
*/
dojox.svg.attachNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 a textpath shape (SVG)<br>
 * </blockquote>
*/
dojox.gfx.svg.TextPath=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an anchored text (SVG)<br>
 * </blockquote>
*/
dojox.gfx.svg.Text=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a surface object to be used for drawings (SVG)<br>
 * </blockquote>
*/
dojox.gfx.svg.Surface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 SVG-specific implementation of dojox.gfx.Shape methods<br>
 * </blockquote>
*/
dojox.gfx.svg.Shape=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a rectangle shape (SVG)<br>
 * </blockquote>
*/
dojox.gfx.svg.Rect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a polyline/polygon shape (SVG)<br>
 * </blockquote>
*/
dojox.gfx.svg.Polyline=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a path shape (SVG)<br>
 * </blockquote>
*/
dojox.gfx.svg.Path=function(){};
/**
*/
dojox.gfx.svg.Line=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an image (SVG)<br>
 * </blockquote>
*/
dojox.gfx.svg.Image=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a group shape (SVG), which can be used<br>
 *	 to logically group shapes (e.g, to propagate matricies)<br>
 * </blockquote>
*/
dojox.gfx.svg.Group=function(){};
/**
*/
dojox.gfx.svg.Ellipse=function(){};
/**
*/
dojox.gfx.svg.Circle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 SVG-specific implementation of dojox.gfx.Shape methods<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.svg.Shape} new instance
*/
dojox.gfx.svg.Shape=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a stroke object (SVG)<br>
 * </blockquote>
 * @param {Object} stroke a stroke object (see dojox.gfx.defaultStroke)
 * @returns {self} -
 * @memberOf dojox.gfx.svg.Shape
*/
dojox.gfx.svg.Shape.prototype.setStroke=function(stroke){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a shape object (SVG)<br>
 * </blockquote>
 * @param {Object:} newShape a shape object
 * (see dojox.gfx.defaultPath,<br>
 * dojox.gfx.defaultPolyline,<br>
 * dojox.gfx.defaultRect,<br>
 * dojox.gfx.defaultEllipse,<br>
 * dojox.gfx.defaultCircle,<br>
 * dojox.gfx.defaultLine,<br>
 * or dojox.gfx.defaultImage)
 * @returns {self} -
 * @memberOf dojox.gfx.svg.Shape
*/
dojox.gfx.svg.Shape.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 assigns and clears the underlying node that will represent this<br>
 *	 shape. Once set, transforms, gradients, etc, can be applied.<br>
 *	 (no fill &amp;amp; stroke by default)<br>
 * </blockquote>
 * @param {mixed} rawNode 
 * @memberOf dojox.gfx.svg.Shape
*/
dojox.gfx.svg.Shape.prototype.setRawNode=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a fill object (SVG)<br>
 * </blockquote>
 * @param {Object:} fill a fill object
 * (see dojox.gfx.defaultLinearGradient,<br>
 * dojox.gfx.defaultRadialGradient,<br>
 * dojox.gfx.defaultPattern,<br>
 * or dojo.Color)
 * @returns {self} -
 * @memberOf dojox.gfx.svg.Shape
*/
dojox.gfx.svg.Shape.prototype.setFill=function(fill){};
/**
 * @param {mixed} f 
 * @param {mixed} nodeType 
 * @private
 * @memberOf dojox.gfx.svg.Shape
*/
dojox.gfx.svg.Shape.prototype._setFillObject=function(f, nodeType){};
/**
 * <b>Summary:</b><blockquote>
 *	 moves a shape to front of its parent's list of shapes (SVG)<br>
 * </blockquote>
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.svg.Shape
*/
dojox.gfx.svg.Shape.prototype._moveToFront=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 moves a shape to back of its parent's list of shapes (SVG)<br>
 * </blockquote>
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.svg.Shape
*/
dojox.gfx.svg.Shape.prototype._moveToBack=function(){};
/**
 * @private
 * @memberOf dojox.gfx.svg.Shape
*/
dojox.gfx.svg.Shape.prototype._getParentSurface=function(){};
/**
 * @private
 * @memberOf dojox.gfx.svg.Shape
*/
dojox.gfx.svg.Shape.prototype._applyTransform=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a group shape (SVG), which can be used<br>
 *	 to logically group shapes (e.g, to propagate matricies)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.svg.Group} new instance
*/
dojox.gfx.svg.Group=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a raw SVG node to be used by this shape<br>
 * </blockquote>
 * @param {Node:} rawNode an SVG node
 * @memberOf dojox.gfx.svg.Group
*/
dojox.gfx.svg.Group.prototype.setRawNode=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a rectangle shape (SVG)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.svg.Rect} new instance
*/
dojox.gfx.svg.Rect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a rectangle shape object (SVG)<br>
 * </blockquote>
 * @param {Object:} newShape a rectangle shape object
 * @returns {self} -
 * @memberOf dojox.gfx.svg.Rect
*/
dojox.gfx.svg.Rect.prototype.setShape=function(newShape){};
/**
 * @class
 * @returns {dojox.gfx.svg.Ellipse} new instance
*/
dojox.gfx.svg.Ellipse=function(){};
/**
 * @class
 * @returns {dojox.gfx.svg.Circle} new instance
*/
dojox.gfx.svg.Circle=function(){};
/**
 * @class
 * @returns {dojox.gfx.svg.Line} new instance
*/
dojox.gfx.svg.Line=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a polyline/polygon shape (SVG)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.svg.Polyline} new instance
*/
dojox.gfx.svg.Polyline=function(){};
/**
 * @namespace
*/
dojox.gfx.svg.Polyline.shape={};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a polyline/polygon shape object (SVG)<br>
 * </blockquote>
 * @param {Object:} points a polyline/polygon shape object
 * @param {mixed} closed 
 * @returns {self} -
 * @memberOf dojox.gfx.svg.Polyline
*/
dojox.gfx.svg.Polyline.prototype.setShape=function(points, closed){};
/**
 * <b>Summary:</b><blockquote>
 *	 an image (SVG)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.svg.Image} new instance
*/
dojox.gfx.svg.Image=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets an image shape object (SVG)<br>
 * </blockquote>
 * @param {Object:} newShape an image shape object
 * @returns {self} -
 * @memberOf dojox.gfx.svg.Image
*/
dojox.gfx.svg.Image.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 an anchored text (SVG)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.svg.Text} new instance
*/
dojox.gfx.svg.Text=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a text shape object (SVG)<br>
 * </blockquote>
 * @param {Object:} newShape a text shape object
 * @returns {self} -
 * @memberOf dojox.gfx.svg.Text
*/
dojox.gfx.svg.Text.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 get the text width in pixels<br>
 * </blockquote>
 * @memberOf dojox.gfx.svg.Text
*/
dojox.gfx.svg.Text.prototype.getTextWidth=function(){};
/**
 * @namespace
*/
dojox.gfx.svg.Text.rawNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 a path shape (SVG)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.svg.Path} new instance
*/
dojox.gfx.svg.Path=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a path using a shape (SVG)<br>
 * </blockquote>
 * @param {Object:} newShape an SVG path string or a path object (see dojox.gfx.defaultPath)
 * @returns {self} -
 * @memberOf dojox.gfx.svg.Path
*/
dojox.gfx.svg.Path.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the bounding box of path with new segment<br>
 * </blockquote>
 * @param {Object:} segment a segment
 * @private
 * @memberOf dojox.gfx.svg.Path
*/
dojox.gfx.svg.Path.prototype._updateWithSegment=function(segment){};
/**
 * <b>Summary:</b><blockquote>
 *	 a textpath shape (SVG)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.svg.TextPath} new instance
*/
dojox.gfx.svg.TextPath=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a path using a shape (SVG)<br>
 * </blockquote>
 * @param {Object:} newShape an SVG path string or a path object (see dojox.gfx.defaultPath)
 * @returns {self} -
 * @memberOf dojox.gfx.svg.TextPath
*/
dojox.gfx.svg.TextPath.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the bounding box of path with new segment<br>
 * </blockquote>
 * @param {Object:} segment a segment
 * @private
 * @memberOf dojox.gfx.svg.TextPath
*/
dojox.gfx.svg.TextPath.prototype._updateWithSegment=function(segment){};
/**
 * @private
 * @memberOf dojox.gfx.svg.TextPath
*/
dojox.gfx.svg.TextPath.prototype._setTextPath=function(){};
/**
 * @private
 * @memberOf dojox.gfx.svg.TextPath
*/
dojox.gfx.svg.TextPath.prototype._setText=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a surface object to be used for drawings (SVG)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.svg.Surface} new instance
*/
dojox.gfx.svg.Surface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the width and height of the rawNode<br>
 * </blockquote>
 * @param {String:} width width of surface, e.g., &quot;100px&quot;
 * @param {String:} height height of surface, e.g., &quot;100px&quot;
 * @returns {self} -
 * @memberOf dojox.gfx.svg.Surface
*/
dojox.gfx.svg.Surface.prototype.setDimensions=function(width, height){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an object with properties &amp;quot;width&amp;quot; and &amp;quot;height&amp;quot;<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.gfx.svg.Surface
*/
dojox.gfx.svg.Surface.prototype.getDimensions=function(){};
/**
 * @memberOf dojox.gfx.svg.Surface
*/
dojox.gfx.svg.Surface.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to serialize a GFX surface to SVG text.<br>
 * </blockquote>
 * Function to serialize a GFX surface to SVG text.  The value of this output<br>
 * is that there are numerous serverside parser libraries that can render<br>
 * SVG into images in various formats.  This provides a way that GFX objects<br>
 * can be captured in a known format and sent serverside for serialization<br>
 * into an image.
 * @param {GFX} surface The GFX surface to serialize.
 * 
 * @returns {dojo.Deferred that will be called when serialization finishes.} -
*/
dojox.gfx.utils.toSvg=function(surface){};
/**
 * <b>Summary:</b><blockquote>
 *	 Works just like serialize() but returns a JSON string. If prettyPrint is true, the string is pretty-printed to make it more human-readable.<br>
 * </blockquote>
 * @param {dojox.gfx.Surface|dojox.gfx.Shape} object 
 * @param {Boolean} [prettyPrint] 
 * @returns {String} -
*/
dojox.gfx.utils.toJson=function(object, prettyPrint){};
/**
 * <b>Summary:</b><blockquote>
 *	 Takes a shape or a surface and returns a DOM object, which describes underlying shapes.<br>
 * </blockquote>
 * @param {dojox.gfx.Surface|dojox.gfx.Shape} object 
 * @returns {Array|Object} -
*/
dojox.gfx.utils.serialize=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Works just like deserialize() but takes a JSON representation of the object.<br>
 * </blockquote>
 * @param {dojox.gfx.Surface|dojox.gfx.Shape} parent 
 * @param {String} json 
 * @returns {Array||dojox.gfx.Shape} -
*/
dojox.gfx.utils.fromJson=function(parent, json){};
/**
 * <b>Summary:</b><blockquote>
 *	 Takes a shape or a surface and applies a function &amp;quot;f&amp;quot; to in the context of &amp;quot;o&amp;quot;<br>
 *	 (or global, if missing). If &amp;quot;shape&amp;quot; was a surface or a group, it applies the same<br>
 *	 function to all children recursively effectively visiting all shapes of the underlying scene graph.<br>
 *	 object : The gfx container to iterate.<br>
 *	 f : The function to apply.<br>
 *	 o : The scope.<br>
 * </blockquote>
 * @param {dojox.gfx.Surface|dojox.gfx.Shape} object 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
*/
dojox.gfx.utils.forEach=function(object, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Takes a surface or a shape and populates it with an object produced by serialize().<br>
 * </blockquote>
 * @param {dojox.gfx.Surface|dojox.gfx.Shape} parent 
 * @param {dojox.gfx.Shape|Array} object 
 * @returns {Array|dojox.gfx.Shape} -
*/
dojox.gfx.utils.deserialize=function(parent, object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to call when the serializer init completed.<br>
 * </blockquote>
 * @private
*/
dojox.gfx.utils._svgSerializerInitialized=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Implementation of MS's innerXML function, borrowed from dojox.xml.parser.<br>
 * </blockquote>
 * @param {Node} node The node from which to generate the XML text representation.
 * @private
 * @returns {String} -
*/
dojox.gfx.utils._innerXML=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to initialize the hidden iframe where SVG rendering<br>
 *	 will occur.<br>
 * </blockquote>
 * @private
*/
dojox.gfx.utils._initSvgSerializer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function that cleans up artifacts in extracted SVG content.<br>
 * </blockquote>
 * @param {mixed} svg 
 * @private
 * @returns {Cleaned SVG text.} -
*/
dojox.gfx.utils._cleanSvg=function(svg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create this font object based on the SVG Font definition at url.<br>
 * </blockquote>
 * @class
 * @param {String|dojo._Url} url 
 * @returns {dojox.gfx.VectorFont} new instance
*/
dojox.gfx.VectorFont=function(url){};
/**
 * @param {String} url 
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype.onLoadBegin=function(url){};
/**
 * @param {dojox.gfx.VectorFont} font 
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype.onLoad=function(font){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load the passed SVG and send it to the parser for parsing.<br>
 * </blockquote>
 * @param {String|dojo._Url} url 
 * @returns {dojox.gfx.VectorFont} -
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype.load=function(url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return if we've loaded a font def, and the parsing was successful.<br>
 * </blockquote>
 * @returns {Boolean} -
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype.initialized=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the width of the rendered text without actually rendering it.<br>
 * </blockquote>
 * @param {String} text 
 * @param {Float} [scale] 
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype.getWidth=function(text, scale){};
/**
 * <b>Summary:</b><blockquote>
 *	 return the height of a single line, sans leading, based on scale.<br>
 * </blockquote>
 * @param {Float} [scale] 
 * @returns {Float} -
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype.getLineHeight=function(scale){};
/**
 * <b>Summary:</b><blockquote>
 *	 return the y coordinate that is the center of the viewbox.<br>
 * </blockquote>
 * @param {Float} [scale] 
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype.getCenterline=function(scale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find the baseline coord for alignment; adjust for scale if passed.<br>
 * </blockquote>
 * @param {Float} [scale] 
 * @returns {Float} -
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype.getBaseline=function(scale){};
/**
 * <b>Summary:</b><blockquote>
 *	 based on the passed parameters, draw the given text using paths<br>
 *	 defined by this font.<br>
 * </blockquote>
 * The main method of a VectorFont, draw() will take a text fragment<br>
 * and render it in a set of groups and paths based on the parameters<br>
 * passed.<br>
 * <br>
 * The basics of drawing text are simple enough: pass it your text as<br>
 * part of the textArgs object, pass size and family info as part of<br>
 * the fontArgs object, pass at least a color as the fillArgs object,<br>
 * and if you are looking to create an outline, pass the strokeArgs<br>
 * object as well. fillArgs and strokeArgs are the same as any other<br>
 * gfx fill and stroke arguments; they are simply applied to any path<br>
 * object generated by this method.<br>
 * <br>
 * Resulting GFX structure<br>
 * -----------------------<br>
 * <br>
 * The result of this function is a set of gfx objects in the following<br>
 * structure:<br>
 * <br>
 * 	dojox.gfx.Group 			//	the parent group generated by this function<br>
 * 	+	dojox.gfx.Group[]		//	a group generated for each line of text<br>
 * 		+	dojox.gfx.Path[]	//	each glyph/character in the text<br>
 * <br>
 * Scaling transformations (i.e. making the generated text the correct size)<br>
 * are always applied to the parent Group that is generated (i.e. the top<br>
 * node in the above example).  In theory, if you are looking to do any kind<br>
 * of other transformations (such as a translation), you should apply it to<br>
 * the group reference you pass to this method.  If you find that you need<br>
 * to apply transformations to the group that is returned by this method,<br>
 * you will need to reapply the scaling transformation as the *last* transform,<br>
 * like so:<br>
 * <br>
 * 	textGroup.setTransform(new dojox.gfx.Matrix2D([<br>
 * 		dojox.gfx.matrix.translate({ dx: dx, dy: dy }),<br>
 * 		textGroup.getTransform()<br>
 * 	]));<br>
 * <br>
 * In general, this should never be necessary unless you are doing advanced<br>
 * placement of your text.<br>
 * <br>
 * Advanced Layout Functionality<br>
 * -----------------------------<br>
 * <br>
 * In addition to straight text fragments, draw() supports a few advanced<br>
 * operations not normally available with vector graphics:<br>
 * <br>
 * * Flow operations (i.e. wrap to a given width)<br>
 * * Fitting operations (i.e. find a best fit to a given rectangle)<br>
 * <br>
 * To enable either, pass a `fitting` property along with the textArgs object.<br>
 * The possible values are contained in the dojox.gfx.vectorFontFitting enum<br>
 * (NONE, FLOW, FIT).<br>
 * <br>
 * `Flow fitting`<br>
 * Flow fitting requires both a passed size (in the fontArgs object) and a<br>
 * width (passed with the textArgs object).  draw() will attempt to split the<br>
 * passed text up into lines, at the closest whitespace according to the<br>
 * passed width.  If a width is missing, it will revert to NONE.<br>
 * <br>
 * `Best fit fitting`<br>
 * Doing a "best fit" means taking the passed text, and finding the largest<br>
 * size and line breaks so that it is the closest fit possible.  With best<br>
 * fit, any size arguments are ignored; if a height is missing, it will revert<br>
 * to NONE.<br>
 * <br>
 * Other notes<br>
 * -----------<br>
 * <br>
 * `a11y`<br>
 * Since the results of this method are rendering using pure paths (think<br>
 * "convert to outlines" in Adobe Illustrator), any text rendered by this<br>
 * code is NOT considered a11y-friendly.  If a11y is a requirement, we<br>
 * suggest using other, more a11y-friendly methods.<br>
 * <br>
 * `Font sources`<br>
 * Always make sure that you are legally allowed to use any fonts that you<br>
 * convert to SVG format; we claim no responsibility for any licensing<br>
 * infractions that may be caused by the use of this code.
 * @param {dojox.gfx.Container} group 
 * @param {dojox.gfx.__TextArgs} textArgs 
 * @param {dojox.gfx.__FontArgs} fontArgs 
 * @param {dojox.gfx.__FillArgs} fillArgs 
 * @param {dojox.gfx.__StrokeArgs} [strokeArgs] 
 * @returns {dojox.gfx.Group} -
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype.draw=function(group, textArgs, fontArgs, fillArgs, strokeArgs){};
/**
 * @param {mixed} lines 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._trim=function(lines){};
/**
 * <b>Summary:</b><blockquote>
 *	 split passed chars into nLines by finding the closest whitespace.<br>
 * </blockquote>
 * @param {mixed} chars 
 * @param {mixed} nLines 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._split=function(chars, nLines){};
/**
 * @param {mixed} n 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._round=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 Take the loaded SVG Font definition file and convert the info<br>
 *	 into things we can use. The SVG Font definition must follow<br>
 *	 the SVG 1.1 Font specification.<br>
 * </blockquote>
 * @param {String} svg 
 * @param {String} url 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._parse=function(svg, url){};
/**
 * @param {mixed} str 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._normalize=function(str){};
/**
 * @param {mixed} unit 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._leading=function(unit){};
/**
 * @param {mixed} glyphs 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._getWidth=function(glyphs){};
/**
 * @param {mixed} size 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._getSizeFactor=function(size){};
/**
 * @param {mixed} lines 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._getLongestLine=function(lines){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find the scaling factor for the given phrase set.<br>
 * </blockquote>
 * @param {mixed} lines 
 * @param {mixed} w 
 * @param {mixed} h 
 * @param {mixed} l 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._getFitFactor=function(lines, w, h, l){};
/**
 * <b>Summary:</b><blockquote>
 *	 Based on the given scale, do the best line splitting possible.<br>
 * </blockquote>
 * @param {mixed} chars 
 * @param {mixed} w 
 * @param {mixed} scale 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._getBestFlow=function(chars, w, scale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the best number of lines to return given w and h.<br>
 * </blockquote>
 * @param {mixed} chars 
 * @param {mixed} w 
 * @param {mixed} h 
 * @param {mixed} ldng 
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._getBestFit=function(chars, w, h, ldng){};
/**
 * @param {mixed} str 
 * @private
 * @returns {undefined|String} -
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._decodeEntitySequence=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clean off all of the given mixin parameters.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gfx.VectorFont
*/
dojox.gfx.VectorFont.prototype._clean=function(){};
/**
 * @namespace
*/
dojox.vml={};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a surface from a Node<br>
 * </blockquote>
 * @param {Node:} node an VML node
 * @returns {dojox.gfx.Surface} -
*/
dojox.vml.attachSurface=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a shape from a Node<br>
 * </blockquote>
 * @param {Node:} node an VML node
 * @returns {dojox.gfx.Shape} -
*/
dojox.vml.attachNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 a textpath shape (VML)<br>
 * </blockquote>
 * @param {mixed} rawNode 
*/
dojox.gfx.vml.TextPath=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 an anchored text (VML)<br>
 * </blockquote>
 * @param {mixed} rawNode 
*/
dojox.gfx.vml.Text=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a surface object to be used for drawings (VML)<br>
 * </blockquote>
*/
dojox.gfx.vml.Surface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 VML-specific implementation of dojox.gfx.Shape methods<br>
 * </blockquote>
*/
dojox.gfx.vml.Shape=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a rectangle shape (VML)<br>
 * </blockquote>
*/
dojox.gfx.vml.Rect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a polyline/polygon shape (VML)<br>
 * </blockquote>
 * @param {mixed} rawNode 
*/
dojox.gfx.vml.Polyline=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a path shape (VML)<br>
 *	 <br>
 *	 <br>
 *	 VML-specific segment renderers<br>
 * </blockquote>
 * @param {mixed} rawNode 
*/
dojox.gfx.vml.Path=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 a line shape (VML)<br>
 * </blockquote>
 * @param {mixed} rawNode 
*/
dojox.gfx.vml.Line=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 an image (VML)<br>
 * </blockquote>
*/
dojox.gfx.vml.Image=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a group shape (VML), which can be used<br>
 *	 to logically group shapes (e.g, to propagate matricies)<br>
 *	 <br>
 *	 <br>
 *	 apply transformation<br>
 * </blockquote>
*/
dojox.gfx.vml.Group=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 an ellipse shape (VML)<br>
 * </blockquote>
*/
dojox.gfx.vml.Ellipse=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a circle shape (VML)<br>
 * </blockquote>
*/
dojox.gfx.vml.Circle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 VML-specific implementation of dojox.gfx.Shape methods<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.vml.Shape} new instance
*/
dojox.gfx.vml.Shape=function(){};
/**
 * @namespace
 * @private
*/
dojox.gfx.vml.Shape._capMapReversed={};
/**
 * @namespace
 * @private
*/
dojox.gfx.vml.Shape._capMap={};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a stroke object (VML)<br>
 * </blockquote>
 * @param {Object:} stroke a stroke object
 * (see dojox.gfx.defaultStroke)
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Shape
*/
dojox.gfx.vml.Shape.prototype.setStroke=function(stroke){};
/**
 * <b>Summary:</b><blockquote>
 *	 assigns and clears the underlying node that will represent this<br>
 *	 shape. Once set, transforms, gradients, etc, can be applied.<br>
 *	 (no fill &amp;amp; stroke by default)<br>
 * </blockquote>
 * @param {mixed} rawNode 
 * @memberOf dojox.gfx.vml.Shape
*/
dojox.gfx.vml.Shape.prototype.setRawNode=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a fill object (VML)<br>
 * </blockquote>
 * @param {Object:} fill a fill object
 * (see dojox.gfx.defaultLinearGradient,<br>
 * dojox.gfx.defaultRadialGradient,<br>
 * dojox.gfx.defaultPattern,<br>
 * or dojo.Color)
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Shape
*/
dojox.gfx.vml.Shape.prototype.setFill=function(fill){};
/**
 * @param {mixed} dict 
 * @param {mixed} value 
 * @private
 * @memberOf dojox.gfx.vml.Shape
*/
dojox.gfx.vml.Shape.prototype._translate=function(dict, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the width and height of the rawNode,<br>
 *	 if the surface sixe has been changed<br>
 * </blockquote>
 * @param {String:} width width in pixels
 * @param {String:} height height in pixels
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Shape
*/
dojox.gfx.vml.Shape.prototype._setDimensions=function(width, height){};
/**
 * <b>Summary:</b><blockquote>
 *	 moves a shape to front of its parent's list of shapes (VML)<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gfx.vml.Shape
*/
dojox.gfx.vml.Shape.prototype._moveToFront=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 moves a shape to back of its parent's list of shapes (VML)<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gfx.vml.Shape
*/
dojox.gfx.vml.Shape.prototype._moveToBack=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the cumulative (&amp;quot;real&amp;quot;) transformation matrix<br>
 *	 by combining the shape's matrix with its parent's matrix<br>
 * </blockquote>
 * @private
 * @returns {dojox.gfx.Matrix2D} -
 * @memberOf dojox.gfx.vml.Shape
*/
dojox.gfx.vml.Shape.prototype._getRealMatrix=function(){};
/**
 * @private
 * @memberOf dojox.gfx.vml.Shape
*/
dojox.gfx.vml.Shape.prototype._applyTransform=function(){};
/**
 * @namespace
*/
dojox.gfx.vml.Shape.rawNode={};
/**
 * @namespace
*/
dojox.gfx.vml.Shape.rawNode.filters.DXImageTransform.Microsoft={};
/**
 * <b>Summary:</b><blockquote>
 *	 a group shape (VML), which can be used<br>
 *	 to logically group shapes (e.g, to propagate matricies)<br>
 *	 <br>
 *	 <br>
 *	 apply transformation<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.vml.Group} new instance
*/
dojox.gfx.vml.Group=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the width and height of the rawNode,<br>
 *	 if the surface sixe has been changed<br>
 * </blockquote>
 * @param {String:} width width in pixels
 * @param {String:} height height in pixels
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Group
*/
dojox.gfx.vml.Group.prototype._setDimensions=function(width, height){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a transformation matrix to a group<br>
 * </blockquote>
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Group
*/
dojox.gfx.vml.Group.prototype._applyTransform=function(){};
/**
 * @namespace
*/
dojox.gfx.vml.Group.rawNode={};
/**
 * @namespace
*/
dojox.gfx.vml.Group.bgNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 a rectangle shape (VML)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.vml.Rect} new instance
*/
dojox.gfx.vml.Rect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a rectangle shape object (VML)<br>
 * </blockquote>
 * @param {Object:} newShape a rectangle shape object
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Rect
*/
dojox.gfx.vml.Rect.prototype.setShape=function(newShape){};
/**
 * @namespace
*/
dojox.gfx.vml.Rect.rawNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 an ellipse shape (VML)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.vml.Ellipse} new instance
*/
dojox.gfx.vml.Ellipse=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets an ellipse shape object (VML)<br>
 * </blockquote>
 * @param {Object:} newShape an ellipse shape object
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Ellipse
*/
dojox.gfx.vml.Ellipse.prototype.setShape=function(newShape){};
/**
 * @namespace
*/
dojox.gfx.vml.Ellipse.rawNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 a circle shape (VML)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.vml.Circle} new instance
*/
dojox.gfx.vml.Circle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a circle shape object (VML)<br>
 * </blockquote>
 * @param {Object:} newShape a circle shape object
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Circle
*/
dojox.gfx.vml.Circle.prototype.setShape=function(newShape){};
/**
 * @namespace
*/
dojox.gfx.vml.Circle.rawNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 a line shape (VML)<br>
 * </blockquote>
 * @class
 * @param {mixed} rawNode 
 * @returns {dojox.gfx.vml.Line} new instance
*/
dojox.gfx.vml.Line=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a line shape object (VML)<br>
 * </blockquote>
 * @param {Object:} newShape a line shape object
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Line
*/
dojox.gfx.vml.Line.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 a polyline/polygon shape (VML)<br>
 * </blockquote>
 * @class
 * @param {mixed} rawNode 
 * @returns {dojox.gfx.vml.Polyline} new instance
*/
dojox.gfx.vml.Polyline=function(rawNode){};
/**
 * @namespace
*/
dojox.gfx.vml.Polyline.shape={};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a polyline/polygon shape object (VML)<br>
 * </blockquote>
 * @param {Object:} points a polyline/polygon shape object
 * @param {Boolean:} [closed] if true, close the polyline explicitely
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Polyline
*/
dojox.gfx.vml.Polyline.prototype.setShape=function(points, closed){};
/**
 * <b>Summary:</b><blockquote>
 *	 an image (VML)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.vml.Image} new instance
*/
dojox.gfx.vml.Image=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets an image shape object (VML)<br>
 * </blockquote>
 * @param {Object:} newShape an image shape object
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Image
*/
dojox.gfx.vml.Image.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the width and height of the rawNode,<br>
 *	 if the surface sixe has been changed<br>
 * </blockquote>
 * @param {String:} width width in pixels
 * @param {String:} height height in pixels
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Image
*/
dojox.gfx.vml.Image.prototype._setDimensions=function(width, height){};
/**
 * @private
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Image
*/
dojox.gfx.vml.Image.prototype._applyTransform=function(){};
/**
 * @namespace
*/
dojox.gfx.vml.Image.rawNode={};
/**
 * @namespace
*/
dojox.gfx.vml.Image.rawNode.filters.DXImageTransform.Microsoft={};
/**
 * <b>Summary:</b><blockquote>
 *	 an anchored text (VML)<br>
 * </blockquote>
 * @class
 * @param {mixed} rawNode 
 * @returns {dojox.gfx.vml.Text} new instance
*/
dojox.gfx.vml.Text=function(rawNode){};
/**
 * @namespace
*/
dojox.gfx.vml.Text.shape={};
/**
 * @namespace
 * @private
*/
dojox.gfx.vml.Text._alignment={};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a text shape object (VML)<br>
 * </blockquote>
 * @param {Object:} newShape a text shape object
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Text
*/
dojox.gfx.vml.Text.prototype.setShape=function(newShape){};
/**
 * <b>Summary:</b><blockquote>
 *	 get the text width, in px<br>
 * </blockquote>
 * @memberOf dojox.gfx.vml.Text
*/
dojox.gfx.vml.Text.prototype.getTextWidth=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a font object (VML)<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gfx.vml.Text
*/
dojox.gfx.vml.Text.prototype._setFont=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the cumulative (&amp;quot;real&amp;quot;) transformation matrix<br>
 *	 by combining the shape's matrix with its parent's matrix;<br>
 *	 it makes a correction for a font size<br>
 * </blockquote>
 * @private
 * @returns {dojox.gfx.Matrix2D} -
 * @memberOf dojox.gfx.vml.Text
*/
dojox.gfx.vml.Text.prototype._getRealMatrix=function(){};
/**
 * @namespace
*/
dojox.gfx.vml.Text.rawNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 a path shape (VML)<br>
 *	 <br>
 *	 <br>
 *	 VML-specific segment renderers<br>
 * </blockquote>
 * @class
 * @param {mixed} rawNode 
 * @returns {dojox.gfx.vml.Path} new instance
*/
dojox.gfx.vml.Path=function(rawNode){};
/**
 * @namespace
*/
dojox.gfx.vml.Path.renderers={};
/**
 * @namespace
*/
dojox.gfx.vml.Path.lastControl={};
/**
 * @namespace
 * @private
*/
dojox.gfx.vml.Path._pathVmlToSvgMap={};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a path using a shape (VML)<br>
 * </blockquote>
 * @param {Object:} newShape an VML path string or a path object (see dojox.gfx.defaultPath)
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype.setShape=function(newShape){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._vLineToR=function(segment, last){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._vLineToA=function(segment, last){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the bounding box of path with new segment<br>
 * </blockquote>
 * @param {Object:} segment a segment
 * @private
 * @returns {skip transfomed bbox calculations} -
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._updateWithSegment=function(segment){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._smoothCurveToR=function(segment, last){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._smoothCurveToA=function(segment, last){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._qSmoothCurveToR=function(segment, last){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._qSmoothCurveToA=function(segment, last){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._qCurveToR=function(segment, last){};
/**
 * @param {mixed} segment 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._qCurveToA=function(segment){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._moveToR=function(segment, last){};
/**
 * @param {mixed} segment 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._moveToA=function(segment){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._lineToR=function(segment, last){};
/**
 * @param {mixed} segment 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._lineToA=function(segment){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._hLineToR=function(segment, last){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._hLineToA=function(segment, last){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._curveToR=function(segment, last){};
/**
 * @param {mixed} segment 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._curveToA=function(segment){};
/**
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._closePath=function(){};
/**
 * @param {mixed} segment 
 * @param {mixed} last 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._arcTo=function(segment, last){};
/**
 * @param {mixed} last 
 * @param {mixed} segment 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._adjustRelPos=function(last, segment){};
/**
 * @param {mixed} last 
 * @param {mixed} segment 
 * @param {mixed} step 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._adjustRelCrd=function(last, segment, step){};
/**
 * @param {mixed} path 
 * @param {mixed} segment 
 * @param {mixed} from 
 * @param {mixed} upto 
 * @private
 * @memberOf dojox.gfx.vml.Path
*/
dojox.gfx.vml.Path.prototype._addArgs=function(path, segment, from, upto){};
/**
 * <b>Summary:</b><blockquote>
 *	 a textpath shape (VML)<br>
 * </blockquote>
 * @class
 * @param {mixed} rawNode 
 * @returns {dojox.gfx.vml.TextPath} new instance
*/
dojox.gfx.vml.TextPath=function(rawNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a text to be drawn along the path<br>
 * </blockquote>
 * @param {mixed} newText 
 * @returns {self} -
 * @memberOf dojox.gfx.vml.TextPath
*/
dojox.gfx.vml.TextPath.prototype.setText=function(newText){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a font for text<br>
 * </blockquote>
 * @param {mixed} newFont 
 * @returns {self} -
 * @memberOf dojox.gfx.vml.TextPath
*/
dojox.gfx.vml.TextPath.prototype.setFont=function(newFont){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a text shape object (VML)<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gfx.vml.TextPath
*/
dojox.gfx.vml.TextPath.prototype._setText=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a font object (VML)<br>
 * </blockquote>
 * @private
 * @memberOf dojox.gfx.vml.TextPath
*/
dojox.gfx.vml.TextPath.prototype._setFont=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a surface object to be used for drawings (VML)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx.vml.Surface} new instance
*/
dojox.gfx.vml.Surface=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the width and height of the rawNode<br>
 * </blockquote>
 * @param {String:} width width of surface, e.g., &quot;100px&quot;
 * @param {String:} height height of surface, e.g., &quot;100px&quot;
 * @returns {self} -
 * @memberOf dojox.gfx.vml.Surface
*/
dojox.gfx.vml.Surface.prototype.setDimensions=function(width, height){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an object with properties &amp;quot;width&amp;quot; and &amp;quot;height&amp;quot;<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.gfx.vml.Surface
*/
dojox.gfx.vml.Surface.prototype.getDimensions=function(){};
/**
 * @namespace
*/
dojox.gfx.vml.Surface.clipNode={};
/**
 * @namespace
*/
dojox.gfx.vml.Surface.rawNode={};
/**
 * @namespace
*/
dojox.gfx.vml.Surface.bgNode={};
/**
 * @namespace
*/
dojox.gfx.vml.Surface._parent={};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic triangle<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
*/
dojox.gfx3d.Triangles=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic triangle<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
*/
dojox.gfx3d.Quads=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic triangle<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
*/
dojox.gfx3d.Polygon=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic line<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
*/
dojox.gfx3d.Path3d=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic edge in 3D viewport<br>
 * </blockquote>
*/
dojox.gfx3d.Orbit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Object object, which knows how to map<br>
 *	 3D objects to 2D shapes.<br>
 * </blockquote>
*/
dojox.gfx3d.Object=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic edge in 3D viewport<br>
 * </blockquote>
*/
dojox.gfx3d.Edges=function(){};
/**
*/
dojox.gfx3d.Cylinder=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic triangle<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
*/
dojox.gfx3d.Cube=function(){};
/**
 * @param {mixed} incident 
 * @param {mixed} lights 
 * @param {mixed} ambient 
 * @param {mixed} specular 
*/
dojox.gfx3d.lighting.Model=function(incident, lights, ambient, specular){};
/**
 * @class
 * @param {mixed} incident 
 * @param {mixed} lights 
 * @param {mixed} ambient 
 * @param {mixed} specular 
 * @returns {dojox.gfx3d.lighting.Model} new instance
*/
dojox.gfx3d.lighting.Model=function(incident, lights, ambient, specular){};
/**
 * @namespace
*/
dojox.gfx3d.lighting.Model.specular={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.Model.ambient={};
/**
 * @param {mixed} normal 
 * @param {mixed} finish 
 * @param {mixed} pigment 
 * @memberOf dojox.gfx3d.lighting.Model
*/
dojox.gfx3d.lighting.Model.prototype.plastic=function(normal, finish, pigment){};
/**
 * @param {mixed} normal 
 * @param {mixed} finish 
 * @param {mixed} pigment 
 * @memberOf dojox.gfx3d.lighting.Model
*/
dojox.gfx3d.lighting.Model.prototype.npr=function(normal, finish, pigment){};
/**
 * @param {mixed} normal 
 * @param {mixed} finish 
 * @param {mixed} pigment 
 * @memberOf dojox.gfx3d.lighting.Model
*/
dojox.gfx3d.lighting.Model.prototype.metal=function(normal, finish, pigment){};
/**
 * @param {mixed} normal 
 * @param {mixed} finish 
 * @param {mixed} pigment 
 * @memberOf dojox.gfx3d.lighting.Model
*/
dojox.gfx3d.lighting.Model.prototype.matte=function(normal, finish, pigment){};
/**
 * @param {mixed} normal 
 * @param {mixed} finish 
 * @param {mixed} pigment 
 * @memberOf dojox.gfx3d.lighting.Model
*/
dojox.gfx3d.lighting.Model.prototype.constant=function(normal, finish, pigment){};
/**
 * @namespace
*/
dojox.gfx3d.lighting={};
/**
*/
dojox.gfx3d.lighting.white=function(){};
/**
 * @param {mixed} c 
*/
dojox.gfx3d.lighting.toStdColor=function(c){};
/**
 * @param {mixed} normal 
 * @param {mixed} v 
 * @param {mixed} roughness 
 * @param {mixed} lights 
*/
dojox.gfx3d.lighting.specular=function(normal, v, roughness, lights){};
/**
 * @param {mixed} s 
 * @param {mixed} c 
*/
dojox.gfx3d.lighting.scaleColor=function(s, c){};
/**
 * @param {mixed} s 
 * @param {mixed} v 
*/
dojox.gfx3d.lighting.scale=function(s, v){};
/**
 * @param {mixed} c 
*/
dojox.gfx3d.lighting.saturateColor=function(c){};
/**
 * @param {mixed} v 
*/
dojox.gfx3d.lighting.saturate=function(v){};
/**
 * @param {mixed} i 
 * @param {mixed} n 
*/
dojox.gfx3d.lighting.reflect=function(i, n){};
/**
 * @param {mixed} normal 
 * @param {mixed} v 
 * @param {mixed} size 
 * @param {mixed} lights 
*/
dojox.gfx3d.lighting.phong=function(normal, v, size, lights){};
/**
 * @param {mixed} v 
*/
dojox.gfx3d.lighting.normalize=function(v){};
/**
 * @param {mixed} a 
 * @param {mixed} b 
*/
dojox.gfx3d.lighting.multiplyColor=function(a, b){};
/**
 * @param {mixed} c1 
 * @param {mixed} c2 
 * @param {mixed} s 
*/
dojox.gfx3d.lighting.mixColor=function(c1, c2, s){};
/**
 * @param {mixed} c 
*/
dojox.gfx3d.lighting.length2Color=function(c){};
/**
 * @param {mixed} v 
*/
dojox.gfx3d.lighting.length=function(v){};
/**
 * @param {mixed} c 
*/
dojox.gfx3d.lighting.fromStdColor=function(c){};
/**
 * @param {mixed} n 
 * @param {mixed} i 
*/
dojox.gfx3d.lighting.faceforward=function(n, i){};
/**
 * @param {mixed} a 
 * @param {mixed} b 
*/
dojox.gfx3d.lighting.dot=function(a, b){};
/**
 * @param {mixed} normal 
 * @param {mixed} lights 
*/
dojox.gfx3d.lighting.diffuse=function(normal, lights){};
/**
 * @param {mixed} c1 
 * @param {mixed} c2 
*/
dojox.gfx3d.lighting.diff2Color=function(c1, c2){};
/**
*/
dojox.gfx3d.lighting.black=function(){};
/**
 * @param {mixed} a 
 * @param {mixed} b 
*/
dojox.gfx3d.lighting.addColor=function(a, b){};
/**
 * @param {mixed} a 
 * @param {mixed} b 
*/
dojox.gfx3d.lighting.add=function(a, b){};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.shiny={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.phong_shiny={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.phong_glossy={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.phong_dull={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.metalE={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.metalD={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.metalC={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.metalB={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.metalA={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.luminous={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.glossy={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.dull={};
/**
 * @namespace
*/
dojox.gfx3d.lighting.finish.defaults={};

/**
 * @namespace
*/
dojox.gfx3d.matrix={};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a translation matrix<br>
 * </blockquote>
 * The resulting matrix is used to translate (move) points by specified offsets.
 * @param {Number:} a an x coordinate value
 * @param {Number:} b a y coordinate value
 * @param {Number:} c a z coordinate value
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.translate=function(a, b, c){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a scaling matrix<br>
 * </blockquote>
 * The resulting matrix is used to scale (magnify) points by specified offsets.
 * @param {Number:} a a scaling factor used for the x coordinate
 * @param {Number:} b a scaling factor used for the y coordinate
 * @param {Number:} c a scaling factor used for the z coordinate
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.scale=function(a, b, c){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the z axis)<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified degree.<br>
 * See dojox.gfx3d.matrix.rotateZ() for comparison.
 * @param {Number:} degree an angle of rotation in degrees (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.rotateZg=function(degree){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the z axis)<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified angle.
 * @param {Number:} angle an angle of rotation in radians (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.rotateZ=function(angle){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the y axis)<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified degree.<br>
 * See dojox.gfx3d.matrix.rotateY() for comparison.
 * @param {Number:} degree an angle of rotation in degrees (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.rotateYg=function(degree){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the y axis)<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified angle.
 * @param {Number:} angle an angle of rotation in radians (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.rotateY=function(angle){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the x axis)<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified degree.<br>
 * See dojox.gfx3d.matrix.rotateX() for comparison.
 * @param {Number:} degree an angle of rotation in degrees (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.rotateXg=function(degree){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the x axis)<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified angle.
 * @param {Number:} angle an angle of rotation in radians (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.rotateX=function(angle){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a matrix to a point<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix3D:} matrix a 3D matrix object to be applied
 * @param {Number||Point} a Number: an x coordinate of a point
 * @param {Number,} b Number: a y coordinate of a point
 * @param {Number,} c Number: a z coordinate of a point
 * @returns {Object} -
*/
dojox.gfx3d.matrix.project=function(matrix, a, b, c){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts an object to a matrix, if necessary<br>
 * </blockquote>
 * Converts any 3D matrix-like object or an array of<br>
 * such objects to a valid dojox.gfx3d.matrix.Matrix3D object.
 * @param {Object:} matrix an object, which is converted to a matrix, if necessary
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.normalize=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a matrix to a point<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix3D:} matrix a 3D matrix object to be applied
 * @param {Number||Point} a Number: an x coordinate of a point
 * @param {Number,} b Number: a y coordinate of a point
 * @param {Number,} c Number: a z coordinate of a point
 * @returns {Object} -
*/
dojox.gfx3d.matrix.multiplyPoint=function(matrix, a, b, c){};
/**
 * <b>Summary:</b><blockquote>
 *	 combines matrices by multiplying them sequentially in the given order<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix3D:} matrix a 3D matrix-like object,
 * all subsequent arguments are matrix-like objects too
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.multiply=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 inverts a 2D matrix<br>
 * </blockquote>
 * @param {dojox.gfx.matrix.Matrix3D:} matrix a 2D matrix-like object to be inverted
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.invert=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a copy of a 3D matrix<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix3D:} matrix a 3D matrix-like object to be cloned
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.clone=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a translation matrix<br>
 * </blockquote>
 * The resulting matrix is used to translate (move) points by specified offsets.
 * @param {Number:} a an x coordinate value
 * @param {Number:} b a y coordinate value
 * @param {Number:} c a z coordinate value
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.cameraTranslate=function(a, b, c){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the z axis) in cameraTransform manner<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified degree.<br>
 * See dojox.gfx3d.matrix.rotateZ() for comparison.
 * @param {Number:} degree an angle of rotation in degrees (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.cameraRotateZg=function(degree){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the z axis) in cameraTransform manner<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified angle.
 * @param {Number:} angle an angle of rotation in radians (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.cameraRotateZ=function(angle){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the y axis) in cameraTransform manner<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified degree.<br>
 * See dojox.gfx3d.matrix.rotateY() for comparison.
 * @param {Number:} degree an angle of rotation in degrees (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.cameraRotateYg=function(degree){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the y axis) in cameraTransform manner<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified angle.
 * @param {Number:} angle an angle of rotation in radians (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.cameraRotateY=function(angle){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the x axis)in cameraTransform manner<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified degree.<br>
 * See dojox.gfx3d.matrix.rotateX() for comparison.
 * @param {Number:} degree an angle of rotation in degrees (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.cameraRotateXg=function(degree){};
/**
 * <b>Summary:</b><blockquote>
 *	 forms a rotating matrix (about the x axis) in cameraTransform manner<br>
 * </blockquote>
 * The resulting matrix is used to rotate points<br>
 * around the origin of coordinates (0, 0) by specified angle.
 * @param {Number:} angle an angle of rotation in radians (&gt;0 for CW)
 * @returns {dojox.gfx3d.matrix.Matrix3D} -
*/
dojox.gfx3d.matrix.cameraRotateX=function(angle){};
/**
 * @param {mixed} radian 
 * @private
*/
dojox.gfx3d.matrix._radToDeg=function(radian){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a matrix to a point<br>
 *	 matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied<br>
 * </blockquote>
 * @param {mixed} m 
 * @param {Number:} x an x coordinate of a point
 * @param {Number:} y a y coordinate of a point
 * @param {Number:} z a z coordinate of a point
 * @private
 * @returns {Object} -
*/
dojox.gfx3d.matrix._project=function(m, x, y, z){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a matrix to a point<br>
 *	 matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied<br>
 * </blockquote>
 * @param {mixed} m 
 * @param {Number:} x an x coordinate of a point
 * @param {Number:} y a y coordinate of a point
 * @param {Number:} z a z coordinate of a point
 * @private
 * @returns {Object} -
*/
dojox.gfx3d.matrix._multiplyPoint=function(m, x, y, z){};
/**
 * @param {mixed} degree 
 * @private
*/
dojox.gfx3d.matrix._degToRad=function(degree){};
/**
 * <b>Summary:</b><blockquote>
 *	 a 3D matrix object<br>
 * </blockquote>
 * Normalizes a 3D matrix-like object. If arrays is passed,<br>
 * all objects of the array are normalized and multiplied sequentially.
 * @param {Object} arg a 3D matrix-like object, a number, or an array of such objects
*/
dojox.gfx3d.matrix.Matrix3D=function(arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 a 3D matrix object<br>
 * </blockquote>
 * Normalizes a 3D matrix-like object. If arrays is passed,<br>
 * all objects of the array are normalized and multiplied sequentially.
 * @class
 * @returns {gfx3d.matrix.Matrix3D} new instance
*/
dojox.gfx3d.matrix.Matrix3D=function(){};
/**
 * @class
 * @returns {gfx3d.Viewport} new instance
*/
dojox.gfx3d.Viewport=function(){};
/**
 * @class
 * @returns {gfx3d.Scene} new instance
*/
dojox.gfx3d.Scene=function(){};
/**
 * @class
 * @returns {gfx.Surface} new instance
*/
gfx.Surface=function(){};
/**
 * @memberOf gfx.Surface
*/
gfx.Surface.prototype.createViewport=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a Object object, which knows how to map<br>
 *	 3D objects to 2D shapes.<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx3d.Object} new instance
*/
dojox.gfx3d.Object=function(){};
/**
 * @param {mixed} lighting 
 * @param {mixed} normal 
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.toStdFill=function(lighting, normal){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a transformation matrix<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix:} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx3d.matrix.Matrix<br>
 * constructor for a list of acceptable arguments)
 * @returns {self} -
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.setTransform=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a stroke object<br>
 *	 (the default implementation simply ignores it)<br>
 * </blockquote>
 * @param {Object:} stroke a stroke object
 * (see dojox.gfx.defaultStroke)
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.setStroke=function(stroke){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a Object object<br>
 * </blockquote>
 * @param {mixed} newObject 
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.setObject=function(newObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a fill object<br>
 *	 (the default implementation is to delegate to<br>
 *	 the underlying 2D shape).<br>
 * </blockquote>
 * @param {Object:} fill a fill object
 * (see dojox.gfx.defaultLinearGradient,<br>
 * dojox.gfx.defaultRadialGradient,<br>
 * dojox.gfx.defaultPattern,<br>
 * dojo.Color<br>
 * or dojox.gfx.MODEL)
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.setFill=function(fill){};
/**
 * @param {mixed} camera 
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.render=function(camera){};
/**
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.invalidate=function(){};
/**
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.getZOrder=function(){};
/**
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.getOutline=function(){};
/**
 * @param {mixed} lighting 
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.draw=function(lighting){};
/**
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a shortcut for dojox.gfx.Shape.applyRightTransform<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix:} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx.matrix.Matrix<br>
 * constructor for a list of acceptable arguments)
 * @returns {self} -
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.applyTransform=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 multiplies the existing matrix with an argument on right side<br>
 *	 (this.matrix * matrix)<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix:} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx.matrix.Matrix<br>
 * constructor for a list of acceptable arguments)
 * @returns {self} -
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.applyRightTransform=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 multiplies the existing matrix with an argument on left side<br>
 *	 (matrix * this.matrix)<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix:} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx.matrix.Matrix<br>
 * constructor for a list of acceptable arguments)
 * @returns {self} -
 * @memberOf dojox.gfx3d.Object
*/
dojox.gfx3d.Object.prototype.applyLeftTransform=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 the Scene is just a containter.<br>
 *	 note: we have the following assumption:<br>
 *	 all objects in the Scene are not overlapped with other objects<br>
 *	 outside of the scene.<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx3d.Scene} new instance
*/
dojox.gfx3d.Scene=function(){};
/**
 * @param {mixed} stroke 
 * @memberOf dojox.gfx3d.Scene
*/
dojox.gfx3d.Scene.prototype.setStroke=function(stroke){};
/**
 * @param {mixed} fill 
 * @memberOf dojox.gfx3d.Scene
*/
dojox.gfx3d.Scene.prototype.setFill=function(fill){};
/**
 * @param {mixed} camera 
 * @param {mixed} deep 
 * @memberOf dojox.gfx3d.Scene
*/
dojox.gfx3d.Scene.prototype.render=function(camera, deep){};
/**
 * @memberOf dojox.gfx3d.Scene
*/
dojox.gfx3d.Scene.prototype.invalidate=function(){};
/**
 * @memberOf dojox.gfx3d.Scene
*/
dojox.gfx3d.Scene.prototype.getZOrder=function(){};
/**
 * @param {mixed} lighting 
 * @memberOf dojox.gfx3d.Scene
*/
dojox.gfx3d.Scene.prototype.draw=function(lighting){};
/**
 * @param {mixed} newObject 
 * @memberOf dojox.gfx3d.Scene
*/
dojox.gfx3d.Scene.prototype.addTodo=function(newObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic edge in 3D viewport<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx3d.Edges} new instance
*/
dojox.gfx3d.Edges=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 setup the object<br>
 * </blockquote>
 * @param {Array} newObject of points || Object
 * @param {String,} style optional
 * @memberOf dojox.gfx3d.Edges
*/
dojox.gfx3d.Edges.prototype.setObject=function(newObject, style){};
/**
 * @param {mixed} camera 
 * @memberOf dojox.gfx3d.Edges
*/
dojox.gfx3d.Edges.prototype.render=function(camera){};
/**
 * @memberOf dojox.gfx3d.Edges
*/
dojox.gfx3d.Edges.prototype.getZOrder=function(){};
/**
 * @memberOf dojox.gfx3d.Edges
*/
dojox.gfx3d.Edges.prototype.draw=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic edge in 3D viewport<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx3d.Orbit} new instance
*/
dojox.gfx3d.Orbit=function(){};
/**
 * @param {mixed} camera 
 * @memberOf dojox.gfx3d.Orbit
*/
dojox.gfx3d.Orbit.prototype.render=function(camera){};
/**
 * @param {mixed} lighting 
 * @memberOf dojox.gfx3d.Orbit
*/
dojox.gfx3d.Orbit.prototype.draw=function(lighting){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic line<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx3d.Path3d} new instance
*/
dojox.gfx3d.Path3d=function(){};
/**
 * @namespace
 * @private
*/
dojox.gfx3d.Path3d._validSegments={};
/**
 * @param {mixed} camera 
 * @memberOf dojox.gfx3d.Path3d
*/
dojox.gfx3d.Path3d.prototype.render=function(camera){};
/**
 * <b>Summary:</b><blockquote>
 *	 formes a move segment<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx3d.Path3d
*/
dojox.gfx3d.Path3d.prototype.moveTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 formes a line segment<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx3d.Path3d
*/
dojox.gfx3d.Path3d.prototype.lineTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 closes a path<br>
 * </blockquote>
 * @returns {self} -
 * @memberOf dojox.gfx3d.Path3d
*/
dojox.gfx3d.Path3d.prototype.closePath=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds a segment<br>
 * </blockquote>
 * @param {String:} action valid SVG code for a segment's type
 * @param {Array:} args a list of parameters for this segment
 * @private
 * @memberOf dojox.gfx3d.Path3d
*/
dojox.gfx3d.Path3d.prototype._pushSegment=function(action, args){};
/**
 * @private
 * @memberOf dojox.gfx3d.Path3d
*/
dojox.gfx3d.Path3d.prototype._draw=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 converts an array of arguments to plain numeric values<br>
 * </blockquote>
 * @param {Array:} array an output argument (array of numbers)
 * @param {Array:} args an input argument (can be values of Boolean, Number, dojox.gfx.Point, or an embedded array of them)
 * @private
 * @memberOf dojox.gfx3d.Path3d
*/
dojox.gfx3d.Path3d.prototype._collectArgs=function(array, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic triangle<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx3d.Triangles} new instance
*/
dojox.gfx3d.Triangles=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 setup the object<br>
 * </blockquote>
 * @param {Array} newObject of points || Object
 * @param {String,} style optional
 * @memberOf dojox.gfx3d.Triangles
*/
dojox.gfx3d.Triangles.prototype.setObject=function(newObject, style){};
/**
 * @param {mixed} camera 
 * @memberOf dojox.gfx3d.Triangles
*/
dojox.gfx3d.Triangles.prototype.render=function(camera){};
/**
 * @memberOf dojox.gfx3d.Triangles
*/
dojox.gfx3d.Triangles.prototype.getZOrder=function(){};
/**
 * @param {mixed} lighting 
 * @memberOf dojox.gfx3d.Triangles
*/
dojox.gfx3d.Triangles.prototype.draw=function(lighting){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic triangle<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx3d.Quads} new instance
*/
dojox.gfx3d.Quads=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 setup the object<br>
 * </blockquote>
 * @param {Array} newObject of points || Object
 * @param {String,} style optional
 * @memberOf dojox.gfx3d.Quads
*/
dojox.gfx3d.Quads.prototype.setObject=function(newObject, style){};
/**
 * @param {mixed} camera 
 * @memberOf dojox.gfx3d.Quads
*/
dojox.gfx3d.Quads.prototype.render=function(camera){};
/**
 * @memberOf dojox.gfx3d.Quads
*/
dojox.gfx3d.Quads.prototype.getZOrder=function(){};
/**
 * @param {mixed} lighting 
 * @memberOf dojox.gfx3d.Quads
*/
dojox.gfx3d.Quads.prototype.draw=function(lighting){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic triangle<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx3d.Polygon} new instance
*/
dojox.gfx3d.Polygon=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 setup the object<br>
 * </blockquote>
 * @param {Array} newObject of points || Object
 * @memberOf dojox.gfx3d.Polygon
*/
dojox.gfx3d.Polygon.prototype.setObject=function(newObject){};
/**
 * @param {mixed} camera 
 * @memberOf dojox.gfx3d.Polygon
*/
dojox.gfx3d.Polygon.prototype.render=function(camera){};
/**
 * @memberOf dojox.gfx3d.Polygon
*/
dojox.gfx3d.Polygon.prototype.getZOrder=function(){};
/**
 * @memberOf dojox.gfx3d.Polygon
*/
dojox.gfx3d.Polygon.prototype.getOutline=function(){};
/**
 * @param {mixed} lighting 
 * @memberOf dojox.gfx3d.Polygon
*/
dojox.gfx3d.Polygon.prototype.draw=function(lighting){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic triangle<br>
 *	 (this is a helper object, which is defined for convenience)<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx3d.Cube} new instance
*/
dojox.gfx3d.Cube=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 setup the object<br>
 * </blockquote>
 * @param {Array} newObject of points || Object
 * @memberOf dojox.gfx3d.Cube
*/
dojox.gfx3d.Cube.prototype.setObject=function(newObject){};
/**
 * @param {mixed} camera 
 * @memberOf dojox.gfx3d.Cube
*/
dojox.gfx3d.Cube.prototype.render=function(camera){};
/**
 * @memberOf dojox.gfx3d.Cube
*/
dojox.gfx3d.Cube.prototype.getZOrder=function(){};
/**
 * @param {mixed} lighting 
 * @memberOf dojox.gfx3d.Cube
*/
dojox.gfx3d.Cube.prototype.draw=function(lighting){};
/**
 * @class
 * @returns {dojox.gfx3d.Cylinder} new instance
*/
dojox.gfx3d.Cylinder=function(){};
/**
 * @namespace
*/
dojox.gfx3d.Cylinder.object={};
/**
 * @param {mixed} camera 
 * @memberOf dojox.gfx3d.Cylinder
*/
dojox.gfx3d.Cylinder.prototype.render=function(camera){};
/**
 * @memberOf dojox.gfx3d.Cylinder
*/
dojox.gfx3d.Cylinder.prototype.draw=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a viewport/container for 3D objects, which knows<br>
 *	 the camera and lightings<br>
 * </blockquote>
 * @class
 * @returns {dojox.gfx3d.Viewport} new instance
*/
dojox.gfx3d.Viewport=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the lights<br>
 * </blockquote>
 * @param {Array} lights Array: an array of light object
 * or lights object
 * @param {Color,} ambient Color: an ambient object
 * @param {Color,} specular Color: an specular object
 * @memberOf dojox.gfx3d.Viewport
*/
dojox.gfx3d.Viewport.prototype.setLights=function(lights, ambient, specular){};
/**
 * @param {mixed} dim 
 * @memberOf dojox.gfx3d.Viewport
*/
dojox.gfx3d.Viewport.prototype.setDimensions=function(dim){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets a transformation matrix<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix:} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx.matrix.Matrix<br>
 * constructor for a list of acceptable arguments)
 * @returns {self} -
 * @memberOf dojox.gfx3d.Viewport
*/
dojox.gfx3d.Viewport.prototype.setCameraTransform=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 iterate all children and call their render callback function.<br>
 * </blockquote>
 * @memberOf dojox.gfx3d.Viewport
*/
dojox.gfx3d.Viewport.prototype.render=function(){};
/**
 * @memberOf dojox.gfx3d.Viewport
*/
dojox.gfx3d.Viewport.prototype.invalidate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a shortcut for dojox.gfx3d.Object.applyRightTransform<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix:} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx3d.matrix.Matrix<br>
 * constructor for a list of acceptable arguments)
 * @returns {self} -
 * @memberOf dojox.gfx3d.Viewport
*/
dojox.gfx3d.Viewport.prototype.applyCameraTransform=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 multiplies the existing matrix with an argument on right side<br>
 *	 (this.matrix * matrix)<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix:} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx3d.matrix.Matrix<br>
 * constructor for a list of acceptable arguments)
 * @returns {self} -
 * @memberOf dojox.gfx3d.Viewport
*/
dojox.gfx3d.Viewport.prototype.applyCameraRightTransform=function(matrix){};
/**
 * <b>Summary:</b><blockquote>
 *	 multiplies the existing matrix with an argument on left side<br>
 *	 (matrix * this.matrix)<br>
 * </blockquote>
 * @param {dojox.gfx3d.matrix.Matrix:} matrix a matrix or a matrix-like object
 * (see an argument of dojox.gfx3d.matrix.Matrix<br>
 * constructor for a list of acceptable arguments)
 * @returns {self} -
 * @memberOf dojox.gfx3d.Viewport
*/
dojox.gfx3d.Viewport.prototype.applyCameraLeftTransform=function(matrix){};
/**
 * @param {mixed} newObject 
 * @memberOf dojox.gfx3d.Viewport
*/
dojox.gfx3d.Viewport.prototype.addTodo=function(newObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 add new light/lights to the viewport.<br>
 * </blockquote>
 * @param {Array} lights || light object: light object(s)
 * @memberOf dojox.gfx3d.Viewport
*/
dojox.gfx3d.Viewport.prototype.addLights=function(lights){};
/**
 * @namespace
*/
dojox.gfx3d.Viewport.rawNode={};
/**
 * @namespace
 * @private
*/
dojox.gfx3d._creators={};
/**
 * @param {mixed} scheduler 
*/
dojox.gfx3d._creators.setScheduler=function(scheduler){};
/**
 * @param {mixed} drawer 
*/
dojox.gfx3d._creators.setDrawer=function(drawer){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates an edge object<br>
 *	 line: Object: a edge object (see dojox.gfx3d.defaultPath)<br>
 * </blockquote>
 * @see dojox.gfx3d#defaultPath
 * @param {mixed} tris 
 * @param {mixed} style 
 * @returns {dojox.gfx3d.Edge} -
*/
dojox.gfx3d._creators.createTriangles=function(tris, style){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates an triangle object<br>
 *	 line: Object: a triangle object (see dojox.gfx3d.defaultPath)<br>
 * </blockquote>
 * @see dojox.gfx3d#defaultPath
 * @returns {dojox.gfx3d.Scene} -
*/
dojox.gfx3d._creators.createScene=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates an edge object<br>
 *	 line: Object: a edge object (see dojox.gfx3d.defaultPath)<br>
 * </blockquote>
 * @see dojox.gfx3d#defaultPath
 * @param {mixed} quads 
 * @param {mixed} style 
 * @returns {dojox.gfx3d.Edge} -
*/
dojox.gfx3d._creators.createQuads=function(quads, style){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates an triangle object<br>
 * </blockquote>
 * @param {Array} points of points || Object
 * @returns {dojox.gfx3d.Polygon} -
*/
dojox.gfx3d._creators.createPolygon=function(points){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates an edge object<br>
 *	 line: Object: a edge object (see dojox.gfx3d.defaultPath)<br>
 * </blockquote>
 * @see dojox.gfx3d#defaultPath
 * @param {mixed} path 
 * @returns {dojox.gfx3d.Edge} -
*/
dojox.gfx3d._creators.createPath3d=function(path){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates an triangle object<br>
 *	 points: Array of points || Object<br>
 * </blockquote>
 * @param {mixed} orbit 
 * @returns {dojox.gfx3d.Cube} -
*/
dojox.gfx3d._creators.createOrbit=function(orbit){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates an edge object<br>
 *	 line: Object: a edge object (see dojox.gfx3d.defaultPath)<br>
 * </blockquote>
 * @see dojox.gfx3d#defaultPath
 * @param {mixed} edges 
 * @param {mixed} style 
 * @returns {dojox.gfx3d.Edge} -
*/
dojox.gfx3d._creators.createEdges=function(edges, style){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates an triangle object<br>
 *	 points: Array of points || Object<br>
 * </blockquote>
 * @param {mixed} cylinder 
 * @returns {dojox.gfx3d.Cube} -
*/
dojox.gfx3d._creators.createCylinder=function(cylinder){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates an triangle object<br>
 *	 points: Array of points || Object<br>
 * </blockquote>
 * @param {mixed} cube 
 * @returns {dojox.gfx3d.Cube} -
*/
dojox.gfx3d._creators.createCube=function(cube){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates an instance of the passed shapeType class<br>
 *	 shapeType: Function: a class constructor to create an instance of<br>
 *	 rawShape: Object: properties to be passed in to the classes &amp;quot;setShape&amp;quot; method<br>
 * </blockquote>
 * @param {mixed} objectType 
 * @param {mixed} rawObject 
 * @param {mixed} style 
 * @returns {dojox.gfx3d.Object} -
*/
dojox.gfx3d._creators.create3DObject=function(objectType, rawObject, style){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds a shape to the list<br>
 *	 shape: dojox.gfx.Shape: a shape<br>
 * </blockquote>
 * @param {mixed} obj 
*/
dojox.gfx3d._creators.adopt=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes a shape from the list<br>
 * </blockquote>
 * @param {mixed} obj 
 * @param {Boolean:} [silently] if true, do not redraw a picture yet
 * @returns {self} -
*/
dojox.gfx3d._creators.abandon=function(obj, silently){};
/**
 * @class
 * @returns {gfx3d._creators.setScheduler} new instance
*/
dojox.gfx3d._creators.setScheduler=function(){};
/**
 * @class
 * @returns {gfx3d._creators.setDrawer} new instance
*/
dojox.gfx3d._creators.setDrawer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 build the binary search tree, using binary space partition algorithm.<br>
 *	 The idea is for any polygon, for example, (a, b, c), the space is divided by<br>
 *	 the plane into two space: plus and minus.<br>
 *	 <br>
 *	 for any arbitary vertex p, if(p - a) dotProduct n = 0, p is inside the plane,<br>
 *	 &amp;gt; 0, p is in the plus space, vice versa for minus space.<br>
 *	 n is the normal vector that is perpendicular the plate, defined as:<br>
 *	 n = ( b - a) crossProduct ( c - a )<br>
 *	 <br>
 *	 in this implementation, n is declared as normal, ,a is declared as orient.<br>
 * </blockquote>
 * @param {object:} obj dojox.gfx3d.Object
 * @param {mixed} outline 
*/
dojox.gfx3d.scheduler.BinarySearchTree=function(obj, outline){};
/**
 * <b>Summary:</b><blockquote>
 *	 build the binary search tree, using binary space partition algorithm.<br>
 *	 The idea is for any polygon, for example, (a, b, c), the space is divided by<br>
 *	 the plane into two space: plus and minus.<br>
 *	 <br>
 *	 for any arbitary vertex p, if(p - a) dotProduct n = 0, p is inside the plane,<br>
 *	 &amp;gt; 0, p is in the plus space, vice versa for minus space.<br>
 *	 n is the normal vector that is perpendicular the plate, defined as:<br>
 *	 n = ( b - a) crossProduct ( c - a )<br>
 *	 <br>
 *	 in this implementation, n is declared as normal, ,a is declared as orient.<br>
 * </blockquote>
 * @class
 * @param {object:} obj dojox.gfx3d.Object
 * @param {mixed} outline 
 * @returns {dojox.gfx3d.scheduler.BinarySearchTree} new instance
*/
dojox.gfx3d.scheduler.BinarySearchTree=function(obj, outline){};
/**
 * @param {mixed} outline 
 * @memberOf dojox.gfx3d.scheduler.BinarySearchTree
*/
dojox.gfx3d.scheduler.BinarySearchTree.prototype.iterate=function(outline){};
/**
 * @param {mixed} obj 
 * @param {mixed} outline 
 * @memberOf dojox.gfx3d.scheduler.BinarySearchTree
*/
dojox.gfx3d.scheduler.BinarySearchTree.prototype.add=function(obj, outline){};
/**
 * @namespace
*/
dojox.gfx3d.scheduler={};
/**
 * @param {mixed} buffer 
 * @param {mixed} order 
*/
dojox.gfx3d.scheduler.zOrder=function(buffer, order){};
/**
 * @param {mixed} it 
*/
dojox.gfx3d.scheduler.outline=function(it){};
/**
 * @param {mixed} it 
*/
dojox.gfx3d.scheduler.order=function(it){};
/**
 * @param {mixed} buffer 
 * @param {mixed} outline 
*/
dojox.gfx3d.scheduler.bsp=function(buffer, outline){};
/**
 * @namespace
*/
dojox.gfx3d.drawer={};
/**
 * @param {mixed} todos 
 * @param {mixed} objects 
 * @param {mixed} viewport 
*/
dojox.gfx3d.drawer.conservative=function(todos, objects, viewport){};
/**
 * @param {mixed} todos 
 * @param {mixed} objects 
 * @param {mixed} viewport 
*/
dojox.gfx3d.drawer.chart=function(todos, objects, viewport){};
/**
 * @namespace
*/
dojox.gfx3d.vector={};
/**
 * <b>Summary:</b><blockquote>
 *	 sum of the vectors<br>
 * </blockquote>
*/
dojox.gfx3d.vector.sum=function(){};
/**
 * @param {Pointer} a 
 * @param {Pointer} b 
*/
dojox.gfx3d.vector.substract=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 find the normal of the implicit surface<br>
 * </blockquote>
 * @param {Point||Array} a Object: a point
 * @param {Point} b Object: a point
 * @param {Point} c Object: a point
*/
dojox.gfx3d.vector.normalize=function(a, b, c){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a matrix to a point<br>
 *	 matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied<br>
 * </blockquote>
 * @param {Number||Point} a Number: an x coordinate of a point
 * @param {Number||Point} b Number: a y coordinate of a point
 * @param {Number,} c Number: a z coordinate of a point
 * @param {Number,} d Number: an x coordinate of a point
 * @param {Number,} e Number: a y coordinate of a point
 * @param {Number,} f Number: a z coordinate of a point
 * @returns {Object} -
*/
dojox.gfx3d.vector.dotProduct=function(a, b, c, d, e, f){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a matrix to a point<br>
 *	 matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied<br>
 * </blockquote>
 * @param {Number||Point} a Number: an x coordinate of a point
 * @param {Number||Point} b Number: a y coordinate of a point
 * @param {Number,} c Number: a z coordinate of a point
 * @param {Number,} d Number: an x coordinate of a point
 * @param {Number,} e Number: a y coordinate of a point
 * @param {Number,} f Number: a z coordinate of a point
 * @returns {Object} -
*/
dojox.gfx3d.vector.crossProduct=function(a, b, c, d, e, f){};
/**
 * <b>Summary:</b><blockquote>
 *	 center of the vectors<br>
 * </blockquote>
*/
dojox.gfx3d.vector.center=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a cross product of two vectorss, (x, y, z) and (u, v, w)<br>
 * </blockquote>
 * @param {Number:} x an x coordinate of a point
 * @param {Number:} y a y coordinate of a point
 * @param {Number:} z a z coordinate of a point
 * @param {Number:} u an x coordinate of a point
 * @param {Number:} v a y coordinate of a point
 * @param {Number:} w a z coordinate of a point
 * @private
 * @returns {Number} -
*/
dojox.gfx3d.vector._dotProduct=function(x, y, z, u, v, w){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a cross product of two vectorss, (x, y, z) and (u, v, w)<br>
 * </blockquote>
 * @param {Number:} x an x coordinate of a point
 * @param {Number:} y a y coordinate of a point
 * @param {Number:} z a z coordinate of a point
 * @param {Number:} u an x coordinate of a point
 * @param {Number:} v a y coordinate of a point
 * @param {Number:} w a z coordinate of a point
 * @private
 * @returns {Object} -
*/
dojox.gfx3d.vector._crossProduct=function(x, y, z, u, v, w){};
/**
 * @private
*/
dojox.grid.__ViewDef=function(){};
/**
 * @private
*/
dojox.grid.__DataViewDef=function(){};
/**
 * @private
*/
dojox.grid.__DataCellDef=function(){};
/**
 * @private
*/
dojox.grid.__CellDef=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A collection of grid views. Owned by grid and used internally for managing grid views.<br>
 * </blockquote>
 * Grid creates views automatically based on grid's layout structure.<br>
 * Users should typically not need to access individual views or the views collection directly.
 * @param {mixed} inGrid 
*/
dojox.grid._ViewManager=function(inGrid){};
/**
 * <b>Summary:</b><blockquote>
 *	 A collection of grid columns. A grid is comprised of a set of views that stack horizontally.<br>
 *	 Grid creates views automatically based on grid's layout structure.<br>
 *	 Users should typically not need to access individual views directly.<br>
 * </blockquote>
*/
dojox.grid._View=function(){};
/**
*/
dojox.grid._TreeView=function(){};
/**
*/
dojox.grid._TreeLayout=function(){};
/**
*/
dojox.grid._TreeGridView=function(){};
/**
*/
dojox.grid._TreeGridContentBuilder=function(){};
/**
*/
dojox.grid._TreeFocusManager=function(){};
/**
*/
dojox.grid._TreeContentBuilder=function(){};
/**
 * @param {mixed} kwArgs 
*/
dojox.grid._TreeAggregator=function(kwArgs){};
/**
 * @param {mixed} view 
 * @private
*/
dojox.grid._SelectorContentBuilder=function(view){};
/**
 * <b>Summary:</b><blockquote>
 *	 Custom grid view. If used in a grid structure, provides a small selectable region for grid rows.<br>
 *	 <br>
 *	 <br>
 *	 styling<br>
 *	 <br>
 *	 <br>
 *	 event handlers<br>
 * </blockquote>
*/
dojox.grid._Selector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Preserve selections across various user actions.<br>
 * </blockquote>
 * When this feature is turned on, Grid will try to preserve selections across actions, e.g. sorting, filtering etc.<br>
 * <br>
 * Precondition - Identifier(id) is required for store since id is the only way for differentiating row items.<br>
 * Known issue - The preserved selections might be inaccurate if some unloaded rows are previously selected by range(e.g.SHIFT + click)
 * @param {mixed} selection 
 * @example
 * 	//To turn on this - please set 'keepSelection' attribute to true
 * 	&lt;div dojoType="dojox.grid.DataGrid" keepSelection = true .../&gt;
 * 	&lt;div dojoType="dojox.grid.TreeGrid" keepSelection = true .../&gt;
 * 	&lt;div dojoType="dojox.grid.LazyTreeGrid" keepSelection = true .../&gt;
*/
dojox.grid._SelectionPreserver=function(selection){};
/**
 * @param {mixed} inContentNodes 
*/
dojox.grid._Scroller=function(inContentNodes){};
/**
 * <b>Summary:</b><blockquote>
 *	 Custom grid view. If used in a grid structure, provides a small selectable region for grid rows.<br>
 *	 <br>
 *	 <br>
 *	 styling<br>
 *	 <br>
 *	 <br>
 *	 event handlers<br>
 * </blockquote>
*/
dojox.grid._RowSelector=function(){};
/**
 * @param {mixed} inGrid 
*/
dojox.grid._RowManager=function(inGrid){};
/**
 * @private
*/
dojox.grid._RadioSelector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override the dojox.grid._TreeLayout to modify the _TreeGridView and cell formatter<br>
 * </blockquote>
*/
dojox.grid._LazyTreeLayout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An internal object used to cache the tree path and open state of each item.<br>
 *	 The form of the cache items would be an object array:<br>
 *	 [{opened: true/false, treePath: [level0 parent id, level1 parent id, ...]}]<br>
 * </blockquote>
 * @example
 *  [{opened: true, treePath: []},
 *   {opened: false, treePath: ["root0"]},
 *   {opened: false, treePath: ["root0"]},
 *   {opened: false, treePath: []},
 *   ...]
*/
dojox.grid._LazyTreeGridCache=function(){};
/**
*/
dojox.grid._LazyExpando=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Controls grid cell layout. Owned by grid and used internally.<br>
 *	 <br>
 *	 <br>
 *	 flat array of grid cells<br>
 *	 <br>
 *	 <br>
 *	 structured array of grid cells<br>
 *	 <br>
 *	 <br>
 *	 default cell width<br>
 * </blockquote>
 * @param {mixed} inGrid 
*/
dojox.grid._Layout=function(inGrid){};
/**
 * @param {mixed} view 
 * @private
*/
dojox.grid._InputSelectorHeaderBuilder=function(view){};
/**
 * @param {mixed} view 
 * @private
*/
dojox.grid._InputSelectorContentBuilder=function(view){};
/**
*/
dojox.grid._GridAvatar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A grid widget with virtual scrolling, cell editing, complex rows,<br>
 *	 sorting, fixed columns, sizeable columns, etc.<br>
 * </blockquote>
 * _Grid provides the full set of grid features without any<br>
 * direct connection to a data store.<br>
 * <br>
 * The grid exposes a get function for the grid, or optionally<br>
 * individual columns, to populate cell contents.<br>
 * <br>
 * The grid is rendered based on its structure, an object describing<br>
 * column and cell layout.
 * @example
 * A quick sample:
 * 
 * define a get function
 * 	function get(inRowIndex){ // called in cell context
 * 		return [this.index, inRowIndex].join(', ');
 * 	}
 * 
 * define the grid structure:
 * 	var structure = [ // array of view objects
 * 		{ cells: [// array of rows, a row is an array of cells
 * 			[
 * 				{ name: "Alpha", width: 6 },
 * 				{ name: "Beta" },
 * 				{ name: "Gamma", get: get }]
 * 		]}
 * 	];
 * 
 * 	&lt;div id="grid"
 * 		rowCount="100" get="get"
 * 		structure="structure"
 * 		dojoType="dojox.grid._Grid"&gt;&lt;/div&gt;
*/
dojox.grid._Grid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Controls grid cell focus. Owned by grid and used internally for focusing.<br>
 *	 Note: grid cell actually receives keyboard input only when cell is being edited.<br>
 * </blockquote>
 * @param {mixed} inGrid 
*/
dojox.grid._FocusManager=function(inGrid){};
/**
*/
dojox.grid._Expando=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 _Grid mixin that provides default implementations for grid events.<br>
 * </blockquote>
 * Default synthetic events dispatched for _Grid. dojo.connect to events to<br>
 * retain default implementation or override them for custom handling.<br>
*/
dojox.grid._Events=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Controls grid cell editing process. Owned by grid and used internally for editing.<br>
 * </blockquote>
 * @param {dojox.Grid} inGrid The dojox.Grid this editor should be attached to
*/
dojox.grid._EditManager=function(inGrid){};
/**
*/
dojox.grid._DeferredTextWidget=function(){};
/**
 * @private
*/
dojox.grid._CheckBoxSelector=function(){};
/**
*/
dojox.grid.TreeSelection=function(){};
/**
 * @param {String|Integer[]|Integer|dojox.grid.TreePath} path 
 * @param {dojox.grid.TreeGrid} grid 
*/
dojox.grid.TreePath=function(path, grid){};
/**
 * <b>Summary:</b><blockquote>
 *	 A grid that supports nesting rows - it provides an expando function<br>
 *	 similar to dijit.Tree.  It also provides mechanisms for aggregating<br>
 *	 the values of subrows<br>
 * </blockquote>
 * TreeGrid currently only works on "simple" structures.  That is,<br>
 * single-view structures with a single row in them.<br>
 * <br>
 * The TreeGrid works using the concept of "levels" - level 0 are the<br>
 * top-level items.<br>
*/
dojox.grid.TreeGrid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Manages row selection for grid. Owned by grid and used internally<br>
 *	 for selection. Override to implement custom selection.<br>
 * </blockquote>
 * @param {mixed} inGrid 
*/
dojox.grid.Selection=function(inGrid){};
/**
 * @param {Object} args 
*/
dojox.grid.LazyTreeGridStoreModel=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 An enhanced TreeGrid widget which supports lazy-loading for nested children items<br>
 * </blockquote>
 * LazyTreeGrid inherits from dojo.grid.TreeGrid and applies virtual scrolling mechanism<br>
 * to nested children rows so that it's possible to deal with complex tree structure data set<br>
 * with nested and huge children rows. It's also compatible with dijit.tree.ForestStoreModel<br>
 * <br>
 * Most methods and properties pertaining to dojox.grid.DataGrid<br>
 * and dojox.grid.TreeGrid also apply here<br>
 * <br>
 * LazyTreeGrid does not support summary row/items aggregate due to the lazy-loading rationale.
 * @example
 * 	colSpans = {
 * 	0:	[
 * 			{start: 0, end: 1, primary: 0},
 * 			{start: 2, end: 4, primary: 3}
 * 		],
 * 	1:	[
 * 			{start: 0, end: 3, primary: 1}
 * 		]
 * 	};
*/
dojox.grid.LazyTreeGrid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides enhanced features based on DataGrid<br>
 * </blockquote>
 * EnhancedGrid features are implemented as plugins that could be loaded on demand.<br>
 * Explicit dojo.require() is needed to use these feature plugins.
 * @example
 * A quick sample to use EnhancedGrid features:
 * 
 * Step 1. Load EnhancedGrid and required features
 *	&lt;script type="text/javascript"&gt;
 * 		dojo.require("dojox.grid.EnhancedGrid");
 * 		dojo.require("dojox.grid.enhanced.plugins.DnD");
 * 		dojo.require("dojox.grid.enhanced.plugins.Menu");
 * 		dojo.require("dojox.grid.enhanced.plugins.NestedSorting");
 * 		dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");
 * 	&lt;/script&gt;
 * 
 * Step 2. Use EnhancedGrid
 * - Via HTML markup
 * 	&lt;div dojoType="dojox.grid.EnhancedGrid" ...
 * 		plugins="{nestedSorting: true, dnd: true, indirectSelection: true,
 * 		menus:{headerMenu:"headerMenuId", rowMenu:"rowMenuId", cellMenu:"cellMenuId",
 * 		selectedRegionMenu:"selectedRegionMenuId"}}"&gt;
 * 			...
 * 	&lt;/div&gt;
 * 
 * - Or via JavaScript
 * 	&lt;script type="text/javascript"&gt;
 * 		var grid = new dojox.grid.EnhancedGrid({plugins : {nestedSorting: true, dnd: true, indirectSelection: true,
 * 				   menus:{headerMenu:"headerMenuId", rowMenu:"rowMenuId", cellMenu:"cellMenuId",selectedRegionMenu:"selectedRegionMenuId"}},
 * 				   ... }, dojo.byId('gridDiv'));
 * 		grid.startup();
 * 	&lt;/script&gt;
 * 
 * 
 * Plugin Support
 * [Note: Plugin support is still experimental]
 * 
 * You can either customize the default plugins or add new ones, more details please see
 * - dojox.grid.enhanced._PluginManager
 * - dojox.grid.enhanced._Plugin
 * - dojox.grid.enhanced.plugins.*
*/
dojox.grid.EnhancedGrid=function(){};
/**
 * @param {mixed} grid 
*/
dojox.grid.DataSelection=function(grid){};
/**
*/
dojox.grid.DataGrid=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced={};
/**
 * @namespace
*/
dojox.grid.cells={};
/**
 * @class
 * @returns {dojox.grid._DeferredTextWidget} new instance
*/
dojox.grid._DeferredTextWidget=function(){};
/**
 * @memberOf dojox.grid._DeferredTextWidget
*/
dojox.grid._DeferredTextWidget.prototype.postCreate=function(){};
/**
 * @param {mixed} inCell 
*/
dojox.grid.cells._Widget=function(inCell){};
/**
 * <b>Summary:</b><blockquote>
 *	 Respresents a grid cell and contains information about column options and methods<br>
 *	 for retrieving cell related information.<br>
 *	 Each column in a grid layout has a cell object and most events and many methods<br>
 *	 provide access to these objects.<br>
 *	 <br>
 *	 <br>
 *	 private<br>
 * </blockquote>
 * @param {mixed} inProps 
*/
dojox.grid.cells._Base=function(inProps){};
/**
 * <b>Summary:</b><blockquote>
 *	 IndirectSelection cell(column) for single selection mode, using styles of dijit.form.RadioButton<br>
 * </blockquote>
*/
dojox.grid.cells.SingleRowSelector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 grid cell that provides a standard select for editing<br>
 * </blockquote>
 * @param {mixed} inCell 
*/
dojox.grid.cells.Select=function(inCell){};
/**
 * <b>Summary:</b><blockquote>
 *	 Common attributes &amp;amp; functions for row selectors(Radio|CheckBox)<br>
 * </blockquote>
*/
dojox.grid.cells.RowSelector=function(){};
/**
*/
dojox.grid.cells.RowIndex=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Indirect selection cell for multiple or extended mode, using dijit.form.CheckBox<br>
 * </blockquote>
*/
dojox.grid.cells.MultipleRowSelector=function(){};
/**
*/
dojox.grid.cells.Editor=function(){};
/**
*/
dojox.grid.cells.DateTextBox=function(){};
/**
*/
dojox.grid.cells.ComboBox=function(){};
/**
*/
dojox.grid.cells.CheckBox=function(){};
/**
*/
dojox.grid.cells.Cell=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 grid cell that provides a standard checkbox that is always on for editing<br>
 * </blockquote>
*/
dojox.grid.cells.Bool=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 grid cell that is always in an editable state, regardless of grid editing state<br>
 * </blockquote>
*/
dojox.grid.cells.AlwaysEdit=function(){};
/**
 * @namespace
*/
dojox.grid.cells.TreeCell={};
/**
 * <b>Summary:</b><blockquote>
 *	 Respresents a grid cell and contains information about column options and methods<br>
 *	 for retrieving cell related information.<br>
 *	 Each column in a grid layout has a cell object and most events and many methods<br>
 *	 provide access to these objects.<br>
 *	 <br>
 *	 <br>
 *	 private<br>
 * </blockquote>
 * @class
 * @param {mixed} inProps 
 * @returns {dojox.grid.cells._Base} new instance
*/
dojox.grid.cells._Base=function(inProps){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the value of the grid editor<br>
 * </blockquote>
 * @param {int} inRowIndex grid row index
 * @param {anything} inValue value of editor
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.setValue=function(inRowIndex, inValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 save editor state<br>
 * </blockquote>
 * @param {int} inRowIndex grid row index
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.save=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 restore editor state<br>
 * </blockquote>
 * @param {int} inRowIndex grid row index
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.restore=function(inRowIndex){};
/**
 * @param {mixed} inNode 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.registerOnBlur=function(inNode, inRowIndex){};
/**
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.needFormatNode=function(inDatum, inRowIndex){};
/**
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.isFlex=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns value entered into editor<br>
 * </blockquote>
 * @param {int} inRowIndex grid row index
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.getValue=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 gets the dom node for a given grid cell.<br>
 * </blockquote>
 * @param {int} inRowIndex grid row index
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.getNode=function(inRowIndex){};
/**
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.getHeaderNode=function(){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.getEditNode=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 format the editing dom node. Use when editor is a widget.<br>
 * </blockquote>
 * @param {dom} inNode node
 * dom node for the editor
 * @param {anything} inDatum cell data to edit
 * @param {int} inRowIndex grid row index
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.formatNode=function(inNode, inDatum, inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 formats the cell for editing<br>
 * </blockquote>
 * @param {anything} inDatum cell data to edit
 * @param {int} inRowIndex grid row index
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.formatEditing=function(inDatum, inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 provides the html for a given grid cell.<br>
 * </blockquote>
 * @param {int} inRowIndex grid row index
 * @param {mixed} inItem 
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.format=function(inRowIndex, inItem){};
/**
 * <b>Summary:</b><blockquote>
 *	 focus the grid editor<br>
 * </blockquote>
 * @param {int} inRowIndex grid row index
 * @param {dom} inNode node
 * editor node
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.focus=function(inRowIndex, inNode){};
/**
 * @param {mixed} m 
 * @param {mixed} e 
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.dispatchEvent=function(m, e){};
/**
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.cancelFormatNode=function(){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.cancelEdit=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 cancel cell edit<br>
 * </blockquote>
 * @param {int} inRowIndex grid row index
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.cancel=function(inRowIndex){};
/**
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.canResize=function(){};
/**
 * @param {mixed} inValue 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.applyEdit=function(inValue, inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 apply edit from cell editor<br>
 * </blockquote>
 * @param {int} inRowIndex grid row index
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype.apply=function(inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @private
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype._onEditBlur=function(inRowIndex){};
/**
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @private
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype._formatNode=function(inDatum, inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when editing is completed to clean up editor<br>
 * </blockquote>
 * @param {int} inRowIndex grid row index
 * @private
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype._finish=function(inRowIndex){};
/**
 * @param {mixed} inValue 
 * @param {mixed} callArgs 
 * @private
 * @memberOf dojox.grid.cells._Base
*/
dojox.grid.cells._Base.prototype._defaultFormat=function(inValue, callArgs){};
/**
 * @namespace
*/
dojox.grid.cells._Base.grid={};
/**
 * @class
 * @returns {dojox.grid.cells.Cell} new instance
*/
dojox.grid.cells.Cell=function(){};
/**
 * @param {mixed} inNode 
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells.Cell
*/
dojox.grid.cells.Cell.prototype.formatNode=function(inNode, inDatum, inRowIndex){};
/**
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells.Cell
*/
dojox.grid.cells.Cell.prototype.formatEditing=function(inDatum, inRowIndex){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.cells.Cell
*/
dojox.grid.cells.Cell.prototype.doKey=function(e){};
/**
 * @param {mixed} inRowIndex 
 * @private
 * @memberOf dojox.grid.cells.Cell
*/
dojox.grid.cells.Cell.prototype._finish=function(inRowIndex){};
/**
 * @class
 * @returns {dojox.grid.cells.RowIndex} new instance
*/
dojox.grid.cells.RowIndex=function(){};
/**
 * @memberOf dojox.grid.cells.RowIndex
*/
dojox.grid.cells.RowIndex.prototype.postscript=function(){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells.RowIndex
*/
dojox.grid.cells.RowIndex.prototype.get=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 grid cell that provides a standard select for editing<br>
 * </blockquote>
 * @class
 * @param {mixed} inCell 
 * @returns {dojox.grid.cells.Select} new instance
*/
dojox.grid.cells.Select=function(inCell){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells.Select
*/
dojox.grid.cells.Select.prototype.getValue=function(inRowIndex){};
/**
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells.Select
*/
dojox.grid.cells.Select.prototype.formatEditing=function(inDatum, inRowIndex){};
/**
 * @param {mixed} inValue 
 * @param {mixed} callArgs 
 * @private
 * @memberOf dojox.grid.cells.Select
*/
dojox.grid.cells.Select.prototype._defaultFormat=function(inValue, callArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 grid cell that is always in an editable state, regardless of grid editing state<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.cells.AlwaysEdit} new instance
*/
dojox.grid.cells.AlwaysEdit=function(){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells.AlwaysEdit
*/
dojox.grid.cells.AlwaysEdit.prototype.applyStaticValue=function(inRowIndex){};
/**
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @private
 * @memberOf dojox.grid.cells.AlwaysEdit
*/
dojox.grid.cells.AlwaysEdit.prototype._formatNode=function(inDatum, inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 grid cell that provides a standard checkbox that is always on for editing<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.cells.Bool} new instance
*/
dojox.grid.cells.Bool=function(){};
/**
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells.Bool
*/
dojox.grid.cells.Bool.prototype.formatEditing=function(inDatum, inRowIndex){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.cells.Bool
*/
dojox.grid.cells.Bool.prototype.doclick=function(e){};
/**
 * @class
 * @param {mixed} inCell 
 * @returns {dojox.grid.cells._Widget} new instance
*/
dojox.grid.cells._Widget=function(inCell){};
/**
 * @param {mixed} inNode 
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells._Widget
*/
dojox.grid.cells._Widget.prototype.sizeWidget=function(inNode, inDatum, inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inValue 
 * @memberOf dojox.grid.cells._Widget
*/
dojox.grid.cells._Widget.prototype.setValue=function(inRowIndex, inValue){};
/**
 * @param {mixed} inDatum 
 * @memberOf dojox.grid.cells._Widget
*/
dojox.grid.cells._Widget.prototype.getWidgetProps=function(inDatum){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells._Widget
*/
dojox.grid.cells._Widget.prototype.getValue=function(inRowIndex){};
/**
 * @param {mixed} inNode 
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells._Widget
*/
dojox.grid.cells._Widget.prototype.formatNode=function(inNode, inDatum, inRowIndex){};
/**
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells._Widget
*/
dojox.grid.cells._Widget.prototype.formatEditing=function(inDatum, inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inNode 
 * @memberOf dojox.grid.cells._Widget
*/
dojox.grid.cells._Widget.prototype.focus=function(inRowIndex, inNode){};
/**
 * @param {mixed} inNode 
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells._Widget
*/
dojox.grid.cells._Widget.prototype.createWidget=function(inNode, inDatum, inRowIndex){};
/**
 * @param {mixed} inNode 
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells._Widget
*/
dojox.grid.cells._Widget.prototype.attachWidget=function(inNode, inDatum, inRowIndex){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.grid.cells._Widget
*/
dojox.grid.cells._Widget.prototype._unescapeHTML=function(value){};
/**
 * @param {mixed} inRowIndex 
 * @private
 * @memberOf dojox.grid.cells._Widget
*/
dojox.grid.cells._Widget.prototype._finish=function(inRowIndex){};
/**
 * @class
 * @returns {dojox.grid.cells.ComboBox} new instance
*/
dojox.grid.cells.ComboBox=function(){};
/**
 * @param {mixed} inDatum 
 * @memberOf dojox.grid.cells.ComboBox
*/
dojox.grid.cells.ComboBox.prototype.getWidgetProps=function(inDatum){};
/**
 * @memberOf dojox.grid.cells.ComboBox
*/
dojox.grid.cells.ComboBox.prototype.getValue=function(){};
/**
 * @class
 * @returns {dojox.grid.cells.DateTextBox} new instance
*/
dojox.grid.cells.DateTextBox=function(){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inValue 
 * @memberOf dojox.grid.cells.DateTextBox
*/
dojox.grid.cells.DateTextBox.prototype.setValue=function(inRowIndex, inValue){};
/**
 * @param {mixed} inDatum 
 * @memberOf dojox.grid.cells.DateTextBox
*/
dojox.grid.cells.DateTextBox.prototype.getWidgetProps=function(inDatum){};
/**
 * @class
 * @returns {dojox.grid.cells.CheckBox} new instance
*/
dojox.grid.cells.CheckBox=function(){};
/**
 * @param {mixed} inNode 
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells.CheckBox
*/
dojox.grid.cells.CheckBox.prototype.sizeWidget=function(inNode, inDatum, inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inValue 
 * @memberOf dojox.grid.cells.CheckBox
*/
dojox.grid.cells.CheckBox.prototype.setValue=function(inRowIndex, inValue){};
/**
 * @memberOf dojox.grid.cells.CheckBox
*/
dojox.grid.cells.CheckBox.prototype.getValue=function(){};
/**
 * @class
 * @returns {dojox.grid.cells.Editor} new instance
*/
dojox.grid.cells.Editor=function(){};
/**
 * @memberOf dojox.grid.cells.Editor
*/
dojox.grid.cells.Editor.prototype.populateEditor=function(){};
/**
 * @param {mixed} inDatum 
 * @memberOf dojox.grid.cells.Editor
*/
dojox.grid.cells.Editor.prototype.getWidgetProps=function(inDatum){};
/**
 * @param {mixed} inNode 
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells.Editor
*/
dojox.grid.cells.Editor.prototype.formatNode=function(inNode, inDatum, inRowIndex){};
/**
 * @param {mixed} inNode 
 * @param {mixed} inDatum 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.cells.Editor
*/
dojox.grid.cells.Editor.prototype.createWidget=function(inNode, inDatum, inRowIndex){};
/**
 * @param {mixed} itemId 
*/
dojox.grid.cells.TreeCell.getOpenState=function(itemId){};
/**
 * @param {mixed} inRowIndexes 
 * @param {mixed} inItem 
*/
dojox.grid.cells.TreeCell.formatIndexes=function(inRowIndexes, inItem){};
/**
 * @param {mixed} inRowIndexes 
 * @param {mixed} inItem 
 * @param {mixed} level 
 * @param {mixed} summaryRow 
 * @param {mixed} toggleClass 
 * @param {mixed} cellClasses 
*/
dojox.grid.cells.TreeCell.formatAtLevel=function(inRowIndexes, inItem, level, summaryRow, toggleClass, cellClasses){};
/**
 * @param {mixed} inItem 
 * @param {mixed} level 
 * @param {mixed} inRowIndexes 
*/
dojox.grid.cells.TreeCell.formatAggregate=function(inItem, level, inRowIndexes){};
/**
 * @class
 * @returns {dojox.grid.cells.TreeCell.formatAggregate} new instance
*/
dojox.grid.cells.TreeCell.formatAggregate=function(){};
/**
 * @class
 * @returns {dojox.grid.cells.TreeCell.formatIndexes} new instance
*/
dojox.grid.cells.TreeCell.formatIndexes=function(){};
/**
 * @class
 * @returns {dojox.grid.cells.TreeCell.getOpenState} new instance
*/
dojox.grid.cells.TreeCell.getOpenState=function(){};
/**
 * @class
 * @returns {dojox.grid.cells.TreeCell.formatAtLevel} new instance
*/
dojox.grid.cells.TreeCell.formatAtLevel=function(){};
/**
 * @class
 * @private
 * @returns {dojox.grid._CheckBoxSelector} new instance
*/
dojox.grid._CheckBoxSelector=function(){};
/**
 * @memberOf dojox.grid._CheckBoxSelector
*/
dojox.grid._CheckBoxSelector.prototype.renderHeader=function(){};
/**
 * @memberOf dojox.grid._CheckBoxSelector
*/
dojox.grid._CheckBoxSelector.prototype.postCreate=function(){};
/**
 * @memberOf dojox.grid._CheckBoxSelector
*/
dojox.grid._CheckBoxSelector.prototype.onSelectionChanged=function(){};
/**
 * @param {mixed} rowCount 
 * @private
 * @memberOf dojox.grid._CheckBoxSelector
*/
dojox.grid._CheckBoxSelector.prototype._updateVisibility=function(rowCount){};
/**
 * @class
 * @extends dojox.grid.__CellDef
 * @private
 * @returns {dojox.grid.__DataCellDef} new instance
*/
dojox.grid.__DataCellDef=function(){};
/**
 * @class
 * @extends dojox.grid.__ViewDef
 * @private
 * @returns {dojox.grid.__DataViewDef} new instance
*/
dojox.grid.__DataViewDef=function(){};
/**
 * @class
 * @returns {dojox.grid.DataGrid} new instance
*/
dojox.grid.DataGrid=function(){};
/**
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid._by_idx=[];
/**
 * <b>Summary:</b><blockquote>
 *	 Perform row styling<br>
 * </blockquote>
 * @param {mixed} inRow 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.styleRowState=function(inRow){};
/**
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.sort=function(){};
/**
 * @param {mixed} store 
 * @param {mixed} query 
 * @param {mixed} queryOptions 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.setStore=function(store, query, queryOptions){};
/**
 * @param {mixed} query 
 * @param {mixed} queryOptions 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.setQuery=function(query, queryOptions){};
/**
 * @param {mixed} items 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.setItems=function(items){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove the selected rows from the grid.<br>
 * </blockquote>
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.removeSelectedRows=function(){};
/**
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.postCreate=function(){};
/**
 * @param {mixed} inRow 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.onStyleRow=function(inRow){};
/**
 * @param {mixed} err 
 * @param {mixed} req 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.onFetchError=function(err, req){};
/**
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.getSortProps=function(){};
/**
 * @param {mixed} item 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.getItemIndex=function(item){};
/**
 * @param {mixed} idx 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.getItem=function(idx){};
/**
 * @param {mixed} inCell 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.getCellName=function(inCell){};
/**
 * <b>Summary:</b><blockquote>
 *	 Default data getter.<br>
 * </blockquote>
 * Provides data to display in a grid cell. Called in grid cell context.<br>
 * So this.cell.index is the column index.
 * @param {Integer} inRowIndex Row for which to provide data
 * @param {mixed} inItem 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.get=function(inRowIndex, inItem){};
/**
 * @param {mixed} query 
 * @param {mixed} reRender 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.filter=function(query, reRender){};
/**
 * @param {mixed} inCell 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.doStartEdit=function(inCell, inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.doCancelEdit=function(inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inDataAttr 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.doApplyEdit=function(inRowIndex, inDataAttr){};
/**
 * @param {mixed} inValue 
 * @param {mixed} inRowIndex 
 * @param {mixed} inAttrName 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.doApplyCellEdit=function(inValue, inRowIndex, inAttrName){};
/**
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.destroy=function(){};
/**
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.createSelection=function(){};
/**
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.canSort=function(){};
/**
 * @param {mixed} inCell 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype.canEdit=function(inCell, inRowIndex){};
/**
 * @param {mixed} store 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._setStore=function(store){};
/**
 * @param {mixed} query 
 * @param {mixed} queryOptions 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._setQuery=function(query, queryOptions){};
/**
 * @param {mixed} inRowIndex 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._rowToPage=function(inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._requestsPending=function(inRowIndex){};
/**
 * @param {mixed} inPageIndex 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._requestPage=function(inPageIndex){};
/**
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._render=function(){};
/**
 * @param {mixed} isRender 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._refresh=function(isRender){};
/**
 * @param {mixed} inRowIndex 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._preparePage=function(inRowIndex){};
/**
 * @param {mixed} inPageIndex 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._pageToRow=function(inPageIndex){};
/**
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} oldValue 
 * @param {mixed} newValue 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._onSet=function(item, attribute, oldValue, newValue){};
/**
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._onRevert=function(){};
/**
 * @param {mixed} item 
 * @param {mixed} parentInfo 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._onNew=function(item, parentInfo){};
/**
 * @param {mixed} err 
 * @param {mixed} req 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._onFetchError=function(err, req){};
/**
 * @param {mixed} items 
 * @param {mixed} req 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._onFetchComplete=function(items, req){};
/**
 * @param {mixed} size 
 * @param {mixed} req 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._onFetchBegin=function(size, req){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._onDelete=function(item){};
/**
 * @param {mixed} inPageIndex 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._needPage=function(inPageIndex){};
/**
 * @param {mixed} item 
 * @param {mixed} isDeleted 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._getItemIndex=function(item, isDeleted){};
/**
 * @param {mixed} idx 
 * @param {mixed} attr 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._getItemAttr=function(idx, attr){};
/**
 * @param {mixed} start 
 * @param {mixed} isRender 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._fetch=function(start, isRender){};
/**
 * @param {mixed} item 
 * @param {mixed} index 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._createItem=function(item, index){};
/**
 * @param {mixed} idx 
 * @param {mixed} attr 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._copyAttr=function(idx, attr){};
/**
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._clearData=function(){};
/**
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._checkUpdateStatus=function(){};
/**
 * @param {mixed} item 
 * @param {mixed} index 
 * @param {mixed} noUpdate 
 * @private
 * @memberOf dojox.grid.DataGrid
*/
dojox.grid.DataGrid.prototype._addItem=function(item, index, noUpdate){};
/**
 * @class
 * @param {mixed} grid 
 * @returns {dojox.grid.DataSelection} new instance
*/
dojox.grid.DataSelection=function(grid){};
/**
 * @memberOf dojox.grid.DataSelection
*/
dojox.grid.DataSelection.prototype.getSelected=function(){};
/**
 * @param {mixed} inPrev 
 * @memberOf dojox.grid.DataSelection
*/
dojox.grid.DataSelection.prototype.getNextSelected=function(inPrev){};
/**
 * @memberOf dojox.grid.DataSelection
*/
dojox.grid.DataSelection.prototype.getFirstSelected=function(){};
/**
 * @memberOf dojox.grid.DataSelection
*/
dojox.grid.DataSelection.prototype.destroy=function(){};
/**
 * @param {mixed} inItemOrIndex 
 * @memberOf dojox.grid.DataSelection
*/
dojox.grid.DataSelection.prototype.deselectAll=function(inItemOrIndex){};
/**
 * @param {mixed} inItemOrIndex 
 * @memberOf dojox.grid.DataSelection
*/
dojox.grid.DataSelection.prototype.deselect=function(inItemOrIndex){};
/**
 * @param {mixed} inItemOrIndex 
 * @memberOf dojox.grid.DataSelection
*/
dojox.grid.DataSelection.prototype.addToSelection=function(inItemOrIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Controls grid cell editing process. Owned by grid and used internally for editing.<br>
 * </blockquote>
 * @class
 * @param {dojox.Grid} inGrid The dojox.Grid this editor should be attached to
 * @returns {dojox.grid._EditManager} new instance
*/
dojox.grid._EditManager=function(inGrid){};
/**
 * @namespace
*/
dojox.grid._EditManager.info={};
/**
 * @param {mixed} inRow 
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.styleRow=function(inRow){};
/**
 * @param {mixed} inCell 
 * @param {mixed} inRowIndex 
 * @param {mixed} inEditing 
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.start=function(inCell, inRowIndex, inEditing){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the given cell to be edited<br>
 * </blockquote>
 * @param {Object} inCell Grid cell object
 * @param {Integer} inRowIndex Grid row index
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.setEditCell=function(inCell, inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Save the grid editing state<br>
 * </blockquote>
 * @param {Integer} inRowIndex Grid row index
 * @param {Object} inView Grid view
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.save=function(inRowIndex, inView){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.rowClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Restores the grid editing state<br>
 * </blockquote>
 * @param {Object} inView Grid view
 * @param {Integer} inRowIndex Grid row index
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.restore=function(inView, inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Indicates editing state of the grid.<br>
 * </blockquote>
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.isEditing=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Indicates if the given row is being edited.<br>
 * </blockquote>
 * @param {Integer} inRowIndex Grid row index
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.isEditRow=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Indicates if the given cell is being edited.<br>
 * </blockquote>
 * @param {Integer} inRowIndex Grid row index
 * @param {Integer} inCellIndex Grid cell index
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.isEditCell=function(inRowIndex, inCellIndex){};
/**
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.focusEditor=function(){};
/**
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.editorCancel=function(){};
/**
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.editorApply=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.dispatchEvent=function(e){};
/**
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Invoke editing when cell is focused<br>
 * </blockquote>
 * @param {cell} inCell object
 * Grid cell object
 * @param {Integer} inRowIndex Grid row index
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.cellFocus=function(inCell, inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancel a grid edit<br>
 * </blockquote>
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.cancel=function(){};
/**
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.applyRowEdit=function(){};
/**
 * @param {mixed} inValue 
 * @param {mixed} inCell 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.applyCellEdit=function(inValue, inCell, inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Apply a grid edit<br>
 * </blockquote>
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype.apply=function(){};
/**
 * @private
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype._shouldCatchBoomerang=function(){};
/**
 * @private
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype._isValidInput=function(){};
/**
 * @param {mixed} inCell 
 * @param {mixed} inRowIndex 
 * @private
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype._focusEditor=function(inCell, inRowIndex){};
/**
 * @param {mixed} inMethod 
 * @private
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype._editorDo=function(inMethod){};
/**
 * @private
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype._doCatchBoomerang=function(){};
/**
 * @private
 * @memberOf dojox.grid._EditManager
*/
dojox.grid._EditManager.prototype._boomerangFocus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Singleton plugin manager<br>
 * </blockquote>
 * Plugin manager is responsible for<br>
 * 1. Loading required plugins<br>
 * 2. Handling collaborat	ion and dependencies among plugins<br>
 * <br>
 * Some plugin dependencies:<br>
 * - "columnReordering" attribute won't work when either DnD or Indirect Selections plugin is on.
 * @param {mixed} inGrid 
*/
dojox.grid.enhanced._PluginManager=function(inGrid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for all plugins.<br>
 * </blockquote>
 * Provides common plugin functionality and basic life cycle management.<br>
 * <br>
 * Each concrete plugin must have a name field and is responsible for registering itself to the global plugin registry<br>
 * e.g. for dnd plugin:<br>
 * 		dojox.grid.EnhancedGrid.registerPlugin("dnd" ///plugin name///,<br>
 * 												dojox.grid.enhanced.plugins.DnD ///full class name of a plugin<br>
 * 												{"preInit": false, "dependency": ["nestedSorting"]} ///properties///);<br>
 * <br>
 * [Keywords] of plugin properties(case sensitive)<br>
 * - "preInit": boolean, whether a plugin should be created before EnhancedGrid.postCreate(),<br>
 * false by default(plugins are created after EnhancedGrid.postCreate()).<br>
 * - "dependency": array or string, plugin(s) indicated by "dependency" will be created before the current one.<br>
 * Note: recursive cycle dependencies are not supported e.g. following dependency is invalid:<br>
 * pluginA -&gt; pluginB -&gt; pluginA
 * @param {mixed} inGrid 
 * @param {mixed} option 
 * @example
 * 1. Customize default DnD plugin
 * 	dojo.declare("mygrid.MyDnD", dojox.grid.enhanced.plugins.DnD, {
 * 		name:"dnd" //still reuse the plugin name
 * 		constructor: function(inGrid, option){ ... }
 * 	});
 * 	dojox.grid.EnhancedGrid.registerPlugin("dnd", mygrid.MyDnD);
 * 
 * 2. Add new plugin - PluginA
 * 	dojo.declare("mygrid.PluginA", dojox.grid.enhanced._Plugin, {
 * 		name: "pA",
 * 		constructor: function(inGrid, option){ ... }
 * 	});
 * 	dojox.grid.EnhancedGrid.registerPlugin("pA",mygrid.PluginA);
 * 
 * 3. Use plugins
 * 	dojo.require("mygrid.MyDnD");
 * 	dojo.require("mygrid.PluginA");
*/
dojox.grid.enhanced._Plugin=function(inGrid, option){};
/**
 * @param {mixed} grid 
*/
dojox.grid.enhanced._FocusManager=function(grid){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a friend class of _FocusManager<br>
 * </blockquote>
 * @param {mixed} area 
 * @param {mixed} focusManager 
*/
dojox.grid.enhanced._FocusArea=function(area, focusManager){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwrite some default events of DataGrid<br>
 * </blockquote>
 * Methods are copied or replaced for overwriting, this might be refined once<br>
 * an overall plugin architecture is set up for DataGrid.
 * @param {mixed} inGrid 
*/
dojox.grid.enhanced._Events=function(inGrid){};
/**
 * @param {mixed} grid 
*/
dojox.grid.enhanced.DataSelection=function(grid){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins={};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwrite some default events of DataGrid<br>
 * </blockquote>
 * Methods are copied or replaced for overwriting, this might be refined once<br>
 * an overall plugin architecture is set up for DataGrid.
 * @class
 * @param {mixed} inGrid 
 * @returns {dojox.grid.enhanced._Events} new instance
*/
dojox.grid.enhanced._Events=function(inGrid){};
/**
 * <b>Summary:</b><blockquote>
 *	 New - Event fired when a selected region context menu is accessed via mouse right click.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid and info of selected
 * regions(selection type - row|column, selected index - [...])
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onSelectedRegionContextMenu=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onRowSelectorMouseUp=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onRowSelectorMouseDown=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onRowMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid._Events.onRowContextMenu()<br>
 * </blockquote>
 * @see dojox.grid._Events
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onRowContextMenu=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid._Events.onRowClick()<br>
 * </blockquote>
 * @see dojox.grid._Events
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onRowClick=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onMouseUpRow=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 New - Event fired when mouse is up inside grid.<br>
 * </blockquote>
 * @param {Event} e Decorated event object that contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid._Events.onKeyDown();<br>
 * </blockquote>
 * @see dojox.grid._Events
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onKeyDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 New event<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onHeaderCellMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid._Events.onHeaderCellMouseOut()<br>
 * </blockquote>
 * @see dojox.grid._Events
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onHeaderCellMouseOut=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid._Events.onHeaderCellMouseDown()<br>
 * </blockquote>
 * @see dojox.grid._Events
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onHeaderCellMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid._Events.onHeaderCellClick()<br>
 *	 move focus to header.<br>
 * </blockquote>
 * @see dojox.grid._Events
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onHeaderCellClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 New - Event fired when mouse is up inside content cell.<br>
 * </blockquote>
 * @param {Event} e Decorated event object that contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onCellMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid._Events.onCellMouseDown()<br>
 * </blockquote>
 * @see dojox.grid._Events
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onCellMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid._Events.onCellDblClick()<br>
 * </blockquote>
 * @see dojox.grid._Events
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onCellDblClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid._Events.onCellClick()<br>
 * </blockquote>
 * @see dojox.grid._Events
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.onCellClick=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.domouseup=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.domousedown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Grid key up event handler.<br>
 * </blockquote>
 * @param {Event} e Un-decorated event object
 * @memberOf dojox.grid.enhanced._Events
*/
dojox.grid.enhanced._Events.prototype.dokeyup=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is a friend class of _FocusManager<br>
 * </blockquote>
 * @class
 * @param {mixed} area 
 * @param {mixed} focusManager 
 * @returns {dojox.grid.enhanced._FocusArea} new instance
*/
dojox.grid.enhanced._FocusArea=function(area, focusManager){};
/**
 * @memberOf dojox.grid.enhanced._FocusArea
*/
dojox.grid.enhanced._FocusArea._evtStack=[];
/**
 * @param {mixed} rowStep 
 * @param {mixed} colStep 
 * @param {mixed} evt 
 * @memberOf dojox.grid.enhanced._FocusArea
*/
dojox.grid.enhanced._FocusArea.prototype.move=function(rowStep, colStep, evt){};
/**
 * @param {mixed} evt 
 * @memberOf dojox.grid.enhanced._FocusArea
*/
dojox.grid.enhanced._FocusArea.prototype.keyup=function(evt){};
/**
 * @param {mixed} evt 
 * @memberOf dojox.grid.enhanced._FocusArea
*/
dojox.grid.enhanced._FocusArea.prototype.keydown=function(evt){};
/**
 * @memberOf dojox.grid.enhanced._FocusArea
*/
dojox.grid.enhanced._FocusArea.prototype.headerMouseEventPlanner=function(){};
/**
 * @memberOf dojox.grid.enhanced._FocusArea
*/
dojox.grid.enhanced._FocusArea.prototype.contentMouseEventPlanner=function(){};
/**
 * @param {mixed} evt 
 * @param {mixed} funcName 
 * @private
 * @memberOf dojox.grid.enhanced._FocusArea
*/
dojox.grid.enhanced._FocusArea.prototype._onKeyEvent=function(evt, funcName){};
/**
 * @class
 * @param {mixed} grid 
 * @returns {dojox.grid.enhanced._FocusManager} new instance
*/
dojox.grid.enhanced._FocusManager=function(grid){};
/**
 * @namespace
 * @private
*/
dojox.grid.enhanced._FocusManager._navElems={};
/**
 * @param {mixed} step 
 * @param {mixed} evt 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.tab=function(step, evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten - focuses the given grid cell<br>
 * </blockquote>
 * @param {Object} inCell 
 * @param {Integer} inRowIndex 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.setFocusCell=function(inCell, inRowIndex){};
/**
 * @param {mixed} areaName 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.removeArea=function(areaName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.previousKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Place the area refered by *name* at some logical position relative to an existing area.<br>
 * </blockquote>
 * @param {mixed} name 
 * @param {mixed} pos 
 * @param {mixed} otherAreaName 
 * @example
 * placeArea("myarea","before"|"after",...)
 * placeArea("myarea","below"|"above",...)
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.placeArea=function(name, pos, otherAreaName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.nextKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 *	 Check whether currently navigating among column headers.<br>
 *	 return:<br>
 *	 true - focus is on a certain column header | false otherwise<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.isNavHeader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.initFocusView=function(){};
/**
 * @param {mixed} name 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.ignoreArea=function(name){};
/**
 * @param {mixed} evt 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.headerMouseEvent=function(evt){};
/**
 * @param {mixed} areaName 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.getArea=function(areaName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} evt 
 * @param {mixed} step 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.focusHeader=function(evt, step){};
/**
 * @param {int|string|areaObj} areaId 
 * @param {mixed} evt 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.focusArea=function(areaId, evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.findAndFocusGridCell=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.doLastNodeFocus=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 *	 trap focus only for grid dom node<br>
 *	 do not focus for scrolling if grid is about to blur<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.doFocus=function(e){};
/**
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set current area to the one areaName refers.<br>
 * </blockquote>
 * @param {String} areaName 
 * @param {mixed} toBlurOld 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.currentArea=function(areaName, toBlurOld){};
/**
 * @param {mixed} evt 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.contentMouseEvent=function(evt){};
/**
 * @param {mixed} area 
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype.addArea=function(area){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._stopEvent=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._setActiveColHeader=function(){};
/**
 * @param {mixed} type 
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._onMouseEvent=function(type, evt){};
/**
 * @param {mixed} e 
 * @param {mixed} isBubble 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._onHeaderKeyDown=function(e, isBubble){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._onEditableCellMouseEvent=function(evt){};
/**
 * @param {mixed} e 
 * @param {mixed} isBubble 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._onEditableCellKeyDown=function(e, isBubble){};
/**
 * @param {mixed} e 
 * @param {mixed} isBubble 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._onContentKeyDown=function(e, isBubble){};
/**
 * @param {mixed} rowStep 
 * @param {mixed} colStep 
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._navHeader=function(rowStep, colStep, evt){};
/**
 * @param {mixed} rowStep 
 * @param {mixed} colStep 
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._navContent=function(rowStep, colStep, evt){};
/**
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._initNavigatableElems=function(){};
/**
 * @param {mixed} evt 
 * @param {mixed} step 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._focusEditableCell=function(evt, step){};
/**
 * @param {mixed} evt 
 * @param {mixed} step 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._focusContent=function(evt, step){};
/**
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._doBlur=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._delayedHeaderFocus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._delayedCellFocus=function(){};
/**
 * @param {mixed} oldBindNode 
 * @param {mixed} newBindNode 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._changeMenuBindNode=function(oldBindNode, newBindNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} evt 
 * @param {mixed} step 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._blurHeader=function(evt, step){};
/**
 * @param {mixed} evt 
 * @param {mixed} step 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._blurEditableCell=function(evt, step){};
/**
 * @param {mixed} evt 
 * @param {mixed} step 
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._blurContent=function(evt, step){};
/**
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._bindAreaEvents=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced._FocusManager
*/
dojox.grid.enhanced._FocusManager.prototype._applyEditableCell=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced._FocusManager.grid={};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for all plugins.<br>
 * </blockquote>
 * Provides common plugin functionality and basic life cycle management.<br>
 * <br>
 * Each concrete plugin must have a name field and is responsible for registering itself to the global plugin registry<br>
 * e.g. for dnd plugin:<br>
 * 		dojox.grid.EnhancedGrid.registerPlugin("dnd" ///plugin name///,<br>
 * 												dojox.grid.enhanced.plugins.DnD ///full class name of a plugin<br>
 * 												{"preInit": false, "dependency": ["nestedSorting"]} ///properties///);<br>
 * <br>
 * [Keywords] of plugin properties(case sensitive)<br>
 * - "preInit": boolean, whether a plugin should be created before EnhancedGrid.postCreate(),<br>
 * false by default(plugins are created after EnhancedGrid.postCreate()).<br>
 * - "dependency": array or string, plugin(s) indicated by "dependency" will be created before the current one.<br>
 * Note: recursive cycle dependencies are not supported e.g. following dependency is invalid:<br>
 * pluginA -&gt; pluginB -&gt; pluginA
 * @class
 * @param {mixed} inGrid 
 * @param {mixed} option 
 * @returns {dojox.grid.enhanced._Plugin} new instance
 * @example
 * 1. Customize default DnD plugin
 * 	dojo.declare("mygrid.MyDnD", dojox.grid.enhanced.plugins.DnD, {
 * 		name:"dnd" //still reuse the plugin name
 * 		constructor: function(inGrid, option){ ... }
 * 	});
 * 	dojox.grid.EnhancedGrid.registerPlugin("dnd", mygrid.MyDnD);
 * 
 * 2. Add new plugin - PluginA
 * 	dojo.declare("mygrid.PluginA", dojox.grid.enhanced._Plugin, {
 * 		name: "pA",
 * 		constructor: function(inGrid, option){ ... }
 * 	});
 * 	dojox.grid.EnhancedGrid.registerPlugin("pA",mygrid.PluginA);
 * 
 * 3. Use plugins
 * 	dojo.require("mygrid.MyDnD");
 * 	dojo.require("mygrid.PluginA");
*/
dojox.grid.enhanced._Plugin=function(inGrid, option){};
/**
 * <b>Summary:</b><blockquote>
 *	 Un-subscribes handle and removes it from subscriptions list.<br>
 * </blockquote>
 * @param {mixed} handle 
 * @memberOf dojox.grid.enhanced._Plugin
*/
dojox.grid.enhanced._Plugin.prototype.unsubscribe=function(handle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subscribes to the specified topic and calls the specified method<br>
 *	 of this object.<br>
 * </blockquote>
 * @param {mixed} topic 
 * @param {mixed} method 
 * @example
 * 	var plugin = new dojox.grid.enhanced._Plugin(grid,"myPlugin",{...});
 * 	// when /my/topic is published, call the subscriber in the scope of plugin
 * 	// with passed parameter - "v"
 * 	plugin.subscribe("/my/topic", function(v){
 * 		console.debug(this.xxx(v));//"this" - plugin scope
 * 	});
 * @memberOf dojox.grid.enhanced._Plugin
*/
dojox.grid.enhanced._Plugin.prototype.subscribe=function(topic, method){};
/**
 * @memberOf dojox.grid.enhanced._Plugin
*/
dojox.grid.enhanced._Plugin.prototype.onStartUp=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when store is changed.<br>
 * </blockquote>
 * @param {mixed} store 
 * @memberOf dojox.grid.enhanced._Plugin
*/
dojox.grid.enhanced._Plugin.prototype.onSetStore=function(store){};
/**
 * @memberOf dojox.grid.enhanced._Plugin
*/
dojox.grid.enhanced._Plugin.prototype.onPreInit=function(){};
/**
 * @memberOf dojox.grid.enhanced._Plugin
*/
dojox.grid.enhanced._Plugin.prototype.onPostInit=function(){};
/**
 * @memberOf dojox.grid.enhanced._Plugin
*/
dojox.grid.enhanced._Plugin.prototype.init=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnects handle and removes it from connection list.<br>
 * </blockquote>
 * @param {mixed} handle 
 * @memberOf dojox.grid.enhanced._Plugin
*/
dojox.grid.enhanced._Plugin.prototype.disconnect=function(handle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy all resources.<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced._Plugin
*/
dojox.grid.enhanced._Plugin.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connects specified obj/event to specified method of this object.<br>
 * </blockquote>
 * @param {mixed} obj 
 * @param {mixed} event 
 * @param {mixed} method 
 * @example
 * 	var plugin = new dojox.grid.enhanced._Plugin(grid,"myPlugin",{...});
 * 	// when foo.bar() is called, call the listener in the scope of plugin
 * 	plugin.connect(foo, "bar", function(){
 * 		console.debug(this.xxx());//"this" - plugin scope
 * 	});
 * @memberOf dojox.grid.enhanced._Plugin
*/
dojox.grid.enhanced._Plugin.prototype.connect=function(obj, event, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Singleton plugin manager<br>
 * </blockquote>
 * Plugin manager is responsible for<br>
 * 1. Loading required plugins<br>
 * 2. Handling collaborat	ion and dependencies among plugins<br>
 * <br>
 * Some plugin dependencies:<br>
 * - "columnReordering" attribute won't work when either DnD or Indirect Selections plugin is on.
 * @class
 * @param {mixed} inGrid 
 * @returns {dojox.grid.enhanced._PluginManager} new instance
*/
dojox.grid.enhanced._PluginManager=function(inGrid){};
/**
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager._plugins=[];
/**
 * @namespace
 * @private
*/
dojox.grid.enhanced._PluginManager._options={};
/**
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load appropriate plugins before DataGrid.postCreate().<br>
 *	 See EnhancedGrid.postCreate()<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype.preInit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load plugins after DataGrid.postCreate() - the default phase when plugins are created<br>
 *	 See EnhancedGrid.postCreate()<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype.postInit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if plugin(&amp;quot;name&amp;quot;) existed<br>
 * </blockquote>
 * @param {String} name Plugin name
 * return: Boolean<br>
 * True - existed | False - not existed
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype.pluginExisted=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load required plugin(&amp;quot;name&amp;quot;)<br>
 * </blockquote>
 * @param {String} name Plugin name
 * return: Object<br>
 * The newly loaded plugin
 * @returns {return if no plugin option|return if plugin("name") already existed} -
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype.loadPlugin=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 See if target cell(column) is fixed or not.<br>
 * </blockquote>
 * @param {Object} cell Target cell(column)
 * return: Boolean<br>
 * True - fixed| False - not fixed
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype.isFixedCell=function(cell){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load target plugin which must be already required (require(..))<br>
 * </blockquote>
 * @param {class} clazz | String
 * Plugin class
 * @returns {return if it's already a clazz} -
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype.getPluginClazz=function(clazz){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get plugin(&amp;quot;name&amp;quot;)<br>
 * </blockquote>
 * @param {String} name Plugin name
 * return: Object<br>
 * Plugin instance
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype.getPlugin=function(name){};
/**
 * @param {mixed} func 
 * @param {mixed} args 
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype.forEach=function(func, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy all resources<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parse plugins properties<br>
 * </blockquote>
 * @param {Object} plugins Plugin properties defined by user
 * @private
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype._parseProps=function(plugins){};
/**
 * <b>Summary:</b><blockquote>
 *	 Normalize plugin properties especially the dependency chain<br>
 * </blockquote>
 * @param {String} p Plugin name
 * @param {Object} plugins Plugin properties set by user
 * @param {Object} registry The global plugin registry
 * @param {Object} loading Map for checking process state
 * @private
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype._normalize=function(p, plugins, registry, loading){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwrite several default behavior for each views(including _RowSelector view)<br>
 * </blockquote>
 * @param {mixed} view 
 * @private
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype._initView=function(view){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find appropriate plugins and load them<br>
 * </blockquote>
 * @param {Boolean} pre True - preInit | False - postInit(by default)
 * @private
 * @memberOf dojox.grid.enhanced._PluginManager
*/
dojox.grid.enhanced._PluginManager.prototype._init=function(pre){};
/**
 * @namespace
*/
dojox.grid.enhanced._PluginManager.grid={};
/**
 * @namespace
*/
dojox.grid.enhanced._PluginManager.grid.edit={};
/**
 * @param {mixed} inRow 
 * @memberOf dojox.grid.enhanced._PluginManager.grid.edit
*/
dojox.grid.enhanced._PluginManager.grid.edit.prototype.styleRow=function(inRow){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class of store layers, provides basic utilities and some interfaces.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins._StoreLayer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all server side store layers.<br>
 * </blockquote>
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins._ServerSideLayer=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Preserve selections across various user actions.<br>
 * </blockquote>
 * Extends dojox.grid._SelectionPreserver adding a bit more support to make selection persistence working well<br>
 * with various EnhancedGrid features, e.g. filtering, nested sorting, pagination, select all etc.<br>
 * <br>
 * Precondition - Identifier(id) is required for store, as id is used for differentiating row items.<br>
 * Known issue - The preserved selections might be inaccurate if some unloaded rows are previously selected by range(e.g.SHIFT + click)
 * @param {mixed} selection 
 * @example
 * 	//To turn on this - set 'keepSelection' attribute to true
 * 	&lt;div dojoType="dojox.grid.EnhancedGrid" keepSelection = true .../&gt;
*/
dojox.grid.enhanced.plugins._SelectionPreserver=function(selection){};
/**
 * @param {mixed} grid 
*/
dojox.grid.enhanced.plugins._RowMapLayer=function(grid){};
/**
 * @param {mixed} params 
*/
dojox.grid.enhanced.plugins._Paginator=function(params){};
/**
 * @param {mixed} plugin 
*/
dojox.grid.enhanced.plugins._ForcedPageStoreLayer=function(plugin){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides standard extended selection for grid.<br>
 *	 Supports mouse/keyboard selection, multi-selection, and de-selection.<br>
 *	 Acceptable plugin parameters:<br>
 *	 The whole plugin parameter object is a config object passed to the setupConfig function.<br>
 *	 <br>
 *	 Acceptable cell parameters defined in layout:<br>
 *	 1. notselectable: boolean<br>
 *	 Whether this column is (and all the cells in it are) selectable.<br>
 * </blockquote>
 * @param {mixed} grid 
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.Selector=function(grid, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Search the grid using wildcard string or Regular Expression.<br>
 * </blockquote>
 * @param {mixed} grid 
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.Search=function(grid, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides a set of method to re-arrange the structure of grid.<br>
 * </blockquote>
 * @param {mixed} grid 
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.Rearrange=function(grid, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provide printGrid function to the grid.<br>
 * </blockquote>
 * @param {mixed} grid 
 * @example
 * 	dojo.require("dojox.grid.enhanced.plugins.Printer");
 * 	dijit.byId("grid1").printGrid("my grid",					//A title for the grid,optional
 * 								["cssfile1.css","cssfile2.css"],//An array of css files to decorate the printed gird,optional
 * 								{table:"border='border'"}		//tagName:"attrbuteList" pairs, optional,
 * 																//control the html tags in the generated html
 * 	);
*/
dojox.grid.enhanced.plugins.Printer=function(grid){};
/**
 * <b>Summary:</b><blockquote>
 *	 The typical pagination way to deal with huge dataset<br>
 *	 an alternative for the default virtual scrolling manner.<br>
 * </blockquote>
 * boolean<br>
 * Whether the description information will be displayed, true by default.<br>
*/
dojox.grid.enhanced.plugins.Pagination=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides nested sorting feature<br>
 * </blockquote>
 * A flexible way to control multiple column sorting, including<br>
 * 1. Set default sorting order<br>
 * 2. Disable sorting for certain columns<br>
 * 3. Set sorting order dynamically with JS API
 * @example
 * 	&lt;script type="text/javascript"&gt;
 * 		var grid = new dojox.grid.EnhancedGrid({plugins : {nestedSorting: true}},
 * 				   sortFields: [{attribute: 'col4', descending: false},...],//set default sorting order
 * 				   canSort: function(index, field){ return true},//disable sorting for a column
 * 				   ... }, dojo.byId('gridDiv'));
 * 		grid.startup();
 * 		//set new sorting order
 * 		grid.setSortIndex([{attribute: 'col3', descending: true},...])
 * 	&lt;/script&gt;
*/
dojox.grid.enhanced.plugins.NestedSorting=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides context menu support, including header menu, row menu, cell menu and selected region menu<br>
 * </blockquote>
 * @example
 * &lt;div dojoType="dojox.grid.EnhancedGrid"
 * plugins="{menus:{headerMenu:"headerMenuId", rowMenu:"rowMenuId", cellMenu:"cellMenuId",
 * selectedRegionMenu:"selectedRegionMenuId"}}" ...&gt;
 * &lt;/div&gt;
*/
dojox.grid.enhanced.plugins.Menu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A handy way for adding check boxe/radio button for rows, and selecting rows by swiping(or keyboard)<br>
 * </blockquote>
 * For better rendering performance, div(images) are used to simulate radio button|check boxes
 * @example
 * &lt;div dojoType="dojox.grid.EnhancedGrid" plugins="{indirectSelection: true}" ...&gt;&lt;/div&gt;
 * or &lt;div dojoType="dojox.grid.EnhancedGrid" plugins="{indirectSelection: {name: 'xxx', width:'30px', styles:'text-align: center;'}}" ...&gt;&lt;/div&gt;
*/
dojox.grid.enhanced.plugins.IndirectSelection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A special source that can accept grid contents.<br>
 *	 Only for non-grid widgets or domNodes.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.GridSource=function(){};
/**
 * @param {mixed} node 
 * @param {mixed} param 
*/
dojox.grid.enhanced.plugins.GridDnDSource=function(node, param){};
/**
 * @param {mixed} dndPlugin 
*/
dojox.grid.enhanced.plugins.GridDnDElement=function(dndPlugin){};
/**
*/
dojox.grid.enhanced.plugins.GridDnDAvatar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provide filter functionality for grid.<br>
 *	 <br>
 *	 Acceptable plugin parameters:<br>
 *	 1. itemsName: string<br>
 *	 the name shown on the filter bar.<br>
 *	 2. statusTipTimeout: number<br>
 *	 when does the status tip show.<br>
 *	 3. ruleCount: number<br>
 *	 default to 3, should not change to more. The Claro theme limits it.<br>
 *	 4. disabledConditions: object<br>
 *	 If you don't need all of the conditions provided for a data type,<br>
 *	 you can explicitly declare them here:<br>
 *	 e.g.: disabledConditions: {string: [&amp;quot;contains&amp;quot;, &amp;quot;is&amp;quot;], number: [&amp;quot;equalto&amp;quot;], ...}<br>
 *	 5. isServerSide: boolean<br>
 *	 Whether to use server side filtering. Default to false.<br>
 *	 6. isStateful: boolean<br>
 *	 If isServerSide is true, set the server side filter to be stateful or not. default to false.<br>
 *	 7. url: string<br>
 *	 If using stateful, this is the url to send commands. default to store.url.<br>
 *	 8. ruleCountToConfirmClearFilter: Integer | null |Infinity<br>
 *	 If the filter rule count is larger than or equal to this value, then a confirm dialog will show when clearing filter.<br>
 *	 If set to less than 1 or null, then always show the confirm dialog.<br>
 *	 If set to Infinity, then never show the confirm dialog.<br>
 *	 Default value is 2.<br>
 *	 <br>
 *	 Acceptable cell parameters defined in layout:<br>
 *	 1. filterable: boolean<br>
 *	 The column is not filterable only when this is set to false explicitly.<br>
 *	 2. datatype: string<br>
 *	 The data type of this column. Can be &amp;quot;string&amp;quot;, &amp;quot;number&amp;quot;, &amp;quot;date&amp;quot;, &amp;quot;time&amp;quot;, &amp;quot;boolean&amp;quot;.<br>
 *	 Default to &amp;quot;string&amp;quot;.<br>
 *	 3. autoComplete: boolean<br>
 *	 If need auto-complete in the ComboBox for String type, set this to true.<br>
 *	 4. dataTypeArgs: object<br>
 *	 Some arguments helping convert store data to something the filter UI understands.<br>
 *	 Different data type arguments can be provided to different data types.<br>
 *	 For date/time, this is a dojo.date.locale.__FormatOptions, so the DataTimeBox can understand the store data.<br>
 *	 For boolean, this object contains:<br>
 *	 trueLabel: string<br>
 *	 A label to display in the filter definition dialog for true value. Default to &amp;quot;True&amp;quot;.<br>
 *	 falseLable: string<br>
 *	 A label to display in the filter definition dialog for false value. Default to &amp;quot;False&amp;quot;.<br>
 *	 5. disabledConditions: object<br>
 *	 If you don't need all of the conditions provided by the filter UI on this column, you can explicitly say it out here.<br>
 *	 e.g.: disabledConditions: [&amp;quot;contains&amp;quot;, &amp;quot;is&amp;quot;]<br>
 *	 This will disable the &amp;quot;contains&amp;quot; condition for this column, if this column is of string type.<br>
 *	 For full set of conditions, please refer to dojox.grid.enhanced.plugins.filter.FilterDefDialog._setupData.<br>
 * </blockquote>
 * @param {mixed} grid 
 * @param {mixed} args 
 * @example
 * 	&lt;div dojoType="dojox.grid.EnhancedGrid" plugins="{GridFilter: true}" ...&gt;&lt;/div&gt;
 * 	or provide some parameters:
 * 	&lt;div dojoType="dojox.grid.EnhancedGrid" plugins="{GridFilter: {itemsName: 'songs'}}" ...&gt;&lt;/div&gt;
 * 	Customize columns for filter:
 * 	var layout = [
 * 		...
 * 		//define a column to be un-filterable in layout/structure
 * 		{field: "Genre", filterable: false, ...}
 * 		//define a column of type string and supports autoComplete when you type in filter conditions.
 * 		{field: "Writer", datatype: "string", autoCommplete: true, ...}
 * 		//define a column of type date and the data in store has format: "yyyy/M/d"
 * 		{field: "Publish Date", datatype: "date", dataTypeArgs: {datePattern: "yyyy/M/d"}, ...}
 * 		//disable some conditions for a column
 * 		{field: "Track", disabledConditions: ["equalto","notequalto"], ...}
 * 		...
 * 	];
*/
dojox.grid.enhanced.plugins.Filter=function(grid, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provide functions to export the grid data into a given format.<br>
 *	 <br>
 *	 Acceptable plugin parameters:<br>
 *	 1. exportFormatter: function(data, cell, rowIndex, item)<br>
 *	 Provide a way to customize how data should look in exported string.<br>
 *	 Note that usually the formatter of grid cell should not be used here (it can return HTML or even widget).<br>
 * </blockquote>
 * @param {EnhancedGrid} grid The grid to plug in to.
 * @param {mixed} args 
 * @example
 * 	function onExported(exported_text){
 * 		//custom code here...
 * 	}
 * 	dijit.byId("my_grid_id").exportTo("csv",	//registered export format, mandatory
 * 		{										//the whole object is optional.
 * 			fetchArgs: {start:0,count:1000},	//keywordArgs for fetch, optional
 * 			writerArgs: {separator:';'},		//export writer specific arguments, optional
 * 		},
 * 		function(str){
 * 			//call back function, mandatory
 * 	});
 * 	var result = dijit.byId("my_grid_id").exportSelectedTo("table",	 //registered export format, mandatory
 * 														{separator:'|'} //export writer specific arguments, optional
 * 	);
*/
dojox.grid.enhanced.plugins.Exporter=function(grid, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provide drag and drop for grid columns/rows/cells within grid and out of grid.<br>
 *	 The store of grid must implement dojo.data.api.Write.<br>
 *	 DnD selected columns:<br>
 *	 Support moving within grid, moving/copying out of grid to a non-grid DnD target.<br>
 *	 DnD selected rows:<br>
 *	 Support moving within grid, moving/copying out of grid to any DnD target.<br>
 *	 DnD selected cells (in rectangle shape only):<br>
 *	 Support moving/copying within grid, moving/copying out of grid to any DnD target.<br>
 * </blockquote>
 * @param {mixed} grid 
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.DnD=function(grid, args){};
/**
*/
dojox.grid.enhanced.plugins.Dialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a way to persist some grid features in cookie.<br>
 *	 Default persistable features are:<br>
 *	 column width:	&amp;quot;columnWidth&amp;quot; (handler name)<br>
 *	 column order:	&amp;quot;columnOrder&amp;quot;<br>
 *	 sorting order:	&amp;quot;sortOrder&amp;quot;<br>
 *	 <br>
 *	 Grid users can define new persistable features<br>
 *	 by calling the following before grid is initialized (that is, during &amp;quot;preInit&amp;quot;);<br>
 *	 	grid.addCookieHandler({<br>
 *	 		name: &amp;quot;a name for the new persistable feature&amp;quot;,<br>
 *	 		onLoad: function(savedObject, grid){<br>
 *	 			//load the cookie.<br>
 *	 		},<br>
 *	 		onSave: function(grid){<br>
 *	 			//save the cookie.<br>
 *	 		}<br>
 *	 	});<br>
 * </blockquote>
 * @param {mixed} grid 
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.Cookie=function(grid, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides functions to merge(un-merge) adjacent cells within one row.<br>
 *	 Acceptable plugin paramters:<br>
 *	 1. mergedCells: Array<br>
 *	 An array of objects with structure:<br>
 *	 {<br>
 *	 row: function(Integer)|Integer<br>
 *	 If it's a function, it's a predicate to decide which rows are to be merged.<br>
 *	 It takes an integer (the row index), and should return true or false;<br>
 *	 start: Integer<br>
 *	 The column index of the left most cell that shall be merged.<br>
 *	 end: Integer<br>
 *	 The column index of the right most cell that shall be merged.<br>
 *	 major: Integer<br>
 *	 The column index of the cell whose content should be used as the content of the merged cell.<br>
 *	 It must be larger than or equal to the startColumnIndex, and less than or equal to the endColumnIndex.<br>
 *	 If it is omitted, the content of the leading edge (left-most for ltr, right most for rtl) cell will be used.<br>
 *	 }<br>
 * </blockquote>
 * @param {mixed} grid 
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.CellMerge=function(grid, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides horizontal and vertical auto-scroll for grid.<br>
 * </blockquote>
 * @param {mixed} grid 
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.AutoScroll=function(grid, args){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.exporter={};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides horizontal and vertical auto-scroll for grid.<br>
 * </blockquote>
 * @class
 * @param {mixed} grid 
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.AutoScroll} new instance
*/
dojox.grid.enhanced.plugins.AutoScroll=function(grid, args){};
/**
 * @param {mixed} isForward 
 * @param {mixed} view 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.AutoScroll
*/
dojox.grid.enhanced.plugins.AutoScroll.prototype._scrollColumn=function(isForward, view){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.AutoScroll
*/
dojox.grid.enhanced.plugins.AutoScroll.prototype._mixinGrid=function(){};
/**
 * @param {mixed} toStop 
 * @param {mixed} isVertical 
 * @param {mixed} isForward 
 * @param {mixed} view 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.AutoScroll
*/
dojox.grid.enhanced.plugins.AutoScroll.prototype._manageAutoScroll=function(toStop, isVertical, isForward, view){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.AutoScroll
*/
dojox.grid.enhanced.plugins.AutoScroll.prototype._initEvents=function(){};
/**
 * @param {mixed} eventName 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.AutoScroll
*/
dojox.grid.enhanced.plugins.AutoScroll.prototype._fireEvent=function(eventName, args){};
/**
 * @param {mixed} isVertical 
 * @param {mixed} isForward 
 * @param {mixed} view 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.AutoScroll
*/
dojox.grid.enhanced.plugins.AutoScroll.prototype._autoScroll=function(isVertical, isForward, view){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.AutoScroll.grid={};
/**
 * @memberOf dojox.grid.enhanced.plugins.AutoScroll.grid
*/
dojox.grid.enhanced.plugins.AutoScroll.grid.prototype.onStartAutoScroll=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.AutoScroll.grid
*/
dojox.grid.enhanced.plugins.AutoScroll.grid.prototype.onEndAutoScroll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides functions to merge(un-merge) adjacent cells within one row.<br>
 *	 Acceptable plugin paramters:<br>
 *	 1. mergedCells: Array<br>
 *	 An array of objects with structure:<br>
 *	 {<br>
 *	 row: function(Integer)|Integer<br>
 *	 If it's a function, it's a predicate to decide which rows are to be merged.<br>
 *	 It takes an integer (the row index), and should return true or false;<br>
 *	 start: Integer<br>
 *	 The column index of the left most cell that shall be merged.<br>
 *	 end: Integer<br>
 *	 The column index of the right most cell that shall be merged.<br>
 *	 major: Integer<br>
 *	 The column index of the cell whose content should be used as the content of the merged cell.<br>
 *	 It must be larger than or equal to the startColumnIndex, and less than or equal to the endColumnIndex.<br>
 *	 If it is omitted, the content of the leading edge (left-most for ltr, right most for rtl) cell will be used.<br>
 *	 }<br>
 * </blockquote>
 * @class
 * @param {mixed} grid 
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.CellMerge} new instance
*/
dojox.grid.enhanced.plugins.CellMerge=function(grid, args){};
/**
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge._records=[];
/**
 * <b>Summary:</b><blockquote>
 *	 Unmerge the cells that are merged by the *mergeHandler*, which represents a call to the function mergeCells.<br>
 * </blockquote>
 * @param {object} mergeHandler A handler for the merged cells created by a call of function mergeCells.
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype.unmergeCells=function(mergeHandler){};
/**
 * <b>Summary:</b><blockquote>
 *	 Merge cells from *startColumnIndex* to *endColumnIndex* at rows that make *rowTester* return true,<br>
 *	 using the content of the cell at *majorColumnIndex*<br>
 * </blockquote>
 * @param {function(Integer)|Integer} rowTester If it's a function, it's a predicate to decide which rows are to be merged.
 * It takes an integer (the row index), and should return true or false;
 * @param {Integer} startColumnIndex The column index of the left most cell that shall be merged.
 * @param {Integer} endColumnIndex The column index of the right most cell that shall be merged.
 * @param {Integer} [majorColumnIndex] The column index of the cell whose content should be used as the content of the merged cell.
 * It must be larger than or equal to the startColumnIndex, and less than or equal to the endColumnIndex.<br>
 * If it is omitted, the content of the leading edge (left-most for ltr, right most for rtl) cell will be used.<br>
 * return: Object | null<br>
 * A handler for the merged cells created by a call of this function.<br>
 * This handler can be used later to unmerge cells using the function unmergeCells<br>
 * If the merge is not valid, returns null;
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype.mergeCells=function(rowTester, startColumnIndex, endColumnIndex, majorColumnIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the records of currently merged cells at the given row.<br>
 * </blockquote>
 * @param {mixed} rowIndex 
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype.getMergedCellsByRow=function(rowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get all records of currently merged cells.<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype.getMergedCells=function(){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype._updateRows=function(item){};
/**
 * @param {mixed} config 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype._setupConfig=function(config){};
/**
 * @param {mixed} viewIdx 
 * @param {mixed} rowIndex 
 * @param {mixed} subrows 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype._onAfterRow=function(viewIdx, rowIndex, subrows){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype._mixinGrid=function(){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype._isValid=function(item){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype._initEvents=function(){};
/**
 * @param {mixed} colIndex 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype._getWidth=function(colIndex){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.CellMerge
*/
dojox.grid.enhanced.plugins.CellMerge.prototype._createRecord=function(item){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.CellMerge.grid={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.CellMerge.grid.layout={};
/**
 * <b>Summary:</b><blockquote>
 *	 This plugin provides a way to persist some grid features in cookie.<br>
 *	 Default persistable features are:<br>
 *	 column width:	&amp;quot;columnWidth&amp;quot; (handler name)<br>
 *	 column order:	&amp;quot;columnOrder&amp;quot;<br>
 *	 sorting order:	&amp;quot;sortOrder&amp;quot;<br>
 *	 <br>
 *	 Grid users can define new persistable features<br>
 *	 by calling the following before grid is initialized (that is, during &amp;quot;preInit&amp;quot;);<br>
 *	 	grid.addCookieHandler({<br>
 *	 		name: &amp;quot;a name for the new persistable feature&amp;quot;,<br>
 *	 		onLoad: function(savedObject, grid){<br>
 *	 			//load the cookie.<br>
 *	 		},<br>
 *	 		onSave: function(grid){<br>
 *	 			//save the cookie.<br>
 *	 		}<br>
 *	 	});<br>
 * </blockquote>
 * @class
 * @param {mixed} grid 
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.Cookie} new instance
*/
dojox.grid.enhanced.plugins.Cookie=function(grid, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A setter to enable|disable cookie support for a particular Grid feature.<br>
 * </blockquote>
 * @param {String} [cookieName] Name of a cookie handler if provided, otherwise for all cookies.
 * @param {Boolean} enabled 
 * @memberOf dojox.grid.enhanced.plugins.Cookie
*/
dojox.grid.enhanced.plugins.Cookie.prototype.setCookieEnabled=function(cookieName, enabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove cookie for this grid.<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.Cookie
*/
dojox.grid.enhanced.plugins.Cookie.prototype.removeCookie=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Cookie
*/
dojox.grid.enhanced.plugins.Cookie.prototype.onPreInit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A getter to check cookie support of a particular Grid feature.<br>
 * </blockquote>
 * @param {String} [cookieName] Name of a cookie handler if provided, otherwise for all cookies.
 * @memberOf dojox.grid.enhanced.plugins.Cookie
*/
dojox.grid.enhanced.plugins.Cookie.prototype.getCookieEnabled=function(cookieName){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Cookie
*/
dojox.grid.enhanced.plugins.Cookie.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If a grid plugin wants cookie service, call this.<br>
 *	 This must be called during preInit.<br>
 * </blockquote>
 * @param {Object} args An object with the following structure:
 * 	{<br>
 * 		name: &quot;some-string&quot;,<br>
 * 		onLoad: /// void /// function(/// object ///partOfCookie, /// EDG ///grid){...},<br>
 * 		onSave: /// object /// function(/// EDG ///grid){...}<br>
 * 	}
 * @memberOf dojox.grid.enhanced.plugins.Cookie
*/
dojox.grid.enhanced.plugins.Cookie.prototype.addCookieHandler=function(args){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Cookie
*/
dojox.grid.enhanced.plugins.Cookie.prototype._saveCookie=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Cookie
*/
dojox.grid.enhanced.plugins.Cookie.prototype._mixinGrid=function(){};
/**
 * @class
 * @returns {dojox.grid.enhanced.plugins.Dialog} new instance
*/
dojox.grid.enhanced.plugins.Dialog=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Dialog
*/
dojox.grid.enhanced.plugins.Dialog.prototype._position=function(){};
/**
 * @class
 * @param {mixed} dndPlugin 
 * @returns {dojox.grid.enhanced.plugins.GridDnDElement} new instance
*/
dojox.grid.enhanced.plugins.GridDnDElement=function(dndPlugin){};
/**
 * @param {mixed} nodeId 
 * @memberOf dojox.grid.enhanced.plugins.GridDnDElement
*/
dojox.grid.enhanced.plugins.GridDnDElement.prototype.getItem=function(nodeId){};
/**
 * @memberOf dojox.grid.enhanced.plugins.GridDnDElement
*/
dojox.grid.enhanced.plugins.GridDnDElement.prototype.getDnDNodes=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.GridDnDElement
*/
dojox.grid.enhanced.plugins.GridDnDElement.prototype.destroyDnDNodes=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.GridDnDElement
*/
dojox.grid.enhanced.plugins.GridDnDElement.prototype.destroy=function(){};
/**
 * @param {mixed} dndRegion 
 * @memberOf dojox.grid.enhanced.plugins.GridDnDElement
*/
dojox.grid.enhanced.plugins.GridDnDElement.prototype.createDnDNodes=function(dndRegion){};
/**
 * @class
 * @param {mixed} node 
 * @param {mixed} param 
 * @returns {dojox.grid.enhanced.plugins.GridDnDSource} new instance
*/
dojox.grid.enhanced.plugins.GridDnDSource=function(node, param){};
/**
 * @memberOf dojox.grid.enhanced.plugins.GridDnDSource
*/
dojox.grid.enhanced.plugins.GridDnDSource.prototype.onDraggingOver=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.GridDnDSource
*/
dojox.grid.enhanced.plugins.GridDnDSource.prototype.onDraggingOut=function(){};
/**
 * @param {mixed} source 
 * @param {mixed} nodes 
 * @param {mixed} copy 
 * @param {mixed} target 
 * @memberOf dojox.grid.enhanced.plugins.GridDnDSource
*/
dojox.grid.enhanced.plugins.GridDnDSource.prototype.onDndDrop=function(source, nodes, copy, target){};
/**
 * @param {mixed} nodeId 
 * @memberOf dojox.grid.enhanced.plugins.GridDnDSource
*/
dojox.grid.enhanced.plugins.GridDnDSource.prototype.getItem=function(nodeId){};
/**
 * @memberOf dojox.grid.enhanced.plugins.GridDnDSource
*/
dojox.grid.enhanced.plugins.GridDnDSource.prototype.destroy=function(){};
/**
 * @param {mixed} source 
 * @param {mixed} nodes 
 * @memberOf dojox.grid.enhanced.plugins.GridDnDSource
*/
dojox.grid.enhanced.plugins.GridDnDSource.prototype.checkAcceptance=function(source, nodes){};
/**
 * @class
 * @returns {dojox.grid.enhanced.plugins.GridDnDAvatar} new instance
*/
dojox.grid.enhanced.plugins.GridDnDAvatar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 constructor function;<br>
 *	 it is separate so it can be (dynamically) overwritten in case of need<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.GridDnDAvatar
*/
dojox.grid.enhanced.plugins.GridDnDAvatar.prototype.construct=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.GridDnDAvatar
*/
dojox.grid.enhanced.plugins.GridDnDAvatar.prototype._getItemCount=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.GridDnDAvatar
*/
dojox.grid.enhanced.plugins.GridDnDAvatar.prototype._getGridDnDIconClass=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 generates a proper text to reflect copying or moving of items<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins.GridDnDAvatar
*/
dojox.grid.enhanced.plugins.GridDnDAvatar.prototype._generateText=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provide drag and drop for grid columns/rows/cells within grid and out of grid.<br>
 *	 The store of grid must implement dojo.data.api.Write.<br>
 *	 DnD selected columns:<br>
 *	 Support moving within grid, moving/copying out of grid to a non-grid DnD target.<br>
 *	 DnD selected rows:<br>
 *	 Support moving within grid, moving/copying out of grid to any DnD target.<br>
 *	 DnD selected cells (in rectangle shape only):<br>
 *	 Support moving/copying within grid, moving/copying out of grid to any DnD target.<br>
 * </blockquote>
 * @class
 * @param {mixed} grid 
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.DnD} new instance
*/
dojox.grid.enhanced.plugins.DnD=function(grid, args){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.DnD.selector={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.DnD.grid={};
/**
 * @namespace
 * @private
*/
dojox.grid.enhanced.plugins.DnD._dndRegion={};
/**
 * @namespace
 * @private
*/
dojox.grid.enhanced.plugins.DnD._config={};
/**
 * <b>Summary:</b><blockquote>
 *	 Configure which DnD functionalities are needed.<br>
 *	 Combination of any item from type set (&amp;quot;row&amp;quot;, &amp;quot;col&amp;quot;, &amp;quot;cell&amp;quot;)<br>
 *	 and any item from mode set(&amp;quot;within&amp;quot;, &amp;quot;in&amp;quot;, &amp;quot;out&amp;quot;) is configurable.<br>
 *	 <br>
 *	 &amp;quot;row&amp;quot;, &amp;quot;col&amp;quot;, &amp;quot;cell&amp;quot; are straitforward, while the other 3 are explained below:<br>
 *	 &amp;quot;within&amp;quot;: DnD within grid, that is, column/row reordering and cell moving/copying.<br>
 *	 &amp;quot;in&amp;quot;: Whether allowed to accept rows/cells (currently not support columns) from another grid.<br>
 *	 &amp;quot;out&amp;quot;: Whether allowed to drag out of grid, to another grid or even to any other DnD target.<br>
 *	 <br>
 *	 If not provided in the config, will use the default.<br>
 *	 When declared together, Mode set has higher priority than type set.<br>
 * </blockquote>
 * @param {Object} config DnD configuration object.
 * See the examples below.
 * @example
 * The following code disables row DnD within grid,
 * but still can drag rows out of grid or drag rows from other gird.
 * 	setUpConfig({
 * 		"row": {
 * 			"within": false
 * 		}
 * 	});
 * 
 * The opposite way is also okay:
 * 	setUpConfig({
 * 		"within": {
 * 			"row": false
 * 		}
 * 	});
 * 
 * And if you'd like to disable/enable a whole set, here's a shortcut:
 * 	setUpConfig({
 * 		"cell", true,
 * 		"out": false
 * 	});
 * 
 * Because mode has higher priority than type, the following will disable row dnd within grid:
 * 	setUpConfig({
 * 		"within", {
 * 			"row": false;
 * 		},
 * 		"row", {
 * 			"within": true
 * 		}
 * 	});
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype.setupConfig=function(config){};
/**
 * @param {mixed} sourcePlugin 
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype.onDraggingOver=function(sourcePlugin){};
/**
 * @param {mixed} sourcePlugin 
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype.onDraggingOut=function(sourcePlugin){};
/**
 * @param {mixed} isMove 
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype.onDragOut=function(isMove){};
/**
 * @param {mixed} sourcePlugin 
 * @param {mixed} isCopy 
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype.onDragIn=function(sourcePlugin, isCopy){};
/**
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Setter/getter of this._copyOnly.<br>
 * </blockquote>
 * @param {mixed} isCopyOnly 
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype.copyOnly=function(isCopyOnly){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._unmarkTargetAnchor=function(){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._startDnd=function(evt){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._rearrange=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._onMouseUp=function(){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._onMouseMove=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provide APIs for grid.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._mixinGrid=function(){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._markTargetAnchor=function(evt){};
/**
 * @param {mixed} srcGrid 
 * @param {mixed} dndRegion 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._mapRegion=function(srcGrid, dndRegion){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._isOutOfGrid=function(evt){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._initEvents=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._getVisibleHeaders=function(){};
/**
 * @param {mixed} rowIndex 
 * @param {mixed} colIndex 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._getDnDRegion=function(rowIndex, colIndex){};
/**
 * @param {mixed} destroySource 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._endDnd=function(destroySource){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._destroySource=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._destroyMoveable=function(){};
/**
 * @param {mixed} isMovingOut 
 * @param {mixed} destroySource 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._destroyDnDUI=function(isMovingOut, destroySource){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._createSource=function(evt){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._createMoveable=function(evt){};
/**
 * @param {mixed} evt 
 * @param {mixed} isMovingIn 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._createDnDUI=function(evt, isMovingIn){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._clear=function(){};
/**
 * @param {mixed} sourcePlugin 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._canAccept=function(sourcePlugin){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the position of the row DnD avatar<br>
 * </blockquote>
 * @param {mixed} evt 
 * @param {mixed} containerPos 
 * @private
 * @returns {position of the insert bar} -
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._calcRowTargetAnchorPos=function(evt, containerPos){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the position of the column DnD avatar<br>
 * </blockquote>
 * @param {mixed} evt 
 * @param {mixed} containerPos 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._calcColTargetAnchorPos=function(evt, containerPos){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the position of the cell DnD avatar<br>
 * </blockquote>
 * @param {mixed} evt 
 * @param {mixed} containerPos 
 * @param {mixed} targetAnchor 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._calcCellTargetAnchorPos=function(evt, containerPos, targetAnchor){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.DnD
*/
dojox.grid.enhanced.plugins.DnD.prototype._allDnDItemsLoaded=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.DnD._config.row={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.DnD._config.col={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.DnD._config.cell={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.DnD.grid.layout={};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract class for all kinds of writers used in the Exporter plugin.<br>
 *	 It utilizes the strategy pattern to break the export work into several stages,<br>
 *	 and provide interfaces for all of them.<br>
 *	 Implementations might choose some of the functions in this class to override,<br>
 *	 thus providing their own functionalities.<br>
 *	 The Exporter will go through the grid line by line. So in every line, all the Views<br>
 *	 will be reached, and the header line is only handled once.<br>
 *	 An *argObj* object is passed to most functions of this class.<br>
 *	 It carries context arguments that make sense when they are called.<br>
 * </blockquote>
 * @param {object} [writerArgs] Any implementation of this class might accept a writerArgs object (optional),
 * which contains some writer-specific arguments given by the user.<br>
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter=function(writerArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Export grid to HTML table format. Primarily used by Printer plugin.<br>
 * </blockquote>
 * @param {object} [writerArgs] 
*/
dojox.grid.enhanced.plugins.exporter.TableWriter=function(writerArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Export grid to CSV format.<br>
 * </blockquote>
 * @param {object} [writerArgs] {separator:'...'}
*/
dojox.grid.enhanced.plugins.exporter.CSVWriter=function(writerArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Export grid to CSV format.<br>
 * </blockquote>
 * @class
 * @param {object} [writerArgs] {separator:'...'}
 * @returns {dojox.grid.enhanced.plugins.exporter.CSVWriter} new instance
*/
dojox.grid.enhanced.plugins.exporter.CSVWriter=function(writerArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ExportWriter<br>
 * </blockquote>
 * @returns {String} -
 * @memberOf dojox.grid.enhanced.plugins.exporter.CSVWriter
*/
dojox.grid.enhanced.plugins.exporter.CSVWriter.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ExportWriter<br>
 * </blockquote>
 * @param {object} arg_obj 
 * @memberOf dojox.grid.enhanced.plugins.exporter.CSVWriter
*/
dojox.grid.enhanced.plugins.exporter.CSVWriter.prototype.handleCell=function(arg_obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ExportWriter<br>
 * </blockquote>
 * @param {object} arg_obj 
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.exporter.CSVWriter
*/
dojox.grid.enhanced.plugins.exporter.CSVWriter.prototype.beforeContentRow=function(arg_obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format cell value to follow CSV standard.<br>
 *	 See: http://en.wikipedia.org/wiki/Comma-separated_values<br>
 * </blockquote>
 * @see reference <a href="http://en.wikipedia.org/wiki/Comma-separated_values">http://en.wikipedia.org/wiki/Comma-separated_values</a>
 * @param {string} cellValue The value in a cell.
 * @private
 * 
 * @returns {String} -
 * @memberOf dojox.grid.enhanced.plugins.exporter.CSVWriter
*/
dojox.grid.enhanced.plugins.exporter.CSVWriter.prototype._formatCSVCell=function(cellValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is an abstract class for all kinds of writers used in the Exporter plugin.<br>
 *	 It utilizes the strategy pattern to break the export work into several stages,<br>
 *	 and provide interfaces for all of them.<br>
 *	 Implementations might choose some of the functions in this class to override,<br>
 *	 thus providing their own functionalities.<br>
 *	 The Exporter will go through the grid line by line. So in every line, all the Views<br>
 *	 will be reached, and the header line is only handled once.<br>
 *	 An *argObj* object is passed to most functions of this class.<br>
 *	 It carries context arguments that make sense when they are called.<br>
 * </blockquote>
 * @class
 * @param {object} [writerArgs] Any implementation of this class might accept a writerArgs object (optional),
 * which contains some writer-specific arguments given by the user.
 * @returns {dojox.grid.enhanced.plugins.exporter._ExportWriter} new instance
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter=function(writerArgs){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.argObj={};
/**
 * <b>Summary:</b><blockquote>
 *	 Export to a string.<br>
 * </blockquote>
 * 
 * @returns {String} -
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle a header cell or data cell.<br>
 * </blockquote>
 * @param {object} argObj An object with at least the following context properties available:
 * {<br>
 * grid,isHeader,<br>
 * row,rowIdx,<br>
 * view,viewIdx,<br>
 * subrow,subrowIdx,<br>
 * cell,cellIdx,<br>
 * spCols(if isHeader==false)<br>
 * }
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.handleCell=function(argObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Before handling a view.<br>
 * </blockquote>
 * @param {object} argObj An object with at least the following context properties available:
 * {<br>
 * grid,isHeader,<br>
 * view,viewIdx,<br>
 * spCols(if isHeader==false)<br>
 * }<br>
 * return:<br>
 * true: go on handling the current view and then call afterView.<br>
 * false: skip the current view, won't call afterView.
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.beforeView=function(argObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Before handling a subrow in a line (defined in the grid structure).<br>
 * </blockquote>
 * @param {object} argObj An object with at least the following context properties available:
 * {<br>
 * grid,isHeader,<br>
 * row,rowIdx,<br>
 * view,viewIdx,<br>
 * subrow,subrowIdx,<br>
 * spCols(if isHeader==false)<br>
 * }<br>
 * return:<br>
 * true: go on handling the current subrow and then call afterSubrow.<br>
 * false: skip the current subrow, won't call afterSubrow.
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.beforeSubrow=function(argObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 We are going to start the travel in the grid.<br>
 *	 Is there anything we should do now?<br>
 * </blockquote>
 * @param {EnhancedGrid} grid 
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.beforeHeader=function(grid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Before handling a line of data (not header).<br>
 * </blockquote>
 * @param {object} argObj An object with at least the following context properties available:
 * {<br>
 * grid,isHeader,<br>
 * row,rowIdx,<br>
 * spCols<br>
 * }<br>
 * return:<br>
 * true: go on handling the current data row and then call afterContentRow.<br>
 * false: skip the current data row, won't call afterContentRow.
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.beforeContentRow=function(argObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 We are ready to go through all the contents(items).<br>
 * </blockquote>
 * @param {Array} items All the items fetched from the store
 * return:<br>
 * true: go on handling the contents and then call afterContent.<br>
 * false: skip all the contents, won't call afterContent.
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.beforeContent=function(items){};
/**
 * <b>Summary:</b><blockquote>
 *	 After handling a view.<br>
 * </blockquote>
 * @param {object} argObj An object with at least the following context properties available:
 * {<br>
 * grid,isHeader,<br>
 * view,viewIdx,<br>
 * spCols(if isHeader==false)<br>
 * }
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.afterView=function(argObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Before handling a subrow in a line (defined in the grid structure).<br>
 * </blockquote>
 * @param {object} argObj An object with at least the following context properties available:
 * {<br>
 * grid,isHeader,<br>
 * row,rowIdx,<br>
 * view,viewIdx,<br>
 * subrow,subrowIdx,<br>
 * spCols(if isHeader==false)<br>
 * }
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.afterSubrow=function(argObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 The header line has been handled.<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.afterHeader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 After handling a line of data (not header).<br>
 * </blockquote>
 * @param {object} argObj An object with at least the following context properties available:
 * {<br>
 * grid,isHeader,<br>
 * row,rowIdx,<br>
 * spCols<br>
 * }
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.afterContentRow=function(argObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 We have finished the entire grid travel.<br>
 *	 Do some clean up work if you need to.<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype.afterContent=function(){};
/**
 * @param {mixed} rowIndex 
 * @param {mixed} rowItem 
 * @param {mixed} cell 
 * @param {mixed} grid 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.exporter._ExportWriter
*/
dojox.grid.enhanced.plugins.exporter._ExportWriter.prototype._getExportDataForCell=function(rowIndex, rowItem, cell, grid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Export grid to HTML table format. Primarily used by Printer plugin.<br>
 * </blockquote>
 * @class
 * @param {object} [writerArgs] 
 * @returns {dojox.grid.enhanced.plugins.exporter.TableWriter} new instance
*/
dojox.grid.enhanced.plugins.exporter.TableWriter=function(writerArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ExportWriter<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.exporter.TableWriter
*/
dojox.grid.enhanced.plugins.exporter.TableWriter.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ExportWriter<br>
 * </blockquote>
 * @param {object} arg_obj 
 * @memberOf dojox.grid.enhanced.plugins.exporter.TableWriter
*/
dojox.grid.enhanced.plugins.exporter.TableWriter.prototype.handleCell=function(arg_obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ExportWriter<br>
 * </blockquote>
 * @param {object} arg_obj 
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.exporter.TableWriter
*/
dojox.grid.enhanced.plugins.exporter.TableWriter.prototype.beforeView=function(arg_obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ExportWriter<br>
 * </blockquote>
 * @param {object} arg_obj 
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.exporter.TableWriter
*/
dojox.grid.enhanced.plugins.exporter.TableWriter.prototype.beforeSubrow=function(arg_obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ExportWriter<br>
 * </blockquote>
 * @param {object} arg_obj 
 * @memberOf dojox.grid.enhanced.plugins.exporter.TableWriter
*/
dojox.grid.enhanced.plugins.exporter.TableWriter.prototype.afterView=function(arg_obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ExportWriter<br>
 * </blockquote>
 * @param {object} arg_obj 
 * @memberOf dojox.grid.enhanced.plugins.exporter.TableWriter
*/
dojox.grid.enhanced.plugins.exporter.TableWriter.prototype.afterSubrow=function(arg_obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ExportWriter<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.exporter.TableWriter
*/
dojox.grid.enhanced.plugins.exporter.TableWriter.prototype.afterContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get html attribute string for the given kind of tag.<br>
 * </blockquote>
 * @param {string} tagName An html tag name
 * @private
 * 
 * @returns {String} -
 * @memberOf dojox.grid.enhanced.plugins.exporter.TableWriter
*/
dojox.grid.enhanced.plugins.exporter.TableWriter.prototype._getTableAttrs=function(tagName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get CSS class string for a row<br>
 * </blockquote>
 * @param {object} arg_obj 
 * @private
 * @returns {String} -
 * @memberOf dojox.grid.enhanced.plugins.exporter.TableWriter
*/
dojox.grid.enhanced.plugins.exporter.TableWriter.prototype._getRowClass=function(arg_obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get CSS class string for a column<br>
 * </blockquote>
 * @param {object} arg_obj 
 * @private
 * @returns {String} -
 * @memberOf dojox.grid.enhanced.plugins.exporter.TableWriter
*/
dojox.grid.enhanced.plugins.exporter.TableWriter.prototype._getColumnClass=function(arg_obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provide functions to export the grid data into a given format.<br>
 *	 <br>
 *	 Acceptable plugin parameters:<br>
 *	 1. exportFormatter: function(data, cell, rowIndex, item)<br>
 *	 Provide a way to customize how data should look in exported string.<br>
 *	 Note that usually the formatter of grid cell should not be used here (it can return HTML or even widget).<br>
 * </blockquote>
 * @class
 * @param {EnhancedGrid} grid The grid to plug in to.
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.Exporter} new instance
 * @example
 * 	function onExported(exported_text){
 * 		//custom code here...
 * 	}
 * 	dijit.byId("my_grid_id").exportTo("csv",	//registered export format, mandatory
 * 		{										//the whole object is optional.
 * 			fetchArgs: {start:0,count:1000},	//keywordArgs for fetch, optional
 * 			writerArgs: {separator:';'},		//export writer specific arguments, optional
 * 		},
 * 		function(str){
 * 			//call back function, mandatory
 * 	});
 * 	var result = dijit.byId("my_grid_id").exportSelectedTo("table",	 //registered export format, mandatory
 * 														{separator:'|'} //export writer specific arguments, optional
 * 	);
*/
dojox.grid.enhanced.plugins.Exporter=function(grid, args){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Exporter
*/
dojox.grid.enhanced.plugins.Exporter.grid=null;
/**
 * @param {mixed} formatter 
 * @memberOf dojox.grid.enhanced.plugins.Exporter
*/
dojox.grid.enhanced.plugins.Exporter.prototype.setExportFormatter=function(formatter){};
/**
 * <b>Summary:</b><blockquote>
 *	 Only export selected rows.<br>
 * </blockquote>
 * @param {string} type A registered export format name
 * @param {object} [writerArgs] Arguments for the given format writer
 * 
 * @returns {String} -The exported string
 * @memberOf dojox.grid.enhanced.plugins.Exporter
*/
dojox.grid.enhanced.plugins.Exporter.prototype.exportSelected=function(type, writerArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Export required rows(fetchArgs) to a kind of format(type)<br>
 *	 using the corresponding writer with given arguments(writerArgs),<br>
 *	 then pass the exported text to a given function(onExported).<br>
 * </blockquote>
 * @param {string} type A registered export format name
 * @param {object} [args] includes:
 * {<br>
 * fetchArgs: object?<br>
 * Any arguments for store.fetch<br>
 * writerArgs: object?<br>
 * Arguments for the given format writer<br>
 * }
 * @param {function(string)} onExported Call back function when export result is ready
 * @memberOf dojox.grid.enhanced.plugins.Exporter
*/
dojox.grid.enhanced.plugins.Exporter.prototype.exportGrid=function(type, args, onExported){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Exporter
*/
dojox.grid.enhanced.plugins.Exporter.prototype._mixinGrid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Row selectors and row indexes should be recognized and handled separately.<br>
 * </blockquote>
 * @param {dojox.grid.__CellDef} header_cell 
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.Exporter
*/
dojox.grid.enhanced.plugins.Exporter.prototype._isSpecialCol=function(header_cell){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use the given export writer(writer) to go through the grid structure<br>
 *	 and the given rows(items), then return the writer output.<br>
 * </blockquote>
 * @param {Array} items 
 * @param {ExportWriter} writer 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Exporter
*/
dojox.grid.enhanced.plugins.Exporter.prototype._goThroughGridData=function(items, writer){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use the given export format type(fileType)<br>
 *	 and writer arguments(writerArgs) to create<br>
 *	 a ExportWriter and return it.<br>
 * </blockquote>
 * @param {string} fileType 
 * @param {object} [writerArgs] 
 * @private
 * @returns {ExportWriter} -
 * @memberOf dojox.grid.enhanced.plugins.Exporter
*/
dojox.grid.enhanced.plugins.Exporter.prototype._getExportWriter=function(fileType, writerArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use the given export writer(writer) to go through a single row<br>
 *	 which is given in the context object(arg_obj).<br>
 * </blockquote>
 * @param {object} arg_obj 
 * @param {ExportWriter} writer 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Exporter
*/
dojox.grid.enhanced.plugins.Exporter.prototype._buildRow=function(arg_obj, writer){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all uni-operator expressions.<br>
 *	 A uni-operator expression is an _OperatorExpr that only allow one operand.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter._UniOpExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all operator expressions.<br>
 *	 An operator expression is a _ConditionExpr that represents an operation.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter._OperatorExpr=function(){};
/**
*/
dojox.grid.enhanced.plugins.filter._FilterLayerMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all data expressions.<br>
 *	 A _DataExpr is a condition expression for a single data value.<br>
 *	 If the data value to be represent is a pure value (literal value, like string/number/Date/...)<br>
 *	 this _DataExpr is nothing more than a simple wrapper.<br>
 *	 If the data value to be represent is in a store, then _DataExpr is responsible to extract it<br>
 *	 from the store when this condition is applied to a data row.<br>
 *	 private fields:<br>
 *	 _value: anything<br>
 *	 _colArg: anything<br>
 * </blockquote>
 * @param {anything} dataValue If *isColumn* is a boolean true, then it should be a kind of column information, like field name
 * or column index. Otherwise, it is regarded as a pure value, and the getValue method will simply<br>
 * return it.
 * @param {bool} [isColumn] boolean Optional. To specify whether this _DataExpr represents a column or a pure value.
 * @param {object} convertArgs 
*/
dojox.grid.enhanced.plugins.filter._DataExpr=function(dataValue, isColumn, convertArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all condition expressions.<br>
 *	 A condition expression can be applied on a data row (e.g. an item in a store)<br>
 *	 and generate a result condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter._ConditionExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all bi-operator expressions.<br>
 *	 A bi-operator expression is an _OperatorExpr that allow and only allow two operands.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter._BiOpExpr=function(){};
/**
*/
dojox.grid.enhanced.plugins.filter.UniqueComboBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A condition expression wrapper for time values<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.TimeExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A condition expression wrapper for string values<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.StringExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;starts with&amp;quot; condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.StartsWith=function(){};
/**
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.filter.ServerSideFilterLayer=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A condition expression wrapper for number values<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.NumberExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;regular expression match&amp;quot; condition expression.<br>
 *	 The second operand's value will be regarded as an regular expression string.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.Matches=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic XOR condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.LogicXOR=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic OR condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.LogicOR=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic NOT condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.LogicNOT=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic ANY condition expression, equals a sequence of logic ORs<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.LogicANY=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic AND condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.LogicAND=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic ALL condition expression, equals a sequence of logic ANDs<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.LogicALL=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;less than or equal to&amp;quot; condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.LessThanOrEqualTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;less than&amp;quot; condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.LessThan=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;larger than or equal to&amp;quot; condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.LargerThanOrEqualTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;larger than&amp;quot; condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.LargerThan=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check empty<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.IsEmpty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create the status tip UI.<br>
 *	 <br>
 *	 <br>
 *	 -----------------Public Functions------------------------<br>
 *	 <br>
 *	 <br>
 *	 -----------------Private Functions---------------------------<br>
 * </blockquote>
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.filter.FilterStatusTip=function(args){};
/**
*/
dojox.grid.enhanced.plugins.filter.FilterStatusPane=function(){};
/**
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create the filter definition UI.<br>
 *	 <br>
 *	 <br>
 *	 ////////////////////////////////////////////////////////////////////////////////////////////////////////<br>
 * </blockquote>
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create filter expression from a JSON object.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.FilterBuilder=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The filter bar UI.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.FilterBar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An &amp;quot;equal to&amp;quot; condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.EqualTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An &amp;quot;ends with&amp;quot; condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.EndsWith=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A condition expression wrapper for date values<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.DateExpr=function(){};
/**
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;contains&amp;quot; condition expression.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.Contains=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a client side filter layer on top of the data store,<br>
 *	 so any filter expression can be applied to the store.<br>
 * </blockquote>
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 The UI for user to confirm the operation of clearing filter.<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.ClearFilterConfirm=function(){};
/**
 * @param {mixed} args 
*/
dojox.grid.enhanced.plugins.filter.BooleanValueBox=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A condition expression wrapper for boolean values<br>
 * </blockquote>
*/
dojox.grid.enhanced.plugins.filter.BooleanExpr=function(){};
/**
*/
dojox.grid.enhanced.plugins.filter.AccordionContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The UI for user to confirm the operation of clearing filter.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.ClearFilterConfirm} new instance
*/
dojox.grid.enhanced.plugins.filter.ClearFilterConfirm=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.ClearFilterConfirm.plugin={};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.ClearFilterConfirm
*/
dojox.grid.enhanced.plugins.filter.ClearFilterConfirm.prototype.uninitialize=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.ClearFilterConfirm
*/
dojox.grid.enhanced.plugins.filter.ClearFilterConfirm.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.ClearFilterConfirm
*/
dojox.grid.enhanced.plugins.filter.ClearFilterConfirm.prototype.postCreate=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.ClearFilterConfirm
*/
dojox.grid.enhanced.plugins.filter.ClearFilterConfirm.prototype._onClear=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.ClearFilterConfirm
*/
dojox.grid.enhanced.plugins.filter.ClearFilterConfirm.prototype._onCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all condition expressions.<br>
 *	 A condition expression can be applied on a data row (e.g. an item in a store)<br>
 *	 and generate a result condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter._ConditionExpr} new instance
*/
dojox.grid.enhanced.plugins.filter._ConditionExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convert this data expression to a simple object. Mainly used for serialization.<br>
 * </blockquote>
 * 
 * @returns {Object} -
 * @memberOf dojox.grid.enhanced.plugins.filter._ConditionExpr
*/
dojox.grid.enhanced.plugins.filter._ConditionExpr.prototype.toObject=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the name of this kind of expression.<br>
 * </blockquote>
 * 
 * @returns {String} -
 * @memberOf dojox.grid.enhanced.plugins.filter._ConditionExpr
*/
dojox.grid.enhanced.plugins.filter._ConditionExpr.prototype.getName=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 *Unimplemented Interface*<br>
 *	 Apply this condition expression on the given datarow, return a result expression.<br>
 *	 taqs:<br>
 *	 public extension<br>
 * </blockquote>
 * @param {data} datarow object A data item of a store.
 * @param {function(row,colArg)} getter function(datarow, colArg)
 * A user defined function that extract cell data from *datarow*.<br>
 * *colArg* is an argument that provides a kind of column information.<br>
 * It is defined by user in the constructor of a _DataExpr object.
 * @memberOf dojox.grid.enhanced.plugins.filter._ConditionExpr
*/
dojox.grid.enhanced.plugins.filter._ConditionExpr.prototype.applyRow=function(datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all data expressions.<br>
 *	 A _DataExpr is a condition expression for a single data value.<br>
 *	 If the data value to be represent is a pure value (literal value, like string/number/Date/...)<br>
 *	 this _DataExpr is nothing more than a simple wrapper.<br>
 *	 If the data value to be represent is in a store, then _DataExpr is responsible to extract it<br>
 *	 from the store when this condition is applied to a data row.<br>
 *	 private fields:<br>
 *	 _value: anything<br>
 *	 _colArg: anything<br>
 * </blockquote>
 * @class
 * @param {anything} dataValue If *isColumn* is a boolean true, then it should be a kind of column information, like field name
 * or column index. Otherwise, it is regarded as a pure value, and the getValue method will simply<br>
 * return it.
 * @param {bool} [isColumn] boolean Optional. To specify whether this _DataExpr represents a column or a pure value.
 * @param {object} convertArgs 
 * @returns {dojox.grid.enhanced.plugins.filter._DataExpr} new instance
*/
dojox.grid.enhanced.plugins.filter._DataExpr=function(dataValue, isColumn, convertArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ConditionExpr.toObject<br>
 * </blockquote>
 * @returns {String} -
 * @memberOf dojox.grid.enhanced.plugins.filter._DataExpr
*/
dojox.grid.enhanced.plugins.filter._DataExpr.prototype.toObject=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If this is a pure value wrapper, simply return the value.<br>
 *	 Otherwise (it's a column), return is undefined.<br>
 * </blockquote>
 * 
 * @returns {String} -
 * @memberOf dojox.grid.enhanced.plugins.filter._DataExpr
*/
dojox.grid.enhanced.plugins.filter._DataExpr.prototype.getValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Implement _ConditionExpr.applyRow.<br>
 *	 If this is a pure value, simply return self.<br>
 *	 Otherwise, extract the cell data from datarow using the given getter function,<br>
 *	 and then convert this cell data to a _DataExpr and return the expression.<br>
 * </blockquote>
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter._DataExpr
*/
dojox.grid.enhanced.plugins.filter._DataExpr.prototype.applyRow=function(datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all operator expressions.<br>
 *	 An operator expression is a _ConditionExpr that represents an operation.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter._OperatorExpr} new instance
*/
dojox.grid.enhanced.plugins.filter._OperatorExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _ConditionExpr.toObject<br>
 * </blockquote>
 * @returns {Object} -
 * @memberOf dojox.grid.enhanced.plugins.filter._OperatorExpr
*/
dojox.grid.enhanced.plugins.filter._OperatorExpr.prototype.toObject=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all uni-operator expressions.<br>
 *	 A uni-operator expression is an _OperatorExpr that only allow one operand.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter._UniOpExpr} new instance
*/
dojox.grid.enhanced.plugins.filter._UniOpExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Implement _ConditionExpr.applyRow.<br>
 *	 Apply the restriction of &amp;quot;only one operand&amp;quot; and confirm the operand is a valid _ConditionExpr.<br>
 *	 Then do the calculation of this operator.<br>
 * </blockquote>
 * @param {data} datarow item
 * @param {function(row,colArg)} getter 
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter._UniOpExpr
*/
dojox.grid.enhanced.plugins.filter._UniOpExpr.prototype.applyRow=function(datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 *Unimplemented Interface*<br>
 *	 Do the actrual work of applyRow here.<br>
 * </blockquote>
 * @param {_ConditionExpr} operand 
 * @param {data} datarow object
 * @param {function(row,colArg)} getter 
 * @memberOf dojox.grid.enhanced.plugins.filter._UniOpExpr
*/
dojox.grid.enhanced.plugins.filter._UniOpExpr.prototype._calculate=function(operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all bi-operator expressions.<br>
 *	 A bi-operator expression is an _OperatorExpr that allow and only allow two operands.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter._BiOpExpr} new instance
*/
dojox.grid.enhanced.plugins.filter._BiOpExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Implement _ConditionExpr.applyRow.<br>
 *	 Apply the restriction of &amp;quot;two operands&amp;quot; and confirm operands are valid _ConditionExpr's.<br>
 * </blockquote>
 * @param {data} datarow item
 * @param {function(row,colArg)} getter 
 * @memberOf dojox.grid.enhanced.plugins.filter._BiOpExpr
*/
dojox.grid.enhanced.plugins.filter._BiOpExpr.prototype.applyRow=function(datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 *Unimplemented Interface*<br>
 *	 Do the actrual work of applyRow here.<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow object
 * @param {function(row,colArg)} getter 
 * @memberOf dojox.grid.enhanced.plugins.filter._BiOpExpr
*/
dojox.grid.enhanced.plugins.filter._BiOpExpr.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A condition expression wrapper for boolean values<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.BooleanExpr} new instance
*/
dojox.grid.enhanced.plugins.filter.BooleanExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 override from _DataExpr<br>
 * </blockquote>
 * @param {anything} dataValue 
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.filter.BooleanExpr
*/
dojox.grid.enhanced.plugins.filter.BooleanExpr.prototype._convertData=function(dataValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 A condition expression wrapper for string values<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.StringExpr} new instance
*/
dojox.grid.enhanced.plugins.filter.StringExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 override from _DataExpr<br>
 * </blockquote>
 * @param {anything} dataValue 
 * @private
 * @returns {String} -
 * @memberOf dojox.grid.enhanced.plugins.filter.StringExpr
*/
dojox.grid.enhanced.plugins.filter.StringExpr.prototype._convertData=function(dataValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 A condition expression wrapper for number values<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.NumberExpr} new instance
*/
dojox.grid.enhanced.plugins.filter.NumberExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 override from _DataExpr<br>
 * </blockquote>
 * @param {anything} dataValue 
 * @private
 * @returns {Number} -
 * @memberOf dojox.grid.enhanced.plugins.filter.NumberExpr
*/
dojox.grid.enhanced.plugins.filter.NumberExpr.prototype._convertDataToExpr=function(dataValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 A condition expression wrapper for date values<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.DateExpr} new instance
*/
dojox.grid.enhanced.plugins.filter.DateExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _DataExpr.toObject<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.filter.DateExpr
*/
dojox.grid.enhanced.plugins.filter.DateExpr.prototype.toObject=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 override from _DataExpr<br>
 * </blockquote>
 * @param {anything} dataValue 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.DateExpr
*/
dojox.grid.enhanced.plugins.filter.DateExpr.prototype._convertData=function(dataValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 A condition expression wrapper for time values<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.TimeExpr} new instance
*/
dojox.grid.enhanced.plugins.filter.TimeExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The filter bar UI.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.FilterBar} new instance
*/
dojox.grid.enhanced.plugins.filter.FilterBar=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.FilterBar.plugin={};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype.uninitialize=function(){};
/**
 * @param {mixed} useAnim 
 * @param {mixed} animArgs 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype.toggleFilterBar=function(useAnim, animArgs){};
/**
 * @param {mixed} toHide 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype.toggleClearFilterBtn=function(toHide){};
/**
 * @param {mixed} toShow 
 * @param {mixed} useAnim 
 * @param {mixed} animArgs 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype.showFilterBar=function(toShow, useAnim, animArgs){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype.postCreate=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype.isFilterBarShown=function(){};
/**
 * @param {int} coordX 
 * @returns {Integer} -
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype.getColumnIdx=function(coordX){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._updateTipPosition=function(evt){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._showStatusTooltip=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._showFilterDefDialog=function(e){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._setStatusTipTimeout=function(){};
/**
 * @param {Integer} colIdx 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onShowFilterDefDialog=function(colIdx){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onMoveButton=function(e){};
/**
 * @param {event} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onMouseMove=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onMouseLeave=function(e){};
/**
 * @param {event} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onMouseEnter=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onLeaveButton=function(e){};
/**
 * @param {mixed} highlightOnly 
 * @param {mixed} evt 
 * @param {mixed} step 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onFocusFilterBar=function(highlightOnly, evt, step){};
/**
 * @param {int} filteredSize 
 * @param {int} originSize 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onFiltered=function(filteredSize, originSize){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onEnterButton=function(e){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onCloseFilterDefDialog=function(){};
/**
 * @param {event} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onClickFilterBar=function(e){};
/**
 * @param {mixed} evt 
 * @param {mixed} step 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._onBlurFilterBar=function(evt, step){};
/**
 * @param {int} mousePos_x 
 * @param {domNode} headerNode 
 * @param {int} colIndex 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._isInColumn=function(mousePos_x, headerNode, colIndex){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._initAriaInfo=function(){};
/**
 * @param {int} colIdx 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._highlightHeader=function(colIdx){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._closeFilterBar=function(e){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._clearStatusTipTimeout=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._clearHeaderHighlight=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar
*/
dojox.grid.enhanced.plugins.filter.FilterBar.prototype._clearFilterDefDialog=function(e){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.FilterBar.plugin.grid={};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBar.plugin.grid
*/
dojox.grid.enhanced.plugins.filter.FilterBar.plugin.grid.prototype._getHeaderHeight=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create filter expression from a JSON object.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.FilterBuilder} new instance
*/
dojox.grid.enhanced.plugins.filter.FilterBuilder=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.FilterBuilder.supportedTypes={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.FilterBuilder.supportedOps={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.FilterBuilder.defaultArgs={};
/**
 * @param {mixed} def 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterBuilder
*/
dojox.grid.enhanced.plugins.filter.FilterBuilder.prototype.buildExpression=function(def){};
/**
 * @param {mixed} operands 
*/
dojox.grid.enhanced.plugins.filter.FilterBuilder.supportedOps.range=function(operands){};
/**
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.AccordionContainer} new instance
*/
dojox.grid.enhanced.plugins.filter.AccordionContainer=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.AccordionContainer
*/
dojox.grid.enhanced.plugins.filter.AccordionContainer.prototype.startup=function(){};
/**
 * @param {mixed} child 
 * @memberOf dojox.grid.enhanced.plugins.filter.AccordionContainer
*/
dojox.grid.enhanced.plugins.filter.AccordionContainer.prototype.selectChild=function(child){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.AccordionContainer
*/
dojox.grid.enhanced.plugins.filter.AccordionContainer.prototype.resize=function(){};
/**
 * @param {mixed} child 
 * @memberOf dojox.grid.enhanced.plugins.filter.AccordionContainer
*/
dojox.grid.enhanced.plugins.filter.AccordionContainer.prototype.removeChild=function(child){};
/**
 * @param {dijit._Widget} child 
 * @param {Integer} [insertIndex] 
 * @memberOf dojox.grid.enhanced.plugins.filter.AccordionContainer
*/
dojox.grid.enhanced.plugins.filter.AccordionContainer.prototype.addChild=function(child, insertIndex){};
/**
 * @param {mixed} child 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.AccordionContainer
*/
dojox.grid.enhanced.plugins.filter.AccordionContainer.prototype._setupTitleDom=function(child){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides base class method, make left/right button do other things.<br>
 * </blockquote>
 * @param {Event} e 
 * @param {dijit._Widget} fromTitle 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.AccordionContainer
*/
dojox.grid.enhanced.plugins.filter.AccordionContainer.prototype._onKeyPress=function(e, fromTitle){};
/**
 * @param {mixed} child 
 * @param {mixed} isFirst 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.AccordionContainer
*/
dojox.grid.enhanced.plugins.filter.AccordionContainer.prototype._modifyChild=function(child, isFirst){};
/**
 * @param {bool} toGrow 
 * @param {int} heightDif 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.AccordionContainer
*/
dojox.grid.enhanced.plugins.filter.AccordionContainer.prototype._hackHeight=function(toGrow, heightDif){};
/**
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.FilterDefPane} new instance
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane.plugin={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane.dlg={};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefPane
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane.prototype.uninitialize=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefPane
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefPane
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane.prototype.postCreate=function(){};
/**
 * @param {mixed} val 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefPane
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane.prototype._onRelSelectChange=function(val){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefPane
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane.prototype._onKey=function(e){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefPane
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane.prototype._onFilter=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefPane
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane.prototype._onClearFilter=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefPane
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane.prototype._onCancel=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefPane
*/
dojox.grid.enhanced.plugins.filter.FilterDefPane.prototype._onAddCBox=function(){};
/**
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.CriteriaBox} new instance
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.plugin={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.dlg={};
/**
 * @param {mixed} isEmpty 
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.updateRuleTitle=function(isEmpty){};
/**
 * @param {mixed} index 
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.updateRuleIndex=function(index){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.uninitialize=function(){};
/**
 * @param {mixed} idx 
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.setAriaInfo=function(idx){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.save=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.postCreate=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.onRemove=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.onMoveColumn=function(){};
/**
 * @param {mixed} obj 
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.load=function(obj){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.isEmpty=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.getExpr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Format the value to be shown in tooltip.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} cond 
 * @param {mixed} v 
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.formatValue=function(type, cond, v){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.curValue=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.curCondition=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.curColumn=function(){};
/**
 * @param {bool} selectCurCol 
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype.changeCurrentColumn=function(selectCurCol){};
/**
 * @param {mixed} cond 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._updateValueBox=function(cond){};
/**
 * @param {mixed} sel 
 * @param {mixed} alt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._showSelectOrLabel=function(sel, alt){};
/**
 * @param {string} type 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._setValueBoxByType=function(type){};
/**
 * @param {string} type 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._setConditionsByType=function(type){};
/**
 * @param {mixed} val 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._onChangeCondition=function(val){};
/**
 * @param {mixed} val 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._onChangeColumn=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Decide which value box to use given data type and column index.<br>
 * </blockquote>
 * @param {int|string} colIndex 
 * @param {string} type 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._getValueBoxClsInfo=function(colIndex, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the arguments for the value box construction.<br>
 * </blockquote>
 * @param {string} type 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._getValueBoxArgByType=function(type){};
/**
 * @param {mixed} type 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._getUsableConditions=function(type){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._getColumnOptions=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a value input box with given class and arguments<br>
 * </blockquote>
 * @param {widget} cls constructor
 * @param {object} arg 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._createValueBox=function(cls, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a DIV containing 2 input widgets, which represents a range, with the given class and arguments<br>
 * </blockquote>
 * @param {widget} cls constructor
 * @param {object} arg 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._createRangeBox=function(cls, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether the given criteria box is completed. If it is, mark it.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.CriteriaBox
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox.prototype._checkValidCriteria=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.CriteriaBox._pane._buttonWidget={};
/**
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.UniqueComboBox} new instance
*/
dojox.grid.enhanced.plugins.filter.UniqueComboBox=function(){};
/**
 * @param {mixed} results 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.UniqueComboBox
*/
dojox.grid.enhanced.plugins.filter.UniqueComboBox.prototype._openResultList=function(results){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.UniqueComboBox
*/
dojox.grid.enhanced.plugins.filter.UniqueComboBox.prototype._onKey=function(evt){};
/**
 * @class
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.filter.BooleanValueBox} new instance
*/
dojox.grid.enhanced.plugins.filter.BooleanValueBox=function(args){};
/**
 * @param {mixed} prop 
 * @param {mixed} v 
 * @memberOf dojox.grid.enhanced.plugins.filter.BooleanValueBox
*/
dojox.grid.enhanced.plugins.filter.BooleanValueBox.prototype.set=function(prop, v){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.BooleanValueBox
*/
dojox.grid.enhanced.plugins.filter.BooleanValueBox.prototype.postCreate=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.BooleanValueBox
*/
dojox.grid.enhanced.plugins.filter.BooleanValueBox.prototype.onChange=function(){};
/**
 * @param {mixed} prop 
 * @memberOf dojox.grid.enhanced.plugins.filter.BooleanValueBox
*/
dojox.grid.enhanced.plugins.filter.BooleanValueBox.prototype.get=function(prop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create the filter definition UI.<br>
 *	 <br>
 *	 <br>
 *	 ////////////////////////////////////////////////////////////////////////////////////////////////////////<br>
 * </blockquote>
 * @class
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.filter.FilterDefDialog} new instance
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog=function(args){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.plugin={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.filterDefPane={};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog._cboxes=[];
/**
 * <b>Summary:</b><blockquote>
 *	 Show the filter defintion dialog.<br>
 * </blockquote>
 * @param {int} colIndex 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.showDialog=function(colIndex){};
/**
 * @param {mixed} rules 
 * @param {mixed} ruleRelation 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.setFilter=function(rules, ruleRelation){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove criteria boxes from the filter definition pane.<br>
 * </blockquote>
 * @param {int|CriteriaBox|int[]} cnt 
 * @param {bool} [isIdx] 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.removeCriteriaBoxes=function(cnt, isIdx){};
/**
 * <b>Summary:</b><blockquote>
 *	 Triggered when the rendering of the filter definition dialog is completely finished.<br>
 * </blockquote>
 * @param {Current} cbox visible criteria box
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.onRendered=function(cbox){};
/**
 * @param {mixed} sourceViewIndex 
 * @param {mixed} destViewIndex 
 * @param {mixed} cellIndex 
 * @param {mixed} targetIndex 
 * @param {mixed} before 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.onMoveColumn=function(sourceViewIndex, destViewIndex, cellIndex, targetIndex, before){};
/**
 * <b>Summary:</b><blockquote>
 *	 Triggered when the &amp;quot;Filter&amp;quot; button is clicked.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.onFilter=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Triggered when the &amp;quot;Clear&amp;quot; button is clicked.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.onClearFilter=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Triggered when the &amp;quot;Cancel&amp;quot; buttton is clicked.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.onCancel=function(e){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.getFilter=function(){};
/**
 * @param {mixed} rule 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.getExprForCriteria=function(rule){};
/**
 * @param {mixed} value 
 * @param {mixed} colIdx 
 * @param {mixed} type 
 * @param {mixed} condition 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.getExprForColumn=function(value, colIdx, type, condition){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the *idx*-th criteria.<br>
 * </blockquote>
 * @param {int} idx 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.getCriteria=function(idx){};
/**
 * @param {mixed} type 
 * @param {mixed} c 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.getConditionLabelByValue=function(type, c){};
/**
 * @param {int} colIndex 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.getColumnType=function(colIndex){};
/**
 * @param {mixed} v 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.getColumnLabelByValue=function(v){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Close the filter definition dialog.<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.closeDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear filter definition.<br>
 * </blockquote>
 * @param {mixed} noRefresh 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.clearFilter=function(noRefresh){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.canFilter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add *cnt* criteria boxes to the filter definition pane.<br>
 *	 Check overflow if necessary.<br>
 * </blockquote>
 * @param {int} cnt 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype.addCriteriaBoxes=function(cnt){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype._updatePane=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype._updateCBoxTitles=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype._setupData=function(){};
/**
 * @param {int} colIndex 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype._prepareDialog=function(colIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 If someone clear the filter def in the store directly, we must clear it in the UI.<br>
 *	 If someone defines a filter, don't know how to handle it!<br>
 * </blockquote>
 * @param {mixed} filterDef 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype._onSetFilter=function(filterDef){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype._defineFilter=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterDefDialog
*/
dojox.grid.enhanced.plugins.filter.FilterDefDialog.prototype._closeDlgAndUpdateGrid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic AND condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.LogicAND} new instance
*/
dojox.grid.enhanced.plugins.filter.LogicAND=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.LogicAND
*/
dojox.grid.enhanced.plugins.filter.LogicAND.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic OR condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.LogicOR} new instance
*/
dojox.grid.enhanced.plugins.filter.LogicOR=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.LogicOR
*/
dojox.grid.enhanced.plugins.filter.LogicOR.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic XOR condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.LogicXOR} new instance
*/
dojox.grid.enhanced.plugins.filter.LogicXOR=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.LogicXOR
*/
dojox.grid.enhanced.plugins.filter.LogicXOR.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic NOT condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.LogicNOT} new instance
*/
dojox.grid.enhanced.plugins.filter.LogicNOT=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _UniOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.LogicNOT
*/
dojox.grid.enhanced.plugins.filter.LogicNOT.prototype._calculate=function(operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic ALL condition expression, equals a sequence of logic ANDs<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.LogicALL} new instance
*/
dojox.grid.enhanced.plugins.filter.LogicALL=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _ConditionExpr<br>
 * </blockquote>
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.LogicALL
*/
dojox.grid.enhanced.plugins.filter.LogicALL.prototype.applyRow=function(datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A logic ANY condition expression, equals a sequence of logic ORs<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.LogicANY} new instance
*/
dojox.grid.enhanced.plugins.filter.LogicANY=function(){};
/**
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.LogicANY
*/
dojox.grid.enhanced.plugins.filter.LogicANY.prototype.applyRow=function(datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 An &amp;quot;equal to&amp;quot; condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.EqualTo} new instance
*/
dojox.grid.enhanced.plugins.filter.EqualTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.EqualTo
*/
dojox.grid.enhanced.plugins.filter.EqualTo.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;less than&amp;quot; condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.LessThan} new instance
*/
dojox.grid.enhanced.plugins.filter.LessThan=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.LessThan
*/
dojox.grid.enhanced.plugins.filter.LessThan.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;less than or equal to&amp;quot; condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.LessThanOrEqualTo} new instance
*/
dojox.grid.enhanced.plugins.filter.LessThanOrEqualTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.LessThanOrEqualTo
*/
dojox.grid.enhanced.plugins.filter.LessThanOrEqualTo.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;larger than&amp;quot; condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.LargerThan} new instance
*/
dojox.grid.enhanced.plugins.filter.LargerThan=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.LargerThan
*/
dojox.grid.enhanced.plugins.filter.LargerThan.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;larger than or equal to&amp;quot; condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.LargerThanOrEqualTo} new instance
*/
dojox.grid.enhanced.plugins.filter.LargerThanOrEqualTo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.LargerThanOrEqualTo
*/
dojox.grid.enhanced.plugins.filter.LargerThanOrEqualTo.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;contains&amp;quot; condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.Contains} new instance
*/
dojox.grid.enhanced.plugins.filter.Contains=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.Contains
*/
dojox.grid.enhanced.plugins.filter.Contains.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;starts with&amp;quot; condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.StartsWith} new instance
*/
dojox.grid.enhanced.plugins.filter.StartsWith=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.StartsWith
*/
dojox.grid.enhanced.plugins.filter.StartsWith.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 An &amp;quot;ends with&amp;quot; condition expression.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.EndsWith} new instance
*/
dojox.grid.enhanced.plugins.filter.EndsWith=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.EndsWith
*/
dojox.grid.enhanced.plugins.filter.EndsWith.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 A &amp;quot;regular expression match&amp;quot; condition expression.<br>
 *	 The second operand's value will be regarded as an regular expression string.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.Matches} new instance
*/
dojox.grid.enhanced.plugins.filter.Matches=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} left_operand 
 * @param {_ConditionExpr} right_operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.Matches
*/
dojox.grid.enhanced.plugins.filter.Matches.prototype._calculate=function(left_operand, right_operand, datarow, getter){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check empty<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.IsEmpty} new instance
*/
dojox.grid.enhanced.plugins.filter.IsEmpty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override from _BiOpExpr<br>
 * </blockquote>
 * @param {_ConditionExpr} operand 
 * @param {data} datarow item
 * @param {function(row,colIdx)} getter 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.IsEmpty
*/
dojox.grid.enhanced.plugins.filter.IsEmpty.prototype._calculate=function(operand, datarow, getter){};
/**
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter._FilterLayerMixin} new instance
*/
dojox.grid.enhanced.plugins.filter._FilterLayerMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when store data is filtered. This event is before *onComplete*, after *onBegin*.<br>
 * </blockquote>
 * @param {Integer} filteredSize The number of remaining fetched items after filtering.
 * @param {Integer} totalSize The number of original fetched items.
 * @memberOf dojox.grid.enhanced.plugins.filter._FilterLayerMixin
*/
dojox.grid.enhanced.plugins.filter._FilterLayerMixin.prototype.onFiltered=function(filteredSize, totalSize){};
/**
 * @param {mixed} filter 
 * @memberOf dojox.grid.enhanced.plugins.filter._FilterLayerMixin
*/
dojox.grid.enhanced.plugins.filter._FilterLayerMixin.prototype.onFilterDefined=function(filter){};
/**
 * <b>Summary:</b><blockquote>
 *	 override from _StoreLayer.name<br>
 * </blockquote>
 * @returns {string} -
 * @memberOf dojox.grid.enhanced.plugins.filter._FilterLayerMixin
*/
dojox.grid.enhanced.plugins.filter._FilterLayerMixin.prototype.name=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get/set/clear the filter definition<br>
 * </blockquote>
 * @param {_ConditionExpr|null)} [filter] null: clear filter definition
 * undefined: it's getter
 * @memberOf dojox.grid.enhanced.plugins.filter._FilterLayerMixin
*/
dojox.grid.enhanced.plugins.filter._FilterLayerMixin.prototype.filterDef=function(filter){};
/**
 * @class
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.filter.ServerSideFilterLayer} new instance
*/
dojox.grid.enhanced.plugins.filter.ServerSideFilterLayer=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 override from _ServerSideLayer.onCommandLoad<br>
 * </blockquote>
 * @param {(in)string} responce 
 * @param {(in|out)keywordArgs} userRequest 
 * @memberOf dojox.grid.enhanced.plugins.filter.ServerSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ServerSideFilterLayer.prototype.onCommandLoad=function(responce, userRequest){};
/**
 * <b>Summary:</b><blockquote>
 *	 See _FilterLayerMixin.filterDef<br>
 * </blockquote>
 * @param {(_ConditionExpr|null)} [filter] 
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.ServerSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ServerSideFilterLayer.prototype.filterDef=function(filter){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a client side filter layer on top of the data store,<br>
 *	 so any filter expression can be applied to the store.<br>
 * </blockquote>
 * @class
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer} new instance
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer=function(args){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer._items=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Set the user defined way to retrieve data from store.<br>
 * </blockquote>
 * @param {function} getter function(datarow, colArg, rowIndex, store);
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype.setGetter=function(getter){};
/**
 * @param {mixed} mapping 
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype.onRowMappingChange=function(mapping){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear all the status information of this layer<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype.invalidate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See _FilterLayerMixin.filterDef<br>
 * </blockquote>
 * @param {(_ConditionExpr|null)} [filter] 
 * @returns {_ConditionExpr} -
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype.filterDef=function(filter){};
/**
 * <b>Summary:</b><blockquote>
 *	 The get/set function for fetchAll.<br>
 * </blockquote>
 * @param {bool} [toFetchAll] boolean If provided, it's a set function, otherwise it's a get function.
 * 
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype.fetchAllOnFirstFilter=function(toFetchAll){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is used to replace the user's onFetchBegin in store.fetch<br>
 * </blockquote>
 * @param {Integer} size 
 * @param {request} req object
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype._onFetchBegin=function(size, req){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether all the items in the original store have been fetched.<br>
 * </blockquote>
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype._hasReachedStoreEnd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Implement _StoreLayer._fetch<br>
 * </blockquote>
 * @param {mixed} userRequest 
 * @param {dojo.data.api.Request} filterRequest The actual request used in store.fetch.
 * This function is called recursively to fill the result store items<br>
 * until the user specified item count is reached. Only in recursive calls,<br>
 * this parameter is valid.
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype._fetch=function(userRequest, filterRequest){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use the filter expression to filter items. Survived items are stored in this._items.<br>
 *	 The given items start from &amp;quot;startIdx&amp;quot; in the original store.<br>
 * </blockquote>
 * @param {Array} items 
 * @param {Integer} startIdx 
 * @param {object} userRequest 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype._doFilter=function(items, startIdx, userRequest){};
/**
 * @param {mixed} datarow 
 * @param {mixed} colName 
 * @param {mixed} rowIndex 
 * @param {mixed} store 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype._defaultGetter=function(datarow, colName, rowIndex, store){};
/**
 * <b>Summary:</b><blockquote>
 *	 Logically, the user's query is completed here, i.e., all the filtered results are ready.<br>
 *	 (or their index mappings are ready)<br>
 * </blockquote>
 * @param {request} userRequest object
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype._completeQuery=function(userRequest){};
/**
 * <b>Summary:</b><blockquote>
 *	 Apply the filter to a row of data<br>
 * </blockquote>
 * @param {data} datarow item
 * @param {Integer} rowIndex 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype._applyFilter=function(datarow, rowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add data items to the cache. The insert point is at *filterStartIdx*<br>
 * </blockquote>
 * @param {Array} items Data items to add.
 * @param {Integer} filterStartIdx The start point to insert in the cache.
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer
*/
dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer.prototype._addCachedItems=function(items, filterStartIdx){};
/**
 * @class
 * @returns {dojox.grid.enhanced.plugins.filter.FilterStatusPane} new instance
*/
dojox.grid.enhanced.plugins.filter.FilterStatusPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create the status tip UI.<br>
 *	 <br>
 *	 <br>
 *	 -----------------Public Functions------------------------<br>
 *	 <br>
 *	 <br>
 *	 -----------------Private Functions---------------------------<br>
 * </blockquote>
 * @class
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.filter.FilterStatusTip} new instance
*/
dojox.grid.enhanced.plugins.filter.FilterStatusTip=function(args){};
/**
 * @param {int} pos_x 
 * @param {int} pos_y 
 * @param {mixed} columnIdx 
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterStatusTip
*/
dojox.grid.enhanced.plugins.filter.FilterStatusTip.prototype.showDialog=function(pos_x, pos_y, columnIdx){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterStatusTip
*/
dojox.grid.enhanced.plugins.filter.FilterStatusTip.prototype.destroy=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterStatusTip
*/
dojox.grid.enhanced.plugins.filter.FilterStatusTip.prototype.closeDialog=function(){};
/**
 * @param {mixed} columnIdx 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterStatusTip
*/
dojox.grid.enhanced.plugins.filter.FilterStatusTip.prototype._updateStatus=function(columnIdx){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterStatusTip
*/
dojox.grid.enhanced.plugins.filter.FilterStatusTip.prototype._modifyFilter=function(){};
/**
 * @param {object} c 
 * @param {int} rowIdx 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterStatusTip
*/
dojox.grid.enhanced.plugins.filter.FilterStatusTip.prototype._getCriteriaStr=function(c, rowIdx){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterStatusTip
*/
dojox.grid.enhanced.plugins.filter.FilterStatusTip.prototype._createStatusDetail=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.filter.FilterStatusTip
*/
dojox.grid.enhanced.plugins.filter.FilterStatusTip.prototype._addButtonForRules=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provide filter functionality for grid.<br>
 *	 <br>
 *	 Acceptable plugin parameters:<br>
 *	 1. itemsName: string<br>
 *	 the name shown on the filter bar.<br>
 *	 2. statusTipTimeout: number<br>
 *	 when does the status tip show.<br>
 *	 3. ruleCount: number<br>
 *	 default to 3, should not change to more. The Claro theme limits it.<br>
 *	 4. disabledConditions: object<br>
 *	 If you don't need all of the conditions provided for a data type,<br>
 *	 you can explicitly declare them here:<br>
 *	 e.g.: disabledConditions: {string: [&amp;quot;contains&amp;quot;, &amp;quot;is&amp;quot;], number: [&amp;quot;equalto&amp;quot;], ...}<br>
 *	 5. isServerSide: boolean<br>
 *	 Whether to use server side filtering. Default to false.<br>
 *	 6. isStateful: boolean<br>
 *	 If isServerSide is true, set the server side filter to be stateful or not. default to false.<br>
 *	 7. url: string<br>
 *	 If using stateful, this is the url to send commands. default to store.url.<br>
 *	 8. ruleCountToConfirmClearFilter: Integer | null |Infinity<br>
 *	 If the filter rule count is larger than or equal to this value, then a confirm dialog will show when clearing filter.<br>
 *	 If set to less than 1 or null, then always show the confirm dialog.<br>
 *	 If set to Infinity, then never show the confirm dialog.<br>
 *	 Default value is 2.<br>
 *	 <br>
 *	 Acceptable cell parameters defined in layout:<br>
 *	 1. filterable: boolean<br>
 *	 The column is not filterable only when this is set to false explicitly.<br>
 *	 2. datatype: string<br>
 *	 The data type of this column. Can be &amp;quot;string&amp;quot;, &amp;quot;number&amp;quot;, &amp;quot;date&amp;quot;, &amp;quot;time&amp;quot;, &amp;quot;boolean&amp;quot;.<br>
 *	 Default to &amp;quot;string&amp;quot;.<br>
 *	 3. autoComplete: boolean<br>
 *	 If need auto-complete in the ComboBox for String type, set this to true.<br>
 *	 4. dataTypeArgs: object<br>
 *	 Some arguments helping convert store data to something the filter UI understands.<br>
 *	 Different data type arguments can be provided to different data types.<br>
 *	 For date/time, this is a dojo.date.locale.__FormatOptions, so the DataTimeBox can understand the store data.<br>
 *	 For boolean, this object contains:<br>
 *	 trueLabel: string<br>
 *	 A label to display in the filter definition dialog for true value. Default to &amp;quot;True&amp;quot;.<br>
 *	 falseLable: string<br>
 *	 A label to display in the filter definition dialog for false value. Default to &amp;quot;False&amp;quot;.<br>
 *	 5. disabledConditions: object<br>
 *	 If you don't need all of the conditions provided by the filter UI on this column, you can explicitly say it out here.<br>
 *	 e.g.: disabledConditions: [&amp;quot;contains&amp;quot;, &amp;quot;is&amp;quot;]<br>
 *	 This will disable the &amp;quot;contains&amp;quot; condition for this column, if this column is of string type.<br>
 *	 For full set of conditions, please refer to dojox.grid.enhanced.plugins.filter.FilterDefDialog._setupData.<br>
 * </blockquote>
 * @class
 * @param {mixed} grid 
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.Filter} new instance
 * @example
 * 	&lt;div dojoType="dojox.grid.EnhancedGrid" plugins="{GridFilter: true}" ...&gt;&lt;/div&gt;
 * 	or provide some parameters:
 * 	&lt;div dojoType="dojox.grid.EnhancedGrid" plugins="{GridFilter: {itemsName: 'songs'}}" ...&gt;&lt;/div&gt;
 * 	Customize columns for filter:
 * 	var layout = [
 * 		...
 * 		//define a column to be un-filterable in layout/structure
 * 		{field: "Genre", filterable: false, ...}
 * 		//define a column of type string and supports autoComplete when you type in filter conditions.
 * 		{field: "Writer", datatype: "string", autoCommplete: true, ...}
 * 		//define a column of type date and the data in store has format: "yyyy/M/d"
 * 		{field: "Publish Date", datatype: "date", dataTypeArgs: {datePattern: "yyyy/M/d"}, ...}
 * 		//disable some conditions for a column
 * 		{field: "Track", disabledConditions: ["equalto","notequalto"], ...}
 * 		...
 * 	];
*/
dojox.grid.enhanced.plugins.Filter=function(grid, args){};
/**
 * @param {mixed} store 
 * @memberOf dojox.grid.enhanced.plugins.Filter
*/
dojox.grid.enhanced.plugins.Filter.prototype.onSetStore=function(store){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Filter
*/
dojox.grid.enhanced.plugins.Filter.prototype.destroy=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Filter
*/
dojox.grid.enhanced.plugins.Filter.prototype._wrapStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Define the grid-specific way to get data from a row.<br>
 *	 Argument &amp;quot;cell&amp;quot; is provided by FilterDefDialog when defining filter expressions.<br>
 *	 Argument &amp;quot;rowIndex&amp;quot; is provided by FilterLayer when checking a row.<br>
 *	 FilterLayer also provides a forth argument: &amp;quot;store&amp;quot;, which is grid.store,<br>
 *	 but we don't need it here.<br>
 * </blockquote>
 * @param {data} datarow item
 * @param {cell} cell 
 * @param {int} rowIndex 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Filter
*/
dojox.grid.enhanced.plugins.Filter.prototype._clientFilterGetter=function(datarow, cell, rowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 A special source that can accept grid contents.<br>
 *	 Only for non-grid widgets or domNodes.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.GridSource} new instance
*/
dojox.grid.enhanced.plugins.GridSource=function(){};
/**
 * @param {mixed} grid 
 * @param {mixed} rowIndexes 
 * @memberOf dojox.grid.enhanced.plugins.GridSource
*/
dojox.grid.enhanced.plugins.GridSource.prototype.onDropGridRows=function(grid, rowIndexes){};
/**
 * @param {mixed} grid 
 * @param {mixed} colIndexes 
 * @memberOf dojox.grid.enhanced.plugins.GridSource
*/
dojox.grid.enhanced.plugins.GridSource.prototype.onDropGridColumns=function(grid, colIndexes){};
/**
 * @param {mixed} grid 
 * @param {mixed} leftTopCell 
 * @param {mixed} rightBottomCell 
 * @memberOf dojox.grid.enhanced.plugins.GridSource
*/
dojox.grid.enhanced.plugins.GridSource.prototype.onDropGridCells=function(grid, leftTopCell, rightBottomCell){};
/**
 * @param {mixed} source 
 * @param {mixed} nodes 
 * @param {mixed} copy 
 * @memberOf dojox.grid.enhanced.plugins.GridSource
*/
dojox.grid.enhanced.plugins.GridSource.prototype.onDropExternal=function(source, nodes, copy){};
/**
 * @memberOf dojox.grid.enhanced.plugins.GridSource
*/
dojox.grid.enhanced.plugins.GridSource.prototype.onDraggingOver=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.GridSource
*/
dojox.grid.enhanced.plugins.GridSource.prototype.onDraggingOut=function(){};
/**
 * @param {mixed} params 
 * @param {mixed} node 
 * @memberOf dojox.grid.enhanced.plugins.GridSource
*/
dojox.grid.enhanced.plugins.GridSource.prototype.markupFactory=function(params, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fill node innerHTML for dnd grid rows.<br>
 *	 sample code:<br>
 *	 var cells = grid.layout.cells;<br>
 *	 var store = grid.store;<br>
 *	 var cache = grid._by_idx;<br>
 *	 var res = &amp;quot;Grid Rows from &amp;quot; + grid.id + &amp;quot;:&amp;lt;br/&amp;gt;&amp;quot;;<br>
 *	 for(var i = 0; i &amp;lt; rowIndexes.length; ++i){<br>
 *	 var r = rowIndexes[i];<br>
 *	 res += &amp;quot;Row &amp;quot; + r + &amp;quot;: &amp;quot;;<br>
 *	 for(var j = 0; j &amp;lt; cells.length; ++j){<br>
 *	 if(!cells[j].hidden){<br>
 *	 res += store.getValue(cache[r].item, cells[j].field) + &amp;quot;, &amp;quot;;<br>
 *	 }<br>
 *	 }<br>
 *	 res = res.substring(0, res.length - 2) + &amp;quot;;&amp;lt;br/&amp;gt;&amp;quot;;<br>
 *	 }<br>
 *	 return res;<br>
 * </blockquote>
 * @param {mixed} grid 
 * @param {mixed} rowIndexes 
 * @memberOf dojox.grid.enhanced.plugins.GridSource
*/
dojox.grid.enhanced.plugins.GridSource.prototype.getRowContent=function(grid, rowIndexes){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fill node innerHTML for dnd grid columns.<br>
 *	 sample code:<br>
 *	 var cells = grid.layout.cells;<br>
 *	 var res = &amp;quot;Grid Columns from &amp;quot; + grid.id + &amp;quot;:&amp;quot;;<br>
 *	 for(var i = 0; i &amp;lt; colIndexes.length; ++i){<br>
 *	 var c = colIndexes[i];<br>
 *	 res += (cells[c].name || cells[c].field) + &amp;quot;, &amp;quot;;<br>
 *	 }<br>
 *	 return res.substring(0, res.length - 2);<br>
 * </blockquote>
 * @param {mixed} grid 
 * @param {mixed} colIndexes 
 * @memberOf dojox.grid.enhanced.plugins.GridSource
*/
dojox.grid.enhanced.plugins.GridSource.prototype.getColumnContent=function(grid, colIndexes){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fill node innerHTML for dnd grid cells.<br>
 *	 sample code:<br>
 *	 var cells = grid.layout.cells;<br>
 *	 var store = grid.store;<br>
 *	 var cache = grid._by_idx;<br>
 *	 var res = &amp;quot;Grid Cells from &amp;quot; + grid.id + &amp;quot;:&amp;lt;br/&amp;gt;&amp;quot;;<br>
 *	 for(var r = leftTopCell.row; r &amp;lt;= rightBottomCell.row; ++r){<br>
 *	 for(var c = leftTopCell.col; c &amp;lt;= rightBottomCell.col; ++c){<br>
 *	 res += store.getValue(cache[r].item, cells[c].field) + &amp;quot;, &amp;quot;;<br>
 *	 }<br>
 *	 res = res.substring(0, res.length - 2) + &amp;quot;;&amp;lt;br/&amp;gt;&amp;quot;;<br>
 *	 }<br>
 *	 return res;<br>
 * </blockquote>
 * @param {mixed} grid 
 * @param {mixed} leftTopCell 
 * @param {mixed} rightBottomCell 
 * @memberOf dojox.grid.enhanced.plugins.GridSource
*/
dojox.grid.enhanced.plugins.GridSource.prototype.getCellContent=function(grid, leftTopCell, rightBottomCell){};
/**
 * @param {mixed} source 
 * @param {mixed} nodes 
 * @memberOf dojox.grid.enhanced.plugins.GridSource
*/
dojox.grid.enhanced.plugins.GridSource.prototype.checkAcceptance=function(source, nodes){};
/**
 * <b>Summary:</b><blockquote>
 *	 Common attributes &amp;amp; functions for row selectors(Radio|CheckBox)<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.cells.RowSelector} new instance
*/
dojox.grid.cells.RowSelector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 toggle checked | unchecked state for given row<br>
 * </blockquote>
 * @param {Integer} index Row index
 * @param {Boolean} value True - checked | False - unchecked
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype.toggleRow=function(index, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid.cells._Widget<br>
 *	 Simply return, no action<br>
 * </blockquote>
 * @see dojox.grid.cells
 * @param {mixed} rowIndex 
 * @param {mixed} inValue 
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype.setValue=function(rowIndex, inValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 toggle disabled | enabled state for given row<br>
 *	 idx: Integer<br>
 *	 Row index<br>
 * </blockquote>
 * @param {mixed} index 
 * @param {Boolean} disabled True - disabled | False - enabled
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype.setDisabled=function(index, disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid.cells._Widget<br>
 * </blockquote>
 * @see dojox.grid.cells
 * @param {mixed} rowIndex 
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype.getValue=function(rowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see dojox.grid.cells._Widget<br>
 * </blockquote>
 * @see dojox.grid.cells
 * @param {mixed} data 
 * @param {mixed} rowIndex 
 * @param {mixed} scope 
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype.formatter=function(data, rowIndex, scope){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set focus to given row<br>
 * </blockquote>
 * @param {Integer} rowIndex Target row
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype.focus=function(rowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if one row is disabled<br>
 * </blockquote>
 * @param {mixed} index 
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype.disabled=function(index){};
/**
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Change css styles for disabled | enabled<br>
 * </blockquote>
 * @param {mixed} index 
 * @param {mixed} disabled 
 * @private
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype._toggleDisabledStyle=function(index, disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Change css styles for checked | unchecked<br>
 * </blockquote>
 * @param {mixed} index 
 * @param {mixed} value 
 * @private
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype._toggleCheckedStyle=function(index, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Explicitly empty map cache when a page destroyed<br>
 *	 See dojox.grid._Scroller.invalidatePageNode()<br>
 * </blockquote>
 * @param {Integer} pageIndex Index of destroyed page
 * @private
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype._pageDestroyed=function(pageIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear cache when row is re-built.<br>
 * </blockquote>
 * @param {mixed} index 
 * @private
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype._onUpdateRow=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Triggered when a row is selected<br>
 * </blockquote>
 * @param {mixed} index 
 * @private
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype._onSelected=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Triggered when a row is deselected<br>
 * </blockquote>
 * @param {mixed} index 
 * @private
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype._onDeselected=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 When mouse click on the selector cell, select/deselect the row.<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype._onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use grid's native selection<br>
 * </blockquote>
 * @param {mixed} index 
 * @param {mixed} value 
 * @private
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype._nativeSelect=function(index, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find selector for given row caching it if 1st time found<br>
 * </blockquote>
 * @param {mixed} index 
 * @private
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype._getSelector=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set focus to the ending grid cell(rowIndex,cellIndex) when swipe selection finished<br>
 * </blockquote>
 * @param {Integer} rowIndex Row index
 * @param {Integer} cellIndex Column index
 * @private
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype._focusEndingCell=function(rowIndex, cellIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event handler for key up event<br>
 *	 - from dojox.grid.enhanced._Events.dokeyup()<br>
 * </blockquote>
 * @param {Event} e Key up event
 * @private
 * @memberOf dojox.grid.cells.RowSelector
*/
dojox.grid.cells.RowSelector.prototype._dokeyup=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 IndirectSelection cell(column) for single selection mode, using styles of dijit.form.RadioButton<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.cells.SingleRowSelector} new instance
*/
dojox.grid.cells.SingleRowSelector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select the target row<br>
 * </blockquote>
 * @param {Event} e Event fired on the target row
 * @private
 * @memberOf dojox.grid.cells.SingleRowSelector
*/
dojox.grid.cells.SingleRowSelector.prototype._selectRow=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Indirect selection cell for multiple or extended mode, using dijit.form.CheckBox<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.cells.MultipleRowSelector} new instance
*/
dojox.grid.cells.MultipleRowSelector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Toggle select all|deselect all<br>
 * </blockquote>
 * @param {Boolean} checked True - select all, False - deselect all
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype.toggleAllSelection=function(checked){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if during a swipe selection<br>
 *	 return: Boolean<br>
 *	 Whether in swipe selection<br>
 * </blockquote>
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype.inSwipeSelection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} rowIndex 
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype.getValue=function(rowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update row selections, fired during a swipe selection<br>
 * </blockquote>
 * @param {Event} e Event of the current row,
 * @param {Integer} delta Row index delta, used for swipe selection via Shift + Arrow key
 * 0: not via key, -1 : Shift +  Up, 1 : Shift + Down
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._updateSelection=function(e, delta){};
/**
 * <b>Summary:</b><blockquote>
 *	 Toggle state for head selector<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._toggletHeader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} index 
 * @param {mixed} disabled 
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._toggleDisabledStyle=function(index, disabled){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update row selections, fired when Shift + Cursor is used for swipe selection<br>
 *	 See dojox.grid.enhanced._Events.onKeyDown<br>
 * </blockquote>
 * @param {Integer} rowOffset Row offset, used for swipe selection via Shift + Cursor
 * -1 : Shift +  Up, 1 : Shift + Down
 * @param {mixed} colOffset 
 * @param {Event} e Event of the current row,
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._swipeByKey=function(rowOffset, colOffset, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize parameters to start a new swipe selection<br>
 * </blockquote>
 * @param {Integer} rowIndex Index of the start row
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._startSelection=function(rowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select the target row or range or rows<br>
 * </blockquote>
 * @param {Event} e Event fired on the target row
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._selectRow=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update header selector anytime selection changed<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._onSelectionChanged=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse moves over a data row(outside of this column).<br>
 *	 - from dojox.grid.enhanced._Events.onRowMouseOver()<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._onRowMouseOver=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._onMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} index 
 * @param {mixed} value 
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._nativeSelect=function(index, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reset parameters to end a swipe selection<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._finishSelect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event handler for mouse up event - from dojo.doc.domouseup()<br>
 * </blockquote>
 * @param {Event} e Mouse up event
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._domouseup=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event handler for key up event<br>
 *	 - from dojox.grid.enhanced._Events.dokeyup()<br>
 * </blockquote>
 * @param {Event} e Key up event
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._dokeyup=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add selector in column header for selecting|deselecting all<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.cells.MultipleRowSelector
*/
dojox.grid.cells.MultipleRowSelector.prototype._addHeaderSelector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A handy way for adding check boxe/radio button for rows, and selecting rows by swiping(or keyboard)<br>
 * </blockquote>
 * For better rendering performance, div(images) are used to simulate radio button|check boxes
 * @class
 * @returns {dojox.grid.enhanced.plugins.IndirectSelection} new instance
 * @example
 * &lt;div dojoType="dojox.grid.EnhancedGrid" plugins="{indirectSelection: true}" ...&gt;&lt;/div&gt;
 * or &lt;div dojoType="dojox.grid.EnhancedGrid" plugins="{indirectSelection: {name: 'xxx', width:'30px', styles:'text-align: center;'}}" ...&gt;&lt;/div&gt;
*/
dojox.grid.enhanced.plugins.IndirectSelection=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.IndirectSelection
*/
dojox.grid.enhanced.plugins.IndirectSelection.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add indirectSelection cell(mapped to a column of radio button|check boxes)<br>
 * </blockquote>
 * @param {mixed} option 
 * @memberOf dojox.grid.enhanced.plugins.IndirectSelection
*/
dojox.grid.enhanced.plugins.IndirectSelection.prototype.addRowSelectCell=function(option){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides context menu support, including header menu, row menu, cell menu and selected region menu<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins.Menu} new instance
 * @example
 * &lt;div dojoType="dojox.grid.EnhancedGrid"
 * plugins="{menus:{headerMenu:"headerMenuId", rowMenu:"rowMenuId", cellMenu:"cellMenuId",
 * selectedRegionMenu:"selectedRegionMenuId"}}" ...&gt;
 * &lt;/div&gt;
*/
dojox.grid.enhanced.plugins.Menu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show appropriate context menu<br>
 *	 Fired from dojox.grid.enhanced._Events.onRowContextMenu, 'this' scope - Grid<br>
 *	 TODO: test Shift-F10<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.grid.enhanced.plugins.Menu
*/
dojox.grid.enhanced.plugins.Menu.prototype.showMenu=function(e){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Menu
*/
dojox.grid.enhanced.plugins.Menu.prototype.onStartUp=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy all resources.<br>
 *	 _Grid.destroy() will unbind headerMenu<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.Menu
*/
dojox.grid.enhanced.plugins.Menu.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set row menu widget<br>
 * </blockquote>
 * @param {Widget(dijit.Menu)} menu 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Menu
*/
dojox.grid.enhanced.plugins.Menu.prototype._setSelectedRegionMenuAttr=function(menu){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set row menu widget<br>
 * </blockquote>
 * @param {Widget(dijit.Menu)} menu 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Menu
*/
dojox.grid.enhanced.plugins.Menu.prototype._setRowMenuAttr=function(menu){};
/**
 * <b>Summary:</b><blockquote>
 *	 Bind menus to Grid.<br>
 * </blockquote>
 * @param {Widget(dijit.Menu)} menu 
 * @param {String} menuType 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Menu
*/
dojox.grid.enhanced.plugins.Menu.prototype._setMenuAttr=function(menu, menuType){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set cell menu widget<br>
 * </blockquote>
 * @param {Widget(dijit.Menu)} menu 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Menu
*/
dojox.grid.enhanced.plugins.Menu.prototype._setCellMenuAttr=function(menu){};
/**
 * @param {String} menuType 
 * @param {String} menu | Widget(dijit.Menu)
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Menu
*/
dojox.grid.enhanced.plugins.Menu.prototype._initMenu=function(menuType, menu){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetch the required menu widget(should already been created)<br>
 * </blockquote>
 * @param {String|Widget(dijit.Menu)} menu 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Menu
*/
dojox.grid.enhanced.plugins.Menu.prototype._getMenuWidget=function(menu){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides nested sorting feature<br>
 * </blockquote>
 * A flexible way to control multiple column sorting, including<br>
 * 1. Set default sorting order<br>
 * 2. Disable sorting for certain columns<br>
 * 3. Set sorting order dynamically with JS API
 * @class
 * @returns {dojox.grid.enhanced.plugins.NestedSorting} new instance
 * @example
 * 	&lt;script type="text/javascript"&gt;
 * 		var grid = new dojox.grid.EnhancedGrid({plugins : {nestedSorting: true}},
 * 				   sortFields: [{attribute: 'col4', descending: false},...],//set default sorting order
 * 				   canSort: function(index, field){ return true},//disable sorting for a column
 * 				   ... }, dojo.byId('gridDiv'));
 * 		grid.startup();
 * 		//set new sorting order
 * 		grid.setSortIndex([{attribute: 'col3', descending: true},...])
 * 	&lt;/script&gt;
*/
dojox.grid.enhanced.plugins.NestedSorting=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting._sortDef=[];
/**
 * @namespace
 * @private
*/
dojox.grid.enhanced.plugins.NestedSorting._a11yText={};
/**
 * <b>Summary:</b><blockquote>
 *	 Set sorting data for a column.<br>
 * </blockquote>
 * @param {mixed} cellIdx 
 * @param {mixed} attr 
 * @param {mixed} value 
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype.setSortData=function(cellIdx, attr, value){};
/**
 * @param {mixed} cellIdx 
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype.removeSortData=function(cellIdx){};
/**
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype.onStartUp=function(){};
/**
 * @param {mixed} cellIndex 
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype.isDesc=function(cellIndex){};
/**
 * @param {mixed} cellIndex 
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype.isAsc=function(cellIndex){};
/**
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype.initCookieHandler=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see DataGrid.getSortProps()<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype.getSortProps=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype.destroy=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype.clearSort=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._updateSortDef=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the column header UI based on current sorting state.<br>
 *	 Show indicator of the sorting order of the column, no order no indicator<br>
 * </blockquote>
 * @param {mixed} node 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._updateHeaderNodeUI=function(node){};
/**
 * @param {mixed} inIndex 
 * @param {mixed} inAsc 
 * @param {mixed} noRefresh 
 * @private
 * @returns {header click from base DataGrid} -
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._setGridSortIndex=function(inIndex, inAsc, noRefresh){};
/**
 * @param {mixed} grid 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._saveNestedSortingProps=function(grid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Prepare the single sort, also called main sort, this will clear any existing sorting and just sort the grid by current column.<br>
 * </blockquote>
 * @param {mixed} cellIdx 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._prepareSingleSort=function(cellIdx){};
/**
 * @param {mixed} cellIdx 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._prepareNestedSort=function(cellIdx){};
/**
 * <b>Summary:</b><blockquote>
 *	 If the click target is single sort button, do single sort.<br>
 *	 Else if the click target is nested sort button, do nest sort.<br>
 *	 Otherwise return.<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._onSortBtnClick=function(e){};
/**
 * @param {mixed} rowStep 
 * @param {mixed} colStep 
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._onMove=function(rowStep, colStep, e){};
/**
 * @param {mixed} e 
 * @param {mixed} isBubble 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._onKeyDown=function(e, isBubble){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._onHeaderCellMouseOver=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._onHeaderCellMouseOut=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._onHeaderCellClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update nested sorting after column moved<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} mapping 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._onColumnDnD=function(type, mapping){};
/**
 * @param {mixed} sortInfo 
 * @param {mixed} grid 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._loadNestedSortingProps=function(sortInfo, grid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initiate sorting<br>
 * </blockquote>
 * @param {mixed} postSort 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._initSort=function(postSort){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initiate sort for each header cell node<br>
 * </blockquote>
 * @param {mixed} node 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._initHeaderNode=function(node){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._initFocus=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._getRegions=function(){};
/**
 * @param {mixed} region 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._getRegionView=function(region){};
/**
 * @param {mixed} region 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._getRegionHeader=function(region){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._getCurrentRegion=function(){};
/**
 * @param {mixed} node 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._getCellByNode=function(node){};
/**
 * @param {mixed} region 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._focusRegion=function(region){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see _FocusManager.focusHeader()<br>
 *	 delayed: Boolean<br>
 *	 If called from &amp;quot;this.focus._delayedHeaderFocus()&amp;quot;<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._focusHeader=function(e){};
/**
 * @param {mixed} cellIdx 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._doSort=function(cellIdx){};
/**
 * @param {mixed} region 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._blurRegion=function(region){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.NestedSorting
*/
dojox.grid.enhanced.plugins.NestedSorting.prototype._blurHeader=function(e){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.NestedSorting.grid={};
/**
*/
dojox.grid.enhanced.plugins.NestedSorting.grid.setSortInfo=function(){};
/**
*/
dojox.grid.enhanced.plugins.NestedSorting.grid.getSortIndex=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.pagination={};
/**
*/
dojox.grid.enhanced.plugins.pagination._GotoPagePane=function(){};
/**
 * @param {mixed} plugin 
*/
dojox.grid.enhanced.plugins.pagination._GotoPageDialog=function(plugin){};
/**
 * @param {mixed} paginator 
*/
dojox.grid.enhanced.plugins.pagination._Focus=function(paginator){};
/**
 * @class
 * @returns {dojox.grid.enhanced.plugins.pagination._GotoPagePane} new instance
*/
dojox.grid.enhanced.plugins.pagination._GotoPagePane=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.pagination._GotoPagePane
*/
dojox.grid.enhanced.plugins.pagination._GotoPagePane.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.pagination._GotoPagePane
*/
dojox.grid.enhanced.plugins.pagination._GotoPagePane.prototype.postCreate=function(){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.pagination._GotoPagePane
*/
dojox.grid.enhanced.plugins.pagination._GotoPagePane.prototype._onKey=function(evt){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.pagination._GotoPagePane
*/
dojox.grid.enhanced.plugins.pagination._GotoPagePane.prototype._onConfirm=function(evt){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.pagination._GotoPagePane
*/
dojox.grid.enhanced.plugins.pagination._GotoPagePane.prototype._onCancel=function(evt){};
/**
 * @class
 * @param {mixed} plugin 
 * @returns {dojox.grid.enhanced.plugins.pagination._GotoPageDialog} new instance
*/
dojox.grid.enhanced.plugins.pagination._GotoPageDialog=function(plugin){};
/**
 * @memberOf dojox.grid.enhanced.plugins.pagination._GotoPageDialog
*/
dojox.grid.enhanced.plugins.pagination._GotoPageDialog.prototype.showDialog=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.pagination._GotoPageDialog
*/
dojox.grid.enhanced.plugins.pagination._GotoPageDialog.prototype.destroy=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.pagination._GotoPageDialog
*/
dojox.grid.enhanced.plugins.pagination._GotoPageDialog.prototype._updatePageCount=function(){};
/**
 * @class
 * @param {mixed} plugin 
 * @returns {dojox.grid.enhanced.plugins._ForcedPageStoreLayer} new instance
*/
dojox.grid.enhanced.plugins._ForcedPageStoreLayer=function(plugin){};
/**
 * @param {mixed} request 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._ForcedPageStoreLayer
*/
dojox.grid.enhanced.plugins._ForcedPageStoreLayer.prototype._fetch=function(request){};
/**
 * @class
 * @param {mixed} paginator 
 * @returns {dojox.grid.enhanced.plugins.pagination._Focus} new instance
*/
dojox.grid.enhanced.plugins.pagination._Focus=function(paginator){};
/**
 * @param {mixed} rowDelta 
 * @param {mixed} colDelta 
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.pagination._Focus
*/
dojox.grid.enhanced.plugins.pagination._Focus.prototype._onMove=function(rowDelta, colDelta, evt){};
/**
 * @param {mixed} evt 
 * @param {mixed} step 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.pagination._Focus
*/
dojox.grid.enhanced.plugins.pagination._Focus.prototype._onFocus=function(evt, step){};
/**
 * @param {mixed} evt 
 * @param {mixed} step 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.pagination._Focus
*/
dojox.grid.enhanced.plugins.pagination._Focus.prototype._onBlur=function(evt, step){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.pagination._Focus
*/
dojox.grid.enhanced.plugins.pagination._Focus.prototype._onActive=function(e){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.pagination._Focus
*/
dojox.grid.enhanced.plugins.pagination._Focus.prototype._moveFocus=function(){};
/**
 * @param {mixed} node 
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.pagination._Focus
*/
dojox.grid.enhanced.plugins.pagination._Focus.prototype._focus=function(node, evt){};
/**
 * @class
 * @param {mixed} params 
 * @returns {dojox.grid.enhanced.plugins._Paginator} new instance
*/
dojox.grid.enhanced.plugins._Paginator=function(params){};
/**
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype.postCreate=function(){};
/**
 * @param {Event} evt 
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype.onSwitchPageSize=function(evt){};
/**
 * @param {Event} evt 
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype.onShowGotoPageDialog=function(evt){};
/**
 * @param {Event} evt 
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype.onPageStep=function(evt){};
/**
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the switch nodes style<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._updateSwitchNodesStyle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update &amp;quot;items per page&amp;quot; information.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._updateSizeSwitch=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the page step nodes<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._updatePageStepper=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the style of the page step nodes<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._updatePageStepNodesStyle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create/destroy the goto page button<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._updateGotoButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update size information.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._updateDescription=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to update paging information and update<br>
 *	 pagination bar display.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._update=function(){};
/**
 * @param {mixed} top 
 * @param {mixed} width 
 * @param {mixed} height 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._styleMsgNode=function(top, width, height){};
/**
 * @param {mixed} flag 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._showGotoButton=function(flag){};
/**
 * <b>Summary:</b><blockquote>
 *	 The page step nodes might be changed when fetch data, we need to<br>
 *	 update/reset them<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._resetPageStepNodes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function of resize grid height to place this pagination bar.<br>
 *	 Since the grid would be able to add other element in its domNode, we have<br>
 *	 change the grid view size to place the pagination bar.<br>
 *	 This function will resize the grid viewsNode height, scorllboxNode height<br>
 * </blockquote>
 * @param {mixed} changeSize 
 * @param {mixed} resultSize 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._resetGridHeight=function(changeSize, resultSize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to register pagination bar to focus manager.<br>
 * </blockquote>
 * @param {mixed} isTop 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._registerFocus=function(isTop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Place pagination bar to a position.<br>
 *	 There are two options, top of the grid, bottom of the grid.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._placeSelf=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the goto page dialog<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._openGotopageDialog=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 The handler of switch the page size<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._onSwitchPageSize=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 The handler jump page event<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._onPageStep=function(e){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._getStepPageSize=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._getStartPage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create the previous/next/first/last button<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._createWardBtns=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The function to create the size switch nodes<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._createSizeSwitchNodes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create the page step nodes if they do not exist<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins._Paginator
*/
dojox.grid.enhanced.plugins._Paginator.prototype._createPageStepNodes=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins._Paginator.grid={};
/**
 * @param {mixed} changeSize 
 * @param {mixed} resultSize 
 * @memberOf dojox.grid.enhanced.plugins._Paginator.grid
*/
dojox.grid.enhanced.plugins._Paginator.grid.prototype.resize=function(changeSize, resultSize){};
/**
 * <b>Summary:</b><blockquote>
 *	 The typical pagination way to deal with huge dataset<br>
 *	 an alternative for the default virtual scrolling manner.<br>
 * </blockquote>
 * boolean<br>
 * Whether the description information will be displayed, true by default.
 * @class
 * @returns {dojox.grid.enhanced.plugins.Pagination} new instance
*/
dojox.grid.enhanced.plugins.Pagination=function(){};
/**
 * @namespace
 * @private
*/
dojox.grid.enhanced.plugins.Pagination._paginator={};
/**
 * <b>Summary:</b><blockquote>
 *	 For show/hide the go to page button dynamically<br>
 * </blockquote>
 * @param {boolean} flag Show the go to page button when flag is true, otherwise hide it
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.showGotoPageButton=function(flag){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override the grid.scrollToRow(), could jump to the right page<br>
 *	 and scroll to the specific row<br>
 * </blockquote>
 * @param {integer} inRowIndex The row index
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.scrollToRow=function(inRowIndex){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.removeSelectedRows=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Go to the previous page.<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.prevPage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Go to the next page.<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.nextPage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Go to the last page<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.lastPage=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.init=function(){};
/**
 * @param {mixed} page 
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.gotoPage=function(page){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.gotoLastPage=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.gotoFirstPage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for get total row count<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.getTotalRowCount=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get total page number<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.getTotalPageNum=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Go to the first page<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.firstPage=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Change the size of current page or return the current page size.<br>
 * </blockquote>
 * @param {Integer} size || null
 * An integer identifying the number of rows per page. If the size<br>
 * is an Infinity, all rows will be displayed; if an invalid value pssed<br>
 * in, the current page size will be returned.<br>
 * return<br>
 * Current size of items per page.
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.currentPageSize=function(size){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shift to the given page, return current page number. If there<br>
 *	 is no valid page was passed in, just return current page num.<br>
 * </blockquote>
 * @param {Integer} page The page to go to, starting at 1.
 * return:<br>
 * Current page number
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.currentPage=function(page){};
/**
 * @param {mixed} size 
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype.changePageSize=function(size){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype._regApis=function(){};
/**
 * @param {mixed} item 
 * @param {mixed} parentInfo 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype._onNew=function(item, parentInfo){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype._onDelete=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Pagination
*/
dojox.grid.enhanced.plugins.Pagination.prototype._initOptions=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provide printGrid function to the grid.<br>
 * </blockquote>
 * @class
 * @param {mixed} grid 
 * @returns {dojox.grid.enhanced.plugins.Printer} new instance
 * @example
 * 	dojo.require("dojox.grid.enhanced.plugins.Printer");
 * 	dijit.byId("grid1").printGrid("my grid",					//A title for the grid,optional
 * 								["cssfile1.css","cssfile2.css"],//An array of css files to decorate the printed gird,optional
 * 								{table:"border='border'"}		//tagName:"attrbuteList" pairs, optional,
 * 																//control the html tags in the generated html
 * 	);
*/
dojox.grid.enhanced.plugins.Printer=function(grid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Print selected data. All other features are the same as printGrid.<br>
 *	 For meaning of arguments see function *printGrid*<br>
 * </blockquote>
 * @param {__printArgs} [args] Arguments for print.
 * @memberOf dojox.grid.enhanced.plugins.Printer
*/
dojox.grid.enhanced.plugins.Printer.prototype.printSelected=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Print all the data in the grid, using title as a title,<br>
 *	 decorating generated html by cssFiles,<br>
 *	 using tagName:&amp;quot;attrbuteList&amp;quot; pairs(writerArgs) to control html tags<br>
 *	 in the generated html string.<br>
 * </blockquote>
 * @param {__printArgs} [args] Arguments for print.
 * @memberOf dojox.grid.enhanced.plugins.Printer
*/
dojox.grid.enhanced.plugins.Printer.prototype.printGrid=function(args){};
/**
 * @param {mixed} doc 
 * @memberOf dojox.grid.enhanced.plugins.Printer
*/
dojox.grid.enhanced.plugins.Printer.prototype.normalizeRowHeight=function(doc){};
/**
 * <b>Summary:</b><blockquote>
 *	 Export to HTML string, but do NOT print.<br>
 *	 Users can use this to implement print preview.<br>
 *	 For meaning of the 1st-3rd arguments see function *printGrid*.<br>
 * </blockquote>
 * @param {__printArgs} [args] Arguments for print.
 * @param {function(string)} onExported call back function
 * @memberOf dojox.grid.enhanced.plugins.Printer
*/
dojox.grid.enhanced.plugins.Printer.prototype.exportToHTML=function(args, onExported){};
/**
 * <b>Summary:</b><blockquote>
 *	 Export selected rows to HTML string, but do NOT print.<br>
 *	 Users can use this to implement print preview.<br>
 *	 For meaning of arguments see function *printGrid*<br>
 * </blockquote>
 * @param {__printArgs} [args] Arguments for print.
 * @param {mixed} onExported 
 * @memberOf dojox.grid.enhanced.plugins.Printer
*/
dojox.grid.enhanced.plugins.Printer.prototype.exportSelectedToHTML=function(args, onExported){};
/**
 * <b>Summary:</b><blockquote>
 *	 Put title, cssFiles, and body_content together into an HTML string.<br>
 * </blockquote>
 * @param {string} title String A title for the html page.
 * @param {Array} cssFiles css file pathes.
 * @param {string} body_content String Content to print, not including &lt;head&gt;&lt;/head&gt; part and &lt;html&gt; tags
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Printer
*/
dojox.grid.enhanced.plugins.Printer.prototype._wrapHTML=function(title, cssFiles, body_content){};
/**
 * <b>Summary:</b><blockquote>
 *	 Do the print job.<br>
 * </blockquote>
 * @param {string} htmlStr String The html content string to be printed.
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Printer
*/
dojox.grid.enhanced.plugins.Printer.prototype._print=function(htmlStr){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Printer
*/
dojox.grid.enhanced.plugins.Printer.prototype._mixinGrid=function(){};
/**
 * @param {mixed} cssFiles 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Printer
*/
dojox.grid.enhanced.plugins.Printer.prototype._loadCSSFiles=function(cssFiles){};
/**
 * @param {mixed} args 
 * @private
 * @returns {Object} -
 * @memberOf dojox.grid.enhanced.plugins.Printer
*/
dojox.grid.enhanced.plugins.Printer.prototype._formalizeArgs=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides a set of method to re-arrange the structure of grid.<br>
 * </blockquote>
 * @class
 * @param {mixed} grid 
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.Rearrange} new instance
*/
dojox.grid.enhanced.plugins.Rearrange=function(grid, args){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.Rearrange.args={};
/**
 * @param {mixed} args 
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype.setArgs=function(args){};
/**
 * @param {mixed} rowsToRemove 
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype.removeRows=function(rowsToRemove){};
/**
 * @param {mixed} store 
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype.onSetStore=function(store){};
/**
 * <b>Summary:</b><blockquote>
 *	 Move a set of rows to a given position<br>
 *	 tag:<br>
 *	 public<br>
 * </blockquote>
 * @param {Integer[]} rowsToMove Array of row indexes.
 * @param {Integer} targetPos The target position
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype.moveRows=function(rowsToMove, targetPos){};
/**
 * <b>Summary:</b><blockquote>
 *	 Move a set of columns to a given position.<br>
 *	 tag:<br>
 *	 public<br>
 * </blockquote>
 * @param {Integer[]} colsToMove Array of column indexes.
 * @param {Integer} targetPos The target position
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype.moveColumns=function(colsToMove, targetPos){};
/**
 * @param {mixed} cellsToMove 
 * @param {mixed} target 
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype.moveCells=function(cellsToMove, target){};
/**
 * @param {mixed} sourceGrid 
 * @param {mixed} rowsToMove 
 * @param {mixed} targetPos 
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype.insertRows=function(sourceGrid, rowsToMove, targetPos){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype.destroy=function(){};
/**
 * @param {mixed} cellsToMove 
 * @param {mixed} target 
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype.copyCells=function(cellsToMove, target){};
/**
 * @param {mixed} cellsToClear 
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype.clearCells=function(cellsToClear){};
/**
 * @param {mixed} sourceGrid 
 * @param {mixed} cellsToMove 
 * @param {mixed} target 
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype.changeCells=function(sourceGrid, cellsToMove, target){};
/**
 * @param {mixed} points 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype._hasIdentity=function(points){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find pages that contain visible rows<br>
 *	 return: Object<br>
 *	 {topPage: xx, bottomPage: xx, invalidPages: [xx,xx,...]}<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Rearrange
*/
dojox.grid.enhanced.plugins.Rearrange.prototype._getPageInfo=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Rearrange.args
*/
dojox.grid.enhanced.plugins.Rearrange.args.prototype.setIdentifierForNewItem=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.Rearrange.grid={};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.Rearrange.grid.scroller={};
/**
 * @class
 * @param {mixed} grid 
 * @returns {dojox.grid.enhanced.plugins._RowMapLayer} new instance
*/
dojox.grid.enhanced.plugins._RowMapLayer=function(grid){};
/**
 * @memberOf dojox.grid.enhanced.plugins._RowMapLayer
*/
dojox.grid.enhanced.plugins._RowMapLayer.prototype.uninitialize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remember the row mapping.<br>
 * </blockquote>
 * @param {Object} mapping keys are original rowIndexes, values are new rowIndexes.
 * @memberOf dojox.grid.enhanced.plugins._RowMapLayer
*/
dojox.grid.enhanced.plugins._RowMapLayer.prototype.setMapping=function(mapping){};
/**
 * @memberOf dojox.grid.enhanced.plugins._RowMapLayer
*/
dojox.grid.enhanced.plugins._RowMapLayer.prototype.clearMapping=function(){};
/**
 * @param {mixed} userRequest 
 * @param {mixed} rowArrays 
 * @param {mixed} index 
 * @param {mixed} result 
 * @param {mixed} map 
 * @param {mixed} oldOnComplete 
 * @param {mixed} start 
 * @param {mixed} count 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._RowMapLayer
*/
dojox.grid.enhanced.plugins._RowMapLayer.prototype._subFetch=function(userRequest, rowArrays, index, result, map, oldOnComplete, start, count){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._RowMapLayer
*/
dojox.grid.enhanced.plugins._RowMapLayer.prototype._onDelete=function(item){};
/**
 * @param {mixed} rows 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._RowMapLayer
*/
dojox.grid.enhanced.plugins._RowMapLayer.prototype._getRowArrays=function(rows){};
/**
 * @param {mixed} userRequest 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._RowMapLayer
*/
dojox.grid.enhanced.plugins._RowMapLayer.prototype._fetch=function(userRequest){};
/**
 * <b>Summary:</b><blockquote>
 *	 Search the grid using wildcard string or Regular Expression.<br>
 * </blockquote>
 * @class
 * @param {mixed} grid 
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.Search} new instance
*/
dojox.grid.enhanced.plugins.Search=function(grid, args){};
/**
 * @param {Object|RegExp|String} searchArgs 
 * @param {function(Integer,} onSearched item)
 * @memberOf dojox.grid.enhanced.plugins.Search
*/
dojox.grid.enhanced.plugins.Search.prototype.searchRow=function(searchArgs, onSearched){};
/**
 * @param {Object|RegExp} searchArgs 
 * @param {Integer} start 
 * @param {function(Integer,} onSearched item)
 * @param {Boolean} isGlobal 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Search
*/
dojox.grid.enhanced.plugins.Search.prototype._search=function(searchArgs, start, onSearched, isGlobal){};
/**
 * @param {store} item item
 * @param {Object|RegExp} searchArgs 
 * @param {Boolean} isGlobal 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Search
*/
dojox.grid.enhanced.plugins.Search.prototype._checkRow=function(item, searchArgs, isGlobal){};
/**
 * <b>Summary:</b><blockquote>
 *	 Preserve selections across various user actions.<br>
 * </blockquote>
 * Extends dojox.grid._SelectionPreserver adding a bit more support to make selection persistence working well<br>
 * with various EnhancedGrid features, e.g. filtering, nested sorting, pagination, select all etc.<br>
 * <br>
 * Precondition - Identifier(id) is required for store, as id is used for differentiating row items.<br>
 * Known issue - The preserved selections might be inaccurate if some unloaded rows are previously selected by range(e.g.SHIFT + click)
 * @class
 * @param {mixed} selection 
 * @returns {dojox.grid.enhanced.plugins._SelectionPreserver} new instance
 * @example
 * 	//To turn on this - set 'keepSelection' attribute to true
 * 	&lt;div dojoType="dojox.grid.EnhancedGrid" keepSelection = true .../&gt;
*/
dojox.grid.enhanced.plugins._SelectionPreserver=function(selection){};
/**
 * @memberOf dojox.grid.enhanced.plugins._SelectionPreserver
*/
dojox.grid.enhanced.plugins._SelectionPreserver.prototype.reset=function(){};
/**
 * @param {mixed} id 
 * @param {mixed} rowIndex 
 * @param {mixed} value 
 * @memberOf dojox.grid.enhanced.plugins._SelectionPreserver
*/
dojox.grid.enhanced.plugins._SelectionPreserver.prototype.onSelectedById=function(id, rowIndex, value){};
/**
 * @memberOf dojox.grid.enhanced.plugins._SelectionPreserver
*/
dojox.grid.enhanced.plugins._SelectionPreserver.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function try to keep the selection info updated when range selection is performed.<br>
 *	 1. Calculate how many unloaded rows are there;<br>
 *	 2. update _selectedById data if grid.selection._selected can be trusted, so loaded but unselected rows can<br>
 *	 be properly recorded.<br>
 * </blockquote>
 * @param {mixed} trustSelection 
 * @param {mixed} isSelect 
 * @param {mixed} isForAll 
 * @param {mixed} from 
 * @param {mixed} to 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._SelectionPreserver
*/
dojox.grid.enhanced.plugins._SelectionPreserver.prototype._updateMapping=function(trustSelection, isSelect, isForAll, from, to){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} toSelect 
 * @param {mixed} inItemOrIndex 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._SelectionPreserver
*/
dojox.grid.enhanced.plugins._SelectionPreserver.prototype._selectById=function(toSelect, inItemOrIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} index 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._SelectionPreserver
*/
dojox.grid.enhanced.plugins._SelectionPreserver.prototype._reSelectById=function(item, index){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins._SelectionPreserver.grid={};
/**
 * @private
*/
dojox.grid.enhanced.plugins._SelectionPreserver.grid._clearData=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An abstract representation of a cell.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.__SelectCellItem} new instance
*/
dojox.__SelectCellItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An abstract representation of a row.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.__SelectRowItem} new instance
*/
dojox.__SelectRowItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An abstract representation of a column.<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.__SelectColItem} new instance
*/
dojox.__SelectColItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides standard extended selection for grid.<br>
 *	 Supports mouse/keyboard selection, multi-selection, and de-selection.<br>
 *	 Acceptable plugin parameters:<br>
 *	 The whole plugin parameter object is a config object passed to the setupConfig function.<br>
 *	 <br>
 *	 Acceptable cell parameters defined in layout:<br>
 *	 1. notselectable: boolean<br>
 *	 Whether this column is (and all the cells in it are) selectable.<br>
 * </blockquote>
 * @class
 * @param {mixed} grid 
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins.Selector} new instance
*/
dojox.grid.enhanced.plugins.Selector=function(grid, args){};
/**
 * @namespace
 * @private
*/
dojox.grid.enhanced.plugins.Selector._config={};
/**
 * @param {mixed} type 
 * @param {mixed} rowIndex 
 * @param {mixed} colIndex 
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.toggleSelect=function(type, rowIndex, colIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set selection mode for row/col/cell.<br>
 * </blockquote>
 * @param {Object} config An object with the following structure (all properties are optional):
 * {<br>
 * //Default is &quot;multi&quot;, all other values are same as &quot;multi&quot;.<br>
 * row: false|&quot;disabled&quot;|&quot;single&quot;,<br>
 * col: false|&quot;disabled&quot;|&quot;single&quot;,<br>
 * cell: false|&quot;disabled&quot;|&quot;single&quot;<br>
 * }
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.setupConfig=function(config){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select a continuous range (a block of cells, a set of continuous columns or rows)<br>
 *	 tag:<br>
 *	 public<br>
 * </blockquote>
 * @param {String} type &quot;row&quot; or &quot;col&quot; or &quot;cell&quot;
 * @param {Integer} start | Object
 * If type is &quot;row&quot; or &quot;col&quot;, this is the index of the starting row or column.<br>
 * If type if &quot;cell&quot;, this is the left-top cell of the range.
 * @param {Integer} end | Object
 * If type is &quot;row&quot; or &quot;col&quot;, this is the index of the ending row or column.<br>
 * If type if &quot;cell&quot;, this is the right-bottom cell of the range.
 * @param {mixed} toSelect 
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.selectRange=function(type, start, end, toSelect){};
/**
 * <b>Summary:</b><blockquote>
 *	 Turn on/off this selection functionality if *toEnable* is provided.<br>
 *	 Check whether this selection functionality is enabled if nothing is passed in.<br>
 *	 tag:<br>
 *	 public<br>
 * </blockquote>
 * @param {Boolean} [toEnable] To enable or not. Optional.
 * return: Boolean | undefined<br>
 * Enabled or not.
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.selectEnabled=function(toEnable){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select a location (a cell, a column or a row).<br>
 *	 tag:<br>
 *	 public<br>
 * </blockquote>
 * @param {String} type &quot;row&quot; or &quot;col&quot; or &quot;cell&quot;
 * @param {Integer} rowIndex If type is &quot;row&quot; or &quot;cell&quot;, this is the row index.
 * If type if &quot;col&quot;, this is the column index.
 * @param {Integer} [colIndex] Only valid when type is &quot;cell&quot;
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.select=function(type, rowIndex, colIndex){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.onSetStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether the user is currently selecting something.<br>
 *	 tag:<br>
 *	 public<br>
 * </blockquote>
 * @param {String} type &quot;row&quot; or &quot;col&quot; or &quot;cell&quot;
 * return: Boolean<br>
 * true if is selection, false otherwise.
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.isSelecting=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether a location (a cell, a column or a row) is selected.<br>
 *	 tag:<br>
 *	 public<br>
 * </blockquote>
 * @param {String} type &quot;row&quot; or &quot;col&quot; or &quot;cell&quot;
 * @param {Integer} rowIndex If type is &quot;row&quot; or &quot;cell&quot;, this is the row index.
 * If type if &quot;col&quot;, this is the column index.
 * @param {Integer} [colIndex] Only valid when type is &quot;cell&quot;
 * return: Boolean<br>
 * true if selected, false if not. If cell is covered by a selected column, it's selected.
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.isSelected=function(type, rowIndex, colIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the type of selected items.<br>
 *	 tag:<br>
 *	 public<br>
 *	 return: String<br>
 *	 &amp;quot;row&amp;quot; or &amp;quot;col&amp;quot; or &amp;quot;cell&amp;quot;, or any mix of these (separator is | ).<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.getSelectedType=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the number of selected items.<br>
 *	 tag:<br>
 *	 public<br>
 * </blockquote>
 * @param {String} type &quot;row&quot; or &quot;col&quot; or &quot;cell&quot;
 * @param {Boolean} includeExceptions Only meaningful for rows/columns. If true, all selected rows/cols, even they are partly selected, are all returned.
 * return: Integer<br>
 * The number of selected items.
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.getSelectedCount=function(type, includeExceptions){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get an array of selected locations.<br>
 *	 tag:<br>
 *	 public<br>
 * </blockquote>
 * @param {String} type &quot;row&quot; or &quot;col&quot; or &quot;cell&quot;
 * @param {Boolean} includeExceptions Only meaningful for rows/columns. If true, all selected rows/cols, even they are partly selected, are all returned.
 * return: __SelectItem[]
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.getSelected=function(type, includeExceptions){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get last selected range of the given type.<br>
 *	 tag:<br>
 *	 public<br>
 *	 return: Object<br>
 *	 {start: __SelectItem, end: __SelectItem}<br>
 *	 return null if nothing is selected.<br>
 * </blockquote>
 * @param {mixed} type 
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.getLastSelectedRange=function(type){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.destroy=function(){};
/**
 * @param {mixed} type 
 * @param {mixed} rowIndex 
 * @param {mixed} colIndex 
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.deselect=function(type, rowIndex, colIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear all selections.<br>
 *	 tag:<br>
 *	 public<br>
 * </blockquote>
 * @param {String} [type] &quot;row&quot; or &quot;col&quot; or &quot;cell&quot;. If omitted, clear all.
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype.clear=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Start selection, setup start point and current point, fire events.<br>
 *	 tag:<br>
 *	 private<br>
 * </blockquote>
 * @param {String} type &quot;row&quot;, &quot;col&quot;, or &quot;cell&quot;
 * @param {__SelectItem} start The start point
 * @param {Boolean} extending Whether this is a multi selection
 * @param {Boolean} isRange Whether this is a range selection (i.e. select from the last end point to this point)
 * @param {Boolean} mandatarySelect If true, toSelect will be same as the original selection status.
 * @param {mixed} toSelect 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._startSelect=function(type, start, extending, isRange, mandatarySelect, toSelect){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove from the selection record.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} items 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._remove=function(type, items){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._refreshSelected=function(){};
/**
 * @param {mixed} type 
 * @param {mixed} toHighlight 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._refresh=function(type, toHighlight){};
/**
 * @param {mixed} id 
 * @param {mixed} newIndex 
 * @param {mixed} isSelected 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._onSelectedById=function(id, newIndex, isSelected){};
/**
 * @param {mixed} type 
 * @param {mixed} mapping 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._onInternalRearrange=function(type, mapping){};
/**
 * @param {mixed} type 
 * @param {mixed} target 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._onExternalChange=function(type, target){};
/**
 * <b>Summary:</b><blockquote>
 *	 Expose events to grid.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._mixinGrid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 When new cells is selected, maybe they will fill in the &amp;quot;holes&amp;quot; in selected rows and columns.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} newCellItems 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._makeupForExceptions=function(type, newCellItems){};
/**
 * <b>Summary:</b><blockquote>
 *	 When some rows/cols are selected, maybe they can cover some of the selected cells,<br>
 *	 and fill some of the &amp;quot;holes&amp;quot; in the selected cols/rows.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} newItems 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._makeupForCells=function(type, newItems){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check whether the item is a valid __SelectItem for the given type.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} item 
 * @param {mixed} allowNotSelectable 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._isValid=function(type, item, allowNotSelectable){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return true when the item is selected. (or logically selected, i.e, covered by a row/col).<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._isSelected=function(type, item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return true only when the item is in the last seletion/deseletion range.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} item 
 * @param {mixed} isSelected 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._isInLastRange=function(type, item, isSelected){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return true only when a cell is covered by selected row/col, and its not a &amp;quot;hole&amp;quot;.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._isCellNotInExcept=function(type, item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect events, create event handlers.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._initEvents=function(){};
/**
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._initAreas=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Highlight a single item.<br>
 *	 This function is time critical!!<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} toHighlight 
 * @param {mixed} target 
 * @param {mixed} toSelect 
 * @param {mixed} isRefresh 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._highlightSingle=function(type, toHighlight, target, toSelect, isRefresh){};
/**
 * @param {mixed} rowIdx 
 * @param {mixed} toHighlight 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._highlightRowSelector=function(rowIdx, toHighlight){};
/**
 * <b>Summary:</b><blockquote>
 *	 Do the actual highlight work.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} toHighlight 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._highlightNode=function(node, toHighlight){};
/**
 * @param {mixed} colIdx 
 * @param {mixed} toHighlight 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._highlightHeader=function(colIdx, toHighlight){};
/**
 * <b>Summary:</b><blockquote>
 *	 Highlight from start point to target.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} target 
 * @param {Boolean} toSelect Whether we are selecting or deselecting.
 * This function is time critical!!
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._highlight=function(type, target, toSelect){};
/**
 * <b>Summary:</b><blockquote>
 *	 Complete the event system of grid, hack some grid functions to prevent default behavior.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._hacks=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Go through items from *start* point to *end* point.<br>
 *	 This function is time critical!!<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} start 
 * @param {mixed} end 
 * @param {mixed} func 
 * @param {mixed} halfClose 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._forEach=function(type, start, end, func, halfClose){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus the current point, so when you move mouse, the focus indicator follows you.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} point 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._focusPoint=function(type, point){};
/**
 * @param {mixed} evtName 
 * @param {mixed} type 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._fireEvent=function(evtName, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 End selection. Keep records, fire events and cleanup status.<br>
 *	 tag:<br>
 *	 private<br>
 * </blockquote>
 * @param {String} type &quot;row&quot;, &quot;col&quot;, or &quot;cell&quot;
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._endSelect=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clear selection for given type and fire events, but retain the highlight for *reservedItem*,<br>
 *	 thus avoid &amp;quot;flashing&amp;quot;.<br>
 *	 tag:<br>
 *	 private<br>
 * </blockquote>
 * @param {String} type &quot;row&quot;, &quot;col&quot;, or &quot;cell
 * @param {__SelectItem} reservedItem The item to retain highlight.
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._clearSelection=function(type, reservedItem){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate what status should *target* have.<br>
 *	 If *toSelect* is not provided, this is a no op.<br>
 *	 This function is time-critical!!<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} target 
 * @param {mixed} toHighlight 
 * @param {mixed} toSelect 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._calcToHighlight=function(type, target, toHighlight, toSelect){};
/**
 * <b>Summary:</b><blockquote>
 *	 Blur the current point.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} point 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._blurPoint=function(type, point){};
/**
 * <b>Summary:</b><blockquote>
 *	 Record the selected items.<br>
 * </blockquote>
 * @param {mixed} type 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._addToSelected=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 If some rows/cols are deselected, maybe they have created &amp;quot;holes&amp;quot; in selected cols/rows.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} items 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._addException=function(type, items){};
/**
 * <b>Summary:</b><blockquote>
 *	 If some cells are deselected, maybe they have created &amp;quot;holes&amp;quot; in selected rows/cols.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} items 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._addCellException=function(type, items){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add to the selection record.<br>
 * </blockquote>
 * @param {mixed} type 
 * @param {mixed} items 
 * @private
 * @memberOf dojox.grid.enhanced.plugins.Selector
*/
dojox.grid.enhanced.plugins.Selector.prototype._add=function(type, items){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.Selector.grid={};
/**
 * @memberOf dojox.grid.enhanced.plugins.Selector.grid
*/
dojox.grid.enhanced.plugins.Selector.grid.prototype.onStartSelect=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Selector.grid
*/
dojox.grid.enhanced.plugins.Selector.grid.prototype.onStartDeselect=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Selector.grid
*/
dojox.grid.enhanced.plugins.Selector.grid.prototype.onSelectCleared=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Selector.grid
*/
dojox.grid.enhanced.plugins.Selector.grid.prototype.onEndSelect=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Selector.grid
*/
dojox.grid.enhanced.plugins.Selector.grid.prototype.onEndDeselect=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.Selector.grid.selection={};
/**
 * @param {mixed} from 
 * @param {mixed} to 
 * @memberOf dojox.grid.enhanced.plugins.Selector.grid.selection
*/
dojox.grid.enhanced.plugins.Selector.grid.selection.prototype.selectRange=function(from, to){};
/**
 * @param {mixed} from 
 * @param {mixed} to 
 * @memberOf dojox.grid.enhanced.plugins.Selector.grid.selection
*/
dojox.grid.enhanced.plugins.Selector.grid.selection.prototype.deselectRange=function(from, to){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Selector.grid.selection
*/
dojox.grid.enhanced.plugins.Selector.grid.selection.prototype.deselectAll=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins.Selector.grid.selection
*/
dojox.grid.enhanced.plugins.Selector.grid.selection.prototype.clickSelect=function(){};
/**
 * @namespace
*/
dojox.grid.enhanced.plugins.Selector.grid.views.views={};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class of store layers, provides basic utilities and some interfaces.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid.enhanced.plugins._StoreLayer} new instance
*/
dojox.grid.enhanced.plugins._StoreLayer=function(){};
/**
 * @param {mixed} store 
 * @memberOf dojox.grid.enhanced.plugins._StoreLayer
*/
dojox.grid.enhanced.plugins._StoreLayer.prototype.uninitialize=function(store){};
/**
 * @memberOf dojox.grid.enhanced.plugins._StoreLayer
*/
dojox.grid.enhanced.plugins._StoreLayer.prototype.originFetch=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the name of this store layer.<br>
 *	 The default name retrieved from class name, which should have a pattern of &amp;quot;{name}Layer&amp;quot;.<br>
 *	 If this pattern does not exist, the whole class name will be this layer's name.<br>
 *	 It's better to override this method if your class name is too complicated.<br>
 * </blockquote>
 * @memberOf dojox.grid.enhanced.plugins._StoreLayer
*/
dojox.grid.enhanced.plugins._StoreLayer.prototype.name=function(){};
/**
 * @memberOf dojox.grid.enhanced.plugins._StoreLayer
*/
dojox.grid.enhanced.plugins._StoreLayer.prototype.invalidate=function(){};
/**
 * @param {mixed} store 
 * @memberOf dojox.grid.enhanced.plugins._StoreLayer
*/
dojox.grid.enhanced.plugins._StoreLayer.prototype.initialize=function(store){};
/**
 * <b>Summary:</b><blockquote>
 *	 The get/set function of the enabled status of this layer<br>
 * </blockquote>
 * @param {bool} [toEnable] Boolean If given, is a setter, otherwise, it's getter.
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins._StoreLayer
*/
dojox.grid.enhanced.plugins._StoreLayer.prototype.enabled=function(toEnable){};
/**
 * <b>Summary:</b><blockquote>
 *	 Do the actual wrapping (or 'hacking' if you like) to the store.<br>
 * </blockquote>
 * @param {Read-store} store The store to be wrapped.
 * @param {mixed} funcName 
 * @param {mixed} layerFuncName 
 * @param {mixed} nextLayer 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._StoreLayer
*/
dojox.grid.enhanced.plugins._StoreLayer.prototype._wrap=function(store, funcName, layerFuncName, nextLayer){};
/**
 * <b>Summary:</b><blockquote>
 *	 Do the actual unwrapping to the store.<br>
 * </blockquote>
 * @param {mixed} nextLayer 
 * @private
 * @memberOf dojox.grid.enhanced.plugins._StoreLayer
*/
dojox.grid.enhanced.plugins._StoreLayer.prototype._unwrap=function(nextLayer){};
/**
 * <b>Summary:</b><blockquote>
 *	 The most abstract class for all server side store layers.<br>
 * </blockquote>
 * @class
 * @param {mixed} args 
 * @returns {dojox.grid.enhanced.plugins._ServerSideLayer} new instance
*/
dojox.grid.enhanced.plugins._ServerSideLayer=function(args){};
/**
 * @namespace
 * @private
*/
dojox.grid.enhanced.plugins._ServerSideLayer.__cmds={};
/**
 * <b>Summary:</b><blockquote>
 *	 If you only want to modify the user request, instead of sending a separate command<br>
 *	 to server before fetch, just call:<br>
 *	 this.useCommand(false);<br>
 * </blockquote>
 * @param {bool} [toUse] Boolean If provided, it's a setter, otherwise, it's a getter
 * @returns {Boolean} -
 * @memberOf dojox.grid.enhanced.plugins._ServerSideLayer
*/
dojox.grid.enhanced.plugins._ServerSideLayer.prototype.useCommands=function(toUse){};
/**
 * <b>Summary:</b><blockquote>
 *	 When the server gives back *response* for the commands, you can do something here.<br>
 * </blockquote>
 * @param {string} response server response
 * @param {keywordArgs} userRequest in|out] dojo.data.api.Request
 * The request object for *fetch*. You can modify this object according to the *response*<br>
 * so as to change the behavior of *fetch*
 * @memberOf dojox.grid.enhanced.plugins._ServerSideLayer
*/
dojox.grid.enhanced.plugins._ServerSideLayer.prototype.onCommandLoad=function(response, userRequest){};
/**
 * <b>Summary:</b><blockquote>
 *	 handle errors when sending commands.<br>
 * </blockquote>
 * @param {Error} error 
 * @memberOf dojox.grid.enhanced.plugins._ServerSideLayer
*/
dojox.grid.enhanced.plugins._ServerSideLayer.prototype.onCommandError=function(error){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrided from _StoreLayer.enabled<br>
 * </blockquote>
 * @param {bool} [toEnable] 
 * @memberOf dojox.grid.enhanced.plugins._ServerSideLayer
*/
dojox.grid.enhanced.plugins._ServerSideLayer.prototype.enabled=function(toEnable){};
/**
 * <b>Summary:</b><blockquote>
 *	 get/set a command (a name-value pair)<br>
 * </blockquote>
 * @param {string} cmdName The name of the command
 * @param {(string|number|bool|)} [cmdContent] anything The content of the command
 * 
 * @returns {anything} -
 * @memberOf dojox.grid.enhanced.plugins._ServerSideLayer
*/
dojox.grid.enhanced.plugins._ServerSideLayer.prototype.command=function(cmdName, cmdContent){};
/**
 * @private
*/
dojox.grid.enhanced.plugins._ServerSideLayer._onUserCommandLoad=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Implementation of _StoreLayer._fetch<br>
 * </blockquote>
 * @param {keywordArgs} userRequest 
 * @private
 * @returns {dojo.data.api.Request} -
 * @memberOf dojox.grid.enhanced.plugins._ServerSideLayer
*/
dojox.grid.enhanced.plugins._ServerSideLayer.prototype._fetch=function(userRequest){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides enhanced features based on DataGrid<br>
 * </blockquote>
 * EnhancedGrid features are implemented as plugins that could be loaded on demand.<br>
 * Explicit dojo.require() is needed to use these feature plugins.
 * @class
 * @returns {dojox.grid.EnhancedGrid} new instance
 * @example
 * A quick sample to use EnhancedGrid features:
 * 
 * Step 1. Load EnhancedGrid and required features
 *	&lt;script type="text/javascript"&gt;
 * 		dojo.require("dojox.grid.EnhancedGrid");
 * 		dojo.require("dojox.grid.enhanced.plugins.DnD");
 * 		dojo.require("dojox.grid.enhanced.plugins.Menu");
 * 		dojo.require("dojox.grid.enhanced.plugins.NestedSorting");
 * 		dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");
 * 	&lt;/script&gt;
 * 
 * Step 2. Use EnhancedGrid
 * - Via HTML markup
 * 	&lt;div dojoType="dojox.grid.EnhancedGrid" ...
 * 		plugins="{nestedSorting: true, dnd: true, indirectSelection: true,
 * 		menus:{headerMenu:"headerMenuId", rowMenu:"rowMenuId", cellMenu:"cellMenuId",
 * 		selectedRegionMenu:"selectedRegionMenuId"}}"&gt;
 * 			...
 * 	&lt;/div&gt;
 * 
 * - Or via JavaScript
 * 	&lt;script type="text/javascript"&gt;
 * 		var grid = new dojox.grid.EnhancedGrid({plugins : {nestedSorting: true, dnd: true, indirectSelection: true,
 * 				   menus:{headerMenu:"headerMenuId", rowMenu:"rowMenuId", cellMenu:"cellMenuId",selectedRegionMenu:"selectedRegionMenuId"}},
 * 				   ... }, dojo.byId('gridDiv'));
 * 		grid.startup();
 * 	&lt;/script&gt;
 * 
 * 
 * Plugin Support
 * [Note: Plugin support is still experimental]
 * 
 * You can either customize the default plugins or add new ones, more details please see
 * - dojox.grid.enhanced._PluginManager
 * - dojox.grid.enhanced._Plugin
 * - dojox.grid.enhanced.plugins.*
*/
dojox.grid.EnhancedGrid=function(){};
/**
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.startup=function(){};
/**
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easier way for getting a plugin, e.g. grid.plugin('dnd')<br>
 * </blockquote>
 * @param {String} name 
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.plugin=function(name){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.onMouseUp=function(e){};
/**
 * @param {mixed} target 
 * @param {mixed} source 
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.mixin=function(target, source){};
/**
 * @param {mixed} field 
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.getCellByField=function(field){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see _Grid.doKeyEvent()<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.doKeyEvent=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see DataGrid.doApplyCellEdit()<br>
 * </blockquote>
 * @param {mixed} inValue 
 * @param {mixed} inRowIndex 
 * @param {mixed} inAttrName 
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.doApplyCellEdit=function(inValue, inRowIndex, inAttrName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy all resources<br>
 * </blockquote>
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.destroy=function(){};
/**
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.createView=function(){};
/**
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.createSelection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten<br>
 * </blockquote>
 * @param {mixed} colIndex 
 * @param {mixed} field 
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype.canSort=function(colIndex, field){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extracted fetch specifically for store layer use<br>
 * </blockquote>
 * @param {mixed} req 
 * @private
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype._storeLayerFetch=function(req){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see _Grid._getHeaderHeight()<br>
 *	 Should include borders/margins of this.viewsHeaderNode<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype._getHeaderHeight=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see DataGrid._fetch()<br>
 * </blockquote>
 * @param {mixed} start 
 * @param {mixed} isRender 
 * @private
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype._fetch=function(start, isRender){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overwritten, see DataGrid._copyAttr()<br>
 *	 Fix cell TAB navigation for single click editing<br>
 * </blockquote>
 * @param {mixed} idx 
 * @param {mixed} attr 
 * @private
 * @memberOf dojox.grid.EnhancedGrid
*/
dojox.grid.EnhancedGrid.prototype._copyAttr=function(idx, attr){};
/**
 * @class
 * @param {mixed} grid 
 * @returns {dojox.grid.enhanced.DataSelection} new instance
*/
dojox.grid.enhanced.DataSelection=function(grid){};
/**
 * @param {mixed} inItemOrIndex 
 * @memberOf dojox.grid.enhanced.DataSelection
*/
dojox.grid.enhanced.DataSelection.prototype.deselectAll=function(inItemOrIndex){};
/**
 * @param {mixed} inFrom 
 * @param {mixed} inTo 
 * @private
 * @memberOf dojox.grid.enhanced.DataSelection
*/
dojox.grid.enhanced.DataSelection.prototype._range=function(inFrom, inTo){};
/**
 * <b>Summary:</b><blockquote>
 *	 _Grid mixin that provides default implementations for grid events.<br>
 * </blockquote>
 * Default synthetic events dispatched for _Grid. dojo.connect to events to<br>
 * retain default implementation or override them for custom handling.
 * @class
 * @returns {dojox.grid._Events} new instance
*/
dojox.grid._Events=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Perform row styling on a given row. Called whenever row styling is updated.<br>
 * </blockquote>
 * @param {Object} inRow Object containing row state information: selected, true if the row is selcted; over:
 * true of the mouse is over the row; odd: true if the row is odd. Use customClasses and<br>
 * customStyles to control row css classes and styles; both properties are strings.
 * @example
 * onStyleRow({ selected: true, over:true, odd:false })
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onStyleRow=function(inRow){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when editing is started for a given grid cell<br>
 * </blockquote>
 * @param {Object} inCell Cell object containing properties of the grid column.
 * @param {Integer} inRowIndex Index of the grid row
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onStartEdit=function(inCell, inRowIndex){};
/**
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onSelectionChanged=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a grid row is selected<br>
 * </blockquote>
 * @param {Integer} inRowIndex Index of the grid row
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onSelected=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse moves over a data row.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onRowMouseOver=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse moves out of a data row.<br>
 * </blockquote>
 * @param {Event} e Decorated event object contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onRowMouseOut=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse is down in a row.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onRowMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a row is double clicked.<br>
 * </blockquote>
 * @param {Event} e decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onRowDblClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a row context menu is accessed via mouse right click.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onRowContextMenu=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a row is clicked.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onRowClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse is over any row (data or header).<br>
 * </blockquote>
 * @param {Event} e Decorated event object contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onMouseOverRow=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse is over the grid.<br>
 * </blockquote>
 * @param {Event} e Decorated event object contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onMouseOver=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse moves out of any row (data or header).<br>
 * </blockquote>
 * @param {Event} e Decorated event object contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onMouseOutRow=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse moves out of the grid.<br>
 * </blockquote>
 * @param {Event} e Decorated event object that contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onMouseOut=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse is down inside grid row<br>
 * </blockquote>
 * @param {Event} e Decorated event object that contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onMouseDownRow=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse is down inside grid.<br>
 * </blockquote>
 * @param {Event} e Decorated event object that contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 top level handler for Key Events<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onKeyEvent=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Grid key event handler. By default enter begins editing and applies edits, escape cancels an edit,<br>
 *	 tab, shift-tab, and arrow keys move grid cell focus.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onKeyDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse moves over the grid header.<br>
 * </blockquote>
 * @param {Event} e Decorated event object contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderMouseOver=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse moves out of the grid header.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderMouseOut=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Top level handler for header events<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderEvent=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when the grid header is double clicked.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderDblClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when the grid header context menu is accessed via mouse right click.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderContextMenu=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when the grid header is clicked.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse moves over a header cell.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderCellMouseOver=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse moves out of a header cell.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderCellMouseOut=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse is down in a header cell.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderCellMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a header cell is double clicked.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderCellDblClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a header cell context menu is accessed via mouse right click.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderCellContextMenu=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a header cell is clicked.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onHeaderCellClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a grid row is deselected<br>
 * </blockquote>
 * @param {Integer} inRowIndex Index of the grid row
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onDeselected=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Top level handler for Content events<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onContentEvent=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse is over a cell.<br>
 * </blockquote>
 * @param {Event} e Decorated event object contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onCellMouseOver=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse moves out of a cell.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onCellMouseOut=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when mouse is down in a header cell.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onCellMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a cell receives focus.<br>
 * </blockquote>
 * @param {Object} inCell Cell object containing properties of the grid column.
 * @param {Integer} inRowIndex Index of the grid row
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onCellFocus=function(inCell, inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a cell is double-clicked.<br>
 * </blockquote>
 * @param {Event} e Decorated event object contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onCellDblClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a cell context menu is accessed via mouse right click.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onCellContextMenu=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a cell is clicked.<br>
 * </blockquote>
 * @param {Event} e Decorated event object which contains reference to grid, cell, and rowIndex
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onCellClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when editing is cancelled for a given grid cell<br>
 * </blockquote>
 * @param {Integer} inRowIndex Index of the grid row
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onCancelEdit=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event to determine if a grid row may be selected<br>
 * </blockquote>
 * @param {Integer} inRowIndex Index of the grid row
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onCanSelect=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event to determine if a grid row may be deselected<br>
 * </blockquote>
 * @param {Integer} inRowIndex Index of the grid row
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onCanDeselect=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when editing is applied for a given grid row<br>
 * </blockquote>
 * @param {Integer} inRowIndex Index of the grid row
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onApplyEdit=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when editing is applied for a given grid cell<br>
 * </blockquote>
 * @param {String} inValue Value from cell editor
 * @param {Integer} inRowIndex Index of the grid row
 * @param {Integer} inFieldIndex Index in the grid's data store
 * @memberOf dojox.grid._Events
*/
dojox.grid._Events.prototype.onApplyCellEdit=function(inValue, inRowIndex, inFieldIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Controls grid cell focus. Owned by grid and used internally for focusing.<br>
 *	 Note: grid cell actually receives keyboard input only when cell is being edited.<br>
 * </blockquote>
 * @class
 * @param {mixed} inGrid 
 * @returns {dojox.grid._FocusManager} new instance
*/
dojox.grid._FocusManager=function(inGrid){};
/**
 * @namespace
*/
dojox.grid._FocusManager.cell={};
/**
 * @param {mixed} inFocusNode 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.tabOut=function(inFocusNode){};
/**
 * @param {mixed} inRow 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.styleRow=function(inRow){};
/**
 * <b>Summary:</b><blockquote>
 *	 focuses the given grid cell<br>
 * </blockquote>
 * @param {int} inRowIndex grid row index
 * @param {int} inCellIndex grid cell index
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.setFocusIndex=function(inRowIndex, inCellIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 focuses the given grid cell<br>
 * </blockquote>
 * @param {object} inCell grid cell object
 * @param {int} inRowIndex grid row index
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.setFocusCell=function(inCell, inRowIndex){};
/**
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.scrollIntoView=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.previousKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 focus previous grid cell<br>
 * </blockquote>
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.previous=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.nextKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 focus next grid cell<br>
 * </blockquote>
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.next=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 focus grid cell or  simulate focus to column header based on position relative to current focus<br>
 * </blockquote>
 * @param {int} inRowDelta vertical distance from current focus
 * @param {int} inColDelta horizontal distance from current focus
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.move=function(inRowDelta, inColDelta){};
/**
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.isNoFocusCell=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 states whether currently navigating among column headers.<br>
 * </blockquote>
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.isNavHeader=function(){};
/**
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.isLastFocusCell=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 states if the given cell is focused<br>
 * </blockquote>
 * @param {object} inCell grid cell object
 * @param {int} inRowIndex grid row index
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.isFocusCell=function(inCell, inRowIndex){};
/**
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.isFirstFocusCell=function(){};
/**
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.initFocusView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 if one of the column headers currently has focus, return its index.<br>
 * </blockquote>
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.getHeaderIndex=function(){};
/**
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.focusHeader=function(){};
/**
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.focusGridView=function(){};
/**
 * @param {mixed} inSkipFocusCell 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.focusGrid=function(inSkipFocusCell){};
/**
 * <b>Summary:</b><blockquote>
 *	 find the first focusable grid cell<br>
 * </blockquote>
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.findAndFocusGridCell=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.doLastNodeFocus=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.doLastNodeBlur=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.doFocus=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.doContextMenu=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.doColHeaderFocus=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.doColHeaderBlur=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.doBlur=function(e){};
/**
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.destroy=function(){};
/**
 * @param {mixed} e 
 * @param {mixed} colIdx 
 * @param {mixed} delta 
 * @returns {can't adjust single col. grid} -
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.colSizeAdjust=function(e, colIdx, delta){};
/**
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype.blurHeader=function(){};
/**
 * @param {Node} colHeaderNode 
 * @param {Integer} colFocusIdx 
 * @param {Integer} prevColFocusIdx 
 * @private
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype._setActiveColHeader=function(colHeaderNode, colFocusIdx, prevColFocusIdx){};
/**
 * @param {mixed} cell 
 * @param {mixed} domNode 
 * @private
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype._scrollInfo=function(cell, domNode){};
/**
 * @param {mixed} currentIdx 
 * @private
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype._scrollHeader=function(currentIdx){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype._mouseUp=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype._mouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 determine if the grid headers are hidden<br>
 *	 relies on documented technique of setting .dojoxGridHeader { display:none; }<br>
 * </blockquote>
 * @private
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype._isHeaderHidden=function(){};
/**
 * @private
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype._initColumnHeaders=function(){};
/**
 * @param {mixed} inBork 
 * @private
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype._focusifyCellNode=function(inBork){};
/**
 * @private
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype._findHeaderCells=function(){};
/**
 * @private
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype._delayedHeaderFocus=function(){};
/**
 * @private
 * @memberOf dojox.grid._FocusManager
*/
dojox.grid._FocusManager.prototype._delayedCellFocus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A grid widget with virtual scrolling, cell editing, complex rows,<br>
 *	 sorting, fixed columns, sizeable columns, etc.<br>
 * </blockquote>
 * _Grid provides the full set of grid features without any<br>
 * direct connection to a data store.<br>
 * <br>
 * The grid exposes a get function for the grid, or optionally<br>
 * individual columns, to populate cell contents.<br>
 * <br>
 * The grid is rendered based on its structure, an object describing<br>
 * column and cell layout.
 * @class
 * @returns {dojox.grid._Grid} new instance
 * @example
 * A quick sample:
 * 
 * define a get function
 * 	function get(inRowIndex){ // called in cell context
 * 		return [this.index, inRowIndex].join(', ');
 * 	}
 * 
 * define the grid structure:
 * 	var structure = [ // array of view objects
 * 		{ cells: [// array of rows, a row is an array of cells
 * 			[
 * 				{ name: "Alpha", width: 6 },
 * 				{ name: "Beta" },
 * 				{ name: "Gamma", get: get }]
 * 		]}
 * 	];
 * 
 * 	&lt;div id="grid"
 * 		rowCount="100" get="get"
 * 		structure="structure"
 * 		dojoType="dojox.grid._Grid"&gt;&lt;/div&gt;
*/
dojox.grid._Grid=function(){};
/**
 * @namespace
*/
dojox.grid._Grid.views={};
/**
 * @namespace
*/
dojox.grid._Grid.scroller={};
/**
 * @namespace
*/
dojox.grid._Grid.layout={};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.invalidated=[];
/**
 * @namespace
*/
dojox.grid._Grid.focus={};
/**
 * <b>Summary:</b><blockquote>
 *	 Render consecutive rows at once.<br>
 * </blockquote>
 * @param {Integer} startIndex Index of the starting row to render
 * @param {Integer} howMany How many rows to update.
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.updateRows=function(startIndex, howMany){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the styles for a row after it's state has changed.<br>
 * </blockquote>
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.updateRowStyles=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Change the number of rows.<br>
 * </blockquote>
 * @param {int} inRowCount Number of rows in the grid.
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.updateRowCount=function(inRowCount){};
/**
 * <b>Summary:</b><blockquote>
 *	 Render a single row.<br>
 * </blockquote>
 * @param {Integer} inRowIndex Index of the row to render
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.updateRow=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the grid, retaining edit and scrolling states.<br>
 * </blockquote>
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.update=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.textSizeChanged=function(){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.styleRowNode=function(inRowIndex, inRowNode){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.startup=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.sort=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.sizeChange=function(){};
/**
 * @param {mixed} message 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.showMessage=function(message){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.setupHeaderMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Install a new structure and rebuild the grid.<br>
 * </blockquote>
 * @param {dojox.grid.__ViewDef|dojox.grid.__ViewDef[]|dojox.grid.__CellDef[]|Array[dojox.grid.__CellDef[]]} inStructure 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.setStructure=function(inStructure){};
/**
 * @param {mixed} inSortInfo 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.setSortInfo=function(inSortInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sort the grid on a column in a specified direction<br>
 * </blockquote>
 * @param {Integer} inIndex Column index on which to sort.
 * @param {Boolean} inAsc If true, sort the grid in ascending order, otherwise in descending order
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.setSortIndex=function(inIndex, inAsc){};
/**
 * @param {mixed} inTop 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.setScrollTop=function(inTop){};
/**
 * @param {dijit.Menu} menu 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.setHeaderMenu=function(menu){};
/**
 * @param {mixed} inIndex 
 * @param {mixed} inUnitWidth 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.setCellWidth=function(inIndex, inUnitWidth){};
/**
 * <b>Summary:</b><blockquote>
 *	 Scroll the grid to a specific row.<br>
 * </blockquote>
 * @param {Integer} inRowIndex grid row index
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.scrollToRow=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Vertically scroll the grid to a given pixel position<br>
 * </blockquote>
 * @param {Integer} inTop vertical position of the grid in pixels
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.scrollTo=function(inTop){};
/**
 * <b>Summary:</b><blockquote>
 *	 private, used internally to remove rows<br>
 * </blockquote>
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.rowRemoved=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update grid when the height of a row has changed. Row height is handled automatically as rows<br>
 *	 are rendered. Use this function only to update a row's height outside the normal rendering process.<br>
 * </blockquote>
 * @param {Integer} inRowIndex index of the row that has changed height
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.rowHeightChanged=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the grid's rendering dimensions and resize it<br>
 * </blockquote>
 * @param {mixed} changeSize 
 * @param {mixed} resultSize 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.resize=function(changeSize, resultSize){};
/**
 * <b>Summary:</b><blockquote>
 *	 private, used internally to render rows<br>
 * </blockquote>
 * @param {mixed} inRowIndex 
 * @param {mixed} inNodes 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.renderRow=function(inRowIndex, inNodes){};
/**
 * <b>Summary:</b><blockquote>
 *	 Render the grid, headers, and views. Edit and scrolling states are reset. To retain edit and<br>
 *	 scrolling states, see Update.<br>
 * </blockquote>
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove the selected rows from the grid.<br>
 * </blockquote>
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.removeSelectedRows=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.prerender=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.postresize=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.postrender=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.postCreate=function(){};
/**
 * @param {int} cellIdx 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.onResizeColumn=function(cellIdx){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.onMoveColumn=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.hasLayout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the index of the column on which the grid is sorted<br>
 * </blockquote>
 * @param {mixed} inSortInfo 
 * @returns {Integer} -
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.getSortIndex=function(inSortInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if grid is sorted in an ascending direction.<br>
 * </blockquote>
 * @param {mixed} inSortInfo 
 * @returns {Boolean} -
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.getSortAsc=function(inSortInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 find the rowNode that is not a rowSelector<br>
 * </blockquote>
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.getRowNode=function(inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.getItem=function(inRowIndex){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.getColumnTogglingItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the cell name of a passed cell<br>
 * </blockquote>
 * @param {mixed} inCell 
 * @returns {String} -
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.getCellName=function(inCell){};
/**
 * <b>Summary:</b><blockquote>
 *	 Retrieves the cell object for a given grid column.<br>
 * </blockquote>
 * @param {Integer} inIndex Grid column index of cell to retrieve
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.getCell=function(inIndex){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.finishScrollJob=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use after calling beginUpdate to render any changes made to rows.<br>
 * </blockquote>
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.endUpdate=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.dokeydown=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.doheaderdblclick=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.doheadercontextmenu=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.doheaderclick=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.dodblclick=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.docontextmenu=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.doclick=function(e){};
/**
 * @param {mixed} inCell 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.doStartEdit=function(inCell, inRowIndex){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.doKeyEvent=function(e){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.doCancelEdit=function(inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.doApplyEdit=function(inRowIndex){};
/**
 * @param {mixed} inValue 
 * @param {mixed} inRowIndex 
 * @param {mixed} inFieldIndex 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.doApplyCellEdit=function(inValue, inRowIndex, inFieldIndex){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.dispatchKeyEvent=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.dispatchHeaderEvent=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.dispatchContentEvent=function(e){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.destroy=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.defaultUpdate=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.createViews=function(){};
/**
 * @param {mixed} inClass 
 * @param {mixed} idx 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.createView=function(inClass, idx){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a new Grid selection manager.<br>
 * </blockquote>
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.createSelection=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a new virtual scroller<br>
 * </blockquote>
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.createScroller=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 create grid managers for various tasks including rows, focus, selection, editing<br>
 * </blockquote>
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.createManagers=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a new Grid layout<br>
 * </blockquote>
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.createLayout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines if the grid can be sorted<br>
 * </blockquote>
 * @param {Integer} inSortInfo Sort information, 1-based index of column on which to sort, positive for an ascending sort
 * and negative for a descending sort
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.canSort=function(inSortInfo){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.buildViews=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use to make multiple changes to rows while queueing row updating.<br>
 *	 NOTE: not currently supporting nested begin/endUpdate calls<br>
 * </blockquote>
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.beginUpdate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a row to the grid.<br>
 * </blockquote>
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.addRow=function(){};
/**
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.adaptWidth=function(){};
/**
 * @param {mixed} inHeaderHeight 
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype.adaptHeight=function(inHeaderHeight){};
/**
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._structureChanged=function(){};
/**
 * @param {mixed} structure 
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._setStructureAttr=function(structure){};
/**
 * @param {mixed} menu 
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._setHeaderMenuAttr=function(menu){};
/**
 * @param {mixed} ah 
 * @param {mixed} skipRender 
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._setAutoHeightAttr=function(ah, skipRender){};
/**
 * @param {mixed} changeSize 
 * @param {mixed} resultSize 
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._resize=function(changeSize, resultSize){};
/**
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._render=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._mouseOut=function(e){};
/**
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._getRowCountAttr=function(){};
/**
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._getPadBorder=function(){};
/**
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._getHeaderHeight=function(){};
/**
 * @param {mixed} start 
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._fetch=function(start){};
/**
 * @param {mixed} m 
 * @param {mixed} e 
 * @private
 * @memberOf dojox.grid._Grid
*/
dojox.grid._Grid.prototype._dispatch=function(m, e){};
/**
 * @namespace
*/
dojox.grid._Grid.domNode={};
/**
 * @namespace
*/
dojox.grid._Grid.messagesNode={};
/**
 * @namespace
*/
dojox.grid._Grid.viewsHeaderNode={};
/**
 * @class
 * @private
 * @returns {dojox.grid.__CellDef} new instance
*/
dojox.grid.__CellDef=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 function(rowIndex){} rowIndex is of type Integer.  This<br>
 *	 function will be called when a cell	requests data.  Returns the<br>
 *	 unformatted data for the cell.<br>
 * </blockquote>
*/
dojox.grid.__CellDef.get=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 function(data, rowIndex){} data is of type anything, rowIndex<br>
 *	 is of type Integer.  This function will be called after the cell<br>
 *	 has its data but before it passes it back to the grid to render.<br>
 *	 Returns the formatted version of the cell's data.<br>
 * </blockquote>
*/
dojox.grid.__CellDef.formatter=function(){};
/**
 * @class
 * @private
 * @returns {dojox.grid.__ViewDef} new instance
*/
dojox.grid.__ViewDef=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 function(rowIndex, cells){} rowIndex is of type Integer, cells<br>
 *	 is of type Array[dojox.grid.__CellDef[]].  This function is called<br>
 *	 before each row of data is rendered.  Before the header is<br>
 *	 rendered, rowIndex will be -1.  &amp;quot;cells&amp;quot; is a reference to the<br>
 *	 internal structure of this view's cells so any changes you make to<br>
 *	 it will persist between calls.<br>
 * </blockquote>
*/
dojox.grid.__ViewDef.onBeforeRow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 function(rowIndex, cells, rowNode){} rowIndex is of type Integer, cells<br>
 *	 is of type Array[dojox.grid.__CellDef[]], rowNode is of type DOMNode.<br>
 *	 This function is called	after each row of data is rendered.  After the<br>
 *	 header is rendered, rowIndex will be -1.  &amp;quot;cells&amp;quot; is a reference to the<br>
 *	 internal structure of this view's cells so any changes you make to<br>
 *	 it will persist between calls.<br>
 * </blockquote>
*/
dojox.grid.__ViewDef.onAfterRow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Controls grid cell layout. Owned by grid and used internally.<br>
 *	 <br>
 *	 <br>
 *	 flat array of grid cells<br>
 *	 <br>
 *	 <br>
 *	 structured array of grid cells<br>
 *	 <br>
 *	 <br>
 *	 default cell width<br>
 * </blockquote>
 * @class
 * @param {mixed} inGrid 
 * @returns {dojox.grid._Layout} new instance
*/
dojox.grid._Layout=function(inGrid){};
/**
 * @param {mixed} inStructure 
 * @memberOf dojox.grid._Layout
*/
dojox.grid._Layout.prototype.setStructure=function(inStructure){};
/**
 * @param {mixed} columnIndex 
 * @param {mixed} visible 
 * @memberOf dojox.grid._Layout
*/
dojox.grid._Layout.prototype.setColumnVisibility=function(columnIndex, visible){};
/**
 * @param {mixed} sourceViewIndex 
 * @param {mixed} destViewIndex 
 * @param {mixed} cellIndex 
 * @param {mixed} targetIndex 
 * @param {mixed} before 
 * @memberOf dojox.grid._Layout
*/
dojox.grid._Layout.prototype.moveColumn=function(sourceViewIndex, destViewIndex, cellIndex, targetIndex, before){};
/**
 * @param {mixed} inDef 
 * @memberOf dojox.grid._Layout
*/
dojox.grid._Layout.prototype.addViewDef=function(inDef){};
/**
 * @param {mixed} inDef 
 * @memberOf dojox.grid._Layout
*/
dojox.grid._Layout.prototype.addRowsDef=function(inDef){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inDef 
 * @memberOf dojox.grid._Layout
*/
dojox.grid._Layout.prototype.addRowDef=function(inRowIndex, inDef){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inCellIndex 
 * @param {mixed} inDef 
 * @memberOf dojox.grid._Layout
*/
dojox.grid._Layout.prototype.addCellDef=function(inRowIndex, inCellIndex, inDef){};
/**
 * @class
 * @returns {dojox.grid._LazyExpando} new instance
*/
dojox.grid._LazyExpando=function(){};
/**
 * @param {mixed} rowIdx 
 * @param {mixed} rowNode 
 * @param {mixed} view 
 * @memberOf dojox.grid._LazyExpando
*/
dojox.grid._LazyExpando.prototype.setRowNode=function(rowIdx, rowNode, view){};
/**
 * <b>Summary:</b><blockquote>
 *	 expand/collapse the row where the expando is in.<br>
 * </blockquote>
 * @param {mixed} open 
 * @memberOf dojox.grid._LazyExpando
*/
dojox.grid._LazyExpando.prototype.setOpen=function(open){};
/**
 * <b>Summary:</b><blockquote>
 *	 The onclick handler of expando, expand/collapse a tree node if has children.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @memberOf dojox.grid._LazyExpando
*/
dojox.grid._LazyExpando.prototype.onToggle=function(evt){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid._LazyExpando
*/
dojox.grid._LazyExpando.prototype._updateOpenState=function(item){};
/**
 * @class
 * @returns {dojox.grid._TreeGridContentBuilder} new instance
*/
dojox.grid._TreeGridContentBuilder=function(){};
/**
 * @param {mixed} inDataIndex 
 * @param {mixed} rowIndex 
 * @returns {String} -
 * @memberOf dojox.grid._TreeGridContentBuilder
*/
dojox.grid._TreeGridContentBuilder.prototype.generateHtml=function(inDataIndex, rowIndex){};
/**
 * @param {mixed} level 
 * @private
 * @memberOf dojox.grid._TreeGridContentBuilder
*/
dojox.grid._TreeGridContentBuilder.prototype._getColSpans=function(level){};
/**
 * @param {mixed} cells 
 * @param {mixed} colIndex 
 * @private
 * @memberOf dojox.grid._TreeGridContentBuilder
*/
dojox.grid._TreeGridContentBuilder.prototype._getCellWidth=function(cells, colIndex){};
/**
 * @class
 * @returns {dojox.grid._TreeGridView} new instance
*/
dojox.grid._TreeGridView=function(){};
/**
 * @param {mixed} rowIndex 
 * @memberOf dojox.grid._TreeGridView
*/
dojox.grid._TreeGridView.prototype.updateRow=function(rowIndex){};
/**
 * @memberOf dojox.grid._TreeGridView
*/
dojox.grid._TreeGridView.prototype.postCreate=function(){};
/**
 * @param {mixed} rowIndex 
 * @param {mixed} cells 
 * @param {mixed} rowNode 
 * @memberOf dojox.grid._TreeGridView
*/
dojox.grid._TreeGridView.prototype.onAfterRow=function(rowIndex, cells, rowNode){};
/**
 * @memberOf dojox.grid._TreeGridView
*/
dojox.grid._TreeGridView.prototype.destroy=function(){};
/**
 * @param {mixed} identity 
 * @private
 * @memberOf dojox.grid._TreeGridView
*/
dojox.grid._TreeGridView.prototype._cleanupExpandoCache=function(identity){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override the dojox.grid._TreeLayout to modify the _TreeGridView and cell formatter<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid._LazyTreeLayout} new instance
*/
dojox.grid._LazyTreeLayout=function(){};
/**
 * @param {mixed} structure 
 * @memberOf dojox.grid._LazyTreeLayout
*/
dojox.grid._LazyTreeLayout.prototype.setStructure=function(structure){};
/**
 * @param {mixed} rowIndex 
 * @param {mixed} cellIndex 
 * @param {mixed} def 
 * @memberOf dojox.grid._LazyTreeLayout
*/
dojox.grid._LazyTreeLayout.prototype.addCellDef=function(rowIndex, cellIndex, def){};
/**
 * <b>Summary:</b><blockquote>
 *	 An internal object used to cache the tree path and open state of each item.<br>
 *	 The form of the cache items would be an object array:<br>
 *	 [{opened: true/false, treePath: [level0 parent id, level1 parent id, ...]}]<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid._LazyTreeGridCache} new instance
 * @example
 *  [{opened: true, treePath: []},
 *   {opened: false, treePath: ["root0"]},
 *   {opened: false, treePath: ["root0"]},
 *   {opened: false, treePath: []},
 *   ...]
*/
dojox.grid._LazyTreeGridCache=function(){};
/**
 * @param {mixed} rowIndex 
 * @memberOf dojox.grid._LazyTreeGridCache
*/
dojox.grid._LazyTreeGridCache.prototype.removeChildren=function(rowIndex){};
/**
 * @param {mixed} rowIndex 
 * @param {mixed} treePath 
 * @memberOf dojox.grid._LazyTreeGridCache
*/
dojox.grid._LazyTreeGridCache.prototype.getSiblingIndex=function(rowIndex, treePath){};
/**
 * <b>Summary:</b><blockquote>
 *	 An enhanced TreeGrid widget which supports lazy-loading for nested children items<br>
 * </blockquote>
 * LazyTreeGrid inherits from dojo.grid.TreeGrid and applies virtual scrolling mechanism<br>
 * to nested children rows so that it's possible to deal with complex tree structure data set<br>
 * with nested and huge children rows. It's also compatible with dijit.tree.ForestStoreModel<br>
 * <br>
 * Most methods and properties pertaining to dojox.grid.DataGrid<br>
 * and dojox.grid.TreeGrid also apply here<br>
 * <br>
 * LazyTreeGrid does not support summary row/items aggregate due to the lazy-loading rationale.
 * @class
 * @returns {dojox.grid.LazyTreeGrid} new instance
 * @example
 * 	colSpans = {
 * 	0:	[
 * 			{start: 0, end: 1, primary: 0},
 * 			{start: 2, end: 4, primary: 3}
 * 		],
 * 	1:	[
 * 			{start: 0, end: 3, primary: 1}
 * 		]
 * 	};
*/
dojox.grid.LazyTreeGrid=function(){};
/**
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.treeModel=null;
/**
 * @namespace
*/
dojox.grid.LazyTreeGrid.selection={};
/**
 * @namespace
 * @private
*/
dojox.grid.LazyTreeGrid._treeCache={};
/**
 * @param {mixed} rowIndex 
 * @param {mixed} rowNode 
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.styleRowNode=function(rowIndex, rowNode){};
/**
 * @param {mixed} store 
 * @param {mixed} query 
 * @param {mixed} queryOptions 
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.setStore=function(store, query, queryOptions){};
/**
 * @param {mixed} inIndex 
 * @param {mixed} inAsc 
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.setSortIndex=function(inIndex, inAsc){};
/**
 * @param {mixed} treeModel 
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.setModel=function(treeModel){};
/**
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Refresh, and persist the expand/collapse state when keepState equals true<br>
 * </blockquote>
 * @param {boolean} keepState 
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.refresh=function(keepState){};
/**
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.postCreate=function(){};
/**
 * @param {mixed} row 
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.onStyleRow=function(row){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event fired when a default state being set.<br>
 * </blockquote>
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.onSetState=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.onKeyDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the current state of LazyTreeGrid including expanding, sorting, selection and scroll top state.<br>
 * </blockquote>
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.getState=function(){};
/**
 * @param {mixed} query 
 * @param {mixed} reRender 
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.filter=function(query, reRender){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function for fetch children of a given row<br>
 * </blockquote>
 * @param {mixed} rowIndex 
 * @param {mixed} open 
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.expandoFetch=function(rowIndex, open){};
/**
 * <b>Summary:</b><blockquote>
 *	 Expand the row with the given itemId.<br>
 *	 id: string?<br>
 * </blockquote>
 * @param {mixed} itemId 
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.expand=function(itemId){};
/**
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.destroy=function(){};
/**
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.createSelection=function(){};
/**
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.createManagers=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Collapse the row with the given itemId.<br>
 *	 id: string?<br>
 * </blockquote>
 * @param {mixed} itemId 
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype.collapse=function(itemId){};
/**
 * @param {mixed} start 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._updateRenderedRows=function(start){};
/**
 * @param {mixed} rowIndex 
 * @param {mixed} flag 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._toggleLoadingClass=function(rowIndex, flag){};
/**
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._setState=function(){};
/**
 * @param {mixed} query 
 * @param {mixed} queryOptions 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._setQuery=function(query, queryOptions){};
/**
 * @param {mixed} isRender 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._refresh=function(isRender){};
/**
 * @param {mixed} item 
 * @param {mixed} parentInfo 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._onNew=function(item, parentInfo){};
/**
 * @param {mixed} items 
 * @param {mixed} request 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._onFetchComplete=function(items, request){};
/**
 * @param {mixed} size 
 * @param {mixed} request 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._onFetchBegin=function(size, request){};
/**
 * @param {mixed} childItems 
 * @param {mixed} request 
 * @param {mixed} size 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._onExpandoComplete=function(childItems, request, size){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._onDelete=function(item){};
/**
 * @param {mixed} identity 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._onCleanupExpandoCache=function(identity){};
/**
 * @param {mixed} itemId 
 * @param {mixed} open 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._fold=function(itemId, open){};
/**
 * @param {mixed} req 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._fetchItems=function(req){};
/**
 * @param {mixed} start 
 * @param {mixed} isRender 
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._fetch=function(start, isRender){};
/**
 * @private
 * @memberOf dojox.grid.LazyTreeGrid
*/
dojox.grid.LazyTreeGrid.prototype._cleanup=function(){};
/**
 * @class
 * @param {Object} args 
 * @returns {dojox.grid.LazyTreeGridStoreModel} new instance
*/
dojox.grid.LazyTreeGridStoreModel=function(args){};
/**
 * @param {mixed} item 
 * @param {mixed} parentInfo 
 * @memberOf dojox.grid.LazyTreeGridStoreModel
*/
dojox.grid.LazyTreeGridStoreModel.prototype.onNewItem=function(item, parentInfo){};
/**
 * @param {mixed} item 
 * @memberOf dojox.grid.LazyTreeGridStoreModel
*/
dojox.grid.LazyTreeGridStoreModel.prototype.onDeleteItem=function(item){};
/**
 * @param {dojo.data.Item} item 
 * @memberOf dojox.grid.LazyTreeGridStoreModel
*/
dojox.grid.LazyTreeGridStoreModel.prototype.mayHaveChildren=function(item){};
/**
 * @param {dojo.data.Item} parentItem 
 * @param {function(items,} onComplete size)
 * @param {function} onError 
 * @param {object} queryObj 
 * @memberOf dojox.grid.LazyTreeGridStoreModel
*/
dojox.grid.LazyTreeGridStoreModel.prototype.getChildren=function(parentItem, onComplete, onError, queryObj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if all children of the given item have been loaded<br>
 * </blockquote>
 * @param {mixed} parentItem 
 * @private
 * @memberOf dojox.grid.LazyTreeGridStoreModel
*/
dojox.grid.LazyTreeGridStoreModel.prototype._isChildrenLoaded=function(parentItem){};
/**
 * @class
 * @private
 * @returns {dojox.grid._RadioSelector} new instance
*/
dojox.grid._RadioSelector=function(){};
/**
 * @memberOf dojox.grid._RadioSelector
*/
dojox.grid._RadioSelector.prototype.renderHeader=function(){};
/**
 * @memberOf dojox.grid._RadioSelector
*/
dojox.grid._RadioSelector.prototype.buildRendering=function(){};
/**
 * @class
 * @param {mixed} inGrid 
 * @returns {dojox.grid._RowManager} new instance
*/
dojox.grid._RowManager=function(inGrid){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._RowManager
*/
dojox.grid._RowManager.prototype.updateStyles=function(inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._RowManager
*/
dojox.grid._RowManager.prototype.styleRowNode=function(inRowIndex, inRowNode){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._RowManager
*/
dojox.grid._RowManager.prototype.setOverRow=function(inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._RowManager
*/
dojox.grid._RowManager.prototype.prepareStylingRow=function(inRowIndex, inRowNode){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._RowManager
*/
dojox.grid._RowManager.prototype.isOver=function(inRowIndex){};
/**
 * @param {mixed} inRow 
 * @memberOf dojox.grid._RowManager
*/
dojox.grid._RowManager.prototype.applyStyles=function(inRow){};
/**
 * <b>Summary:</b><blockquote>
 *	 Custom grid view. If used in a grid structure, provides a small selectable region for grid rows.<br>
 *	 <br>
 *	 <br>
 *	 styling<br>
 *	 <br>
 *	 <br>
 *	 event handlers<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid._RowSelector} new instance
*/
dojox.grid._RowSelector=function(){};
/**
 * @memberOf dojox.grid._RowSelector
*/
dojox.grid._RowSelector.prototype.updateRow=function(){};
/**
 * @memberOf dojox.grid._RowSelector
*/
dojox.grid._RowSelector.prototype.resize=function(){};
/**
 * @memberOf dojox.grid._RowSelector
*/
dojox.grid._RowSelector.prototype.renderHeader=function(){};
/**
 * @memberOf dojox.grid._RowSelector
*/
dojox.grid._RowSelector.prototype.getWidth=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._RowSelector
*/
dojox.grid._RowSelector.prototype.domouseover=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._RowSelector
*/
dojox.grid._RowSelector.prototype.domouseout=function(e){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._RowSelector
*/
dojox.grid._RowSelector.prototype.doStyleRowNode=function(inRowIndex, inRowNode){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._RowSelector
*/
dojox.grid._RowSelector.prototype.buildRowContent=function(inRowIndex, inRowNode){};
/**
 * @memberOf dojox.grid._RowSelector
*/
dojox.grid._RowSelector.prototype.buildRendering=function(){};
/**
 * @memberOf dojox.grid._RowSelector
*/
dojox.grid._RowSelector.prototype.adaptWidth=function(){};
/**
 * @class
 * @param {mixed} inContentNodes 
 * @returns {dojox.grid._Scroller} new instance
*/
dojox.grid._Scroller=function(inContentNodes){};
/**
 * @namespace
*/
dojox.grid._Scroller.scrollboxNode={};
/**
 * @param {mixed} inRowCount 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.updateRowCount=function(inRowCount){};
/**
 * @param {mixed} inPageIndex 
 * @param {mixed} fromBuild 
 * @param {mixed} fromAsynRendering 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.updatePageHeight=function(inPageIndex, fromBuild, fromAsynRendering){};
/**
 * @param {mixed} inDh 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.updateContentHeight=function(inDh){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.startPacify=function(){};
/**
 * @param {mixed} inPacifying 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.setPacifying=function(inPacifying){};
/**
 * @param {mixed} inKeepRows 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.setKeepInfo=function(inKeepRows){};
/**
 * @param {mixed} inNodes 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.setContentNodes=function(inNodes){};
/**
 * @param {mixed} inTop 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.scroll=function(inTop){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} fromAsynRendering 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.rowHeightChanged=function(inRowIndex, fromAsynRendering){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.resize=function(){};
/**
 * @param {mixed} inPageIndex 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.repositionPages=function(inPageIndex){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inPageNode 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.renderRow=function(inRowIndex, inPageNode){};
/**
 * @param {mixed} inPageIndex 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.renderPage=function(inPageIndex){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.removeRow=function(inRowIndex){};
/**
 * @param {mixed} inPageIndex 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.removePage=function(inPageIndex){};
/**
 * @param {mixed} inPageIndex 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.pushPage=function(inPageIndex){};
/**
 * @param {mixed} e 
 * @param {mixed} inNode 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.processNodeEvent=function(e, inNode){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.processEvent=function(e){};
/**
 * @param {mixed} inPageIndex 
 * @param {mixed} inReuseNode 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.preparePage=function(inPageIndex, inReuseNode){};
/**
 * @param {mixed} inNode 
 * @param {mixed} inPos 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.positionPageNode=function(inNode, inPos){};
/**
 * @param {mixed} inPageIndex 
 * @param {mixed} inPos 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.positionPage=function(inPageIndex, inPos){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.popPage=function(){};
/**
 * @param {mixed} inPageIndex 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.pageExists=function(inPageIndex){};
/**
 * @param {mixed} inShouldPacify 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.pacify=function(inShouldPacify){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.onscroll=function(){};
/**
 * @param {mixed} inPageIndex 
 * @param {mixed} inPos 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.needPage=function(inPageIndex, inPos){};
/**
 * @param {mixed} inPageIndex 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.measurePage=function(inPageIndex){};
/**
 * @param {mixed} inPageIndex 
 * @param {mixed} inNodes 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.invalidatePageNode=function(inPageIndex, inNodes){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.invalidateNodes=function(){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.invalidate=function(){};
/**
 * @param {mixed} inPageIndex 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.installPage=function(inPageIndex){};
/**
 * @param {mixed} inRowCount 
 * @param {mixed} inKeepRows 
 * @param {mixed} inRowsPerPage 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.init=function(inRowCount, inKeepRows, inRowsPerPage){};
/**
 * @param {mixed} inTop 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.getScrollBottom=function(inTop){};
/**
 * @param {mixed} inPage 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.getPageRow=function(inPage){};
/**
 * @param {mixed} inNode 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.getPageNodePosition=function(inNode){};
/**
 * @param {mixed} inPageIndex 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.getPageHeight=function(inPageIndex){};
/**
 * @param {mixed} inPage 
 * @param {mixed} inBottom 
 * @param {mixed} inScrollBottom 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.getLastVisibleRow=function(inPage, inBottom, inScrollBottom){};
/**
 * @param {mixed} inPage 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.getLastPageRow=function(inPage){};
/**
 * @param {mixed} inPage 
 * @param {mixed} inPageTop 
 * @param {mixed} inScrollTop 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.getFirstVisibleRow=function(inPage, inPageTop, inScrollTop){};
/**
 * @param {mixed} inPageIndex 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.getDefaultPageNode=function(inPageIndex){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.getDefaultNodes=function(){};
/**
 * @param {mixed} inScrollTop 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.findTopRow=function(inScrollTop){};
/**
 * @param {mixed} inRow 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.findScrollTop=function(inRow){};
/**
 * @param {mixed} inTop 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.findPage=function(inTop){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.endPacify=function(){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.doPacify=function(){};
/**
 * @param {mixed} inPageIndex 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.destroyPage=function(inPageIndex){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.destroy=function(){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.createPageNode=function(){};
/**
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.calcLastPageHeight=function(){};
/**
 * @param {mixed} inPageIndex 
 * @param {mixed} inReuseNode 
 * @param {mixed} inPos 
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype.buildPage=function(inPageIndex, inReuseNode, inPos){};
/**
 * @param {mixed} rowCount 
 * @param {mixed} rowsPerPage 
 * @private
 * @memberOf dojox.grid._Scroller
*/
dojox.grid._Scroller.prototype._getPageCount=function(rowCount, rowsPerPage){};
/**
 * @namespace
*/
dojox.grid._Scroller.grid.viewsNode={};
/**
 * @namespace
*/
dojox.grid._Scroller.grid={};
/**
 * <b>Summary:</b><blockquote>
 *	 Manages row selection for grid. Owned by grid and used internally<br>
 *	 for selection. Override to implement custom selection.<br>
 * </blockquote>
 * @class
 * @param {mixed} inGrid 
 * @returns {dojox.grid.Selection} new instance
*/
dojox.grid.Selection=function(inGrid){};
/**
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.selected=[];
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.toggleSelect=function(inIndex){};
/**
 * @param {mixed} inIndex 
 * @param {mixed} inSelect 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.setSelected=function(inIndex, inSelect){};
/**
 * @param {mixed} mode 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.setMode=function(mode){};
/**
 * @param {mixed} inFrom 
 * @param {mixed} inTo 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.selectRange=function(inFrom, inTo){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.select=function(inIndex){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.remove=function(inIndex){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.onSelected=function(inIndex){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.onDeselected=function(inIndex){};
/**
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.onChanging=function(){};
/**
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.onChanged=function(){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.onCanSelect=function(inIndex){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.onCanDeselect=function(inIndex){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.isSelected=function(inIndex){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.insert=function(inIndex){};
/**
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.getSelectedCount=function(){};
/**
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.getSelected=function(){};
/**
 * @param {mixed} inPrev 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.getNextSelected=function(inPrev){};
/**
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.getFirstSelected=function(){};
/**
 * @param {mixed} inFrom 
 * @param {mixed} inTo 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.deselectRange=function(inFrom, inTo){};
/**
 * @param {mixed} inExcept 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.deselectAll=function(inExcept){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.deselect=function(inIndex){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.clickSelectEvent=function(e){};
/**
 * @param {mixed} inIndex 
 * @param {mixed} inCtrlKey 
 * @param {mixed} inShiftKey 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.clickSelect=function(inIndex, inCtrlKey, inShiftKey){};
/**
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.clear=function(){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype.addToSelection=function(inIndex){};
/**
 * @param {mixed} inFrom 
 * @param {mixed} inTo 
 * @param {mixed} func 
 * @private
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype._range=function(inFrom, inTo, func){};
/**
 * @private
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype._endUpdate=function(){};
/**
 * @private
 * @memberOf dojox.grid.Selection
*/
dojox.grid.Selection.prototype._beginUpdate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Preserve selections across various user actions.<br>
 * </blockquote>
 * When this feature is turned on, Grid will try to preserve selections across actions, e.g. sorting, filtering etc.<br>
 * <br>
 * Precondition - Identifier(id) is required for store since id is the only way for differentiating row items.<br>
 * Known issue - The preserved selections might be inaccurate if some unloaded rows are previously selected by range(e.g.SHIFT + click)
 * @class
 * @param {mixed} selection 
 * @returns {dojox.grid._SelectionPreserver} new instance
 * @example
 * 	//To turn on this - please set 'keepSelection' attribute to true
 * 	&lt;div dojoType="dojox.grid.DataGrid" keepSelection = true .../&gt;
 * 	&lt;div dojoType="dojox.grid.TreeGrid" keepSelection = true .../&gt;
 * 	&lt;div dojoType="dojox.grid.LazyTreeGrid" keepSelection = true .../&gt;
*/
dojox.grid._SelectionPreserver=function(selection){};
/**
 * @memberOf dojox.grid._SelectionPreserver
*/
dojox.grid._SelectionPreserver.prototype.reset=function(){};
/**
 * @memberOf dojox.grid._SelectionPreserver
*/
dojox.grid._SelectionPreserver.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Record selected rows by ID.<br>
 * </blockquote>
 * @param {mixed} toSelect 
 * @param {mixed} inItemOrIndex 
 * @private
 * @memberOf dojox.grid._SelectionPreserver
*/
dojox.grid._SelectionPreserver.prototype._selectById=function(toSelect, inItemOrIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 When some rows is fetched, determine whether it should be selected.<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} index 
 * @private
 * @memberOf dojox.grid._SelectionPreserver
*/
dojox.grid._SelectionPreserver.prototype._reSelectById=function(item, index){};
/**
 * @class
 * @private
 * @returns {dojox.grid._InputSelectorHeaderBuilder} new instance
*/
dojox.grid._InputSelectorHeaderBuilder=function(){};
/**
 * @memberOf dojox.grid._InputSelectorHeaderBuilder
*/
dojox.grid._InputSelectorHeaderBuilder.prototype.generateHtml=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._InputSelectorHeaderBuilder
*/
dojox.grid._InputSelectorHeaderBuilder.prototype.doclick=function(e){};
/**
 * @class
 * @returns {dojox.grid._InputSelectorHeaderBuilder.generateHtml} new instance
*/
dojox.grid._InputSelectorHeaderBuilder.generateHtml=function(){};
/**
 * @class
 * @returns {dojox.grid._InputSelectorHeaderBuilder.doclick} new instance
*/
dojox.grid._InputSelectorHeaderBuilder.doclick=function(){};
/**
 * @class
 * @private
 * @returns {dojox.grid._SelectorContentBuilder} new instance
*/
dojox.grid._SelectorContentBuilder=function(){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._SelectorContentBuilder
*/
dojox.grid._SelectorContentBuilder.prototype.getCellContent=function(inRowIndex){};
/**
 * @param {mixed} inDataIndex 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._SelectorContentBuilder
*/
dojox.grid._SelectorContentBuilder.prototype.generateHtml=function(inDataIndex, inRowIndex){};
/**
 * @memberOf dojox.grid._SelectorContentBuilder
*/
dojox.grid._SelectorContentBuilder.prototype.findTarget=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._SelectorContentBuilder
*/
dojox.grid._SelectorContentBuilder.prototype.domouseover=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._SelectorContentBuilder
*/
dojox.grid._SelectorContentBuilder.prototype.domouseout=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._SelectorContentBuilder
*/
dojox.grid._SelectorContentBuilder.prototype.doclick=function(e){};
/**
 * @class
 * @returns {dojox.grid._SelectorContentBuilder.generateHtml} new instance
*/
dojox.grid._SelectorContentBuilder.generateHtml=function(){};
/**
 * @class
 * @returns {dojox.grid._SelectorContentBuilder.doclick} new instance
*/
dojox.grid._SelectorContentBuilder.doclick=function(){};
/**
 * @class
 * @private
 * @returns {dojox.grid._InputSelectorContentBuilder} new instance
*/
dojox.grid._InputSelectorContentBuilder=function(){};
/**
 * @param {mixed} rowIndex 
 * @memberOf dojox.grid._InputSelectorContentBuilder
*/
dojox.grid._InputSelectorContentBuilder.prototype.getCellContent=function(rowIndex){};
/**
 * @class
 * @returns {dojox.grid._InputSelectorContentBuilder.getCellContent} new instance
*/
dojox.grid._InputSelectorContentBuilder.getCellContent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Custom grid view. If used in a grid structure, provides a small selectable region for grid rows.<br>
 *	 <br>
 *	 <br>
 *	 styling<br>
 *	 <br>
 *	 <br>
 *	 event handlers<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid._Selector} new instance
*/
dojox.grid._Selector=function(){};
/**
 * @param {mixed} s 
 * @memberOf dojox.grid._Selector
*/
dojox.grid._Selector.prototype.setStructure=function(s){};
/**
 * @memberOf dojox.grid._Selector
*/
dojox.grid._Selector.prototype.resize=function(){};
/**
 * @memberOf dojox.grid._Selector
*/
dojox.grid._Selector.prototype.postCreate=function(){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid._Selector
*/
dojox.grid._Selector.prototype.onSelected=function(inIndex){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid._Selector
*/
dojox.grid._Selector.prototype.onDeselected=function(inIndex){};
/**
 * @memberOf dojox.grid._Selector
*/
dojox.grid._Selector.prototype.getWidth=function(){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._Selector
*/
dojox.grid._Selector.prototype.doStyleRowNode=function(inRowIndex, inRowNode){};
/**
 * @memberOf dojox.grid._Selector
*/
dojox.grid._Selector.prototype.buildRendering=function(){};
/**
 * @memberOf dojox.grid._Selector
*/
dojox.grid._Selector.prototype.adaptWidth=function(){};
/**
 * @class
 * @param {mixed} kwArgs 
 * @returns {dojox.grid._TreeAggregator} new instance
*/
dojox.grid._TreeAggregator=function(kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Empty function so that we can set &amp;quot;aggregate='value'&amp;quot; to<br>
 *	 force loading from the data - and bypass calculating<br>
 * </blockquote>
 * @param {mixed} cell 
 * @param {mixed} level 
 * @param {mixed} item 
 * @memberOf dojox.grid._TreeAggregator
*/
dojox.grid._TreeAggregator.prototype.value=function(cell, level, item){};
/**
 * <b>Summary:</b><blockquote>
 *	 calculates the sum of the children of item at the given level<br>
 * </blockquote>
 * @param {mixed} cell 
 * @param {mixed} level 
 * @param {mixed} item 
 * @memberOf dojox.grid._TreeAggregator
*/
dojox.grid._TreeAggregator.prototype.sum=function(cell, level, item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the value of the given cell at the given level and type.<br>
 *	 type can be one of &amp;quot;sum&amp;quot;, &amp;quot;cnt&amp;quot;, or &amp;quot;value&amp;quot;.  If itemAggregates<br>
 *	 is set and can be used, it is used instead.  Values are also<br>
 *	 cached to prevent calculating them too often.<br>
 * </blockquote>
 * @param {mixed} cell 
 * @param {mixed} level 
 * @param {mixed} item 
 * @param {mixed} type 
 * @memberOf dojox.grid._TreeAggregator
*/
dojox.grid._TreeAggregator.prototype.getForCell=function(cell, level, item, type){};
/**
 * <b>Summary:</b><blockquote>
 *	 calculates the count of the children of item at the given level<br>
 * </blockquote>
 * @param {mixed} cell 
 * @param {mixed} level 
 * @param {mixed} item 
 * @memberOf dojox.grid._TreeAggregator
*/
dojox.grid._TreeAggregator.prototype.cnt=function(cell, level, item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clears the subtotal cache so that we are forced to recalc it<br>
 *	 (or reread it) again.  This is needed, for example, when<br>
 *	 column order is changed.<br>
 * </blockquote>
 * @memberOf dojox.grid._TreeAggregator
*/
dojox.grid._TreeAggregator.prototype.clearSubtotalCache=function(){};
/**
 * @param {mixed} cache 
 * @param {mixed} id 
 * @param {mixed} value 
 * @private
 * @memberOf dojox.grid._TreeAggregator
*/
dojox.grid._TreeAggregator.prototype._cacheValue=function(cache, id, value){};
/**
 * @class
 * @returns {dojox.grid._TreeLayout} new instance
*/
dojox.grid._TreeLayout=function(){};
/**
 * @param {mixed} inStructure 
 * @memberOf dojox.grid._TreeLayout
*/
dojox.grid._TreeLayout.prototype.setStructure=function(inStructure){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inCellIndex 
 * @param {mixed} inDef 
 * @memberOf dojox.grid._TreeLayout
*/
dojox.grid._TreeLayout.prototype.addCellDef=function(inRowIndex, inCellIndex, inDef){};
/**
 * @param {mixed} inStructure 
 * @private
 * @memberOf dojox.grid._TreeLayout
*/
dojox.grid._TreeLayout.prototype._getInternalStructure=function(inStructure){};
/**
 * @namespace
*/
dojox.grid._TreeLayout.grid={};
/**
 * @class
 * @param {String|Integer[]|Integer|dojox.grid.TreePath} path 
 * @param {dojox.grid.TreeGrid} grid 
 * @returns {dojox.grid.TreePath} new instance
*/
dojox.grid.TreePath=function(path, grid){};
/**
 * @namespace
*/
dojox.grid.TreePath.grid={};
/**
 * @memberOf dojox.grid.TreePath
*/
dojox.grid.TreePath.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the path that is before this path in the<br>
 *	 grid. If no path is found, returns null.<br>
 * </blockquote>
 * @memberOf dojox.grid.TreePath
*/
dojox.grid.TreePath.prototype.previous=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the parent path of this path.  If this is a<br>
 *	 top-level row, returns null.<br>
 * </blockquote>
 * @memberOf dojox.grid.TreePath
*/
dojox.grid.TreePath.prototype.parent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the next path in the grid.  If no path<br>
 *	 is found, returns null.<br>
 * </blockquote>
 * @memberOf dojox.grid.TreePath
*/
dojox.grid.TreePath.prototype.next=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the last child row below this path.  If traverse<br>
 *	 is true, will traverse down to find the last child row<br>
 *	 of this branch.  If there are no children, returns itself.<br>
 * </blockquote>
 * @param {Boolean} [traverse] 
 * @memberOf dojox.grid.TreePath
*/
dojox.grid.TreePath.prototype.lastChild=function(traverse){};
/**
 * <b>Summary:</b><blockquote>
 *	 gets the dojo.data item associated with this path<br>
 * </blockquote>
 * @memberOf dojox.grid.TreePath
*/
dojox.grid.TreePath.prototype.item=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the open state of this cell.<br>
 * </blockquote>
 * @memberOf dojox.grid.TreePath
*/
dojox.grid.TreePath.prototype.isOpen=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 compares two paths<br>
 * </blockquote>
 * @param {dojox.grid.TreePath|String|Array} path 
 * @memberOf dojox.grid.TreePath
*/
dojox.grid.TreePath.prototype.compare=function(path){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the child data items of this row.  If this<br>
 *	 row isn't open and alwaysReturn is falsey, returns null.<br>
 * </blockquote>
 * @param {mixed} alwaysReturn 
 * @memberOf dojox.grid.TreePath
*/
dojox.grid.TreePath.prototype.children=function(alwaysReturn){};
/**
 * @memberOf dojox.grid.TreePath
*/
dojox.grid.TreePath.prototype.childPaths=function(){};
/**
 * @class
 * @returns {dojox.grid._TreeFocusManager} new instance
*/
dojox.grid._TreeFocusManager=function(){};
/**
 * @param {mixed} inCell 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._TreeFocusManager
*/
dojox.grid._TreeFocusManager.prototype.setFocusCell=function(inCell, inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 focus previous grid cell<br>
 * </blockquote>
 * @memberOf dojox.grid._TreeFocusManager
*/
dojox.grid._TreeFocusManager.prototype.previous=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 focus next grid cell<br>
 * </blockquote>
 * @memberOf dojox.grid._TreeFocusManager
*/
dojox.grid._TreeFocusManager.prototype.next=function(){};
/**
 * @param {mixed} inRowDelta 
 * @param {mixed} inColDelta 
 * @memberOf dojox.grid._TreeFocusManager
*/
dojox.grid._TreeFocusManager.prototype.move=function(inRowDelta, inColDelta){};
/**
 * @memberOf dojox.grid._TreeFocusManager
*/
dojox.grid._TreeFocusManager.prototype.isLastFocusCell=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A grid that supports nesting rows - it provides an expando function<br>
 *	 similar to dijit.Tree.  It also provides mechanisms for aggregating<br>
 *	 the values of subrows<br>
 * </blockquote>
 * TreeGrid currently only works on "simple" structures.  That is,<br>
 * single-view structures with a single row in them.<br>
 * <br>
 * The TreeGrid works using the concept of "levels" - level 0 are the<br>
 * top-level items.
 * @class
 * @returns {dojox.grid.TreeGrid} new instance
*/
dojox.grid.TreeGrid=function(){};
/**
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.treeModel=null;
/**
 * @namespace
*/
dojox.grid.TreeGrid.aggregator={};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.styleRowNode=function(inRowIndex, inRowNode){};
/**
 * @param {mixed} treeModel 
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.setModel=function(treeModel){};
/**
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.postCreate=function(){};
/**
 * @param {mixed} row 
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.onStyleRow=function(row){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.onKeyDown=function(e){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.onCanSelect=function(inRowIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 overridden so that you can pass in a '/' delimited string of indexes to get the<br>
 *	 item based off its path...that is, passing in &amp;quot;1/3/2&amp;quot; will get the<br>
 *	 3rd (0-based) child from the 4th child of the 2nd top-level item.<br>
 * </blockquote>
 * @param {integer|Array|String} idx 
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.getItem=function(idx){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the default open state for the given definition and item<br>
 *	 It reads from the openAtLevels and defaultOpen values of the<br>
 *	 grid to calculate if the given item should default to open or<br>
 *	 not.<br>
 * </blockquote>
 * @param {mixed} cellDef 
 * @param {mixed} item 
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.getDefaultOpenState=function(cellDef, item){};
/**
 * @param {mixed} inValue 
 * @param {mixed} inRowIndex 
 * @param {mixed} inAttrName 
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.doApplyCellEdit=function(inValue, inRowIndex, inAttrName){};
/**
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.createSelection=function(){};
/**
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.createScroller=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 create grid managers for various tasks including rows, focus, selection, editing<br>
 * </blockquote>
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.createManagers=function(){};
/**
 * @param {mixed} inCell 
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype.canEdit=function(inCell, inRowIndex){};
/**
 * @param {mixed} store 
 * @private
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype._setStore=function(store){};
/**
 * @param {mixed} treeModel 
 * @private
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype._setModel=function(treeModel){};
/**
 * @param {mixed} item 
 * @param {mixed} attribute 
 * @param {mixed} oldValue 
 * @param {mixed} newValue 
 * @private
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype._onSet=function(item, attribute, oldValue, newValue){};
/**
 * @param {mixed} item 
 * @param {mixed} parentInfo 
 * @private
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype._onNew=function(item, parentInfo){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype._onDelete=function(item){};
/**
 * @param {mixed} item 
 * @param {mixed} isDeleted 
 * @private
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype._getItemIndex=function(item, isDeleted){};
/**
 * @param {mixed} index 
 * @param {mixed} identity 
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype._cleanupExpandoCache=function(index, identity, item){};
/**
 * @param {mixed} a 
 * @param {mixed} b 
 * @param {mixed} attribute 
 * @param {mixed} descending 
 * @private
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype._childItemSorter=function(a, b, attribute, descending){};
/**
 * @param {mixed} item 
 * @param {mixed} index 
 * @param {mixed} noUpdate 
 * @param {mixed} dontUpdateRoot 
 * @private
 * @memberOf dojox.grid.TreeGrid
*/
dojox.grid.TreeGrid.prototype._addItem=function(item, index, noUpdate, dontUpdateRoot){};
/**
 * @memberOf dojox.grid.TreeGrid.treeModel
*/
dojox.grid.TreeGrid.treeModel.childrenAttrs=[];
/**
 * @class
 * @returns {dojox.grid.TreeSelection} new instance
*/
dojox.grid.TreeSelection=function(){};
/**
 * @param {mixed} mode 
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype.setMode=function(mode){};
/**
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype.getSelectedCount=function(){};
/**
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype.getSelected=function(){};
/**
 * @param {mixed} inPrev 
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype.getNextSelected=function(inPrev){};
/**
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype.getFirstSelected=function(){};
/**
 * @param {mixed} inItemOrIndex 
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype.deselect=function(inItemOrIndex){};
/**
 * @param {mixed} inItemOrIndex 
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype.addToSelection=function(inItemOrIndex){};
/**
 * @param {mixed} index 
 * @private
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype._removeSortedSelection=function(index){};
/**
 * @param {mixed} inFrom 
 * @param {mixed} inTo 
 * @param {mixed} func 
 * @private
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype._range=function(inFrom, inTo, func){};
/**
 * @param {mixed} index 
 * @private
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype._insertSortedSelection=function(index){};
/**
 * @param {mixed} a 
 * @param {mixed} b 
 * @private
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype._comparePaths=function(a, b){};
/**
 * @param {mixed} v 
 * @private
 * @memberOf dojox.grid.TreeSelection
*/
dojox.grid.TreeSelection.prototype._bsearch=function(v){};
/**
 * @namespace
*/
dojox.grid.TreeSelection.grid={};
/**
 * @class
 * @returns {dojox.grid._Expando} new instance
*/
dojox.grid._Expando=function(){};
/**
 * @namespace
*/
dojox.grid._Expando.view={};
/**
 * @param {mixed} rowIdx 
 * @param {mixed} rowNode 
 * @param {mixed} view 
 * @memberOf dojox.grid._Expando
*/
dojox.grid._Expando.prototype.setRowNode=function(rowIdx, rowNode, view){};
/**
 * @param {mixed} open 
 * @memberOf dojox.grid._Expando
*/
dojox.grid._Expando.prototype.setOpen=function(open){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._Expando
*/
dojox.grid._Expando.prototype.onToggle=function(e){};
/**
 * @param {mixed} toggleClass 
 * @param {mixed} open 
 * @private
 * @memberOf dojox.grid._Expando
*/
dojox.grid._Expando.prototype._toggleRows=function(toggleClass, open){};
/**
 * @param {mixed} open 
 * @private
 * @memberOf dojox.grid._Expando
*/
dojox.grid._Expando.prototype._setOpen=function(open){};
/**
 * @class
 * @returns {dojox.grid._TreeContentBuilder} new instance
*/
dojox.grid._TreeContentBuilder=function(){};
/**
 * @param {mixed} inRowNode 
 * @param {mixed} inCellIndex 
 * @memberOf dojox.grid._TreeContentBuilder
*/
dojox.grid._TreeContentBuilder.prototype.getCellNode=function(inRowNode, inCellIndex){};
/**
 * @param {mixed} inDataIndex 
 * @param {mixed} inRowIndex 
 * @returns {String} -
 * @memberOf dojox.grid._TreeContentBuilder
*/
dojox.grid._TreeContentBuilder.prototype.generateHtml=function(inDataIndex, inRowIndex){};
/**
 * @param {mixed} inSource 
 * @param {mixed} inTag 
 * @memberOf dojox.grid._TreeContentBuilder
*/
dojox.grid._TreeContentBuilder.prototype.findTarget=function(inSource, inTag){};
/**
 * @param {mixed} e 
 * @returns {Boolean} -
 * @memberOf dojox.grid._TreeContentBuilder
*/
dojox.grid._TreeContentBuilder.prototype.decorateEvent=function(e){};
/**
 * @class
 * @returns {dojox.grid._TreeView} new instance
*/
dojox.grid._TreeView=function(){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._TreeView
*/
dojox.grid._TreeView.prototype.updateRowStyles=function(inRowIndex){};
/**
 * @memberOf dojox.grid._TreeView
*/
dojox.grid._TreeView.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.grid._TreeView
*/
dojox.grid._TreeView.prototype.postCreate=function(){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} cells 
 * @memberOf dojox.grid._TreeView
*/
dojox.grid._TreeView.prototype.onBeforeRow=function(inRowIndex, cells){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} cells 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._TreeView
*/
dojox.grid._TreeView.prototype.onAfterRow=function(inRowIndex, cells, inRowNode){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inCellIndex 
 * @memberOf dojox.grid._TreeView
*/
dojox.grid._TreeView.prototype.getCellNode=function(inRowIndex, inCellIndex){};
/**
 * @memberOf dojox.grid._TreeView
*/
dojox.grid._TreeView.prototype.destroy=function(){};
/**
 * @param {mixed} source 
 * @param {mixed} nodes 
 * @param {mixed} copy 
 * @private
 * @memberOf dojox.grid._TreeView
*/
dojox.grid._TreeView.prototype._onDndDrop=function(source, nodes, copy){};
/**
 * @param {mixed} index 
 * @param {mixed} identity 
 * @param {mixed} item 
 * @private
 * @memberOf dojox.grid._TreeView
*/
dojox.grid._TreeView.prototype._cleanupExpandoCache=function(index, identity, item){};
/**
 * <b>Summary:</b><blockquote>
 *	 A collection of grid columns. A grid is comprised of a set of views that stack horizontally.<br>
 *	 Grid creates views automatically based on grid's layout structure.<br>
 *	 Users should typically not need to access individual views directly.<br>
 * </blockquote>
 * @class
 * @returns {dojox.grid._View} new instance
*/
dojox.grid._View=function(){};
/**
 * @namespace
*/
dojox.grid._View.source={};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.updateStructure=function(){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.updateRowStyles=function(inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.updateRow=function(inRowIndex){};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.update=function(){};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.testFlexCells=function(){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.styleRowNode=function(inRowIndex, inRowNode){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.styleRow=function(inRowIndex, inRowNode){};
/**
 * @param {mixed} inStructure 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.setStructure=function(inStructure){};
/**
 * @param {mixed} w 
 * @param {mixed} h 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.setSize=function(w, h){};
/**
 * @param {mixed} inTop 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.setScrollTop=function(inTop){};
/**
 * @param {mixed} width 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.setColumnsWidth=function(width){};
/**
 * @param {mixed} inIndex 
 * @param {mixed} inWidth 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.setColWidth=function(inIndex, inWidth){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.rowRemoved=function(inRowIndex){};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.resize=function(){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.renderRow=function(inRowIndex){};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.renderHeader=function(){};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.render=function(){};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.postCreate=function(){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} cells 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.onBeforeRow=function(inRowIndex, cells){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} cells 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.onAfterRow=function(inRowIndex, cells, inRowNode){};
/**
 * @param {mixed} reset 
 * @returns {Boolean} -
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.hasVScrollbar=function(reset){};
/**
 * @param {mixed} reset 
 * @returns {Boolean} -
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.hasHScrollbar=function(reset){};
/**
 * @returns {String} -
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.getWidth=function(){};
/**
 * @returns {Integer} -
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.getScrollbarWidth=function(){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.getRowNode=function(inRowIndex){};
/**
 * @param {mixed} inCellIndex 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.getHeaderCellNode=function(inCellIndex){};
/**
 * @returns {String} -
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.getContentWidth=function(){};
/**
 * @returns {Integer} -
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.getColumnsWidth=function(){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inCellIndex 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.getCellNode=function(inRowIndex, inCellIndex){};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.focus=function(){};
/**
 * @param {mixed} inEvent 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.doscroll=function(inEvent){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.doStyleRowNode=function(inRowIndex, inRowNode){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.doHeaderEvent=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.doContentEvent=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.dispatchHeaderEvent=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.dispatchContentEvent=function(e){};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.destroy=function(){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.createRowNode=function(inRowIndex){};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.convertColPctToFixed=function(){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.buildRowContent=function(inRowIndex, inRowNode){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inRowNode 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.buildRow=function(inRowIndex, inRowNode){};
/**
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.adaptWidth=function(){};
/**
 * @param {mixed} minusScroll 
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype.adaptHeight=function(minusScroll){};
/**
 * @param {mixed} source 
 * @param {mixed} nodes 
 * @param {mixed} copy 
 * @private
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype._onDndDropBefore=function(source, nodes, copy){};
/**
 * @param {mixed} source 
 * @param {mixed} nodes 
 * @param {mixed} copy 
 * @private
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype._onDndDrop=function(source, nodes, copy){};
/**
 * @private
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype._onBeforeRow=function(){};
/**
 * @private
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype._onAfterRow=function(){};
/**
 * @param {mixed} node 
 * @private
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype._hide=function(node){};
/**
 * @param {mixed} inCell 
 * @private
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype._getHeaderContent=function(inCell){};
/**
 * @param {mixed} inRowNode 
 * @private
 * @memberOf dojox.grid._View
*/
dojox.grid._View.prototype._cleanupRowWidgets=function(inRowNode){};
/**
 * @namespace
*/
dojox.grid._View.grid={};
/**
 * @namespace
*/
dojox.grid._View.domNode={};
/**
 * @namespace
*/
dojox.grid._View.headerNode={};
/**
 * @namespace
*/
dojox.grid._View.scrollboxNode={};
/**
 * @class
 * @returns {dojox.grid._GridAvatar} new instance
*/
dojox.grid._GridAvatar=function(){};
/**
 * @memberOf dojox.grid._GridAvatar
*/
dojox.grid._GridAvatar.prototype.destroy=function(){};
/**
 * @memberOf dojox.grid._GridAvatar
*/
dojox.grid._GridAvatar.prototype.construct=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A collection of grid views. Owned by grid and used internally for managing grid views.<br>
 * </blockquote>
 * Grid creates views automatically based on grid's layout structure.<br>
 * Users should typically not need to access individual views or the views collection directly.
 * @class
 * @param {mixed} inGrid 
 * @returns {dojox.grid._ViewManager} new instance
*/
dojox.grid._ViewManager=function(inGrid){};
/**
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.views=[];
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.updateRowStyles=function(inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} skipRenorm 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.updateRow=function(inRowIndex, skipRenorm){};
/**
 * @param {mixed} inTop 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.setScrollTop=function(inTop){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.rowRemoved=function(inRowIndex){};
/**
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.resize=function(){};
/**
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.resetHeaderNodeHeight=function(){};
/**
 * @param {mixed} inRowIndex 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.renormalizeRow=function(inRowIndex){};
/**
 * @param {mixed} inRowIndex 
 * @param {mixed} inNodes 
 * @param {mixed} skipRenorm 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.renderRow=function(inRowIndex, inNodes, skipRenorm){};
/**
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.render=function(){};
/**
 * @param {mixed} inMethod 
 * @param {mixed} inArgs 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.onEach=function(inMethod, inArgs){};
/**
 * @param {mixed} inRowNodes 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.normalizeRowNodeHeights=function(inRowNodes){};
/**
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.normalizeHeaderNodeHeight=function(){};
/**
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.measureHeader=function(){};
/**
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.measureContent=function(){};
/**
 * @param {mixed} inIndex 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.getViewWidth=function(inIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the first grid view with a scroll bar<br>
 * </blockquote>
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.getFirstScrollingView=function(){};
/**
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.getContentNodes=function(){};
/**
 * @param {mixed} inCallback 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.forEach=function(inCallback){};
/**
 * @param {mixed} inAutoWidth 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.findClient=function(inAutoWidth){};
/**
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.destroyViews=function(){};
/**
 * @param {mixed} l 
 * @param {mixed} w 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.arrange=function(l, w){};
/**
 * @param {mixed} inView 
 * @memberOf dojox.grid._ViewManager
*/
dojox.grid._ViewManager.prototype.addView=function(inView){};
/**
 * <b>Summary:</b><blockquote>
 *	 Useful if you reset some values, and want to restore their<br>
 *	 help function<br>
 * </blockquote>
 * @param {String} [namespace] The string-representation of a namespace.
 * @param {Boolean} [recursive] Whether to recurse through the namespace.
*/
dojox.help.refresh=function(namespace, recursive){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use this function when you want to resolve the problems<br>
 *	 created by including a dojox.help package.<br>
 * </blockquote>
 * @param {Object} [item] If you pass an item, only that item will be cleaned
*/
dojox.help.noConflict=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Search for dojo functionality that has something to do with the given string.<br>
 * </blockquote>
 * Search for locally available data; variable names and any cached<br>
 * documentation results for matches containing our search parameter<br>
 * searchFor<br>
 * The string to search for.
 * @param {String} searchFor 
 * @param {String|Object|String[]|Object[]} searchIn The namespaces to search in. Defaults to dojox.help._namespaces
 * @param {Number} maxResults The maximum number of results.
*/
dojox.help.locate=function(searchFor, searchIn, maxResults){};
/**
 * <b>Summary:</b><blockquote>
 *	 Should be called by one of the implementations. Runs startup code<br>
 * </blockquote>
 * @param {String[]} namespaces Any namespaces to add to the default (dojox.help._namespaces)
 * @param {Boolen} [noConflict] Whether to start in noConflict mode
*/
dojox.help.init=function(namespaces, noConflict){};
/**
 * @param {mixed} data 
 * @private
*/
dojox.help._toString=function(data){};
/**
 * @param {mixed} original 
 * @private
*/
dojox.help._stripPrototype=function(original){};
/**
 * @param {String} [namespace] 
 * @param {Boolean} [recursive] 
 * @private
*/
dojox.help._recurse=function(namespace, recursive){};
/**
 * @param {mixed} str 
 * @private
*/
dojox.help._plainText=function(str){};
/**
 * @param {mixed} data 
 * @private
*/
dojox.help._parse=function(data){};
/**
 * @param {mixed} item 
 * @private
*/
dojox.help._noConflict=function(item){};
/**
 * @private
*/
dojox.help._help=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to be overridden in one of the dojox.help packages<br>
 * </blockquote>
 * @param {mixed} located 
 * @private
*/
dojox.help._displayLocated=function(located){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to be overridden in one of the dojox.help packages<br>
 * </blockquote>
 * @param {mixed} loading 
 * @param {mixed} obj 
 * @private
*/
dojox.help._displayHelp=function(loading, obj){};
/**
 * @param {mixed} self 
 * @private
*/
dojox.help._clean=function(self){};
/**
 * @param {mixed} obj 
 * @private
*/
dojox.help._addVersion=function(obj){};
/**
 * @private
*/
dojox.help.__toString=function(){};
/**
 * @param {mixed} namespace 
 * @param {mixed} root 
 * @param {mixed} name 
 * @param {mixed} items 
 * @param {mixed} recursive 
 * @private
*/
dojox.help.__recurse=function(namespace, root, name, items, recursive){};
/**
 * @class
 * @private
 * @returns {dojox.help._help} new instance
*/
dojox.help._help=function(){};
/**
 * @class
 * @private
 * @returns {dojox.help._parse} new instance
*/
dojox.help._parse=function(){};
/**
 * @class
 * @private
 * @returns {dojox.help._toString} new instance
*/
dojox.help._toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 highlight a string of text<br>
 * </blockquote>
 * @param {String} str 
 * @param {String} [lang] 
*/
dojox.highlight.processString=function(str, lang){};
/**
 * <b>Summary:</b><blockquote>
 *	 Highlight a passed node<br>
 * </blockquote>
 * Syntax highlight a passed DomNode or String ID of a DomNode
 * @param {String|DomNode} node 
 * @returns {stop iterations|continue iterations} -
 * @example
 * 	dojox.highlight.init("someId");
*/
dojox.highlight.init=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Class object to allow for dojoType usage with the highlight engine. This is<br>
 *	 NOT a Widget in the conventional sense, and does not have any member functions for<br>
 *	 the instance. This is provided as a convenience. You likely should be calling<br>
 *	 `dojox.highlight.init` directly.<br>
 * </blockquote>
 * @param {Object} [props] Unused. Pass 'null' or {}. Positional usage to allow `dojo.parser` to instantiate
 * this class as other Widgets would be.
 * @param {String|DomNode} node A String ID or DomNode reference to use as the root node of this instance.
 * @example
 * 	&lt;pre&gt;&lt;code dojoType="dojox.highlight.Code"&gt;for(var i in obj){ ... }&lt;/code&gt;&lt;/pre&gt;
 * @example
 * 	var inst = new dojox.highlight.Code({}, "someId");
*/
dojox.highlight.Code=function(props, node){};
/**
 * @namespace
*/
dojox.highlight.widget={};
/**
 * @namespace
*/
dojox.highlight.languages={};
/**
 * <b>Summary:</b><blockquote>
 *	 A Class object to allow for dojoType usage with the highlight engine. This is<br>
 *	 NOT a Widget in the conventional sense, and does not have any member functions for<br>
 *	 the instance. This is provided as a convenience. You likely should be calling<br>
 *	 `dojox.highlight.init` directly.<br>
 * </blockquote>
 * @class
 * @returns {dojox.highlight.Code} new instance
 * @example
 * 	&lt;pre&gt;&lt;code dojoType="dojox.highlight.Code"&gt;for(var i in obj){ ... }&lt;/code&gt;&lt;/pre&gt;
 * @example
 * 	var inst = new dojox.highlight.Code({}, "someId");
*/
dojox.highlight.Code=function(){};
/**
 * @namespace
*/
dojox.highlight.languages.xquery={};
/**
 * @namespace
*/
dojox.highlight.languages.xml={};
/**
 * @namespace
*/
dojox.highlight.languages.sql={};
/**
 * @namespace
*/
dojox.highlight.languages.python={};
/**
 * @namespace
*/
dojox.highlight.languages.pygments={};
/**
 * @namespace
*/
dojox.highlight.languages.javascript={};
/**
 * @namespace
*/
dojox.highlight.languages.java={};
/**
 * @namespace
*/
dojox.highlight.languages.html={};
/**
 * @namespace
*/
dojox.highlight.languages.groovy={};
/**
 * @namespace
*/
dojox.highlight.languages.django={};
/**
 * @namespace
*/
dojox.highlight.languages.delphi={};
/**
 * @namespace
*/
dojox.highlight.languages.css={};
/**
 * @namespace
*/
dojox.highlight.languages.cpp={};
/**
 * @namespace
*/
dojox.highlight.languages.cpp.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.cpp.defaultMode.keywords={};
/**
 * @namespace
*/
dojox.dh={};
/**
 * @namespace
*/
dh.languages={};
/**
 * @namespace
*/
dh.languages.css={};
/**
 * @namespace
*/
dh.languages.css.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.delphi.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.django.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.groovy.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.html.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.java.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.javascript.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.javascript.defaultMode.keywords={};
/**
 * @namespace
*/
dojox.highlight.languages.css.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.css.defaultMode.keywords={};
/**
 * @namespace
*/
dojox.highlight.languages.css.defaultMode.keywords.keyword={};
/**
 * @namespace
 * @private
*/
dojox.highlight.languages.pygments._html={};
/**
 * @namespace
*/
dojox.highlight.languages.pygments._html.tags={};
/**
 * @namespace
*/
dojox.highlight.languages.xml.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.python.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.python.defaultMode.keywords={};
/**
 * @namespace
*/
dojox.highlight.languages.sql.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.sql.defaultMode.keywords={};
/**
 * @namespace
*/
dojox.highlight.languages.sql.defaultMode.keywords.aggregate={};
/**
 * @namespace
*/
dojox.highlight.languages.xquery.defaultMode={};
/**
 * @namespace
*/
dojox.highlight.languages.xquery.defaultMode.keywords={};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple source code formatting widget that adds line numbering, alternating line colors<br>
 *	 and line range support on top of dojox.highlight module.<br>
 * </blockquote>
*/
dojox.highlight.widget.Code=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple source code formatting widget that adds line numbering, alternating line colors<br>
 *	 and line range support on top of dojox.highlight module.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @returns {dojox.highlight.widget.Code} new instance
*/
dojox.highlight.widget.Code=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 update the view to a new passed range<br>
 * </blockquote>
 * @param {Array} range 
 * @memberOf dojox.highlight.widget.Code
*/
dojox.highlight.widget.Code.prototype.setRange=function(range){};
/**
 * @memberOf dojox.highlight.widget.Code
*/
dojox.highlight.widget.Code.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the list to the current range<br>
 * </blockquote>
 * @private
 * @memberOf dojox.highlight.widget.Code
*/
dojox.highlight.widget.Code.prototype._updateView=function(){};
/**
 * @param {mixed} data 
 * @private
 * @memberOf dojox.highlight.widget.Code
*/
dojox.highlight.widget.Code.prototype._populate=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 a generic error handler for the url=&amp;quot;&amp;quot;<br>
 * </blockquote>
 * @param {mixed} error 
 * @private
 * @memberOf dojox.highlight.widget.Code
*/
dojox.highlight.widget.Code.prototype._loadError=function(error){};
/**
 * @class
 * @returns {dojox.html._ContentSetter} new instance
*/
dojox.html._ContentSetter=function(){};
/**
 * @memberOf dojox.html._ContentSetter
*/
dojox.html._ContentSetter.prototype.tearDown=function(){};
/**
 * @memberOf dojox.html._ContentSetter
*/
dojox.html._ContentSetter.prototype.onEnd=function(){};
/**
 * @memberOf dojox.html._ContentSetter
*/
dojox.html._ContentSetter.prototype.onBegin=function(){};
/**
 * @memberOf dojox.html._ContentSetter
*/
dojox.html._ContentSetter.prototype.empty=function(){};
/**
 * @param {mixed} styles 
 * @private
 * @memberOf dojox.html._ContentSetter
*/
dojox.html._ContentSetter.prototype._renderStyles=function(styles){};
/**
 * <b>Summary:</b><blockquote>
 *	 Preload a list of images in the dom.<br>
 * </blockquote>
 * @param {Array} urls The list of urls to load. Can be any valid .src attribute.
 * @example
 * Load two images into cache:
 * 	dojox.image.preload(["foo.png", "bar.gif"]);
 * @example
 * Using djConfig:
 * 	var djConfig = {
 * 		preloadImages:["bar.png", "baz.png", "http://example.com/icon.gif"]
 * 	};
*/
dojox.image.preload=function(urls){};
/**
 * <b>Summary:</b><blockquote>
 *	 A scrolling Thumbnail Picker widget<br>
 * </blockquote>
*/
dojox.image.ThumbnailPicker=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Slideshow Widget<br>
 * </blockquote>
*/
dojox.image.SlideShow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds magnification on a portion of an image element<br>
 * </blockquote>
 * An unobtrusive way to add an unstyled overlay<br>
 * above the srcNode image element. The overlay/glass is a<br>
 * scaled version of the src image (so larger images sized down<br>
 * are clearer).<br>
 * <br>
 * The logic behind requiring the src image to be large is<br>
 * "it's going to be downloaded, anyway" so this method avoids<br>
 * having to make thumbnails and 2 http requests among other things.<br>
*/
dojox.image.MagnifierLite=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds magnification on a portion of an image element, using `dojox.gfx`<br>
 * </blockquote>
 * An unobtrusive way to add an unstyled overlay<br>
 * above the srcNode image element. The overlay/glass is a<br>
 * scaled version of the src image (so larger images sized down<br>
 * are clearer).<br>
 * <br>
 * over-ride the _createGlass method to create your custom surface,<br>
 * being sure to create an img node on that surface.<br>
*/
dojox.image.Magnifier=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple &amp;quot;nano&amp;quot; version of the lightbox.<br>
 * </blockquote>
 * Very lightweight lightbox which only displays a larger image.  There is<br>
 * no support for a caption or description.  The lightbox can be closed by<br>
 * clicking any where or pressing any key.  This widget is intended to be<br>
 * used on &lt;a&gt; and &lt;img&gt; tags.  Upon creation, if the domNode is &lt;img&gt; tag,<br>
 * then it is wrapped in an &lt;a&gt; tag, then a &lt;div class="enlarge"&gt; is placed<br>
 * inside the &lt;a&gt; and can be styled to display an icon that the original<br>
 * can be enlarged.
 * @param {Object} [p] 
 * @param {DomNode} [n] 
 * @example
 * 	&lt;a dojoType="dojox.image.LightboxNano" href="/path/to/largeimage.jpg"&gt;&lt;img src="/path/to/thumbnail.jpg"&gt;&lt;/a&gt;
 * @example
 * 	&lt;img dojoType="dojox.image.LightboxNano" src="/path/to/thumbnail.jpg" href="/path/to/largeimage.jpg"&gt;
*/
dojox.image.LightboxNano=function(p, n){};
/**
 * <b>Summary:</b><blockquote>
 *	 The &amp;quot;dialog&amp;quot; shared	 between any Lightbox instances on the page, publically available<br>
 *	 for programatic manipulation.<br>
 * </blockquote>
 * A widget that intercepts anchor links (typically around images)<br>
 * and displays a modal Dialog. this is the actual Dialog, which you can<br>
 * create and populate manually, though should use simple Lightbox's<br>
 * unless you need the direct access.<br>
 * <br>
 * There should only be one of these on a page, so all dojox.image.Lightbox's will us it<br>
 * (the first instance of a Lightbox to be show()'n will create me If i do not exist)
 * @param {mixed} args 
 * @example
 * 	// show a single image from a url
 * 	var url = "http://dojotoolkit.org/logo.png";
 * 	var dialog = new dojox.image.LightboxDialog().startup();
 * 	dialog.show({ href: url, title:"My Remote Image"});
*/
dojox.image.LightboxDialog=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A dojo-based Lightbox implementation.<br>
 * </blockquote>
 * An Elegant, keyboard accessible, markup and store capable Lightbox widget to show images<br>
 * in a modal dialog-esque format. Can show individual images as Modal dialog, or can group<br>
 * images with multiple entry points, all using a single "master" Dialog for visualization<br>
 * <br>
 * key controls:<br>
 * ESC - close<br>
 * Down Arrow / Rt Arrow / N - Next Image<br>
 * Up Arrow / Lf Arrow / P - Previous Image
 * @example
 * 	&lt;a href="image1.jpg" dojoType="dojox.image.Lightbox"&gt;show lightbox&lt;/a&gt;
 * @example
 * 	&lt;a href="image2.jpg" dojoType="dojox.image.Lightbox" group="one"&gt;show group lightbox&lt;/a&gt;
 * 	&lt;a href="image3.jpg" dojoType="dojox.image.Lightbox" group="one"&gt;show group lightbox&lt;/a&gt;
 * @example
 * 	not implemented fully yet, though works with basic datastore access. need to manually call
 * 	widget._attachedDialog.addImage(item,"fromStore") for each item in a store result set.
 * 	&lt;div dojoType="dojox.image.Lightbox" group="fromStore" store="storeName"&gt;&lt;/div&gt;
*/
dojox.image.Lightbox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gallery widget that wraps a dojox.image.ThumbnailPicker and dojox.image.SlideShow widget<br>
 * </blockquote>
*/
dojox.image.Gallery=function(){};
/**
*/
dojox.image.FlickrBadge=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple grid of Images that loops through thumbnails<br>
 * </blockquote>
*/
dojox.image.Badge=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple grid of Images that loops through thumbnails<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.image.Badge} new instance
*/
dojox.image.Badge=function(){};
/**
 * @namespace
 * @private
*/
dojox.image.Badge._nl={};
/**
 * @memberOf dojox.image.Badge
*/
dojox.image.Badge.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 figure out which three images are being covered, and<br>
 *	 determine if they need loaded or not<br>
 * </blockquote>
 * @param {mixed} info 
 * @param {mixed} props 
 * @private
 * @memberOf dojox.image.Badge
*/
dojox.image.Badge.prototype._loadUnder=function(info, props){};
/**
 * <b>Summary:</b><blockquote>
 *	 Setup and layout the images<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.Badge
*/
dojox.image.Badge.prototype._init=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the next image in the list, or the first one if not available<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.Badge
*/
dojox.image.Badge.prototype._getImage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return information about the position for a given node<br>
 * </blockquote>
 * @param {DomNode} n 
 * @private
 * @memberOf dojox.image.Badge
*/
dojox.image.Badge.prototype._getCell=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the passed node in the picker<br>
 * </blockquote>
 * @param {Event|DomNode} e 
 * @private
 * @memberOf dojox.image.Badge
*/
dojox.image.Badge.prototype._enbiggen=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide the passed node (info.n), passing along properties<br>
 *	 received.<br>
 * </blockquote>
 * @param {mixed} info 
 * @param {mixed} props 
 * @private
 * @memberOf dojox.image.Badge
*/
dojox.image.Badge.prototype._disenbiggen=function(info, props){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select an un-viewed image from the list, and show it<br>
 * </blockquote>
 * @param {mixed} info 
 * @param {mixed} props 
 * @private
 * @memberOf dojox.image.Badge
*/
dojox.image.Badge.prototype._cycle=function(info, props){};
/**
 * @class
 * @extends dojox.image.Badge
 * @returns {dojox.image.FlickrBadge} new instance
*/
dojox.image.FlickrBadge=function(){};
/**
 * @memberOf dojox.image.FlickrBadge
*/
dojox.image.FlickrBadge.prototype.startup=function(){};
/**
 * @memberOf dojox.image.FlickrBadge
*/
dojox.image.FlickrBadge.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gallery widget that wraps a dojox.image.ThumbnailPicker and dojox.image.SlideShow widget<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @returns {dojox.image.Gallery} new instance
*/
dojox.image.Gallery=function(){};
/**
 * @memberOf dojox.image.Gallery
*/
dojox.image.Gallery.prototype.toggleSlideshow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Switches the slideshow mode on and off.<br>
 * </blockquote>
 * @memberOf dojox.image.Gallery
*/
dojox.image.Gallery.prototype.toggleSlideShow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes the image being displayed in the SlideShow to the next<br>
 *	 image in the data store<br>
 * </blockquote>
 * @param {Boolean} inTimer If true, a slideshow is active, otherwise the slideshow is inactive.
 * @memberOf dojox.image.Gallery
*/
dojox.image.Gallery.prototype.showNextImage=function(inTimer){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shows the image at index 'idx'.<br>
 *	 idx: Number<br>
 *	 The position of the image in the data store to display<br>
 * </blockquote>
 * @param {mixed} index 
 * @param {optional} callback Function Optional callback function to call when the image has finished displaying.
 * @memberOf dojox.image.Gallery
*/
dojox.image.Gallery.prototype.showImage=function(index, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the data store and request objects to read data from.<br>
 * </blockquote>
 * @param {An} dataStore implementation of the dojo.data.api.Read API. This accesses the image
 * data.
 * @param {An} request implementation of the dojo.data.api.Request API. This specifies the
 * query and paging information to be used by the data store
 * @param {optional} paramNames An object defining the names of the item attributes to fetch from the
 * data store.  The four attributes allowed are 'linkAttr', 'imageLargeAttr',<br>
 * 'imageThumbAttr' and 'titleAttr'
 * @memberOf dojox.image.Gallery
*/
dojox.image.Gallery.prototype.setDataStore=function(dataStore, request, paramNames){};
/**
 * @param {mixed} dim 
 * @memberOf dojox.image.Gallery
*/
dojox.image.Gallery.prototype.resize=function(dim){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resets the widget to its initial state<br>
 * </blockquote>
 * @memberOf dojox.image.Gallery
*/
dojox.image.Gallery.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes the widget, creates the ThumbnailPicker and SlideShow widgets<br>
 * </blockquote>
 * @memberOf dojox.image.Gallery
*/
dojox.image.Gallery.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ensures that the ThumbnailPicker and the SlideShow widgets<br>
 *	 are centered.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.Gallery
*/
dojox.image.Gallery.prototype._centerChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A dojo-based Lightbox implementation.<br>
 * </blockquote>
 * An Elegant, keyboard accessible, markup and store capable Lightbox widget to show images<br>
 * in a modal dialog-esque format. Can show individual images as Modal dialog, or can group<br>
 * images with multiple entry points, all using a single "master" Dialog for visualization<br>
 * <br>
 * key controls:<br>
 * ESC - close<br>
 * Down Arrow / Rt Arrow / N - Next Image<br>
 * Up Arrow / Lf Arrow / P - Previous Image
 * @class
 * @extends dijit._Widget
 * @returns {dojox.image.Lightbox} new instance
 * @example
 * 	&lt;a href="image1.jpg" dojoType="dojox.image.Lightbox"&gt;show lightbox&lt;/a&gt;
 * @example
 * 	&lt;a href="image2.jpg" dojoType="dojox.image.Lightbox" group="one"&gt;show group lightbox&lt;/a&gt;
 * 	&lt;a href="image3.jpg" dojoType="dojox.image.Lightbox" group="one"&gt;show group lightbox&lt;/a&gt;
 * @example
 * 	not implemented fully yet, though works with basic datastore access. need to manually call
 * 	widget._attachedDialog.addImage(item,"fromStore") for each item in a store result set.
 * 	&lt;div dojoType="dojox.image.Lightbox" group="fromStore" store="storeName"&gt;&lt;/div&gt;
*/
dojox.image.Lightbox=function(){};
/**
 * @memberOf dojox.image.Lightbox
*/
dojox.image.Lightbox.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the Lightbox with this instance as the starting point<br>
 * </blockquote>
 * @memberOf dojox.image.Lightbox
*/
dojox.image.Lightbox.prototype.show=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub fired when the image in the lightbox is clicked.<br>
 * </blockquote>
 * @memberOf dojox.image.Lightbox
*/
dojox.image.Lightbox.prototype.onClick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide the Lightbox currently showing<br>
 * </blockquote>
 * @memberOf dojox.image.Lightbox
*/
dojox.image.Lightbox.prototype.hide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enables the dialog (prevents default link)<br>
 * </blockquote>
 * @memberOf dojox.image.Lightbox
*/
dojox.image.Lightbox.prototype.enable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disables event clobbering and dialog, and follows natural link<br>
 * </blockquote>
 * @memberOf dojox.image.Lightbox
*/
dojox.image.Lightbox.prototype.disable=function(){};
/**
 * @memberOf dojox.image.Lightbox
*/
dojox.image.Lightbox.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle the click on the link<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.image.Lightbox
*/
dojox.image.Lightbox.prototype._handleClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add this instance to the master LightBoxDialog<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.Lightbox
*/
dojox.image.Lightbox.prototype._addSelf=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The &amp;quot;dialog&amp;quot; shared	 between any Lightbox instances on the page, publically available<br>
 *	 for programatic manipulation.<br>
 * </blockquote>
 * A widget that intercepts anchor links (typically around images)<br>
 * and displays a modal Dialog. this is the actual Dialog, which you can<br>
 * create and populate manually, though should use simple Lightbox's<br>
 * unless you need the direct access.<br>
 * <br>
 * There should only be one of these on a page, so all dojox.image.Lightbox's will us it<br>
 * (the first instance of a Lightbox to be show()'n will create me If i do not exist)
 * @class
 * @extends dijit.Dialog
 * @param {mixed} args 
 * @returns {dojox.image.LightboxDialog} new instance
 * @example
 * 	// show a single image from a url
 * 	var url = "http://dojotoolkit.org/logo.png";
 * 	var dialog = new dojox.image.LightboxDialog().startup();
 * 	dialog.show({ href: url, title:"My Remote Image"});
*/
dojox.image.LightboxDialog=function(args){};
/**
 * @namespace
 * @private
*/
dojox.image.LightboxDialog._groups={};
/**
 * <b>Summary:</b><blockquote>
 *	 Add some extra event handlers, and startup our superclass.<br>
 * </blockquote>
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the Master Dialog. Starts the chain of events to show<br>
 *	 an image in the dialog, including showing the dialog if it is<br>
 *	 not already visible<br>
 * </blockquote>
 * @param {Object} groupData needs href and title attributes. the values for this image.
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype.show=function(groupData){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize our dialog container, and fire _showImage<br>
 * </blockquote>
 * @param {Object} size 
 * @param {mixed} forceTitle 
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype.resizeTo=function(size, forceTitle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove an image instance from this LightboxDialog.<br>
 * </blockquote>
 * @param {Widget} child Object A reference to the Lightbox child that was added (or an object literal)
 * only the .href member is compared for uniqueness. The object may contain<br>
 * a .group member as well.
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype.removeImage=function(child){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove all images in a passed group<br>
 * </blockquote>
 * @param {mixed} group 
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype.removeGroup=function(group){};
/**
 * <b>Summary:</b><blockquote>
 *	 a stub function, called with the currently displayed image as the only argument<br>
 * </blockquote>
 * @param {mixed} groupData 
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype.onClick=function(groupData){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide the Master Lightbox<br>
 * </blockquote>
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype.hide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add an image to this Master Lightbox<br>
 * </blockquote>
 * @param {Object} child The image information to add.
 * href: String - link to image (required)<br>
 * title: String - title to display
 * @param {String} [group] attach to group of similar tag or null for individual image instance
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype.addImage=function(child, group){};
/**
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._size=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fade in the footer, and setup our connections.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._showNav=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fade in the image, and fire showNav<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._showImage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reset the image size to some actual size.<br>
 * </blockquote>
 * @param {mixed} size 
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._setImageSize=function(size){};
/**
 * <b>Summary:</b><blockquote>
 *	 resize an image to fit within the bounds of the viewport<br>
 * </blockquote>
 * @param {Object} size The 'size' object passed around for this image
 * @private
 * @returns {Object} -
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._scaleToFit=function(size){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function to trigger all 'real' showing of some src<br>
 * </blockquote>
 * @param {mixed} src 
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._ready=function(src){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load previous image in group<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._prevImage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A localized hook to accompany _loadImage<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._prepNodes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 we want to know the viewport size any time it changes<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._position=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._onImageClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load next image in group<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._nextImage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 make and cleanup animation and animation connections<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._makeAnims=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Do the prep work before we can show another image<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._loadImage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle keyboard navigation internally<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._handleKey=function(e){};
/**
 * @private
 * @memberOf dojox.image.LightboxDialog
*/
dojox.image.LightboxDialog.prototype._calcTitleSize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple &amp;quot;nano&amp;quot; version of the lightbox.<br>
 * </blockquote>
 * Very lightweight lightbox which only displays a larger image.  There is<br>
 * no support for a caption or description.  The lightbox can be closed by<br>
 * clicking any where or pressing any key.  This widget is intended to be<br>
 * used on &lt;a&gt; and &lt;img&gt; tags.  Upon creation, if the domNode is &lt;img&gt; tag,<br>
 * then it is wrapped in an &lt;a&gt; tag, then a &lt;div class="enlarge"&gt; is placed<br>
 * inside the &lt;a&gt; and can be styled to display an icon that the original<br>
 * can be enlarged.
 * @class
 * @param {Object} [p] 
 * @param {DomNode} [n] 
 * @returns {dojox.image.LightboxNano} new instance
 * @example
 * 	&lt;a dojoType="dojox.image.LightboxNano" href="/path/to/largeimage.jpg"&gt;&lt;img src="/path/to/thumbnail.jpg"&gt;&lt;/a&gt;
 * @example
 * 	&lt;img dojoType="dojox.image.LightboxNano" src="/path/to/thumbnail.jpg" href="/path/to/largeimage.jpg"&gt;
*/
dojox.image.LightboxNano=function(p, n){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shows this LightboxNano programatically. Allows passing a new href and<br>
 *	 a programatic origin.<br>
 * </blockquote>
 * @param {Object} [args] An object with optional members of `href` and `origin`.
 * `origin` can be be a String|Id of a DomNode to use when<br>
 * animating the openeing of the image (the 'box' effect starts<br>
 * from this origin point. eg: { origin: e.target })<br>
 * If there's no origin, it will use the center of the viewport.<br>
 * The `href` member is a string URL for the image to be<br>
 * displayed. Omiting either of these members will revert to<br>
 * the default href (which could be absent in some cases) and<br>
 * the original srcNodeRef for the widget.
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype.show=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroys the LightboxNano and it's DOM node<br>
 * </blockquote>
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize the background to fill the page<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype._sizeBg=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The image is now loaded, calculate size and display<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype._show=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroys the lightbox<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype._reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates the large image and begins to show it<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype._load=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A key was pressed, so hide the lightbox<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype._key=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hides the animated loading indicator<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype._hideLoading=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Closes the lightbox<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype._hide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a div for the enlarge icon and loading indicator layers<br>
 * </blockquote>
 * @param {String} cssClass 
 * @param {DomNode} refNode 
 * @param {boolean} display 
 * @private
 * @returns {DomNode} -
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype._createDiv=function(cssClass, refNode, display){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns animation parameters with the start and end coords<br>
 * </blockquote>
 * @param {Object} s 
 * @param {Object} e 
 * @private
 * @returns {Object} -
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype._coords=function(s, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates the lightbox open/close and background fadein/out animations<br>
 * </blockquote>
 * @param {DomNode} node 
 * @param {Object} args 
 * @param {Function} onEnd 
 * @private
 * @returns {dojo.Animation} -
 * @memberOf dojox.image.LightboxNano
*/
dojox.image.LightboxNano.prototype._anim=function(node, args, onEnd){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds magnification on a portion of an image element, using `dojox.gfx`<br>
 * </blockquote>
 * An unobtrusive way to add an unstyled overlay<br>
 * above the srcNode image element. The overlay/glass is a<br>
 * scaled version of the src image (so larger images sized down<br>
 * are clearer).<br>
 * <br>
 * over-ride the _createGlass method to create your custom surface,<br>
 * being sure to create an img node on that surface.
 * @class
 * @returns {dojox.image.Magnifier} new instance
*/
dojox.image.Magnifier=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the image's offset in the clipping window relative to the mouse position<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.image.Magnifier
*/
dojox.image.Magnifier.prototype._setImage=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 position the overlay centered under the cursor<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.image.Magnifier
*/
dojox.image.Magnifier.prototype._placeGlass=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 create the glassNode, and an img on a dojox.gfx surface<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.Magnifier
*/
dojox.image.Magnifier.prototype._createGlass=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds magnification on a portion of an image element<br>
 * </blockquote>
 * An unobtrusive way to add an unstyled overlay<br>
 * above the srcNode image element. The overlay/glass is a<br>
 * scaled version of the src image (so larger images sized down<br>
 * are clearer).<br>
 * <br>
 * The logic behind requiring the src image to be large is<br>
 * "it's going to be downloaded, anyway" so this method avoids<br>
 * having to make thumbnails and 2 http requests among other things.
 * @class
 * @returns {dojox.image.MagnifierLite} new instance
*/
dojox.image.MagnifierLite=function(){};
/**
 * @memberOf dojox.image.MagnifierLite
*/
dojox.image.MagnifierLite.prototype.postCreate=function(){};
/**
 * @param {mixed} finalize 
 * @memberOf dojox.image.MagnifierLite
*/
dojox.image.MagnifierLite.prototype.destroy=function(finalize){};
/**
 * <b>Summary:</b><blockquote>
 *	 show the overlay<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.image.MagnifierLite
*/
dojox.image.MagnifierLite.prototype._showGlass=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the image's offset in the clipping window relative to the mouse position<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.image.MagnifierLite
*/
dojox.image.MagnifierLite.prototype._setImage=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 position the overlay centered under the cursor<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.image.MagnifierLite
*/
dojox.image.MagnifierLite.prototype._placeGlass=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 hide the overlay<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.image.MagnifierLite
*/
dojox.image.MagnifierLite.prototype._hideGlass=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 make img and glassNode elements as children of the body<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.MagnifierLite
*/
dojox.image.MagnifierLite.prototype._createGlass=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 update the calculations should this.scale change<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.MagnifierLite
*/
dojox.image.MagnifierLite.prototype._adjustScale=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Slideshow Widget<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @returns {dojox.image.SlideShow} new instance
*/
dojox.image.SlideShow=function(){};
/**
 * @namespace
 * @private
*/
dojox.image.SlideShow._request={};
/**
 * <b>Summary:</b><blockquote>
 *	 Switches the slideshow mode on and off.<br>
 * </blockquote>
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype.toggleSlideShow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes the image being displayed to the next image in the data store<br>
 * </blockquote>
 * @param {Boolean} inTimer If true, a slideshow is active, otherwise the slideshow is inactive.
 * @param {mixed} forceLoop 
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype.showNextImage=function(inTimer, forceLoop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shows the image at index 'index'.<br>
 * </blockquote>
 * @param {Number} index The position of the image in the data store to display
 * @param {Function} [callback] Optional callback function to call when the image has finished displaying.
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype.showImage=function(index, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the data store and request objects to read data from.<br>
 * </blockquote>
 * @param {An} dataStore implementation of the dojo.data.api.Read API. This accesses the image
 * data.
 * @param {An} request implementation of the dojo.data.api.Request API. This specifies the
 * query and paging information to be used by the data store
 * @param {optional} paramNames An object defining the names of the item attributes to fetch from the
 * data store.  The three attributes allowed are 'linkAttr', 'imageLargeAttr' and 'titleAttr'
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype.setDataStore=function(dataStore, request, paramNames){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resets the widget to its initial state<br>
 * </blockquote>
 * Removes all previously loaded images, and clears all caches.
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initilizes the widget, sets up listeners and shows the first image<br>
 * </blockquote>
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If 'autoload' is true, this tells the widget to start loading<br>
 *	 images from the specified pointer.<br>
 * </blockquote>
 * @param {The} index number index in the data store to start loading images from.
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype.moveImageLoadingPointer=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if image at the specified index is loaded, false otherwise.<br>
 * </blockquote>
 * @param {The} index number index in the data store to check if it is loaded.
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype.isImageLoaded=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the topic id published to when an image is shown<br>
 * </blockquote>
 * The information published is: index, title and url
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype.getShowTopicName=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the topic id published to when an image finishes loading.<br>
 * </blockquote>
 * The information published is the index position of the image loaded.
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype.getLoadTopicName=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cleans up the widget when it is being destroyed<br>
 * </blockquote>
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stops a running slide show.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._stop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Starts a timeout to show the next image when a slide show is active<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._startTimer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shows the navigation controls<br>
 * </blockquote>
 * @param {Boolean} force If true, the navigation controls are repositioned even if they are
 * currently visible.
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._showNav=function(force){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the title to the image being displayed<br>
 * </blockquote>
 * @param {String} title The String title of the image
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._setTitle=function(title){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the previous image.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._prev=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns whether the mouse is over the passed element.<br>
 *	 Element must be display:block (ie, not a &amp;lt;span&amp;gt;)<br>
 * </blockquote>
 * @param {DomNode} element 
 * @param {Event} e 
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._overElement=function(element, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the next image<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._next=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load the next unloaded image.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._loadNextImage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Load image at specified index<br>
 * </blockquote>
 * This function loads the image at position 'index' into the<br>
 * internal cache of images.  This does not cause the image to be displayed.
 * @param {The} index position in the data store to load an image from.
 * @param {An} callbackFn optional function to execute when the image has finished loading.
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._loadImage=function(index, callbackFn){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hides the navigation controls<br>
 * </blockquote>
 * @param {Event} e The DOM Event that triggered this function
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._hideNav=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Performs navigation on the images based on users mouse clicks<br>
 * </blockquote>
 * @param {Event} e An Event object
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._handleClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the padding to place at the top of the image to center it vertically.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._getTopPadding=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fits the widget size to the size of the image being shown,<br>
 *	 or centers the image, depending on the value of 'fixedHeight'<br>
 * </blockquote>
 * @param {Boolean} force If true, the widget is always resized, regardless of the value of 'fixedHeight'
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._fitSize=function(force){};
/**
 * <b>Summary:</b><blockquote>
 *	 Ensures that the image width and height do not exceed the maximum.<br>
 * </blockquote>
 * @param {Node} img The image DOM node to optionally resize
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._fitImage=function(img){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculates the dimensions of the navigation controls<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.SlideShow
*/
dojox.image.SlideShow.prototype._calcNavDimensions=function(){};
/**
 * @param {mixed} items 
 * @memberOf dojox.image.SlideShow._request
*/
dojox.image.SlideShow._request.prototype.onComplete=function(items){};
/**
 * <b>Summary:</b><blockquote>
 *	 A scrolling Thumbnail Picker widget<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @returns {dojox.image.ThumbnailPicker} new instance
*/
dojox.image.ThumbnailPicker=function(){};
/**
 * @namespace
*/
dojox.image.ThumbnailPicker.request={};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the data store and request objects to read data from.<br>
 * </blockquote>
 * @param {An} dataStore implementation of the dojo.data.api.Read API. This accesses the image
 * data.
 * @param {An} request implementation of the dojo.data.api.Request API. This specifies the
 * query and paging information to be used by the data store
 * @param {optional} paramNames An object defining the names of the item attributes to fetch from the
 * data store.  The four attributes allowed are 'linkAttr', 'imageLargeAttr',<br>
 * 'imageThumbAttr' and 'titleAttr'
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype.setDataStore=function(dataStore, request, paramNames){};
/**
 * @param {mixed} dim 
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype.resize=function(dim){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resets the widget back to its original state.<br>
 * </blockquote>
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes styles and listeners<br>
 * </blockquote>
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes a visual cue to show the image is loaded<br>
 * </blockquote>
 * If 'useLoadNotifier' is set to true, then a visual cue is<br>
 * given to state whether the image is loaded or not.	Calling this function<br>
 * marks an image as loaded.
 * @param {mixed} index 
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype.markImageLoaded=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the image at the specified index is currently visible. False otherwise.<br>
 * </blockquote>
 * @param {mixed} index 
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype.isVisible=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates DOM nodes for thumbnail images and initializes their listeners<br>
 * </blockquote>
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype.init=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the name of the dojo topic that can be<br>
 *	 subscribed to in order to receive notifications on<br>
 *	 which thumbnail is now visible<br>
 * </blockquote>
 * @returns {String} -
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype.getShowTopicName=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the name of the dojo topic that can be<br>
 *	 subscribed to in order to receive notifications on<br>
 *	 which thumbnail was selected.<br>
 * </blockquote>
 * @returns {String} -
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype.getClickTopicName=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the navigation controls to hide/show them when at<br>
 *	 the first or last images.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype._updateNavControls=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Displays thumbnail images, starting at position 'index'<br>
 * </blockquote>
 * @param {Number} index The index of the first thumbnail
 * @private
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype._showThumbs=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a CSS class to a thumbnail, only if 'autoLoad' is true<br>
 * </blockquote>
 * @param {DomNode} thumb The thumbnail DOM node to set the class on
 * @param {String} className The CSS class to add to the DOM node.
 * @private
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype._setThumbClass=function(thumb, className){};
/**
 * <b>Summary:</b><blockquote>
 *	 Displays the next page of images<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype._prev=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Displays the next page of images<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype._next=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads the next page of thumbnail images<br>
 * </blockquote>
 * @private
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype._loadNextPage=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads an image.<br>
 * </blockquote>
 * @param {mixed} data 
 * @param {mixed} index 
 * @param {mixed} callback 
 * @private
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype._loadImage=function(data, index, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks if an image is loaded.<br>
 * </blockquote>
 * @param {mixed} img 
 * @param {mixed} index 
 * @private
 * @memberOf dojox.image.ThumbnailPicker
*/
dojox.image.ThumbnailPicker.prototype._checkLoad=function(img, index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds the windowName transport as an XHR plugin for the given site. See<br>
 *	 dojox.io.windowName for more information on the transport.<br>
 * </blockquote>
 * @param {String} url Url prefix of the site which can handle windowName requests.
 * @param {Function} [httpAdapter] This allows for adapting HTTP requests that could not otherwise be
 * sent with window.name, so you can use a convention for headers and PUT/DELETE methods.
 * @param {Boolean} [trusted] 
*/
dojox.io.xhrWindowNamePlugin=function(url, httpAdapter, trusted){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds the script transport (JSONP) as an XHR plugin for the given site. See<br>
 *	 dojox.io.script for more information on the transport. Note, that JSONP<br>
 *	 is *not* a secure transport, by loading data from a third-party site using JSONP<br>
 *	 the site has full access to your JavaScript environment.<br>
 * </blockquote>
 * @param {String} url Url prefix of the site which can handle JSONP requests.
 * @param {String} callbackParamName 
 * @param {Function} [httpAdapter] This allows for adapting HTTP requests that could not otherwise be
 * sent with JSONP, so you can use a convention for headers and PUT/DELETE methods.<br>
*/
dojox.io.xhrScriptPlugin=function(url, callbackParamName, httpAdapter){};
/**
 * @param {dojox.io.__xhrMultiArgs} args 
*/
dojox.io.xhrMultiPart=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parses an HTTP stream for a message.<br>
 * </blockquote>
 * @param {String} httpStream HTTP stream to parse
 * @param {String} [topHeaders] Extra header information to add to each HTTP request (kind of HTTP inheritance)
 * @param {Boolean} [partial] A true value indicates that the stream may not be finished, it may end arbitrarily in mid stream.
 * The last XHR object will have a special property _lastIndex that indicates the how far along<br>
 * the httpStream could be successfully parsed into HTTP messages.<br>
 * return:<br>
 * Returns an array of XHR-like object for reading the headers for each message
 * @returns {the content is not finished} -
*/
dojox.io.httpParse=function(httpStream, topHeaders, partial){};
/**
 * @private
*/
dojox.io.__xhrMultiArgs=function(){};
/**
 * @private
*/
dojox.io.__xhrContentArgs=function(){};
/**
 * @namespace
*/
dojox.io.xhrPlugins={};
/**
 * @namespace
*/
dojox.io.windowName={};
/**
 * @namespace
*/
dojox.io.scriptFrame={};
/**
 * @namespace
*/
dojox.io.proxy={};
/**
 * @namespace
*/
dojox.io.proxy.xip={};
/**
 * @param {mixed} encodedMessage 
*/
dojox.io.proxy.xip.unpackMessage=function(encodedMessage){};
/**
 * @param {mixed} stateId 
 * @param {mixed} cmd 
 * @param {mixed} message 
*/
dojox.io.proxy.xip.setServerUrl=function(stateId, cmd, message){};
/**
 * @param {mixed} stateId 
*/
dojox.io.proxy.xip.sendRequestStart=function(stateId){};
/**
 * @param {mixed} stateId 
*/
dojox.io.proxy.xip.sendRequestPart=function(stateId){};
/**
 * @param {mixed} stateId 
 * @param {mixed} encodedData 
*/
dojox.io.proxy.xip.sendRequest=function(stateId, encodedData){};
/**
 * <b>Summary:</b><blockquote>
 *	 starts the xdomain request using the provided facade.<br>
 *	 This method first does some init work, then delegates to _realSend.<br>
 * </blockquote>
 * @param {Object} facade 
 * @returns {Object} -
*/
dojox.io.proxy.xip.send=function(facade){};
/**
 * @param {String} stateId 
 * @param {String} urlEncodedData 
*/
dojox.io.proxy.xip.receive=function(stateId, urlEncodedData){};
/**
 * @param {mixed} stateId 
 * @param {mixed} cmd 
 * @param {mixed} message 
*/
dojox.io.proxy.xip.makeServerUrl=function(stateId, cmd, message){};
/**
 * @param {String} stateId 
*/
dojox.io.proxy.xip.frameLoaded=function(stateId){};
/**
 * <b>Summary:</b><blockquote>
 *	 HTML5 document messaging endpoint. Unpack the event to see<br>
 *	 if we want to use it.<br>
 * </blockquote>
 * @param {mixed} evt 
*/
dojox.io.proxy.xip.fragmentReceivedEvent=function(evt){};
/**
 * @param {mixed} frag 
*/
dojox.io.proxy.xip.fragmentReceived=function(frag){};
/**
 * @param {String} stateId 
*/
dojox.io.proxy.xip.destroyState=function(stateId){};
/**
*/
dojox.io.proxy.xip.createFacade=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 starts the actual xdomain request using the provided facade.<br>
 * </blockquote>
 * @param {mixed} facade 
 * @private
 * @returns {Object} -
*/
dojox.io.proxy.xip._realSend=function(facade){};
/**
 * <b>Summary:</b><blockquote>
 *	 XMLHttpRequest facade object used by dojox.io.proxy.xip.<br>
 * </blockquote>
 * Do not use this object directly. See the Dojo Book page<br>
 * on XMLHttpRequest IFrame Proxying:<br>
 * http://dojotoolkit.org/book/dojo-book-0-4/part-5-connecting-pieces/i-o/cross-domain-xmlhttprequest-using-iframe-proxy
 * @see reference <a href="http://dojotoolkit.org/book/dojo-book-0-4/part-5-connecting-pieces/i-o/cross-domain-xmlhttprequest-using-iframe-proxy">http://dojotoolkit.org/book/dojo-book-0-4/part-5-connecting-pieces/i-o/cross-domain-xmlhttprequest-using-iframe-proxy</a>
 * @param {mixed} ifpServerUrl 
*/
dojox.io.proxy.xip.XhrIframeFacade=function(ifpServerUrl){};
/**
 * <b>Summary:</b><blockquote>
 *	 XMLHttpRequest facade object used by dojox.io.proxy.xip.<br>
 * </blockquote>
 * Do not use this object directly. See the Dojo Book page<br>
 * on XMLHttpRequest IFrame Proxying:<br>
 * http://dojotoolkit.org/book/dojo-book-0-4/part-5-connecting-pieces/i-o/cross-domain-xmlhttprequest-using-iframe-proxy
 * @see reference <a href="http://dojotoolkit.org/book/dojo-book-0-4/part-5-connecting-pieces/i-o/cross-domain-xmlhttprequest-using-iframe-proxy">http://dojotoolkit.org/book/dojo-book-0-4/part-5-connecting-pieces/i-o/cross-domain-xmlhttprequest-using-iframe-proxy</a>
 * @class
 * @returns {dojox.io.proxy.xip.XhrIframeFacade} new instance
*/
dojox.io.proxy.xip.XhrIframeFacade=function(){};
/**
 * @param {String} header 
 * @param {String} value 
 * @memberOf dojox.io.proxy.xip.XhrIframeFacade
*/
dojox.io.proxy.xip.XhrIframeFacade.prototype.setRequestHeader=function(header, value){};
/**
 * @param {String} stringData 
 * @memberOf dojox.io.proxy.xip.XhrIframeFacade
*/
dojox.io.proxy.xip.XhrIframeFacade.prototype.send=function(stringData){};
/**
 * @param {String} method 
 * @param {String} uri 
 * @memberOf dojox.io.proxy.xip.XhrIframeFacade
*/
dojox.io.proxy.xip.XhrIframeFacade.prototype.open=function(method, uri){};
/**
 * @param {String} header 
 * @returns {String} -
 * @memberOf dojox.io.proxy.xip.XhrIframeFacade
*/
dojox.io.proxy.xip.XhrIframeFacade.prototype.getResponseHeader=function(header){};
/**
 * @returns {String} -
 * @memberOf dojox.io.proxy.xip.XhrIframeFacade
*/
dojox.io.proxy.xip.XhrIframeFacade.prototype.getAllResponseHeaders=function(){};
/**
 * @memberOf dojox.io.proxy.xip.XhrIframeFacade
*/
dojox.io.proxy.xip.XhrIframeFacade.prototype.abort=function(){};
/**
 * @param {String} allHeaders 
 * @private
 * @memberOf dojox.io.proxy.xip.XhrIframeFacade
*/
dojox.io.proxy.xip.XhrIframeFacade.prototype._setResponseHeaders=function(allHeaders){};
/**
 * @class
 * @returns {dojox.io.proxy.xip.XhrIframeFacade.open} new instance
*/
dojox.io.proxy.xip.XhrIframeFacade.open=function(){};
/**
 * @class
 * @returns {dojox.io.proxy.xip.XhrIframeFacade.send} new instance
*/
dojox.io.proxy.xip.XhrIframeFacade.send=function(){};
/**
 * @class
 * @private
 * @returns {dojox.io.proxy.xip.XhrIframeFacade._setResponseHeaders} new instance
*/
dojox.io.proxy.xip.XhrIframeFacade._setResponseHeaders=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 starts the xdomain request using the provided facade.<br>
 *	 This method first does some init work, then delegates to _realSend.<br>
 * </blockquote>
 * @class
 * @returns {dojox.io.proxy.xip.send} new instance
*/
dojox.io.proxy.xip.send=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback used when waiting for a frame to load (related to the usage of<br>
 *	 the frameId argument to dojo.io.script.get().<br>
 * </blockquote>
 * @param {String} frameId 
 * @private
*/
dojox.io.scriptFrame._loaded=function(frameId){};
/**
 * @param {String} frameId 
 * @private
*/
dojox.io.scriptFrame._getWaiters=function(frameId){};
/**
 * <b>Summary:</b><blockquote>
 *	 fixes the URL so that<br>
 * </blockquote>
 * @param {String} url 
 * @private
*/
dojox.io.scriptFrame._fixAttachUrl=function(url){};
/**
 * @namespace
*/
dojox.ioScript={};
/**
 * <b>Summary:</b><blockquote>
 *	 provides an override of dojo.io.script._canAttach to check for<br>
 *	 the existence of a the args.frameDoc property. If it is there, and it is a string,<br>
 *	 not a document, then create the iframe with an ID of frameDoc, and use that for the calls.<br>
 *	 If frameDoc is a document, then dojox.io.scriptFrame should not get involved.<br>
 * </blockquote>
 * @param {Object} ioArgs 
 * @private
*/
dojox.ioScript._canAttach=function(ioArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides secure cross-domain request capability.<br>
 *	 Sends a request using an iframe (POST or GET) and reads the response through the<br>
 *	 frame's window.name.<br>
 * </blockquote>
 * In order to provide a windowname transport accessible resources/web services, a server<br>
 * should check for the presence of a parameter window.name=true and if a request includes<br>
 * such a parameter, it should respond to the request with an HTML<br>
 * document that sets it's window.name to the string that is to be<br>
 * delivered to the client. For example, if a client makes a window.name request like:<br>
 * 	http://othersite.com/greeting?windowname=true<br>
 * And server wants to respond to the client with "Hello", it should return an html page:<br>
 * 	&lt;html&gt;&lt;script type="text/javascript"&gt;<br>
 * 	window.name="Hello";<br>
 * 	&lt;/script&gt;&lt;/html&gt;<br>
 * One can provide XML or JSON data by simply quoting the data as a string, and parsing the data<br>
 * on the client.<br>
 * If you use the authorization window.name protocol, the requester should include an<br>
 * authElement element in the args, and a request will be created like:<br>
 * 	http://othersite.com/greeting?windowname=auth<br>
 * And the server can respond like this:<br>
 * 	&lt;html&gt;&lt;script type="text/javascript"&gt;<br>
 * 	var loc = window.name;<br>
 * 	authorizationButton.onclick = function(){<br>
 * 		window.name="Hello";<br>
 * 		location = loc;<br>
 * 	};<br>
 * 	&lt;/script&gt;&lt;/html&gt;<br>
 * When using windowName from a XD Dojo build, make sure to set the<br>
 * dojo.dojoBlankHtmlUrl property to a local URL.
 * @see reference <a href="http://othersite.com/greeting?windowname=true">http://othersite.com/greeting?windowname=true</a>
 * @param {String} method The method to use to send the request, GET or POST
 * @param {dojo.__IoArgs} args See dojo.xhr
 * <br>
 * args.authElement: DOMNode?<br>
 * By providing an authElement, this indicates that windowName should use the<br>
 * authorized window.name protocol, relying on<br>
 * the loaded XD resource to return to the provided return URL on completion<br>
 * of authorization/authentication. The provided authElement will be used to place<br>
 * the iframe in, so the user can interact with the server resource for authentication<br>
 * and/or authorization to access the resource.<br>
 * <br>
 * args.onAuthLoad: Function?<br>
 * When using authorized access to resources, this function will be called when the<br>
 * authorization page has been loaded. (When authorization is actually completed,<br>
 * the deferred callback function is called with the result). The primary use for this<br>
 * is to make the authElement visible to the user once the resource has loaded<br>
 * (this can be preferable to showing the iframe while the resource is loading<br>
 * since it may not require authorization, it may simply return the resource).<br>
*/
dojox.io.windowName.send=function(method, args){};
/**
 * @param {mixed} dfd 
 * @param {mixed} method 
 * @param {mixed} authTarget 
 * @param {mixed} onAuthLoad 
 * @private
*/
dojox.io.windowName._send=function(dfd, method, authTarget, onAuthLoad){};
/**
 * @class
 * @private
 * @returns {dojox.io.__xhrContentArgs} new instance
*/
dojox.io.__xhrContentArgs=function(){};
/**
 * @class
 * @private
 * @returns {dojox.io.__xhrMultiArgs} new instance
*/
dojox.io.__xhrMultiArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 function(response, ioArgs){}. response is an Object, ioArgs<br>
 *	 is of type dojo.__IoCallbackArgs. The load function will be<br>
 *	 called on a successful response.<br>
 * </blockquote>
*/
dojox.io.__xhrMultiArgs.load=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 function(response, ioArgs){}. response is an Object, ioArgs<br>
 *	 is of type dojo.__IoCallbackArgs. The handle function will<br>
 *	 be called in either the successful or error case.<br>
 * </blockquote>
*/
dojox.io.__xhrMultiArgs.handle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 function(response, ioArgs){}. response is an Object, ioArgs<br>
 *	 is of type dojo.__IoCallbackArgs. The error function will<br>
 *	 be called in an error case.<br>
 * </blockquote>
*/
dojox.io.__xhrMultiArgs.error=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 overrides the default xhr handler to implement a registry of<br>
 *	 xhr handlers<br>
 * </blockquote>
 * @returns {or check to see if we have the same path} -
*/
dojox.io.xhrPlugins.register=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides a HTTP adaption.<br>
 * </blockquote>
 * The following convention is used:<br>
 * method name -&gt; ?http-method=PUT<br>
 * Header -&gt; http-Header-Name=header-value<br>
 * X-Header -&gt; header_name=header-value
 * @param {mixed} plainXhr 
 * @param {mixed} noRawBody 
 * @example
 * dojox.io.xhrPlugins.addXdr("http://somesite.com", dojox.io.xhrPlugins.fullHttpAdapter);
*/
dojox.io.xhrPlugins.fullHttpAdapter=function(plainXhr, noRawBody){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds a server side proxy xhr handler for cross-site URLs<br>
 * </blockquote>
 * @param {This} proxyUrl is URL to send the requests to.
 * @example
 * Define a proxy:
 * 	dojox.io.xhrPlugins.addProxy("/proxy?url=");
 * And then when you call:
 * 	dojo.xhr("GET",{url:"http://othersite.com/file"});
 * It would result in the request (to your origin server):
 * 	GET /proxy?url=http%3A%2F%2Fothersite.com%2Ffile HTTP/1.1
*/
dojox.io.xhrPlugins.addProxy=function(proxyUrl){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds W3C Cross site XHR or XDomainRequest handling for the given URL prefix<br>
 * </blockquote>
 * This can be used for servers that support W3C cross-site XHR. In order for<br>
 * a server to allow a client to make cross-site XHR requests,<br>
 * it should respond with the header like:<br>
 * 	Access-Control: allow &lt;*&gt;<br>
 * see: http://www.w3.org/TR/access-control/
 * @see reference <a href="http://www.w3.org/TR/access-control/">http://www.w3.org/TR/access-control/</a>
 * @param {Requests} url that start with this URL will be considered for using
 * cross-site XHR.
 * @param {This} httpAdapter allows for adapting HTTP requests that could not otherwise be
 * sent with XDR, so you can use a convention for headers and PUT/DELETE methods.<br>
*/
dojox.io.xhrPlugins.addCrossSiteXhr=function(url, httpAdapter){};
/**
 * @namespace
*/
dojo.query.pseudos={};
/**
 * @param {mixed} name 
 * @param {mixed} condition 
*/
dojo.query.pseudos.visible=function(name, condition){};
/**
 * @param {mixed} name 
 * @param {mixed} condition 
*/
dojo.query.pseudos.selected=function(name, condition){};
/**
 * @param {mixed} name 
 * @param {mixed} condition 
*/
dojo.query.pseudos.input=function(name, condition){};
/**
 * @param {mixed} name 
 * @param {mixed} condition 
*/
dojo.query.pseudos.hidden=function(name, condition){};
/**
 * @param {mixed} name 
 * @param {mixed} condition 
*/
dojo.query.pseudos.header=function(name, condition){};
/**
 * @param {mixed} name 
 * @param {mixed} condition 
*/
dojo.query.pseudos.has=function(name, condition){};
/**
 * @param {mixed} name 
 * @param {mixed} condition 
*/
dojo.query.pseudos.enabled=function(name, condition){};
/**
 * @param {mixed} name 
 * @param {mixed} condition 
*/
dojo.query.pseudos.disabled=function(name, condition){};
/**
 * @param {mixed} name 
 * @param {mixed} condition 
*/
dojo.query.pseudos.checked=function(name, condition){};
/**
 * @param {mixed} name 
 * @param {mixed} condition 
*/
dojo.query.pseudos.button=function(name, condition){};
/**
 * @namespace
*/
dojo.global={};
/**
*/
dojo.global.jQuery=function(){};
/**
*/
dojo.global.$=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Performs a JSONQuery on the provided object and returns the results.<br>
 *	 If no object is provided (just a query), it returns a &amp;quot;compiled&amp;quot; function that evaluates objects<br>
 *	 according to the provided query.<br>
 * </blockquote>
 * JSONQuery provides a comprehensive set of data querying tools including filtering,<br>
 * recursive search, sorting, mapping, range selection, and powerful expressions with<br>
 * wildcard string comparisons and various operators. JSONQuery generally supersets<br>
 * JSONPath and provides syntax that matches and behaves like JavaScript where<br>
 * possible.<br>
 * <br>
 * JSONQuery evaluations begin with the provided object, which can referenced with<br>
 * $. From<br>
 * the starting object, various operators can be successively applied, each operating<br>
 * on the result of the last operation.<br>
 * <br>
 * Supported Operators:<br>
 * --------------------<br>
 * * .property - This will return the provided property of the object, behaving exactly<br>
 * like JavaScript.<br>
 * * [expression] - This returns the property name/index defined by the evaluation of<br>
 * the provided expression, behaving exactly like JavaScript.<br>
 * * [?expression] - This will perform a filter operation on an array, returning all the<br>
 * items in an array that match the provided expression. This operator does not<br>
 * need to be in brackets, you can simply use ?expression, but since it does not<br>
 * have any containment, no operators can be used afterwards when used<br>
 * without brackets.<br>
 * * [^?expression] - This will perform a distinct filter operation on an array. This behaves<br>
 * as [?expression] except that it will remove any duplicate values/objects from the<br>
 * result set.<br>
 * * [/expression], [\expression], [/expression, /expression] - This performs a sort<br>
 * operation on an array, with sort based on the provide expression. Multiple comma delimited sort<br>
 * expressions can be provided for multiple sort orders (first being highest priority). /<br>
 * indicates ascending order and \ indicates descending order<br>
 * * [=expression] - This performs a map operation on an array, creating a new array<br>
 * with each item being the evaluation of the expression for each item in the source array.<br>
 * * [start:end:step] - This performs an array slice/range operation, returning the elements<br>
 * from the optional start index to the optional end index, stepping by the optional step number.<br>
 * * [expr,expr] - This a union operator, returning an array of all the property/index values from<br>
 * the evaluation of the comma delimited expressions.<br>
 * * .* or [*] - This returns the values of all the properties of the current object.<br>
 * * $ - This is the root object, If a JSONQuery expression does not being with a $,<br>
 * it will be auto-inserted at the beginning.<br>
 * * @ - This is the current object in filter, sort, and map expressions. This is generally<br>
 * not necessary, names are auto-converted to property references of the current object<br>
 * in expressions.<br>
 * *	..property - Performs a recursive search for the given property name, returning<br>
 * an array of all values with such a property name in the current object and any subobjects<br>
 * * expr = expr - Performs a comparison (like JS's ==). When comparing to<br>
 * a string, the comparison string may contain wildcards * (matches any number of<br>
 * characters) and ? (matches any single character).<br>
 * * expr ~ expr - Performs a string comparison with case insensitivity.<br>
 * * ..[?expression] - This will perform a deep search filter operation on all the objects and<br>
 * subobjects of the current data. Rather than only searching an array, this will search<br>
 * property values, arrays, and their children.<br>
 * * $1,$2,$3, etc. - These are references to extra parameters passed to the query<br>
 * function or the evaluator function.<br>
 * * +, -, /, *, &amp;, |, %, (, ), &lt;, &gt;, &lt;=, &gt;=, != - These operators behave just as they do<br>
 * in JavaScript.<br>
 * <br>
 * <br>
 * <br>
 * 	dojox.json.query(queryString,object)<br>
 * and<br>
 * 	dojox.json.query(queryString)(object)<br>
 * always return identical results. The first one immediately evaluates, the second one returns a<br>
 * function that then evaluates the object.
 * @param {String} query Query string
 * @param {Object} [obj] Target of the JSONQuery
 * @returns {we mark all the inner brackets as skippable} -
 * @example
 * 	dojox.json.query("foo",{foo:"bar"})
 * This will return "bar".
 * @example
 * 	evaluator = dojox.json.query("?foo='bar'&amp;rating&gt;3");
 * This creates a function that finds all the objects in an array with a property
 * foo that is equals to "bar" and with a rating property with a value greater
 * than 3.
 * 	evaluator([{foo:"bar",rating:4},{foo:"baz",rating:2}])
 * This returns:
 * 	{foo:"bar",rating:4}
 * @example
 * 	evaluator = dojox.json.query("$[?price&lt;15.00][\rating][0:10]");
 * This finds objects in array with a price less than 15.00 and sorts then
 * by rating, highest rated first, and returns the first ten items in from this
 * filtered and sorted list.
*/
dojox.json.query=function(query, obj){};
/**
 * @param {mixed} obj 
 * @param {mixed} start 
 * @param {mixed} end 
 * @param {mixed} step 
 * @private
*/
dojox.json._slice=function(obj, start, end, step){};
/**
 * @param {mixed} obj 
 * @param {mixed} name 
 * @private
*/
dojox.json._find=function(obj, name){};
/**
 * @param {mixed} array 
 * @param {mixed} callback 
 * @private
*/
dojox.json._distinctFilter=function(array, callback){};
/**
 * @namespace
*/
dojox.json.schema={};
/**
 * <b>Summary:</b><blockquote>
 *	 Indexes and resolves references in the JSON object.<br>
 * </blockquote>
 * A JSON Schema object that can be used to advise the handling of the JSON (defining ids, date properties, urls, etc)
 * @class
 * @returns {dojox.json.ref.resolveJson} new instance
*/
dojox.json.ref.resolveJson=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a JSON serialization of an object.<br>
 *	 This has support for referencing, including circular references, duplicate references, and out-of-message references<br>
 *	 id and path-based referencing is supported as well and is based on http://www.json.com/2007/10/19/json-referencing-proposal-and-library/.<br>
 * </blockquote>
 * @see reference <a href="http://www.json.com/2007/10/19/json-referencing-proposal-and-library/.">http://www.json.com/2007/10/19/json-referencing-proposal-and-library/.</a>
 * @class
 * @returns {dojox.json.ref.toJson} new instance
*/
dojox.json.ref.toJson=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 To use the validator call this with an instance object and an optional schema object.<br>
 *	 If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),<br>
 *	 that schema will be used to validate and the schema parameter is not necessary (if both exist,<br>
 *	 both validations will occur).<br>
 * </blockquote>
 * The validate method will return an object with two properties:<br>
 * valid: A boolean indicating if the instance is valid by the schema<br>
 * errors: An array of validation errors. If there are no errors, then an<br>
 * empty list will be returned. A validation error will have two properties:<br>
 * property: which indicates which property had the error<br>
 * message: which indicates what the error was
 * @param {Any} instance The instance value/object to validate
 * @param {Object} schema The schema to use to validate
*/
dojox.json.schema.validate=function(instance, schema){};
/**
 * <b>Summary:</b><blockquote>
 *	 This checks to ensure that the result is valid and will throw an appropriate error message if it is not<br>
 * </blockquote>
 * @param {the} result result returned from checkPropertyChange or validate
*/
dojox.json.schema.mustBeValid=function(result){};
/**
 * <b>Summary:</b><blockquote>
 *	 The checkPropertyChange method will check to see if an value can legally be in property with the given schema<br>
 *	 This is slightly different than the validate method in that it will fail if the schema is readonly and it will<br>
 *	 not check for self-validation, it is assumed that the passed in value is already internally valid.<br>
 *	 The checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for<br>
 *	 information.<br>
 * </blockquote>
 * @param {Any} value The new instance value/object to check
 * @param {Object} schema The schema to use to validate
 * return:<br>
 * see dojox.validate.jsonSchema.validate
 * @param {String} property 
*/
dojox.json.schema.checkPropertyChange=function(value, schema, property){};
/**
 * @param {Any} instance 
 * @param {Object} schema 
 * @param {Boolean} _changing 
 * @private
*/
dojox.json.schema._validate=function(instance, schema, _changing){};
/**
 * @param {Object} obj 
 * @param {String} expr 
 * @param {Object} arg 
*/
dojox.jsonPath.query=function(obj, expr, arg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a wrapper object, which can be observed. The wrapper object<br>
 *	 is a proxy to the wrapped object. If you will be making multiple wrapper<br>
 *	 objects with the same set of listeners, it is recommended that you<br>
 *	 use makeObservable, as it is more memory efficient.<br>
 * </blockquote>
 * @param {Object} wrapped The object to be wrapped and monitored for property access and modification
 * @param {function} onRead See dojox.lang.makeObservable.onRead
 * @param {function} onWrite See dojox.lang.makeObservable.onWrite
 * @param {function} onInvoke See dojox.lang.makeObservable.onInvoke
*/
dojox.lang.observable=function(wrapped, onRead, onWrite, onInvoke){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates and returns an observable creator function. All the objects that<br>
 *	 are created with the returned constructor will use the provided onRead and<br>
 *	 onWrite listeners.<br>
 *	 The created constructor should be called with a single argument,<br>
 *	 the object that will be wrapped to be observed. The constructor will<br>
 *	 return the wrapper object.<br>
 * </blockquote>
 * @param {function} onRead This is called whenever one of the wrapper objects created
 * from the constructor has a property that is accessed. onRead<br>
 * will be called with two arguments, the first being the wrapped object,<br>
 * and the second is the name of property that is being accessed.<br>
 * The value that onRead returns will be used as the value returned<br>
 * by the property access
 * @param {function} onWrite This is called whenever one of the wrapper objects created
 * from the constructor has a property that is modified. onWrite<br>
 * will be called with three arguments, the first being the wrapped object,<br>
 * the second is the name of property that is being modified, and the<br>
 * third is the value that is being set on the property.
 * @param {function} onInvoke This is called when a method on the object is invoked. The first
 * argument is the wrapper object, the second is the original wrapped object,<br>
 * the third is the method name, and the fourth is the arguments.
 * @param {Object} hiddenFunctions allows you to define functions that should be delegated
 * but may not be enumerable on the wrapped objects, so they must be<br>
 * explicitly included
 * @returns {do it with getters and setters} -
 * @example
 * The following could be used to create a wrapper that would
 * prevent functions from being accessed on an object:
 * 	function onRead(obj,prop){
 * 		return typeof obj[prop] == 'function' ? null : obj[prop];
 * 	}
 * 	var observable = dojox.lang.makeObservable(onRead,onWrite);
 * 	var obj = {foo:1,bar:function(){}};
 * 	obj = observable(obj);
 * 	obj.foo -&gt; 1
 * 	obj.bar -&gt; null
*/
dojox.lang.makeObservable=function(onRead, onWrite, onInvoke, hiddenFunctions){};
/**
 * @namespace
*/
dojox.lang.oo={};
/**
 * @namespace
*/
dojox.lang.functional={};
/**
 * @namespace
*/
dojox.lang.docs={};
/**
 * @namespace
*/
dojox.lang.async={};
/**
 * @namespace
*/
dojox.lang.aspect={};
/**
 * <b>Summary:</b><blockquote>
 *	 Detach previously attached AOP-style advices.<br>
 * </blockquote>
 * @param {Object} handle The object returned by dojox.lang.aspect.advise().
*/
dojox.lang.aspect.unadvise=function(handle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object, which can be used to trace calls with Firebug's console.<br>
 *	 Prints argument, a return value, or an exception.<br>
 * </blockquote>
 * @param {Boolean} grouping The flag to group output. If true, indents embedded console messages.
 * @returns {Object} -
*/
dojox.lang.aspect.tracer=function(grouping){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object, which can be used to time calls to methods.<br>
 * </blockquote>
 * @param {String} [name] The optional unique name of the timer.
 * @returns {Object} -
*/
dojox.lang.aspect.timer=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object, which can be used to time calls to methods.<br>
 * </blockquote>
 * @param {String} [title] The optional name of the profile section.
 * @returns {Object} -
*/
dojox.lang.aspect.profiler=function(title){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call the original function (or the next level around advice) in an around advice code.<br>
 * </blockquote>
 * Calls the original function (or the next level around advice).<br>
 * Accepts and passes on any number of arguments, and returns a value.<br>
 * This function is valid only in the content of around calls.<br>
*/
dojox.lang.aspect.proceed=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Invalidates the memoizer's cache (see dojox.lang.aspect.memoizer)<br>
 *	 after calling certain methods.<br>
 * </blockquote>
 * @see dojox.lang.aspect
 * @param {String|Array} [method] Optional method's name to be guarded: only cache for
 * this method will be invalidated on call. Can be a string<br>
 * or an array of method names. If omitted the whole cache<br>
 * will be invalidated.
 * @returns {Object} -
*/
dojox.lang.aspect.memoizerGuard=function(method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object, which can be used to count calls to methods.<br>
 * </blockquote>
 * @param {Function} [keyMaker] the function, which takes method's arguments and returns a key,
 * which can be used to index the result.
 * @returns {Object} -
*/
dojox.lang.aspect.memoizer=function(keyMaker){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the context stack, which reflects executing advices<br>
 *	 up to this point. The array is ordered from oldest to newest.<br>
 *	 In order to get the active context use dojox.lang.aspect.getContext().<br>
 * </blockquote>
 * @returns {Array} -
*/
dojox.lang.aspect.getContextStack=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the context information for the advice in effect.<br>
 * </blockquote>
 * @returns {Object} -
*/
dojox.lang.aspect.getContext=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an object, which can be used to count calls to methods.<br>
 * </blockquote>
 * @returns {Object} -
*/
dojox.lang.aspect.counter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the context stack contains a context for a given<br>
 *	 instance that satisfies a given method name criteria.<br>
 * </blockquote>
 * @param {Object} instance An instance to be matched. If null, any context will be examined.
 * Otherwise the context should belong to this instance.
 * @param {String|RegExp|Array} [method] An optional pattern to be matched against a method name. Can be a string,
 * a RegExp object or an array of strings and RegExp objects.<br>
 * If it is omitted, any name will satisfy the criteria.
 * @returns {Boolean} -
*/
dojox.lang.aspect.cflow=function(instance, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Attach AOP-style advices to methods.<br>
 * </blockquote>
 * Attaches AOP-style advices to object's methods. Can attach several<br>
 * advices at once and operate on several methods of the object.<br>
 * The latter is achieved when a RegExp is specified as<br>
 * a method name. In this case all functional methods that<br>
 * satisfy the RegExp condition are processed. This function<br>
 * returns a handle, which can be used to unadvise, or null,<br>
 * if advising has failed.
 * @param {Object} obj A source object for the advised function.
 * Cannot be a DOM node.
 * @param {Array} methods An array of method names (strings) to be advised.
 * @param {Array} advices An array of advices represented by objects or functions that
 * return such objects on demand during the event processing.<br>
 * The advice object can define following member functions:<br>
 * before, around, afterReturning, afterThrowing, after.<br>
 * If the function is supplied, it is called with a context<br>
 * object once per call to create a temporary advice object, which<br>
 * is destroyed after the processing. The temporary advice object<br>
 * can implement a destroy() method, if it wants to be called when<br>
 * not needed.
 * @returns {Object} -
*/
dojox.lang.aspect.adviseRaw=function(obj, methods, advices){};
/**
 * <b>Summary:</b><blockquote>
 *	 Attach AOP-style advices to a method.<br>
 * </blockquote>
 * Attaches AOP-style advices to a method. Can attach several<br>
 * advices at once and operate on several methods of an object.<br>
 * The latter is achieved when a RegExp is specified as<br>
 * a method name, or an array of strings and regular expressions<br>
 * is used. In this case all functional methods that<br>
 * satisfy the RegExp condition are processed. This function<br>
 * returns a handle, which can be used to unadvise, or null,<br>
 * if advising has failed.<br>
 * <br>
 * This function is a convenience wrapper for<br>
 * dojox.lang.aspect.adviseRaw().
 * @param {Object} obj A source object for the advised function. Cannot be a DOM node.
 * If this object is a constructor, its prototype is advised.
 * @param {String|RegExp|Array} method A string name of the function in obj. In case of RegExp all
 * methods of obj matching the regular expression are advised.
 * @param {Object|Function|Array} advice An object, which defines advises, or a function, which
 * returns such object, or an array of previous items.<br>
 * The advice object can define following member functions:<br>
 * before, around, afterReturning, afterThrowing, after.<br>
 * If the function is supplied, it is called with a context<br>
 * object once per call to create a temporary advice object, which<br>
 * is destroyed after the processing. The temporary advice object<br>
 * can implement a destroy() method, if it wants to be called when<br>
 * not needed.
 * @returns {Object} -
*/
dojox.lang.aspect.advise=function(obj, method, advice){};
/**
 * <b>Summary:</b><blockquote>
 *	 Executes functions sequentially. Waits if any of them returns Deferred.<br>
 * </blockquote>
 * @param {mixed} x 
*/
dojox.lang.async.seq=function(x){};
/**
 * <b>Summary:</b><blockquote>
 *	 Executes a condition, waits for it if necessary, and executes<br>
 *	 Nth function from list.<br>
 * </blockquote>
 * @param {mixed} cond 
 * @param {mixed} x 
*/
dojox.lang.async.select=function(cond, x){};
/**
 * <b>Summary:</b><blockquote>
 *	 Executes functions in parallel. Waits for all of them to finish.<br>
 * </blockquote>
 * @param {mixed} x 
*/
dojox.lang.async.par=function(x){};
/**
 * <b>Summary:</b><blockquote>
 *	 Executes a condition, waits for it if necessary, and executes<br>
 *	 the body, if truthy value was returned.<br>
 *	 Then it repeats the cycle until the condition function returns<br>
 *	 a falsy value.<br>
 * </blockquote>
 * @param {mixed} cond 
 * @param {mixed} body 
*/
dojox.lang.async.loop=function(cond, body){};
/**
 * <b>Summary:</b><blockquote>
 *	 Executes a condition, waits for it if necessary, and executes<br>
 *	 one of two functions.<br>
 * </blockquote>
 * @param {mixed} cond 
 * @param {mixed} ifTrue 
 * @param {mixed} ifFalse 
*/
dojox.lang.async.ifThen=function(cond, ifTrue, ifFalse){};
/**
 * <b>Summary:</b><blockquote>
 *	 Executes functions in parallel. As soon as one of them finishes<br>
 *	 cancels the rest.<br>
 * </blockquote>
 * @param {mixed} x 
*/
dojox.lang.async.any=function(x){};
/**
 * @namespace
*/
dojox.lang.async.event={};
/**
 * @param {mixed} src 
 * @param {mixed} name 
*/
dojox.lang.async.event.from=function(src, name){};
/**
 * @param {mixed} src 
 * @param {mixed} name 
*/
dojox.lang.async.event.failOn=function(src, name){};
/**
 * @namespace
*/
dojox.lang.async.timeout={};
/**
 * @param {mixed} ms 
*/
dojox.lang.async.timeout.from=function(ms){};
/**
 * @param {mixed} ms 
*/
dojox.lang.async.timeout.failOn=function(ms){};
/**
 * @namespace
*/
dojox.lang.async.topic={};
/**
 * @param {mixed} topic 
*/
dojox.lang.async.topic.from=function(topic){};
/**
 * @param {mixed} topic 
*/
dojox.lang.async.topic.failOn=function(topic){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads the documentation and applies it to the previously defined classes<br>
 *	 and any future defined classes<br>
 * </blockquote>
 * @param {Boolean} async If true, the documentation will be loaded asynchronously
*/
dojox.lang.docs.init=function(async){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an array of arrays, where the i-th array<br>
 *	 contains the i-th element from each of the argument arrays.<br>
 * </blockquote>
 * This is the venerable zip combiner (for example,<br>
 * see Python documentation for general details). The returned<br>
 * array is truncated to match the length of the shortest input<br>
 * array.
 * @returns {Array} -
*/
dojox.lang.functional.zip=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an array of all values in the object<br>
 * </blockquote>
 * @param {Object} obj 
 * @returns {Array} -
*/
dojox.lang.functional.values=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 similar to dojox.lang.functional.zip(), but takes<br>
 *	 a single array of arrays as the input.<br>
 * </blockquote>
 * This function is similar to dojox.lang.functional.zip()<br>
 * and can be used to unzip objects packed by<br>
 * dojox.lang.functional.zip(). It is here mostly to provide<br>
 * a short-cut for the different method signature.
 * @param {Array} a 
 * @returns {Array} -
*/
dojox.lang.functional.unzip=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 builds an array by repeatedly applying a unary function with<br>
 *	 a seed value Z until the predicate is satisfied.<br>
 * </blockquote>
 * @param {Function|String|Array} pr 
 * @param {Function|String|Array} f 
 * @param {Object} z 
 * @param {Object} [o] 
 * @returns {Array} -
*/
dojox.lang.functional.until=function(pr, f, z, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 builds an array by unfolding a value<br>
 * </blockquote>
 * @param {Function|String|Array} pr 
 * @param {Function|String|Array} f 
 * @param {Function|String|Array} g 
 * @param {Object} z 
 * @param {Object} [o] 
 * @returns {Array} -
*/
dojox.lang.functional.unfold=function(pr, f, g, z, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generates a function for the tail recursion pattern. This is the simplified<br>
 *	 version of the linear recursive combinator without the &amp;quot;after&amp;quot; function,<br>
 *	 and with the modified &amp;quot;before&amp;quot; function. All parameter functions are called<br>
 *	 in the context of &amp;quot;this&amp;quot; object.<br>
 * </blockquote>
 * @param {Function|String|Array} cond The lambda expression, which is used to detect the termination of recursion.
 * It accepts the same parameter as the generated recursive function itself.<br>
 * This function should return &quot;true&quot;, if the recursion should be stopped,<br>
 * and the &quot;then&quot; part should be executed. Otherwise the recursion will proceed.
 * @param {Function|String|Array} then The lambda expression, which is called upon termination of the recursion.
 * It accepts the same parameters as the generated recursive function itself.<br>
 * The returned value will be returned as the value of the generated function.
 * @param {Function|String|Array} before The lambda expression, which is called before the recursive step.
 * It accepts the same parameter as the generated recursive function itself,<br>
 * and returns an array of arguments for the next recursive call of<br>
 * the generated function.<br>
*/
dojox.lang.functional.tailrec=function(cond, then, before){};
/**
 * <b>Summary:</b><blockquote>
 *	 tests whether some element in the array passes the test<br>
 *	 implemented by the provided function.<br>
 * </blockquote>
 * @param {Array|String} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Boolean} -
*/
dojox.lang.functional.someRev=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 tests whether some element in the array passes the test<br>
 *	 implemented by the provided function.<br>
 * </blockquote>
 * @param {Array|String|Object} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Boolean} -
*/
dojox.lang.functional.some=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 builds an array by repeatedly applying a unary function N times<br>
 *	 with a seed value Z. N should be greater than 0.<br>
 * </blockquote>
 * @param {Number} n 
 * @param {Function|String|Array} f 
 * @param {Object} z 
 * @param {Object} [o] 
 * @returns {Array} -
*/
dojox.lang.functional.repeat=function(n, f, z, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 apply a function simultaneously against two values of the array<br>
 *	 (from right-to-left) as to reduce it to a single value.<br>
 * </blockquote>
 * @param {Array|String} a 
 * @param {Function|String|Array} f 
 * @param {Object} [z] 
 * @returns {Object} -
*/
dojox.lang.functional.reduceRight=function(a, f, z){};
/**
 * <b>Summary:</b><blockquote>
 *	 apply a function simultaneously against two values of the array<br>
 *	 (from left-to-right) as to reduce it to a single value.<br>
 * </blockquote>
 * @param {Array|String|Object} a 
 * @param {Function|String|Array} f 
 * @param {Object} [z] 
 * @returns {Object} -
*/
dojox.lang.functional.reduce=function(a, f, z){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a function where some arguments are bound, and<br>
 *	 some arguments (marked as dojox.lang.functional.arg) are will be<br>
 *	 accepted by the final function in the order they are encountered.<br>
 * </blockquote>
 * This method is used to produce partially bound<br>
 * functions. If you want to change the order of arguments, use<br>
 * dojox.lang.functional.mixer() or dojox.lang.functional.flip().
 * @param {Function|String|Array} f 
 * @returns {Function} -
*/
dojox.lang.functional.partial=function(f){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generates a function for the simplified numeric linear recursion pattern.<br>
 *	 All parameter functions are called in the context of &amp;quot;this&amp;quot; object.<br>
 * </blockquote>
 * This is a simplification of the linear recursion combinator:<br>
 * - the generated function takes one numeric parameter "x",<br>
 * - the "cond" is fixed and checks for 0.<br>
 * - the "before" is fixed and the generated function is called with "x - 1".<br>
 * - the "above is called with two parameters: the return from the generated<br>
 * function, and with "x".<br>
 * - as you can see the recursion is done by decreasing the parameter,<br>
 * and calling itself until it reaches 0.
 * @param {Object} then The value, which is used upon termination of the recursion.
 * It will be returned as the value of the generated function.<br>
 * above:<br>
 * The lambda expression, which is called after the recursive step.<br>
 * It accepts two parameters: the returned value from the recursive step, and<br>
 * the original parameter. The returned value will be returned as the value of<br>
 * the generated function.
 * @param {Function|String|Array} after 
*/
dojox.lang.functional.numrec=function(then, after){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generates a function for the multi-way recursion pattern.<br>
 *	 All parameter functions are called in the context of &amp;quot;this&amp;quot; object.<br>
 * </blockquote>
 * @param {Function|String|Array} cond The lambda expression, which is used to detect the termination of recursion.
 * It accepts the same parameter as the generated recursive function itself.<br>
 * This function should return &quot;true&quot;, if the recursion should be stopped,<br>
 * and the &quot;then&quot; part should be executed. Otherwise the recursion will proceed.
 * @param {Function|String|Array} then The lambda expression, which is called upon termination of the recursion.
 * It accepts the same parameters as the generated recursive function itself.<br>
 * The returned value will be returned as the value of the generated function.
 * @param {Function|String|Array} before The lambda expression, which is called before the recursive step.
 * It accepts the same parameter as the generated recursive function itself.<br>
 * The returned value should be an array, which is used to call<br>
 * the generated function recursively. Each member of the array should be<br>
 * an array of parameters. The length of it defines how many times<br>
 * the generated function is called recursively.<br>
 * above:<br>
 * The lambda expression, which is called after the recursive step.<br>
 * It accepts two parameters: the array of returned values from recursive steps,<br>
 * and the original array of parameters used with all other functions.<br>
 * The returned value will be returned as the value of the generated function.
 * @param {Function|String|Array} after 
*/
dojox.lang.functional.multirec=function(cond, then, before, after){};
/**
 * <b>Summary:</b><blockquote>
 *	 changes the order of arguments using an array of<br>
 *	 numbers mix --- i-th argument comes from mix[i]-th place<br>
 *	 of supplied arguments.<br>
 * </blockquote>
 * @param {Function|String|Array} f 
 * @param {Array} mix 
 * @returns {Function} -
*/
dojox.lang.functional.mixer=function(f, mix){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a new array with the results of calling<br>
 *	 a provided function on every element in this array.<br>
 * </blockquote>
 * @param {Array|String} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Array} -
*/
dojox.lang.functional.mapRev=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates new object with the results of calling<br>
 *	 a provided function on every attribute in this object.<br>
 * </blockquote>
 * @param {Object} obj 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Object} -
*/
dojox.lang.functional.mapIn=function(obj, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a new array with the results of calling<br>
 *	 a provided function on every element in this array.<br>
 * </blockquote>
 * @param {Array|String|Object} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Array} -
*/
dojox.lang.functional.map=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 executes the list comprehension building an array.<br>
 * </blockquote>
 * @param {String} s 
 * @returns {Array} -
*/
dojox.lang.functional.listcomp=function(s){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generates a function for the linear recursion pattern.<br>
 *	 All parameter functions are called in the context of &amp;quot;this&amp;quot; object.<br>
 * </blockquote>
 * @param {Function|String|Array} cond The lambda expression, which is used to detect the termination of recursion.
 * It accepts the same parameter as the generated recursive function itself.<br>
 * This function should return &quot;true&quot;, if the recursion should be stopped,<br>
 * and the &quot;then&quot; part should be executed. Otherwise the recursion will proceed.
 * @param {Function|String|Array} then The lambda expression, which is called upon termination of the recursion.
 * It accepts the same parameters as the generated recursive function itself.<br>
 * The returned value will be returned as the value of the generated function.
 * @param {Function|String|Array} before The lambda expression, which is called before the recursive step.
 * It accepts the same parameter as the generated recursive function itself.<br>
 * The returned value should be an array, which is used to call<br>
 * the generated function recursively.<br>
 * above:<br>
 * The lambda expression, which is called after the recursive step.<br>
 * It accepts two parameters: the returned value from the recursive step, and<br>
 * the original array of parameters used with all other functions.<br>
 * The returned value will be returned as the value of the generated function.
 * @param {Function|String|Array} after 
*/
dojox.lang.functional.linrec=function(cond, then, before, after){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns an array of all keys in the object<br>
 * </blockquote>
 * @param {Object} obj 
 * @returns {Array} -
*/
dojox.lang.functional.keys=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates the inlined version of a string lambda.<br>
 * </blockquote>
 * @param {String} lambda The String variable representing the lambda function.
 * @param {String|Array} init Conveys how to initialize parameters. If it is a String, then the apply() method
 * would be emulated treating &quot;init&quot; as a list of input parameters.<br>
 * It it is an Array, then the call() method is emulated treating array members<br>
 * as input parameters.
 * @param {Function} [add2dict] The optional function, which is used to record names of lambda parameters.
 * If supplied, this function is called with a name of every parameter.
 * @returns {String} -
*/
dojox.lang.functional.inlineLambda=function(lambda, init, add2dict){};
/**
 * <b>Summary:</b><blockquote>
 *	 iterates over all object attributes.<br>
 * </blockquote>
 * @param {Object} obj 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Object} -
*/
dojox.lang.functional.forIn=function(obj, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 executes a provided function once per array element.<br>
 * </blockquote>
 * @param {Array|String} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
*/
dojox.lang.functional.forEachRev=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 executes a provided function once per array element.<br>
 * </blockquote>
 * @param {Array|String|Object} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Object} -
*/
dojox.lang.functional.forEach=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 repeatedly applies a binary function to an array from right<br>
 *	 to left; returns the final value.<br>
 * </blockquote>
 * @param {Array|String} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Object} -
*/
dojox.lang.functional.foldr1=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 repeatedly applies a binary function to an array from right<br>
 *	 to left using a seed value as a starting point; returns the final<br>
 *	 value.<br>
 * </blockquote>
 * @param {Array|String} a 
 * @param {Function|String|Array} f 
 * @param {Object} z 
 * @param {Object} [o] 
 * @returns {Object} -
*/
dojox.lang.functional.foldr=function(a, f, z, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 repeatedly applies a binary function to an array from left<br>
 *	 to right; returns the final value.<br>
 * </blockquote>
 * @param {Array|String|Object} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Object} -
*/
dojox.lang.functional.foldl1=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 repeatedly applies a binary function to an array from left<br>
 *	 to right using a seed value as a starting point; returns the final<br>
 *	 value.<br>
 * </blockquote>
 * @param {Array|String|Object} a 
 * @param {Function} f 
 * @param {Object} z 
 * @param {Object} [o] 
 * @returns {Object} -
*/
dojox.lang.functional.foldl=function(a, f, z, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 changes the order of arguments by reversing their<br>
 *	 order.<br>
 * </blockquote>
 * @param {Function|String|Array} f 
 * @returns {Function} -
*/
dojox.lang.functional.flip=function(f){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a new array with all elements that pass the test<br>
 *	 implemented by the provided function.<br>
 * </blockquote>
 * @param {Array|String} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Array} -
*/
dojox.lang.functional.filterRev=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates new object with all attributes that pass the test<br>
 *	 implemented by the provided function.<br>
 * </blockquote>
 * @param {Object} obj 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Object} -
*/
dojox.lang.functional.filterIn=function(obj, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a new array with all elements that pass the test<br>
 *	 implemented by the provided function.<br>
 * </blockquote>
 * @param {Array|String|Object} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Array} -
*/
dojox.lang.functional.filter=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 tests whether all elements in the array pass the test<br>
 *	 implemented by the provided function.<br>
 * </blockquote>
 * @param {Array|String} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Boolean} -
*/
dojox.lang.functional.everyRev=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 tests whether all elements in the array pass the test<br>
 *	 implemented by the provided function.<br>
 * </blockquote>
 * @param {Array|String|Object} a 
 * @param {Function|String|Array} f 
 * @param {Object} [o] 
 * @returns {Boolean} -
*/
dojox.lang.functional.every=function(a, f, o){};
/**
 * <b>Summary:</b><blockquote>
 *	 curries a function until the arity is satisfied, at<br>
 *	 which point it returns the calculated value.<br>
 * </blockquote>
 * @param {Function|String|Array} f 
 * @param {Number} [arity] 
 * @returns {Function} -
*/
dojox.lang.functional.curry=function(f, arity){};
/**
 * <b>Summary:</b><blockquote>
 *	 builds a function from a text snippet, which represents a valid<br>
 *	 JS 1.7 list comprehension, returns a function object.<br>
 * </blockquote>
 * This method returns a function built from the list<br>
 * comprehension text snippet (conformant to JS 1.7). It is meant to be<br>
 * reused several times.
 * @param {String} s 
 * @returns {Function} -
*/
dojox.lang.functional.compileListcomp=function(s){};
/**
 * <b>Summary:</b><blockquote>
 *	 builds a function from a text snippet, which represents a valid<br>
 *	 JS 1.7 list comprehension, returns a string, which represents the function.<br>
 * </blockquote>
 * This method returns a textual representation of a function<br>
 * built from the list comprehension text snippet (conformant to JS 1.7).<br>
 * It is meant to be evaled in the proper context, so local variable can be<br>
 * pulled from the environment.
 * @param {String} s 
 * @returns {String} -
*/
dojox.lang.functional.buildListcomp=function(s){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generates a function for the binary recursion pattern.<br>
 *	 All parameter functions are called in the context of &amp;quot;this&amp;quot; object.<br>
 * </blockquote>
 * @param {Function|String|Array} cond The lambda expression, which is used to detect the termination of recursion.
 * It accepts the same parameter as the generated recursive function itself.<br>
 * This function should return &quot;true&quot;, if the recursion should be stopped,<br>
 * and the &quot;then&quot; part should be executed. Otherwise the recursion will proceed.
 * @param {Function|String|Array} then The lambda expression, which is called upon termination of the recursion.
 * It accepts the same parameters as the generated recursive function itself.<br>
 * The returned value will be returned as the value of the generated function.
 * @param {Function|String|Array} before The lambda expression, which is called before the recursive step.
 * It accepts the same parameter as the generated recursive function itself.<br>
 * The returned value should be an array of two variable, which are used to call<br>
 * the generated function recursively twice in row starting from the first item.<br>
 * above:<br>
 * The lambda expression, which is called after the recursive step.<br>
 * It accepts three parameters: two returned values from recursive steps, and<br>
 * the original array of parameters used with all other functions.<br>
 * The returned value will be returned as the value of the generated function.
 * @param {Function|String|Array} after 
*/
dojox.lang.functional.binrec=function(cond, then, before, after){};
/**
 * <b>Summary:</b><blockquote>
 *	 Process properties in place by removing and renaming them.<br>
 * </blockquote>
 * Properties of an object are to be renamed or removed specified<br>
 * by "map" argument. Only own properties of "map" are processed.
 * @param {Object:} bag the object to be processed
 * @param {Object:} map the dictionary for renaming (false value indicates removal of the named property)
 * 
 * @returns {Object} -the original object
 * @example
 * 	oo.rearrange(bag, {
 * 		abc: "def",	// rename "abc" attribute to "def"
 * 		ghi: null	// remove/hide "ghi" attribute
 * 	});
*/
dojox.lang.oo.rearrange=function(bag, map){};
/**
 * <b>Summary:</b><blockquote>
 *	 mixes in two or more objects processing decorators and filters<br>
 *	 using defaults as a fallback<br>
 * </blockquote>
 * @param {Object:} target target to receive new/updated properties
 * @param {Object:} source source of properties, more than one source is allowed
 * 
 * @returns {Object} -target
*/
dojox.lang.oo.mixin=function(target, source){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates new custom decorator creator<br>
 * </blockquote>
 * @param {Function|Object:} decorator a function to handle the custom assignment,
 * or an object with exec() method<br>
*/
dojox.lang.oo.makeDecorator=function(decorator){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates a simple filter object<br>
 * </blockquote>
 * @param {Object:} bag object to be filtered
 * @param {Object:} map the dictionary for renaming/removing while copying
*/
dojox.lang.oo.filter=function(bag, map){};
/**
 * <b>Summary:</b><blockquote>
 *	 applies a decorator unraveling all embedded decorators<br>
 * </blockquote>
 * @param {Function:} decorator top-level decorator to apply
 * @param {String:} name name of the property
 * @param {Object:} newValue new value of the property
 * @param {Object:} oldValue old value of the property
*/
dojox.lang.oo.applyDecorator=function(decorator, name, newValue, oldValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 mixes in two objects processing decorators and filters<br>
 * </blockquote>
 * @param {Object:} target target to receive new/updated properties
 * @param {Object:} source source of properties
 * defaults: dojox.lang.oo.__MixinDefaults?:<br>
 * default functions for various aspects of mixing
 * @param {mixed} decorator 
 * @param {mixed} filter 
 * @param {mixed} mixer 
 * @private
 * 
 * @returns {Object} -target
*/
dojox.lang.oo.__mixin=function(target, source, decorator, filter, mixer){};
/**
 * <b>Summary:</b><blockquote>
 *	 a dict of default parameters for dojox.lang.oo._mixin<br>
 * </blockquote>
 * @private
*/
dojox.lang.oo.__MixinDefaults=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Filter to control mixing in objects by skipping<br>
 *	 properties and renaming them.<br>
 * </blockquote>
 * This object is used as a holder of an original object<br>
 * (whose properites are to be copied), and a filter<br>
 * function used while copying by dojox.lang.oo.mixin.
 * @param {Object:} bag object to be filtered
 * @param {Function|Object:} filter a function to handle the name filtering,
 * or an object with exec() method<br>
*/
dojox.lang.oo.Filter=function(bag, filter){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base class for all decorators.<br>
 * </blockquote>
 * This object holds an original function or another decorator<br>
 * object, and implements a special mixin algorithm to be used<br>
 * by dojox.lang.oo.mixin.
 * @param {Object:} value a payload to be processed by the decorator.
 * @param {Function|Object:} decorator a function to handle the custom assignment, or an object with exec()
 * method. The signature is:<br>
 * decorator(///String/// name, ///Function/// newValue, ///Function/// oldValue).<br>
*/
dojox.lang.oo.Decorator=function(value, decorator){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base class for all decorators.<br>
 * </blockquote>
 * This object holds an original function or another decorator<br>
 * object, and implements a special mixin algorithm to be used<br>
 * by dojox.lang.oo.mixin.
 * @class
 * @returns {dojox.lang.oo.Decorator} new instance
*/
dojox.lang.oo.Decorator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Filter to control mixing in objects by skipping<br>
 *	 properties and renaming them.<br>
 * </blockquote>
 * This object is used as a holder of an original object<br>
 * (whose properites are to be copied), and a filter<br>
 * function used while copying by dojox.lang.oo.mixin.
 * @class
 * @returns {dojox.lang.oo.Filter} new instance
*/
dojox.lang.oo.Filter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a dict of default parameters for dojox.lang.oo._mixin<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.lang.oo.__MixinDefaults} new instance
*/
dojox.lang.oo.__MixinDefaults=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 cleans content to make it less likely to generate DOM/JS errors.<br>
 * </blockquote>
 * useful if you send ContentPane a complete page, instead of a html fragment<br>
 * scans for<br>
 * <br>
 * * title Node, remove<br>
 * * DOCTYPE tag, remove
 * @class
 * @extends dijit.layout.ContentPane
 * @returns {dojox.layout.ContentPane} new instance
*/
dojox.layout.ContentPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 event callback, called on script error or on java handler error<br>
 *	 overide and return your own html string if you want a some text<br>
 *	 displayed within the ContentPane<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.layout.ContentPane
*/
dojox.layout.ContentPane.prototype.onExecError=function(e){};
/**
 * @param {mixed} cont 
 * @private
 * @memberOf dojox.layout.ContentPane
*/
dojox.layout.ContentPane.prototype._setContent=function(cont){};
/**
 * @param {mixed} service 
 * @param {mixed} withHandles 
 * @param {mixed} handleClasses 
 * @param {mixed} first 
 * @private
*/
dojox.layout.dnd._setGcDndHandle=function(service, withHandles, handleClasses, first){};
/**
 * <b>Summary:</b><blockquote>
 *	 dnd source handling plotted zone to show the dropping area<br>
 * </blockquote>
 * @param {Node} node 
 * @param {Object} params 
*/
dojox.layout.dnd.PlottedDnd=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 An empty widget to show at the user the drop zone of the widget.<br>
 * </blockquote>
 * @param {String} cn 
 * @param {String} tag 
*/
dojox.layout.dnd.DropIndicator=function(cn, tag){};
/**
 * <b>Summary:</b><blockquote>
 *	 An Object, which represents the object being moved in a GridContainer<br>
 * </blockquote>
 * @param {mixed} manager 
 * @param {mixed} opacity 
*/
dojox.layout.dnd.Avatar=function(manager, opacity){};
/**
 * <b>Summary:</b><blockquote>
 *	 An Object, which represents the object being moved in a GridContainer<br>
 * </blockquote>
 * @class
 * @extends dojo.dnd.Avatar
 * @param {mixed} manager 
 * @param {mixed} opacity 
 * @returns {dojox.layout.dnd.Avatar} new instance
*/
dojox.layout.dnd.Avatar=function(manager, opacity){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the avatar to reflect the current DnD state.<br>
 * </blockquote>
 * @memberOf dojox.layout.dnd.Avatar
*/
dojox.layout.dnd.Avatar.prototype.update=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A constructor function. it is separate so it can be (dynamically)<br>
 *	 overwritten in case of need.<br>
 * </blockquote>
 * @memberOf dojox.layout.dnd.Avatar
*/
dojox.layout.dnd.Avatar.prototype.construct=function(){};
/**
 * @private
 * @memberOf dojox.layout.dnd.Avatar
*/
dojox.layout.dnd.Avatar.prototype._generateText=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 dnd source handling plotted zone to show the dropping area<br>
 * </blockquote>
 * @class
 * @extends dojo.dnd.Source
 * @param {Node} node 
 * @param {Object} params 
 * @returns {dojox.layout.dnd.PlottedDnd} new instance
*/
dojox.layout.dnd.PlottedDnd=function(node, params){};
/**
 * @namespace
*/
dojox.layout.dnd.PlottedDnd.offsetDrag={};
/**
 * <b>Summary:</b><blockquote>
 *	 set the position of the drop indicator<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.setIndicatorPosition=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 set an item as selectable<br>
 * </blockquote>
 * @param {Node} node 
 * @param {Boolean} isSelectable 
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.setDndItemSelectable=function(node, isSelectable){};
/**
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.onOverEvent=function(){};
/**
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.onOutEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event processor for onmouseup.<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event processor for onmousemove<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event processor for onmousedown.<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.onMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called to initiate the DnD operation.<br>
 * </blockquote>
 * @param {Object} source 
 * @param {Array} nodes 
 * @param {Object} copy 
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.onDndStart=function(source, nodes, copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called to finish the DnD operation<br>
 * </blockquote>
 * @param {mixed} source 
 * @param {mixed} nodes 
 * @param {mixed} copy 
 * @param {mixed} target 
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.onDndDrop=function(source, nodes, copy, target){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called to cancel the DnD operation.<br>
 * </blockquote>
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.onDndCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 test if this node can be accepted<br>
 * </blockquote>
 * @param {Node} node 
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.isAccepted=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Inserts new data items (see Dojo Container's insertNodes method for details).<br>
 * </blockquote>
 * @param {Boolean} addSelected 
 * @param {Array} data 
 * @param {Boolean} before 
 * @param {Node} anchor 
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.insertNodes=function(addSelected, data, before, anchor){};
/**
 * <b>Summary:</b><blockquote>
 *	 Insert the dashed zone at the right place<br>
 * </blockquote>
 * @param {Boolean} before 
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.insertDashedZone=function(before){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return one or more widget selected during the drag.<br>
 * </blockquote>
 * @param {Node} node 
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.getDraggedWidget=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 hide the dashed zone<br>
 * </blockquote>
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype.deleteDashedZone=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes a class of the current target anchor based on &amp;quot;before&amp;quot; status.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype._unmarkTargetAnchor=function(){};
/**
 * @param {mixed} node 
 * @param {mixed} prop 
 * @private
 * @returns {integer} -
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype._sumAncestorProperties=function(node, prop){};
/**
 * @private
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype._stopAutoScroll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Assigns a class to the current target anchor based on &amp;quot;before&amp;quot; status<br>
 * </blockquote>
 * @param {Boolean} before 
 * @private
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype._markTargetAnchor=function(before){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks if user clicked on &amp;quot;approved&amp;quot; items.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype._legalMouseDown=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype._checkAutoScroll=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate each position of children<br>
 * </blockquote>
 * @param {Boolean} height 
 * @private
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype._calculateCoords=function(height){};
/**
 * @param {mixed} node 
 * @private
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype._autoScrollUp=function(node){};
/**
 * @param {mixed} node 
 * @private
 * @memberOf dojox.layout.dnd.PlottedDnd
*/
dojox.layout.dnd.PlottedDnd.prototype._autoScrollDown=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 An empty widget to show at the user the drop zone of the widget.<br>
 * </blockquote>
 * @class
 * @param {String} cn 
 * @param {String} tag 
 * @returns {dojox.layout.dnd.DropIndicator} new instance
*/
dojox.layout.dnd.DropIndicator=function(cn, tag){};
/**
 * @memberOf dojox.layout.dnd.DropIndicator
*/
dojox.layout.dnd.DropIndicator.prototype.isInserted=function(){};
/**
 * @memberOf dojox.layout.dnd.DropIndicator
*/
dojox.layout.dnd.DropIndicator.prototype.destroy=function(){};
/**
 * @memberOf dojox.layout.dnd.DropIndicator
*/
dojox.layout.dnd.DropIndicator.prototype.create=function(){};
/**
 * @namespace
*/
document.body={};
/**
*/
document.body.onselectstart=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes a pane's content dragable by/within it's surface<br>
 * </blockquote>
 * A small widget which takes a node with overflow:auto and<br>
 * allows dragging to position the content. Useful with images,<br>
 * or for just adding "something" to a overflow-able div.
 * @class
 * @extends dijit._Widget
 * @returns {dojox.layout.DragPane} new instance
*/
dojox.layout.DragPane=function(){};
/**
 * @memberOf dojox.layout.DragPane
*/
dojox.layout.DragPane.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 mouseup handler, stop the dragging<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.layout.DragPane
*/
dojox.layout.DragPane.prototype._up=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 mousemove listener, offset the scroll amount by the delta<br>
 *	 since our last call.<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.layout.DragPane
*/
dojox.layout.DragPane.prototype._move=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 mousedown handler, start the dragging<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.layout.DragPane
*/
dojox.layout.DragPane.prototype._down=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 An experimental collapsing-pane for dijit.layout.BorderContainer<br>
 * </blockquote>
 * Works just like a ContentPane inside of a borderContainer. Will expand/collapse on<br>
 * command, and supports having Layout Children as direct descendants
 * @class
 * @extends dijit.layout.ContentPane
 * @extends dijit._TemplatedMixin
 * @extends dijit._Contained
 * @extends dijit._Container
 * @returns {dojox.layout.ExpandoPane} new instance
*/
dojox.layout.ExpandoPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Toggle this pane's visibility<br>
 * </blockquote>
 * @memberOf dojox.layout.ExpandoPane
*/
dojox.layout.ExpandoPane.prototype.toggle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 we aren't a layout widget, but need to act like one:<br>
 * </blockquote>
 * @param {Object} [newSize] The size object to resize to
 * @memberOf dojox.layout.ExpandoPane
*/
dojox.layout.ExpandoPane.prototype.resize=function(newSize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Expand this pane in preview mode (does not affect surrounding layout)<br>
 * </blockquote>
 * @memberOf dojox.layout.ExpandoPane
*/
dojox.layout.ExpandoPane.prototype.preview=function(){};
/**
 * @memberOf dojox.layout.ExpandoPane
*/
dojox.layout.ExpandoPane.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Trap stray events<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.layout.ExpandoPane
*/
dojox.layout.ExpandoPane.prototype._trap=function(e){};
/**
 * @private
 * @memberOf dojox.layout.ExpandoPane
*/
dojox.layout.ExpandoPane.prototype._startupSizes=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Common animation onEnd code - &amp;quot;unclose&amp;quot;<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.ExpandoPane
*/
dojox.layout.ExpandoPane.prototype._showEnd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create the show and hide animations<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.ExpandoPane
*/
dojox.layout.ExpandoPane.prototype._setupAnims=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the Expando state to &amp;quot;closed&amp;quot;<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.ExpandoPane
*/
dojox.layout.ExpandoPane.prototype._hideWrapper=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback for the hide animation - &amp;quot;close&amp;quot;<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.ExpandoPane
*/
dojox.layout.ExpandoPane.prototype._hideEnd=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.layout.ExpandoPane
*/
dojox.layout.ExpandoPane.prototype._afterResize=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-modal Floating window.<br>
 * </blockquote>
 * Makes a `dojox.layout.ContentPane` float and draggable by it's title [similar to TitlePane]<br>
 * and over-rides onClick to onDblClick for wipeIn/Out of containerNode<br>
 * provides minimize(dock) / show() and hide() methods, and resize [almost]
 * @class
 * @extends dojox.layout.ContentPane
 * @extends dijit._TemplatedMixin
 * @returns {dojox.layout.FloatingPane} new instance
*/
dojox.layout.FloatingPane=function(){};
/**
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the FloatingPane<br>
 * </blockquote>
 * @param {Function} [callback] 
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype.show=function(callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the Title bar with a new string<br>
 * </blockquote>
 * @param {String} title 
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype.setTitle=function(title){};
/**
 * <b>Summary:</b><blockquote>
 *	 Size the FloatingPane and place accordingly<br>
 * </blockquote>
 * @param {Object} dim 
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype.resize=function(dim){};
/**
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide and dock the FloatingPane<br>
 * </blockquote>
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype.minimize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Make this FloatingPane full-screen (viewport)<br>
 * </blockquote>
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype.maximize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Close, but do not destroy this FloatingPane<br>
 * </blockquote>
 * @param {Function} [callback] 
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype.hide=function(callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy this FloatingPane completely<br>
 * </blockquote>
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Close and destroy this widget<br>
 * </blockquote>
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype.close=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 bring this FloatingPane above all other panes<br>
 * </blockquote>
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype.bringToTop=function(){};
/**
 * @private
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype._restore=function(){};
/**
 * @private
 * @memberOf dojox.layout.FloatingPane
*/
dojox.layout.FloatingPane.prototype._dock=function(){};

/**
 * @namespace
*/
dojox.layout.FloatingPane.domNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget that attaches to a node and keeps track of incoming / outgoing FloatingPanes<br>
 *	 and handles layout<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.layout.Dock} new instance
*/
dojox.layout.Dock=function(){};
/**
 * @memberOf dojox.layout.Dock
*/
dojox.layout.Dock.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Instert a dockNode refernce into the dock<br>
 * </blockquote>
 * @param {mixed} refNode 
 * @memberOf dojox.layout.Dock
*/
dojox.layout.Dock.prototype.addNode=function(refNode){};
/**
 * @param {Event} [e] 
 * @private
 * @memberOf dojox.layout.Dock
*/
dojox.layout.Dock.prototype._positionDock=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 dojox.layout._DockNode is a private widget used to keep track of<br>
 *	 which pane is docked.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.layout._DockNode} new instance
*/
dojox.layout._DockNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 remove this dock item from parent dock, and call show() on reffed floatingpane<br>
 * </blockquote>
 * @memberOf dojox.layout._DockNode
*/
dojox.layout._DockNode.prototype.restore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A grid containing any kind of objects and acting like web portals.<br>
 * </blockquote>
 * This component inherits of all features of gridContainerLite plus :<br>
 * - Resize colums<br>
 * - Add / remove columns<br>
 * - Fix columns at left or at right.
 * @class
 * @extends dojox.layout.GridContainerLite
 * @returns {dojox.layout.GridContainer} new instance
 * @example
 * 	&lt;div dojoType="dojox.layout.GridContainer" nbZones="3" isAutoOrganized="true"&gt;
 * 		&lt;div dojoType="dijit.layout.ContentPane"&gt;Content Pane 1 : Drag Me !&lt;/div&gt;
 * 		&lt;div dojoType="dijit.layout.ContentPane"&gt;Content Pane 2 : Drag Me !&lt;/div&gt;
 * 		&lt;div dojoType="dijit.layout.ContentPane"&gt;Content Pane 3 : Drag Me !&lt;/div&gt;
 * 	&lt;/div&gt;
 * @example
 * 	dojo.ready(function(){
 * 		var cpane1 = new dijit.layout.ContentPane({ title:"cpane1", content: "Content Pane 1 : Drag Me !" }),
 * 			cpane2 = new dijit.layout.ContentPane({ title:"cpane2", content: "Content Pane 2 : Drag Me !" }),
 * 			cpane3 = new dijit.layout.ContentPane({ title:"cpane3", content: "Content Pane 3 : Drag Me !" });
 * 
 * 		var widget = new dojox.layout.GridContainer({
 * 			nbZones: 3,
 * 			isAutoOrganized: true
 * 		}, dojo.byId("idNode"));
 * 		widget.addChild(cpane1, 0, 0);
 * 		widget.addChild(cpane2, 1, 0);
 * 		widget.addChild(cpane3, 2, 1);
 * 		widget.startup();
 * 	});
*/
dojox.layout.GridContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call the startup of GridContainerLite and place grips<br>
 *	 if user has chosen the hasResizableColumns attribute to true.<br>
 * </blockquote>
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the number of columns.<br>
 * </blockquote>
 * @param {Integer} nbColumns Number of columns
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype.setColumns=function(nbColumns){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call when a child is dropped.<br>
 * </blockquote>
 * Allow to resize and put grips
 * @param {Node} node domNode of dropped widget.
 * @param {Object} targetArea AreaManager Object containing information of targetArea
 * @param {Integer} indexChild Index where the dropped widget has been placed
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype.resizeChildAfterDrop=function(node, targetArea, indexChild){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize the GridContainer widget and columns.<br>
 *	 Replace grips if it's necessary.<br>
 * </blockquote>
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype.resize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Place grips in the right place when the GridContainer becomes visible.<br>
 * </blockquote>
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype.onShow=function(){};
/**
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the columns width.<br>
 * </blockquote>
 * @param {Object} manager dojox.mdnd.AreaManager singleton
 * @private
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype._updateColumnsWidth=function(manager){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect events to listen the resize action.<br>
 *	 Change the type of width columns (% to px).<br>
 *	 Calculate the minwidth according to the children.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype._resizeColumnOn=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect resize events.<br>
 *	 Change the type of width columns (px to %).<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype._resizeColumnOff=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Change columns size.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype._resizeColumnMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Define the position of a grip and place it on page.<br>
 * </blockquote>
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype._placeGrips=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call on the onMouseUp only if the reiszeColumnMove was not called.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype._onGripMouseUp=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when a double click is catch. Resize all columns with the same width.<br>
 *	 The method resize of children have to be called.<br>
 * </blockquote>
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype._onGripDbClick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove some columns with indices passed as an array.<br>
 * </blockquote>
 * @param {Array} indices Column index array
 * @private
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype._deleteColumn=function(indices){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a grip for a specific zone.<br>
 * </blockquote>
 * @param {Integer} index index where the grip has to be created.
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype._createGrip=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add some columns.<br>
 * </blockquote>
 * @param {Integer} nbColumns Number of column to added
 * @private
 * @memberOf dojox.layout.GridContainer
*/
dojox.layout.GridContainer.prototype._addColumn=function(nbColumns){};
/**
 * <b>Summary:</b><blockquote>
 *	 The GridContainerLite is a container of child elements that are placed in a kind of grid.<br>
 * </blockquote>
 * GridContainerLite displays the child elements by column<br>
 * (ie: the children widths are fixed by the column width of the grid but<br>
 * the children heights are free).<br>
 * Each child is movable by drag and drop inside the GridContainer.<br>
 * The position of other children is automatically calculated when a child is moved.
 * @class
 * @extends dijit.layout._LayoutWidget
 * @extends dijit._TemplatedMixin
 * @param {Object} props 
 * @param {DOMNode} node 
 * @returns {dojox.layout.GridContainerLite} new instance
 * @example
 * 	&lt;div dojoType="dojox.layout.GridContainerLite" nbZones="3" isAutoOrganized="true"&gt;
 * 		&lt;div dojoType="dijit.layout.ContentPane"&gt;Content Pane 1 : Drag Me !&lt;/div&gt;
 * 		&lt;div dojoType="dijit.layout.ContentPane"&gt;Content Pane 2 : Drag Me !&lt;/div&gt;
 * 		&lt;div dojoType="dijit.layout.ContentPane"&gt;Content Pane 3 : Drag Me !&lt;/div&gt;
 * 	&lt;/div&gt;
 * @example
 * 	dojo.ready(function(){
 * 		var cpane1 = new dijit.layout.ContentPane({
 * 			title:"cpane1", content: "Content Pane 1 : Drag Me !"
 * 		}),
 * 		cpane2 = new dijit.layout.ContentPane({
 * 			title:"cpane2",
 * 			content: "Content Pane 2 : Drag Me !"
 * 		}),
 * 		cpane3 = new dijit.layout.ContentPane({
 * 			title:"cpane3",
 * 			content: "Content Pane 3 : Drag Me !"
 * 		});
 * 
 * 		var widget = new dojox.layout.GridContainerLite({
 * 			nbZones: 3,
 * 			isAutoOrganized: true
 * 		}, dojo.byId("idNode"));
 * 		widget.addChild(cpane1, 0, 0);
 * 		widget.addChild(cpane2, 1, 0);
 * 		widget.addChild(cpane3, 2, 1);
 * 		widget.startup();
 * 	});
*/
dojox.layout.GridContainerLite=function(props, node){};
/**
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite._grid=[];
/**
 * @namespace
 * @private
*/
dojox.layout.GridContainerLite._dragManager={};
/**
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize the GridContainerLite inner table and the dropped widget.<br>
 * </blockquote>
 * These components are resized only if the targetArea.node is a<br>
 * child of this instance of gridContainerLite.<br>
 * To be resized, the dropped node must have also a method resize.
 * @param {Node} node domNode of dropped widget.
 * @param {Object} targetArea AreaManager Object containing information of targetArea
 * @param {Integer} indexChild Index where the dropped widget has been placed
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.resizeChildAfterDrop=function(node, targetArea, indexChild){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize the GridContainerLite inner table only if the drag source<br>
 *	 is a child of this gridContainer.<br>
 * </blockquote>
 * @param {Node} node domNode of dragged widget.
 * @param {Object} sourceArea AreaManager Object containing information of sourceArea
 * @param {Integer} indexChild Index where the dragged widget has been placed
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.resizeChildAfterDragStart=function(node, sourceArea, indexChild){};
/**
 * @param {Widget} widget 
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.removeChild=function(widget){};
/**
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enabled the Drag And Drop if it's necessary.<br>
 * </blockquote>
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.onShow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disabled the Drag And Drop if it's necessary.<br>
 * </blockquote>
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.onHide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resize of each child<br>
 * </blockquote>
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.layout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A specific method which returns children after they were placed in zones.<br>
 * </blockquote>
 * 
 * @returns {Array} -
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.getChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enable the Drag And Drop for children of GridContainer.<br>
 * </blockquote>
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.enableDnd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disable the Drag And Drop for children of GridContainer.<br>
 * </blockquote>
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.disableDnd=function(){};
/**
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.destroy=function(){};
/**
 * @param {Object} child 
 * @param {Integer} [column] 
 * @param {Integer} [p] 
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.addService=function(child, column, p){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a child in a specific column of the GridContainer widget.<br>
 * </blockquote>
 * @param {Object} child widget to insert
 * @param {Integer} [column] column number
 * @param {Integer} [p] place in the zone (first = 0)
 * 
 * @returns {Widget} -
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype.addChild=function(child, column, p){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update the columns width.<br>
 * </blockquote>
 * @param {Object} manager dojox.mdnd.AreaManager singleton
 * @private
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype._updateColumnsWidth=function(manager){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype._setColWidthsAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enable keyboard accessibility into the GridContainer.<br>
 * </blockquote>
 * Possibility to move focus into the GridContainer (TAB, LEFT ARROW, RIGHT ARROW, UP ARROW, DOWN ARROW).<br>
 * Possibility to move GridContainer's children (Drag and Drop) with keyboard. (SHIFT +  ARROW).<br>
 * If the type of widget is not draggable, a popup is displayed.
 * @param {Event} event 
 * @private
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype._selectFocus=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Organize children by column property of widget.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype._organizeChildrenManually=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 List all zones and insert child into columns.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype._organizeChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if the domNode is visible or not.<br>
 * </blockquote>
 * 
 * @returns {Boolean} -
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype._isShown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Insert a child in a specific column of the GridContainer widget.<br>
 * </blockquote>
 * @param {Widget} child 
 * @param {Integer} column Column number
 * @param {Integer} [p] Place in the zone (0 - first)
 * @private
 * 
 * @returns {Widget} -
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype._insertChild=function(child, column, p){};
/**
 * <b>Summary:</b><blockquote>
 *	 return array of zone (domNode)<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype._getZonesAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create the columns of the GridContainer.<br>
 * </blockquote>
 * @memberOf dojox.layout.GridContainerLite
*/
dojox.layout.GridContainerLite.prototype._createCells=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Container that turns its Layout Children into a single Pane and transitions between states<br>
 *	 onHover of the button<br>
 * </blockquote>
 * @class
 * @extends dijit.layout.StackContainer
 * @extends dijit._Templated
 * @returns {dojox.layout.RadioGroup} new instance
*/
dojox.layout.RadioGroup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 scan the container for children, and make &amp;quot;tab buttons&amp;quot; for them<br>
 * </blockquote>
 * @memberOf dojox.layout.RadioGroup
*/
dojox.layout.RadioGroup.prototype.startup=function(){};
/**
 * @param {mixed} child 
 * @memberOf dojox.layout.RadioGroup
*/
dojox.layout.RadioGroup.prototype.removeChild=function(child){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when StackContainer receives a selectChild call, used to transition the panes.<br>
 * </blockquote>
 * @param {dijit._Widget} newWidget 
 * @param {dijit._Widget} oldWidget 
 * @private
 * @memberOf dojox.layout.RadioGroup
*/
dojox.layout.RadioGroup.prototype._transition=function(newWidget, oldWidget){};
/**
 * <b>Summary:</b><blockquote>
 *	 show the selected child widget<br>
 * </blockquote>
 * @param {dijit._Widget} page 
 * @private
 * @memberOf dojox.layout.RadioGroup
*/
dojox.layout.RadioGroup.prototype._showChild=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a hover button for a child node of the RadioGroup<br>
 * </blockquote>
 * @param {dijit._Widget} child 
 * @private
 * @memberOf dojox.layout.RadioGroup
*/
dojox.layout.RadioGroup.prototype._setupChild=function(child){};
/**
 * <b>Summary:</b><blockquote>
 *	 hide the specified child widget<br>
 * </blockquote>
 * @param {dijit._Widget} page 
 * @private
 * @memberOf dojox.layout.RadioGroup
*/
dojox.layout.RadioGroup.prototype._hideChild=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 An extension on a stock RadioGroup, that fades the panes.<br>
 * </blockquote>
 * @class
 * @returns {dojox.layout.RadioGroupFade} new instance
*/
dojox.layout.RadioGroupFade=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 show the specified child widget<br>
 * </blockquote>
 * @param {mixed} page 
 * @private
 * @memberOf dojox.layout.RadioGroupFade
*/
dojox.layout.RadioGroupFade.prototype._showChild=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 hide the specified child widget<br>
 * </blockquote>
 * @param {mixed} page 
 * @private
 * @memberOf dojox.layout.RadioGroupFade
*/
dojox.layout.RadioGroupFade.prototype._hideChild=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Sliding Radio Group<br>
 * </blockquote>
 * An extension on a stock RadioGroup widget, sliding the pane<br>
 * into view from being hidden. The entry direction is randomized<br>
 * on each view
 * @class
 * @returns {dojox.layout.RadioGroupSlide} new instance
*/
dojox.layout.RadioGroupSlide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A hook to override the default easing of the pane slides.<br>
 * </blockquote>
*/
dojox.layout.RadioGroupSlide.easing=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Slide in the selected child widget<br>
 * </blockquote>
 * @param {mixed} page 
 * @private
 * @memberOf dojox.layout.RadioGroupSlide
*/
dojox.layout.RadioGroupSlide.prototype._showChild=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the child out of view immediately after being hidden<br>
 * </blockquote>
 * @param {mixed} page 
 * @private
 * @memberOf dojox.layout.RadioGroupSlide
*/
dojox.layout.RadioGroupSlide.prototype._positionChild=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 reset the position of the hidden pane out of sight<br>
 * </blockquote>
 * @param {mixed} page 
 * @private
 * @memberOf dojox.layout.RadioGroupSlide
*/
dojox.layout.RadioGroupSlide.prototype._hideChild=function(page){};
/**
 * <b>Summary:</b><blockquote>
 *	 The Buttons for a RadioGroup<br>
 * </blockquote>
 * A private widget used to manipulate the StackContainer (RadioGroup*). Don't create directly.
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @extends dijit._Contained
 * @returns {dojox.layout._RadioButton} new instance
*/
dojox.layout._RadioButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 start listening to mouseOver<br>
 * </blockquote>
 * @memberOf dojox.layout._RadioButton
*/
dojox.layout._RadioButton.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the selected child on hover, and set our hover state class<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.layout._RadioButton
*/
dojox.layout._RadioButton.prototype._onMouse=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 remove hover state class from sibling Buttons. This is easier (and more reliable)<br>
 *	 than setting up an additional connection to onMouseOut<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout._RadioButton
*/
dojox.layout._RadioButton.prototype._clearSelected=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A global private resize helper shared between any<br>
 *	 `dojox.layout.ResizeHandle` with activeSizing off.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @returns {dojox.layout._ResizeHelper} new instance
*/
dojox.layout._ResizeHelper=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 show helper to start resizing<br>
 * </blockquote>
 * @memberOf dojox.layout._ResizeHelper
*/
dojox.layout._ResizeHelper.prototype.show=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 size the widget and place accordingly<br>
 * </blockquote>
 * @param {Object} dim 
 * @memberOf dojox.layout._ResizeHelper
*/
dojox.layout._ResizeHelper.prototype.resize=function(dim){};
/**
 * <b>Summary:</b><blockquote>
 *	 hide helper after resizing is complete<br>
 * </blockquote>
 * @memberOf dojox.layout._ResizeHelper
*/
dojox.layout._ResizeHelper.prototype.hide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A dragable handle used to resize an attached node.<br>
 * </blockquote>
 * The handle on the bottom-right corner of FloatingPane or other widgets that allows<br>
 * the widget to be resized.<br>
 * Typically not used directly.
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @returns {dojox.layout.ResizeHandle} new instance
*/
dojox.layout.ResizeHandle=function(){};
/**
 * @namespace
*/
dojox.layout.ResizeHandle.startSize={};
/**
 * <b>Summary:</b><blockquote>
 *	 setup our one major listener upon creation<br>
 * </blockquote>
 * @memberOf dojox.layout.ResizeHandle
*/
dojox.layout.ResizeHandle.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub fired when sizing is done. Fired once<br>
 *	 after resize, or often when `intermediateChanges` is<br>
 *	 set to true.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.layout.ResizeHandle
*/
dojox.layout.ResizeHandle.prototype.onResize=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when moving the ResizeHandle ... determines<br>
 *	 new size based on settings/position and sets styles.<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.layout.ResizeHandle
*/
dojox.layout.ResizeHandle.prototype._updateSizing=function(e){};
/**
 * @param {Event} e 
 * @param {String} box 
 * @private
 * @returns {Object} -
 * @memberOf dojox.layout.ResizeHandle
*/
dojox.layout.ResizeHandle.prototype._getNewCoords=function(e, box){};
/**
 * <b>Summary:</b><blockquote>
 *	 disconnect listenrs and cleanup sizing<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.layout.ResizeHandle
*/
dojox.layout.ResizeHandle.prototype._endSizing=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 filter through the various possible constaint possibilities.<br>
 * </blockquote>
 * @param {mixed} newW 
 * @param {mixed} newH 
 * @private
 * @returns {Object} -
 * @memberOf dojox.layout.ResizeHandle
*/
dojox.layout.ResizeHandle.prototype._checkConstraints=function(newW, newH){};
/**
 * <b>Summary:</b><blockquote>
 *	 apply sizing information based on information in (e) to attached node<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.layout.ResizeHandle
*/
dojox.layout.ResizeHandle.prototype._changeSizing=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 setup movement listeners and calculate initial size<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.layout.ResizeHandle
*/
dojox.layout.ResizeHandle.prototype._beginSizing=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extends a StackContainer to automatically transition between children<br>
 *	 and display navigation in the form of tabs or a pager.<br>
 * </blockquote>
 * The RotatorContainer cycles through the children with a transition.<br>
 * <br>
 * published topics:<br>
 * [widgetId]-update - Notifies pager(s) that a child has changed.<br>
 * Parameters:<br>
 * ///boolean/// playing - true if playing, false if paused<br>
 * ///int/// current	 - current selected child<br>
 * ///int/// total	   - total number of children
 * @class
 * @extends dijit.layout.StackContainer
 * @extends dijit._Templated
 * @returns {dojox.layout.RotatorContainer} new instance
 * @example
 * 	&lt;div dojoType="dojox.layout.RotatorContainer" id="myRotator" showTabs="true" autoStart="true" transitionDelay="5000"&gt;
 * 		&lt;div id="pane1" dojoType="dijit.layout.ContentPane" title="1"&gt;
 * 			Pane 1!
 * 		&lt;/div&gt;
 * 		&lt;div id="pane2" dojoType="dijit.layout.ContentPane" title="2"&gt;
 * 			Pane 2!
 * 		&lt;/div&gt;
 * 		&lt;div id="pane3" dojoType="dijit.layout.ContentPane" title="3" transitionDelay="10000"&gt;
 * 			Pane 3 with overrided transitionDelay!
 * 		&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.layout.RotatorContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes the pagers.<br>
 * </blockquote>
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes the DOM nodes, tabs, and transition stuff.<br>
 * </blockquote>
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Unsubscribe to all of our topics<br>
 * </blockquote>
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Notify the pager's current and total numbers.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._updatePager=function(){};
/**
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._transitionEnd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dispatches the appropriate transition.<br>
 * </blockquote>
 * @param {dijit._Widget} next 
 * @param {dijit._Widget} prev 
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._transition=function(next, prev){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function to style the children.<br>
 * </blockquote>
 * @param {DOMnode} node 
 * @param {number} opacity 
 * @param {int} zIndex 
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._styleNode=function(node, opacity, zIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fired when the play/pause pager button is toggled.<br>
 * </blockquote>
 * @param {mixed} playing 
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._state=function(playing){};
/**
 * @param {anything} value 
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._setShowTabsAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resets the timer used to start the next transition.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._resetTimer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Schedules the next transition.<br>
 * </blockquote>
 * @param {mixed} skip 
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._play=function(skip){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clears the transition timer and pauses the rotator.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._pause=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Triggered when the mouse is moved over the rotator container.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._onMouseOver=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Triggered when the mouse is moved off the rotator container.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._onMouseOut=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function is only called when a manual change occurs in which<br>
 *	 case we may need to stop playing and we need to reset the cycle counter<br>
 * </blockquote>
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._manualChange=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Crossfades two children.<br>
 * </blockquote>
 * @param {dijit._Widget} next 
 * @param {dijit._Widget} prev 
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._fade=function(next, prev){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cycles to the next/previous child.<br>
 * </blockquote>
 * @param {boolean} next or int
 * @private
 * @memberOf dojox.layout.RotatorContainer
*/
dojox.layout.RotatorContainer.prototype._cycle=function(next){};
/**
 * <b>Summary:</b><blockquote>
 *	 Defines controls used to manipulate a RotatorContainer<br>
 * </blockquote>
 * A pager can be defined one of two ways:<br>
 * * Externally of the RotatorContainer's template and tell the<br>
 * RotatorPager the rotatorId of the RotatorContainer<br>
 * * As a direct descendant of the RotatorContainer (i.e. inside the<br>
 * RotatorContainer's template)<br>
 * <br>
 * The pager can contain the following components:<br>
 * * Previous button<br>
 * - Must be a dijit.form.Button<br>
 * - dojoAttachPoint must be named "previous"<br>
 * * Next button<br>
 * - Must be a dijit.form.Button<br>
 * - dojoAttachPoint must be named "next"<br>
 * * Play/Pause toggle button<br>
 * - Must be a dijit.form.ToggleButton<br>
 * - dojoAttachPoint must be named "playPause"<br>
 * - Use iconClass to specify toggled state<br>
 * * Current child #<br>
 * - dojoAttachPoint must be named "current"<br>
 * * Total # of children<br>
 * - dojoAttachPoint must be named "total"<br>
 * <br>
 * You can choose to exclude specific controls as well as add elements<br>
 * for styling.<br>
 * <br>
 * Should you need a pager, but don't want to use Dijit buttons, you can<br>
 * write your own pager widget and just wire it into the topics.  The<br>
 * topic names are prefixed with the widget ID of the RotatorContainer.<br>
 * Notifications are received from and sent to the RotatorContainer as<br>
 * well as other RotatorPagers.<br>
 * <br>
 * published topics:<br>
 * [widgetId]-cycle - Notify that the next or previous button was pressed.<br>
 * Parameters:<br>
 * ///boolean/// next - true if next, false if previous<br>
 * [widgetId]-state - Notify that the play/pause button was toggled.<br>
 * Parameters:<br>
 * ///boolean/// playing - true if playing, false if paused
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @extends dijit._Contained
 * @returns {dojox.layout.RotatorPager} new instance
 * @example
 * A pager with the current/total children and previous/next buttons.
 * 	&lt;div dojoType="dojox.layout.RotatorPager" rotatorId="myRotator"&gt;
 * 		&lt;button dojoType="dijit.form.Button" dojoAttachPoint="previous"&gt;Prev&lt;/button&gt;
 * 		&lt;span dojoAttachPoint="current"&gt;&lt;/span&gt; / &lt;span dojoAttachPoint="total"&gt;&lt;/span&gt;
 * 		&lt;button dojoType="dijit.form.Button" dojoAttachPoint="next"&gt;Next&lt;/button&gt;
 * 	&lt;/div&gt;
 * @example
 * A pager with only a play/pause toggle button.
 * 	&lt;div dojoType="dojox.layout.RotatorPager" rotatorId="myRotator"&gt;
 * 		&lt;button dojoType="dijit.form.ToggleButton" dojoAttachPoint="playPause"&gt;&lt;/button&gt;
 * 	&lt;/div&gt;
 * @example
 * A pager styled with iconClass.
 * 	&lt;div dojoType="dojox.layout.RotatorPager" class="rotatorIcons" rotatorId="myRotator"&gt;
 * 		&lt;button dojoType="dijit.form.Button" iconClass="previous" dojoAttachPoint="previous"&gt;Prev&lt;/button&gt;
 * 		&lt;button dojoType="dijit.form.ToggleButton" iconClass="playPause" dojoAttachPoint="playPause"&gt;&lt;/button&gt;
 * 		&lt;button dojoType="dijit.form.Button" iconClass="next" dojoAttachPoint="next"&gt;Next&lt;/button&gt;
 * 		&lt;span dojoAttachPoint="current"&gt;&lt;/span&gt; / &lt;span dojoAttachPoint="total"&gt;&lt;/span&gt;
 * 	&lt;/div&gt;
*/
dojox.layout.RotatorPager=function(){};
/**
 * @memberOf dojox.layout.RotatorPager
*/
dojox.layout.RotatorPager.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.layout.RotatorPager
*/
dojox.layout.RotatorPager.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Unsubscribe to all of our topics<br>
 * </blockquote>
 * @memberOf dojox.layout.RotatorPager
*/
dojox.layout.RotatorPager.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the pager's play/pause button, current child, and total number of children.<br>
 * </blockquote>
 * @param {boolean} playing 
 * @param {int} current 
 * @param {int} total 
 * @private
 * @memberOf dojox.layout.RotatorPager
*/
dojox.layout.RotatorPager.prototype._update=function(playing, current, total){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the display of the play/pause button<br>
 * </blockquote>
 * @param {boolean} playing 
 * @private
 * @memberOf dojox.layout.RotatorPager
*/
dojox.layout.RotatorPager.prototype._state=function(playing){};
/**
 * <b>Summary:</b><blockquote>
 *	 A pane that &amp;quot;scrolls&amp;quot; its content based on the mouse poisition inside<br>
 * </blockquote>
 * A sizable container that takes it's content's natural size and creates<br>
 * a scroll effect based on the relative mouse position. It is an interesting<br>
 * way to display lists of data, or blocks of content, within a confined<br>
 * space.<br>
 * <br>
 * Horizontal scrolling is supported. Combination scrolling is not.
 * @class
 * @extends dijit.layout.ContentPane
 * @extends dijit._Templated
 * @returns {dojox.layout.ScrollPane} new instance
 * @example
 * 	&lt;div dojoType="dojox.layout.ScrollPane" style="width:150px height:300px;"&gt;
 * 		&lt;!-- any height content --&gt;
 * 	&lt;/div&gt;
*/
dojox.layout.ScrollPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 calculates required sizes. Call this if you add/remove content manually, or reload the content.<br>
 * </blockquote>
 * @param {mixed} size 
 * @memberOf dojox.layout.ScrollPane
*/
dojox.layout.ScrollPane.prototype.resize=function(size){};
/**
 * @memberOf dojox.layout.ScrollPane
*/
dojox.layout.ScrollPane.prototype.postCreate=function(){};
/**
 * @param {Float} n 
 * @private
 * @memberOf dojox.layout.ScrollPane
*/
dojox.layout.ScrollPane.prototype._set=function(n){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.layout.ScrollPane
*/
dojox.layout.ScrollPane.prototype._leave=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.layout.ScrollPane
*/
dojox.layout.ScrollPane.prototype._enter=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 calculate the relative offset of the cursor over the node, and call _set<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.layout.ScrollPane
*/
dojox.layout.ScrollPane.prototype._calc=function(e){};
/**
 * @class
 * @returns {dojox._WidgetBase} new instance
*/
dojox._WidgetBase=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container that lays out its child widgets in a table layout.<br>
 * </blockquote>
 * The TableContainer lays out child widgets in a Table layout.<br>
 * Each widget can specify a "label" or a "title" parameter.<br>
 * This label is displayed either above or to the left of<br>
 * a widget depending on whether the "orientation" attribute<br>
 * is "horiz" or "vert", for horizontal and vertical respectively.<br>
 * The number of columns is configured using the "cols" attribute.<br>
 * The width of labels can be configured using the "labelWidth" parameter.
 * @class
 * @returns {dojox.layout.TableContainer} new instance
 * @example
 * 	&lt;div dojoType="dojox.layout.TableContainer" orientation="vert" cols="3&gt;
 * 		&lt;div dojoType="dijit.form.TextInput" value="John" label="First Name:"&gt;&lt;/div&gt;
 * 		&lt;div dojoType="dijit.form.CheckBox" label="Is Student?:"&gt;&lt;/div&gt;
 * 		&lt;div dojoType="dojox.form.DateTextBox" label="Date Of Birth:"&gt;&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.layout.TableContainer=function(){};
/**
 * @memberOf dojox.layout.TableContainer
*/
dojox.layout.TableContainer.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resizes all children.  This widget itself<br>
 *	 does not resize, as it takes up 100% of the<br>
 *	 available width.<br>
 * </blockquote>
 * @memberOf dojox.layout.TableContainer
*/
dojox.layout.TableContainer.prototype.resize=function(){};
/**
 * @memberOf dojox.layout.TableContainer
*/
dojox.layout.TableContainer.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Lays out the child widgets.<br>
 * </blockquote>
 * @memberOf dojox.layout.TableContainer
*/
dojox.layout.TableContainer.prototype.layout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroys all the widgets inside this.containerNode,<br>
 *	 but not this widget itself<br>
 * </blockquote>
 * @param {Boolean} preserveDom 
 * @memberOf dojox.layout.TableContainer
*/
dojox.layout.TableContainer.prototype.destroyDescendants=function(preserveDom){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the spacing attribute.<br>
 * </blockquote>
 * @param {mixed} value 
 * @private
 * @memberOf dojox.layout.TableContainer
*/
dojox.layout.TableContainer.prototype._setSpacingAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 A draggable and clickable spacer between two items in a dijit.layout.BorderContainer`.<br>
 * </blockquote>
 * This is instantiated by `dijit.layout.BorderContainer. Users should not<br>
 * create it directly.
 * @class
 * @extends dijit.layout._Splitter
 * @returns {dojox.layout.ToggleSplitter} new instance
*/
dojox.layout.ToggleSplitter=function(){};
/**
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.child=null;
/**
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype.startup=function(){};
/**
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype.postCreate=function(){};
/**
 * @param {mixed} pane 
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype.onOpen=function(pane){};
/**
 * @param {mixed} pane 
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype.onCollapsed=function(pane){};
/**
 * @param {mixed} pane 
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype.onClosed=function(pane){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype._toggle=function(evt){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype._stopDrag=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype._startDrag=function(e){};
/**
 * @private
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype._setStateClass=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 setter for the state property<br>
 * </blockquote>
 * @param {Strring} state 
 * @private
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype._setStateAttr=function(state){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype._onToggleNodeMouseMove=function(evt){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype._onToggleNodeMouseDown=function(evt){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype._onKeyPress=function(evt){};
/**
 * @param {mixed} preState 
 * @private
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype._handleOnChange=function(preState){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create an object with the style property name: values<br>
 *	 that will need to be applied to the child pane render the given state<br>
 * </blockquote>
 * @param {mixed} paneNode 
 * @param {mixed} state 
 * @param {mixed} paneStyle 
 * @private
 * @memberOf dojox.layout.ToggleSplitter
*/
dojox.layout.ToggleSplitter.prototype._getStyleProps=function(paneNode, state, paneStyle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convert the passed number to radians.<br>
 * </blockquote>
 * @param {Number} n 
 * @returns {Number} -
*/
dojox.math.toRadians=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 Convert the passed number to degrees.<br>
 * </blockquote>
 * @param {Number} n 
 * @returns {Number} -
*/
dojox.math.toDegrees=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 Similar to dojo.number.round, but compensates for binary floating point artifacts<br>
 * </blockquote>
 * Rounds to the nearest value with the given number of decimal places, away from zero if equal,<br>
 * similar to Number.toFixed().  Rounding can be done by fractional increments also.<br>
 * Makes minor adjustments to accommodate for precision errors due to binary floating point representation<br>
 * of Javascript Numbers.  See http://speleotrove.com/decimal/decifaq.html for more information.<br>
 * Because of this adjustment, the rounding may not be mathematically correct for full precision<br>
 * floating point values.  The calculations assume 14 significant figures, so the accuracy will<br>
 * be limited to a certain number of decimal places preserved will vary with the magnitude of<br>
 * the input.  This is not a substitute for decimal arithmetic.
 * @see reference <a href="http://speleotrove.com/decimal/decifaq.html">http://speleotrove.com/decimal/decifaq.html</a>
 * @param {Number} value The number to round
 * @param {Number} [places] The number of decimal places where rounding takes place.  Defaults to 0 for whole rounding.
 * Must be non-negative.
 * @param {Number} [increment] Rounds next place to nearest value of increment/10.  10 by default.
 * @param {mixed} v 
 * @param {mixed} p 
 * @param {mixed} m 
 * @returns {Number} -
 * @example
 * &gt;&gt;&gt; 4.8-(1.1+2.2)
 * 1.4999999999999996
 * &gt;&gt;&gt; Math.round(4.8-(1.1+2.2))
 * 1
 * &gt;&gt;&gt; dojox.math.round(4.8-(1.1+2.2))
 * 2
 * &gt;&gt;&gt; ((4.8-(1.1+2.2))/100)
 * 0.014999999999999996
 * &gt;&gt;&gt; ((4.8-(1.1+2.2))/100).toFixed(2)
 * "0.01"
 * &gt;&gt;&gt; dojox.math.round((4.8-(1.1+2.2))/100,2)
 * 0.02
 * &gt;&gt;&gt; dojox.math.round(10.71, 0, 2.5)
 * 10.75
 * &gt;&gt;&gt; dojo.number.round(162.295, 2)
 * 162.29
 * &gt;&gt;&gt; dojox.math.round(162.295, 2)
 * 162.3
*/
dojox.math.round=function(value, places, increment, v, p, m){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a range of numbers based on the parameters.<br>
 * </blockquote>
 * @param {Number} a 
 * @param {Number} [b] 
 * @param {Number} [step] 
 * @returns {Array} -
*/
dojox.math.range=function(a, b, step){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use dojox.math.toDegrees.<br>
 * </blockquote>
 * @param {Number} n 
 * @returns {Number} -
*/
dojox.math.radiansToDegrees=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 TODO<br>
 * </blockquote>
 * @param {Number} n 
 * @param {Number} k 
 * @returns {Number} -
*/
dojox.math.permutations=function(n, k){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the midpoint between points A and B.  A and B may be multidimensional.<br>
 * </blockquote>
 * @param {Array} a 
 * @param {Array} b 
 * @returns {Array} -
*/
dojox.math.midpoint=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a random number based on the Gaussian algo.<br>
 * </blockquote>
 * @returns {Number} -
*/
dojox.math.gaussian=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the factorial of n<br>
 * </blockquote>
 * @param {Number} n 
 * @returns {Number} -
*/
dojox.math.factorial=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the distance between point A and point B<br>
 * </blockquote>
 * @param {Array} a 
 * @param {Array} b 
 * @returns {Number} -
*/
dojox.math.distance=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deprecated.  Use dojox.math.toRadians.<br>
 * </blockquote>
 * @param {Number} n 
 * @returns {Number} -
*/
dojox.math.degreesToRadians=function(n){};
/**
 * <b>Summary:</b><blockquote>
 *	 TODO<br>
 * </blockquote>
 * @param {Number} n 
 * @param {Number} r 
 * @returns {Number} -
*/
dojox.math.combinations=function(n, r){};
/**
 * <b>Summary:</b><blockquote>
 *	 TODO<br>
 * </blockquote>
 * @param {Number} t 
 * @param {Number} n 
 * @param {Number} i 
 * @returns {Number} -
*/
dojox.math.bernstein=function(t, n, i){};
/**
 * <b>Summary:</b><blockquote>
 *	 Compute the gamma function for the passed number.<br>
 *	 Approximately 14 dijits of precision with non-integers.<br>
 * </blockquote>
 * @param {mixed} z 
 * @private
 * @returns {normal integer quick return|undefined at nonpositive integers since sin() below will return 0|popular gamma(1/2)|reflection} -
*/
dojox.math._gamma=function(z){};
/**
*/
dojox.math.BigInteger=function(){};
/**
 * @namespace
*/
dojox.math.random={};
/**
 * @namespace
*/
dojox.math.matrix={};
/**
 * @namespace
*/
dojox.math.curves={};
/**
 * @class
 * @returns {dojox.math.BigInteger} new instance
*/
dojox.math.BigInteger=function(){};
/**
 * @class
 * @returns {dojox.BigInteger} new instance
*/
dojox.BigInteger=function(){};
/**
*/
dojox.math.curves.Path=function(){};
/**
 * @param {mixed} start 
 * @param {mixed} end 
*/
dojox.math.curves.Line=function(start, end){};
/**
 * @param {mixed} center 
 * @param {mixed} radius 
*/
dojox.math.curves.Circle=function(center, radius){};
/**
 * @param {mixed} center 
 * @param {mixed} radius 
 * @param {mixed} start 
 * @param {mixed} end 
*/
dojox.math.curves.CenteredArc=function(center, radius, start, end){};
/**
 * @param {mixed} pnts 
 * @param {mixed} c 
*/
dojox.math.curves.CatmullRom=function(pnts, c){};
/**
 * @param {mixed} pnts 
*/
dojox.math.curves.Bezier=function(pnts){};
/**
 * @param {mixed} start 
 * @param {mixed} end 
 * @param {mixed} ccw 
*/
dojox.math.curves.Arc=function(start, end, ccw){};
/**
 * @class
 * @returns {dojox.math.curves.Line} new instance
*/
dojox.math.curves.Line=function(){};
/**
 * @param {mixed} n 
*/
dojox.math.curves.Line.getValue=function(n){};
/**
 * @class
 * @returns {dojox.math.curves.Bezier} new instance
*/
dojox.math.curves.Bezier=function(){};
/**
 * @param {mixed} step 
*/
dojox.math.curves.Bezier.getValue=function(step){};
/**
 * @class
 * @returns {dojox.math.curves.CatmullRom} new instance
*/
dojox.math.curves.CatmullRom=function(){};
/**
 * @param {mixed} step 
*/
dojox.math.curves.CatmullRom.getValue=function(step){};
/**
 * @class
 * @returns {dojox.math.curves.CenteredArc} new instance
*/
dojox.math.curves.CenteredArc=function(){};
/**
 * @param {mixed} n 
*/
dojox.math.curves.CenteredArc.getValue=function(n){};
/**
 * @class
 * @returns {dojox.math.curves.Path} new instance
*/
dojox.math.curves.Path=function(){};
/**
*/
dojox.math.curves.Path.removeAll=function(){};
/**
 * @param {mixed} curve 
*/
dojox.math.curves.Path.remove=function(curve){};
/**
 * @param {mixed} n 
*/
dojox.math.curves.Path.getValue=function(n){};
/**
 * @param {mixed} curve 
 * @param {mixed} weight 
*/
dojox.math.curves.Path.add=function(curve, weight){};
/**
 * @param {Number} a 
 * @param {Number} b 
 * @returns {Array} -
*/
dojox.math.matrix.zeros=function(a, b){};
/**
 * @param {Array} m 
 * @returns {Array} -
*/
dojox.math.matrix.upperTriangle=function(m){};
/**
 * @param {Array} a 
 * @returns {Array} -
*/
dojox.math.matrix.transpose=function(a){};
/**
 * @returns {Number|Array} -
*/
dojox.math.matrix.sum=function(){};
/**
 * @param {Array} a 
 * @param {Number} factor 
*/
dojox.math.matrix.scale=function(a, factor){};
/**
 * @returns {Array} -
*/
dojox.math.matrix.product=function(){};
/**
 * @param {Number} a 
 * @param {Number} b 
 * @returns {Array} -
*/
dojox.math.matrix.ones=function(a, b){};
/**
 * @param {Array} a 
 * @param {Array} b 
 * @returns {Array} -
*/
dojox.math.matrix.multiply=function(a, b){};
/**
 * @param {Array} a 
 * @returns {Array} -
*/
dojox.math.matrix.inverse=function(a){};
/**
 * @param {Number} size 
 * @param {Number} [scale] 
 * @returns {Array} -
*/
dojox.math.matrix.identity=function(size, scale){};
/**
 * @param {Array} a 
 * @param {Number} [points] 
 * @returns {string} -
*/
dojox.math.matrix.format=function(a, points){};
/**
 * @param {Array} a 
 * @returns {Number} -
*/
dojox.math.matrix.determinant=function(a){};
/**
 * @param {Number} a 
 * @param {Number} b 
 * @param {Number} [value] 
 * @returns {Array} -
*/
dojox.math.matrix.create=function(a, b, value){};
/**
 * @param {Array} a 
 * @returns {Array} -
*/
dojox.math.matrix.copy=function(a){};
/**
 * @param {Array} a 
 * @returns {Array} -
*/
dojox.math.matrix.adjoint=function(a){};
/**
 * @class
 * @returns {dojox.math.matrix.upperTriangle} new instance
*/
dojox.math.matrix.upperTriangle=function(){};
/**
 * @class
 * @returns {dojox.Arcfour} new instance
*/
dojox.Arcfour=function(){};
/**
 * @memberOf dojox.Arcfour
*/
dojox.Arcfour.prototype.next=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize arcfour context<br>
 * </blockquote>
 * @param {Array:} key an array of ints, each from [0..255]
 * @memberOf dojox.Arcfour
*/
dojox.Arcfour.prototype.init=function(key){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize arcfour context<br>
 * </blockquote>
 * @class
 * @returns {Arcfour.init} new instance
*/
Arcfour.init=function(){};
/**
 * @class
 * @returns {Arcfour.next} new instance
*/
Arcfour.next=function(){};
/**
*/
dojox.math.random.prng4=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Super simple implementation of a random number generator,<br>
 *	 which relies on Math.random().<br>
 * </blockquote>
*/
dojox.math.random.Simple=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Super simple implementation of a random number generator,<br>
 *	 which relies on Math.random().<br>
 * </blockquote>
 * @param {Function:} prng function that returns an instance of PRNG (pseudorandom number generator)
 * with two methods: init(array) and next(). It should have a property &quot;size&quot;<br>
 * to indicate the required pool size.
 * @param {Boolean:} [noEvents] if false or absent, onclick and onkeypress event will be used to add
 * &quot;randomness&quot;, otherwise events will not be used.<br>
*/
dojox.math.random.Secure=function(prng, noEvents){};
/**
 * <b>Summary:</b><blockquote>
 *	 Super simple implementation of a random number generator,<br>
 *	 which relies on Math.random().<br>
 * </blockquote>
 * @class
 * @param {Function:} prng function that returns an instance of PRNG (pseudorandom number generator)
 * with two methods: init(array) and next(). It should have a property &quot;size&quot;<br>
 * to indicate the required pool size.
 * @param {Boolean:} [noEvents] if false or absent, onclick and onkeypress event will be used to add
 * &quot;randomness&quot;, otherwise events will not be used.
 * @returns {dojox.math.random.Secure} new instance
*/
dojox.math.random.Secure=function(prng, noEvents){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mix in the current time (w/milliseconds) into the pool<br>
 * </blockquote>
 * @memberOf dojox.math.random.Secure
*/
dojox.math.random.Secure.prototype.seedTime=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fills in an array of bytes with random numbers<br>
 * </blockquote>
 * @param {Array} byteArray Array: array to be filled in with random numbers, only existing
 * elements will be filled.
 * @memberOf dojox.math.random.Secure
*/
dojox.math.random.Secure.prototype.nextBytes=function(byteArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnects events, if any, preparing the object for GC.<br>
 * </blockquote>
 * @memberOf dojox.math.random.Secure
*/
dojox.math.random.Secure.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mix in a 32-bit integer into the pool<br>
 * </blockquote>
 * @param {mixed} x 
 * @private
 * @memberOf dojox.math.random.Secure
*/
dojox.math.random.Secure.prototype._seed_int=function(x){};
/**
 * <b>Summary:</b><blockquote>
 *	 Super simple implementation of a random number generator,<br>
 *	 which relies on Math.random().<br>
 * </blockquote>
 * @class
 * @returns {dojox.math.random.Simple} new instance
*/
dojox.math.random.Simple=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fills in an array of bytes with random numbers<br>
 * </blockquote>
 * @param {Array} byteArray Array: array to be filled in with random numbers, only existing
 * elements will be filled.
 * @memberOf dojox.math.random.Simple
*/
dojox.math.random.Simple.prototype.nextBytes=function(byteArray){};
/**
 * <b>Summary:</b><blockquote>
 *	 Prepares the object for GC. (empty in this case)<br>
 * </blockquote>
 * @memberOf dojox.math.random.Simple
*/
dojox.math.random.Simple.prototype.destroy=function(){};
/**
 * @namespace
*/
dojox.math.stats={};
/**
 * <b>Summary:</b><blockquote>
 *	 Find the variance in the passed array of numbers.<br>
 * </blockquote>
 * @param {Number[]} a 
 * @returns {Number} -
*/
dojox.math.stats.variance=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a non-parametric collection of summary statistics:<br>
 *	 the classic five-number summary extended to the Bowley's<br>
 *	 seven-figure summary.<br>
 * </blockquote>
 * @param {Number[]:} a a numeric array to be appraised.
 * @param {Boolean:} [alreadySorted] a Boolean flag to indicated that the array is already sorted.
 * This is an optional flag purely to improve the performance.<br>
 * If skipped, the array will be assumed unsorted.<br>
 * 
 * @returns {sort it properly|Object} -
*/
dojox.math.stats.summary=function(a, alreadySorted){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the sum of all the numbers in the passed array.  Does<br>
 *	 not check to make sure values within a are NaN (should simply<br>
 *	 return NaN).<br>
 * </blockquote>
 * @param {Number[]} a 
 * @returns {Number} -
*/
dojox.math.stats.sum=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the standard deviation of the passed arguments.<br>
 * </blockquote>
 * @param {Number[]} a 
 * @returns {Number} -
*/
dojox.math.stats.sd=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the mode from the passed array (number that appears the most often).<br>
 *	 This is not the most efficient method, since it requires a double scan, but<br>
 *	 is ensures accuracy.<br>
 * </blockquote>
 * @param {Number[]} a 
 * @returns {Number} -
*/
dojox.math.stats.mode=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the min value in the passed array.<br>
 * </blockquote>
 * @param {Number[]} a 
 * @returns {Number} -
*/
dojox.math.stats.min=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the value closest to the middle from a sorted version of the passed array.<br>
 * </blockquote>
 * @param {Number[]} a 
 * @returns {Number} -
*/
dojox.math.stats.median=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the mean value in the passed array.<br>
 * </blockquote>
 * @param {Number[]} a 
 * @returns {Number} -
*/
dojox.math.stats.mean=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the max value in the passed array.<br>
 * </blockquote>
 * @param {Number[]} a 
 * @returns {Number} -
*/
dojox.math.stats.max=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Using the bestFit algorithm above, find y for the given x.<br>
 * </blockquote>
 * @param {Object[]} a || Number[]
 * @param {Number} x 
 * @param {String} [xProp] 
 * @param {String} [yProp] 
 * @returns {Number} -
*/
dojox.math.stats.forecast=function(a, x, xProp, yProp){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate the slope and intercept in a linear fashion.  An array<br>
 *	 of objects is expected; optionally you can pass in the property<br>
 *	 names for &amp;quot;x&amp;quot; and &amp;quot;y&amp;quot;, else x/y is used as the default.  If you<br>
 *	 pass an array of numbers, it will be mapped to a set of {x,y} objects<br>
 *	 where x = the array index.<br>
 * </blockquote>
 * @param {Object[]} a || Number[]
 * @param {String} [xProp] 
 * @param {String} [yProp] 
 * @returns {Object} -
*/
dojox.math.stats.bestFit=function(a, xProp, yProp){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a linearly approximated value from an array using<br>
 *	 a normalized float position value.<br>
 * </blockquote>
 * @param {Number[]:} a a sorted numeric array to be used for the approximation.
 * @param {Number:} pos a position number from 0 to 1. If outside of this range it
 * will be clamped.<br>
 * 
 * @returns {Number} -
*/
dojox.math.stats.approxLin=function(a, pos){};
/**
 * @namespace
*/
dojox.mdnd.adapter={};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the current areaManager, creates one if it is not created yet<br>
 * </blockquote>
 * @returns {Object} -
*/
dojox.mdnd.adapter.dndToDojo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Allow communication between an item of dojox D&amp;amp;D area to a target dojo.<br>
 * </blockquote>
*/
dojox.mdnd.adapter.DndToDojo=function(){};
/**
*/
dojox.mdnd.adapter.DndFromDojo=function(){};
/**
 * @class
 * @returns {dojox.mdnd.adapter.DndFromDojo} new instance
*/
dojox.mdnd.adapter.DndFromDojo=function(){};
/**
 * @namespace
*/
dojox.mdnd.adapter.DndFromDojo.dropIndicatorSize={};
/**
 * @namespace
 * @private
*/
dojox.mdnd.adapter.DndFromDojo._areaManager={};
/**
 * <b>Summary:</b><blockquote>
 *	 Unsubscribe to some topics of dojo drag and drop.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype.unsubscribeDnd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subscribe to somes topics of dojo drag and drop.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype.subscribeDnd=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Occurs when the user moves the mouse.<br>
 * </blockquote>
 * @param {DOMEvent} e the DOM event
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Occurs when the &amp;quot;/dnd/cancel&amp;quot; topic is published.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype.onDropCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Occurs when the user leaves a D&amp;amp;D dojox area after dragging an DOJO dnd item over it.<br>
 * </blockquote>
 * @param {Object} source the source which provides items
 * @param {Array} nodes the list of transferred items
 * @param {Boolean} copy copy items, if true, move items otherwise
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype.onDrop=function(source, nodes, copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 Occurs when the &amp;quot;/dnd/start&amp;quot; topic is published.<br>
 * </blockquote>
 * @param {Object} source the source which provides items
 * @param {Array} nodes the list of transferred items
 * @param {Boolean} copy copy items, if true, move items otherwise
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype.onDragStart=function(source, nodes, copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 Occurs when the user leaves a D&amp;amp;D dojoX area after dragging an DOJO dnd item over it.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype.onDragExit=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Occurs when the user drages an DOJO dnd item inside a D&amp;amp;D dojoX area.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype.onDragEnter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the mouse enters or exits of a source dojo.<br>
 * </blockquote>
 * @param {Object} source the dojo source/target
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype.onDndSource=function(source){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if a dragNode is accepted into a dojo target.<br>
 * </blockquote>
 * @param {Node} node The dragged node.
 * @param {Object} accept containing the type accepted for a target dojo.
 * 
 * @returns {Boolean} -
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype.isAccepted=function(node, accept){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function executed in onDndSource function to set the avatar<br>
 *	 acceptance according to the dojox DnD AreaManager Acceptance.<br>
 *	 It is used when The mouse exit a source/target dojo or if the<br>
 *	 dragged node is not accepted in dojo source / target.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype._resetAvatar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get a D&amp;amp;D dojoX area as a DOM node positioned under a specific point.<br>
 * </blockquote>
 * @param {Object} coords containing the coordinates x and y (mouse position)
 * @memberOf dojox.mdnd.adapter.DndFromDojo
*/
dojox.mdnd.adapter.DndFromDojo.prototype._getHoverArea=function(coords){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the current areaManager, creates one if it is not created yet.<br>
 * </blockquote>
 * @returns {Object} -
*/
dojox.mdnd.areaManager=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Source Object, which can be used only as a DnD source.<br>
 *	 A Source can contained several dnd items.<br>
 *	 A dnd item is not a source.<br>
 * </blockquote>
 * @param {DOMNode|String} node Node or node's id to build the source on.
 * @param {dojo.dnd.__SourceArgs} [params] Any property of this class may be configured via the params
 * object which is mixed-in to the 'dojo.dnd.Source' instance.<br>
*/
dojox.mdnd.PureSource=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 Allow end-users to track a DOM node into the web page<br>
 * </blockquote>
 * @param {Object} params Hash of parameters
 * @param {DOMNode} node The draggable node
*/
dojox.mdnd.Moveable=function(params, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 This class allows to launch a drag and drop dojo on the fly.<br>
 * </blockquote>
*/
dojox.mdnd.LazyManager=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 DropIndicator managment for DnD.<br>
 * </blockquote>
*/
dojox.mdnd.DropIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Activate scrolling while dragging a widget.<br>
 * </blockquote>
*/
dojox.mdnd.AutoScroll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Drag And Drop manager<br>
 * </blockquote>
*/
dojox.mdnd.AreaManager=function(){};
/**
 * @namespace
*/
dojox.mdnd.dropMode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Allow communication between an item of dojox D&amp;amp;D area to a target dojo.<br>
 * </blockquote>
 * @class
 * @returns {dojox.mdnd.adapter.DndToDojo} new instance
*/
dojox.mdnd.adapter.DndToDojo=function(){};
/**
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo._draggedNode=null;
/**
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo._dojoList=[];
/**
 * <b>Summary:</b><blockquote>
 *	 Unregister several targets dojo having the same type passing in parameter.<br>
 * </blockquote>
 * @param {String} type A String to identify dojo targets.
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype.unregisterByType=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Unregister a target dojo.<br>
 * </blockquote>
 * @param {DOMNode} area The DOM node of target dojo.
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype.unregisterByNode=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 Unregister all targets dojo.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype.unregister=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register a target dojo.<br>
 *	 The target is represented by an object containing :<br>
 *	 - the dojo area node<br>
 *	 - the type reference to identify a group node<br>
 *	 - the coords of the area to enable refresh position<br>
 * </blockquote>
 * @param {DOMNode} area The DOM node which has to be registered.
 * @param {String} type A String to identify the node.
 * dojoTarger:<br>
 * True if the dojo D&amp;D have to be enable when mouse is hover the registered target dojo.
 * @param {Boolean} dojoTarget 
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype.register=function(area, type, dojoTarget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Refresh the coordinates of registered dojo target with a specific type.<br>
 * </blockquote>
 * @param {String} type A String to identify dojo targets.
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype.refreshByType=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Refresh the coordinates of all registered dojo target.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype.refresh=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call when the mouse moving after an onStartDrag of AreaManger.<br>
 *	 Check if the coordinates of the mouse is in a dojo target.<br>
 * </blockquote>
 * @param {DOMEvent} e Event object.
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when an onmouseup event is loaded on a registered target dojo.<br>
 * </blockquote>
 * @param {DOMEvent} e Event object.
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype.onDrop=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call when the mouse exit of a registered dojo target.<br>
 * </blockquote>
 * @param {DOMEvent} e current javscript event
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype.onDragExit=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call when the mouse enters in a registered dojo target.<br>
 * </blockquote>
 * @param {DOMEvent} e The current Javascript Event.
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype.onDragEnter=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return true if the dragged node is accepted.<br>
 *	 This method has to be overwritten according to registered target.<br>
 * </blockquote>
 * @param {DOMNode} draggedNode 
 * @param {Object} target 
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype.isAccepted=function(draggedNode, target){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the coordinates of the target dojo.<br>
 * </blockquote>
 * @param {DOMNode} area A registered DOM node.
 * 
 * @returns {Object} -
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype._initCoordinates=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if a dojo area is registered.<br>
 * </blockquote>
 * @param {node} area DOMNode A node corresponding to the target dojo.
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype._getIndexDojoArea=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if the coordinates of the mouse is in a dojo target.<br>
 * </blockquote>
 * @param {Object} coords Coordinates of the mouse.
 * @memberOf dojox.mdnd.adapter.DndToDojo
*/
dojox.mdnd.adapter.DndToDojo.prototype._getHoverDojoArea=function(coords){};
/**
 * @namespace
*/
dojox.mdnd.adapter.DndToDojo._dojoxManager._dragItem.item={};
/**
 * @namespace
*/
dojox.mdnd.adapter.DndToDojo._dojoxManager._dragItem={};
/**
 * @namespace
*/
dojox.mdnd.adapter.DndToDojo._dojoxManager._dragItem.item.node={};
/**
 * <b>Summary:</b><blockquote>
 *	 Drag And Drop manager<br>
 * </blockquote>
 * @class
 * @returns {dojox.mdnd.AreaManager} new instance
*/
dojox.mdnd.AreaManager=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Unregister a D&amp;amp;D Area and its children into the AreaManager.<br>
 * </blockquote>
 * @param {DOMNode} area A node corresponding to the D&amp;D Area.
 * 
 * @returns {Boolean} -
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.unregister=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 Delete a moveable item programmatically. The node is removed from the area.<br>
 * </blockquote>
 * @param {DOMNode} area A node corresponding to the DndArea.
 * @param {DOMNode} node The node which has to be treated.
 * 
 * @returns {Object} -
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.removeDragItem=function(area, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 To register Dnd Area : insert the DndArea using the specific sort of dropMode.<br>
 * </blockquote>
 * @param {DOMNode} area a DOM node corresponding to the Dnd Area
 * @param {Boolean} notInitAreas if false or undefined, init the areas.
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.registerByNode=function(area, notInitAreas){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register all Dnd Areas identified by the attribute areaClass :<br>
 *	 insert Dnd Areas using the specific sort of dropMode.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.registerByClass=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Search the right place to insert the dropIndicator and display the dropIndicator.<br>
 * </blockquote>
 * @param {Object} coords an object encapsulating X and Y position
 * @param {Object} size an object encapsulating width and height values
 * 
 * @returns {Integer} -
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.placeDropIndicator=function(coords, size){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancel the drop.<br>
 *	 The dragNode returns into the source.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.onDropCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Drop the dragged item where the dropIndicator is displayed.<br>
 * </blockquote>
 * @param {DOMNode} node The node which is about to be dropped
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.onDrop=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the drag (see dojox.mdnd.Moveable.initOffsetDrag())<br>
 * </blockquote>
 * @see dojox.mdnd.Moveable
 * @param {DOMNode} node The node which is about to be dragged
 * @param {Object} coords an object encapsulating X and Y position
 * @param {Object} size an object encapsulating width and height values
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.onDragStart=function(node, coords, size){};
/**
 * <b>Summary:</b><blockquote>
 *	 Optionally called by the getTargetArea method of TargetFinder class.<br>
 * </blockquote>
 * @param {Object} coords coordinates of the dragged Node.
 * @param {Object} size size of the dragged Node.
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.onDragExit=function(coords, size){};
/**
 * <b>Summary:</b><blockquote>
 *	 Optionally called by the getTargetArea method of TargetFinder class.<br>
 * </blockquote>
 * @param {Object} coords coordinates of the dragged Node.
 * @param {Object} size size of the dragged Node.
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.onDragEnter=function(coords, size){};
/**
 * <b>Summary:</b><blockquote>
 *	 Occurs when the dojo.dnd.Moveable.onDrag is fired.<br>
 *	 Search the nearest target area and called the placeDropIndicator<br>
 * </blockquote>
 * @param {DOMNode} node The node which is dragged
 * @param {Object} coords an object encapsulating X and Y position
 * @param {Object} size an object encapsulating width and height values
 * @param {Object} mousePosition coordinates of mouse
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.onDrag=function(node, coords, size, mousePosition){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the manager by calling the registerByClass method<br>
 * </blockquote>
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.init=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 find the nearest target area according to coordinates.<br>
 *	 Coordinates are representing by an object : for example, {'x':10,'y':10}<br>
 * </blockquote>
 * @param {Object} coords an object encapsulating X and Y position
 * @param {Object} size an object encapsulating the area size
 * 
 * @returns {Integer} -
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.findCurrentIndexArea=function(coords, size){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy the component.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 To add an item programmatically.<br>
 * </blockquote>
 * @param {DOMNode} area a node corresponding to the D&amp;D Area
 * @param {DOMNode} node the node which has to be treated.
 * @param {Integer} index the place in the area
 * noCheckParent:<br>
 * if true, doesn't check if node has a parent.
 * @param {Boolean} notCheckParent 
 * 
 * @returns {Boolean} -
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype.addDragItem=function(area, node, index, notCheckParent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the value of margin in the data type of areaManager<br>
 *	 only when the margin has never been computed.<br>
 * </blockquote>
 * @param {Object} area The object of a D&amp;D Area.
 * @param {DOMNode} node The node which contains margins
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype._setMarginArea=function(area, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the node which contains the first specific CSS class handle.<br>
 * </blockquote>
 * @param {DOMNode} node A child of the D&amp;D Area.
 * 
 * @returns {DomNode} -
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype._searchDragHandle=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 reset manager properties after dropping an item<br>
 * </blockquote>
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype._resetAfterDrop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 place the dropIndicator<br>
 * </blockquote>
 * @param {Object} size an object encapsulating width and height values
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype._placeDropIndicator=function(size){};
/**
 * <b>Summary:</b><blockquote>
 *	 True if user can drop widget on this node.<br>
 * </blockquote>
 * @param {Array} type containing item type
 * @param {Array} accept containing types
 * @private
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype._isAccepted=function(type, accept){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the index of an area.<br>
 * </blockquote>
 * @param {DOMNode} area A moveable Object.
 * 
 * @returns {Integer} -
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype._getIndexArea=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the children of a D&amp;amp;D area.<br>
 * </blockquote>
 * @param {DOMNode} area A DnD area.
 * 
 * @returns {Array} -
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype._getChildren=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 Delete the Moveable object associated with a node.<br>
 *	 item:<br>
 *	 A moveable Object.<br>
 * </blockquote>
 * @param {Object} objItem 
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype._deleteMoveableItem=function(objItem){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a draggable item with a DOM node.<br>
 * </blockquote>
 * @param {DOMNode} node A child of the D&amp;D Area.
 * 
 * @returns {Object} -
 * @memberOf dojox.mdnd.AreaManager
*/
dojox.mdnd.AreaManager.prototype._addMoveableItem=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Activate scrolling while dragging a widget.<br>
 * </blockquote>
 * @class
 * @returns {dojox.mdnd.AutoScroll} new instance
*/
dojox.mdnd.AutoScroll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stop the autoscroll.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.AutoScroll
*/
dojox.mdnd.AutoScroll.prototype.stopAutoScroll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the node which is dragged<br>
 * </blockquote>
 * @param {Node} node node to scroll
 * @memberOf dojox.mdnd.AutoScroll
*/
dojox.mdnd.AutoScroll.prototype.setAutoScrollNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the hightest heigh and width authorized scroll.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.AutoScroll
*/
dojox.mdnd.AutoScroll.prototype.setAutoScrollMaxPage=function(){};
/**
 * @memberOf dojox.mdnd.AutoScroll
*/
dojox.mdnd.AutoScroll.prototype.init=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the visible part of the window. Varies accordion to Navigator.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.AutoScroll
*/
dojox.mdnd.AutoScroll.prototype.getViewport=function(){};
/**
 * @memberOf dojox.mdnd.AutoScroll
*/
dojox.mdnd.AutoScroll.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if an autoScroll have to be launched.<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.mdnd.AutoScroll
*/
dojox.mdnd.AutoScroll.prototype.checkAutoScroll=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Manage the up autoscroll.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.AutoScroll
*/
dojox.mdnd.AutoScroll.prototype._autoScrollUp=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Manage the right autoscroll.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.AutoScroll
*/
dojox.mdnd.AutoScroll.prototype._autoScrollRight=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Manage the left autoscroll.<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.mdnd.AutoScroll
*/
dojox.mdnd.AutoScroll.prototype._autoScrollLeft=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Manage the down autoscroll.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.AutoScroll
*/
dojox.mdnd.AutoScroll.prototype._autoScrollDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 DropIndicator managment for DnD.<br>
 * </blockquote>
 * @class
 * @returns {dojox.mdnd.DropIndicator} new instance
*/
dojox.mdnd.DropIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 remove the DropIndicator (not destroy)<br>
 * </blockquote>
 * @memberOf dojox.mdnd.DropIndicator
*/
dojox.mdnd.DropIndicator.prototype.remove=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Place the DropIndicator in the right place<br>
 * </blockquote>
 * @param {Node} area the dnd targer area node
 * @param {Node} nodeRef node where the dropIndicator have to be placed into the area
 * dragNode:<br>
 * the node which is dragged
 * @param {Object} size 
 * 
 * @returns {DOMNode} -
 * @memberOf dojox.mdnd.DropIndicator
*/
dojox.mdnd.DropIndicator.prototype.place=function(area, nodeRef, size){};
/**
 * <b>Summary:</b><blockquote>
 *	 destroy the dropIndicator<br>
 * </blockquote>
 * @memberOf dojox.mdnd.DropIndicator
*/
dojox.mdnd.DropIndicator.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enabled a type of calcul for Dnd.<br>
 *	 Default class to find the nearest target.<br>
 * </blockquote>
*/
dojox.mdnd.dropMode.VerticalDropMode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Default class to find the nearest target only if the mouse is over an area.<br>
 * </blockquote>
*/
dojox.mdnd.dropMode.OverDropMode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enabled a type of calcul for Dnd.<br>
 *	 Default class to find the nearest target.<br>
 * </blockquote>
*/
dojox.mdnd.dropMode.DefaultDropMode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enabled a type of calcul for Dnd.<br>
 *	 Default class to find the nearest target.<br>
 * </blockquote>
 * @class
 * @returns {dojox.mdnd.dropMode.DefaultDropMode} new instance
*/
dojox.mdnd.dropMode.DefaultDropMode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Refresh intervals between areas to determinate the nearest area to drop an item.<br>
 *	 Algorithm :<br>
 *	 the marker should be the vertical line passing by the<br>
 *	 central point between two contiguous areas.<br>
 *	 Note:<br>
 *	 If the page has only one targetArea, it's not necessary to calculate coords.<br>
 * </blockquote>
 * @param {Array} areaList array of areas
 * @memberOf dojox.mdnd.dropMode.DefaultDropMode
*/
dojox.mdnd.dropMode.DefaultDropMode.prototype.updateAreas=function(areaList){};
/**
 * <b>Summary:</b><blockquote>
 *	 take into account the drop indicator DOM element in order to compute horizontal lines<br>
 * </blockquote>
 * @param {Object} area a DnD area object
 * @param {Integer} indexItem index of a draggable item
 * @param {Object} size dropIndicator size
 * @param {Boolean} added boolean to know if a dropIndicator has been added or deleted
 * @memberOf dojox.mdnd.dropMode.DefaultDropMode
*/
dojox.mdnd.dropMode.DefaultDropMode.prototype.refreshItems=function(area, indexItem, size, added){};
/**
 * <b>Summary:</b><blockquote>
 *	 initialize the horizontal line in order to determinate the drop zone.<br>
 * </blockquote>
 * @param {Object} area the DnD area
 * @memberOf dojox.mdnd.dropMode.DefaultDropMode
*/
dojox.mdnd.dropMode.DefaultDropMode.prototype.initItems=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 get the nearest DnD area.<br>
 *	 Coordinates are basically provided by the &amp;lt;getDragPoint&amp;gt; method.<br>
 * </blockquote>
 * @param {Array} areaList a list of DnD areas objects
 * @param {Object} coords coordinates [x,y] of the dragItem
 * @param {integer} currentIndexArea an index representing the active DnD area
 * 
 * @returns {Integer} -
 * @memberOf dojox.mdnd.dropMode.DefaultDropMode
*/
dojox.mdnd.dropMode.DefaultDropMode.prototype.getTargetArea=function(areaList, coords, currentIndexArea){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the index where the drop has to be placed.<br>
 * </blockquote>
 * @param {Object} targetArea a DnD area object
 * @param {Object} coords coordinates [x,y] of the draggable item
 * 
 * @returns {Integer} -or -1 if the area has no children or the drop index represents the last position in to the area
 * @memberOf dojox.mdnd.dropMode.DefaultDropMode
*/
dojox.mdnd.dropMode.DefaultDropMode.prototype.getDropIndex=function(targetArea, coords){};
/**
 * <b>Summary:</b><blockquote>
 *	 return coordinates of the draggable item<br>
 * </blockquote>
 * return for:<br>
 * - X point : the middle<br>
 * - Y point : search if the user goes up or goes down with his mouse.<br>
 * - Up : top of the draggable item<br>
 * - Down : bottom of the draggable item
 * @param {Object} coords an object encapsulating X and Y position
 * @param {Object} size an object encapsulating width and height values
 * @param {Object} mousePosition coordinates of mouse
 * @memberOf dojox.mdnd.dropMode.DefaultDropMode
*/
dojox.mdnd.dropMode.DefaultDropMode.prototype.getDragPoint=function(coords, size, mousePosition){};
/**
 * @memberOf dojox.mdnd.dropMode.DefaultDropMode
*/
dojox.mdnd.dropMode.DefaultDropMode.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a DnD Area into an array sorting by the x position.<br>
 * </blockquote>
 * @param {Array} areas array of areas
 * @param {Object} object data type of a DndArea
 * 
 * @returns {Array} -
 * @memberOf dojox.mdnd.dropMode.DefaultDropMode
*/
dojox.mdnd.dropMode.DefaultDropMode.prototype.addArea=function(areas, object){};
/**
 * <b>Summary:</b><blockquote>
 *	 update the DnD area object (i.e. update coordinates of its DOM node)<br>
 * </blockquote>
 * @param {Object} area the DnD area
 * @memberOf dojox.mdnd.dropMode.DefaultDropMode
*/
dojox.mdnd.dropMode.DefaultDropMode.prototype._updateArea=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 check if the dragNode is in the interval.<br>
 *	 The x coordinate is basically provided by the &amp;lt;getDragPoint&amp;gt; method.<br>
 * </blockquote>
 * @param {Array} areaList a list of DnD areas objects
 * @param {Integer} index index of a DnD area (to get the interval)
 * @param {Coord} x coordinate x, of the dragNode
 * 
 * @returns {Boolean} -
 * @memberOf dojox.mdnd.dropMode.DefaultDropMode
*/
dojox.mdnd.dropMode.DefaultDropMode.prototype._checkInterval=function(areaList, index, x){};
/**
 * <b>Summary:</b><blockquote>
 *	 Default class to find the nearest target only if the mouse is over an area.<br>
 * </blockquote>
 * @class
 * @returns {dojox.mdnd.dropMode.OverDropMode} new instance
*/
dojox.mdnd.dropMode.OverDropMode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 refresh areas position and size to determinate the nearest area to drop an item<br>
 * </blockquote>
 * the area position (and size) is equal to the postion of the domNode associated.
 * @param {Array} areaList array of areas
 * @memberOf dojox.mdnd.dropMode.OverDropMode
*/
dojox.mdnd.dropMode.OverDropMode.prototype.updateAreas=function(areaList){};
/**
 * <b>Summary:</b><blockquote>
 *	 take into account the drop indicator DOM element in order to compute horizontal lines<br>
 * </blockquote>
 * @param {Object} area a D&amp;D area object
 * @param {Integer} indexItem index of a draggable item
 * @param {Object} size dropIndicator size
 * @param {Boolean} added boolean to know if a dropIndicator has been added or deleted
 * @memberOf dojox.mdnd.dropMode.OverDropMode
*/
dojox.mdnd.dropMode.OverDropMode.prototype.refreshItems=function(area, indexItem, size, added){};
/**
 * <b>Summary:</b><blockquote>
 *	 initialize the horizontal line in order to determinate the drop zone.<br>
 * </blockquote>
 * @param {Object} area the D&amp;D area.
 * @memberOf dojox.mdnd.dropMode.OverDropMode
*/
dojox.mdnd.dropMode.OverDropMode.prototype.initItems=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 get the nearest D&amp;amp;D area.<br>
 * </blockquote>
 * @param {Array} areaList a list of D&amp;D areas objects
 * @param {Object} coords coordinates [x,y] of the dragItem (see getDragPoint())
 * @param {integer} currentIndexArea an index representing the active D&amp;D area
 * 
 * @returns {Integer} -
 * @memberOf dojox.mdnd.dropMode.OverDropMode
*/
dojox.mdnd.dropMode.OverDropMode.prototype.getTargetArea=function(areaList, coords, currentIndexArea){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the index where the drop has to be placed.<br>
 * </blockquote>
 * @param {Object} targetArea a D&amp;D area object.
 * @param {Object} coords coordinates [x,y] of the draggable item.
 * 
 * @returns {integer} -
 * @memberOf dojox.mdnd.dropMode.OverDropMode
*/
dojox.mdnd.dropMode.OverDropMode.prototype.getDropIndex=function(targetArea, coords){};
/**
 * <b>Summary:</b><blockquote>
 *	 return coordinates of the draggable item.<br>
 *	 - For X point : the x position of mouse<br>
 *	 - For Y point : the y position of mouse<br>
 * </blockquote>
 * @param {Object} coords an object encapsulating X and Y position
 * @param {Object} size an object encapsulating width and height values
 * @param {Object} mousePosition coordinates of mouse
 * 
 * @returns {Object} -examples:{'x':10,'y':10}
 * @memberOf dojox.mdnd.dropMode.OverDropMode
*/
dojox.mdnd.dropMode.OverDropMode.prototype.getDragPoint=function(coords, size, mousePosition){};
/**
 * @memberOf dojox.mdnd.dropMode.OverDropMode
*/
dojox.mdnd.dropMode.OverDropMode.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a D&amp;amp;D Area into an array sorting by the x position.<br>
 * </blockquote>
 * @param {Array} areas array of areas
 * @param {Object} object data type of a DndArea
 * 
 * @returns {Array} -
 * @memberOf dojox.mdnd.dropMode.OverDropMode
*/
dojox.mdnd.dropMode.OverDropMode.prototype.addArea=function(areas, object){};
/**
 * <b>Summary:</b><blockquote>
 *	 update the D&amp;amp;D area object (i.e. update coordinates of its DOM node)<br>
 * </blockquote>
 * @param {Object} area the D&amp;D area.
 * @memberOf dojox.mdnd.dropMode.OverDropMode
*/
dojox.mdnd.dropMode.OverDropMode.prototype._updateArea=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 check if the dragNode is in the interval.<br>
 * </blockquote>
 * @param {Array} areaList a list of D&amp;D areas objects
 * @param {Integer} index index of a D&amp;D area (to get the interval)
 * @param {Coord} x coordinate x, of the dragNode (see getDragPoint())
 * @param {Coord} y 
 * 
 * @returns {Boolean} -
 * @memberOf dojox.mdnd.dropMode.OverDropMode
*/
dojox.mdnd.dropMode.OverDropMode.prototype._checkInterval=function(areaList, index, x, y){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enabled a type of calcul for Dnd.<br>
 *	 Default class to find the nearest target.<br>
 * </blockquote>
 * @class
 * @returns {dojox.mdnd.dropMode.VerticalDropMode} new instance
*/
dojox.mdnd.dropMode.VerticalDropMode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Refresh intervals between areas to determinate the nearest area to drop an item.<br>
 *	 Algorithm :<br>
 *	 the marker should be the vertical line passing by the<br>
 *	 central point between two contiguous areas.<br>
 *	 Note:<br>
 *	 If the page has only one targetArea, it's not necessary to calculate coords.<br>
 * </blockquote>
 * @param {Array} areaList array of areas
 * @memberOf dojox.mdnd.dropMode.VerticalDropMode
*/
dojox.mdnd.dropMode.VerticalDropMode.prototype.updateAreas=function(areaList){};
/**
 * <b>Summary:</b><blockquote>
 *	 take into account the drop indicator DOM element in order to compute horizontal lines<br>
 * </blockquote>
 * @param {Object} area a DnD area object
 * @param {Integer} indexItem index of a draggable item
 * @param {Object} size dropIndicator size
 * @param {Boolean} added boolean to know if a dropIndicator has been added or deleted
 * @memberOf dojox.mdnd.dropMode.VerticalDropMode
*/
dojox.mdnd.dropMode.VerticalDropMode.prototype.refreshItems=function(area, indexItem, size, added){};
/**
 * <b>Summary:</b><blockquote>
 *	 initialize the horizontal line in order to determinate the drop zone.<br>
 * </blockquote>
 * @param {Object} area the DnD area
 * @memberOf dojox.mdnd.dropMode.VerticalDropMode
*/
dojox.mdnd.dropMode.VerticalDropMode.prototype.initItems=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 get the nearest DnD area.<br>
 *	 Coordinates are basically provided by the &amp;lt;getDragPoint&amp;gt; method.<br>
 * </blockquote>
 * @param {Array} areaList a list of DnD areas objects
 * @param {Object} coords coordinates [x,y] of the dragItem
 * @param {integer} currentIndexArea an index representing the active DnD area
 * 
 * @returns {Integer} -
 * @memberOf dojox.mdnd.dropMode.VerticalDropMode
*/
dojox.mdnd.dropMode.VerticalDropMode.prototype.getTargetArea=function(areaList, coords, currentIndexArea){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the index where the drop has to be placed.<br>
 * </blockquote>
 * @param {Object} targetArea a DnD area object
 * @param {Object} coords coordinates [x,y] of the draggable item
 * 
 * @returns {Integer} -or -1 if the area has no children or the drop index represents the last position in to the area
 * @memberOf dojox.mdnd.dropMode.VerticalDropMode
*/
dojox.mdnd.dropMode.VerticalDropMode.prototype.getDropIndex=function(targetArea, coords){};
/**
 * <b>Summary:</b><blockquote>
 *	 return coordinates of the draggable item<br>
 * </blockquote>
 * return for:<br>
 * - X point : the middle<br>
 * - Y point : search if the user goes up or goes down with his mouse.<br>
 * - Up : top of the draggable item<br>
 * - Down : bottom of the draggable item
 * @param {Object} coords an object encapsulating X and Y position
 * @param {Object} size an object encapsulating width and height values
 * @param {Object} mousePosition coordinates of mouse
 * @memberOf dojox.mdnd.dropMode.VerticalDropMode
*/
dojox.mdnd.dropMode.VerticalDropMode.prototype.getDragPoint=function(coords, size, mousePosition){};
/**
 * @memberOf dojox.mdnd.dropMode.VerticalDropMode
*/
dojox.mdnd.dropMode.VerticalDropMode.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a DnD Area into an array sorting by the x position.<br>
 * </blockquote>
 * @param {Array} areas array of areas
 * @param {Object} object data type of a DndArea
 * 
 * @returns {Array} -
 * @memberOf dojox.mdnd.dropMode.VerticalDropMode
*/
dojox.mdnd.dropMode.VerticalDropMode.prototype.addArea=function(areas, object){};
/**
 * <b>Summary:</b><blockquote>
 *	 update the DnD area object (i.e. update coordinates of its DOM node)<br>
 * </blockquote>
 * @param {Object} area the DnD area
 * @memberOf dojox.mdnd.dropMode.VerticalDropMode
*/
dojox.mdnd.dropMode.VerticalDropMode.prototype._updateArea=function(area){};
/**
 * <b>Summary:</b><blockquote>
 *	 check if the dragNode is in the interval.<br>
 *	 The x coordinate is basically provided by the &amp;lt;getDragPoint&amp;gt; method.<br>
 * </blockquote>
 * @param {Array} areaList a list of DnD areas objects
 * @param {Integer} index index of a DnD area (to get the interval)
 * @param {Coord} x coordinate x, of the dragNode
 * 
 * @returns {Boolean} -
 * @memberOf dojox.mdnd.dropMode.VerticalDropMode
*/
dojox.mdnd.dropMode.VerticalDropMode.prototype._checkInterval=function(areaList, index, x){};
/**
 * <b>Summary:</b><blockquote>
 *	 This class allows to launch a drag and drop dojo on the fly.<br>
 * </blockquote>
 * @class
 * @returns {dojox.mdnd.LazyManager} new instance
*/
dojox.mdnd.LazyManager=function(){};
/**
 * @namespace
*/
dojox.mdnd.LazyManager.manager={};
/**
 * <b>Summary:</b><blockquote>
 *	 launch a dojo drag and drop on the fly.<br>
 * </blockquote>
 * @param {Event} e 
 * @param {DOMNode} [draggedNode] 
 * @memberOf dojox.mdnd.LazyManager
*/
dojox.mdnd.LazyManager.prototype.startDrag=function(e, draggedNode){};
/**
 * @param {DOMNode} draggedNode 
 * @memberOf dojox.mdnd.LazyManager
*/
dojox.mdnd.LazyManager.prototype.getItem=function(draggedNode){};
/**
 * @memberOf dojox.mdnd.LazyManager
*/
dojox.mdnd.LazyManager.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 cancel a drag and drop dojo on the fly.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.LazyManager
*/
dojox.mdnd.LazyManager.prototype.cancelDrag=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Allow end-users to track a DOM node into the web page<br>
 * </blockquote>
 * @class
 * @param {Object} params Hash of parameters
 * @param {DOMNode} node The draggable node
 * @returns {dojox.mdnd.Moveable} new instance
*/
dojox.mdnd.Moveable=function(params, node){};
/**
 * @namespace
*/
dojox.mdnd.Moveable.offsetDrag={};
/**
 * @memberOf dojox.mdnd.Moveable
*/
dojox.mdnd.Moveable.node=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Occurs when the user moves the mouse.<br>
 *	 Calls the onDrag method.<br>
 * </blockquote>
 * @param {DOMEvent} e a DOM event
 * @memberOf dojox.mdnd.Moveable
*/
dojox.mdnd.Moveable.prototype.onMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Occurs when the user releases the mouse<br>
 *	 Calls the onDragEnd method.<br>
 * </blockquote>
 * @param {DOMEvent} e a DOM event
 * @memberOf dojox.mdnd.Moveable
*/
dojox.mdnd.Moveable.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Occurs when the user clicks on the handle node.<br>
 *	 Skip the drag action if a specific node is targeted.<br>
 *	 Listens to mouseup and mousemove events on to the HTML document.<br>
 * </blockquote>
 * @param {DOMEvent} e a DOM event
 * @memberOf dojox.mdnd.Moveable
*/
dojox.mdnd.Moveable.prototype.onMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Occurs when the user moves the mouse after clicking on the<br>
 *	 handle.<br>
 *	 Determinate when the drag action will have to begin (see<br>
 *	 dragDistance).<br>
 * </blockquote>
 * @param {DOMEvent} e A DOM event
 * @memberOf dojox.mdnd.Moveable
*/
dojox.mdnd.Moveable.prototype.onFirstMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function.<br>
 *	 Notes : border box model<br>
 * </blockquote>
 * @param {DOMNode} node a DOM node
 * @param {Object} coords absolute position of the main node
 * @param {Object} size an object encapsulating width an height values
 * @memberOf dojox.mdnd.Moveable
*/
dojox.mdnd.Moveable.prototype.onDragStart=function(node, coords, size){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function<br>
 *	 Notes : Coordinates don't contain margins<br>
 * </blockquote>
 * @param {DOMNode} node a DOM node
 * @memberOf dojox.mdnd.Moveable
*/
dojox.mdnd.Moveable.prototype.onDragEnd=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function.<br>
 *	 Notes : border box model for size value, margin box model for coordinates<br>
 * </blockquote>
 * @param {DOMNode} node a DOM node
 * @param {Object} coords position of the main node (equals to css left/top properties)
 * @param {Object} size an object encapsulating width and height values
 * @param {Object} mousePosition coordiantes of mouse
 * @memberOf dojox.mdnd.Moveable
*/
dojox.mdnd.Moveable.prototype.onDrag=function(node, coords, size, mousePosition){};
/**
 * <b>Summary:</b><blockquote>
 *	 identify the type of target node associated with a DOM event.<br>
 * </blockquote>
 * @param {DOMEvent} e a DOM event
 * 
 * @returns {Boolean} -
 * @memberOf dojox.mdnd.Moveable
*/
dojox.mdnd.Moveable.prototype.isFormElement=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize the gap between main node coordinates and the clicked point.<br>
 *	 Call the onDragStart method.<br>
 * </blockquote>
 * @param {DOMEvent} e A DOM event
 * @memberOf dojox.mdnd.Moveable
*/
dojox.mdnd.Moveable.prototype.initOffsetDrag=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Delecte associated events<br>
 * </blockquote>
 * @memberOf dojox.mdnd.Moveable
*/
dojox.mdnd.Moveable.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Source Object, which can be used only as a DnD source.<br>
 *	 A Source can contained several dnd items.<br>
 *	 A dnd item is not a source.<br>
 * </blockquote>
 * @class
 * @extends dojo.dnd.Selector
 * @param {DOMNode|String} node Node or node's id to build the source on.
 * @param {dojo.dnd.__SourceArgs} [params] Any property of this class may be configured via the params
 * object which is mixed-in to the 'dojo.dnd.Source' instance.
 * @returns {dojox.mdnd.PureSource} new instance
*/
dojox.mdnd.PureSource=function(node, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called once, when mouse is over our container.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.PureSource
*/
dojox.mdnd.PureSource.prototype.onOverEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called once, when mouse is out our container.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.PureSource
*/
dojox.mdnd.PureSource.prototype.onOutEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event processor for onmouseup.<br>
 * </blockquote>
 * @param {Event} e Mouse event
 * @memberOf dojox.mdnd.PureSource
*/
dojox.mdnd.PureSource.prototype.onMouseUp=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event processor for onmousemove.<br>
 * </blockquote>
 * @param {Event} e Mouse event.
 * @memberOf dojox.mdnd.PureSource
*/
dojox.mdnd.PureSource.prototype.onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event processor for onmousedown.<br>
 * </blockquote>
 * @param {Event} e Mouse event.
 * @memberOf dojox.mdnd.PureSource
*/
dojox.mdnd.PureSource.prototype.onMouseDown=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Topic event processor for /dnd/cancel, called to cancel the Dnd<br>
 *	 operation.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.PureSource
*/
dojox.mdnd.PureSource.prototype.onDndCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Markup methods.<br>
 * </blockquote>
 * @param {Object} params ???
 * @param {DomNode} node ???
 * @memberOf dojox.mdnd.PureSource
*/
dojox.mdnd.PureSource.prototype.markupFactory=function(params, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Prepares the object to be garbage-collected.<br>
 * </blockquote>
 * @memberOf dojox.mdnd.PureSource
*/
dojox.mdnd.PureSource.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true, if we need to copy items, false to move.<br>
 *	 It is separated to be overwritten dynamically, if needed.<br>
 * </blockquote>
 * @param {Boolean} keyPressed The &quot;copy&quot; was pressed.
 * 
 * @returns {Boolean} -
 * @memberOf dojox.mdnd.PureSource
*/
dojox.mdnd.PureSource.prototype.copyState=function(keyPressed){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes source's state based on &amp;quot;copy&amp;quot; status.<br>
 * </blockquote>
 * @param {Boolean} copy Copy status.
 * @memberOf dojox.mdnd.PureSource
*/
dojox.mdnd.PureSource.prototype._markDndStatus=function(copy){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks if user clicked on &amp;quot;approved&amp;quot; items.<br>
 * </blockquote>
 * @param {Event} e Mouse event.
 * 
 * @returns {Boolean} -
 * @memberOf dojox.mdnd.PureSource
*/
dojox.mdnd.PureSource.prototype._legalMouseDown=function(e){};
/**
 * @namespace
*/
dojox.mobile.app={};
/**
 * <b>Summary:</b><blockquote>
 *	 Given the name of a scene, returns the path to it's template<br>
 *	 file.  For example, for a scene named 'main', the file<br>
 *	 returned is 'app/views/main/main-scene.html'<br>
 *	 This function can be overridden if it is desired to have<br>
 *	 a different name to file mapping.<br>
 * </blockquote>
 * @param {mixed} sceneName 
*/
dojox.mobile.app.resolveTemplate=function(sceneName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given the name of a scene, returns the path to it's assistant<br>
 *	 file.  For example, for a scene named 'main', the file<br>
 *	 returned is 'app/assistants/main-assistant.js'<br>
 *	 This function can be overridden if it is desired to have<br>
 *	 a different name to file mapping.<br>
 * </blockquote>
 * @param {mixed} sceneName 
*/
dojox.mobile.app.resolveAssistant=function(sceneName){};
/**
 * @param {mixed} sceneName 
 * @param {mixed} callback 
*/
dojox.mobile.app.loadResourcesForScene=function(sceneName, callback){};
/**
 * @param {mixed} resources 
 * @param {mixed} callback 
*/
dojox.mobile.app.loadResources=function(resources, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes the mobile app. Creates the<br>
 * </blockquote>
 * @param {mixed} node 
*/
dojox.mobile.app.init=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the stage controller.<br>
 * </blockquote>
*/
dojox.mobile.app.getStageController=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the controller for the active scene.<br>
 * </blockquote>
*/
dojox.mobile.app.getActiveSceneController=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Listens for a flick event on a DOM node.  If the mouse/touch<br>
 *	 moves more than 15 pixels in any given direction it is a flick.<br>
 *	 The synthetic event fired specifies the direction as<br>
 *	 &amp;lt;ul&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;&amp;lt;b&amp;gt;'ltr'&amp;lt;/b&amp;gt; Left To Right&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;&amp;lt;b&amp;gt;'rtl'&amp;lt;/b&amp;gt; Right To Left&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;&amp;lt;b&amp;gt;'ttb'&amp;lt;/b&amp;gt; Top To Bottom&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;li&amp;gt;&amp;lt;b&amp;gt;'btt'&amp;lt;/b&amp;gt; Bottom To Top&amp;lt;/li&amp;gt;<br>
 *	 &amp;lt;/ul&amp;gt;<br>
 * </blockquote>
 * @param {Node} target The DOM node to connect to
 * @param {mixed} context 
 * @param {mixed} method 
*/
dojox.mobile.app.connectFlick=function(target, context, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base mobile app widget.<br>
 * </blockquote>
*/
dojox.mobile.app._Widget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets corresponding to native HTML elements such as &amp;lt;checkbox&amp;gt; or &amp;lt;button&amp;gt;,<br>
 *	 which can be children of a &amp;lt;form&amp;gt; node or a `dojox.mobile.app.Form` widget.<br>
 * </blockquote>
 * Represents a single HTML element.<br>
 * All these widgets should have these attributes just like native HTML input elements.<br>
 * You can set them during widget construction or afterwards, via `dijit._WidgetBase.attr`.<br>
 * <br>
 * They also share some common methods.<br>
*/
dojox.mobile.app._FormWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets corresponding to native HTML elements such as &amp;lt;input&amp;gt; or &amp;lt;select&amp;gt; that have user changeable values.<br>
 * </blockquote>
 * Each _FormValueWidget represents a single input value, and has a (possibly hidden) &lt;input&gt; element,<br>
 * to which it serializes it's input value, so that form submission (either normal submission or via FormBind?)<br>
 * works as expected.<br>
*/
dojox.mobile.app._FormValueWidget=function(){};
/**
 * @param {mixed} node 
*/
dojox.mobile.app.StageController=function(node){};
/**
*/
dojox.mobile.app.SceneController=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base class for all scene assistants.<br>
 * </blockquote>
*/
dojox.mobile.app.SceneAssistant=function(){};
/**
*/
dojox.mobile.app.ListSelector=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A templated list widget. Given a simple array of data objects<br>
 *	 and a HTML template, it renders a list of elements, with<br>
 *	 support for a swipe delete action.  An optional template<br>
 *	 can be provided for when the list is empty.<br>
 * </blockquote>
*/
dojox.mobile.app.List=function(){};
/**
*/
dojox.mobile.app.ImageView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An image thumbnail gallery<br>
 * </blockquote>
 * @param {mixed} params 
 * @param {mixed} node 
*/
dojox.mobile.app.ImageThumbView=function(params, node){};
/**
*/
dojox.mobile.app.AlertDialog=function(){};
/**
 * @namespace
*/
dojox.mobile.app.eventMap={};
/**
 * @class
 * @extends dijit._WidgetBase
 * @returns {dojox.mobile.app.AlertDialog} new instance
*/
dojox.mobile.app.AlertDialog=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the dialog<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.AlertDialog
*/
dojox.mobile.app.AlertDialog.prototype.show=function(){};
/**
 * @memberOf dojox.mobile.app.AlertDialog
*/
dojox.mobile.app.AlertDialog.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The callback function that is invoked when a button is tapped.<br>
 *	 If the dialog is cancelled, no parameter is passed to this function.<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.AlertDialog
*/
dojox.mobile.app.AlertDialog.prototype.onChoose=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide the dialog<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.AlertDialog
*/
dojox.mobile.app.AlertDialog.prototype.hide=function(){};
/**
 * @memberOf dojox.mobile.app.AlertDialog
*/
dojox.mobile.app.AlertDialog.prototype.destroy=function(){};
/**
 * @memberOf dojox.mobile.app.AlertDialog
*/
dojox.mobile.app.AlertDialog.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Either shows or hides the dialog.<br>
 * </blockquote>
 * @param {An} dir integer.  If positive, the dialog is shown. If negative,
 * the dialog is hidden.
 * @private
 * @memberOf dojox.mobile.app.AlertDialog
*/
dojox.mobile.app.AlertDialog.prototype._doTransition=function(dir){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the orientation specific css classes, 'dj_portrait' and<br>
 *	 'dj_landscape'.<br>
 * </blockquote>
*/
dojox.mobile.updateOrient=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets up CSS sprite for a foreground image.<br>
 * </blockquote>
 * @param {DomNode} iconNode 
 * @param {String} iconPos 
*/
dojox.mobile.setupIcon=function(iconNode, iconPos){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call the resize() method of all the top level resizable widgets.<br>
 * </blockquote>
 * Find all widgets that do not have a parent or the parent does not<br>
 * have the resize() method, and call resize() for them.<br>
 * If a widget has a parent that has resize(), call of the widget's<br>
 * resize() is its parent's responsibility.
 * @param {Event} [evt] Native event object
 * @param {Widget} [root] If specified, search the specified widget recursively for top level
 * resizable widgets.<br>
 * root.resize() is always called regardless of whether root is a<br>
 * top level widget or not.<br>
 * If omitted, search the entire page.<br>
*/
dojox.mobile.resizeAll=function(evt, root){};
/**
 * <b>Summary:</b><blockquote>
 *	 Opens a new browser window with the given url.<br>
 * </blockquote>
 * @param {mixed} url 
 * @param {mixed} target 
*/
dojox.mobile.openWindow=function(url, target){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads a device-specific theme according to the user-agent<br>
 *	 string.<br>
 * </blockquote>
 * This function is automatically called when this module is<br>
 * evaluated.
 * @param {String} [userAgent] 
*/
dojox.mobile.loadDeviceTheme=function(userAgent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads the given CSS file programmatically.<br>
 * </blockquote>
 * @param {String} file 
*/
dojox.mobile.loadCssFile=function(file){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to load and register CSS files with the page<br>
 * </blockquote>
 * @param {String|Array} files The CSS files to load and register with the page.
 * @private
*/
dojox.mobile.loadCss=function(files){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to perform page-level adjustments on browsers such as<br>
 *	 IE and firefox.  It loads compat specific css files into the<br>
 *	 page header.<br>
 * </blockquote>
 * @param {Boolean} [force] 
*/
dojox.mobile.loadCompatCssFiles=function(force){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to hide the address bar for fail-safe.<br>
 * </blockquote>
 * Resets the height of the body, performs hiding the address<br>
 * bar, and calls resizeAll().<br>
 * This is for fail-safe, in case of failure to complete the<br>
 * address bar hiding in time.<br>
*/
dojox.mobile.hide_fs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to hide the address bar.<br>
 * </blockquote>
 * @param {mixed} force 
*/
dojox.mobile.hide_1=function(force){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hides the address bar.<br>
 * </blockquote>
 * Tries hiding of the address bar a couple of times to do it as<br>
 * quick as possible while ensuring resize is done after the hiding<br>
 * finishes.
 * @param {Event} [evt] 
 * @param {Boolean} doResize 
*/
dojox.mobile.hideAddressBar=function(evt, doResize){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the dimensions of the browser window.<br>
 * </blockquote>
*/
dojox.mobile.getScreenSize=function(){};
/**
*/
dojox.mobile.getCssPaths=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Detects the screen size and determines if the screen is like<br>
 *	 phone or like tablet. If the result is changed,<br>
 *	 it sets either of the following css class to &amp;lt;html&amp;gt;<br>
 *	 - 'dj_phone'<br>
 *	 - 'dj_tablet'<br>
 *	 and it publishes either of the following events.<br>
 *	 - '/dojox/mobile/screenSize/phone'<br>
 *	 - '/dojox/mobile/screenSize/tablet'<br>
 * </blockquote>
 * @param {Boolean} [force] 
*/
dojox.mobile.detectScreenSize=function(force){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to adjust the creation of rounded rectangles on IE.<br>
 *	 Deals with IE's lack of borderRadius support<br>
 * </blockquote>
 * @param {mixed} _this 
 * @param {mixed} isList 
*/
dojox.mobile.createRoundRect=function(_this, isList){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates or updates an icon node<br>
 * </blockquote>
 * If node exists, updates the existing node. Otherwise, creates a new one.
 * @param {String} icon Path for an image, or DOM button class name.
 * @param {String} iconPos 
 * @param {DomNode} node 
 * @param {String} [title] 
 * @param {DomNode} [parent] 
*/
dojox.mobile.createIcon=function(icon, iconPos, node, title, parent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a DOM button.<br>
 * </blockquote>
 * DOM button is a simple graphical object that consists of one or<br>
 * more nested DIV elements with some CSS styling. It can be used<br>
 * in place of an icon image on ListItem, IconItem, and so on.<br>
 * The kind of DOM button to create is given as a class name of<br>
 * refNode. The number of DIVs to create is searched from the style<br>
 * sheets in the page. However, if the class name has a suffix that<br>
 * starts with an underscore, like mblDomButtonGoldStar_5, then the<br>
 * suffixed number is used instead. A class name for DOM button<br>
 * must starts with 'mblDomButton'.
 * @param {DomNode} refNode A node that has a DOM button class name.
 * @param {Object} [style] A hash object to set styles to the node.
 * @param {DomNode} [toNode] A root node to create a DOM button. If omitted, refNode is used.
*/
dojox.mobile.createDomButton=function(refNode, style, toNode){};
/**
 * @param {mixed} root 
*/
dojox.mobile.applyPngFilter=function(root){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets to have a touch scrolling capability.<br>
 * </blockquote>
 * Actual implementation is in scrollable.js.<br>
 * scrollable.js is not a dojo class, but just a collection<br>
 * of functions. This module makes scrollable.js a dojo class.
 * @private
*/
dojox.mobile._ScrollableMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus-less menu to handle touch events consistently<br>
 *	 Abstract methods that must be defined externally:<br>
 *	 onClick: item was chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)<br>
 * </blockquote>
 * @private
*/
dojox.mobile._ListTouchMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A base class for item classes (e.g. ListItem, IconItem, etc.)<br>
 * </blockquote>
 * _ItemBase is a base class for widgets that have capability to<br>
 * make a view transition when clicked.
 * @private
*/
dojox.mobile._ItemBase=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets to generate the list items corresponding to<br>
 *	 the data provider object.<br>
 * </blockquote>
 * By mixing this class into the widgets, the list item nodes are<br>
 * generated as the child nodes of the widget and automatically<br>
 * re-generated whenever the corresponding data items are modified.
 * @private
*/
dojox.mobile._DataListMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus-less menu for internal use in `dijit.form.ComboBox`<br>
 *	 Abstract methods that must be defined externally:<br>
 *	 onChange: item was explicitly chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)<br>
 *	 onPage: next(1) or previous(-1) button pressed<br>
 * </blockquote>
*/
dojox.mobile._ComboBoxMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A singleton class that controlls view transition.<br>
 * </blockquote>
 * This class listens to the "startTransition" events and performs<br>
 * view transitions. If the transition destination is an external<br>
 * view specified with the url parameter, retrieves the view<br>
 * content and parses it to create a new target view.<br>
*/
dojox.mobile.ViewController=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget that represents a view that occupies the full screen<br>
 * </blockquote>
 * View acts as a container for any HTML and/or widgets. An entire<br>
 * HTML page can have multiple View widgets and the user can<br>
 * navigate through the views back and forth without page<br>
 * transitions.
 * @param {mixed} params 
 * @param {mixed} node 
*/
dojox.mobile.View=function(params, node){};
/**
 * @param {mixed} target 
 * @param {mixed} transitionOptions 
 * @param {mixed} triggerEvent 
*/
dojox.mobile.TransitionEvent=function(target, transitionOptions, triggerEvent){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated popup bubble widget<br>
 * </blockquote>
*/
dojox.mobile.Tooltip=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A button widget that is placed in the Heading widget.<br>
 * </blockquote>
 * ToolBarButton is a button that is placed in the Heading<br>
 * widget. It is a subclass of dojox.mobile._ItemBase just like<br>
 * ListItem or IconItem. So, unlike Button, it has basically the<br>
 * same capability as ListItem or IconItem, such as icon support,<br>
 * transition, etc.<br>
*/
dojox.mobile.ToolBarButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated button widget that can be in two states (checked or not).<br>
 *	 Can be base class for things like tabs or checkbox or radio buttons<br>
 * </blockquote>
*/
dojox.mobile.ToggleButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated base class for textbox form inputs<br>
 * </blockquote>
*/
dojox.mobile.TextBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Non-templated TEXTAREA widget.<br>
 * </blockquote>
 * A textarea widget that wraps an HTML TEXTAREA element.<br>
 * Takes all the parameters (name, value, etc.) that a vanilla textarea takes.
 * @example
 * 	&lt;textarea dojoType="dojox.mobile.TextArea"&gt;...&lt;/textarea&gt;
*/
dojox.mobile.TextArea=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A button widget that is placed in the TabBar widget.<br>
 * </blockquote>
 * TabBarButton is a button that is placed in the TabBar widget. It<br>
 * is a subclass of dojox.mobile._ItemBase just like ListItem or<br>
 * IconItem. So, unlike Button, it has similar capability as<br>
 * ListItem or IconItem, such as icon support, transition, etc.<br>
*/
dojox.mobile.TabBarButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A bar widget that has buttons to control visibility of views.<br>
 * </blockquote>
 * TabBar is a container widget that has typically multiple<br>
 * TabBarButtons which controls visibility of views. It can be used<br>
 * as a tab container.<br>
*/
dojox.mobile.TabBar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A toggle switch with a sliding knob.<br>
 * </blockquote>
 * Switch is a toggle switch with a sliding knob. You can either<br>
 * tap or slide the knob to toggle the switch. The onStateChanged<br>
 * handler is called when the switch is manipulated.<br>
*/
dojox.mobile.Switch=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container that can be flipped horizontally.<br>
 * </blockquote>
 * SwapView is a container widget that represents entire mobile<br>
 * device screen, and can be swiped horizontally. (In dojo-1.6, it<br>
 * was called 'FlippableView'.) SwapView is a subclass of<br>
 * dojox.mobile.View. SwapView allows the user to swipe the screen<br>
 * left or right to move between the views. When SwapView is<br>
 * swiped, it finds an adjacent SwapView to open it.<br>
*/
dojox.mobile.SwapView=function(){};
/**
*/
dojox.mobile.SpinWheelYearSlot=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A SpinWheel-based time picker widget.<br>
 * </blockquote>
 * SpinWheelTimePicker is a time picker widget. It is a subclass of<br>
 * dojox.mobile.SpinWheel. It has the hour and minute slots.<br>
*/
dojox.mobile.SpinWheelTimePicker=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A slot of a SpinWheel.<br>
 * </blockquote>
 * SpinWheelSlot is a slot that is placed in the SpinWheel widget.<br>
*/
dojox.mobile.SpinWheelSlot=function(){};
/**
*/
dojox.mobile.SpinWheelMonthSlot=function(){};
/**
*/
dojox.mobile.SpinWheelDaySlot=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A SpinWheel-based date picker widget.<br>
 * </blockquote>
 * SpinWheelDatePicker is a date picker widget. It is a subclass of<br>
 * dojox.mobile.SpinWheel. It has the year, month, and day slots.<br>
*/
dojox.mobile.SpinWheelDatePicker=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A value picker widget that has spin wheels.<br>
 * </blockquote>
 * SpinWheel is a value picker component. It is a sectioned wheel<br>
 * that can be used to pick up some values from the wheel slots by<br>
 * spinning them.<br>
*/
dojox.mobile.SpinWheel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated Slider widget similar to the HTML5 INPUT type=range.<br>
 * </blockquote>
*/
dojox.mobile.Slider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container that has a touch scrolling capability.<br>
 * </blockquote>
 * ScrollableView is a subclass of View (=dojox.mobile.View).<br>
 * Unlike the base View class, ScrollableView's domNode always stays<br>
 * at the top of the screen and its height is "100%" of the screen.<br>
 * In this fixed domNode, containerNode scrolls. Browser's default<br>
 * scrolling behavior is disabled, and the scrolling machinery is<br>
 * re-implemented with JavaScript. Thus the user does not need to use the<br>
 * two-finger operation to scroll an inner DIV (containerNode).<br>
 * The main purpose of this widget is to realize fixed-positioned header<br>
 * and/or footer bars.<br>
*/
dojox.mobile.ScrollableView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A rounded rectangle list.<br>
 * </blockquote>
 * RoundRectList is a rounded rectangle list, which can be used to<br>
 * display a group of items. Each item must be<br>
 * dojox.mobile.ListItem.<br>
*/
dojox.mobile.RoundRectList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An enhanced version of RoundRectList.<br>
 * </blockquote>
 * RoundRectDataList is an enhanced version of RoundRectList. It<br>
 * can generate ListItems according to the given dojo.data store.<br>
*/
dojox.mobile.RoundRectDataList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A category header for a rounded rectangle list.<br>
 * </blockquote>
*/
dojox.mobile.RoundRectCategory=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple round rectangle container.<br>
 * </blockquote>
 * RoundRect is a simple round rectangle container for any HTML<br>
 * and/or widgets. You can achieve the same appearance by just<br>
 * applying the -webkit-border-radius style to a div tag. However,<br>
 * if you use RoundRect, you can get a round rectangle even on<br>
 * non-CSS3 browsers such as (older) IE.<br>
*/
dojox.mobile.RoundRect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated radiobutton widget that can be in two states (checked or not).<br>
 * </blockquote>
*/
dojox.mobile.RadioButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A progress indication widget.<br>
 * </blockquote>
 * ProgressIndicator is a round spinning graphical representation<br>
 * that indicates the current task is on-going.<br>
*/
dojox.mobile.ProgressIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A current page indicator.<br>
 * </blockquote>
 * PageIndicator displays a series of gray and white dots to<br>
 * indicate which page is currently being viewed. It can typically<br>
 * be used with dojox.mobile.SwapView. It is also internally used<br>
 * in dojox.mobile.Carousel.<br>
*/
dojox.mobile.PageIndicator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated widget that animates up from the bottom, overlaying the current content<br>
 * </blockquote>
*/
dojox.mobile.Overlay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated popup widget that will use either Tooltip or Overlay depending on screen size<br>
 * </blockquote>
*/
dojox.mobile.Opener=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An item of either RoundRectList or EdgeToEdgeList.<br>
 * </blockquote>
 * ListItem represents an item of either RoundRectList or<br>
 * EdgeToEdgeList. There are three ways to move to a different<br>
 * view, moveTo, href, and url. You can choose only one of them.<br>
*/
dojox.mobile.ListItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An icon item widget.<br>
 * </blockquote>
 * IconItem represents an item that has an application component<br>
 * and its icon image. You can tap the icon to open the<br>
 * corresponding application component. You can also use the icon<br>
 * to move to a different view by specifying either of the moveTo,<br>
 * href or url parameters.<br>
*/
dojox.mobile.IconItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container widget that holds multiple icons.<br>
 * </blockquote>
 * IconContainer is a container widget that holds multiple icons<br>
 * each of which represents application component.<br>
*/
dojox.mobile.IconContainer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget that represents a navigation bar.<br>
 * </blockquote>
 * Heading is a widget that represents a navigation bar, which<br>
 * usually appears at the top of an application. It usually<br>
 * displays the title of the current view and can contain a<br>
 * navigational control. If you use it with<br>
 * dojox.mobile.ScrollableView, it can also be used as a fixed<br>
 * header bar or a fixed footer bar. In such cases, specify the<br>
 * fixed="top" attribute to be a fixed header bar or the<br>
 * fixed="bottom" attribute to be a fixed footer bar. Heading can<br>
 * have one or more ToolBarButton widgets as its children.<br>
*/
dojox.mobile.Heading=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A pane widget that is used in a dojox.mobile.FixedSplitter.<br>
 * </blockquote>
 * FixedSplitterPane is a pane widget that is used in a<br>
 * dojox.mobile.FixedSplitter. It is a widget, but can be regarded<br>
 * as a simple &lt;div&gt; element.<br>
*/
dojox.mobile.FixedSplitterPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A layout container that splits the window horizontally or<br>
 *	 vertically.<br>
 * </blockquote>
 * FixedSplitter is a very simple container widget that layouts its<br>
 * child dom nodes side by side either horizontally or<br>
 * vertically. An example usage of this widget would be to realize<br>
 * the split view on iPad. There is no visual splitter between the<br>
 * children, and there is no function to resize the child panes<br>
 * with drag-and-drop. If you need a visual splitter, you can<br>
 * specify a border of a child dom node with CSS.<br>
 * A child of the widget should be FixedSplitterPane.
 * @example
 * 	&lt;div dojoType="dojox.mobile.FixedSplitter" orientation="H"&gt;
 * 		&lt;div dojoType="dojox.mobile.FixedSplitterPane"
 * 			style="width:200px;border-right:1px solid black;"&gt;
 * 			pane #1 (width=200px)
 * 		&lt;/div&gt;
 * 		&lt;div dojoType="dojox.mobile.FixedSplitterPane"&gt;
 * 			pane #2
 * 		&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.mobile.FixedSplitter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Non-templated TEXTAREA widget with the capability to adjust it's height according to the amount of data.<br>
 * </blockquote>
 * A textarea that dynamically expands/contracts (changing it's height) as<br>
 * the user types, to display all the text without requiring a vertical scroll bar.<br>
 * <br>
 * Takes all the parameters (name, value, etc.) that a vanilla textarea takes.<br>
 * Rows is not supported since this widget adjusts the height.
 * @example
 * 	&lt;textarea dojoType="dojox.mobile.ExpandingTextArea"&gt;...&lt;/textarea&gt;
*/
dojox.mobile.ExpandingTextArea=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An edge-to-edge layout list.<br>
 * </blockquote>
 * EdgeToEdgeList is an edge-to-edge layout list, which displays<br>
 * all items in equally sized rows. Each item must be<br>
 * dojox.mobile.ListItem.<br>
*/
dojox.mobile.EdgeToEdgeList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An enhanced version of EdgeToEdgeList.<br>
 * </blockquote>
 * EdgeToEdgeDataList is an enhanced version of EdgeToEdgeList. It<br>
 * can generate ListItems according to the given dojo.data store.<br>
*/
dojox.mobile.EdgeToEdgeDataList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A category header for an edge-to-edge list.<br>
 * </blockquote>
*/
dojox.mobile.EdgeToEdgeCategory=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A very simple content pane to embed an HTML fragment.<br>
 * </blockquote>
 * This widget embeds an HTML fragment and run the parser. onLoad()<br>
 * is called when parsing is done and the content is ready.<br>
 * "dojo/_base/xhr" is in the dependency list. Usually this is not<br>
 * necessary, but there is a case where dojox.mobile custom build<br>
 * does not contain xhr. Note that this widget does not inherit<br>
 * from dijit._Container.<br>
*/
dojox.mobile.ContentPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated auto-completing text box widget<br>
 * </blockquote>
*/
dojox.mobile.ComboBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated checkbox widget that can be in two states (checked or not).<br>
 * </blockquote>
*/
dojox.mobile.CheckBox=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A carousel widget that manages a list of images<br>
 * </blockquote>
 * The carousel widget manages a list of images that can be<br>
 * displayed horizontally, and allows the user to scroll through<br>
 * the list and select a single item.<br>
*/
dojox.mobile.Carousel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Non-templated BUTTON widget with a thin API wrapper for click events and setting the label<br>
 * </blockquote>
 * Buttons can display a label, an icon, or both.<br>
 * A label should always be specified (through innerHTML) or the label<br>
 * attribute.  It can be hidden via showLabel=false.
 * @example
 *	 &lt;button dojoType="dijit.form.Button" onClick="..."&gt;Hello world&lt;/button&gt;
*/
dojox.mobile.Button=function(){};
/**
 * @namespace
*/
dojox.mobile.i18n={};
/**
 * <b>Summary:</b><blockquote>
 *	 A templated list widget. Given a simple array of data objects<br>
 *	 and a HTML template, it renders a list of elements, with<br>
 *	 support for a swipe delete action.  An optional template<br>
 *	 can be provided for when the list is empty.<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @returns {dojox.mobile.app.List} new instance
*/
dojox.mobile.app.List=function(){};
/**
 * @namespace
 * @private
*/
dojox.mobile.app.List._selectedRow={};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders the list.<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.render=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Slides the row offscreen before it is deleted<br>
 * </blockquote>
 * @param {mixed} currentLeftPos 
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.preDelete=function(currentLeftPos){};
/**
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dummy function that is called when a row is tapped<br>
 * </blockquote>
 * @param {mixed} data 
 * @param {mixed} index 
 * @param {mixed} rowNode 
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.onSelect=function(data, index, rowNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when a row is deleted<br>
 * </blockquote>
 * @param {The} data data related to the row being deleted
 * @param {The} index index of the data in the total array
 * @param {The} array array of data used.
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.onDelete=function(data, index, array){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle a drag action being cancelled, for whatever reason.<br>
 *	 Reset handles, remove CSS classes etc.<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.handleDragCancel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles rows being swiped for deletion.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.handleDrag=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to create divider elements. This should return a divider<br>
 *	 value for each item in the list<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.dividerFunction=function(){};
/**
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.destroy=function(){};
/**
 * @param {mixed} row 
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.deleteRow=function(row){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates the two buttons displayed when confirmation is<br>
 *	 required before deletion of a row.<br>
 * </blockquote>
 * @param {The} aroundNode DOM node of the row about to be deleted.
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.createDeleteButtons=function(aroundNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancels the deletion of a row.<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.cancelDelete=function(){};
/**
 * @param {mixed} template 
 * @param {mixed} data 
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.applyTemplate=function(template, data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Applies the 'first' and 'last' CSS classes to the relevant<br>
 *	 rows.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} idx 
 * @param {mixed} array 
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype.applyClass=function(node, idx, array){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the data items, and causes a rerender of the list<br>
 * </blockquote>
 * @param {mixed} items 
 * @private
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype._setItemsAttr=function(items){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the data items, and causes a rerender of the list<br>
 * </blockquote>
 * @param {mixed} formatters 
 * @private
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype._setFormattersAttr=function(formatters){};
/**
 * <b>Summary:</b><blockquote>
 *	 Attaches the data item and index for each row to any event<br>
 *	 that occurs on that row.<br>
 * </blockquote>
 * @param {mixed} rowNode 
 * @param {mixed} event 
 * @private
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype._setDataInfo=function(rowNode, event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Selects a row, applies the relevant CSS classes.<br>
 * </blockquote>
 * @param {mixed} row 
 * @private
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype._selectRow=function(row){};
/**
 * @param {mixed} startIdx 
 * @param {mixed} endIdx 
 * @private
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype._renderRange=function(startIdx, endIdx){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads a template<br>
 * </blockquote>
 * @param {mixed} url 
 * @param {mixed} thisAttr 
 * @param {mixed} callback 
 * @private
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype._loadTemplate=function(url, thisAttr, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles the click of one of the deletion buttons, either to<br>
 *	 delete the row or to cancel the deletion.<br>
 * </blockquote>
 * @param {mixed} event 
 * @private
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype._handleButtonClick=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the DOM node of the row that is equal to or the parent<br>
 *	 of the node passed to this function.<br>
 * </blockquote>
 * @param {mixed} fromNode 
 * @param {mixed} ignoreNoClick 
 * @private
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype._getRowNode=function(fromNode, ignoreNoClick){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deselects a row, and cancels any drag actions that were<br>
 *	 occurring.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.mobile.app.List
*/
dojox.mobile.app.List.prototype._deselectRow=function(){};
/**
 * @class
 * @returns {dojox.mobile.app.List.deleteRow} new instance
*/
dojox.mobile.app.List.deleteRow=function(){};
/**
 * @class
 * @extends dojox.mobile.app._Widget
 * @returns {dojox.mobile.app.ImageView} new instance
*/
dojox.mobile.app.ImageView=function(){};
/**
 * @namespace
*/
dojox.mobile.app.ImageView.canvas={};
/**
 * @namespace
 * @private
*/
dojox.mobile.app.ImageView._centerSmallImg={};
/**
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView._centerImg=null;
/**
 * @param {mixed} centerX 
 * @param {mixed} centerY 
 * @param {mixed} zoom 
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype.zoomTo=function(centerX, centerY, zoom){};
/**
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype.render=function(){};
/**
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dummy function that is called whenever an image loads.<br>
 * </blockquote>
 * @param {String} type The position of the image that has loaded, either
 * &quot;center&quot;, &quot;left&quot; or &quot;right&quot;
 * @param {String} url The src of the image
 * @param {Boolean} isSmall True if it is a small version of the image that has loaded,
 * false otherwise.
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype.onLoad=function(type, url, isSmall){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function that can be listened to in order to provide<br>
 *	 new images when the displayed image changes<br>
 * </blockquote>
 * @param {mixed} direction 
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype.onChange=function(direction){};
/**
 * @param {mixed} direction 
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype.moveTo=function(direction){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if an animation is in progress, false otherwise.<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype.isAnimating=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle a flick event.<br>
 * </blockquote>
 * @param {mixed} event 
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype.handleFlick=function(event){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles the end of a dragging event. If not zoomed in, it<br>
 *	 determines if the next or previous image should be transitioned<br>
 *	 to.<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype.handleDragEnd=function(){};
/**
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype.buildRendering=function(){};
/**
 * @param {mixed} toImg 
 * @param {mixed} fromImg 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._switchImage=function(toImg, fromImg){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._setZoomCenterYAttr=function(value){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._setZoomCenterXAttr=function(value){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._setZoomCenterAttr=function(value){};
/**
 * @param {mixed} amount 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._setZoomAttr=function(amount){};
/**
 * @param {mixed} urlOrObj 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._setRightUrlAttr=function(urlOrObj){};
/**
 * @param {mixed} urlOrObj 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._setLeftUrlAttr=function(urlOrObj){};
/**
 * @param {mixed} name 
 * @param {mixed} urlOrObj 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._setImage=function(name, urlOrObj){};
/**
 * @param {mixed} urlOrObj 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._setCenterUrlAttr=function(urlOrObj){};
/**
 * @param {mixed} amount 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._setAnimatedZoomAttr=function(amount){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders a single image<br>
 * </blockquote>
 * @param {mixed} smallImg 
 * @param {mixed} largeImg 
 * @param {mixed} panDir 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._renderImg=function(smallImg, largeImg, panDir){};
/**
 * @param {mixed} to 
 * @param {mixed} easing 
 * @param {mixed} duration 
 * @param {mixed} callback 
 * @private
 * @memberOf dojox.mobile.app.ImageView
*/
dojox.mobile.app.ImageView.prototype._animPanTo=function(to, easing, duration, callback){};
/**
 * @class
 * @returns {dojox.mobile.app.ImageView.buildRendering} new instance
*/
dojox.mobile.app.ImageView.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An image thumbnail gallery<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @param {mixed} params 
 * @param {mixed} node 
 * @returns {dojox.mobile.app.ImageThumbView} new instance
*/
dojox.mobile.app.ImageThumbView=function(params, node){};
/**
 * @namespace
 * @private
*/
dojox.mobile.app.ImageThumbView._thumbSize={};
/**
 * @namespace
 * @private
*/
dojox.mobile.app.ImageThumbView._size={};
/**
 * @param {mixed} amount 
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype.setContainerHeight=function(amount){};
/**
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype.resize=function(){};
/**
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype.render=function(){};
/**
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype.postCreate=function(){};
/**
 * @param {mixed} node 
 * @param {mixed} x 
 * @param {mixed} y 
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype.place=function(node, x, y){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dummy function that is triggered when an image is selected.<br>
 * </blockquote>
 * @param {mixed} item 
 * @param {mixed} index 
 * @param {mixed} items 
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype.onSelect=function(item, index, items){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hides all cached nodes, so that they're no invisible and overlaying<br>
 *	 other screen elements.<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype.hideCached=function(){};
/**
 * @param {mixed} event 
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype.handleImgLoad=function(event){};
/**
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype.destroy=function(){};
/**
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype.calcPadding=function(){};
/**
 * @param {mixed} item 
 * @param {mixed} url 
 * @param {mixed} index 
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype.addThumb=function(item, url, index){};
/**
 * @param {mixed} items 
 * @private
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype._setItemsAttr=function(items){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype._setAnimationEnabledAttr=function(value){};
/**
 * @param {mixed} event 
 * @private
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype._getItemNodeFromEvent=function(event){};
/**
 * @param {mixed} node 
 * @private
 * @memberOf dojox.mobile.app.ImageThumbView
*/
dojox.mobile.app.ImageThumbView.prototype._getItemNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets corresponding to native HTML elements such as &amp;lt;checkbox&amp;gt; or &amp;lt;button&amp;gt;,<br>
 *	 which can be children of a &amp;lt;form&amp;gt; node or a `dojox.mobile.app.Form` widget.<br>
 * </blockquote>
 * Represents a single HTML element.<br>
 * All these widgets should have these attributes just like native HTML input elements.<br>
 * You can set them during widget construction or afterwards, via `dijit._WidgetBase.attr`.<br>
 * <br>
 * They also share some common methods.
 * @class
 * @extends dijit._WidgetBase
 * @returns {dojox.mobile.app._FormWidget} new instance
*/
dojox.mobile.app._FormWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Select text in the input element argument, from start (default 0), to stop (default end).<br>
 * </blockquote>
 * @param {DomNode} element 
 * @param {Number} [start] 
 * @param {Number} [stop] 
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype.selectInputText=function(element, start, stop){};
/**
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when this widget's value is changed.<br>
 * </blockquote>
 * @param {mixed} newValue 
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype.onChange=function(newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tells if this widget is focusable or not.   Used internally by dijit.<br>
 * </blockquote>
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype.isFocusable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Put focus on this widget<br>
 * </blockquote>
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype.focus=function(){};
/**
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype.destroy=function(){};
/**
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype.create=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Compare 2 values (as returned by attr('value') for this widget).<br>
 * </blockquote>
 * @param {anything} val1 
 * @param {anything} val2 
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype.compare=function(val1, val2){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype._setDisabledAttr=function(value){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype._onMouseDown=function(e){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype._onFocus=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the value of the widget is set.  Calls onChange() if appropriate<br>
 * </blockquote>
 * @param {anything} newValue the new value
 * @param {Boolean} [priorityChange] For a slider, for example, dragging the slider is priorityChange==false,
 * but on mouse up, it's priorityChange==true.  If intermediateChanges==true,<br>
 * onChange is only called form priorityChange=true events.
 * @private
 * @memberOf dojox.mobile.app._FormWidget
*/
dojox.mobile.app._FormWidget.prototype._handleOnChange=function(newValue, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base class for widgets corresponding to native HTML elements such as &amp;lt;input&amp;gt; or &amp;lt;select&amp;gt; that have user changeable values.<br>
 * </blockquote>
 * Each _FormValueWidget represents a single input value, and has a (possibly hidden) &lt;input&gt; element,<br>
 * to which it serializes it's input value, so that form submission (either normal submission or via FormBind?)<br>
 * works as expected.
 * @class
 * @extends dojox.mobile.app._FormWidget
 * @returns {dojox.mobile.app._FormValueWidget} new instance
*/
dojox.mobile.app._FormValueWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Restore the value to the last value passed to onChange<br>
 * </blockquote>
 * @memberOf dojox.mobile.app._FormValueWidget
*/
dojox.mobile.app._FormValueWidget.prototype.undo=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reset the widget's value to what it was at initialization time<br>
 * </blockquote>
 * @memberOf dojox.mobile.app._FormValueWidget
*/
dojox.mobile.app._FormValueWidget.prototype.reset=function(){};
/**
 * @memberOf dojox.mobile.app._FormValueWidget
*/
dojox.mobile.app._FormValueWidget.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so attr('value', value) works.<br>
 * </blockquote>
 * Sets the value of the widget.<br>
 * If the value has changed, then fire onChange event, unless priorityChange<br>
 * is specified as null (or false?)
 * @param {anything} newValue 
 * @param {Boolean,} priorityChange optional
 * @private
 * @memberOf dojox.mobile.app._FormValueWidget
*/
dojox.mobile.app._FormValueWidget.prototype._setValueAttr=function(newValue, priorityChange){};
/**
 * @param {Boolean} value 
 * @private
 * @memberOf dojox.mobile.app._FormValueWidget
*/
dojox.mobile.app._FormValueWidget.prototype._setReadOnlyAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so attr('value') works.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.mobile.app._FormValueWidget
*/
dojox.mobile.app._FormValueWidget.prototype._getValueAttr=function(){};

/**
 * @class
 * @extends dojox.mobile.app._Widget
 * @returns {dojox.mobile.app.ListSelector} new instance
*/
dojox.mobile.app.ListSelector=function(){};
/**
 * @param {mixed} fromNode 
 * @memberOf dojox.mobile.app.ListSelector
*/
dojox.mobile.app.ListSelector.prototype.show=function(fromNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.ListSelector
*/
dojox.mobile.app.ListSelector.prototype.render=function(){};
/**
 * @memberOf dojox.mobile.app.ListSelector
*/
dojox.mobile.app.ListSelector.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The callback function for when an item is selected<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.ListSelector
*/
dojox.mobile.app.ListSelector.prototype.onChoose=function(){};
/**
 * @memberOf dojox.mobile.app.ListSelector
*/
dojox.mobile.app.ListSelector.prototype.hide=function(){};
/**
 * @memberOf dojox.mobile.app.ListSelector
*/
dojox.mobile.app.ListSelector.prototype.destroy=function(){};
/**
 * @param {mixed} data 
 * @private
 * @memberOf dojox.mobile.app.ListSelector
*/
dojox.mobile.app.ListSelector.prototype._setDataAttr=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base class for all scene assistants.<br>
 * </blockquote>
 * @class
 * @returns {dojox.mobile.app.SceneAssistant} new instance
*/
dojox.mobile.app.SceneAssistant=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called to set up the widget.  The UI is not visible at this time<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.SceneAssistant
*/
dojox.mobile.app.SceneAssistant.prototype.setup=function(){};
/**
 * @memberOf dojox.mobile.app.SceneAssistant
*/
dojox.mobile.app.SceneAssistant.prototype.disconnect=function(){};
/**
 * @memberOf dojox.mobile.app.SceneAssistant
*/
dojox.mobile.app.SceneAssistant.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called each time the scene becomes invisible.  This can be as a result<br>
 *	 of it being popped off the stack and destroyed,<br>
 *	 or another scene being created and pushed on top of it on the stack<br>
 * </blockquote>
 * @memberOf dojox.mobile.app.SceneAssistant
*/
dojox.mobile.app.SceneAssistant.prototype.deactivate=function(){};
/**
 * @param {mixed} obj 
 * @param {mixed} method 
 * @param {mixed} callback 
 * @memberOf dojox.mobile.app.SceneAssistant
*/
dojox.mobile.app.SceneAssistant.prototype.connect=function(obj, method, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called each time the scene becomes visible.  This can be as a result<br>
 *	 of a new scene being created, or a subsequent scene being destroyed<br>
 *	 and control transferring back to this scene assistant.<br>
 * </blockquote>
 * @param {Optional} params paramters, only passed when a subsequent scene pops itself
 * off the stack and passes back data.
 * @memberOf dojox.mobile.app.SceneAssistant
*/
dojox.mobile.app.SceneAssistant.prototype.activate=function(params){};
/**
 * @class
 * @extends dojox.mobile.View
 * @returns {dojox.mobile.app.SceneController} new instance
*/
dojox.mobile.app.SceneController=function(){};
/**
 * @namespace
*/
dojox.mobile.app.SceneController.assistant={};
/**
 * @param {mixed} props 
 * @memberOf dojox.mobile.app.SceneController
*/
dojox.mobile.app.SceneController.prototype.showAlertDialog=function(props){};
/**
 * <b>Summary:</b><blockquote>
 *	 Queries for DOM nodes within either the node passed in as an argument<br>
 *	 or within this view.<br>
 * </blockquote>
 * @param {mixed} selector 
 * @param {mixed} node 
 * @memberOf dojox.mobile.app.SceneController
*/
dojox.mobile.app.SceneController.prototype.query=function(selector, node){};
/**
 * @param {mixed} info 
 * @memberOf dojox.mobile.app.SceneController
*/
dojox.mobile.app.SceneController.prototype.popupSubMenu=function(info){};
/**
 * @param {mixed} node 
 * @memberOf dojox.mobile.app.SceneController
*/
dojox.mobile.app.SceneController.prototype.parse=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes the scene by loading the HTML template and code, if it has<br>
 *	 not already been loaded<br>
 * </blockquote>
 * @param {mixed} sceneName 
 * @param {mixed} params 
 * @memberOf dojox.mobile.app.SceneController
*/
dojox.mobile.app.SceneController.prototype.init=function(sceneName, params){};
/**
 * @memberOf dojox.mobile.app.SceneController
*/
dojox.mobile.app.SceneController.prototype.getWindowSize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the content of the View, and invokes either the loading or<br>
 *	 initialization of the scene assistant.<br>
 * </blockquote>
 * @param {mixed} templateHtml 
 * @private
 * @memberOf dojox.mobile.app.SceneController
*/
dojox.mobile.app.SceneController.prototype._setContents=function(templateHtml){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes the scene assistant. At this point, the View is<br>
 *	 populated with the HTML template, and the scene assistant type<br>
 *	 is declared.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.mobile.app.SceneController
*/
dojox.mobile.app.SceneController.prototype._initAssistant=function(){};
/**
 * @class
 * @param {mixed} node 
 * @returns {dojox.mobile.app.StageController} new instance
*/
dojox.mobile.app.StageController=function(node){};
/**
 * @param {mixed} controller 
 * @param {mixed} idx 
 * @memberOf dojox.mobile.app.StageController
*/
dojox.mobile.app.StageController.prototype.setZIndex=function(controller, idx){};
/**
 * @param {mixed} sceneName 
 * @param {mixed} params 
 * @memberOf dojox.mobile.app.StageController
*/
dojox.mobile.app.StageController.prototype.pushScene=function(sceneName, params){};
/**
 * @param {mixed} sceneName 
 * @param {mixed} data 
 * @memberOf dojox.mobile.app.StageController
*/
dojox.mobile.app.StageController.prototype.popScenesTo=function(sceneName, data){};
/**
 * @param {mixed} data 
 * @memberOf dojox.mobile.app.StageController
*/
dojox.mobile.app.StageController.prototype.popScene=function(data){};
/**
 * @memberOf dojox.mobile.app.StageController
*/
dojox.mobile.app.StageController.prototype.getActiveSceneController=function(){};
/**
 * @param {mixed} scene 
 * @private
 * @memberOf dojox.mobile.app.StageController
*/
dojox.mobile.app.StageController.prototype._destroyScene=function(scene){};
/**
 * <b>Summary:</b><blockquote>
 *	 The base mobile app widget.<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @returns {dojox.mobile.app._Widget} new instance
*/
dojox.mobile.app._Widget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the scroll position.<br>
 * </blockquote>
 * @memberOf dojox.mobile.app._Widget
*/
dojox.mobile.app._Widget.prototype.getScroll=function(){};
/**
 * @param {mixed} target 
 * @param {mixed} event 
 * @param {mixed} fn 
 * @memberOf dojox.mobile.app._Widget
*/
dojox.mobile.app._Widget.prototype.connect=function(target, event, fn){};
/**
 * <b>Summary:</b><blockquote>
 *	 Non-templated BUTTON widget with a thin API wrapper for click events and setting the label<br>
 * </blockquote>
 * Buttons can display a label, an icon, or both.<br>
 * A label should always be specified (through innerHTML) or the label<br>
 * attribute.  It can be hidden via showLabel=false.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit.form._FormWidgetMixin
 * @extends dijit.form._ButtonMixin
 * @returns {dojox.mobile.Button} new instance
 * @example
 *	 &lt;button dojoType="dijit.form.Button" onClick="..."&gt;Hello world&lt;/button&gt;
*/
dojox.mobile.Button=function(){};
/**
 * @namespace
*/
dojox.mobile.Button.srcNodeRef={};
/**
 * @memberOf dojox.mobile.Button
*/
dojox.mobile.Button.prototype.postCreate=function(){};
/**
 * @memberOf dojox.mobile.Button
*/
dojox.mobile.Button.prototype.isFocusable=function(){};
/**
 * @memberOf dojox.mobile.Button
*/
dojox.mobile.Button.prototype.buildRendering=function(){};
/**
 * @param {String} content 
 * @private
 * @memberOf dojox.mobile.Button
*/
dojox.mobile.Button.prototype._setLabelAttr=function(content){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.mobile.Button
*/
dojox.mobile.Button.prototype._onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A carousel widget that manages a list of images<br>
 * </blockquote>
 * The carousel widget manages a list of images that can be<br>
 * displayed horizontally, and allows the user to scroll through<br>
 * the list and select a single item.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Container
 * @extends dijit._Contained
 * @returns {dojox.mobile.Carousel} new instance
*/
dojox.mobile.Carousel=function(){};
/**
 * @namespace
*/
dojox.mobile.Carousel.titleNode={};
/**
 * @namespace
*/
dojox.mobile.Carousel.piw={};
/**
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the store to use with this widget.<br>
 * </blockquote>
 * @param {mixed} store 
 * @param {mixed} query 
 * @param {mixed} queryOptions 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.setStore=function(store, query, queryOptions){};
/**
 * @param {mixed} item 
 * @param {mixed} box 
 * @param {mixed} img 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.resizeContent=function(item, box, img){};
/**
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.refresh=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.onPrevBtnClick=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.onNextBtnClick=function(e){};
/**
 * @param {mixed} errText 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.onError=function(errText){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.onClick=function(e){};
/**
 * @param {mixed} view 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.loadImages=function(view){};
/**
 * @param {mixed} view 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.handleViewChanged=function(view){};
/**
 * @param {Array} items 
 * @param {Object} dataObject 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.generate=function(items, dataObject){};
/**
 * @param {mixed} item 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.createHeaderText=function(item){};
/**
 * @param {mixed} item 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.createFooterText=function(item){};
/**
 * @param {mixed} item 
 * @param {mixed} idx 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.createContent=function(item, idx){};
/**
 * @param {mixed} item 
 * @param {mixed} h 
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.createBox=function(item, h){};
/**
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype.buildRendering=function(){};
/**
 * @param {String} title 
 * @private
 * @memberOf dojox.mobile.Carousel
*/
dojox.mobile.Carousel.prototype._setTitleAttr=function(title){};
/**
 * @namespace
*/
dojox.mobile.Carousel.domNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 A current page indicator.<br>
 * </blockquote>
 * PageIndicator displays a series of gray and white dots to<br>
 * indicate which page is currently being viewed. It can typically<br>
 * be used with dojox.mobile.SwapView. It is also internally used<br>
 * in dojox.mobile.Carousel.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Contained
 * @returns {dojox.mobile.PageIndicator} new instance
*/
dojox.mobile.PageIndicator=function(){};
/**
 * @namespace
*/
dojox.mobile.PageIndicator.domNode={};
/**
 * @memberOf dojox.mobile.PageIndicator
*/
dojox.mobile.PageIndicator.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the indicator.<br>
 * </blockquote>
 * @memberOf dojox.mobile.PageIndicator
*/
dojox.mobile.PageIndicator.prototype.reset=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.PageIndicator
*/
dojox.mobile.PageIndicator.prototype.onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the given node is a view.<br>
 * </blockquote>
 * @param {mixed} node 
 * @memberOf dojox.mobile.PageIndicator
*/
dojox.mobile.PageIndicator.prototype.isView=function(node){};
/**
 * @memberOf dojox.mobile.PageIndicator
*/
dojox.mobile.PageIndicator.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container that can be flipped horizontally.<br>
 * </blockquote>
 * SwapView is a container widget that represents entire mobile<br>
 * device screen, and can be swiped horizontally. (In dojo-1.6, it<br>
 * was called 'FlippableView'.) SwapView is a subclass of<br>
 * dojox.mobile.View. SwapView allows the user to swipe the screen<br>
 * left or right to move between the views. When SwapView is<br>
 * swiped, it finds an adjacent SwapView to open it.
 * @class
 * @extends dojox.mobile.View
 * @extends dojox.mobile._ScrollableMixin
 * @returns {dojox.mobile.SwapView} new instance
*/
dojox.mobile.SwapView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides dojox.mobile.scrollable.slideTo().<br>
 * </blockquote>
 * @param {Object} to 
 * @param {Number} duration 
 * @param {String} easing 
 * @param {mixed} fake_pos 
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.slideTo=function(to, duration, easing, fake_pos){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides dojox.mobile.scrollable.scrollTo().<br>
 * </blockquote>
 * @param {Object} to 
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.scrollTo=function(to){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls resize() of each child widget.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.resize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the previous view.<br>
 * </blockquote>
 * @param {mixed} node 
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.previousView=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to handle touchStart events.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.onTouchStart=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides dojox.mobile.scrollable.onFlickAnimationEnd().<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.onFlickAnimationEnd=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the next view.<br>
 * </blockquote>
 * @param {mixed} node 
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.nextView=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the given node is a SwapView widget.<br>
 * </blockquote>
 * @param {mixed} node 
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.isSwapView=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the &amp;quot;/dojox/mobile/prevPage&amp;quot; topic is published.<br>
 * </blockquote>
 * @param {Widget} w 
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.handlePrevPage=function(w){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the &amp;quot;/dojox/mobile/nextPage&amp;quot; topic is published.<br>
 * </blockquote>
 * @param {Widget} w 
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.handleNextPage=function(w){};
/**
 * <b>Summary:</b><blockquote>
 *	 Moves to the next or previous view.<br>
 * </blockquote>
 * @param {Number} dir 
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.goTo=function(dir){};
/**
 * @memberOf dojox.mobile.SwapView
*/
dojox.mobile.SwapView.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated checkbox widget that can be in two states (checked or not).<br>
 * </blockquote>
 * @class
 * @extends dojox.mobile.ToggleButton
 * @extends dijit.form._CheckBoxMixin
 * @returns {dojox.mobile.CheckBox} new instance
*/
dojox.mobile.CheckBox=function(){};
/**
 * @memberOf dojox.mobile.CheckBox
*/
dojox.mobile.CheckBox.prototype.buildRendering=function(){};
/**
 * @private
 * @memberOf dojox.mobile.CheckBox
*/
dojox.mobile.CheckBox.prototype._setTypeAttr=function(){};
/**
 * @private
 * @memberOf dojox.mobile.CheckBox
*/
dojox.mobile.CheckBox.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated button widget that can be in two states (checked or not).<br>
 *	 Can be base class for things like tabs or checkbox or radio buttons<br>
 * </blockquote>
 * @class
 * @extends dojox.mobile.Button
 * @extends dijit.form._ToggleButtonMixin
 * @returns {dojox.mobile.ToggleButton} new instance
*/
dojox.mobile.ToggleButton=function(){};
/**
 * @private
 * @memberOf dojox.mobile.ToggleButton
*/
dojox.mobile.ToggleButton.prototype._setCheckedAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated auto-completing text box widget<br>
 * </blockquote>
 * @class
 * @extends dojox.mobile.TextBox
 * @extends dijit.form._AutoCompleterMixin
 * @returns {dojox.mobile.ComboBox} new instance
*/
dojox.mobile.ComboBox=function(){};
/**
 * @memberOf dojox.mobile.ComboBox
*/
dojox.mobile.ComboBox.dropDown=null;
/**
 * @memberOf dojox.mobile.ComboBox
*/
dojox.mobile.ComboBox.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Opens the dropdown for this widget.   To be called only when this.dropDown<br>
 *	 has been created and is ready to display (ie, it's data is loaded).<br>
 * </blockquote>
 * @memberOf dojox.mobile.ComboBox
*/
dojox.mobile.ComboBox.prototype.openDropDown=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.ComboBox
*/
dojox.mobile.ComboBox.prototype.onInput=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Closes the drop down on this widget<br>
 * </blockquote>
 * @memberOf dojox.mobile.ComboBox
*/
dojox.mobile.ComboBox.prototype.closeDropDown=function(){};
/**
 * @private
 * @memberOf dojox.mobile.ComboBox
*/
dojox.mobile.ComboBox.prototype._throttleOpenClose=function(){};
/**
 * @param {mixed} v 
 * @private
 * @memberOf dojox.mobile.ComboBox
*/
dojox.mobile.ComboBox.prototype._setListAttr=function(v){};
/**
 * @private
 * @memberOf dojox.mobile.ComboBox
*/
dojox.mobile.ComboBox.prototype._onFocus=function(){};
/**
 * @param {Event} e 
 * @private
 * @memberOf dojox.mobile.ComboBox
*/
dojox.mobile.ComboBox.prototype._onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated base class for textbox form inputs<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit.form._FormValueMixin
 * @extends dijit.form._TextBoxMixin
 * @returns {dojox.mobile.TextBox} new instance
*/
dojox.mobile.TextBox=function(){};
/**
 * @memberOf dojox.mobile.TextBox
*/
dojox.mobile.TextBox.prototype.postCreate=function(){};
/**
 * @memberOf dojox.mobile.TextBox
*/
dojox.mobile.TextBox.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus-less menu for internal use in `dijit.form.ComboBox`<br>
 *	 Abstract methods that must be defined externally:<br>
 *	 onChange: item was explicitly chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)<br>
 *	 onPage: next(1) or previous(-1) button pressed<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @extends dojox.mobile._ListTouchMixin
 * @extends dijit.form._ComboBoxMenuMixin
 * @returns {dojox.mobile._ComboBoxMenu} new instance
*/
dojox.mobile._ComboBoxMenu=function(){};
/**
 * @namespace
*/
dojox.mobile._ComboBoxMenu.scrollable={};
/**
 * @memberOf dojox.mobile._ComboBoxMenu
*/
dojox.mobile._ComboBoxMenu.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add selected CSS<br>
 * </blockquote>
 * @param {DomNode} node 
 * @memberOf dojox.mobile._ComboBoxMenu
*/
dojox.mobile._ComboBoxMenu.prototype.onSelect=function(node){};
/**
 * @memberOf dojox.mobile._ComboBoxMenu
*/
dojox.mobile._ComboBoxMenu.prototype.onOpen=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove selected CSS<br>
 * </blockquote>
 * @param {DomNode} node 
 * @memberOf dojox.mobile._ComboBoxMenu
*/
dojox.mobile._ComboBoxMenu.prototype.onDeselect=function(node){};
/**
 * @memberOf dojox.mobile._ComboBoxMenu
*/
dojox.mobile._ComboBoxMenu.prototype.onClose=function(){};
/**
 * @memberOf dojox.mobile._ComboBoxMenu
*/
dojox.mobile._ComboBoxMenu.prototype.destroyRendering=function(){};
/**
 * @memberOf dojox.mobile._ComboBoxMenu
*/
dojox.mobile._ComboBoxMenu.prototype.buildRendering=function(){};
/**
 * @private
 * @memberOf dojox.mobile._ComboBoxMenu
*/
dojox.mobile._ComboBoxMenu.prototype._createMenuItem=function(){};
/**
 * @memberOf dojox.mobile._ComboBoxMenu.scrollable
*/
dojox.mobile._ComboBoxMenu.scrollable.prototype.resize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus-less menu to handle touch events consistently<br>
 *	 Abstract methods that must be defined externally:<br>
 *	 onClick: item was chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)<br>
 * </blockquote>
 * @class
 * @extends dijit.form._ListBase
 * @private
 * @returns {dojox.mobile._ListTouchMixin} new instance
*/
dojox.mobile._ListTouchMixin=function(){};
/**
 * @memberOf dojox.mobile._ListTouchMixin
*/
dojox.mobile._ListTouchMixin.prototype.postCreate=function(){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dojox.mobile._ListTouchMixin
*/
dojox.mobile._ListTouchMixin.prototype._onClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Detects the screen size and determines if the screen is like<br>
 *	 phone or like tablet. If the result is changed,<br>
 *	 it sets either of the following css class to &amp;lt;html&amp;gt;<br>
 *	 - 'dj_phone'<br>
 *	 - 'dj_tablet'<br>
 *	 and it publishes either of the following events.<br>
 *	 - '/dojox/mobile/screenSize/phone'<br>
 *	 - '/dojox/mobile/screenSize/tablet'<br>
 * </blockquote>
 * @class
 * @returns {dojox.mobile.detectScreenSize} new instance
*/
dojox.mobile.detectScreenSize=function(){};
/**
 * @namespace
*/
dojox.registry={};
/**
 * @param {mixed} node 
*/
dojox.registry.getEnclosingWidget=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget that represents a view that occupies the full screen<br>
 * </blockquote>
 * View acts as a container for any HTML and/or widgets. An entire<br>
 * HTML page can have multiple View widgets and the user can<br>
 * navigate through the views back and forth without page<br>
 * transitions.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Container
 * @extends dijit._Contained
 * @param {mixed} params 
 * @param {mixed} node 
 * @returns {dojox.mobile.View} new instance
*/
dojox.mobile.View=function(params, node){};
/**
 * @namespace
*/
dojox.mobile.View.domNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to force IE to redraw a node since its layout<br>
 *	 code tends to misrender in partial draws.<br>
 * </blockquote>
 * @param {DomNode} node The node to forcibly redraw.
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.wakeUp=function(node){};
/**
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shows this view without a transition animation.<br>
 * </blockquote>
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.show=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls resize() of each child widget.<br>
 * </blockquote>
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.resize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to perform the various types of view transitions, such as fade, slide, and flip.<br>
 * </blockquote>
 * @param {String} moveTo The id of the transition destination view which resides in
 * the current page.<br>
 * If the value has a hash sign ('#') before the id<br>
 * (e.g. #view1) and the dojo.hash module is loaded by the user<br>
 * application, the view transition updates the hash in the<br>
 * browser URL so that the user can bookmark the destination<br>
 * view. In this case, the user can also use the browser's<br>
 * back/forward button to navigate through the views in the<br>
 * browser history.<br>
 * If null, transitions to a blank view.<br>
 * If '#', returns immediately without transition.
 * @param {Number} dir The transition direction. If 1, transition forward. If -1, transition backward.
 * For example, the slide transition slides the view from right to left when dir == 1,<br>
 * and from left to right when dir == -1.
 * @param {String} transition A type of animated transition effect. You can choose from
 * the standard transition types, &quot;slide&quot;, &quot;fade&quot;, &quot;flip&quot;, or<br>
 * from the extended transition types, &quot;cover&quot;, &quot;coverv&quot;,<br>
 * &quot;dissolve&quot;, &quot;reveal&quot;, &quot;revealv&quot;, &quot;scaleIn&quot;,<br>
 * &quot;scaleOut&quot;, &quot;slidev&quot;, &quot;swirl&quot;, &quot;zoomIn&quot;, &quot;zoomOut&quot;. If<br>
 * &quot;none&quot; is specified, transition occurs immediately without<br>
 * animation.
 * @param {Object|null} context Object The object that the callback function will receive as &quot;this&quot;.
 * @param {String|Function} method A callback function that is called when the transition has been finished.
 * A function reference, or name of a function in context.
 * @example
 * Transition backward to a view whose id is "foo" with the slide animation.
 * 	performTransition("foo", -1, "slide");
 * @example
 * Transition forward to a blank view, and then open another page.
 * 	performTransition(null, 1, "slide", null, function(){location.href = href;});
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.performTransition=function(moveTo, dir, transition, context, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to connect to from your application.<br>
 * </blockquote>
 * Called only when this view is shown at startup time.
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.onStartView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to connect to from your application.<br>
 * </blockquote>
 * Called before the leaving transition occurs.
 * @param {mixed} moveTo 
 * @param {mixed} dir 
 * @param {mixed} transition 
 * @param {mixed} context 
 * @param {mixed} method 
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.onBeforeTransitionOut=function(moveTo, dir, transition, context, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to connect to from your application.<br>
 * </blockquote>
 * Called before the arriving transition occurs.
 * @param {mixed} moveTo 
 * @param {mixed} dir 
 * @param {mixed} transition 
 * @param {mixed} context 
 * @param {mixed} method 
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.onBeforeTransitionIn=function(moveTo, dir, transition, context, method){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.onAnimationStart=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.onAnimationEnd=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to connect to from your application.<br>
 * </blockquote>
 * Called after the leaving transition occurs.
 * @param {mixed} moveTo 
 * @param {mixed} dir 
 * @param {mixed} transition 
 * @param {mixed} context 
 * @param {mixed} method 
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.onAfterTransitionOut=function(moveTo, dir, transition, context, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to connect to from your application.<br>
 * </blockquote>
 * Called after the arriving transition occurs.
 * @param {mixed} moveTo 
 * @param {mixed} dir 
 * @param {mixed} transition 
 * @param {mixed} context 
 * @param {mixed} method 
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.onAfterTransitionIn=function(moveTo, dir, transition, context, method){};
/**
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.invokeCallback=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Find the currently showing view from my sibling views.<br>
 * </blockquote>
 * Note that dojox.mobile.currentView is the last shown view.<br>
 * If the page consists of a splitter, there are multiple showing views.
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.getShowingView=function(){};
/**
 * @param {mixed} moveTo 
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.convertToId=function(moveTo){};
/**
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype.buildRendering=function(){};
/**
 * @param {mixed} s 
 * @private
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype._toCls=function(s){};
/**
 * @param {mixed} moveTo 
 * @param {mixed} dir 
 * @param {mixed} transition 
 * @param {mixed} context 
 * @param {mixed} method 
 * @private
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype._saveState=function(moveTo, dir, transition, context, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sanity check for view transition states.<br>
 * </blockquote>
 * Sometimes uninitialization of Views fails after making view transition,<br>
 * and that results in failure of subsequent view transitions.<br>
 * This function does the uninitialization for all the sibling views.
 * @param {DomNode} toNode 
 * @private
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype._fixViewState=function(toNode){};
/**
 * @param {mixed} fromNode 
 * @param {mixed} toNode 
 * @param {mixed} transition 
 * @param {mixed} dir 
 * @private
 * @memberOf dojox.mobile.View
*/
dojox.mobile.View.prototype._doTransition=function(fromNode, toNode, transition, dir){};
/**
 * <b>Summary:</b><blockquote>
 *	 A toggle switch with a sliding knob.<br>
 * </blockquote>
 * Switch is a toggle switch with a sliding knob. You can either<br>
 * tap or slide the knob to toggle the switch. The onStateChanged<br>
 * handler is called when the switch is manipulated.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Contained
 * @returns {dojox.mobile.Switch} new instance
*/
dojox.mobile.Switch=function(){};
/**
 * @namespace
*/
dojox.mobile.Switch.domNode={};
/**
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reset the widget's value to what it was at initialization time<br>
 * </blockquote>
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype.reset=function(){};
/**
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to handle touchStart events.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype.onTouchStart=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to handle touchMove events.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype.onTouchMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to handle touchEnd events.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype.onTouchEnd=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to connect to from your application.<br>
 * </blockquote>
 * Called when the state has been changed.
 * @param {String} newState 
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype.onStateChanged=function(newState){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype.onClick=function(e){};
/**
 * @param {mixed} className 
 * @param {mixed} r 
 * @param {mixed} w 
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype.createRoundMask=function(className, r, w){};
/**
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype.buildRendering=function(){};
/**
 * @param {String} value 
 * @private
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype._setValueAttr=function(value){};
/**
 * @param {String} label 
 * @private
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype._setRightLabelAttr=function(label){};
/**
 * @param {String} label 
 * @private
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype._setLeftLabelAttr=function(label){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to toggle the switch state on the switch<br>
 * </blockquote>
 * @param {String} state The state to toggle, switch 'on' or 'off'
 * @param {Boolean} anim Whether to use animation or not
 * @private
 * @memberOf dojox.mobile.Switch
*/
dojox.mobile.Switch.prototype._changeState=function(state, anim){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to toggle the switch state on the switch<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.mobile.Switch._changeState} new instance
*/
dojox.mobile.Switch._changeState=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple round rectangle container.<br>
 * </blockquote>
 * RoundRect is a simple round rectangle container for any HTML<br>
 * and/or widgets. You can achieve the same appearance by just<br>
 * applying the -webkit-border-radius style to a div tag. However,<br>
 * if you use RoundRect, you can get a round rectangle even on<br>
 * non-CSS3 browsers such as (older) IE.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Container
 * @extends dijit._Contained
 * @returns {dojox.mobile.RoundRect} new instance
*/
dojox.mobile.RoundRect=function(){};
/**
 * @namespace
*/
dojox.mobile.RoundRect.domNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls resize() of each child widget.<br>
 * </blockquote>
 * @memberOf dojox.mobile.RoundRect
*/
dojox.mobile.RoundRect.prototype.resize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to simulate the borderRadius appearance on<br>
 *	 IE, since IE does not support this CSS style.<br>
 * </blockquote>
 * @memberOf dojox.mobile.RoundRect
*/
dojox.mobile.RoundRect.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to simulate the borderRadius appearance on<br>
 *	 IE, since IE does not support this CSS style.<br>
 * </blockquote>
 * @class
 * @returns {dojox.mobile.RoundRect.buildRendering} new instance
*/
dojox.mobile.RoundRect.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A rounded rectangle list.<br>
 * </blockquote>
 * RoundRectList is a rounded rectangle list, which can be used to<br>
 * display a group of items. Each item must be<br>
 * dojox.mobile.ListItem.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Container
 * @extends dijit._Contained
 * @returns {dojox.mobile.RoundRectList} new instance
*/
dojox.mobile.RoundRectList=function(){};
/**
 * @namespace
*/
dojox.mobile.RoundRectList.domNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Selects the given item.<br>
 * </blockquote>
 * @param {ListItem} item 
 * @memberOf dojox.mobile.RoundRectList
*/
dojox.mobile.RoundRectList.prototype.selectItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls resize() of each child widget.<br>
 * </blockquote>
 * @memberOf dojox.mobile.RoundRectList
*/
dojox.mobile.RoundRectList.prototype.resize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to adjust the creation of RoundRectLists on IE.<br>
 *	 Removed undesired styles.<br>
 * </blockquote>
 * @memberOf dojox.mobile.RoundRectList
*/
dojox.mobile.RoundRectList.prototype.redrawBorders=function(){};
/**
 * @memberOf dojox.mobile.RoundRectList
*/
dojox.mobile.RoundRectList.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to connect to from your application.<br>
 * </blockquote>
 * Called when the check state has been changed.
 * @param {Widget} listItem 
 * @param {String} newState 
 * @memberOf dojox.mobile.RoundRectList
*/
dojox.mobile.RoundRectList.prototype.onCheckStateChanged=function(listItem, newState){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deselects the given item.<br>
 * </blockquote>
 * @param {ListItem} item 
 * @memberOf dojox.mobile.RoundRectList
*/
dojox.mobile.RoundRectList.prototype.deselectItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Deselects all the items.<br>
 * </blockquote>
 * @memberOf dojox.mobile.RoundRectList
*/
dojox.mobile.RoundRectList.prototype.deselectAll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to simulate the borderRadius appearance on<br>
 *	 IE, since IE does not support this CSS style.<br>
 * </blockquote>
 * @memberOf dojox.mobile.RoundRectList
*/
dojox.mobile.RoundRectList.prototype.buildRendering=function(){};
/**
 * @param {mixed} widget 
 * @param {Number} [insertIndex] 
 * @memberOf dojox.mobile.RoundRectList
*/
dojox.mobile.RoundRectList.prototype.addChild=function(widget, insertIndex){};
/**
 * @param {mixed} stateful 
 * @private
 * @memberOf dojox.mobile.RoundRectList
*/
dojox.mobile.RoundRectList.prototype._setStatefulAttr=function(stateful){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to simulate the borderRadius appearance on<br>
 *	 IE, since IE does not support this CSS style.<br>
 * </blockquote>
 * @class
 * @returns {dojox.mobile.RoundRectList.buildRendering} new instance
*/
dojox.mobile.RoundRectList.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An edge-to-edge layout list.<br>
 * </blockquote>
 * EdgeToEdgeList is an edge-to-edge layout list, which displays<br>
 * all items in equally sized rows. Each item must be<br>
 * dojox.mobile.ListItem.
 * @class
 * @extends dojox.mobile.RoundRectList
 * @returns {dojox.mobile.EdgeToEdgeList} new instance
*/
dojox.mobile.EdgeToEdgeList=function(){};
/**
 * @memberOf dojox.mobile.EdgeToEdgeList
*/
dojox.mobile.EdgeToEdgeList.prototype.buildRendering=function(){};
/**
 * @class
 * @returns {dojox.mobile.EdgeToEdgeList.buildRendering} new instance
*/
dojox.mobile.EdgeToEdgeList.buildRendering=function(){};
/**
 * @namespace
*/
dojox.mobile.EdgeToEdgeList.buildRendering.domNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 A container widget that holds multiple icons.<br>
 * </blockquote>
 * IconContainer is a container widget that holds multiple icons<br>
 * each of which represents application component.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Container
 * @extends dijit._Contained
 * @returns {dojox.mobile.IconContainer} new instance
*/
dojox.mobile.IconContainer=function(){};
/**
 * @namespace
*/
dojox.mobile.IconContainer.domNode={};
/**
 * @memberOf dojox.mobile.IconContainer
*/
dojox.mobile.IconContainer.prototype.startup=function(){};
/**
 * @param {Widget|Number} widget 
 * @memberOf dojox.mobile.IconContainer
*/
dojox.mobile.IconContainer.prototype.removeChild=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Closes all the icon items.<br>
 * </blockquote>
 * @memberOf dojox.mobile.IconContainer
*/
dojox.mobile.IconContainer.prototype.closeAll=function(){};
/**
 * @memberOf dojox.mobile.IconContainer
*/
dojox.mobile.IconContainer.prototype.buildRendering=function(){};
/**
 * @param {mixed} widget 
 * @param {Number} [insertIndex] 
 * @memberOf dojox.mobile.IconContainer
*/
dojox.mobile.IconContainer.prototype.addChild=function(widget, insertIndex){};
/**
 * @param {mixed} ul 
 * @private
 * @memberOf dojox.mobile.IconContainer
*/
dojox.mobile.IconContainer.prototype._setupSubNodes=function(ul){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container that has a touch scrolling capability.<br>
 * </blockquote>
 * ScrollableView is a subclass of View (=dojox.mobile.View).<br>
 * Unlike the base View class, ScrollableView's domNode always stays<br>
 * at the top of the screen and its height is "100%" of the screen.<br>
 * In this fixed domNode, containerNode scrolls. Browser's default<br>
 * scrolling behavior is disabled, and the scrolling machinery is<br>
 * re-implemented with JavaScript. Thus the user does not need to use the<br>
 * two-finger operation to scroll an inner DIV (containerNode).<br>
 * The main purpose of this widget is to realize fixed-positioned header<br>
 * and/or footer bars.
 * @class
 * @extends dojox.mobile.View
 * @extends dojox.mobile._ScrollableMixin
 * @returns {dojox.mobile.ScrollableView} new instance
*/
dojox.mobile.ScrollableView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls resize() of each child widget.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ScrollableView
*/
dojox.mobile.ScrollableView.prototype.resize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Moves all the children, except header and footer, to<br>
 *	 containerNode.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ScrollableView
*/
dojox.mobile.ScrollableView.prototype.reparent=function(){};
/**
 * @memberOf dojox.mobile.ScrollableView
*/
dojox.mobile.ScrollableView.prototype.postCreate=function(){};
/**
 * @param {mixed} moveTo 
 * @param {mixed} dir 
 * @param {mixed} transition 
 * @param {mixed} context 
 * @param {mixed} method 
 * @memberOf dojox.mobile.ScrollableView
*/
dojox.mobile.ScrollableView.prototype.onAfterTransitionIn=function(moveTo, dir, transition, context, method){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if this is a top-level widget.<br>
 *	 Overrides dojox.mobile.scrollable.<br>
 * </blockquote>
 * @param {mixed} e 
 * @returns {top level widget} -
 * @memberOf dojox.mobile.ScrollableView
*/
dojox.mobile.ScrollableView.prototype.isTopLevel=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides _WidgetBase#getChildren to add local fixed bars,<br>
 *	 which are not under containerNode, to the children array.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ScrollableView
*/
dojox.mobile.ScrollableView.prototype.getChildren=function(){};
/**
 * @memberOf dojox.mobile.ScrollableView
*/
dojox.mobile.ScrollableView.prototype.buildRendering=function(){};
/**
 * @param {mixed} widget 
 * @param {Number} [insertIndex] 
 * @memberOf dojox.mobile.ScrollableView
*/
dojox.mobile.ScrollableView.prototype.addChild=function(widget, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 A very simple content pane to embed an HTML fragment.<br>
 * </blockquote>
 * This widget embeds an HTML fragment and run the parser. onLoad()<br>
 * is called when parsing is done and the content is ready.<br>
 * "dojo/_base/xhr" is in the dependency list. Usually this is not<br>
 * necessary, but there is a case where dojox.mobile custom build<br>
 * does not contain xhr. Note that this widget does not inherit<br>
 * from dijit._Container.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Contained
 * @returns {dojox.mobile.ContentPane} new instance
*/
dojox.mobile.ContentPane=function(){};
/**
 * @memberOf dojox.mobile.ContentPane
*/
dojox.mobile.ContentPane.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calls resize() of each child widget.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ContentPane
*/
dojox.mobile.ContentPane.prototype.resize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub method to allow the application to connect to.<br>
 *	 Called when parsing is done and the content is ready.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ContentPane
*/
dojox.mobile.ContentPane.prototype.onLoad=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A handler called when load completes.<br>
 * </blockquote>
 * @param {String} response 
 * @memberOf dojox.mobile.ContentPane
*/
dojox.mobile.ContentPane.prototype.loadHandler=function(response){};
/**
 * <b>Summary:</b><blockquote>
 *	 An error handler called when load fails.<br>
 * </blockquote>
 * @param {mixed} err 
 * @memberOf dojox.mobile.ContentPane
*/
dojox.mobile.ContentPane.prototype.errorHandler=function(err){};
/**
 * @memberOf dojox.mobile.ContentPane
*/
dojox.mobile.ContentPane.prototype.buildRendering=function(){};
/**
 * @param {String} href 
 * @private
 * @memberOf dojox.mobile.ContentPane
*/
dojox.mobile.ContentPane.prototype._setHrefAttr=function(href){};
/**
 * @param {String|DomNode} data 
 * @private
 * @memberOf dojox.mobile.ContentPane
*/
dojox.mobile.ContentPane.prototype._setContentAttr=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets to generate the list items corresponding to<br>
 *	 the data provider object.<br>
 * </blockquote>
 * By mixing this class into the widgets, the list item nodes are<br>
 * generated as the child nodes of the widget and automatically<br>
 * re-generated whenever the corresponding data items are modified.
 * @class
 * @private
 * @returns {dojox.mobile._DataListMixin} new instance
*/
dojox.mobile._DataListMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the store to use with this widget.<br>
 * </blockquote>
 * @param {mixed} store 
 * @param {mixed} query 
 * @param {mixed} queryOptions 
 * @memberOf dojox.mobile._DataListMixin
*/
dojox.mobile._DataListMixin.prototype.setStore=function(store, query, queryOptions){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetches the data and generates the list items.<br>
 * </blockquote>
 * @memberOf dojox.mobile._DataListMixin
*/
dojox.mobile._DataListMixin.prototype.refresh=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Notification.onSet()<br>
 * </blockquote>
 * @param {Object} item 
 * @param {String} attribute 
 * @param {Object|Array} oldValue 
 * @param {Object|Array} newValue 
 * @memberOf dojox.mobile._DataListMixin
*/
dojox.mobile._DataListMixin.prototype.onSet=function(item, attribute, oldValue, newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Notification.onNew()<br>
 * </blockquote>
 * @param {Object} newItem 
 * @param {Object} [parentInfo] 
 * @memberOf dojox.mobile._DataListMixin
*/
dojox.mobile._DataListMixin.prototype.onNew=function(newItem, parentInfo){};
/**
 * <b>Summary:</b><blockquote>
 *	 An error handler.<br>
 * </blockquote>
 * @param {Object} errorData 
 * @param {Object} request 
 * @memberOf dojox.mobile._DataListMixin
*/
dojox.mobile._DataListMixin.prototype.onError=function(errorData, request){};
/**
 * <b>Summary:</b><blockquote>
 *	 See dojo.data.api.Notification.onDelete()<br>
 * </blockquote>
 * @param {Object} deletedItem 
 * @memberOf dojox.mobile._DataListMixin
*/
dojox.mobile._DataListMixin.prototype.onDelete=function(deletedItem){};
/**
 * <b>Summary:</b><blockquote>
 *	 An handler that is called after the fetch completes.<br>
 * </blockquote>
 * @param {Array} items 
 * @param {Object} request 
 * @memberOf dojox.mobile._DataListMixin
*/
dojox.mobile._DataListMixin.prototype.onComplete=function(items, request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given the data, generates a list of items.<br>
 * </blockquote>
 * @param {Array} items 
 * @param {Object} dataObject 
 * @memberOf dojox.mobile._DataListMixin
*/
dojox.mobile._DataListMixin.prototype.generateList=function(items, dataObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a list item widget.<br>
 * </blockquote>
 * @param {Object} item 
 * @memberOf dojox.mobile._DataListMixin
*/
dojox.mobile._DataListMixin.prototype.createListItem=function(item){};
/**
 * @memberOf dojox.mobile._DataListMixin
*/
dojox.mobile._DataListMixin.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A category header for an edge-to-edge list.<br>
 * </blockquote>
 * @class
 * @extends dojox.mobile.RoundRectCategory
 * @returns {dojox.mobile.EdgeToEdgeCategory} new instance
*/
dojox.mobile.EdgeToEdgeCategory=function(){};
/**
 * @memberOf dojox.mobile.EdgeToEdgeCategory
*/
dojox.mobile.EdgeToEdgeCategory.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A category header for a rounded rectangle list.<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Contained
 * @returns {dojox.mobile.RoundRectCategory} new instance
*/
dojox.mobile.RoundRectCategory=function(){};
/**
 * @namespace
*/
dojox.mobile.RoundRectCategory.domNode={};
/**
 * @memberOf dojox.mobile.RoundRectCategory
*/
dojox.mobile.RoundRectCategory.prototype.buildRendering=function(){};
/**
 * @param {String} label 
 * @private
 * @memberOf dojox.mobile.RoundRectCategory
*/
dojox.mobile.RoundRectCategory.prototype._setLabelAttr=function(label){};
/**
 * <b>Summary:</b><blockquote>
 *	 An enhanced version of EdgeToEdgeList.<br>
 * </blockquote>
 * EdgeToEdgeDataList is an enhanced version of EdgeToEdgeList. It<br>
 * can generate ListItems according to the given dojo.data store.
 * @class
 * @extends dojox.mobile.EdgeToEdgeList
 * @extends dojox.mobile._DataListMixin
 * @returns {dojox.mobile.EdgeToEdgeDataList} new instance
*/
dojox.mobile.EdgeToEdgeDataList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Non-templated TEXTAREA widget with the capability to adjust it's height according to the amount of data.<br>
 * </blockquote>
 * A textarea that dynamically expands/contracts (changing it's height) as<br>
 * the user types, to display all the text without requiring a vertical scroll bar.<br>
 * <br>
 * Takes all the parameters (name, value, etc.) that a vanilla textarea takes.<br>
 * Rows is not supported since this widget adjusts the height.
 * @class
 * @extends dojox.mobile.TextArea
 * @extends dijit.form._ExpandingTextAreaMixin
 * @returns {dojox.mobile.ExpandingTextArea} new instance
 * @example
 * 	&lt;textarea dojoType="dojox.mobile.ExpandingTextArea"&gt;...&lt;/textarea&gt;
*/
dojox.mobile.ExpandingTextArea=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Non-templated TEXTAREA widget.<br>
 * </blockquote>
 * A textarea widget that wraps an HTML TEXTAREA element.<br>
 * Takes all the parameters (name, value, etc.) that a vanilla textarea takes.
 * @class
 * @extends dojox.mobile.TextBox
 * @returns {dojox.mobile.TextArea} new instance
 * @example
 * 	&lt;textarea dojoType="dojox.mobile.TextArea"&gt;...&lt;/textarea&gt;
*/
dojox.mobile.TextArea=function(){};
/**
 * @memberOf dojox.mobile.TextArea
*/
dojox.mobile.TextArea.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.mobile.TextArea
*/
dojox.mobile.TextArea.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A layout container that splits the window horizontally or<br>
 *	 vertically.<br>
 * </blockquote>
 * FixedSplitter is a very simple container widget that layouts its<br>
 * child dom nodes side by side either horizontally or<br>
 * vertically. An example usage of this widget would be to realize<br>
 * the split view on iPad. There is no visual splitter between the<br>
 * children, and there is no function to resize the child panes<br>
 * with drag-and-drop. If you need a visual splitter, you can<br>
 * specify a border of a child dom node with CSS.<br>
 * A child of the widget should be FixedSplitterPane.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Container
 * @extends dijit._Contained
 * @returns {dojox.mobile.FixedSplitter} new instance
 * @example
 * 	&lt;div dojoType="dojox.mobile.FixedSplitter" orientation="H"&gt;
 * 		&lt;div dojoType="dojox.mobile.FixedSplitterPane"
 * 			style="width:200px;border-right:1px solid black;"&gt;
 * 			pane #1 (width=200px)
 * 		&lt;/div&gt;
 * 		&lt;div dojoType="dojox.mobile.FixedSplitterPane"&gt;
 * 			pane #2
 * 		&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.mobile.FixedSplitter=function(){};
/**
 * @memberOf dojox.mobile.FixedSplitter
*/
dojox.mobile.FixedSplitter.prototype.startup=function(){};
/**
 * @memberOf dojox.mobile.FixedSplitter
*/
dojox.mobile.FixedSplitter.prototype.resize=function(){};
/**
 * @memberOf dojox.mobile.FixedSplitter
*/
dojox.mobile.FixedSplitter.prototype.layout=function(){};
/**
 * @memberOf dojox.mobile.FixedSplitter
*/
dojox.mobile.FixedSplitter.prototype.buildRendering=function(){};
/**
 * @param {mixed} widget 
 * @param {Number} [insertIndex] 
 * @memberOf dojox.mobile.FixedSplitter
*/
dojox.mobile.FixedSplitter.prototype.addChild=function(widget, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 A pane widget that is used in a dojox.mobile.FixedSplitter.<br>
 * </blockquote>
 * FixedSplitterPane is a pane widget that is used in a<br>
 * dojox.mobile.FixedSplitter. It is a widget, but can be regarded<br>
 * as a simple &lt;div&gt; element.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Container
 * @extends dijit._Contained
 * @returns {dojox.mobile.FixedSplitterPane} new instance
*/
dojox.mobile.FixedSplitterPane=function(){};
/**
 * @memberOf dojox.mobile.FixedSplitterPane
*/
dojox.mobile.FixedSplitterPane.prototype.resize=function(){};
/**
 * @memberOf dojox.mobile.FixedSplitterPane
*/
dojox.mobile.FixedSplitterPane.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget that represents a navigation bar.<br>
 * </blockquote>
 * Heading is a widget that represents a navigation bar, which<br>
 * usually appears at the top of an application. It usually<br>
 * displays the title of the current view and can contain a<br>
 * navigational control. If you use it with<br>
 * dojox.mobile.ScrollableView, it can also be used as a fixed<br>
 * header bar or a fixed footer bar. In such cases, specify the<br>
 * fixed="top" attribute to be a fixed header bar or the<br>
 * fixed="bottom" attribute to be a fixed footer bar. Heading can<br>
 * have one or more ToolBarButton widgets as its children.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Container
 * @extends dijit._Contained
 * @returns {dojox.mobile.Heading} new instance
*/
dojox.mobile.Heading=function(){};
/**
 * @namespace
*/
dojox.mobile.Heading.labelNode={};
/**
 * @namespace
*/
dojox.mobile.Heading.labelDivNode={};
/**
 * @namespace
*/
dojox.mobile.Heading.domNode={};
/**
 * @namespace
*/
dojox.mobile.Heading.containerNode={};
/**
 * @namespace
*/
dojox.mobile.Heading.backProp={};
/**
 * @memberOf dojox.mobile.Heading
*/
dojox.mobile.Heading.prototype.startup=function(){};
/**
 * @memberOf dojox.mobile.Heading
*/
dojox.mobile.Heading.prototype.resize=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.Heading
*/
dojox.mobile.Heading.prototype.onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given the destination, makes a view transition.<br>
 * </blockquote>
 * @param {mixed} moveTo 
 * @param {mixed} href 
 * @memberOf dojox.mobile.Heading
*/
dojox.mobile.Heading.prototype.goTo=function(moveTo, href){};
/**
 * <b>Summary:</b><blockquote>
 *	 Search for the view widget that contains this widget.<br>
 * </blockquote>
 * @memberOf dojox.mobile.Heading
*/
dojox.mobile.Heading.prototype.findCurrentView=function(){};
/**
 * @memberOf dojox.mobile.Heading
*/
dojox.mobile.Heading.prototype.buildRendering=function(){};
/**
 * @param {String} label 
 * @private
 * @memberOf dojox.mobile.Heading
*/
dojox.mobile.Heading.prototype._setLabelAttr=function(label){};
/**
 * @param {String} back 
 * @private
 * @memberOf dojox.mobile.Heading
*/
dojox.mobile.Heading.prototype._setBackAttr=function(back){};

/**
 * <b>Summary:</b><blockquote>
 *	 Accumulates the given localized resouces in an array and returns<br>
 *	 it.<br>
 * </blockquote>
 * @param {Array} bundle 
*/
dojox.mobile.i18n.registerBundle=function(bundle){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads an nls resouce bundle and returns an array of localized<br>
 *	 resources.<br>
 * </blockquote>
 * @param {String} packageName 
 * @param {String} bundleName 
 * @param {String} [locale] 
*/
dojox.mobile.i18n.load=function(packageName, bundleName, locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 An icon item widget.<br>
 * </blockquote>
 * IconItem represents an item that has an application component<br>
 * and its icon image. You can tap the icon to open the<br>
 * corresponding application component. You can also use the icon<br>
 * to move to a different view by specifying either of the moveTo,<br>
 * href or url parameters.
 * @class
 * @extends dojox.mobile._ItemBase
 * @returns {dojox.mobile.IconItem} new instance
*/
dojox.mobile.IconItem=function(){};
/**
 * @namespace
*/
dojox.mobile.IconItem.subNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Stops shaking the icon.<br>
 * </blockquote>
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.unhighlight=function(){};
/**
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Opens the icon content, or makes a transition.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.open=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub method to allow the application to connect to.<br>
 * </blockquote>
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.onOpen=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.onMouseDownIcon=function(e){};
/**
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.onError=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub method to allow the application to connect to.<br>
 * </blockquote>
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.onClose=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the icon is open.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.isOpen=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Instantiates the icon content.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.instantiateWidget=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.iconClicked=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shakes the icon 10 seconds.<br>
 * </blockquote>
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.highlight=function(){};
/**
 * @param {mixed} s 
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.createTemplate=function(s){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.closeIconClicked=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Closes the icon content.<br>
 * </blockquote>
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.close=function(){};
/**
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype.buildRendering=function(){};
/**
 * @param {String} text 
 * @private
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype._setLabelAttr=function(text){};
/**
 * @param {mixed} icon 
 * @private
 * @returns {icon may be invalid because inheritParams is not called yet} -
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype._setIconAttr=function(icon){};
/**
 * @private
 * @memberOf dojox.mobile.IconItem
*/
dojox.mobile.IconItem.prototype._open_1=function(){};

/**
 * <b>Summary:</b><blockquote>
 *	 A base class for item classes (e.g. ListItem, IconItem, etc.)<br>
 * </blockquote>
 * _ItemBase is a base class for widgets that have capability to<br>
 * make a view transition when clicked.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Container
 * @extends dijit._Contained
 * @private
 * @returns {dojox.mobile._ItemBase} new instance
*/
dojox.mobile._ItemBase=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Performs a view transition.<br>
 * </blockquote>
 * Given a transition destination, this method performs a view<br>
 * transition. This method is typically called when this item<br>
 * is clicked.
 * @param {mixed} moveTo 
 * @param {mixed} href 
 * @param {mixed} url 
 * @param {mixed} scene 
 * @memberOf dojox.mobile._ItemBase
*/
dojox.mobile._ItemBase.prototype.transitionTo=function(moveTo, href, url, scene){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stores the clicked position for later use.<br>
 * </blockquote>
 * Some of the transition animations (e.g. ScaleIn) needs the<br>
 * clicked position.
 * @param {mixed} e 
 * @memberOf dojox.mobile._ItemBase
*/
dojox.mobile._ItemBase.prototype.setTransitionPos=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes this widget in the selected state.<br>
 * </blockquote>
 * Subclass must implement.
 * @memberOf dojox.mobile._ItemBase
*/
dojox.mobile._ItemBase.prototype.select=function(){};
/**
 * @memberOf dojox.mobile._ItemBase
*/
dojox.mobile._ItemBase.prototype.inheritParams=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the parent widget.<br>
 * </blockquote>
 * Almost equivalent to _Contained#getParent, but this method<br>
 * does not cause a script error even if this widget has no<br>
 * parent yet.
 * @memberOf dojox.mobile._ItemBase
*/
dojox.mobile._ItemBase.prototype.getParent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes this widget in the deselected state.<br>
 * </blockquote>
 * Subclass must implement.
 * @memberOf dojox.mobile._ItemBase
*/
dojox.mobile._ItemBase.prototype.deselect=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile._ItemBase
*/
dojox.mobile._ItemBase.prototype.defaultClickAction=function(e){};
/**
 * @class
 * @param {mixed} target 
 * @param {mixed} transitionOptions 
 * @param {mixed} triggerEvent 
 * @returns {dojox.mobile.TransitionEvent} new instance
*/
dojox.mobile.TransitionEvent=function(target, transitionOptions, triggerEvent){};
/**
 * @param {mixed} results 
 * @memberOf dojox.mobile.TransitionEvent
*/
dojox.mobile.TransitionEvent.prototype.endTransition=function(results){};
/**
 * @memberOf dojox.mobile.TransitionEvent
*/
dojox.mobile.TransitionEvent.prototype.dispatch=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An item of either RoundRectList or EdgeToEdgeList.<br>
 * </blockquote>
 * ListItem represents an item of either RoundRectList or<br>
 * EdgeToEdgeList. There are three ways to move to a different<br>
 * view, moveTo, href, and url. You can choose only one of them.
 * @class
 * @extends dojox.mobile._ItemBase
 * @returns {dojox.mobile.ListItem} new instance
*/
dojox.mobile.ListItem=function(){};
/**
 * @namespace
*/
dojox.mobile.ListItem.rightTextNode={};
/**
 * @namespace
*/
dojox.mobile.ListItem.rightIconNode={};
/**
 * @namespace
*/
dojox.mobile.ListItem.labelNode={};
/**
 * @namespace
*/
dojox.mobile.ListItem.domNode={};
/**
 * @namespace
*/
dojox.mobile.ListItem.anchorNode={};
/**
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the arrow icon if necessary.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype.setArrow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes this widget in the selected state.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype.select=function(){};
/**
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype.resize=function(){};
/**
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype.postMixInProperties=function(){};
/**
 * @param {mixed} e 
 * @returns {already selected} -
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype.onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function to connect to from your application.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype.onAnchorLabelClicked=function(e){};
/**
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype.layoutVariableHeight=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes this widget in the deselected state.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype.deselect=function(){};
/**
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype.buildRendering=function(){};
/**
 * @param {String} text 
 * @private
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype._setRightTextAttr=function(text){};
/**
 * @param {String} icon 
 * @private
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype._setRightIconAttr=function(icon){};
/**
 * @param {String} icon 
 * @private
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype._setRightIcon2Attr=function(icon){};
/**
 * @param {String} text 
 * @private
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype._setLabelAttr=function(text){};
/**
 * @param {mixed} icon 
 * @private
 * @returns {icon may be invalid because inheritParams is not called yet} -
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype._setIconAttr=function(icon){};
/**
 * @param {Boolean} checked 
 * @private
 * @memberOf dojox.mobile.ListItem
*/
dojox.mobile.ListItem.prototype._setCheckedAttr=function(checked){};

/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated popup widget that will use either Tooltip or Overlay depending on screen size<br>
 * </blockquote>
 * @class
 * @returns {dojox.mobile.Opener} new instance
*/
dojox.mobile.Opener=function(){};
/**
 * @param {mixed} node 
 * @param {mixed} positions 
 * @memberOf dojox.mobile.Opener
*/
dojox.mobile.Opener.prototype.show=function(node, positions){};
/**
 * @param {DomNode} node 
 * @memberOf dojox.mobile.Opener
*/
dojox.mobile.Opener.prototype.onShow=function(node){};
/**
 * @param {DomNode} node 
 * @param {Anything} v 
 * @memberOf dojox.mobile.Opener
*/
dojox.mobile.Opener.prototype.onHide=function(node, v){};
/**
 * @param {Anything} val 
 * @memberOf dojox.mobile.Opener
*/
dojox.mobile.Opener.prototype.hide=function(val){};
/**
 * @memberOf dojox.mobile.Opener
*/
dojox.mobile.Opener.prototype.buildRendering=function(){};
/**
 * @private
 * @memberOf dojox.mobile.Opener
*/
dojox.mobile.Opener.prototype._resizeCover=function(){};
/**
 * @param {mixed} e 
 * @private
 * @memberOf dojox.mobile.Opener
*/
dojox.mobile.Opener.prototype._onBlur=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated popup bubble widget<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @returns {dojox.mobile.Tooltip} new instance
*/
dojox.mobile.Tooltip=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pop up the tooltip and point to aroundNode using the best position<br>
 * </blockquote>
 * @param {DomNode} aroundNode 
 * @param {Ordered} positions list of positions to try matching up.
 * * before: places drop down before the aroundNode<br>
 * * after: places drop down after the aroundNode<br>
 * * above-centered: drop down goes above aroundNode<br>
 * * below-centered: drop down goes below aroundNode
 * @memberOf dojox.mobile.Tooltip
*/
dojox.mobile.Tooltip.prototype.show=function(aroundNode, positions){};
/**
 * @param {Event} e 
 * @returns {touching outside the overlay area does call hide() by default} -
 * @memberOf dojox.mobile.Tooltip
*/
dojox.mobile.Tooltip.prototype.onBlur=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pop down the tooltip<br>
 * </blockquote>
 * @memberOf dojox.mobile.Tooltip
*/
dojox.mobile.Tooltip.prototype.hide=function(){};
/**
 * @memberOf dojox.mobile.Tooltip
*/
dojox.mobile.Tooltip.prototype.destroy=function(){};
/**
 * @memberOf dojox.mobile.Tooltip
*/
dojox.mobile.Tooltip.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated widget that animates up from the bottom, overlaying the current content<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @returns {dojox.mobile.Overlay} new instance
*/
dojox.mobile.Overlay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Scroll the overlay up into view<br>
 * </blockquote>
 * @param {DomNode} [aroundNode] 
 * @memberOf dojox.mobile.Overlay
*/
dojox.mobile.Overlay.prototype.show=function(aroundNode){};
/**
 * @param {Event} e 
 * @returns {touching outside the overlay area does not call hide()} -
 * @memberOf dojox.mobile.Overlay
*/
dojox.mobile.Overlay.prototype.onBlur=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Scroll the overlay down and then make it invisible<br>
 * </blockquote>
 * @memberOf dojox.mobile.Overlay
*/
dojox.mobile.Overlay.prototype.hide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A progress indication widget.<br>
 * </blockquote>
 * ProgressIndicator is a round spinning graphical representation<br>
 * that indicates the current task is on-going.
 * @class
 * @returns {dojox.mobile.ProgressIndicator} new instance
*/
dojox.mobile.ProgressIndicator=function(){};
/**
 * @namespace
*/
dojox.mobile.ProgressIndicator.domNode={};
/**
 * @memberOf dojox.mobile.ProgressIndicator
*/
dojox.mobile.ProgressIndicator.colors=[];
/**
 * <b>Summary:</b><blockquote>
 *	 Stops the ProgressIndicator spinning.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ProgressIndicator
*/
dojox.mobile.ProgressIndicator.prototype.stop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Starts the ProgressIndicator spinning.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ProgressIndicator
*/
dojox.mobile.ProgressIndicator.prototype.start=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets an indicator icon image file (typically animated GIF).<br>
 *	 If null is specified, restores the default spinner.<br>
 * </blockquote>
 * @param {String} file 
 * @memberOf dojox.mobile.ProgressIndicator
*/
dojox.mobile.ProgressIndicator.prototype.setImage=function(file){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated radiobutton widget that can be in two states (checked or not).<br>
 * </blockquote>
 * @class
 * @extends dojox.mobile.CheckBox
 * @extends dijit.form._RadioButtonMixin
 * @returns {dojox.mobile.RadioButton} new instance
*/
dojox.mobile.RadioButton=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An enhanced version of RoundRectList.<br>
 * </blockquote>
 * RoundRectDataList is an enhanced version of RoundRectList. It<br>
 * can generate ListItems according to the given dojo.data store.
 * @class
 * @extends dojox.mobile.RoundRectList
 * @extends dojox.mobile._DataListMixin
 * @returns {dojox.mobile.RoundRectDataList} new instance
*/
dojox.mobile.RoundRectDataList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for widgets to have a touch scrolling capability.<br>
 * </blockquote>
 * Actual implementation is in scrollable.js.<br>
 * scrollable.js is not a dojo class, but just a collection<br>
 * of functions. This module makes scrollable.js a dojo class.
 * @class
 * @private
 * @returns {dojox.mobile._ScrollableMixin} new instance
*/
dojox.mobile._ScrollableMixin=function(){};
/**
 * @namespace
*/
dojox.mobile._ScrollableMixin.scrollableParams={};
/**
 * @memberOf dojox.mobile._ScrollableMixin
*/
dojox.mobile._ScrollableMixin.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Search for application-specific header or footer.<br>
 * </blockquote>
 * @memberOf dojox.mobile._ScrollableMixin
*/
dojox.mobile._ScrollableMixin.prototype.findAppBars=function(){};
/**
 * @memberOf dojox.mobile._ScrollableMixin
*/
dojox.mobile._ScrollableMixin.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks if the given node is a fixed bar or not.<br>
 * </blockquote>
 * @param {DomNode} node 
 * @param {Boolean} local 
 * @memberOf dojox.mobile._ScrollableMixin
*/
dojox.mobile._ScrollableMixin.prototype.checkFixedBar=function(node, local){};
/**
 * <b>Summary:</b><blockquote>
 *	 A non-templated Slider widget similar to the HTML5 INPUT type=range.<br>
 * </blockquote>
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit.form._FormValueMixin
 * @returns {dojox.mobile.Slider} new instance
*/
dojox.mobile.Slider=function(){};
/**
 * @namespace
*/
dojox.mobile.Slider.valueNode={};
/**
 * @memberOf dojox.mobile.Slider
*/
dojox.mobile.Slider.prototype.postCreate=function(){};
/**
 * @memberOf dojox.mobile.Slider
*/
dojox.mobile.Slider.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so set('value', value) works.<br>
 * </blockquote>
 * @param {Number} value 
 * @param {Boolean} [priorityChange] 
 * @private
 * @returns {don't move images until all the properties are set} -
 * @memberOf dojox.mobile.Slider
*/
dojox.mobile.Slider.prototype._setValueAttr=function(value, priorityChange){};
/**
 * @class
 * @extends dojox.mobile.SpinWheelSlot
 * @returns {dojox.mobile.SpinWheelYearSlot} new instance
*/
dojox.mobile.SpinWheelYearSlot=function(){};
/**
 * @memberOf dojox.mobile.SpinWheelYearSlot
*/
dojox.mobile.SpinWheelYearSlot.prototype.buildRendering=function(){};
/**
 * @class
 * @extends dojox.mobile.SpinWheelSlot
 * @returns {dojox.mobile.SpinWheelMonthSlot} new instance
*/
dojox.mobile.SpinWheelMonthSlot=function(){};
/**
 * @memberOf dojox.mobile.SpinWheelMonthSlot
*/
dojox.mobile.SpinWheelMonthSlot.prototype.buildRendering=function(){};
/**
 * @class
 * @extends dojox.mobile.SpinWheelSlot
 * @returns {dojox.mobile.SpinWheelDaySlot} new instance
*/
dojox.mobile.SpinWheelDaySlot=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A SpinWheel-based date picker widget.<br>
 * </blockquote>
 * SpinWheelDatePicker is a date picker widget. It is a subclass of<br>
 * dojox.mobile.SpinWheel. It has the year, month, and day slots.
 * @class
 * @extends dojox.mobile.SpinWheel
 * @returns {dojox.mobile.SpinWheelDatePicker} new instance
*/
dojox.mobile.SpinWheelDatePicker=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Goes to today.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheelDatePicker
*/
dojox.mobile.SpinWheelDatePicker.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A handler called when the month value is changed.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheelDatePicker
*/
dojox.mobile.SpinWheelDatePicker.prototype.onMonthSet=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A handler called when the day value is changed.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheelDatePicker
*/
dojox.mobile.SpinWheelDatePicker.prototype.onDaySet=function(){};
/**
 * @memberOf dojox.mobile.SpinWheelDatePicker
*/
dojox.mobile.SpinWheelDatePicker.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A value picker widget that has spin wheels.<br>
 * </blockquote>
 * SpinWheel is a value picker component. It is a sectioned wheel<br>
 * that can be used to pick up some values from the wheel slots by<br>
 * spinning them.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Container
 * @extends dijit._Contained
 * @returns {dojox.mobile.SpinWheel} new instance
*/
dojox.mobile.SpinWheel=function(){};
/**
 * @memberOf dojox.mobile.SpinWheel
*/
dojox.mobile.SpinWheel.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the slot values.<br>
 * </blockquote>
 * @param {Array} a 
 * @memberOf dojox.mobile.SpinWheel
*/
dojox.mobile.SpinWheel.prototype.setValue=function(a){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resets the SpinWheel to show the initial values.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheel
*/
dojox.mobile.SpinWheel.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns an array of slot values.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheel
*/
dojox.mobile.SpinWheel.prototype.getValue=function(){};
/**
 * @memberOf dojox.mobile.SpinWheel
*/
dojox.mobile.SpinWheel.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A slot of a SpinWheel.<br>
 * </blockquote>
 * SpinWheelSlot is a slot that is placed in the SpinWheel widget.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Contained
 * @extends dojox.mobile._ScrollableMixin
 * @returns {dojox.mobile.SpinWheelSlot} new instance
*/
dojox.mobile.SpinWheelSlot=function(){};
/**
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.panelNodes=[];
/**
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.items=[];
/**
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides dojox.mobile.scrollable.slideTo().<br>
 * </blockquote>
 * @param {Object} to 
 * @param {Number} duration 
 * @param {String} easing 
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.slideTo=function(to, duration, easing){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the newValue to this slot.<br>
 * </blockquote>
 * @param {mixed} newValue 
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.setValue=function(newValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the initial value using this.value or the first item.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.setInitialValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the color of the specified item as blue.<br>
 * </blockquote>
 * @param {String} value 
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.setColor=function(value){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.resize=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the currently selected value.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.getValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides dojox.mobile.scrollable.getSpeed().<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.getSpeed=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the key for the currently selected value.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.getKey=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets a panel that contains the currently selected item.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.getCenterPanel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the currently selected item.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.getCenterItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes the specified items grayed out.<br>
 * </blockquote>
 * @param {Array} values 
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.disableValues=function(values){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides dojox.mobile.scrollable.calcSpeed().<br>
 * </blockquote>
 * @param {Number} d 
 * @param {Number} t 
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.calcSpeed=function(d, t){};
/**
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides dojox.mobile.scrollable.adjustDestination().<br>
 * </blockquote>
 * @param {mixed} to 
 * @param {mixed} pos 
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.adjustDestination=function(to, pos){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adjusts the position of slot panels.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheelSlot
*/
dojox.mobile.SpinWheelSlot.prototype.adjust=function(){};

/**
 * <b>Summary:</b><blockquote>
 *	 A SpinWheel-based time picker widget.<br>
 * </blockquote>
 * SpinWheelTimePicker is a time picker widget. It is a subclass of<br>
 * dojox.mobile.SpinWheel. It has the hour and minute slots.
 * @class
 * @extends dojox.mobile.SpinWheel
 * @returns {dojox.mobile.SpinWheelTimePicker} new instance
*/
dojox.mobile.SpinWheelTimePicker=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Goes to now.<br>
 * </blockquote>
 * @memberOf dojox.mobile.SpinWheelTimePicker
*/
dojox.mobile.SpinWheelTimePicker.prototype.reset=function(){};
/**
 * @memberOf dojox.mobile.SpinWheelTimePicker
*/
dojox.mobile.SpinWheelTimePicker.prototype.buildRendering=function(){};
/**
 * @namespace
*/
dojox.mobile.SwapView.domNode={};

/**
 * <b>Summary:</b><blockquote>
 *	 A button widget that is placed in the TabBar widget.<br>
 * </blockquote>
 * TabBarButton is a button that is placed in the TabBar widget. It<br>
 * is a subclass of dojox.mobile._ItemBase just like ListItem or<br>
 * IconItem. So, unlike Button, it has similar capability as<br>
 * ListItem or IconItem, such as icon support, transition, etc.
 * @class
 * @extends dojox.mobile._ItemBase
 * @returns {dojox.mobile.TabBarButton} new instance
*/
dojox.mobile.TabBarButton=function(){};
/**
 * @namespace
*/
dojox.mobile.TabBarButton.box={};
/**
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes this widget in the selected state.<br>
 * </blockquote>
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype.select=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype.onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overrides dojox.mobile._ItemBase.inheritParams().<br>
 * </blockquote>
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype.inheritParams=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes this widget in the deselected state.<br>
 * </blockquote>
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype.deselect=function(){};
/**
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype.buildRendering=function(){};
/**
 * @param {String} text 
 * @private
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype._setLabelAttr=function(text){};
/**
 * @param {mixed} pos 
 * @private
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype._setIconPos2Attr=function(pos){};
/**
 * @param {mixed} pos 
 * @private
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype._setIconPos1Attr=function(pos){};
/**
 * @param {mixed} icon 
 * @private
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype._setIcon2Attr=function(icon){};
/**
 * @param {mixed} icon 
 * @private
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype._setIcon1Attr=function(icon){};
/**
 * @param {mixed} icon 
 * @param {mixed} pos 
 * @param {mixed} num 
 * @param {mixed} sel 
 * @private
 * @memberOf dojox.mobile.TabBarButton
*/
dojox.mobile.TabBarButton.prototype._setIcon=function(icon, pos, num, sel){};
/**
 * @namespace
*/
dojox.mobile.TabBarButton.srcNodeRef={};
/**
 * <b>Summary:</b><blockquote>
 *	 A bar widget that has buttons to control visibility of views.<br>
 * </blockquote>
 * TabBar is a container widget that has typically multiple<br>
 * TabBarButtons which controls visibility of views. It can be used<br>
 * as a tab container.
 * @class
 * @extends dijit._WidgetBase
 * @extends dijit._Container
 * @extends dijit._Contained
 * @returns {dojox.mobile.TabBar} new instance
*/
dojox.mobile.TabBar=function(){};
/**
 * @namespace
*/
dojox.mobile.TabBar.domNode={};
/**
 * @namespace
*/
dojox.mobile.TabBar.containerNode={};
/**
 * @memberOf dojox.mobile.TabBar
*/
dojox.mobile.TabBar.prototype.startup=function(){};
/**
 * @param {mixed} size 
 * @memberOf dojox.mobile.TabBar
*/
dojox.mobile.TabBar.prototype.resize=function(size){};
/**
 * @memberOf dojox.mobile.TabBar
*/
dojox.mobile.TabBar.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A button widget that is placed in the Heading widget.<br>
 * </blockquote>
 * ToolBarButton is a button that is placed in the Heading<br>
 * widget. It is a subclass of dojox.mobile._ItemBase just like<br>
 * ListItem or IconItem. So, unlike Button, it has basically the<br>
 * same capability as ListItem or IconItem, such as icon support,<br>
 * transition, etc.
 * @class
 * @extends dojox.mobile._ItemBase
 * @returns {dojox.mobile.ToolBarButton} new instance
*/
dojox.mobile.ToolBarButton=function(){};
/**
 * @namespace
*/
dojox.mobile.ToolBarButton.domNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes this widget in the selected state.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ToolBarButton
*/
dojox.mobile.ToolBarButton.prototype.select=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.mobile.ToolBarButton
*/
dojox.mobile.ToolBarButton.prototype.onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Makes this widget in the deselected state.<br>
 * </blockquote>
 * @memberOf dojox.mobile.ToolBarButton
*/
dojox.mobile.ToolBarButton.prototype.deselect=function(){};
/**
 * @memberOf dojox.mobile.ToolBarButton
*/
dojox.mobile.ToolBarButton.prototype.buildRendering=function(){};
/**
 * @param {String} text 
 * @private
 * @memberOf dojox.mobile.ToolBarButton
*/
dojox.mobile.ToolBarButton.prototype._setLabelAttr=function(text){};
/**
 * @param {String} btnClass 
 * @private
 * @memberOf dojox.mobile.ToolBarButton
*/
dojox.mobile.ToolBarButton.prototype._setBtnClassAttr=function(btnClass){};
/**
 * <b>Summary:</b><blockquote>
 *	 A singleton class that controlls view transition.<br>
 * </blockquote>
 * This class listens to the "startTransition" events and performs<br>
 * view transitions. If the transition destination is an external<br>
 * view specified with the url parameter, retrieves the view<br>
 * content and parses it to create a new target view.
 * @class
 * @returns {dojox.mobile.ViewController} new instance
*/
dojox.mobile.ViewController=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A handler that performs view transition.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @memberOf dojox.mobile.ViewController
*/
dojox.mobile.ViewController.prototype.onStartTransition=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Searches for the currently showing view.<br>
 * </blockquote>
 * @param {mixed} moveTo 
 * @param {mixed} src 
 * @returns {TODO:1.8 may not return an expected result especially when views are nested} -
 * @memberOf dojox.mobile.ViewController
*/
dojox.mobile.ViewController.prototype.findCurrentView=function(moveTo, src){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parses the given view content.<br>
 * </blockquote>
 * If the content is html fragment, constructs dom tree with it<br>
 * and runs the parser. If the content is json data, passes it<br>
 * to _instantiate().
 * @param {mixed} text 
 * @param {mixed} id 
 * @private
 * @memberOf dojox.mobile.ViewController
*/
dojox.mobile.ViewController.prototype._parse=function(text, id){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given the evaluated json data, does the same thing as what<br>
 *	 the parser does.<br>
 * </blockquote>
 * @param {Object} obj 
 * @param {DomNode} node 
 * @param {Widget} parent 
 * @private
 * @memberOf dojox.mobile.ViewController
*/
dojox.mobile.ViewController.prototype._instantiate=function(obj, node, parent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Factory method that instantiates a new data model that view<br>
 *	 components may bind to.<br>
 * </blockquote>
 * Factory method that returns a client-side data model, which is a<br>
 * tree of dojo.Stateful objects matching the initial data structure<br>
 * passed as input:<br>
 * - The mixin property "data" is used to provide a plain JavaScript<br>
 * object directly representing the data structure.<br>
 * - The mixin property "store", along with an optional mixin property<br>
 * "query", is used to provide a data store to query to obtain the<br>
 * initial data.<br>
 * This function returns an immediate dojox.mvc.StatefulModel instance or<br>
 * a Promise for such an instance as follows:<br>
 * - if args.data: returns immediate<br>
 * - if args.store:<br>
 * - if store returns immediate: this function returns immediate<br>
 * - if store returns a Promise: this function returns a model<br>
 * Promise
 * @param {Object} args The mixin properties.
*/
dojox.mvc.newStatefulModel=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Bind the values at the sources specified in the first argument<br>
 *	 array such that a composing function in the second argument is<br>
 *	 called when any of the values changes.<br>
 * </blockquote>
 * @param {dojo.Stateful[]} sourceBindArray The array of dojo.Stateful objects to watch values changes on.
 * @param {Function} func The composing function that is called when any of the source
 * values changes.<br>
*/
dojox.mvc.bindInputs=function(sourceBindArray, func){};
/**
 * <b>Summary:</b><blockquote>
 *	 Bind the specified property of the target to the specified<br>
 *	 property of the source with the supplied transformation.<br>
 * </blockquote>
 * @param {dojo.Stateful} source The source dojo.Stateful object for the bind.
 * @param {String} sourceProp The name of the source's property whose change triggers the bind.
 * @param {dojo.Stateful} target The target dojo.Stateful object for the bind whose
 * property will be updated with the result of the function.
 * @param {String} targetProp The name of the target's property to be updated with the
 * result of the function.
 * @param {Function} [func] The optional calculation to be performed to obtain the target
 * property value.
 * @param {Boolean} [bindOnlyIfUnequal] Whether the bind notification should happen only if the old and
 * new values are unequal (optional, defaults to false).<br>
*/
dojox.mvc.bind=function(source, sourceProp, target, targetProp, func, bindOnlyIfUnequal){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides the ability for dijits or custom view components to become<br>
 *	 data binding aware.<br>
 * </blockquote>
 * Data binding awareness enables dijits or other view layer<br>
 * components to bind to locations within a client-side data model,<br>
 * which is commonly an instance of the dojox.mvc.StatefulModel class. A<br>
 * bind is a bi-directional update mechanism which is capable of<br>
 * synchronizing value changes between the bound dijit or other view<br>
 * component and the specified location within the data model, as well<br>
 * as changes to other properties such as "valid", "required",<br>
 * "readOnly" etc.<br>
 * <br>
 * The data binding is commonly specified declaratively via the "ref"<br>
 * property in the "data-dojo-props" attribute value.<br>
 * <br>
 * Consider the following simple example:<br>
 * <br>
 * 	&lt;script&gt;<br>
 * 		var model;<br>
 * 		require(["dijit/StatefulModel", "dojo/parser"], function(StatefulModel, parser){<br>
 * 			model = new StatefulModel({ data : {<br>
 * 				hello : "Hello World"<br>
 * 			}});<br>
 * 			parser.parse();<br>
 * 		});<br>
 * 	&lt;/script&gt;<br>
 * <br>
 * 	&lt;input id="hello1" data-dojo-type="dijit.form.TextBox"<br>
 * 		data-dojo-props="ref: model.hello"&gt;&lt;/input&gt;<br>
 * <br>
 * 	&lt;input id="hello2" data-dojo-type="dijit.form.TextBox"<br>
 * 		data-dojo-props="ref: model.hello"&gt;&lt;/input&gt;<br>
 * <br>
 * In the above example, both dijit.form.TextBox instances (with IDs<br>
 * "hello1" and "hello2" respectively) are bound to the same reference<br>
 * location in the data model i.e. "hello" via the "ref" expression<br>
 * "model.hello". Both will have an initial value of "Hello World".<br>
 * Thereafter, a change in the value of either of the two textboxes<br>
 * will cause an update of the value in the data model at location<br>
 * "hello" which will in turn cause a matching update of the value in<br>
 * the other textbox.
 * @private
*/
dojox.mvc._DataBindingMixin=function(){};
/**
 * @private
*/
dojox.mvc._Container=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The first-class native JavaScript data model based on dojo.Stateful<br>
 *	 that wraps any data structure(s) that may be relevant for a view,<br>
 *	 a view portion, a dijit or any custom view layer component.<br>
 * </blockquote>
 * A data model is effectively instantiated with a plain JavaScript<br>
 * object which specifies the initial data structure for the model.<br>
 * <br>
 * 	var struct = {<br>
 * 		order	: "abc123",<br>
 * 		shipto	: {<br>
 * 			address	: "123 Example St, New York, NY",<br>
 * 			phone	: "212-000-0000"<br>
 * 		},<br>
 * 		items : [<br>
 * 			{ part : "x12345", num : 1 },<br>
 * 			{ part : "n09876", num : 3 }<br>
 * 		]<br>
 * 	};<br>
 * <br>
 * 	var model = dojox.mvc.newStatefulModel({ data : struct });<br>
 * <br>
 * The simple example above shows an inline plain JavaScript object<br>
 * illustrating the data structure to prime the model with, however<br>
 * the underlying data may be made available by other means, such as<br>
 * from the results of a dojo.store or dojo.data query.<br>
 * <br>
 * To deal with stores providing immediate values or Promises, a<br>
 * factory method for model instantiation is provided. This method<br>
 * will either return an immediate model or a model Promise depending<br>
 * on the nature of the store.<br>
 * <br>
 * 	var model = dojox.mvc.newStatefulModel({ store: someStore });<br>
 * <br>
 * The created data model has the following properties:<br>
 * <br>
 * - It enables dijits or custom components in the view to "bind" to<br>
 * data within the model. A bind creates a bi-directional update<br>
 * mechanism between the bound view and the underlying data:<br>
 * - The data model is "live" data i.e. it maintains any updates<br>
 * driven by the view on the underlying data.<br>
 * - The data model issues updates to portions of the view if the<br>
 * data they bind to is updated in the model. For example, if two<br>
 * dijits are bound to the same part of a data model, updating the<br>
 * value of one in the view will cause the data model to issue an<br>
 * update to the other containing the new value.<br>
 * <br>
 * - The data model internally creates a tree of dojo.Stateful<br>
 * objects that matches the input, which is effectively a plain<br>
 * JavaScript object i.e. "pure data". This tree allows dijits or<br>
 * other view components to bind to any node within the data model.<br>
 * Typically, dijits with simple values bind to leaf nodes of the<br>
 * datamodel, whereas containers bind to internal nodes of the<br>
 * datamodel. For example, a datamodel created using the object below<br>
 * will generate the dojo.Stateful tree as shown:<br>
 * <br>
 * 	var model = dojox.mvc.newStatefulModel({ data : {<br>
 * 		prop1	: "foo",<br>
 * 		prop2	: {<br>
 * 			leaf1	: "bar",<br>
 * 			leaf2	: "baz"<br>
 * 		}<br>
 * 	}});<br>
 * <br>
 * 	// The created dojo.Stateful tree is illustrated below (all nodes are dojo.Stateful objects)<br>
 * 	//<br>
 * 	//					o  (root node)<br>
 * 	//				   / \<br>
 * 	//	 (prop1 node) o   o (prop2 node)<br>
 * 	//					 / \<br>
 * 	//	   (leaf1 node)	o   o (leaf2 node)<br>
 * 	//<br>
 * 	// The root node is accessed using the expression "model" (the var name above). The prop1<br>
 * 	// node is accessed using the expression "model.prop1", the leaf2 node is accessed using<br>
 * 	// the expression "model.prop2.leaf2" and so on.<br>
 * <br>
 * - Each of the dojo.Stateful nodes in the model may store data as well<br>
 * as associated "meta-data", which includes things such as whether<br>
 * the data is required or readOnly etc. This meta-data differs from<br>
 * that maintained by, for example, an individual dijit in that this<br>
 * is maintained by the datamodel and may therefore be affected by<br>
 * datamodel-level constraints that span multiple dijits or even<br>
 * additional criteria such as server-side computations.<br>
 * <br>
 * - When the model is backed by a dojo.store or dojo.data query, the<br>
 * client-side updates can be persisted once the client is ready to<br>
 * "submit" the changes (which may include both value changes or<br>
 * structural changes - adds/deletes). The datamodel allows control<br>
 * over when the underlying data is persisted i.e. this can be more<br>
 * incremental or batched per application needs.<br>
 * <br>
 * There need not be a one-to-one association between a datamodel and<br>
 * a view or portion thereof. For example, multiple datamodels may<br>
 * back the dijits in a view. Indeed, this may be useful where the<br>
 * binding data comes from a number of data sources or queries, for<br>
 * example. Just as well, dijits from multiple portions of the view<br>
 * may be bound to a single datamodel.<br>
 * <br>
 * Finally, requiring this class also enables all dijits to become data<br>
 * binding aware. The data binding is commonly specified declaratively<br>
 * via the "ref" property in the "data-dojo-props" attribute value.<br>
 * <br>
 * To illustrate, the following is the "Hello World" of such data-bound<br>
 * widget examples:<br>
 * <br>
 * 	&lt;script&gt;<br>
 * 		dojo.require("dojox.mvc");<br>
 * 		dojo.require("dojo.parser");<br>
 * 		var model;<br>
 * 		dojo.addOnLoad(function(){<br>
 * 			model = dojox.mvc.newStatefulModel({ data : {<br>
 * 				hello : "Hello World"<br>
 * 			}});<br>
 * 			dojo.parser.parse();<br>
 * 		}<br>
 * 	&lt;/script&gt;<br>
 * <br>
 * 	&lt;input id="helloInput" dojoType="dijit.form.TextBox"<br>
 * 		ref="model.hello"&gt;<br>
 * <br>
 * or<br>
 * <br>
 * 	&lt;script&gt;<br>
 * 		var model;<br>
 * 		require(["dojox/mvc", "dojo/parser"], function(dxmvc, parser){<br>
 * 			model = dojox.mvc.newStatefulModel({ data : {<br>
 * 				hello : "Hello World"<br>
 * 			}});<br>
 * 			parser.parse();<br>
 * 		});<br>
 * 	&lt;/script&gt;<br>
 * <br>
 * 	&lt;input id="helloInput" data-dojo-type="dijit.form.TextBox"<br>
 * 		data-dojo-props="ref: 'model.hello'"&gt;<br>
 * <br>
 * Such data binding awareness for dijits is added by extending the<br>
 * dijit._WidgetBase class to include data binding capabilities<br>
 * provided by dojox.mvc._DataBindingMixin, and this class declares a<br>
 * dependency on dojox.mvc._DataBindingMixin.<br>
 * <br>
 * The presence of a data model and the data-binding capabilities<br>
 * outlined above support the flexible development of a number of MVC<br>
 * patterns on the client. As an example, CRUD operations can be<br>
 * supported with minimal application code.
 * @param {Object} args The mixin properties.
*/
dojox.mvc.StatefulModel=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override and save template from body.<br>
 * </blockquote>
 * A repeat is bound to an intermediate dojo.Stateful node corresponding<br>
 * to an array in the data model. Child dijits or custom view components<br>
 * inside it inherit their parent data binding context from it.
 * @param {mixed} params 
 * @param {mixed} srcNodeRef 
*/
dojox.mvc.Repeat=function(params, srcNodeRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple widget that displays templated output, parts of which may<br>
 *	 be data-bound.<br>
 * </blockquote>
 * Simple output example:<br>
 * <br>
 *   &lt;span dojoType="dojox.mvc.Output" ref="model.balance"&gt;<br>
 *	 Your balance is: ${this.value}<br>
 *   &lt;/span&gt;<br>
 * <br>
 * The output widget being data-bound, if the balance changes in the<br>
 * dojox.mvc.StatefulModel, the content within the &lt;span&gt; will be<br>
 * updated accordingly.
 * @param {mixed} params 
 * @param {mixed} srcNodeRef 
*/
dojox.mvc.Output=function(params, srcNodeRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple model-bound container widget with single-node binding to a data model.<br>
 * </blockquote>
 * A group is usually bound to an intermediate dojo.Stateful node in the data model.<br>
 * Child dijits or custom view components inside a group inherit their parent<br>
 * data binding context from it.<br>
*/
dojox.mvc.Group=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container that generates a view based on the data model its bound to.<br>
 * </blockquote>
 * A generate introspects its data binding and creates a view contained in<br>
 * it that allows displaying the bound data. Child dijits or custom view<br>
 * components inside it inherit their parent data binding context from it.<br>
*/
dojox.mvc.Generate=function(){};
/**
 * @class
 * @extends dijit._WidgetBase
 * @private
 * @returns {dojox.mvc._Container} new instance
*/
dojox.mvc._Container=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Does substitution of ${foo+bar} type expressions in template string.<br>
 * </blockquote>
 * @param {mixed} tmpl 
 * @private
 * @memberOf dojox.mvc._Container
*/
dojox.mvc._Container.prototype._exprRepl=function(tmpl){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy the body of this MVC container widget. Also destroys any<br>
 *	 contained widgets.<br>
 * </blockquote>
 * @memberOf dojox.mvc._Container
*/
dojox.mvc._Container.prototype._destroyBody=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parse the body of this MVC container widget.<br>
 * </blockquote>
 * The bodies of MVC containers may be model-bound views generated dynamically.<br>
 * Parse the body, start an contained widgets and attach template nodes for<br>
 * contained widgets as necessary.
 * @memberOf dojox.mvc._Container
*/
dojox.mvc._Container.prototype._createBody=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides the ability for dijits or custom view components to become<br>
 *	 data binding aware.<br>
 * </blockquote>
 * Data binding awareness enables dijits or other view layer<br>
 * components to bind to locations within a client-side data model,<br>
 * which is commonly an instance of the dojox.mvc.StatefulModel class. A<br>
 * bind is a bi-directional update mechanism which is capable of<br>
 * synchronizing value changes between the bound dijit or other view<br>
 * component and the specified location within the data model, as well<br>
 * as changes to other properties such as "valid", "required",<br>
 * "readOnly" etc.<br>
 * <br>
 * The data binding is commonly specified declaratively via the "ref"<br>
 * property in the "data-dojo-props" attribute value.<br>
 * <br>
 * Consider the following simple example:<br>
 * <br>
 * 	&lt;script&gt;<br>
 * 		var model;<br>
 * 		require(["dijit/StatefulModel", "dojo/parser"], function(StatefulModel, parser){<br>
 * 			model = new StatefulModel({ data : {<br>
 * 				hello : "Hello World"<br>
 * 			}});<br>
 * 			parser.parse();<br>
 * 		});<br>
 * 	&lt;/script&gt;<br>
 * <br>
 * 	&lt;input id="hello1" data-dojo-type="dijit.form.TextBox"<br>
 * 		data-dojo-props="ref: model.hello"&gt;&lt;/input&gt;<br>
 * <br>
 * 	&lt;input id="hello2" data-dojo-type="dijit.form.TextBox"<br>
 * 		data-dojo-props="ref: model.hello"&gt;&lt;/input&gt;<br>
 * <br>
 * In the above example, both dijit.form.TextBox instances (with IDs<br>
 * "hello1" and "hello2" respectively) are bound to the same reference<br>
 * location in the data model i.e. "hello" via the "ref" expression<br>
 * "model.hello". Both will have an initial value of "Hello World".<br>
 * Thereafter, a change in the value of either of the two textboxes<br>
 * will cause an update of the value in the data model at location<br>
 * "hello" which will in turn cause a matching update of the value in<br>
 * the other textbox.
 * @class
 * @private
 * @returns {dojox.mvc._DataBindingMixin} new instance
*/
dojox.mvc._DataBindingMixin=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the validity of the data binding.<br>
 * </blockquote>
 * This function is meant to provide an API bridge to the dijit API.<br>
 * Validity of data-bound dijits is a function of multiple concerns:<br>
 * - The validity of the value as ascertained by the data binding<br>
 * and constraints specified in the data model (usually semantic).<br>
 * - The validity of the value as ascertained by the widget itself<br>
 * based on widget constraints (usually syntactic).<br>
 * In order for dijits to function correctly in data-bound<br>
 * environments, it is imperative that their isValid() functions<br>
 * assess the model validity of the data binding via the<br>
 * this.inherited(arguments) hierarchy and declare any values<br>
 * failing the test as invalid.
 * @memberOf dojox.mvc._DataBindingMixin
*/
dojox.mvc._DataBindingMixin.prototype.isValid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update a binding property of the bound widget.<br>
 * </blockquote>
 * @param {The} name binding property name.
 * @param {The} old old value of the binding property.
 * @param {The} current new or current value of the binding property.
 * @param {The} defaultValue optional value to be applied as the current value of the
 * binding property if the current value is null.
 * @param {The} setPropName optional name of a stateful property to set on the bound
 * widget.
 * @param {The} setPropValue value, if an optional name is provided, for the stateful
 * property of the bound widget.
 * @private
 * @memberOf dojox.mvc._DataBindingMixin
*/
dojox.mvc._DataBindingMixin.prototype._updateProperty=function(name, old, current, defaultValue, setPropName, setPropValue){};
/**
 * <b>Summary:</b><blockquote>
 *	 Update this widget's value based on the current binding and<br>
 *	 set up the bindings of all contained widgets so as to refresh<br>
 *	 any relative binding references.<br>
 *	 findWidgets does not return children of widgets so need to also<br>
 *	 update children of widgets which are not bound but may hold widgets which are.<br>
 * </blockquote>
 * @param {The} parentBind binding on the parent of a widget whose children may have bindings
 * which need to be updated.
 * @private
 * @memberOf dojox.mvc._DataBindingMixin
*/
dojox.mvc._DataBindingMixin.prototype._updateChildBindings=function(parentBind){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the data binding to the supplied value, which must be a<br>
 *	 dojo.Stateful node of a data model.<br>
 * </blockquote>
 * Applies the specified data binding to the attached widget.<br>
 * Loses any prior watch registrations on the previously active<br>
 * bind, registers the new one, updates data binds of any contained<br>
 * widgets and also refreshes all associated properties (valid,<br>
 * required etc.)
 * @param {The} name name of the binding property (always &quot;binding&quot;).
 * @param {The} old old dojo.Stateful binding node of the data model.
 * @param {The} current new dojo.Stateful binding node of the data model.
 * @private
 * @memberOf dojox.mvc._DataBindingMixin
*/
dojox.mvc._DataBindingMixin.prototype._updateBinding=function(name, old, current){};
/**
 * <b>Summary:</b><blockquote>
 *	 Given an array of watch handles, unwatch all.<br>
 * </blockquote>
 * @param {The} watchHandles array of watch handles.
 * @private
 * @memberOf dojox.mvc._DataBindingMixin
*/
dojox.mvc._DataBindingMixin.prototype._unwatchArray=function(watchHandles){};
/**
 * <b>Summary:</b><blockquote>
 *	 Calculate and set the dojo.Stateful data binding for the<br>
 *	 associated dijit or custom view component.<br>
 * </blockquote>
 * The declarative data binding reference may be specified in two<br>
 * ways via markup:<br>
 * - For older style documents (non validating), controls may use<br>
 * the "ref" attribute to specify the data binding reference<br>
 * (String).<br>
 * - For validating documents using the new Dojo parser, controls<br>
 * may specify the data binding reference (String) as the "ref"<br>
 * property specified in the data-dojo-props attribute.<br>
 * Once the ref value is obtained using either of the above means,<br>
 * the binding is set up for this control and its required, readOnly<br>
 * etc. properties are refreshed.<br>
 * The data binding may be specified as a direct reference to the<br>
 * dojo.Stateful model node or as a string relative to its DOM<br>
 * parent or another widget.<br>
 * There are three ways in which the data binding node reference is<br>
 * calculated when specified as a string:<br>
 * - If an explicit parent widget is specified, the binding is<br>
 * calculated relative to the parent widget's data binding.<br>
 * - For any dijits that specify a data binding reference,<br>
 * we walk up their DOM hierarchy to obtain the first container<br>
 * dijit that has a data binding set up and use the reference String<br>
 * as a property name relative to the parent's data binding context.<br>
 * - If no such parent is found i.e. for the outermost container<br>
 * dijits that specify a data binding reference, the binding is<br>
 * calculated by treating the reference String as an expression and<br>
 * evaluating it to obtain the dojo.Stateful node in the datamodel.<br>
 * This method throws an Error in these two conditions:<br>
 * - The ref is an expression i.e. outermost bound dijit, but the<br>
 * expression evaluation fails.<br>
 * - The calculated binding turns out to not be an instance of a<br>
 * dojo.Stateful node.
 * @param {The} parentBinding binding of this widget/view component's data-bound parent,
 * if available.
 * @private
 * @returns {nothing to do here} -
 * @memberOf dojox.mvc._DataBindingMixin
*/
dojox.mvc._DataBindingMixin.prototype._setupBinding=function(parentBinding){};
/**
 * @param {mixed} one 
 * @param {mixed} other 
 * @private
 * @memberOf dojox.mvc._DataBindingMixin
*/
dojox.mvc._DataBindingMixin.prototype._isEqual=function(one, other){};
/**
 * <b>Summary:</b><blockquote>
 *	 Get the parent binding by traversing the DOM ancestors to find<br>
 *	 the first enclosing data-bound widget.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.mvc._DataBindingMixin
*/
dojox.mvc._DataBindingMixin.prototype._getParentBindingFromDOM=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Tie data binding initialization into the widget lifecycle, at<br>
 *	 widget startup.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.mvc._DataBindingMixin
*/
dojox.mvc._DataBindingMixin.prototype._dbstartup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container that generates a view based on the data model its bound to.<br>
 * </blockquote>
 * A generate introspects its data binding and creates a view contained in<br>
 * it that allows displaying the bound data. Child dijits or custom view<br>
 * components inside it inherit their parent data binding context from it.
 * @class
 * @extends dojox.mvc._Container
 * @returns {dojox.mvc.Generate} new instance
*/
dojox.mvc.Generate=function(){};
/**
 * @namespace
 * @private
*/
dojox.mvc.Generate._defaultWidgetMapping={};
/**
 * @namespace
 * @private
*/
dojox.mvc.Generate._defaultIdNameMapping={};
/**
 * @namespace
 * @private
*/
dojox.mvc.Generate._defaultClassMapping={};
/**
 * <b>Summary:</b><blockquote>
 *	 Regenerate if the binding changes.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.mvc.Generate
*/
dojox.mvc.Generate.prototype._updateBinding=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Produce a widget for a simple value.<br>
 * </blockquote>
 * @param {The} prop data model property name.
 * @private
 * @memberOf dojox.mvc.Generate
*/
dojox.mvc.Generate.prototype._generateTextBox=function(prop){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a repeating model-bound view.<br>
 * </blockquote>
 * @param {The} binding bound node (a collection/array node) to generate a
 * repeating UI/view for.
 * @param {The} repeatHeading heading to be used for this portion.
 * @private
 * @memberOf dojox.mvc.Generate
*/
dojox.mvc.Generate.prototype._generateRepeat=function(binding, repeatHeading){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a hierarchical model-bound view.<br>
 * </blockquote>
 * @param {The} binding bound (intermediate) node to generate a hierarchical
 * view portion for.
 * @param {The} groupHeading heading to be used for this portion.
 * @param {Whether} hideHeading the heading should be hidden for this portion.
 * @private
 * @memberOf dojox.mvc.Generate
*/
dojox.mvc.Generate.prototype._generateGroup=function(binding, groupHeading, hideHeading){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate the markup for the view associated with this generate<br>
 *	 container.<br>
 * </blockquote>
 * @param {The} binding associated data binding to generate a view for.
 * @param {Whether} hideHeading the property name should be displayed as a heading.
 * @private
 * @memberOf dojox.mvc.Generate
*/
dojox.mvc.Generate.prototype._generateBody=function(binding, hideHeading){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy any existing generated view, recreate it from scratch<br>
 *	 parse the new contents.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.mvc.Generate
*/
dojox.mvc.Generate.prototype._buildContained=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple model-bound container widget with single-node binding to a data model.<br>
 * </blockquote>
 * A group is usually bound to an intermediate dojo.Stateful node in the data model.<br>
 * Child dijits or custom view components inside a group inherit their parent<br>
 * data binding context from it.
 * @class
 * @extends dijit._WidgetBase
 * @returns {dojox.mvc.Group} new instance
*/
dojox.mvc.Group=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple widget that displays templated output, parts of which may<br>
 *	 be data-bound.<br>
 * </blockquote>
 * Simple output example:<br>
 * <br>
 *   &lt;span dojoType="dojox.mvc.Output" ref="model.balance"&gt;<br>
 *	 Your balance is: ${this.value}<br>
 *   &lt;/span&gt;<br>
 * <br>
 * The output widget being data-bound, if the balance changes in the<br>
 * dojox.mvc.StatefulModel, the content within the &lt;span&gt; will be<br>
 * updated accordingly.
 * @class
 * @extends dijit._WidgetBase
 * @returns {dojox.mvc.Output} new instance
*/
dojox.mvc.Output=function(){};
/**
 * @namespace
*/
dojox.mvc.Output.srcNodeRef={};
/**
 * <b>Summary:</b><blockquote>
 *	 Override and refresh output on value change.<br>
 * </blockquote>
 * @param {mixed} name 
 * @param {mixed} value 
 * @memberOf dojox.mvc.Output
*/
dojox.mvc.Output.prototype.set=function(name, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override and save template from body.<br>
 * </blockquote>
 * @param {mixed} params 
 * @param {mixed} srcNodeRef 
 * @memberOf dojox.mvc.Output
*/
dojox.mvc.Output.prototype.postscript=function(params, srcNodeRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 Rebuild output UI if data binding changes.<br>
 * </blockquote>
 * @param {mixed} name 
 * @param {mixed} old 
 * @param {mixed} current 
 * @private
 * @memberOf dojox.mvc.Output
*/
dojox.mvc.Output.prototype._updateBinding=function(name, old, current){};
/**
 * <b>Summary:</b><blockquote>
 *	 Produce the data-bound output.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.mvc.Output
*/
dojox.mvc.Output.prototype._output=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Does substitution of ${foo+bar} type expressions in template string.<br>
 * </blockquote>
 * @param {mixed} tmpl 
 * @private
 * @memberOf dojox.mvc.Output
*/
dojox.mvc.Output.prototype._exprRepl=function(tmpl){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override and save template from body.<br>
 * </blockquote>
 * A repeat is bound to an intermediate dojo.Stateful node corresponding<br>
 * to an array in the data model. Child dijits or custom view components<br>
 * inside it inherit their parent data binding context from it.
 * @class
 * @extends dojox.mvc._Container
 * @returns {dojox.mvc.Repeat} new instance
*/
dojox.mvc.Repeat=function(){};
/**
 * @namespace
*/
dojox.mvc.Repeat.srcNodeRef={};
/**
 * @param {mixed} params 
 * @param {mixed} srcNodeRef 
 * @memberOf dojox.mvc.Repeat
*/
dojox.mvc.Repeat.prototype.postscript=function(params, srcNodeRef){};
/**
 * <b>Summary:</b><blockquote>
 *	 Rebuild repeating UI if data binding changes.<br>
 * </blockquote>
 * @param {mixed} name 
 * @param {mixed} old 
 * @param {mixed} current 
 * @private
 * @memberOf dojox.mvc.Repeat
*/
dojox.mvc.Repeat.prototype._updateBinding=function(name, old, current){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the watch handle when binding changes.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.mvc.Repeat
*/
dojox.mvc.Repeat.prototype._updateAddRemoveWatch=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroy any existing contained view, recreate the repeating UI<br>
 *	 markup and parse the new contents.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.mvc.Repeat
*/
dojox.mvc.Repeat.prototype._buildContained=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The first-class native JavaScript data model based on dojo.Stateful<br>
 *	 that wraps any data structure(s) that may be relevant for a view,<br>
 *	 a view portion, a dijit or any custom view layer component.<br>
 * </blockquote>
 * A data model is effectively instantiated with a plain JavaScript<br>
 * object which specifies the initial data structure for the model.<br>
 * <br>
 * 	var struct = {<br>
 * 		order	: "abc123",<br>
 * 		shipto	: {<br>
 * 			address	: "123 Example St, New York, NY",<br>
 * 			phone	: "212-000-0000"<br>
 * 		},<br>
 * 		items : [<br>
 * 			{ part : "x12345", num : 1 },<br>
 * 			{ part : "n09876", num : 3 }<br>
 * 		]<br>
 * 	};<br>
 * <br>
 * 	var model = dojox.mvc.newStatefulModel({ data : struct });<br>
 * <br>
 * The simple example above shows an inline plain JavaScript object<br>
 * illustrating the data structure to prime the model with, however<br>
 * the underlying data may be made available by other means, such as<br>
 * from the results of a dojo.store or dojo.data query.<br>
 * <br>
 * To deal with stores providing immediate values or Promises, a<br>
 * factory method for model instantiation is provided. This method<br>
 * will either return an immediate model or a model Promise depending<br>
 * on the nature of the store.<br>
 * <br>
 * 	var model = dojox.mvc.newStatefulModel({ store: someStore });<br>
 * <br>
 * The created data model has the following properties:<br>
 * <br>
 * - It enables dijits or custom components in the view to "bind" to<br>
 * data within the model. A bind creates a bi-directional update<br>
 * mechanism between the bound view and the underlying data:<br>
 * - The data model is "live" data i.e. it maintains any updates<br>
 * driven by the view on the underlying data.<br>
 * - The data model issues updates to portions of the view if the<br>
 * data they bind to is updated in the model. For example, if two<br>
 * dijits are bound to the same part of a data model, updating the<br>
 * value of one in the view will cause the data model to issue an<br>
 * update to the other containing the new value.<br>
 * <br>
 * - The data model internally creates a tree of dojo.Stateful<br>
 * objects that matches the input, which is effectively a plain<br>
 * JavaScript object i.e. "pure data". This tree allows dijits or<br>
 * other view components to bind to any node within the data model.<br>
 * Typically, dijits with simple values bind to leaf nodes of the<br>
 * datamodel, whereas containers bind to internal nodes of the<br>
 * datamodel. For example, a datamodel created using the object below<br>
 * will generate the dojo.Stateful tree as shown:<br>
 * <br>
 * 	var model = dojox.mvc.newStatefulModel({ data : {<br>
 * 		prop1	: "foo",<br>
 * 		prop2	: {<br>
 * 			leaf1	: "bar",<br>
 * 			leaf2	: "baz"<br>
 * 		}<br>
 * 	}});<br>
 * <br>
 * 	// The created dojo.Stateful tree is illustrated below (all nodes are dojo.Stateful objects)<br>
 * 	//<br>
 * 	//					o  (root node)<br>
 * 	//				   / \<br>
 * 	//	 (prop1 node) o   o (prop2 node)<br>
 * 	//					 / \<br>
 * 	//	   (leaf1 node)	o   o (leaf2 node)<br>
 * 	//<br>
 * 	// The root node is accessed using the expression "model" (the var name above). The prop1<br>
 * 	// node is accessed using the expression "model.prop1", the leaf2 node is accessed using<br>
 * 	// the expression "model.prop2.leaf2" and so on.<br>
 * <br>
 * - Each of the dojo.Stateful nodes in the model may store data as well<br>
 * as associated "meta-data", which includes things such as whether<br>
 * the data is required or readOnly etc. This meta-data differs from<br>
 * that maintained by, for example, an individual dijit in that this<br>
 * is maintained by the datamodel and may therefore be affected by<br>
 * datamodel-level constraints that span multiple dijits or even<br>
 * additional criteria such as server-side computations.<br>
 * <br>
 * - When the model is backed by a dojo.store or dojo.data query, the<br>
 * client-side updates can be persisted once the client is ready to<br>
 * "submit" the changes (which may include both value changes or<br>
 * structural changes - adds/deletes). The datamodel allows control<br>
 * over when the underlying data is persisted i.e. this can be more<br>
 * incremental or batched per application needs.<br>
 * <br>
 * There need not be a one-to-one association between a datamodel and<br>
 * a view or portion thereof. For example, multiple datamodels may<br>
 * back the dijits in a view. Indeed, this may be useful where the<br>
 * binding data comes from a number of data sources or queries, for<br>
 * example. Just as well, dijits from multiple portions of the view<br>
 * may be bound to a single datamodel.<br>
 * <br>
 * Finally, requiring this class also enables all dijits to become data<br>
 * binding aware. The data binding is commonly specified declaratively<br>
 * via the "ref" property in the "data-dojo-props" attribute value.<br>
 * <br>
 * To illustrate, the following is the "Hello World" of such data-bound<br>
 * widget examples:<br>
 * <br>
 * 	&lt;script&gt;<br>
 * 		dojo.require("dojox.mvc");<br>
 * 		dojo.require("dojo.parser");<br>
 * 		var model;<br>
 * 		dojo.addOnLoad(function(){<br>
 * 			model = dojox.mvc.newStatefulModel({ data : {<br>
 * 				hello : "Hello World"<br>
 * 			}});<br>
 * 			dojo.parser.parse();<br>
 * 		}<br>
 * 	&lt;/script&gt;<br>
 * <br>
 * 	&lt;input id="helloInput" dojoType="dijit.form.TextBox"<br>
 * 		ref="model.hello"&gt;<br>
 * <br>
 * or<br>
 * <br>
 * 	&lt;script&gt;<br>
 * 		var model;<br>
 * 		require(["dojox/mvc", "dojo/parser"], function(dxmvc, parser){<br>
 * 			model = dojox.mvc.newStatefulModel({ data : {<br>
 * 				hello : "Hello World"<br>
 * 			}});<br>
 * 			parser.parse();<br>
 * 		});<br>
 * 	&lt;/script&gt;<br>
 * <br>
 * 	&lt;input id="helloInput" data-dojo-type="dijit.form.TextBox"<br>
 * 		data-dojo-props="ref: 'model.hello'"&gt;<br>
 * <br>
 * Such data binding awareness for dijits is added by extending the<br>
 * dijit._WidgetBase class to include data binding capabilities<br>
 * provided by dojox.mvc._DataBindingMixin, and this class declares a<br>
 * dependency on dojox.mvc._DataBindingMixin.<br>
 * <br>
 * The presence of a data model and the data-binding capabilities<br>
 * outlined above support the flexible development of a number of MVC<br>
 * patterns on the client. As an example, CRUD operations can be<br>
 * supported with minimal application code.
 * @class
 * @extends dojo.Stateful
 * @param {Object} args The mixin properties.
 * @returns {dojox.mvc.StatefulModel} new instance
*/
dojox.mvc.StatefulModel=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the value representation of the data currently within this data model.<br>
 * </blockquote>
 * @memberOf dojox.mvc.StatefulModel
*/
dojox.mvc.StatefulModel.prototype.valueOf=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the string representation of the data currently within this data model.<br>
 * </blockquote>
 * @memberOf dojox.mvc.StatefulModel
*/
dojox.mvc.StatefulModel.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Produces a plain JavaScript object representation of the data<br>
 *	 currently within this data model.<br>
 * </blockquote>
 * @memberOf dojox.mvc.StatefulModel
*/
dojox.mvc.StatefulModel.prototype.toPlainObject=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resets this data model values to its original state.<br>
 *	 Structural changes to the data model (such as adds or removes)<br>
 *	 are not restored.<br>
 * </blockquote>
 * @memberOf dojox.mvc.StatefulModel
*/
dojox.mvc.StatefulModel.prototype.reset=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the dojo.Stateful tree at the given property name.<br>
 * </blockquote>
 * In case of arrays, the property names are indices passed<br>
 * as Strings. A removal of such a dojo.Stateful node<br>
 * results in left-shifting any trailing sibling nodes.
 * @param {String} name The property name from where the tree will be removed.
 * @memberOf dojox.mvc.StatefulModel
*/
dojox.mvc.StatefulModel.prototype.remove=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 Commits this data model:<br>
 *	 - Saves the current state such that a subsequent reset will not<br>
 *	 undo any prior changes.<br>
 *	 - Persists client-side changes to the data store, if a store<br>
 *	 has been supplied as a parameter or at instantiation.<br>
 * </blockquote>
 * @param {"dojo.store.DataStore"} [store] dojo.store.DataStore Optional dojo.store.DataStore to use for this commit, if none
 * provided but one was provided at instantiation time, that store<br>
 * will be used instead.
 * @memberOf dojox.mvc.StatefulModel
*/
dojox.mvc.StatefulModel.prototype.commit=function(store){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a dojo.Stateful tree represented by the given<br>
 *	 dojox.mvc.StatefulModel at the given property name.<br>
 * </blockquote>
 * In case of arrays, the property names are indices passed<br>
 * as Strings. An addition of such a dojo.Stateful node<br>
 * results in right-shifting any trailing sibling nodes.
 * @param {String} name The property name to use whose value will become the given
 * dijit.Stateful tree.
 * @param {dojo.Stateful} stateful The dojox.mvc.StatefulModel to insert.
 * @memberOf dojox.mvc.StatefulModel
*/
dojox.mvc.StatefulModel.prototype.add=function(name, stateful){};
/**
 * <b>Summary:</b><blockquote>
 *	 Commit the current values to the data store:<br>
 *	 - remove() any deleted entries<br>
 *	 - put() any new or updated entries<br>
 * </blockquote>
 * @param {"dojo.store.DataStore"} store dojo.store.DataStore to use for this commit.
 * @private
 * @memberOf dojox.mvc.StatefulModel
*/
dojox.mvc.StatefulModel.prototype._saveToStore=function(store){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create this data model from provided input data.<br>
 * </blockquote>
 * @param {Object} obj The input for the model, as a plain JavaScript object.
 * @private
 * @memberOf dojox.mvc.StatefulModel
*/
dojox.mvc.StatefulModel.prototype._createModel=function(obj){};
/**
 * <b>Summary:</b><blockquote>
 *	 Copy only the dojo.Stateful properties from src to dest (uses<br>
 *	 duck typing).<br>
 * </blockquote>
 * @param {dojo.Stateful} src The source object for the copy.
 * @param {dojo.Stateful} dest The target object of the copy.
 * @private
 * @memberOf dojox.mvc.StatefulModel
*/
dojox.mvc.StatefulModel.prototype._copyStatefulProperties=function(src, dest){};
/**
 * <b>Summary:</b><blockquote>
 *	 Commits this data model, saves the current state into data to become the saved state,<br>
 *	 so a reset will not undo any prior changes.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.mvc.StatefulModel
*/
dojox.mvc.StatefulModel.prototype._commit=function(){};
/**
 * @param {mixed} selector 
 * @param {mixed} evtName 
 * @param {mixed} fn 
*/
dojox.rails.live=function(selector, evtName, fn){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validate a String value against the Luhn algorithm.<br>
 * </blockquote>
 * Validate a String value against the Luhn algorithm to verify<br>
 * its integrity.
 * @param {String} value 
 * @returns {Boolean} -
*/
dojox.validate.isValidLuhn=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validate ISBN-10 or ISBN-13 based on the length of value<br>
 * </blockquote>
 * @param {String} value An ISBN to validate
 * 
 * @returns {Boolean} -
*/
dojox.validate.isValidIsbn=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validate the security code (CCV) for a passed credit-card type.<br>
 * </blockquote>
 * @param {String|Int} value 
 * @param {String} ccType 
 * @returns {Boolean} -
*/
dojox.validate.isValidCvv=function(value, ccType){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks if value matches the pattern for that card or any card types if none is specified<br>
 * </blockquote>
 * @param {String|Int} value CC #, white spaces and dashes are ignored
 * @param {String} [ccType] One of the abbreviation values in `dojox.validate._cardInfo` --
 * if Omitted, function returns a `|` delimited string of matching card types,<br>
 * or false if no matches found.
 * @returns {boolean|String} -
*/
dojox.validate.isValidCreditCardNumber=function(value, ccType){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validate a credit card number by type with Luhn checking.<br>
 * </blockquote>
 * Checks if a credit card type matches the # scheme in a passed value, and if<br>
 * the Luhn checksum is accurate (unless its an Enroute card, in which case<br>
 * the checkSum is skipped), returning a Boolean to check against.
 * @param {String|Int} value A Value (credit card number) to validate
 * @param {String} ccType A credit-card abbreviation.
 * @example
 * 	if(dojox.validate.isValidCreditCard("12345", "mc")){
 * 		console.log('inconceivable');
 * 	}
*/
dojox.validate.isValidCreditCard=function(value, ccType){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks if a string could be a valid URL<br>
 * </blockquote>
 * @param {String} value A string
 * @param {Object} [flags] An object
 * flags.scheme  Can be true, false, or [true, false].<br>
 * This means: required, not allowed, or either.<br>
 * flags in regexp.host can be applied.<br>
 * flags in regexp.ipAddress can be applied.<br>
 * flags in regexp.tld can be applied.
 * @returns {Boolean} -
*/
dojox.validate.isUrl=function(value, flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks if a string has non whitespace characters.<br>
 *	 Parameters allow you to constrain the length.<br>
 * </blockquote>
 * @param {String} value A string
 * @param {Object} [flags] length: Number, minlength: Number, maxlength: Number}
 * flags.length  If set, checks if there are exactly flags.length number of characters.<br>
 * flags.minlength  If set, checks if there are at least flags.minlength number of characters.<br>
 * flags.maxlength  If set, checks if there are at most flags.maxlength number of characters.
 * @returns {Boolean} -
*/
dojox.validate.isText=function(value, flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validates any sort of number based format<br>
 * </blockquote>
 * Validates any sort of number based format. Use it for phone numbers,<br>
 * social security numbers, zip-codes, etc. The value can be validated<br>
 * against one format or one of multiple formats.<br>
 * <br>
 * Format Definition<br>
 *	#		Stands for a digit, 0-9.<br>
 *	?		Stands for an optional digit, 0-9 or nothing.<br>
 * All other characters must appear literally in the expression.
 * @param {String} value A string
 * @param {Object} [flags] FIXME: make pseudo-object for this
 * format: String<br>
 * <br>
 * flags.format  A string or an Array of strings for multiple formats.
 * @returns {Boolean} -
 * @example
 *   "(###) ###-####"	   -&gt;   (510) 542-9742
 *   "(###) ###-#### x#???" -&gt;   (510) 542-9742 x153
 *   "###-##-####"		  -&gt;   506-82-1089	   i.e. social security number
 *   "#####-####"		   -&gt;   98225-1649		i.e. zip code
 * @example
 *  // returns true:
 *  dojox.validate.isNumberFormat("123-45", { format:"###-##" });
 * @example
 * Check Multiple formats:
 * 	dojox.validate.isNumberFormat("123-45", {
 * 		format:["### ##","###-##","## ###"]
 * 	});
*/
dojox.validate.isNumberFormat=function(value, flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validates an IP address<br>
 * </blockquote>
 * Supports 5 formats for IPv4: dotted decimal, dotted hex, dotted octal, decimal and hexadecimal.<br>
 * Supports 2 formats for Ipv6.<br>
 * <br>
 * value  A string.<br>
 * flags  An object.  All flags are boolean with default = true.<br>
 * flags.allowDottedDecimal  Example, 207.142.131.235.  No zero padding.<br>
 * flags.allowDottedHex  Example, 0x18.0x11.0x9b.0x28.  Case insensitive.  Zero padding allowed.<br>
 * flags.allowDottedOctal  Example, 0030.0021.0233.0050.  Zero padding allowed.<br>
 * flags.allowDecimal  Example, 3482223595.  A decimal number between 0-4294967295.<br>
 * flags.allowHex  Example, 0xCF8E83EB.  Hexadecimal number between 0x0-0xFFFFFFFF.<br>
 * Case insensitive.  Zero padding allowed.<br>
 * flags.allowIPv6   IPv6 address written as eight groups of four hexadecimal digits.<br>
 * flags.allowHybrid   IPv6 address written as six groups of four hexadecimal digits<br>
 * followed by the usual 4 dotted decimal digit notation of IPv4. x:x:x:x:x:x:d.d.d.d
 * @param {String} value 
 * @param {Object} [flags] 
 * @returns {Boolean} -
*/
dojox.validate.isIpAddress=function(value, flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Validates whether a string denoting a number<br>
 *	 is between a max and min.<br>
 * </blockquote>
 * @param {String} value A string
 * @param {Object} [flags] max:Number, min:Number, decimal:String}
 * flags.max  A number, which the value must be less than or equal to for the validation to be true.<br>
 * flags.min  A number, which the value must be greater than or equal to for the validation to be true.<br>
 * flags.decimal  The character used for the decimal point.  Default is &quot;.&quot;.
 * @returns {Boolean} -
*/
dojox.validate.isInRange=function(value, flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks if a string could be a valid email address<br>
 * </blockquote>
 * @param {String} value A string
 * @param {Object} [flags] An object
 * flags.allowCruft  Allow address like &lt;mailto:foo@yahoo.com&gt;.  Default is false.<br>
 * flags in regexp.host can be applied.<br>
 * flags in regexp.ipAddress can be applied.<br>
 * flags in regexp.tld can be applied.
 * @returns {Boolean} -
*/
dojox.validate.isEmailAddress=function(value, flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if value is an email address list. If an empty list<br>
 *	 is returned, the value didn't pass the test or it was empty.<br>
 * </blockquote>
 * @param {String} value A string
 * @param {Object} [flags] An object (same as dojo.validate.isEmailAddressList)
 * @returns {Array} -
*/
dojox.validate.getEmailAddressList=function(value, flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Evaluates dojo.validate.check() constraints that are specified as array<br>
 *	 arguments<br>
 * </blockquote>
 * The arrays are expected to be in the format of:<br>
 * constraints:{
 * @param {The} profile dojo.validate.check() profile that this evaluation is against.
 * @param {Array} constraint The single [] array of function and arguments for the function.
 * @param {The} fieldName form dom name of the field being validated.
 * @param {The} elem form element field.
 * @returns {Boolean} -
*/
dojox.validate.evaluateConstraint=function(profile, constraint, fieldName, elem){};
/**
 * <b>Summary:</b><blockquote>
 *	 validates user input of an HTML form based on input profile<br>
 * </blockquote>
 * returns an object that contains several methods summarizing the results of the validation
 * @param {HTMLFormElement} form form to be validated
 * @param {Object} profile specifies how the form fields are to be validated
 * {trim:Array, uppercase:Array, lowercase:Array, ucfirst:Array, digit:Array,<br>
 * required:Array, dependencies:Object, constraints:Object, confirm:Object}
 * @returns {Object} -
*/
dojox.validate.check=function(form, profile){};
/**
 * @namespace
*/
dojox.validate.regexp={};
/**
 * @namespace
 * @private
*/
dojox.validate._cardInfo={};
/**
 * @param {mixed} actions 
 * @param {mixed} kwArgs 
*/
dojox.rpc.JsonRest.sendToServer=function(actions, kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reverts all the changes made to JSON/REST data<br>
 * </blockquote>
 * @param {mixed} service 
*/
dojox.rpc.JsonRest.revert=function(service){};
/**
 * <b>Summary:</b><blockquote>
 *	 Registers a service for as a JsonRest service, mapping it to a path and schema<br>
 * </blockquote>
 * @param {Function} service This is the service to register
 * @param {String} servicePath This is the path that is used for all the ids for the objects returned by service
 * @param {Object} [schema] This is a JSON Schema object to associate with objects returned by this service
*/
dojox.rpc.JsonRest.registerService=function(service, servicePath, schema){};
/**
 * @param {mixed} service 
 * @param {mixed} id 
 * @param {mixed} args 
*/
dojox.rpc.JsonRest.query=function(service, id, args){};
/**
 * @param {mixed} item 
 * @param {mixed} store 
*/
dojox.rpc.JsonRest.isDirty=function(item, store){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the REST service and the local id for the given absolute id. The result<br>
 *	 is returned as an object with a service property and an id property<br>
 * </blockquote>
 * @param {String} absoluteId This is the absolute id of the object
*/
dojox.rpc.JsonRest.getServiceAndId=function(absoluteId){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return the ids attribute used by this service (based on it's schema).<br>
 *	 Defaults to &amp;quot;id&amp;quot;, if not other id is defined<br>
 * </blockquote>
 * @param {mixed} service 
*/
dojox.rpc.JsonRest.getIdAttribute=function(service){};
/**
*/
dojox.rpc.JsonRest.getDirtyObjects=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates or gets a constructor for objects from this service<br>
 * </blockquote>
 * @param {Function|String} service 
 * @param {mixed} schema 
*/
dojox.rpc.JsonRest.getConstructor=function(service, schema){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fetches a resource by an absolute path/id and returns a dojo.Deferred.<br>
 * </blockquote>
 * @param {mixed} absoluteId 
*/
dojox.rpc.JsonRest.fetch=function(absoluteId){};
/**
 * <b>Summary:</b><blockquote>
 *	 deletes an object<br>
 * </blockquote>
 * @param {object} object to delete
*/
dojox.rpc.JsonRest.deleteObject=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Saves the dirty data using REST Ajax methods<br>
 * </blockquote>
 * @param {mixed} kwArgs 
*/
dojox.rpc.JsonRest.commit=function(kwArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds an object to the list of dirty objects.  This object<br>
 *	 contains a reference to the object itself as well as a<br>
 *	 cloned and trimmed version of old object for use with<br>
 *	 revert.<br>
 * </blockquote>
 * @param {mixed} object 
 * @param {mixed} _deleting 
*/
dojox.rpc.JsonRest.changing=function(object, _deleting){};
/**
 * @param {mixed} service 
 * @param {mixed} id 
*/
dojox.rpc.JsonRest.byId=function(service, id){};
/**
 * @param {mixed} callback 
 * @private
*/
dojox.rpc.JsonRest._loader=function(callback){};
/**
 * @class
 * @returns {dojox.rpc.JsonRest.sendToServer} new instance
*/
dojox.rpc.JsonRest.sendToServer=function(){};
/**
*/
dojox.rpc.OfflineRest.turnOffAutoSync=function(){};
/**
*/
dojox.rpc.OfflineRest.downloadChanges=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a store to the monitored store for local storage<br>
 * </blockquote>
 * @param {data-store} store Store to add
 * @param {query} [baseQuery] This is the base query to should be used to load the items for
 * the store. Generally you want to load all the items that should be<br>
 * available when offline.<br>
*/
dojox.rpc.OfflineRest.addStore=function(store, baseQuery){};
/**
 * <b>Summary:</b><blockquote>
 *	 Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use<br>
 *	 as a definition for the service<br>
 * </blockquote>
 * dojox.rpc.Service must be loaded prior to any plugin services like dojox.rpc.Rest<br>
 * dojox.rpc.JsonRpc in order for them to register themselves, otherwise you get<br>
 * a "No match found" error.
 * @class
 * @param {object} smd Takes a number of properties as kwArgs for defining the service.  It also
 * accepts a string.  When passed a string, it is treated as a url from<br>
 * which it should synchronously retrieve an smd file.  Otherwise it is a kwArgs<br>
 * object.  It accepts serviceUrl, to manually define a url for the rpc service<br>
 * allowing the rpc system to be used without an smd definition. strictArgChecks<br>
 * forces the system to verify that the # of arguments provided in a call<br>
 * matches those defined in the smd.  smdString allows a developer to pass<br>
 * a jsonString directly, which will be converted into an object or alternatively<br>
 * smdObject is accepts an smdObject directly.
 * @param {mixed} options 
 * @returns {dojox.rpc.Service} new instance
*/
dojox.rpc.Service=function(smd, options){};
/**
 * @param {mixed} method 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.rpc.Service
*/
dojox.rpc.Service.prototype._getRequest=function(method, args){};
/**
 * @param {mixed} serviceName 
 * @param {mixed} method 
 * @private
 * @memberOf dojox.rpc.Service
*/
dojox.rpc.Service.prototype._generateService=function(serviceName, method){};
/**
 * @param {mixed} method 
 * @private
 * @memberOf dojox.rpc.Service
*/
dojox.rpc.Service.prototype._executeMethod=function(method){};
/**
 * @param {mixed} result 
*/
dojox.secure.unwrap=function(result){};
/**
 * <b>Summary:</b><blockquote>
 *	 Creates a secure sandbox from which scripts and HTML can be loaded that<br>
 *	 will only be able to access the provided element and it's descendants, the<br>
 *	 rest of the DOM and JS environment will not be accessible to the sandboxed<br>
 *	 scripts and HTML.<br>
 * </blockquote>
 * This function will create and return a sandbox object (see dojox.secure.__Sandbox)<br>
 * for the provided element.
 * @see dojox.secure#__Sandbox
 * @param {The} element DOM element to use as the container for the sandbox
 * @returns {dojox.secure.__Sandbox} -
*/
dojox.secure.sandbox=function(element){};
/**
 * @param {mixed} element 
 * @param {mixed} wrap 
 * @private
 * @returns {wrap the NodeList} -
*/
dojox.secure._safeDojoFunctions=function(element, wrap){};
/**
 * @param {mixed} element 
*/
dojox.secure.DOM=function(element){};
/**
 * @namespace
*/
dojox.secure.capability={};
/**
 * <b>Summary:</b><blockquote>
 *	 pass in the text of a script. If it passes and it can be eval'ed, it should be safe.<br>
 *	 Note that this does not do full syntax checking, it relies on eval to reject invalid scripts.<br>
 *	 There are also known false rejections:<br>
 *	 Nesting vars inside blocks will not declare the variable for the outer block<br>
 *	 Named functions are not treated as declaration so they are generally not allowed unless the name is declared with a var.<br>
 *	 Var declaration that involve multiple comma delimited variable assignments are not accepted<br>
 * </blockquote>
 * @param {string} script the script to execute
 * @param {Array} safeLibraries The safe libraries that can be called (the functions can not be access/modified by the untrusted code, only called)
 * @param {Object} safeGlobals These globals can be freely interacted with by the untrusted code
 * @returns {comments are replaced with a space, strings and regex are replaced with a single safe token (0)|replace literal keys with 0: and replace properties with the innocuous ~|turn into a known safe call} -
*/
dojox.secure.capability.validate=function(script, safeLibraries, safeGlobals){};
/**
 * <b>Summary:</b><blockquote>
 *	 pass in the text of a script. If it passes and it can be eval'ed, it should be safe.<br>
 *	 Note that this does not do full syntax checking, it relies on eval to reject invalid scripts.<br>
 *	 There are also known false rejections:<br>
 *	 Nesting vars inside blocks will not declare the variable for the outer block<br>
 *	 Named functions are not treated as declaration so they are generally not allowed unless the name is declared with a var.<br>
 *	 Var declaration that involve multiple comma delimited variable assignments are not accepted<br>
 * </blockquote>
 * @class
 * @returns {dojox.secure.capability.validate} new instance
*/
dojox.secure.capability.validate=function(){};
/**
 * @namespace
*/
dojo.NodeList.addContent={};
/**
 * @param {mixed} content 
*/
dojo.NodeList.addContent.safetyCheck=function(content){};
/**
 * @namespace
*/
dojo.NodeList.style={};
/**
 * @param {mixed} name 
 * @param {mixed} value 
*/
dojo.NodeList.style.safetyCheck=function(name, value){};
/**
 * @namespace
*/
dojo.NodeList.attr={};
/**
 * @param {mixed} name 
 * @param {mixed} value 
*/
dojo.NodeList.attr.safetyCheck=function(name, value){};
/**
 * @param {mixed} type 
 * @param {mixed} fn 
*/
dojox.sketch.registerTool=function(type, fn){};
/**
 * @param {mixed} node 
 * @param {mixed} figure 
*/
dojox.sketch.makeToolbar=function(node, figure){};
/**
 * @param {Object} [args] 
*/
dojox.sketch._Plugin=function(args){};
/**
 * @param {mixed} figure 
*/
dojox.sketch.UndoStack=function(figure){};
/**
*/
dojox.sketch.UnderlineAnnotationTool=function(){};
/**
 * @param {mixed} figure 
 * @param {mixed} id 
*/
dojox.sketch.UnderlineAnnotation=function(figure, id){};
/**
*/
dojox.sketch.Toolbar=function(){};
/**
*/
dojox.sketch.Slider=function(){};
/**
 * @param {mixed} figure 
 * @param {mixed} id 
*/
dojox.sketch.SingleArrowAnnotation=function(figure, id){};
/**
 * @param {mixed} figure 
 * @param {mixed} id 
*/
dojox.sketch.PreexistingAnnotation=function(figure, id){};
/**
 * @param {mixed} figure 
 * @param {mixed} id 
*/
dojox.sketch.LeadAnnotation=function(figure, id){};
/**
 * @param {mixed} mixin 
*/
dojox.sketch.Figure=function(mixin){};
/**
 * @param {mixed} figure 
 * @param {mixed} id 
*/
dojox.sketch.DoubleArrowAnnotation=function(figure, id){};
/**
*/
dojox.sketch.ButtonGroup=function(){};
/**
*/
dojox.sketch.AnnotationTool=function(){};
/**
 * @param {mixed} figure 
 * @param {mixed} id 
*/
dojox.sketch.Annotation=function(figure, id){};
/**
 * @param {mixed} an 
 * @param {mixed} id 
 * @param {mixed} isControl 
*/
dojox.sketch.Anchor=function(an, id, isControl){};
/**
 * @namespace
*/
dojox.sketch.CommandTypes={};
/**
 * @class
 * @returns {dojox.sketch.Anchor} new instance
*/
dojox.sketch.Anchor=function(){};
/**
 * @param {mixed} pct 
*/
dojox.sketch.Anchor.zoom=function(pct){};
/**
*/
dojox.sketch.Anchor.type=function(){};
/**
*/
dojox.sketch.Anchor.setUndo=function(){};
/**
 * @param {mixed} pt 
*/
dojox.sketch.Anchor.setBinding=function(pt){};
/**
*/
dojox.sketch.Anchor.endEdit=function(){};
/**
*/
dojox.sketch.Anchor.enable=function(){};
/**
*/
dojox.sketch.Anchor.disable=function(){};
/**
*/
dojox.sketch.Anchor.beginEdit=function(){};
/**
 * @class
 * @extends dojox.sketch._Plugin
 * @returns {dojox.sketch.AnnotationTool} new instance
*/
dojox.sketch.AnnotationTool=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.sketch.AnnotationTool
*/
dojox.sketch.AnnotationTool.prototype.onMouseUp=function(e){};
/**
 * @param {mixed} e 
 * @param {mixed} rect 
 * @memberOf dojox.sketch.AnnotationTool
*/
dojox.sketch.AnnotationTool.prototype.onMouseMove=function(e, rect){};
/**
 * @param {mixed} e 
 * @memberOf dojox.sketch.AnnotationTool
*/
dojox.sketch.AnnotationTool.prototype.onMouseDown=function(e){};
/**
 * @param {mixed} start 
 * @param {mixed} end 
 * @private
 * @memberOf dojox.sketch.AnnotationTool
*/
dojox.sketch.AnnotationTool.prototype._create=function(start, end){};
/**
 * @class
 * @returns {dojox.sketch.Annotation} new instance
*/
dojox.sketch.Annotation=function(){};
/**
 * @namespace
*/
dojox.sketch.Annotation.calculate={};
/**
 * @namespace
*/
dojox.sketch.Annotation.Modes={};
/**
 * @param {mixed} pct 
*/
dojox.sketch.Annotation.zoom=function(pct){};
/**
*/
dojox.sketch.Annotation.writeCommonAttrs=function(){};
/**
*/
dojox.sketch.Annotation.type=function(){};
/**
 * @param {mixed} m 
*/
dojox.sketch.Annotation.setMode=function(m){};
/**
 * @param {mixed} pt 
*/
dojox.sketch.Annotation.setBinding=function(pt){};
/**
*/
dojox.sketch.Annotation.serialize=function(){};
/**
 * @param {mixed} name 
 * @param {mixed} toolclass 
*/
dojox.sketch.Annotation.register=function(name, toolclass){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.Annotation.readCommonAttrs=function(obj){};
/**
 * @param {mixed} name 
 * @param {?} value 
*/
dojox.sketch.Annotation.property=function(name, value){};
/**
 * @param {mixed} noundo 
*/
dojox.sketch.Annotation.onRemove=function(noundo){};
/**
 * @param {mixed} name 
 * @param {mixed} oldvalue 
*/
dojox.sketch.Annotation.onPropertyChange=function(name, oldvalue){};
/**
 * @param {mixed} e 
*/
dojox.sketch.Annotation.onDblClick=function(e){};
/**
*/
dojox.sketch.Annotation.onCreate=function(){};
/**
*/
dojox.sketch.Annotation.initialize=function(){};
/**
*/
dojox.sketch.Annotation.getType=function(){};
/**
 * @param {mixed} zoomfactor 
*/
dojox.sketch.Annotation.getTextBox=function(zoomfactor){};
/**
*/
dojox.sketch.Annotation.getBBox=function(){};
/**
*/
dojox.sketch.Annotation.endEdit=function(){};
/**
*/
dojox.sketch.Annotation.drawBBox=function(){};
/**
*/
dojox.sketch.Annotation.draw=function(){};
/**
*/
dojox.sketch.Annotation.destroy=function(){};
/**
 * @param {mixed} type 
*/
dojox.sketch.Annotation.beginEdit=function(type){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.Annotation.apply=function(obj){};
/**
 * @class
 * @returns {dojox.sketch.Annotation.beginEdit} new instance
*/
dojox.sketch.Annotation.beginEdit=function(){};
/**
 * @class
 * @returns {dojox.sketch.Annotation.endEdit} new instance
*/
dojox.sketch.Annotation.endEdit=function(){};
/**
 * @param {mixed} p1 
 * @param {mixed} p2 
*/
dojox.sketch.Annotation.calculate.slope=function(p1, p2){};
/**
 * @param {mixed} p1 
 * @param {mixed} p2 
 * @param {mixed} dx 
*/
dojox.sketch.Annotation.calculate.dy=function(p1, p2, dx){};
/**
 * @param {mixed} p1 
 * @param {mixed} p2 
 * @param {mixed} dy 
*/
dojox.sketch.Annotation.calculate.dx=function(p1, p2, dy){};
/**
 * @class
 * @returns {dojox.sketch.Annotation.drawBBox} new instance
*/
dojox.sketch.Annotation.drawBBox=function(){};
/**
 * @class
 * @returns {dojox.sketch.Annotation.setMode} new instance
*/
dojox.sketch.Annotation.setMode=function(){};
/**
 * @class
 * @returns {dojox.sketch.Annotation.readCommonAttrs} new instance
*/
dojox.sketch.Annotation.readCommonAttrs=function(){};
/**
 * @class
 * @returns {dojox.sketch.DoubleArrowAnnotation} new instance
*/
dojox.sketch.DoubleArrowAnnotation=function(){};
/**
 * @param {mixed} pct 
*/
dojox.sketch.DoubleArrowAnnotation.zoom=function(pct){};
/**
*/
dojox.sketch.DoubleArrowAnnotation.type=function(){};
/**
*/
dojox.sketch.DoubleArrowAnnotation.serialize=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.DoubleArrowAnnotation.initialize=function(obj){};
/**
*/
dojox.sketch.DoubleArrowAnnotation.getType=function(){};
/**
*/
dojox.sketch.DoubleArrowAnnotation.getBBox=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.DoubleArrowAnnotation.draw=function(obj){};
/**
*/
dojox.sketch.DoubleArrowAnnotation.destroy=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.DoubleArrowAnnotation.apply=function(obj){};
/**
 * @private
*/
dojox.sketch.DoubleArrowAnnotation._rot=function(){};
/**
 * @private
*/
dojox.sketch.DoubleArrowAnnotation._pos=function(){};
/**
 * @class
 * @private
 * @returns {dojox.sketch.DoubleArrowAnnotation._rot} new instance
*/
dojox.sketch.DoubleArrowAnnotation._rot=function(){};
/**
 * @class
 * @private
 * @returns {dojox.sketch.DoubleArrowAnnotation._pos} new instance
*/
dojox.sketch.DoubleArrowAnnotation._pos=function(){};
/**
 * @class
 * @returns {dojox.sketch.DoubleArrowAnnotation.apply} new instance
*/
dojox.sketch.DoubleArrowAnnotation.apply=function(){};
/**
 * @class
 * @returns {dojox.sketch.DoubleArrowAnnotation.initialize} new instance
*/
dojox.sketch.DoubleArrowAnnotation.initialize=function(){};
/**
 * @class
 * @returns {dojox.sketch.DoubleArrowAnnotation.destroy} new instance
*/
dojox.sketch.DoubleArrowAnnotation.destroy=function(){};
/**
 * @class
 * @returns {dojox.sketch.DoubleArrowAnnotation.draw} new instance
*/
dojox.sketch.DoubleArrowAnnotation.draw=function(){};
/**
 * @class
 * @returns {dojox.sketch.DoubleArrowAnnotation.zoom} new instance
*/
dojox.sketch.DoubleArrowAnnotation.zoom=function(){};
/**
 * @class
 * @returns {dojox.sketch.Figure} new instance
*/
dojox.sketch.Figure=function(){};
/**
 * @param {mixed} pct 
*/
dojox.sketch.Figure.zoom=function(pct){};
/**
*/
dojox.sketch.Figure.unzoom=function(){};
/**
*/
dojox.sketch.Figure.undo=function(){};
/**
 * @param {mixed} text 
*/
dojox.sketch.Figure.setValue=function(text){};
/**
 * @param {dojox.sketch._Plugin} t 
*/
dojox.sketch.Figure.setTool=function(t){};
/**
*/
dojox.sketch.Figure.serialize=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.Figure.select=function(obj){};
/**
 * @param {mixed} n 
 * @param {mixed} o 
*/
dojox.sketch.Figure.replaceSelection=function(n, o){};
/**
 * @param {mixed} annotation 
*/
dojox.sketch.Figure.remove=function(annotation){};
/**
*/
dojox.sketch.Figure.redo=function(){};
/**
*/
dojox.sketch.Figure.onUndo=function(){};
/**
*/
dojox.sketch.Figure.onRedo=function(){};
/**
*/
dojox.sketch.Figure.onLoad=function(){};
/**
 * @param {mixed} shape 
 * @param {mixed} e 
*/
dojox.sketch.Figure.onDblClickShape=function(shape, e){};
/**
 * @param {mixed} shape 
*/
dojox.sketch.Figure.onCreateShape=function(shape){};
/**
*/
dojox.sketch.Figure.onClick=function(){};
/**
*/
dojox.sketch.Figure.onBeforeUndo=function(){};
/**
*/
dojox.sketch.Figure.onBeforeRedo=function(){};
/**
 * @param {mixed} shape 
*/
dojox.sketch.Figure.onBeforeCreateShape=function(shape){};
/**
*/
dojox.sketch.Figure.nextKey=function(){};
/**
 * @param {mixed} obj 
 * @param {mixed} n 
*/
dojox.sketch.Figure.load=function(obj, n){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.Figure.isSelected=function(obj){};
/**
 * @param {mixed} node 
*/
dojox.sketch.Figure.initialize=function(node){};
/**
*/
dojox.sketch.Figure.initUndoStack=function(){};
/**
*/
dojox.sketch.Figure.hasSelections=function(){};
/**
*/
dojox.sketch.Figure.getFit=function(){};
/**
 * @param {mixed} id 
*/
dojox.sketch.Figure.getAnnotator=function(id){};
/**
*/
dojox.sketch.Figure.draw=function(){};
/**
 * @param {mixed} isLoading 
*/
dojox.sketch.Figure.destroy=function(isLoading){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.Figure.deselect=function(obj){};
/**
 * @param {mixed} ann 
 * @param {mixed} t 
*/
dojox.sketch.Figure.convert=function(ann, t){};
/**
*/
dojox.sketch.Figure.clearSelections=function(){};
/**
 * @param {mixed} annotation 
*/
dojox.sketch.Figure.add=function(annotation){};
/**
 * @param {mixed} obj 
 * @private
*/
dojox.sketch.Figure._remove=function(obj){};
/**
 * @param {mixed} e 
 * @private
*/
dojox.sketch.Figure._mu=function(e){};
/**
 * @param {mixed} e 
 * @private
*/
dojox.sketch.Figure._mm=function(e){};
/**
 * @param {mixed} e 
 * @private
*/
dojox.sketch.Figure._md=function(e){};
/**
 * @param {mixed} obj 
 * @private
*/
dojox.sketch.Figure._loadAnnotation=function(obj){};
/**
 * @param {mixed} e 
 * @private
*/
dojox.sketch.Figure._keydown=function(e){};
/**
 * @param {mixed} e 
 * @private
*/
dojox.sketch.Figure._keyFromEvt=function(e){};
/**
 * @param {mixed} key 
 * @private
*/
dojox.sketch.Figure._get=function(key){};
/**
 * @param {mixed} e 
 * @private
*/
dojox.sketch.Figure._fromEvt=function(e){};
/**
 * @param {mixed} arr 
 * @param {mixed} noundo 
 * @private
*/
dojox.sketch.Figure._delete=function(arr, noundo){};
/**
 * @param {mixed} e 
 * @private
*/
dojox.sketch.Figure._dblclick=function(e){};
/**
 * @param {mixed} v 
 * @private
*/
dojox.sketch.Figure._calCol=function(v){};
/**
 * @param {mixed} obj 
 * @private
*/
dojox.sketch.Figure._add=function(obj){};
/**
 * @class
 * @returns {dojox.sketch.Figure.initUndoStack} new instance
*/
dojox.sketch.Figure.initUndoStack=function(){};
/**
 * @class
 * @returns {dojox.sketch.Figure.setTool} new instance
*/
dojox.sketch.Figure.setTool=function(){};
/**
 * @class
 * @returns {dojox.sketch.Figure.initialize} new instance
*/
dojox.sketch.Figure.initialize=function(){};
/**
 * @class
 * @returns {dojox.sketch.Figure.destroy} new instance
*/
dojox.sketch.Figure.destroy=function(){};
/**
 * @class
 * @returns {dojox.sketch.Figure.zoom} new instance
*/
dojox.sketch.Figure.zoom=function(){};
/**
 * @class
 * @returns {dojox.sketch.Figure.unzoom} new instance
*/
dojox.sketch.Figure.unzoom=function(){};
/**
 * @class
 * @returns {dojox.sketch.Figure.setValue} new instance
*/
dojox.sketch.Figure.setValue=function(){};
/**
 * @class
 * @returns {dojox.sketch.Figure.load} new instance
*/
dojox.sketch.Figure.load=function(){};
/**
 * @class
 * @returns {dojox.sketch.LeadAnnotation} new instance
*/
dojox.sketch.LeadAnnotation=function(){};
/**
*/
dojox.sketch.LeadAnnotation.type=function(){};
/**
*/
dojox.sketch.LeadAnnotation.serialize=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.LeadAnnotation.initialize=function(obj){};
/**
*/
dojox.sketch.LeadAnnotation.getType=function(){};
/**
*/
dojox.sketch.LeadAnnotation.getBBox=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.LeadAnnotation.draw=function(obj){};
/**
*/
dojox.sketch.LeadAnnotation.destroy=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.LeadAnnotation.apply=function(obj){};
/**
 * @private
*/
dojox.sketch.LeadAnnotation._pos=function(){};
/**
 * @class
 * @private
 * @returns {dojox.sketch.LeadAnnotation._pos} new instance
*/
dojox.sketch.LeadAnnotation._pos=function(){};
/**
 * @class
 * @returns {dojox.sketch.LeadAnnotation.apply} new instance
*/
dojox.sketch.LeadAnnotation.apply=function(){};
/**
 * @class
 * @returns {dojox.sketch.LeadAnnotation.initialize} new instance
*/
dojox.sketch.LeadAnnotation.initialize=function(){};
/**
 * @class
 * @returns {dojox.sketch.LeadAnnotation.destroy} new instance
*/
dojox.sketch.LeadAnnotation.destroy=function(){};
/**
 * @class
 * @param {Object} [args] 
 * @returns {dojox.sketch._Plugin} new instance
*/
dojox.sketch._Plugin=function(args){};
/**
 * @param {dijit._Widget} toolbar 
 * @memberOf dojox.sketch._Plugin
*/
dojox.sketch._Plugin.prototype.setToolbar=function(toolbar){};
/**
 * @param {dijit._Widget} figure 
 * @memberOf dojox.sketch._Plugin
*/
dojox.sketch._Plugin.prototype.setFigure=function(figure){};
/**
 * @param {mixed} e 
 * @memberOf dojox.sketch._Plugin
*/
dojox.sketch._Plugin.prototype.onMouseUp=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.sketch._Plugin
*/
dojox.sketch._Plugin.prototype.onMouseMove=function(e){};
/**
 * @param {mixed} e 
 * @memberOf dojox.sketch._Plugin
*/
dojox.sketch._Plugin.prototype.onMouseDown=function(e){};
/**
 * @memberOf dojox.sketch._Plugin
*/
dojox.sketch._Plugin.prototype.onActivate=function(){};
/**
 * @param {mixed} f 
 * @memberOf dojox.sketch._Plugin
*/
dojox.sketch._Plugin.prototype.destroy=function(f){};
/**
 * @param {mixed} o 
 * @param {mixed} f 
 * @param {mixed} tf 
 * @memberOf dojox.sketch._Plugin
*/
dojox.sketch._Plugin.prototype.connect=function(o, f, tf){};
/**
 * @param {mixed} name 
 * @param {?} value 
 * @memberOf dojox.sketch._Plugin
*/
dojox.sketch._Plugin.prototype.attr=function(name, value){};
/**
 * @param {?} e 
 * @memberOf dojox.sketch._Plugin
*/
dojox.sketch._Plugin.prototype.activate=function(e){};
/**
 * @private
 * @memberOf dojox.sketch._Plugin
*/
dojox.sketch._Plugin.prototype._initButton=function(){};
/**
 * @class
 * @returns {dojox.sketch.PreexistingAnnotation} new instance
*/
dojox.sketch.PreexistingAnnotation=function(){};
/**
 * @param {mixed} pct 
*/
dojox.sketch.PreexistingAnnotation.zoom=function(pct){};
/**
*/
dojox.sketch.PreexistingAnnotation.type=function(){};
/**
*/
dojox.sketch.PreexistingAnnotation.serialize=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.PreexistingAnnotation.initialize=function(obj){};
/**
*/
dojox.sketch.PreexistingAnnotation.getType=function(){};
/**
*/
dojox.sketch.PreexistingAnnotation.getBBox=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.PreexistingAnnotation.draw=function(obj){};
/**
*/
dojox.sketch.PreexistingAnnotation.destroy=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.PreexistingAnnotation.apply=function(obj){};
/**
 * @private
*/
dojox.sketch.PreexistingAnnotation._pos=function(){};
/**
 * @class
 * @private
 * @returns {dojox.sketch.PreexistingAnnotation._pos} new instance
*/
dojox.sketch.PreexistingAnnotation._pos=function(){};
/**
 * @class
 * @returns {dojox.sketch.PreexistingAnnotation.apply} new instance
*/
dojox.sketch.PreexistingAnnotation.apply=function(){};
/**
 * @class
 * @returns {dojox.sketch.PreexistingAnnotation.initialize} new instance
*/
dojox.sketch.PreexistingAnnotation.initialize=function(){};
/**
 * @class
 * @returns {dojox.sketch.PreexistingAnnotation.destroy} new instance
*/
dojox.sketch.PreexistingAnnotation.destroy=function(){};
/**
 * @class
 * @returns {dojox.sketch.SingleArrowAnnotation} new instance
*/
dojox.sketch.SingleArrowAnnotation=function(){};
/**
 * @param {mixed} pct 
*/
dojox.sketch.SingleArrowAnnotation.zoom=function(pct){};
/**
*/
dojox.sketch.SingleArrowAnnotation.type=function(){};
/**
*/
dojox.sketch.SingleArrowAnnotation.serialize=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.SingleArrowAnnotation.initialize=function(obj){};
/**
*/
dojox.sketch.SingleArrowAnnotation.getType=function(){};
/**
*/
dojox.sketch.SingleArrowAnnotation.getBBox=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.SingleArrowAnnotation.draw=function(obj){};
/**
*/
dojox.sketch.SingleArrowAnnotation.destroy=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.SingleArrowAnnotation.apply=function(obj){};
/**
 * @private
*/
dojox.sketch.SingleArrowAnnotation._rot=function(){};
/**
 * @private
*/
dojox.sketch.SingleArrowAnnotation._pos=function(){};
/**
 * @class
 * @private
 * @returns {dojox.sketch.SingleArrowAnnotation._rot} new instance
*/
dojox.sketch.SingleArrowAnnotation._rot=function(){};
/**
 * @class
 * @private
 * @returns {dojox.sketch.SingleArrowAnnotation._pos} new instance
*/
dojox.sketch.SingleArrowAnnotation._pos=function(){};
/**
 * @class
 * @returns {dojox.sketch.SingleArrowAnnotation.apply} new instance
*/
dojox.sketch.SingleArrowAnnotation.apply=function(){};
/**
 * @class
 * @returns {dojox.sketch.SingleArrowAnnotation.initialize} new instance
*/
dojox.sketch.SingleArrowAnnotation.initialize=function(){};
/**
 * @class
 * @returns {dojox.sketch.SingleArrowAnnotation.destroy} new instance
*/
dojox.sketch.SingleArrowAnnotation.destroy=function(){};
/**
 * @class
 * @returns {dojox.sketch.SingleArrowAnnotation.draw} new instance
*/
dojox.sketch.SingleArrowAnnotation.draw=function(){};
/**
 * @class
 * @returns {dojox.sketch.SingleArrowAnnotation.zoom} new instance
*/
dojox.sketch.SingleArrowAnnotation.zoom=function(){};
/**
 * @class
 * @extends dojox.sketch._Plugin
 * @returns {dojox.sketch.Slider} new instance
*/
dojox.sketch.Slider=function(){};
/**
 * @param {mixed} t 
 * @memberOf dojox.sketch.Slider
*/
dojox.sketch.Slider.prototype.setToolbar=function(t){};
/**
 * @memberOf dojox.sketch.Slider
*/
dojox.sketch.Slider.prototype.reset=function(){};
/**
 * @private
 * @memberOf dojox.sketch.Slider
*/
dojox.sketch.Slider.prototype._zoomToFit=function(){};
/**
 * @param {mixed} v 
 * @private
 * @memberOf dojox.sketch.Slider
*/
dojox.sketch.Slider.prototype._setZoom=function(v){};
/**
 * @private
 * @memberOf dojox.sketch.Slider
*/
dojox.sketch.Slider.prototype._initButton=function(){};
/**
 * @class
 * @returns {dojox.sketch.ButtonGroup} new instance
*/
dojox.sketch.ButtonGroup=function(){};
/**
 * @param {_Plugin} plugin 
 * @memberOf dojox.sketch.ButtonGroup
*/
dojox.sketch.ButtonGroup.prototype.add=function(plugin){};
/**
 * @param {mixed} p 
 * @private
 * @memberOf dojox.sketch.ButtonGroup
*/
dojox.sketch.ButtonGroup.prototype._resetGroup=function(p){};
/**
 * @class
 * @extends dijit.Toolbar
 * @returns {dojox.sketch.Toolbar} new instance
*/
dojox.sketch.Toolbar=function(){};
/**
 * @param {mixed} f 
 * @memberOf dojox.sketch.Toolbar
*/
dojox.sketch.Toolbar.prototype.setFigure=function(f){};
/**
 * @memberOf dojox.sketch.Toolbar
*/
dojox.sketch.Toolbar.prototype.reset=function(){};
/**
 * @memberOf dojox.sketch.Toolbar
*/
dojox.sketch.Toolbar.prototype.postCreate=function(){};
/**
 * @memberOf dojox.sketch.Toolbar
*/
dojox.sketch.Toolbar.prototype.destroy=function(){};
/**
 * @param {_Plugin} item 
 * @param {mixed} group 
 * @memberOf dojox.sketch.Toolbar
*/
dojox.sketch.Toolbar.prototype.addGroupItem=function(item, group){};
/**
 * @param {mixed} s 
 * @private
 * @memberOf dojox.sketch.Toolbar
*/
dojox.sketch.Toolbar.prototype._setShape=function(s){};
/**
 * @class
 * @extends dojox.sketch.AnnotationTool
 * @returns {dojox.sketch.UnderlineAnnotationTool} new instance
*/
dojox.sketch.UnderlineAnnotationTool=function(){};
/**
 * @memberOf dojox.sketch.UnderlineAnnotationTool
*/
dojox.sketch.UnderlineAnnotationTool.prototype.onMouseUp=function(){};
/**
 * @memberOf dojox.sketch.UnderlineAnnotationTool
*/
dojox.sketch.UnderlineAnnotationTool.prototype.onMouseMove=function(){};
/**
 * @memberOf dojox.sketch.UnderlineAnnotationTool
*/
dojox.sketch.UnderlineAnnotationTool.prototype.onMouseDown=function(){};
/**
 * @class
 * @returns {dojox.sketch.UnderlineAnnotation} new instance
*/
dojox.sketch.UnderlineAnnotation=function(){};
/**
 * @param {mixed} pct 
*/
dojox.sketch.UnderlineAnnotation.zoom=function(pct){};
/**
*/
dojox.sketch.UnderlineAnnotation.type=function(){};
/**
*/
dojox.sketch.UnderlineAnnotation.serialize=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.UnderlineAnnotation.initialize=function(obj){};
/**
*/
dojox.sketch.UnderlineAnnotation.getType=function(){};
/**
*/
dojox.sketch.UnderlineAnnotation.getBBox=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.UnderlineAnnotation.draw=function(obj){};
/**
*/
dojox.sketch.UnderlineAnnotation.destroy=function(){};
/**
 * @param {mixed} obj 
*/
dojox.sketch.UnderlineAnnotation.apply=function(obj){};
/**
 * @class
 * @returns {dojox.sketch.UnderlineAnnotation.initialize} new instance
*/
dojox.sketch.UnderlineAnnotation.initialize=function(){};
/**
 * @class
 * @returns {dojox.sketch.UnderlineAnnotation.destroy} new instance
*/
dojox.sketch.UnderlineAnnotation.destroy=function(){};
/**
 * @class
 * @returns {dojox.sketch.UnderlineAnnotation.getBBox} new instance
*/
dojox.sketch.UnderlineAnnotation.getBBox=function(){};
/**
 * @class
 * @param {mixed} figure 
 * @returns {dojox.sketch.UndoStack} new instance
*/
dojox.sketch.UndoStack=function(figure){};
/**
 * @memberOf dojox.sketch.UndoStack
*/
dojox.sketch.UndoStack.prototype.undo=function(){};
/**
 * @memberOf dojox.sketch.UndoStack
*/
dojox.sketch.UndoStack.prototype.redo=function(){};
/**
 * @memberOf dojox.sketch.UndoStack
*/
dojox.sketch.UndoStack.prototype.destroy=function(){};
/**
 * @param {mixed} state 
 * @param {mixed} from 
 * @param {mixed} to 
 * @memberOf dojox.sketch.UndoStack
*/
dojox.sketch.UndoStack.prototype.apply=function(state, from, to){};
/**
 * @param {String} cmd 
 * @param {ta.Annotation} [ann] 
 * @param {String} [before] 
 * @memberOf dojox.sketch.UndoStack
*/
dojox.sketch.UndoStack.prototype.add=function(cmd, ann, before){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides auto-reconnection to a websocket after it has been closed<br>
 * </blockquote>
 * @param {Socket} socket to add reconnection support to.
 * @param {mixed} options 
 * @example
 * You can use the Reconnect module:
 *  dojo.require("dojox.socket");
 *  dojo.require("dojox.socket.Reconnect");
 *  var socket = dojox.socket({url:"/comet"});
 *  // add auto-reconnect support
 *  socket = dojox.socket.Reconnect(socket);
*/
dojox.socket.Reconnect=function(socket, options){};
/**
 * @namespace
*/
dojox.Socket={};
/**
 * @param {mixed} socket 
 * @param {mixed} newSocket 
 * @param {mixed} listenForOpen 
*/
dojox.Socket.replace=function(socket, newSocket, listenForOpen){};
/**
 * <b>Summary:</b><blockquote>
 *	 A wrapper for WebSocket, than handles standard args and relative URLs<br>
 * </blockquote>
 * @param {mixed} args 
 * @param {mixed} fallback 
*/
dojox.Socket.WebSocket=function(args, fallback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides a simple long-poll based comet-style socket/connection to a server and returns an<br>
 *	 object implementing the WebSocket interface:<br>
 *	 http://dev.w3.org/html5/websockets/#websocket<br>
 * </blockquote>
 * @see reference <a href="http://dev.w3.org/html5/websockets/#websocket">http://dev.w3.org/html5/websockets/#websocket</a>
 * @param {dojo.__XhrArgs} args This uses the same arguments as the other I/O functions in Dojo, with this addition:
 * args.interval:<br>
 * Indicates the amount of time (in milliseconds) after a response was received<br>
 * before another request is made. By default, a request is made immediately<br>
 * after getting a response. The interval can be increased to reduce load on the<br>
 * server or to do simple time-based polling where the server always responds<br>
 * immediately.<br>
 * args.transport:<br>
 * Provide an alternate transport like dojo.io.script.get
 * @example
 *  dojo.require("dojox.socket.LongPoll");
 *  var socket = dojox.socket.LongPoll({url:"/comet"});
 * or:
 *  dojo.require("dojox.socket.LongPoll");
 *  dojox.socket.LongPoll.add();
 *  var socket = dojox.socket({url:"/comet"});
*/
dojox.Socket.LongPoll=function(args){};
/**
 * @param {mixed} dbName 
*/
dojox.sql.open=function(dbName){};
/**
 * @param {mixed} dbName 
*/
dojox.sql.close=function(dbName){};
/**
 * @param {mixed} sql 
 * @param {mixed} args 
 * @private
*/
dojox.sql._printDebugSQL=function(sql, args){};
/**
 * @param {mixed} rs 
 * @private
*/
dojox.sql._normalizeResults=function(rs){};
/**
 * @param {mixed} sql 
 * @private
*/
dojox.sql._needsEncrypt=function(sql){};
/**
 * @param {mixed} sql 
 * @private
*/
dojox.sql._needsDecrypt=function(sql){};
/**
 * @private
*/
dojox.sql._initDb=function(){};
/**
 * @param {mixed} params 
 * @private
 * @returns {encrypted results will arrive asynchronously|decrypted results will arrive asynchronously} -
*/
dojox.sql._exec=function(params){};
/**
 * <b>Summary:</b><blockquote>
 *	 A private class encapsulating any cryptography that must be done<br>
 *	 on a SQL statement. We instantiate this class and have it hold<br>
 *	 it's state so that we can potentially have several encryption<br>
 *	 operations happening at the same time by different SQL statements.<br>
 * </blockquote>
 * @param {mixed} action 
 * @param {mixed} sql 
 * @param {mixed} password 
 * @param {mixed} args 
 * @param {mixed} callback 
*/
dojox.sql._SQLCrypto=function(action, sql, password, args, callback){};
/**
 * @class
 * @returns {dojox.sql.open} new instance
*/
dojox.sql.open=function(){};
/**
 * @class
 * @returns {dojox.sql.close} new instance
*/
dojox.sql.close=function(){};
/**
 * @class
 * @private
 * @returns {dojox.sql._exec} new instance
*/
dojox.sql._exec=function(){};
/**
 * @class
 * @private
 * @returns {dojox.sql._initDb} new instance
*/
dojox.sql._initDb=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A private class encapsulating any cryptography that must be done<br>
 *	 on a SQL statement. We instantiate this class and have it hold<br>
 *	 it's state so that we can potentially have several encryption<br>
 *	 operations happening at the same time by different SQL statements.<br>
 * </blockquote>
 * @class
 * @param {mixed} action 
 * @param {mixed} sql 
 * @param {mixed} password 
 * @param {mixed} args 
 * @param {mixed} callback 
 * @returns {dojox.sql._SQLCrypto} new instance
*/
dojox.sql._SQLCrypto=function(action, sql, password, args, callback){};
/**
 * @param {mixed} sql 
 * @private
 * @memberOf dojox.sql._SQLCrypto
*/
dojox.sql._SQLCrypto.prototype._stripCryptoSQL=function(sql){};
/**
 * @param {mixed} sql 
 * @param {mixed} args 
 * @private
 * @memberOf dojox.sql._SQLCrypto
*/
dojox.sql._SQLCrypto.prototype._flagEncryptedArgs=function(sql, args){};
/**
 * @param {mixed} sql 
 * @param {mixed} password 
 * @param {mixed} args 
 * @param {mixed} callback 
 * @private
 * @memberOf dojox.sql._SQLCrypto
*/
dojox.sql._SQLCrypto.prototype._execEncryptSQL=function(sql, password, args, callback){};
/**
 * @param {mixed} sql 
 * @param {mixed} password 
 * @param {mixed} args 
 * @param {mixed} callback 
 * @private
 * @memberOf dojox.sql._SQLCrypto
*/
dojox.sql._SQLCrypto.prototype._execDecryptSQL=function(sql, password, args, callback){};
/**
 * @param {mixed} sql 
 * @param {mixed} password 
 * @param {mixed} args 
 * @param {mixed} encryptColumns 
 * @param {mixed} callback 
 * @private
 * @memberOf dojox.sql._SQLCrypto
*/
dojox.sql._SQLCrypto.prototype._encrypt=function(sql, password, args, encryptColumns, callback){};
/**
 * @param {mixed} sql 
 * @private
 * @memberOf dojox.sql._SQLCrypto
*/
dojox.sql._SQLCrypto.prototype._determineDecryptedColumns=function(sql){};
/**
 * @param {mixed} columnName 
 * @param {mixed} columnValue 
 * @param {mixed} password 
 * @param {mixed} currentRowIndex 
 * @param {mixed} callback 
 * @private
 * @memberOf dojox.sql._SQLCrypto
*/
dojox.sql._SQLCrypto.prototype._decryptSingleColumn=function(columnName, columnValue, password, currentRowIndex, callback){};
/**
 * @param {mixed} resultSet 
 * @param {mixed} needsDecrypt 
 * @param {mixed} password 
 * @param {mixed} callback 
 * @private
 * @memberOf dojox.sql._SQLCrypto
*/
dojox.sql._SQLCrypto.prototype._decrypt=function(resultSet, needsDecrypt, password, callback){};
/**
 * @namespace
 * @private
*/
dojox.sql._crypto={};
/**
 * <b>Summary:</b><blockquote>
 *	 Use Corrected Block TEA to encrypt plaintext using password<br>
 *	 (note plaintext &amp;amp; password must be strings not string objects).<br>
 *	 Results will be returned to the 'callback' asychronously.<br>
 * </blockquote>
 * @param {mixed} plaintext 
 * @param {mixed} password 
 * @param {mixed} callback 
*/
dojox.sql._crypto.encrypt=function(plaintext, password, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Use Corrected Block TEA to decrypt ciphertext using password<br>
 *	 (note ciphertext &amp;amp; password must be strings not string objects).<br>
 *	 Results will be returned to the 'callback' asychronously.<br>
 * </blockquote>
 * @param {mixed} ciphertext 
 * @param {mixed} password 
 * @param {mixed} callback 
*/
dojox.sql._crypto.decrypt=function(ciphertext, password, callback){};
/**
 * @param {mixed} msg 
 * @param {mixed} sender 
 * @private
*/
dojox.sql._crypto._workerHandler=function(msg, sender){};
/**
 * @private
*/
dojox.sql._crypto._initWorkerPool=function(){};
/**
 * @param {mixed} msg 
 * @param {mixed} callback 
 * @private
*/
dojox.sql._crypto._assignWork=function(msg, callback){};
/**
 * @class
 * @private
 * @returns {dojox.sql._crypto._initWorkerPool} new instance
*/
dojox.sql._crypto._initWorkerPool=function(){};
/**
 * @namespace
 * @private
*/
dojox.sql._crypto._initWorkerPool._manager={};
/**
 * @param {mixed} msg 
 * @param {mixed} sender 
*/
dojox.sql._crypto._initWorkerPool._manager.onmessage=function(msg, sender){};
/**
 * @class
 * @private
 * @returns {dojox.sql._crypto._assignWork} new instance
*/
dojox.sql._crypto._assignWork=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A singleton class in charge of the dojox.storage system<br>
 * </blockquote>
 * Initializes the storage systems and figures out the best available<br>
 * storage options on this platform.<br>
*/
dojox.storage.manager=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Storage provider that uses WHAT Working Group features in Firefox 2<br>
 *	 to achieve permanent storage.<br>
 * </blockquote>
 * The WHAT WG storage API is documented at<br>
 * http://www.whatwg.org/specs/web-apps/current-work/#scs-client-side<br>
 * <br>
 * You can disable this storage provider with the following djConfig<br>
 * variable:<br>
 * var djConfig = { disableWhatWGStorage: true };<br>
 * <br>
 * Authors of this storage provider-<br>
 * JB Boisseau, jb.boisseau@eutech-ssii.com<br>
 * Brad Neuberg, bkn3@columbia.edu
 * @see reference <a href="http://www.whatwg.org/specs/web-apps/current-work/#scs-client-side">http://www.whatwg.org/specs/web-apps/current-work/#scs-client-side</a>
*/
dojox.storage.WhatWGStorageProvider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A singleton for working with dojox.storage.<br>
 * </blockquote>
 * dojox.storage exposes the current available storage provider on this<br>
 * platform. It gives you methods such as dojox.storage.put(),<br>
 * dojox.storage.get(), etc.<br>
 * <br>
 * For more details on dojox.storage, see the primary documentation<br>
 * page at<br>
 * http://manual.dojotoolkit.org/storage.html<br>
 * <br>
 * Note for storage provider developers who are creating subclasses-<br>
 * This is the base class for all storage providers Specific kinds of<br>
 * Storage Providers should subclass this and implement these methods.<br>
 * You should avoid initialization in storage provider subclass's<br>
 * constructor; instead, perform initialization in your initialize()<br>
 * method.
 * @see reference <a href="http://manual.dojotoolkit.org/storage.html">http://manual.dojotoolkit.org/storage.html</a>
*/
dojox.storage.Provider=function(){};
/**
*/
dojox.storage.LocalStorageProvider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Storage provider that uses the features of Google Gears<br>
 *	 to store data (it is saved into the local SQL database<br>
 *	 provided by Gears, using dojox.sql)<br>
 * </blockquote>
 * You can disable this storage provider with the following djConfig<br>
 * variable:<br>
 * var djConfig = { disableGearsStorage: true };<br>
 * <br>
 * Authors of this storage provider-<br>
 * Brad Neuberg, bkn3@columbia.edu<br>
 * <br>
 * <br>
 * instance methods and properties<br>
*/
dojox.storage.GearsStorageProvider=function(){};
/**
*/
dojox.storage.FlashStorageProvider=function(){};
/**
*/
dojox.storage.CookieStorageProvider=function(){};
/**
*/
dojox.storage.BehaviorStorageProvider=function(){};
/**
*/
dojox.storage.AirFileStorageProvider=function(){};
/**
*/
dojox.storage.AirEncryptedLocalStorageProvider=function(){};
/**
*/
dojox.storage.AirDBStorageProvider=function(){};
/**
 * @class
 * @extends dojox.storage.Provider
 * @returns {dojox.storage.AirDBStorageProvider} new instance
*/
dojox.storage.AirDBStorageProvider=function(){};
/**
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.showSettingsUI=function(){};
/**
 * @param {mixed} keys 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.removeMultiple=function(keys, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.remove=function(key, namespace){};
/**
 * @param {mixed} keys 
 * @param {mixed} values 
 * @param {mixed} resultsHandler 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.putMultiple=function(keys, values, resultsHandler, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} value 
 * @param {mixed} resultsHandler 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.put=function(key, value, resultsHandler, namespace){};
/**
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.isPermanent=function(){};
/**
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.isAvailable=function(){};
/**
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.initialize=function(){};
/**
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.hideSettingsUI=function(){};
/**
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.hasSettingsUI=function(){};
/**
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.getNamespaces=function(){};
/**
 * @param {mixed} keys 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.getMultiple=function(keys, namespace){};
/**
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.getMaximumSize=function(){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.getKeys=function(namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.get=function(key, namespace){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype.clear=function(namespace){};
/**
 * @param {mixed} query 
 * @param {mixed} params 
 * @private
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype._sql=function(query, params){};
/**
 * @private
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype._commitTransaction=function(){};
/**
 * @private
 * @memberOf dojox.storage.AirDBStorageProvider
*/
dojox.storage.AirDBStorageProvider.prototype._beginTransaction=function(){};
/**
 * @class
 * @extends dojox.storage.Provider
 * @returns {dojox.storage.AirEncryptedLocalStorageProvider} new instance
*/
dojox.storage.AirEncryptedLocalStorageProvider=function(){};
/**
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.showSettingsUI=function(){};
/**
 * @param {mixed} keys 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.removeMultiple=function(keys, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.remove=function(key, namespace){};
/**
 * @param {mixed} keys 
 * @param {mixed} values 
 * @param {mixed} resultsHandler 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.putMultiple=function(keys, values, resultsHandler, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} value 
 * @param {mixed} resultsHandler 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.put=function(key, value, resultsHandler, namespace){};
/**
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.isPermanent=function(){};
/**
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.isAvailable=function(){};
/**
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.initialize=function(){};
/**
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.hideSettingsUI=function(){};
/**
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.hasSettingsUI=function(){};
/**
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.getNamespaces=function(){};
/**
 * @param {mixed} keys 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.getMultiple=function(keys, namespace){};
/**
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.getMaximumSize=function(){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.getKeys=function(namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.get=function(key, namespace){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype.clear=function(namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} value 
 * @private
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype._setItem=function(key, value){};
/**
 * @param {mixed} key 
 * @private
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype._removeItem=function(key){};
/**
 * @param {mixed} key 
 * @private
 * @memberOf dojox.storage.AirEncryptedLocalStorageProvider
*/
dojox.storage.AirEncryptedLocalStorageProvider.prototype._getItem=function(key){};
/**
 * @class
 * @extends dojox.storage.Provider
 * @returns {dojox.storage.AirFileStorageProvider} new instance
*/
dojox.storage.AirFileStorageProvider=function(){};
/**
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.showSettingsUI=function(){};
/**
 * @param {mixed} keys 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.removeMultiple=function(keys, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.remove=function(key, namespace){};
/**
 * @param {mixed} keys 
 * @param {mixed} values 
 * @param {mixed} resultsHandler 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.putMultiple=function(keys, values, resultsHandler, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} value 
 * @param {mixed} resultsHandler 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.put=function(key, value, resultsHandler, namespace){};
/**
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.isPermanent=function(){};
/**
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.isAvailable=function(){};
/**
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.initialize=function(){};
/**
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.hideSettingsUI=function(){};
/**
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.hasSettingsUI=function(){};
/**
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.getNamespaces=function(){};
/**
 * @param {mixed} keys 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.getMultiple=function(keys, namespace){};
/**
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.getMaximumSize=function(){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.getKeys=function(namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.get=function(key, namespace){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.AirFileStorageProvider
*/
dojox.storage.AirFileStorageProvider.prototype.clear=function(namespace){};
/**
 * @class
 * @extends dojox.storage.Provider
 * @returns {dojox.storage.BehaviorStorageProvider} new instance
*/
dojox.storage.BehaviorStorageProvider=function(){};
/**
 * @param {string} key 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.remove=function(key, namespace){};
/**
 * @param {string} key 
 * @param {object} value 
 * @param {function} resultsHandler 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.put=function(key, value, resultsHandler, namespace){};
/**
 * @param {string} keyName 
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.isValidNamespace=function(keyName){};
/**
 * @param {string} keyName 
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.isValidKey=function(keyName){};
/**
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.isPermanent=function(){};
/**
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.isAvailable=function(){};
/**
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.initialize=function(){};
/**
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.hasSettingsUI=function(){};
/**
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.getNamespaces=function(){};
/**
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.getMaximumSize=function(){};
/**
 * @param {string} [namespace] 
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.getKeys=function(namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.getFullKey=function(key, namespace){};
/**
 * @param {string} key 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.get=function(key, namespace){};
/**
 * @param {string} [namespace] 
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype.clear=function(namespace){};
/**
 * @param {mixed} key 
 * @private
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype._removeKey=function(key){};
/**
 * @private
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype._createStore=function(){};
/**
 * @param {string} haystack 
 * @param {string} needle 
 * @private
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype._beginsWith=function(haystack, needle){};
/**
 * @param {string} namespace 
 * @private
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype._assertIsValidNamespace=function(namespace){};
/**
 * @param {string} key 
 * @private
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype._assertIsValidKey=function(key){};
/**
 * @param {mixed} key 
 * @private
 * @memberOf dojox.storage.BehaviorStorageProvider
*/
dojox.storage.BehaviorStorageProvider.prototype._addKey=function(key){};
/**
 * @class
 * @extends dojox.storage.Provider
 * @returns {dojox.storage.CookieStorageProvider} new instance
*/
dojox.storage.CookieStorageProvider=function(){};
/**
 * @param {string} key 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.remove=function(key, namespace){};
/**
 * @param {string} key 
 * @param {object} value 
 * @param {function} resultsHandler 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.put=function(key, value, resultsHandler, namespace){};
/**
 * @param {string} keyName 
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.isValidNamespace=function(keyName){};
/**
 * @param {string} keyName 
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.isValidKey=function(keyName){};
/**
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.isPermanent=function(){};
/**
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.isAvailable=function(){};
/**
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.initialize=function(){};
/**
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.hasSettingsUI=function(){};
/**
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.getNamespaces=function(){};
/**
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.getMaximumSize=function(){};
/**
 * @param {string} [namespace] 
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.getKeys=function(namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.getFullKey=function(key, namespace){};
/**
 * @param {string} key 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.get=function(key, namespace){};
/**
 * @param {string} [namespace] 
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype.clear=function(namespace){};
/**
 * @private
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype._save=function(){};
/**
 * @param {string} haystack 
 * @param {string} needle 
 * @private
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype._beginsWith=function(haystack, needle){};
/**
 * @param {string} namespace 
 * @private
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype._assertIsValidNamespace=function(namespace){};
/**
 * @param {string} key 
 * @private
 * @memberOf dojox.storage.CookieStorageProvider
*/
dojox.storage.CookieStorageProvider.prototype._assertIsValidKey=function(key){};
/**
 * @class
 * @extends dojox.storage.Provider
 * @returns {dojox.storage.FlashStorageProvider} new instance
*/
dojox.storage.FlashStorageProvider=function(){};
/**
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.showSettingsUI=function(){};
/**
 * @param {mixed} newDelay 
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.setFlushDelay=function(newDelay){};
/**
 * @param {array} keys 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.removeMultiple=function(keys, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.remove=function(key, namespace){};
/**
 * @param {mixed} keys 
 * @param {mixed} values 
 * @param {mixed} resultsHandler 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.putMultiple=function(keys, values, resultsHandler, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} value 
 * @param {mixed} resultsHandler 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.put=function(key, value, resultsHandler, namespace){};
/**
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.isPermanent=function(){};
/**
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.isAvailable=function(){};
/**
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.initialize=function(){};
/**
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.hideSettingsUI=function(){};
/**
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.hasSettingsUI=function(){};
/**
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.getResourceList=function(){};
/**
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.getNamespaces=function(){};
/**
 * @param {array} keys 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.getMultiple=function(keys, namespace){};
/**
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.getMaximumSize=function(){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.getKeys=function(namespace){};
/**
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.getFlushDelay=function(){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.get=function(key, namespace){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.flush=function(namespace){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype.clear=function(namespace){};
/**
 * @param {mixed} statusResult 
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @private
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype._onStatus=function(statusResult, key, namespace){};
/**
 * @private
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype._loaded=function(){};
/**
 * @param {mixed} results 
 * @private
 * @memberOf dojox.storage.FlashStorageProvider
*/
dojox.storage.FlashStorageProvider.prototype._destringify=function(results){};
/**
 * <b>Summary:</b><blockquote>
 *	 Storage provider that uses the features of Google Gears<br>
 *	 to store data (it is saved into the local SQL database<br>
 *	 provided by Gears, using dojox.sql)<br>
 * </blockquote>
 * You can disable this storage provider with the following djConfig<br>
 * variable:<br>
 * var djConfig = { disableGearsStorage: true };<br>
 * <br>
 * Authors of this storage provider-<br>
 * Brad Neuberg, bkn3@columbia.edu<br>
 * <br>
 * <br>
 * instance methods and properties
 * @class
 * @extends dojox.storage.Provider
 * @returns {dojox.storage.GearsStorageProvider} new instance
*/
dojox.storage.GearsStorageProvider=function(){};
/**
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.showSettingsUI=function(){};
/**
 * @param {mixed} keys 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.removeMultiple=function(keys, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.remove=function(key, namespace){};
/**
 * @param {mixed} keys 
 * @param {mixed} values 
 * @param {mixed} resultsHandler 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.putMultiple=function(keys, values, resultsHandler, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} value 
 * @param {mixed} resultsHandler 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.put=function(key, value, resultsHandler, namespace){};
/**
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.isPermanent=function(){};
/**
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.isAvailable=function(){};
/**
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.initialize=function(){};
/**
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.hideSettingsUI=function(){};
/**
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.hasSettingsUI=function(){};
/**
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.getNamespaces=function(){};
/**
 * @param {mixed} keys 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.getMultiple=function(keys, namespace){};
/**
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.getMaximumSize=function(){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.getKeys=function(namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.get=function(key, namespace){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype.clear=function(namespace){};
/**
 * @private
 * @memberOf dojox.storage.GearsStorageProvider
*/
dojox.storage.GearsStorageProvider.prototype._initStorage=function(){};
/**
 * @class
 * @extends dojox.storage.Provider
 * @returns {dojox.storage.LocalStorageProvider} new instance
*/
dojox.storage.LocalStorageProvider=function(){};
/**
 * @param {string} key 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.remove=function(key, namespace){};
/**
 * @param {string} key 
 * @param {object} value 
 * @param {function} resultsHandler 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.put=function(key, value, resultsHandler, namespace){};
/**
 * @param {string} keyName 
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.isValidNamespace=function(keyName){};
/**
 * @param {string} keyName 
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.isValidKey=function(keyName){};
/**
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.isPermanent=function(){};
/**
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.isAvailable=function(){};
/**
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.initialize=function(){};
/**
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.hasSettingsUI=function(){};
/**
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.getNamespaces=function(){};
/**
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.getMaximumSize=function(){};
/**
 * @param {string} [namespace] 
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.getKeys=function(namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.getFullKey=function(key, namespace){};
/**
 * @param {string} key 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.get=function(key, namespace){};
/**
 * @param {string} [namespace] 
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype.clear=function(namespace){};
/**
 * @param {string} haystack 
 * @param {string} needle 
 * @private
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype._beginsWith=function(haystack, needle){};
/**
 * @param {string} namespace 
 * @private
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype._assertIsValidNamespace=function(namespace){};
/**
 * @param {string} key 
 * @private
 * @memberOf dojox.storage.LocalStorageProvider
*/
dojox.storage.LocalStorageProvider.prototype._assertIsValidKey=function(key){};
/**
 * <b>Summary:</b><blockquote>
 *	 A singleton class in charge of the dojox.storage system<br>
 * </blockquote>
 * Initializes the storage systems and figures out the best available<br>
 * storage options on this platform.
 * @class
 * @returns {dojox.storage.manager} new instance
*/
dojox.storage.manager=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines if this platform supports the given storage provider.<br>
 * </blockquote>
 * Example-<br>
 * dojox.storage.manager.supportsProvider(<br>
 * "dojox.storage.InternetExplorerStorageProvider");
 * @param {string} storageClass 
*/
dojox.storage.manager.supportsProvider=function(storageClass){};
/**
 * <b>Summary:</b><blockquote>
 *	 Instructs the storageManager to use the given storage class for<br>
 *	 all storage requests.<br>
 * </blockquote>
 * Example-<br>
 * dojox.storage.setProvider(<br>
 * dojox.storage.IEStorageProvider)
 * @param {mixed} storageClass 
*/
dojox.storage.manager.setProvider=function(storageClass){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the given onLoad listener<br>
 * </blockquote>
 * @param {mixed} func 
*/
dojox.storage.manager.removeOnLoad=function(func){};
/**
 * <b>Summary:</b><blockquote>
 *	 Registers the existence of a new storage provider; used by<br>
 *	 subclasses to inform the manager of their existence. The<br>
 *	 storage manager will select storage providers based on<br>
 *	 their ordering, so the order in which you call this method<br>
 *	 matters.<br>
 * </blockquote>
 * @param {string} name The full class name of this provider, such as
 * &quot;dojox.storage.FlashStorageProvider&quot;.
 * @param {Object} instance An instance of this provider, which we will use to call
 * isAvailable() on.<br>
*/
dojox.storage.manager.register=function(name, instance){};
/**
 * <b>Summary:</b><blockquote>
 *	 The storage provider should call this method when it is loaded<br>
 *	 and ready to be used. Clients who will use the provider will<br>
 *	 connect to this method to know when they can use the storage<br>
 *	 system. You can either use dojo.connect to connect to this<br>
 *	 function, or can use dojox.storage.manager.addOnLoad() to add<br>
 *	 a listener that does not depend on the dojo.event package.<br>
 * </blockquote>
 * Example 1-<br>
 * if(dojox.storage.manager.isInitialized() == false){<br>
 * dojo.connect(dojox.storage.manager, "loaded", TestStorage, "initialize");<br>
 * }else{<br>
 * dojo.connect(dojo, "loaded", TestStorage, "initialize");<br>
 * }<br>
 * Example 2-<br>
 * dojox.storage.manager.addOnLoad(someFunction);<br>
*/
dojox.storage.manager.loaded=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns whether the storage system is initialized and ready to<br>
 *	 be used.<br>
 * </blockquote>
*/
dojox.storage.manager.isInitialized=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns whether any storage options are available.<br>
 * </blockquote>
*/
dojox.storage.manager.isAvailable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initializes the storage system and autodetects the best storage<br>
 *	 provider we can provide on this platform<br>
 * </blockquote>
*/
dojox.storage.manager.initialize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a list of whatever resources are necessary for storage<br>
 *	 providers to work.<br>
 * </blockquote>
 * This will return all files needed by all storage providers for<br>
 * this particular environment type. For example, if we are in the<br>
 * browser environment, then this will return the hidden SWF files<br>
 * needed by the FlashStorageProvider, even if we don't need them<br>
 * for the particular browser we are working within. This is meant<br>
 * to faciliate Dojo Offline, which must retrieve all resources we<br>
 * need offline into the offline cache -- we retrieve everything<br>
 * needed, in case another browser that requires different storage<br>
 * mechanisms hits the local offline cache. For example, if we<br>
 * were to sync against Dojo Offline on Firefox 2, then we would<br>
 * not grab the FlashStorageProvider resources needed for Safari.<br>
*/
dojox.storage.manager.getResourceList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the current provider<br>
 * </blockquote>
*/
dojox.storage.manager.getProvider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Autodetects the best possible persistent storage provider<br>
 *	 available on this platform.<br>
 * </blockquote>
*/
dojox.storage.manager.autodetect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds an onload listener to know when Dojo Offline can be used.<br>
 * </blockquote>
 * Adds a listener to know when Dojo Offline can be used. This<br>
 * ensures that the Dojo Offline framework is loaded and that the<br>
 * local dojox.storage system is ready to be used. This method is<br>
 * useful if you don't want to have a dependency on Dojo Events<br>
 * when using dojox.storage.
 * @param {Function} func A function to call when Dojo Offline is ready to go
*/
dojox.storage.manager.addOnLoad=function(func){};
/**
 * @private
*/
dojox.storage.manager._fireLoaded=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A singleton for working with dojox.storage.<br>
 * </blockquote>
 * dojox.storage exposes the current available storage provider on this<br>
 * platform. It gives you methods such as dojox.storage.put(),<br>
 * dojox.storage.get(), etc.<br>
 * <br>
 * For more details on dojox.storage, see the primary documentation<br>
 * page at<br>
 * http://manual.dojotoolkit.org/storage.html<br>
 * <br>
 * Note for storage provider developers who are creating subclasses-<br>
 * This is the base class for all storage providers Specific kinds of<br>
 * Storage Providers should subclass this and implement these methods.<br>
 * You should avoid initialization in storage provider subclass's<br>
 * constructor; instead, perform initialization in your initialize()<br>
 * method.
 * @see reference <a href="http://manual.dojotoolkit.org/storage.html">http://manual.dojotoolkit.org/storage.html</a>
 * @class
 * @returns {dojox.storage.Provider} new instance
*/
dojox.storage.Provider=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If this provider has a settings UI, determined<br>
 *	 by calling hasSettingsUI(), it is shown.<br>
 * </blockquote>
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.showSettingsUI=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the given keys from this storage system.<br>
 * </blockquote>
 * @param {array} keys 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.removeMultiple=function(keys, namespace){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes the given key from this storage system.<br>
 * </blockquote>
 * @param {string} key 
 * @param {string} [namespace] 
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.remove=function(key, namespace){};
/**
 * <b>Summary:</b><blockquote>
 *	 Puts multiple keys and values into this storage system.<br>
 * </blockquote>
 * Example-<br>
 * var resultsHandler = function(status, key, message){<br>
 * alert("status="+status+", key="+key+", message="+message);<br>
 * };<br>
 * dojox.storage.put(["test"], ["hello world"], resultsHandler);<br>
 * <br>
 * Important note: if you are using Dojo Storage in conjunction with<br>
 * Dojo Offline, then you don't need to provide<br>
 * a resultsHandler; this is because for Dojo Offline we<br>
 * use Google Gears to persist data, which has unlimited data<br>
 * once the user has given permission. If you are using Dojo<br>
 * Storage apart from Dojo Offline, then under the covers hidden<br>
 * Flash might be used, which is both asychronous and which might<br>
 * get denied; in this case you must provide a resultsHandler.
 * @param {array} keys An array of string keys to use when retrieving this value in the future,
 * one per value to be stored
 * @param {array} values An array of values to store; this can be any JavaScript type, though the
 * performance of plain strings is considerably better
 * @param {function} resultsHandler A callback function that will receive three arguments. The
 * first argument is one of three values: dojox.storage.SUCCESS,<br>
 * dojox.storage.FAILED, or dojox.storage.PENDING; these values<br>
 * determine how the put request went. In some storage systems<br>
 * users can deny a storage request, resulting in a<br>
 * dojox.storage.FAILED, while in other storage systems a storage<br>
 * request must wait for user approval, resulting in a<br>
 * dojox.storage.PENDING status until the request is either<br>
 * approved or denied, resulting in another call back with<br>
 * dojox.storage.SUCCESS.<br>
 * The second argument in the call back is the key name that was being stored.<br>
 * The third argument in the call back is an optional message that<br>
 * details possible error messages that might have occurred during<br>
 * the storage process.
 * @param {string} [namespace] Optional string namespace that this value will be placed into;
 * if left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.putMultiple=function(keys, values, resultsHandler, namespace){};
/**
 * <b>Summary:</b><blockquote>
 *	 Puts a key and value into this storage system.<br>
 * </blockquote>
 * Example-<br>
 * var resultsHandler = function(status, key, message, namespace){<br>
 * alert("status="+status+", key="+key+", message="+message);<br>
 * };<br>
 * dojox.storage.put("test", "hello world", resultsHandler);<br>
 * <br>
 * Arguments:<br>
 * <br>
 * status - The status of the put operation, given by<br>
 * dojox.storage.FAILED, dojox.storage.SUCCEEDED, or<br>
 * dojox.storage.PENDING<br>
 * key - The key that was used for the put<br>
 * message - An optional message if there was an error or things failed.<br>
 * namespace - The namespace of the key. This comes at the end since<br>
 * it was added later.<br>
 * <br>
 * Important note: if you are using Dojo Storage in conjunction with<br>
 * Dojo Offline, then you don't need to provide<br>
 * a resultsHandler; this is because for Dojo Offline we<br>
 * use Google Gears to persist data, which has unlimited data<br>
 * once the user has given permission. If you are using Dojo<br>
 * Storage apart from Dojo Offline, then under the covers hidden<br>
 * Flash might be used, which is both asychronous and which might<br>
 * get denied; in this case you must provide a resultsHandler.
 * @param {string} key A string key to use when retrieving this value in the future.
 * @param {object} value A value to store; this can be any JavaScript type.
 * @param {function} resultsHandler A callback function that will receive three arguments. The
 * first argument is one of three values: dojox.storage.SUCCESS,<br>
 * dojox.storage.FAILED, or dojox.storage.PENDING; these values<br>
 * determine how the put request went. In some storage systems<br>
 * users can deny a storage request, resulting in a<br>
 * dojox.storage.FAILED, while in other storage systems a storage<br>
 * request must wait for user approval, resulting in a<br>
 * dojox.storage.PENDING status until the request is either<br>
 * approved or denied, resulting in another call back with<br>
 * dojox.storage.SUCCESS.<br>
 * The second argument in the call back is the key name that was being stored.<br>
 * The third argument in the call back is an optional message that<br>
 * details possible error messages that might have occurred during<br>
 * the storage process.
 * @param {string} [namespace] Optional string namespace that this value will be placed into;
 * if left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.put=function(key, value, resultsHandler, namespace){};
/**
 * <b>Summary:</b><blockquote>
 *	 If a function is assigned to this property, then when the settings<br>
 *	 provider's UI is closed this function is called. Useful, for example,<br>
 *	 if the user has just cleared out all storage for this provider using<br>
 *	 the settings UI, and you want to update your UI.<br>
 * </blockquote>
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.onHideSettingsUI=function(){};
/**
 * @param {mixed} keys 
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.isValidKeyArray=function(keys){};
/**
 * <b>Summary:</b><blockquote>
 *	 Subclasses can call this to ensure that the key given is valid<br>
 *	 in a consistent way across different storage providers. We use<br>
 *	 the lowest common denominator for key values allowed: only<br>
 *	 letters, numbers, and underscores are allowed. No spaces.<br>
 * </blockquote>
 * @param {string} keyName 
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.isValidKey=function(keyName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns whether this storage provider's values are persisted<br>
 *	 when this platform is shutdown.<br>
 * </blockquote>
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.isPermanent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns whether this storage provider is available on this<br>
 *	 platform.<br>
 * </blockquote>
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.isAvailable=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Allows this storage provider to initialize itself. This is<br>
 *	 called after the page has finished loading, so you can not do<br>
 *	 document.writes(). Storage Provider subclasses should initialize<br>
 *	 themselves inside of here rather than in their function<br>
 *	 constructor.<br>
 * </blockquote>
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.initialize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If this provider has a settings UI, hides it.<br>
 * </blockquote>
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.hideSettingsUI=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines whether this provider has a settings UI.<br>
 * </blockquote>
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.hasSettingsUI=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determines whether the storage has the given key.<br>
 * </blockquote>
 * @param {string} key 
 * @param {string} [namespace] 
 * @returns {Boolean} -
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.hasKey=function(key, namespace){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a list of URLs that this<br>
 *	 storage provider might depend on.<br>
 * </blockquote>
 * This method returns a list of URLs that this<br>
 * storage provider depends on to do its work.<br>
 * This list is used by the Dojo Offline Toolkit<br>
 * to cache these resources to ensure the machinery<br>
 * used by this storage provider is available offline.<br>
 * What is returned is an array of URLs.<br>
 * Note that Dojo Offline uses Gears as its native<br>
 * storage provider, and does not support using other<br>
 * kinds of storage providers while offline anymore.
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.getResourceList=function(){};
/**
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.getNamespaces=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the valuse corresponding to each of the given keys.<br>
 *	 Returns a null array element for each given key that is<br>
 *	 not in the storage system.<br>
 * </blockquote>
 * @param {array} keys An array of string keys to get the value of.
 * @param {string} [namespace] Optional string namespace that this value will be retrieved from;
 * if left off, the value will be retrieved from dojox.storage.DEFAULT_NAMESPACE<br>
 * return: Returns any JavaScript object type; null if the key is not present
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.getMultiple=function(keys, namespace){};
/**
 * <b>Summary:</b><blockquote>
 *	 The maximum storage allowed by this provider<br>
 * </blockquote>
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.getMaximumSize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Enumerates all of the available keys in this storage system.<br>
 *	 return: Array of available keys<br>
 * </blockquote>
 * @param {string} [namespace] 
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.getKeys=function(namespace){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the value with the given key. Returns null if this key is<br>
 *	 not in the storage system.<br>
 * </blockquote>
 * @param {string} key A string key to get the value of.
 * @param {string} [namespace] Optional string namespace that this value will be retrieved from;
 * if left off, the value will be retrieved from dojox.storage.DEFAULT_NAMESPACE<br>
 * return: Returns any JavaScript object type; null if the key is not present
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.get=function(key, namespace){};
/**
 * <b>Summary:</b><blockquote>
 *	 Completely clears this storage system of all of it's values and<br>
 *	 keys. If 'namespace' is provided just clears the keys in that<br>
 *	 namespace.<br>
 * </blockquote>
 * @param {string} [namespace] 
 * @memberOf dojox.storage.Provider
*/
dojox.storage.Provider.prototype.clear=function(namespace){};
/**
 * <b>Summary:</b><blockquote>
 *	 Storage provider that uses WHAT Working Group features in Firefox 2<br>
 *	 to achieve permanent storage.<br>
 * </blockquote>
 * The WHAT WG storage API is documented at<br>
 * http://www.whatwg.org/specs/web-apps/current-work/#scs-client-side<br>
 * <br>
 * You can disable this storage provider with the following djConfig<br>
 * variable:<br>
 * var djConfig = { disableWhatWGStorage: true };<br>
 * <br>
 * Authors of this storage provider-<br>
 * JB Boisseau, jb.boisseau@eutech-ssii.com<br>
 * Brad Neuberg, bkn3@columbia.edu
 * @see reference <a href="http://www.whatwg.org/specs/web-apps/current-work/#scs-client-side">http://www.whatwg.org/specs/web-apps/current-work/#scs-client-side</a>
 * @class
 * @extends dojox.storage.Provider
 * @returns {dojox.storage.WhatWGStorageProvider} new instance
*/
dojox.storage.WhatWGStorageProvider=function(){};
/**
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.showSettingsUI=function(){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.remove=function(key, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} value 
 * @param {mixed} resultsHandler 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.put=function(key, value, resultsHandler, namespace){};
/**
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.isPermanent=function(){};
/**
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.isAvailable=function(){};
/**
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.initialize=function(){};
/**
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.hideSettingsUI=function(){};
/**
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.hasSettingsUI=function(){};
/**
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.getNamespaces=function(){};
/**
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.getMaximumSize=function(){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.getKeys=function(namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.getFullKey=function(key, namespace){};
/**
 * @param {mixed} key 
 * @param {mixed} namespace 
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.get=function(key, namespace){};
/**
 * @param {mixed} namespace 
 * @memberOf dojox.storage.WhatWGStorageProvider
*/
dojox.storage.WhatWGStorageProvider.prototype.clear=function(namespace){};
/**
 * <b>Summary:</b><blockquote>
 *	 The constructor for the LightstreamerStore.<br>
 * </blockquote>
 * @param {pushPage} pushPage This is the pushPage created by using the typical Lightstreamer web client
 * @param {String[]} group An array of the item names you wish to get back from Lightstreamer.
 * @param {String[]} schema The list of fields for each item you wish to get back from Lightstreamer.
 * @param {String} dataAdapter This is the data adapter to connect to (defined with the Lightstreamer server)
*/
dojox.store.LightstreamerStore=function(pushPage, group, schema, dataAdapter){};
/**
 * <b>Summary:</b><blockquote>
 *	 The constructor for the LightstreamerStore.<br>
 * </blockquote>
 * @class
 * @param {pushPage} pushPage This is the pushPage created by using the typical Lightstreamer web client
 * @param {String[]} group An array of the item names you wish to get back from Lightstreamer.
 * @param {String[]} schema The list of fields for each item you wish to get back from Lightstreamer.
 * @param {String} dataAdapter This is the data adapter to connect to (defined with the Lightstreamer server)
 * @returns {dojox.store.LightstreamerStore} new instance
*/
dojox.store.LightstreamerStore=function(pushPage, group, schema, dataAdapter){};
/**
 * <b>Summary:</b><blockquote>
 *	 Start receiving streams from the Lightstreamer server.<br>
 * </blockquote>
 * The main method of the LightstreamerStore, query opens up a data stream<br>
 * from a Lightstreamer server (based on the pushPage definition used in the<br>
 * constructor) and sets up a way to observe the returned results from said<br>
 * stream.  It is based on Lightstreamer's NonVisualTable object, and by<br>
 * default will run the return from the Lightstreamer server through a<br>
 * private "translate" function, which takes the updateInfo object normally<br>
 * returned by Lightstreamer's web client and converts it into a straight<br>
 * JSON-like object that can be used for data consumption.
 * @param {String} query The name of the mode to use for the resulting stream. (RAW, MERGE, COMMAND or DISTINCT)
 * @param {LightstreamerStore.__QueryOptionsArgs} options Additional options to consume. See http://www.lightstreamer.com/docs/client_web_jsdoc/NonVisualTable.html
 * for more information on these properties. All properties are optional.
 * @example
 * Query a server:
 * 	var results = myLSStore.query("MERGE", { dataAdapter: "QUOTE_ADAPTER", snapshotRequired: true });
 * 	results.observe(function(obj){
 * 		//	do something with obj
 * 	});
 * @memberOf dojox.store.LightstreamerStore
*/
dojox.store.LightstreamerStore.prototype.query=function(query, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a (cached) object from the Lightstreamer.<br>
 * </blockquote>
 * @param {String} id The identity of the object to retrieve.
 * @memberOf dojox.store.LightstreamerStore
*/
dojox.store.LightstreamerStore.prototype.get=function(id){};
/**
 * @param {String} [dataAdapter] The data adapter to be used for a query.
 * @param {Array} [itemsRange] The range of items in the form of [ start, end ] to receive back from Lightstreamer.
 * @param {Number} [requestedBufferSize] The length of the internal queuing buffers to be used by the server.
 * @param {Number} [requestedMaxFrequency] The maximum update frequency (updates per second) to be used by Lightstreamer.
 * @param {String} [selector] The name of a selector, to be recognized by the Metadata Adapter in Lightstreamer.
 * @param {Boolean} [snapshotRequired] Whether or not to request snapshot delivery.
 * @param {Array} [commandLogic] An array of arguments in the following form: [ flag, commandPos, keyPos, underSchema, underDataAdapter ]
 * @private
*/
dojox.store.LightstreamerStore.__queryOptionsArgs=function(dataAdapter, itemsRange, requestedBufferSize, requestedMaxFrequency, selector, snapshotRequired, commandLogic){};
/**
 * @class
 * @private
 * @returns {dojox.store.LightstreamerStore.__queryOptionsArgs} new instance
*/
dojox.store.LightstreamerStore.__queryOptionsArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This class provides a bidi transformation engine, i.e.<br>
 *	 functions for reordering and shaping bidi text.<br>
 * </blockquote>
 * Bidi stands for support for languages with a bidirectional script.<br>
 * <br>
 * Usually Unicode Bidi Algorithm used by OS platform (and web browsers) is capable of properly transforming<br>
 * Bidi text and as a result it is adequately displayed on the screen. However, in some situations,<br>
 * Unicode Bidi Algorithm is not invoked or is not properly applied. This may occur in situation in which software<br>
 * responsible for rendering the text is not leveraging Unicode Bidi Algorithm implemented by OS (e.g. dojox.GFX renderers).<br>
 * <br>
 * Bidi engine provided in this class implements Unicode Bidi Algorithm as specified at:<br>
 * http://www.unicode.org/reports/tr9/.<br>
 * <br>
 * For more information on basic Bidi concepts please read following article:<br>
 * "Bidirectional script support - A primer" available from:<br>
 * http://www.ibm.com/developerworks/websphere/library/techarticles/bidi/bidigen.html<br>
 * <br>
 * As of February 2011, Bidi engine has following limitations:<br>
 * 1. No support for following numeric shaping options:<br>
 * H - Hindi,<br>
 * C - Contextual,<br>
 * N - Nominal.<br>
 * 2. No support for following shaping options:<br>
 * I - Initial shaping,<br>
 * M - Middle shaping,<br>
 * F - Final shaping,<br>
 * B - Isolated shaping.<br>
 * 3. No support for source-to-target or/and target-to-source maps.<br>
 * 4. No support for LRE/RLE/LRO/RLO/PDF (they are handled like neutrals).<br>
 * 5. No support for Windows compatibility.<br>
 * 6. No support for  insert/remove marks.<br>
 * 7. No support for code pages (currently only UTF-8 is supported. Ideally we should convert from any code page to UTF-8).
 * @see reference <a href="http://www.unicode.org/reports/tr9/.">http://www.unicode.org/reports/tr9/.</a>
 * @class
 * @returns {dojox.string.BidiEngine} new instance
*/
dojox.string.BidiEngine=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return true if text contains RTL directed character.<br>
 * </blockquote>
 * Iterates over the text string, letter by letter starting from its beginning,<br>
 * searching for RTL directed character.<br>
 * Return true if found else false. Needed for vml transformation.
 * @param {String} text The source string.
 * @memberOf dojox.string.BidiEngine
*/
dojox.string.BidiEngine.prototype.hasBidiChar=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Determine the base direction of a bidi text according<br>
 *	 to its first strong directional character.<br>
 * </blockquote>
 * @param {String} text The text to check.
 * @memberOf dojox.string.BidiEngine
*/
dojox.string.BidiEngine.prototype.checkContextual=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Central public API for Bidi engine. Transforms the text according to formatIn, formatOut parameters.<br>
 *	 If formatIn or formatOut parametrs are not valid throws an exception.<br>
 *	 inputText:<br>
 *	 Input text subject to application of Bidi transformation.<br>
 * </blockquote>
 * Both formatIn and formatOut parameters are 5 letters long strings.<br>
 * For example - "ILYNN". Each letter is associated with specific attribute of Bidi layout.<br>
 * Possible and default values for each one of the letters are provided below:<br>
 * <br>
 * First letter:<br>
 * Letter position/index:<br>
 * 1<br>
 * Letter meaning:<br>
 * Ordering Schema.<br>
 * Possible values:<br>
 * I - Implicit (Logical).<br>
 * V - Visual.<br>
 * Default value:<br>
 * I<br>
 * <br>
 * Second letter:<br>
 * Letter position/index:<br>
 * 2<br>
 * Letter meaning:<br>
 * Orientation.<br>
 * Possible values:<br>
 * L - Left To Right.<br>
 * R - Right To Left.<br>
 * C - Contextual Left to Right.<br>
 * D - Contextual Right to Left.<br>
 * Default value:<br>
 * L<br>
 * <br>
 * Third letter:<br>
 * Letter position/index:<br>
 * 3<br>
 * Letter meaning:<br>
 * Symmetric Swapping.<br>
 * Possible values:<br>
 * Y - Symmetric swapping is on.<br>
 * N - Symmetric swapping is off.<br>
 * Default value:<br>
 * Y<br>
 * <br>
 * Fourth letter:<br>
 * Letter position/index:<br>
 * 4<br>
 * Letter meaning:<br>
 * Shaping.<br>
 * Possible values:<br>
 * S - Text is shaped.<br>
 * N - Text is not shaped.<br>
 * Default value:<br>
 * N<br>
 * <br>
 * Fifth letter:<br>
 * Letter position/index:<br>
 * 5<br>
 * Letter meaning:<br>
 * Numeric Shaping.<br>
 * Possible values:<br>
 * N - Nominal.<br>
 * Default value:<br>
 * N<br>
 * <br>
 * The output of this function is original text (passed via first argument) transformed from input Bidi layout (second argument)<br>
 * to output Bidi layout (last argument).<br>
 * <br>
 * Sample call:<br>
 * 	mytext = bidiTransform("HELLO WORLD", "ILYNN", "VLYNN");<br>
 * In this case, "HELLO WORLD" text is transformed from Logical - LTR to Visual - LTR Bidi layout with<br>
 * default values for symmetric swapping (Yes), shaping (Not shaped) and numeric shaping (Nominal).
 * @param {String} text 
 * @param {String} formatIn Input Bidi layout in which inputText is passed to the function.
 * @param {String} formatOut Output Bidi layout to which inputText should be transformed.
 * @memberOf dojox.string.BidiEngine
*/
dojox.string.BidiEngine.prototype.bidiTransform=function(text, formatIn, formatOut){};
/**
 * <b>Summary:</b><blockquote>
 *	 This class executes doctests.<br>
 * </blockquote>
 * DocTests are tests that are defined inside the comment.<br>
 * A doctest looks as if it was copied from the shell (which it mostly is).<br>
 * A doctest is executed when the following conditions match:<br>
 * 1) all lines are comments<br>
 * 2) the line always starts with spaces/tabs followed by "//"<br>
 * and at least one space<br>
 * 3) the line(s) of the test to execute starts with "&gt;&gt;&gt;"<br>
 * preceeded by what is described in 2)<br>
 * 4) the first line after 3) starting without "&gt;&gt;&gt;" is the exptected result.<br>
 * preceeded by what is described in 2)<br>
 * 5) the test sequence is terminated by an empty line, or the next<br>
 * test in the following line, or a new line that does not start as described in 2)<br>
 * (simple said: is not a comment)<br>
 * preceeded by what is described in 2)<br>
 * <br>
 * I.e. the following is a simple doctest, that will actually also be run<br>
 * if you run this class against this file here:<br>
 * &gt;&gt;&gt; 1+1 // A simple test case. Terminated by an empty line<br>
 * 2<br>
 * <br>
 * &gt;&gt;&gt; 1==2<br>
 * false<br>
 * &gt;&gt;&gt; "a"+"b" // Also without the empty line before, this is a new test.<br>
 * "ab"<br>
 * <br>
 * &gt;&gt;&gt; var anything = "anything" // Multiple commands for one test.<br>
 * &gt;&gt;&gt; "something"==anything<br>
 * false<br>
 * <br>
 * DocTests are great for inline documenting a class or method, they also<br>
 * are very helpful in understanding what the class/method actually does.<br>
 * They don't make sense everywhere, but sometimes they are really handy.<br>
*/
dojox.testing.DocTest=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This class executes doctests.<br>
 * </blockquote>
 * DocTests are tests that are defined inside the comment.<br>
 * A doctest looks as if it was copied from the shell (which it mostly is).<br>
 * A doctest is executed when the following conditions match:<br>
 * 1) all lines are comments<br>
 * 2) the line always starts with spaces/tabs followed by "//"<br>
 * and at least one space<br>
 * 3) the line(s) of the test to execute starts with "&gt;&gt;&gt;"<br>
 * preceeded by what is described in 2)<br>
 * 4) the first line after 3) starting without "&gt;&gt;&gt;" is the exptected result.<br>
 * preceeded by what is described in 2)<br>
 * 5) the test sequence is terminated by an empty line, or the next<br>
 * test in the following line, or a new line that does not start as described in 2)<br>
 * (simple said: is not a comment)<br>
 * preceeded by what is described in 2)<br>
 * <br>
 * I.e. the following is a simple doctest, that will actually also be run<br>
 * if you run this class against this file here:<br>
 * &gt;&gt;&gt; 1+1 // A simple test case. Terminated by an empty line<br>
 * 2<br>
 * <br>
 * &gt;&gt;&gt; 1==2<br>
 * false<br>
 * &gt;&gt;&gt; "a"+"b" // Also without the empty line before, this is a new test.<br>
 * "ab"<br>
 * <br>
 * &gt;&gt;&gt; var anything = "anything" // Multiple commands for one test.<br>
 * &gt;&gt;&gt; "something"==anything<br>
 * false<br>
 * <br>
 * DocTests are great for inline documenting a class or method, they also<br>
 * are very helpful in understanding what the class/method actually does.<br>
 * They don't make sense everywhere, but sometimes they are really handy.
 * @class
 * @returns {dojox.testing.DocTest} new instance
*/
dojox.testing.DocTest=function(){};
/**
 * @param {mixed} commands 
 * @param {mixed} expected 
 * @memberOf dojox.testing.DocTest
*/
dojox.testing.DocTest.prototype.runTest=function(commands, expected){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the doctests in the module given.<br>
 * </blockquote>
 * @param {mixed} moduleName 
 * @example
 * doctest = new dojox.testing.DocTest();
 * doctest.run("dojox.testing.DocTest");
 * doctest.errors should finally be an empty array.
 * // The above is not a doctest, because it just would
 * //	execute itself in a never ending loop.
 * 
 * &gt;&gt;&gt; true==true // Test a new line terminating the test.
 * true
 * 
 * &gt;&gt;&gt; true==true // Test a new test terminating the test.
 * true
 * &gt;&gt;&gt; true==true // Test a "not a comment"-line, especially an empty line terminating the test.
 * true
 * @memberOf dojox.testing.DocTest
*/
dojox.testing.DocTest.prototype.run=function(moduleName){};
/**
 * @param {String} data 
 * @memberOf dojox.testing.DocTest
*/
dojox.testing.DocTest.prototype.getTestsFromString=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extract the tests from the given module or string.<br>
 *	 examples:<br>
 *	 &amp;gt;&amp;gt;&amp;gt; dojo.isArray(new dojox.testing.DocTest().getTests(&amp;quot;dojox.testing.DocTest&amp;quot;)) // Use the module name to extract the tests from.<br>
 *	 true<br>
 * </blockquote>
 * @param {String} moduleName 
 * @memberOf dojox.testing.DocTest
*/
dojox.testing.DocTest.prototype.getTests=function(moduleName){};
/**
 * <b>Summary:</b><blockquote>
 *	 Each element in the array contains the test in the first element,<br>
 *	 and the expected result in the second element.<br>
 * </blockquote>
 * @param {Array} tests Make sure that the types are compared properly. There used to be
 * the bug that a return value false was compared to &quot;false&quot; which<br>
 * made the test fail. This is fixed and should be verified by the<br>
 * following tests.<br>
 * &gt;&gt;&gt; false<br>
 * false<br>
 * <br>
 * &gt;&gt;&gt; &quot;false&quot;<br>
 * &quot;false&quot;<br>
 * <br>
 * &gt;&gt;&gt; true<br>
 * true<br>
 * <br>
 * &gt;&gt;&gt; 1<br>
 * 1<br>
 * <br>
 * &gt;&gt;&gt; &quot;s&quot;<br>
 * &quot;s&quot;<br>
 * <br>
 * &gt;&gt;&gt; dojo.toJson({one:1})<br>
 * &quot;{&quot;one&quot;:1}&quot;
 * @private
 * @memberOf dojox.testing.DocTest
*/
dojox.testing.DocTest.prototype._run=function(tests){};
/**
 * <b>Summary:</b><blockquote>
 *	 Parse the given string for tests.<br>
 * </blockquote>
 * @param {String} data 
 * @param {Boolean} insideComments Boolean, if false &quot;data&quot; contains only the pure tests, comments already stripped.
 * @private
 * @memberOf dojox.testing.DocTest
*/
dojox.testing.DocTest.prototype._getTestsFromString=function(data, insideComments){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if a parameter is ready, and if not,<br>
 *	 &amp;quot;do later&amp;quot;. doLater will ping the parameter<br>
 *	 until it evaluates to something (truthy).<br>
 *	 It thens calls the caller with original<br>
 *	 arguments, using the supplied context or<br>
 *	 window.<br>
 * </blockquote>
 * dojox.timing.doLater(conditional) is testing if the call<br>
 * should be done later. So it returns<br>
 * true if the param is false.<br>
 * arguments:
 * @param {anything} conditional Can be a property that eventually gets set, or
 * an expression, method... anything that can be<br>
 * evaluated.
 * @param {Object} context The namespace where the call originated.
 * Defaults to global and anonymous functions
 * @param {Number} interval Poll time to check conditional in Milliseconds
 * @returns {Boolean} -
 * @example
 *  setTimeout(function(){
 *  		if(dojox.timing.doLater(app.ready)){return;}
 *  		console.log("Code is ready! anonymous.function SUCCESS")
 *  	},700);
*/
dojox.timing.doLater=function(conditional, context, interval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Timer object executes an &amp;quot;onTick()&amp;quot; method repeatedly at a specified interval.<br>
 *	 repeatedly at a given interval.<br>
 * </blockquote>
 * @param {int} interval Interval between function calls, in milliseconds.
*/
dojox.timing.Timer=function(interval){};
/**
 * @param {Function} fn 
 * @param {dojox.timing.threadPriorities} [priority] 
*/
dojox.timing.Thread=function(fn, priority){};
/**
 * @param {function} input the function executed when the internal queue reaches minimumSize
 * @param {function} output the function executed on internal tick
 * @param {int} interval the interval in ms at which the output function is fired.
 * @param {int} minimum the minimum number of elements in the internal queue.
 * @param {array} initialData 
*/
dojox.timing.Streamer=function(input, output, interval, minimum, initialData){};
/**
 * <b>Summary:</b><blockquote>
 *	 This class provides functionality to really sequentialize<br>
 *	 function calls. You need to provide a list of functions and<br>
 *	 some parameters for each (like: pauseBefore) and they will<br>
 *	 be run one after another. This can be very useful for slideshows<br>
 *	 or alike things.<br>
 * </blockquote>
 * This array will contain the sequence defines resolved, so that<br>
 * ie. repeat:10 will result in 10 elements in the sequence, so<br>
 * the repeat handling is easier and we don't need to handle that<br>
 * many extra cases. Also the doneFunction, if given is added at the<br>
 * end of the resolved-sequences.<br>
*/
dojox.timing.Sequence=function(){};
/**
 * @namespace
*/
dojox.timing.threadStates={};
/**
 * @namespace
*/
dojox.timing.threadPriorities={};
/**
 * <b>Summary:</b><blockquote>
 *	 Timer object executes an &amp;quot;onTick()&amp;quot; method repeatedly at a specified interval.<br>
 *	 repeatedly at a given interval.<br>
 * </blockquote>
 * @class
 * @returns {dojox.timing.Timer} new instance
*/
dojox.timing.Timer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stop the timer.<br>
 * </blockquote>
 * Calls the "onStop()" handler, if defined.
 * @memberOf dojox.timing.Timer
*/
dojox.timing.Timer.prototype.stop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Start the timer ticking.<br>
 * </blockquote>
 * Calls the "onStart()" handler, if defined.<br>
 * Note that the onTick() function is not called right away,<br>
 * only after first interval passes.
 * @memberOf dojox.timing.Timer
*/
dojox.timing.Timer.prototype.start=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reset the interval of a timer, whether running or not.<br>
 * </blockquote>
 * @param {New} interval interval, in milliseconds.
 * @memberOf dojox.timing.Timer
*/
dojox.timing.Timer.prototype.setInterval=function(interval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Method called every time the interval passes.  Override to do something useful.<br>
 * </blockquote>
 * @memberOf dojox.timing.Timer
*/
dojox.timing.Timer.prototype.onTick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reset the interval of a timer, whether running or not.<br>
 * </blockquote>
 * @class
 * @returns {dojox.timing.Timer.setInterval} new instance
*/
dojox.timing.Timer.setInterval=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Start the timer ticking.<br>
 * </blockquote>
 * Calls the "onStart()" handler, if defined.<br>
 * Note that the onTick() function is not called right away,<br>
 * only after first interval passes.
 * @class
 * @returns {dojox.timing.Timer.start} new instance
*/
dojox.timing.Timer.start=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stop the timer.<br>
 * </blockquote>
 * Calls the "onStop()" handler, if defined.
 * @class
 * @returns {dojox.timing.Timer.stop} new instance
*/
dojox.timing.Timer.stop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This class provides functionality to really sequentialize<br>
 *	 function calls. You need to provide a list of functions and<br>
 *	 some parameters for each (like: pauseBefore) and they will<br>
 *	 be run one after another. This can be very useful for slideshows<br>
 *	 or alike things.<br>
 * </blockquote>
 * This array will contain the sequence defines resolved, so that<br>
 * ie. repeat:10 will result in 10 elements in the sequence, so<br>
 * the repeat handling is easier and we don't need to handle that<br>
 * many extra cases. Also the doneFunction, if given is added at the<br>
 * end of the resolved-sequences.
 * @class
 * @returns {dojox.timing.Sequence} new instance
*/
dojox.timing.Sequence=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stop the currently running sequence.<br>
 * </blockquote>
 * This can only interrupt the sequence not the last function that<br>
 * had been started. If the last function was i.e. a slideshow<br>
 * that is handled inside a function that you have given as<br>
 * one sequence item it cant be stopped, since it is not controlled<br>
 * by this object here. In this case it would be smarter to<br>
 * run the slideshow using a sequence object so you can also stop<br>
 * it using this method.
 * @memberOf dojox.timing.Sequence
*/
dojox.timing.Sequence.prototype.stop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This method just provides a hook from the outside, so that<br>
 *	 an interrupted sequence can be continued.<br>
 * </blockquote>
 * @memberOf dojox.timing.Sequence
*/
dojox.timing.Sequence.prototype.goOn=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run the passed sequence definition<br>
 * </blockquote>
 * @param {Array} defs The sequence of actions
 * @param {Function|Array} [doneFunction] The function to call when done
 * @memberOf dojox.timing.Sequence
*/
dojox.timing.Sequence.prototype.go=function(defs, doneFunction){};
/**
 * <b>Summary:</b><blockquote>
 *	 Execute one task of this._defsResolved.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.timing.Sequence
*/
dojox.timing.Sequence.prototype._go=function(){};
/**
 * @class
 * @returns {dojox.timing.Streamer} new instance
*/
dojox.timing.Streamer=function(){};
/**
*/
dojox.timing.Streamer.stop=function(){};
/**
*/
dojox.timing.Streamer.start=function(){};
/**
 * @param {int} ms 
*/
dojox.timing.Streamer.setInterval=function(ms){};
/**
*/
dojox.timing.Streamer.outputFunction=function(){};
/**
 * @param {dojox.timing.Streamer} obj 
*/
dojox.timing.Streamer.onTick=function(obj){};
/**
*/
dojox.timing.Streamer.onStop=function(){};
/**
*/
dojox.timing.Streamer.onStart=function(){};
/**
*/
dojox.timing.Streamer.inputFunction=function(){};
/**
 * @class
 * @returns {dojox.timing.Thread} new instance
*/
dojox.timing.Thread=function(){};
/**
*/
dojox.timing.Thread.invoke=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the UUID was initialized with a valid value.<br>
 * </blockquote>
 * @param {String} uuidString 
 * @returns {boolean} -
*/
dojox.uuid.isValid=function(uuidString){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a version number that indicates what type of UUID this is.<br>
 *	 Returns one of the enumerated dojox.uuid.version values.<br>
 * </blockquote>
 * @param {String} uuidString 
 * @returns {dojox.uuid.version} -
 * @example
 * var version = dojox.uuid.getVersion("b4308fb0-86cd-11da-a72b-0800200c9a66");
 * dojox.uuid.assert(version == dojox.uuid.version.TIME_BASED);
*/
dojox.uuid.getVersion=function(uuidString){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a variant code that indicates what type of UUID this is.<br>
 *	 Returns one of the enumerated dojox.uuid.variant values.<br>
 * </blockquote>
 * @param {String} uuidString 
 * @returns {dojox.uuid.variant} -
 * @example
 * var variant = dojox.uuid.getVariant("3b12f1df-5232-4804-897e-917bf397618a");
 * dojox.uuid.assert(variant == dojox.uuid.variant.DCE);
 * @example
 * "3b12f1df-5232-4804-897e-917bf397618a"
 * ^
 * 
 * (variant "10__" == DCE)
*/
dojox.uuid.getVariant=function(uuidString){};
/**
 * <b>Summary:</b><blockquote>
 *	 If this is a version 1 UUID (a time-based UUID), this method returns<br>
 *	 the timestamp value encoded in the UUID.  The caller can ask for the<br>
 *	 timestamp to be returned either as a JavaScript Date object or as a<br>
 *	 15-character string of hex digits.<br>
 * </blockquote>
 * @param {String} uuidString 
 * @param {String} [returnType] Any of these five values: &quot;string&quot;, String, &quot;hex&quot;, &quot;date&quot;, Date
 * 
 * @returns {String (e.g. "Mon, 16 Jan 2006 20:21:41 GMT")|String (e.g. "1da86cdb4308fb0")|Date} -examples:
 * var uuidString = "b4308fb0-86cd-11da-a72b-0800200c9a66";<br>
 * var date, string, hexString;<br>
 * date   = dojox.uuid.getTimestamp(uuidString);		 // returns a JavaScript Date<br>
 * date   = dojox.uuid.getTimestamp(uuidString, Date);	 //<br>
 * string = dojox.uuid.getTimestamp(uuidString, String);   // "Mon, 16 Jan 2006 20:21:41 GMT"<br>
 * hexString = dojox.uuid.getTimestamp(uuidString, "hex"); // "1da86cdb4308fb0"<br>
*/
dojox.uuid.getTimestamp=function(uuidString, returnType){};
/**
 * <b>Summary:</b><blockquote>
 *	 If this is a version 1 UUID (a time-based UUID), getNode() returns a<br>
 *	 12-character string with the &amp;quot;node&amp;quot; or &amp;quot;pseudonode&amp;quot; portion of the UUID,<br>
 *	 which is the rightmost 12 characters.<br>
 * </blockquote>
 * @param {String} uuidString 
 * @returns {String (a 12-character string, which will look something like "917bf397618a")} -
*/
dojox.uuid.getNode=function(uuidString){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function generates time-based UUIDs, meaning &amp;quot;version 1&amp;quot; UUIDs.<br>
 * </blockquote>
 * For more info, see<br>
 * http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt<br>
 * http://www.infonuovo.com/dma/csdocs/sketch/instidid.htm<br>
 * http://kruithof.xs4all.nl/uuid/uuidgen<br>
 * http://www.opengroup.org/onlinepubs/009629399/apdxa.htm#tagcjh_20<br>
 * http://jakarta.apache.org/commons/sandbox/id/apidocs/org/apache/commons/id/uuid/clock/Clock.html
 * @see reference <a href="http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt">http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt</a>
 * @param {String} [node] A 12-character hex string representing either a pseudo-node or
 * hardware-node (an IEEE 802.3 network node).  A hardware-node<br>
 * will be something like &quot;017bf397618a&quot;, always with the first bit<br>
 * being 0.  A pseudo-node will be something like &quot;f17bf397618a&quot;,<br>
 * always with the first bit being 1.<br>
 * examples:<br>
 * string = dojox.uuid.generateTimeBasedUuid();<br>
 * string = dojox.uuid.generateTimeBasedUuid(&quot;017bf397618a&quot;);<br>
 * dojox.uuid.generateTimeBasedUuid.setNode(&quot;017bf397618a&quot;);<br>
 * string = dojox.uuid.generateTimeBasedUuid(); // the generated UUID has node == &quot;017bf397618a&quot;
 * @returns {String} -
*/
dojox.uuid.generateTimeBasedUuid=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function generates random UUIDs, meaning &amp;quot;version 4&amp;quot; UUIDs.<br>
 * </blockquote>
 * A typical generated value would be something like this:<br>
 * "3b12f1df-5232-4804-897e-917bf397618a"<br>
 * <br>
 * For more information about random UUIDs, see sections 4.4 and<br>
 * 4.5 of RFC 4122: http://tools.ietf.org/html/rfc4122#section-4.4<br>
 * <br>
 * This generator function is designed to be small and fast,<br>
 * but not necessarily good.<br>
 * <br>
 * Small: This generator has a small footprint. Once comments are<br>
 * stripped, it's only about 25 lines of code, and it doesn't<br>
 * dojo.require() any other modules.<br>
 * <br>
 * Fast: This generator can generate lots of new UUIDs fairly quickly<br>
 * (at least, more quickly than the other dojo UUID generators).<br>
 * <br>
 * Not necessarily good: We use Math.random() as our source<br>
 * of randomness, which may or may not provide much randomness.<br>
 * examples:<br>
 * var string = dojox.uuid.generateRandomUuid();
 * @see reference <a href="http://tools.ietf.org/html/rfc4122#section-4.4">http://tools.ietf.org/html/rfc4122#section-4.4</a>
 * @returns {for example: "3B12F1DF"|String} -
*/
dojox.uuid.generateRandomUuid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function returns the Nil UUID: &amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;.<br>
 * </blockquote>
 * The Nil UUID is described in section 4.1.7 of<br>
 * RFC 4122: http://tools.ietf.org/html/rfc4122#section-4.1.7<br>
 * examples:<br>
 * var string = dojox.uuid.generateNilUuid();
 * @see reference <a href="http://tools.ietf.org/html/rfc4122#section-4.1.7">http://tools.ietf.org/html/rfc4122#section-4.1.7</a>
 * @returns {String} -
*/
dojox.uuid.generateNilUuid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Throws an exception if the assertion fails.<br>
 * </blockquote>
 * If the asserted condition is true, this method does nothing. If the<br>
 * condition is false, we throw an error with a error message.
 * @param {Boolean} booleanValue Must be true for the assertion to succeed.
 * @param {String} [message] A string describing the assertion.
 * throws: Throws an Error if 'booleanValue' is false.<br>
*/
dojox.uuid.assert=function(booleanValue, message){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is the constructor for the Uuid class.  The Uuid class offers<br>
 *	 methods for inspecting existing UUIDs.<br>
 * </blockquote>
 * @param {String} [input] A 36-character string that conforms to the UUID spec.
 * examples:<br>
 * var uuid;<br>
 * uuid = new dojox.uuid.Uuid(&quot;3b12f1df-5232-4804-897e-917bf397618a&quot;);<br>
 * uuid = new dojox.uuid.Uuid(); // &quot;00000000-0000-0000-0000-000000000000&quot;<br>
 * uuid = new dojox.uuid.Uuid(dojox.uuid.generateRandomUuid());<br>
 * uuid = new dojox.uuid.Uuid(dojox.uuid.generateTimeBasedUuid());<br>
 * dojox.uuid.Uuid.setGenerator(dojox.uuid.generateRandomUuid);<br>
 * uuid = new dojox.uuid.Uuid();<br>
 * dojox.uuid.assert(!uuid.isEqual(dojox.uuid.NIL_UUID));<br>
*/
dojox.uuid.Uuid=function(input){};
/**
 * @namespace
*/
dojox.uuid.version={};
/**
 * @namespace
*/
dojox.uuid.variant={};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the 'node' value that will be included in generated UUIDs.<br>
 * </blockquote>
 * @param {String} [node] A 12-character hex string representing a pseudoNode or hardwareNode.
*/
dojox.uuid.generateTimeBasedUuid.setNode=function(node){};
/**
 * @param {String} [node] 
 * @returns {Boolean} -
*/
dojox.uuid.generateTimeBasedUuid.isValidNode=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the 'node' value that will be included in generated UUIDs.<br>
 * </blockquote>
 * @returns {String (a 12-character hex string representing a pseudoNode or hardwareNode)} -
*/
dojox.uuid.generateTimeBasedUuid.getNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the 'node' value that will be included in generated UUIDs.<br>
 * </blockquote>
 * @class
 * @returns {dojox.uuid.generateTimeBasedUuid.setNode} new instance
*/
dojox.uuid.generateTimeBasedUuid.setNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This is the constructor for the Uuid class.  The Uuid class offers<br>
 *	 methods for inspecting existing UUIDs.<br>
 * </blockquote>
 * @class
 * @returns {dojox.uuid.Uuid} new instance
*/
dojox.uuid.Uuid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 This method returns a standard 36-character string representing<br>
 *	 the UUID, such as &amp;quot;3b12f1df-5232-4804-897e-917bf397618a&amp;quot;.<br>
 * </blockquote>
 * @returns {string} -
*/
dojox.uuid.Uuid.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the default generator, which will be used by the<br>
 *	 &amp;quot;new dojox.uuid.Uuid()&amp;quot; constructor if no parameters<br>
 *	 are passed in.<br>
 * </blockquote>
 * @param {Function} [generator] A UUID generator function, such as dojox.uuid.generateTimeBasedUuid.
*/
dojox.uuid.Uuid.setGenerator=function(generator){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the UUID was initialized with a valid value.<br>
 * </blockquote>
*/
dojox.uuid.Uuid.isValid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if this UUID is equal to the otherUuid, or false otherwise.<br>
 * </blockquote>
 * @param {dojox.uuid.Uuid} otherUuid Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.
 * @returns {boolean} -
*/
dojox.uuid.Uuid.isEqual=function(otherUuid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a version number that indicates what type of UUID this is.<br>
 *	 Returns one of the enumerated dojox.uuid.version values.<br>
 * </blockquote>
 * @returns {dojox.uuid.version} -
 * @example
 * var uuid = new dojox.uuid.Uuid("b4308fb0-86cd-11da-a72b-0800200c9a66");
 * var version = uuid.getVersion();
 * dojox.uuid.assert(version == dojox.uuid.version.TIME_BASED);
*/
dojox.uuid.Uuid.getVersion=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a variant code that indicates what type of UUID this is.<br>
 *	 Returns one of the enumerated dojox.uuid.variant values.<br>
 * </blockquote>
 * @example
 * var uuid = new dojox.uuid.Uuid("3b12f1df-5232-4804-897e-917bf397618a");
 * var variant = uuid.getVariant();
 * dojox.uuid.assert(variant == dojox.uuid.variant.DCE);
 * @example
 * "3b12f1df-5232-4804-897e-917bf397618a"
 * ^
 * 
 * (variant "10__" == DCE)
*/
dojox.uuid.Uuid.getVariant=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If this is a version 1 UUID (a time-based UUID), this method returns<br>
 *	 the timestamp value encoded in the UUID.  The caller can ask for the<br>
 *	 timestamp to be returned either as a JavaScript Date object or as a<br>
 *	 15-character string of hex digits.<br>
 * </blockquote>
 * @param {String} [returnType] Any of these five values: &quot;string&quot;, String, &quot;hex&quot;, &quot;date&quot;, Date
 * 
 * @returns {String (e.g. "Mon, 16 Jan 2006 20:21:41 GMT")|String (e.g. "1da86cdb4308fb0")|Date} -examples:
 * var uuid = new dojox.uuid.Uuid("b4308fb0-86cd-11da-a72b-0800200c9a66");<br>
 * var date, string, hexString;<br>
 * date   = uuid.getTimestamp();		 // returns a JavaScript Date<br>
 * date   = uuid.getTimestamp(Date);	 //<br>
 * string = uuid.getTimestamp(String);   // "Mon, 16 Jan 2006 20:21:41 GMT"<br>
 * hexString = uuid.getTimestamp("hex"); // "1da86cdb4308fb0"<br>
*/
dojox.uuid.Uuid.getTimestamp=function(returnType){};
/**
 * <b>Summary:</b><blockquote>
 *	 If this is a version 1 UUID (a time-based UUID), getNode() returns a<br>
 *	 12-character string with the &amp;quot;node&amp;quot; or &amp;quot;pseudonode&amp;quot; portion of the UUID,<br>
 *	 which is the rightmost 12 characters.<br>
 * </blockquote>
 * @returns {String (a 12-character string, which will look something like "917bf397618a")} -
*/
dojox.uuid.Uuid.getNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the default generator.  See setGenerator().<br>
 * </blockquote>
 * @returns {generator (A UUID generator, such as dojox.uuid.TimeBasedGenerator).} -
*/
dojox.uuid.Uuid.getGenerator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Compares this UUID to another UUID, and returns 0, 1, or -1.<br>
 * </blockquote>
 * This implementation is intended to match the sample implementation<br>
 * in IETF RFC 4122: http://www.ietf.org/rfc/rfc4122.txt
 * @see reference <a href="http://www.ietf.org/rfc/rfc4122.txt">http://www.ietf.org/rfc/rfc4122.txt</a>
 * @param {dojox.uuid.Uuid} uuidOne Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.
 * @param {dojox.uuid.Uuid} uuidTwo Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.
 * @param {dojox.uuid.Uuid} otherUuid Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.
 * @returns {integer|integer (either 0, 1, or -1)} -
*/
dojox.uuid.Uuid.compare=function(uuidOne, uuidTwo, otherUuid){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a version number that indicates what type of UUID this is.<br>
 *	 Returns one of the enumerated dojox.uuid.version values.<br>
 * </blockquote>
 * @class
 * @returns {dojox.uuid.Uuid.getVersion} new instance
 * @example
 * var uuid = new dojox.uuid.Uuid("b4308fb0-86cd-11da-a72b-0800200c9a66");
 * var version = uuid.getVersion();
 * dojox.uuid.assert(version == dojox.uuid.version.TIME_BASED);
*/
dojox.uuid.Uuid.getVersion=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If this is a version 1 UUID (a time-based UUID), getNode() returns a<br>
 *	 12-character string with the &amp;quot;node&amp;quot; or &amp;quot;pseudonode&amp;quot; portion of the UUID,<br>
 *	 which is the rightmost 12 characters.<br>
 * </blockquote>
 * @class
 * @returns {dojox.uuid.Uuid.getNode} new instance
*/
dojox.uuid.Uuid.getNode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If this is a version 1 UUID (a time-based UUID), this method returns<br>
 *	 the timestamp value encoded in the UUID.  The caller can ask for the<br>
 *	 timestamp to be returned either as a JavaScript Date object or as a<br>
 *	 15-character string of hex digits.<br>
 * </blockquote>
 * @class
 * @returns {dojox.uuid.Uuid.getTimestamp} new instance
*/
dojox.uuid.Uuid.getTimestamp=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds a regular expression that matches a URL<br>
 * </blockquote>
 * @param {Object} [flags] An object
 * flags.scheme  Can be true, false, or [true, false].<br>
 * This means: required, not allowed, or match either one.<br>
 * flags in regexp.host can be applied.<br>
 * flags in regexp.ipAddress can be applied.
 * @returns {"; } return ""; }} -
*/
dojox.validate.regexp.url=function(flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds a regular expression to match any sort of number based format<br>
 * </blockquote>
 * Use this method for phone numbers, social security numbers, zip-codes, etc.<br>
 * The RE can match one format or one of multiple formats.<br>
 * <br>
 * Format<br>
 * #		Stands for a digit, 0-9.<br>
 * ?		Stands for an optional digit, 0-9 or nothing.<br>
 * All other characters must appear literally in the expression.<br>
 * <br>
 * Example<br>
 * "(###) ###-####"	   -&gt;   (510) 542-9742<br>
 * "(###) ###-#### x#???" -&gt;   (510) 542-9742 x153<br>
 * "###-##-####"		  -&gt;   506-82-1089	   i.e. social security number<br>
 * "#####-####"		   -&gt;   98225-1649		i.e. zip code
 * @param {Object} [flags] An object
 * flags.format  A string or an Array of strings for multiple formats.
 * @returns {String} -
*/
dojox.validate.regexp.numberFormat=function(flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds a RE that matches an IP Address<br>
 * </blockquote>
 * Supports 5 formats for IPv4: dotted decimal, dotted hex, dotted octal, decimal and hexadecimal.<br>
 * Supports 2 formats for Ipv6.<br>
 * <br>
 * flags  An object.  All flags are boolean with default = true.<br>
 * flags.allowDottedDecimal  Example, 207.142.131.235.  No zero padding.<br>
 * flags.allowDottedHex  Example, 0x18.0x11.0x9b.0x28.  Case insensitive.  Zero padding allowed.<br>
 * flags.allowDottedOctal  Example, 0030.0021.0233.0050.  Zero padding allowed.<br>
 * flags.allowDecimal  Example, 3482223595.  A decimal number between 0-4294967295.<br>
 * flags.allowHex  Example, 0xCF8E83EB.  Hexadecimal number between 0x0-0xFFFFFFFF.<br>
 * Case insensitive.  Zero padding allowed.<br>
 * flags.allowIPv6   IPv6 address written as eight groups of four hexadecimal digits.<br>
 * FIXME: ipv6 can be written multiple ways IIRC<br>
 * flags.allowHybrid   IPv6 address written as six groups of four hexadecimal digits<br>
 * followed by the usual 4 dotted decimal digit notation of IPv4. x:x:x:x:x:x:d.d.d.d
 * @param {Object} [flags] 
 * @returns {String} -
*/
dojox.validate.regexp.ipAddress=function(flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds a RE that matches a host<br>
 * </blockquote>
 * A host is a named host (A-z0-9_- but not starting with -), a domain name or an IP address, possibly followed by a port number.
 * @param {Object} [flags] An object.
 * flags.allowNamed Allow a named host for local networks. Default is false.<br>
 * flags.allowIP  Allow an IP address for hostname.  Default is true.<br>
 * flags.allowLocal  Allow the host to be &quot;localhost&quot;.  Default is false.<br>
 * flags.allowPort  Allow a port number to be present.  Default is true.<br>
 * flags in regexp.ipAddress can be applied.
 * @returns {String} -
*/
dojox.validate.regexp.host=function(flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 Builds a regular expression that matches an email address<br>
 * </blockquote>
 * @param {Object} [flags] An object
 * flags.allowCruft  Allow address like &lt;mailto:foo@yahoo.com&gt;.  Default is false.<br>
 * flags in regexp.host can be applied.<br>
 * flags in regexp.ipAddress can be applied.
 * @returns {String} -
*/
dojox.validate.regexp.emailAddress=function(flags){};
/**
 * @namespace
*/
dojox.validate.regexp.us={};
/**
 * @namespace
*/
dojox.validate.regexp.ca={};
/**
 * <b>Summary:</b><blockquote>
 *	 a regular expression to match Canadian Province Abbreviations<br>
 * </blockquote>
*/
dojox.validate.regexp.ca.province=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 String regular Express to match Canadain Postal Codes<br>
 * </blockquote>
*/
dojox.validate.regexp.ca.postalCode=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A regular expression to match US state and territory abbreviations<br>
 *	 <br>
 *	 flags  An object.<br>
 *	 flags.allowTerritories  Allow Guam, Puerto Rico, etc.  Default is true.<br>
 *	 flags.allowMilitary  Allow military 'states', e.g. Armed Forces Europe (AE).  Default is true.<br>
 * </blockquote>
 * @param {Object} [flags] 
 * @returns {String} -
*/
dojox.validate.regexp.us.state=function(flags){};
/**
 * <b>Summary:</b><blockquote>
 *	 a core pane that can be attached to a RollingList.  All panes<br>
 *	 should extend this one<br>
 * </blockquote>
*/
dojox.widget._RollingListPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a pane that will handle groups (treats them as menu items)<br>
 * </blockquote>
*/
dojox.widget._RollingListGroupPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin class to provide a way to automate the &amp;quot;stop on hover&amp;quot; functionality.<br>
 * </blockquote>
 * A mixin class used to provide a way to automate a "stop on hover" behavior,<br>
 * while still allowing for ambigious subclassing for custom animations.<br>
 * Simply mix this class into a `dojox.widget.Roller` variant, and instantiate<br>
 * as you would. The hover connection is done automatically.<br>
 * <br>
 * The "hover" functionality is as such: Stop rotation while the mouse is over the<br>
 * instance, and resume again once leaving. Even if autoStart is disabled, the widget<br>
 * will start if a mouse enters and leaves the node in this case.
 * @example
 *  dojo.declare("my.Roller", [dojox.widget.RollerSlide, dojox.widget._RollerHover], {});
 *  new my.Roller({}, "myList");
*/
dojox.widget._RollerHover=function(){};
/**
*/
dojox.widget._PagerItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The month drop down<br>
 * </blockquote>
*/
dojox.widget._MonthDropDown=function(){};
/**
*/
dojox.widget._FisheyeFX=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a pane to display the information for the currently-selected<br>
 *	 file<br>
 * </blockquote>
*/
dojox.widget._FileInfoPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Calendar view listing 12 years<br>
 * </blockquote>
*/
dojox.widget._CalendarYearView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin class for adding a view listing 12 years to the<br>
 *	 dojox.widget._CalendarBase<br>
 * </blockquote>
*/
dojox.widget._CalendarYear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base implementation for all view mixins.<br>
 *	 All calendar views should extend this widget.<br>
 * </blockquote>
*/
dojox.widget._CalendarView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Calendar view listing the 12 months of the year<br>
 * </blockquote>
*/
dojox.widget._CalendarMonthYearView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin class for adding a view listing all 12<br>
 *	 months of the year to the dojox.widget._CalendarBase<br>
 * </blockquote>
*/
dojox.widget._CalendarMonthYear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Calendar view listing the 12 months of the year<br>
 * </blockquote>
*/
dojox.widget._CalendarMonthView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin class for adding a view listing all 12 months of the year to the<br>
 *	 dojox.widget._CalendarBase<br>
 * </blockquote>
*/
dojox.widget._CalendarMonth=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 View class for the dojox.widget.Calendar.<br>
 *	 Adds a view showing every day of a single month to the calendar.<br>
 *	 This should not be mixed in directly with dojox.widget._CalendarBase.<br>
 *	 Instead, use dojox.widget._CalendarDay<br>
 * </blockquote>
*/
dojox.widget._CalendarDayView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for the dojox.widget.Calendar which provides<br>
 *	 the standard day-view. A single month is shown at a time.<br>
 * </blockquote>
*/
dojox.widget._CalendarDay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The Root class for all _Calendar extensions<br>
 * </blockquote>
*/
dojox.widget._CalendarBase=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A calendar with only a year view.<br>
 * </blockquote>
*/
dojox.widget.YearlyCalendar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A panel in a `dojox.widget.Wizard`<br>
 * </blockquote>
 * An extended ContentPane with additional hooks for passing named<br>
 * functions to prevent the pane from going either forward or<br>
 * backwards.<br>
*/
dojox.widget.WizardPane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A set of panels that display sequentially, typically notating a step-by-step<br>
 *	 procedure like an install<br>
 * </blockquote>
*/
dojox.widget.Wizard=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shows a bar at the top of the screen when the user is to<br>
 *	 be notified that they should upgrade their browser or a<br>
 *	 plugin.<br>
 * </blockquote>
 * You can insert custom validations to trigger the UpgradeBar<br>
 * to display. An evaluation of 'true' shows the bar (as this<br>
 * version *is* less than it should be). Multiple validations<br>
 * may be checked, although only the first in the list will be<br>
 * displayed.<br>
 * Markup and programmatic are supported. Markup is a little<br>
 * cleaner, since a majority of the parameters are the HTML<br>
 * snippets to be displayed. In markup, the validate code should<br>
 * be an expression that will evaluate to true or false. This<br>
 * expression is wrapped in a try/catch, so if it blows up, it<br>
 * is assumed to be true and trigger the bar.<br>
 * In programmtic, a function should be used that returns true<br>
 * or false. You would need to use your own try/catch in that.
 * @param {mixed} props 
 * @param {mixed} node 
 * @example
 * See tests for examples.
*/
dojox.widget.UpgradeBar=function(props, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Message that slides in from the corner of the screen, used for notifications<br>
 *	 like &amp;quot;new email&amp;quot;.<br>
 * </blockquote>
*/
dojox.widget.Toaster=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container which controls a series of `dijit.TitlePane`s,<br>
 *	 allowing one to be visible and hiding siblings<br>
 * </blockquote>
 * A container which controls a series of `dijit.TitlePane`s,<br>
 * allowing one to be visible and hiding siblings. Behaves similarly<br>
 * to a `dijit.layout.AccordionContainer` in that the children<br>
 * are all stacked, though merges the TitlePane behavior of<br>
 * variable height
 * @example
 * 	var group = new dojox.widget.TitleGroup().placeAt(dojo.body());
 * 	new dijit.TitlePane({ title:"One" }, "fromsource").placeAt(group);
 * 	new dijit.TitlePane({ title:"Remote", href:"foo.html" }).placeAt(group);
*/
dojox.widget.TitleGroup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget designed to act as a Standby/Busy/Disable/Blocking widget to indicate a<br>
 *	 particular DOM node is processing and cannot be clicked on at this time.<br>
 *	 This widget uses absolute positioning to apply the overlay and image.<br>
 * </blockquote>
*/
dojox.widget.Standby=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A sortable unordered-list with a fixed header for use in dijit.demos.chat<br>
 *	 for demonstration purposes only for now. feel free to make API suggestions<br>
 *	 or fixes.<br>
 * </blockquote>
*/
dojox.widget.SortList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget for rotating through child nodes using transitions.<br>
 * </blockquote>
 * A small, fast, extensible, awesome rotator that cycles, with transitions,<br>
 * through panes (child nodes) displaying only one at a time and ties into<br>
 * controllers used to change state.<br>
 * <br>
 * The Rotator does not rely on dijit.  It is designed to be as lightweight<br>
 * as possible.  Controllers and transitions have been externalized<br>
 * so builds can be as optimized with only the components you want to use.<br>
 * <br>
 * For best results, each rotator pane should be the same height and width as<br>
 * the Rotator container node and consider setting overflow to hidden.<br>
 * While the Rotator will accept any DOM node for a rotator pane, a block<br>
 * element or element with display:block is recommended.<br>
 * <br>
 * Note: When the Rotator begins, it does not transition the first pane.<br>
 * <br>
 * subscribed topics:<br>
 * [id]/rotator/control - Controls the Rotator<br>
 * Parameters:<br>
 * ///string/// action		- The name of a method of the Rotator to run<br>
 * ///anything?/// args	   - One or more arguments to pass to the action<br>
 * <br>
 * published topics:<br>
 * [id]/rotator/update - Notifies controllers that a pane or state has changed.<br>
 * Parameters:<br>
 * ///string/// type		  - the type of notification<br>
 * ///dojox.widget.Rotator/// rotator<br>
 * - the rotator instance<br>
 * ///object?/// params		 - params<br>
 * <br>
 * declarative dojo/method events (per pane):<br>
 * onBeforeIn  - Fired before the transition in starts.<br>
 * onAfterIn   - Fired after the transition in ends.<br>
 * onBeforeOut - Fired before the transition out starts.<br>
 * onAfterOut  - Fired after the transition out ends.
 * @param {Object} params 
 * @param {DomNode|string} node 
 * @example
 * 	&lt;div dojoType="dojox.widget.Rotator"&gt;
 * 		&lt;div&gt;Pane 1!&lt;/div&gt;
 * 		&lt;div&gt;Pane 2!&lt;/div&gt;
 * 	&lt;/div&gt;
 * @example
 * 	&lt;script type="text/javascript"&gt;
 * 		dojo.require("dojox.widget.rotator.Fade");
 * 	&lt;/script&gt;
 * 	&lt;div dojoType="dojox.widget.Rotator" transition="dojox.widget.rotator.crossFade"&gt;
 * 		&lt;div&gt;Pane 1!&lt;/div&gt;
 * 		&lt;div&gt;Pane 2!&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.widget.Rotator=function(params, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 a rolling list that can be tied to a data store with children<br>
 * </blockquote>
*/
dojox.widget.RollingList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An add-on to the Roller to modify animations. This produces<br>
 *	 a slide-from-bottom like effect. See `dojox.widget.Roller` for<br>
 *	 full API information.<br>
 * </blockquote>
*/
dojox.widget.RollerSlide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple widget to take an unordered-list of Text and roll through them<br>
 * </blockquote>
 * The Roller widget takes an unordered-list of items, and converts<br>
 * them to a single-area (the size of one list-item, however you so choose<br>
 * to style it) and loops continually, fading between items.<br>
 * <br>
 * In it's current state, it requires it be created from an unordered (or ordered)<br>
 * list, though can contain complex markup.<br>
 * <br>
 * You can manipulate the `items` array at any point during the cycle with<br>
 * standard array manipulation techniques.<br>
 * <br>
 * The class "dojoxRoller" is added to the UL element for styling purposes.
 * @example
 * 	// create a scroller from a unordered list with id="lister"
 * 	var thinger = new dojox.widget.Roller.Roller({},"lister");
 * @example
 * 	// create a scroller from a fixed array, and place in the DOM:
 * 	new dojox.widget.Roller({ items:["one","two","three"] }).placeAt(dojo.body());
 * @example
 * 	// add an item:
 * 	dijit.byId("roller").items.push("I am a new Label");
 * @example
 * 	// stop a roller from rolling:
 * 	dijit.byId("roller").stop();
*/
dojox.widget.Roller=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A settings widget to be used with a dojox.widget.Portlet.<br>
 * </blockquote>
 * This widget should be placed inside a dojox.widget.Portlet widget.<br>
 * It is used to set some preferences for that Portlet.	It is essentially<br>
 * a ContentPane, and should contain other widgets and DOM nodes that<br>
 * do the real work of setting preferences for the portlet.<br>
*/
dojox.widget.PortletSettings=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Settings widget designed to be used with a dojox.widget.FeedPortlet<br>
 * </blockquote>
 * It provides form items that the user can use to change the URL<br>
 * for a feed to load into the FeedPortlet.<br>
 * There are two forms that it can take.	&lt;br&gt;<br>
 * The first is to display a text field, with Load and Cancel buttons,<br>
 * which is prepopulated with the enclosing FeedPortlet's URL.<br>
 * If a &lt;select&gt; DOM node is used as the source node for this widget,<br>
 * it displays a list of predefined URLs that the user can select from<br>
 * to load into the enclosing FeedPortlet.
 * @example
 * &lt;div dojoType="dojox.widget.PortletFeedSettings"&gt;&lt;/div&gt;
 * @example
 * &lt;select dojoType="dojox.widget.PortletFeedSettings"&gt;
 * &lt;option&gt;http://www.dojotoolkit.org/aggregator/rss&lt;/option&gt;
 * &lt;option&gt;http://dojocampus.org/content/category/podcast/feed/&lt;/option&gt;
 * &lt;/select&gt;
*/
dojox.widget.PortletFeedSettings=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A settings widget to be used with a dojox.widget.Portlet, which displays<br>
 *	 the contents of this widget in a dijit.Dialog box.<br>
 * </blockquote>
 * @param {mixed} props 
 * @param {mixed} node 
*/
dojox.widget.PortletDialogSettings=function(props, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container widget that is designed to be contained<br>
 *	 in a dojox.layout.GridContainer. Child widgets can insert<br>
 *	 an icon into the title bar of the Portlet, which when<br>
 *	 clicked, executes the &amp;quot;toggle&amp;quot; method of the child widget.<br>
 *	 A child widget must specify the attribute<br>
 *	 &amp;quot;portletIconClass&amp;quot;, and the optional class<br>
 *	 &amp;quot;portletIconHoverClass&amp;quot;, as well as the<br>
 *	 &amp;quot;toggle&amp;quot; function.<br>
 * </blockquote>
*/
dojox.widget.Portlet=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A menu item that can be used as a placeholder.  Set the label<br>
 *	 of this item to a unique key and you can then use it to add new<br>
 *	 items at that location.  This item is not displayed.<br>
 * </blockquote>
*/
dojox.widget.PlaceholderMenuItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Pager, displaying a list of sized nodes<br>
 * </blockquote>
*/
dojox.widget.Pager=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple GUI for choosing several dates in the context of a monthly calendar.<br>
 * </blockquote>
 * A simple GUI for choosing several dates in the context of a monthly calendar.<br>
 * This widget serialises its selected dates to ISO dates or ISO ranges of dates,<br>
 * depending on developer selection<br>
 * Note that it accepts an Array of ISO dates as its input
 * @param {Object} args 
 * @example
 * 	var calendar = new dojox.widget.MultiSelectCalendar({value: ['2011-05-07,'2011-05-08',2011-05-09','2011-05-23']}, dojo.byId("calendarNode"));
 * @example
 * 	&lt;div dojoType="dojox.widget.MultiSelectCalendar"&gt;&lt;/div&gt;
*/
dojox.widget.MultiSelectCalendar=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A calendar with only a month view.<br>
 * </blockquote>
*/
dojox.widget.MonthlyCalendar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A calendar withonly a daily view.<br>
 * </blockquote>
*/
dojox.widget.MonthAndYearlyCalendar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a configurable global xhr-listener to display<br>
 *	 a loading message during running xhr's or to simply provide<br>
 *	 base-level topic to subscribe to for custom loading messages<br>
 * </blockquote>
*/
dojox.widget.Loader=function(){};
/**
 * @param {mixed} p 
 * @param {mixed} s 
*/
dojox.widget.Iterator=function(p, s){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Light-weight Fisheye Component, or an exhanced version<br>
 *	 of dojo.fx.Toggler ...<br>
 * </blockquote>
 * A Simple FisheyeList-like widget which (in the interest of<br>
 * performance) relies on well-styled content for positioning,<br>
 * and natural page layout for rendering.<br>
 * <br>
 * use position:absolute/relative nodes to prevent layout<br>
 * changes, and use caution when seleting properties to<br>
 * scale. Negative scaling works, but some properties<br>
 * react poorly to being set to negative values, IE being<br>
 * particularly annoying in that regard.<br>
 * <br>
 * quirk: uses the domNode as the target of the animation<br>
 * unless it finds a node class="fisheyeTarget" in the container<br>
 * being turned into a FisheyeLite instance
 * @param {mixed} props 
 * @param {mixed} node 
 * @example
 * 	// make all the LI's in a node Fisheye's:
 *	dojo.query("#node li").forEach(function(n){
 * 		new dojox.widget.FisheyeLite({},n);
 * 	});
 * @example
 * 	new dojox.widget.FisheyeLite({
 * 		properties:{
 * 			// height is literal, width is multiplied
 * 			height:{ end: 200 }, width:2.3
 * 		}
 * 	}, "someNode");
 * 
 * duationIn: Integer
 * The time (in ms) the run the show animation
*/
dojox.widget.FisheyeLite=function(props, node){};
/**
*/
dojox.widget.FisheyeListItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Menu similar to the fish eye menu on the Mac OS<br>
 * </blockquote>
 * @example
 * 	&lt;div dojoType="FisheyeList"
 * 		itemWidth="40" itemHeight="40"
 * 		itemMaxWidth="150" itemMaxHeight="150"
 * 		orientation="horizontal"
 * 		effectUnits="2"
 * 		itemPadding="10"
 * 		attachEdge="center"
 * 		labelEdge="bottom"&gt;
 * 
 * 		&lt;div dojoType="FisheyeListItem"
 * 			id="item1"
 * 			onclick="alert('click on' + this.label + '(from widget id ' + this.widgetId + ')!');"
 * 			label="Item 1"
 * 			iconSrc="images/fisheye_1.png"&gt;
 * 		&lt;/div&gt;
 * 		...
 * 	&lt;/div&gt;
*/
dojox.widget.FisheyeList=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a specialized version of RollingList that handles file information<br>
 *	 in a store<br>
 * </blockquote>
*/
dojox.widget.FilePicker=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Portlet that loads a XML feed.<br>
 * </blockquote>
 * The feed is displayed as<br>
 * an unordered list of links.	When a link is hovered over<br>
 * by the mouse, it displays a summary in a tooltip.<br>
*/
dojox.widget.FeedPortlet=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A FeedPortlet that uses an list of expandable links to display<br>
 *	 a feed.	An icon is placed to the left of each item<br>
 *	 which, when clicked, toggles the visible state<br>
 *	 of the item summary.<br>
 * </blockquote>
*/
dojox.widget.ExpandableFeedPortlet=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extention of dijit.Tooltip providing content set via XHR<br>
 *	 request via href param<br>
 * </blockquote>
*/
dojox.widget.DynamicTooltip=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to run DocTests inside an HTML page.<br>
 * </blockquote>
*/
dojox.widget.DocTester=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Simple Dialog Mixing the `dojox.layout.ContentPane` functionality over<br>
 *	 top of a vanilla `dijit.Dialog`. See `dojox.widget.Dialog` for a more flexible<br>
 *	 dialog option allowing animations and different styles/theme support.<br>
 * </blockquote>
*/
dojox.widget.DialogSimple=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Lightbox-like Modal-dialog for HTML Content<br>
 * </blockquote>
 * An HTML-capable Dialog widget with advanced sizing<br>
 * options, animated show/hide and other useful options.<br>
 * <br>
 * This Dialog is also very easy to apply custom styles to.<br>
 * <br>
 * It works identically to a `dijit.Dialog` with several<br>
 * additional parameters.
 * @param {mixed} props 
 * @param {mixed} node 
*/
dojox.widget.Dialog=function(props, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 DataPresentation<br>
 *	 <br>
 *	 A widget that connects to a data store in a simple manner,<br>
 *	 and also provides some additional convenience mechanisms<br>
 *	 for connecting to common data sources without needing to<br>
 *	 explicitly construct a Dojo data store. The widget can then<br>
 *	 present the data in several forms: as a graphical chart,<br>
 *	 as a tabular grid, or as display panels presenting meta-data<br>
 *	 (title, creation information, etc) from the data. The<br>
 *	 widget can also create and manage several of these forms<br>
 *	 in one simple construction.<br>
 *	 <br>
 *	 Note: this is a first experimental draft and any/all details<br>
 *	 are subject to substantial change in later drafts.<br>
 * </blockquote>
 * @param {DomNode} node The node to attach the data presentation to.
 * kwArgs:	Object (see above)
 * @param {mixed} args 
 * @example
 * var pres = new dojox.data.DataPresentation("myChartNode", {
*/
dojox.widget.DataPresentation=function(node, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A calendar withonly a daily view.<br>
 * </blockquote>
*/
dojox.widget.DailyCalendar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a HSV color picker - similar to Photoshop picker<br>
 * </blockquote>
 * Provides an interactive HSV ColorPicker similar to<br>
 * PhotoShop's color selction tool. This is an enhanced<br>
 * version of the default dijit.ColorPalette, though provides<br>
 * no accessibility.
 * @example
 * 	var picker = new dojox.widget.ColorPicker({
 * 		// a couple of example toggles:
 * 		animatePoint:false,
 * 		showHsv: false,
 * 		webSafe: false,
 * 		showRgb: false
 * 	});
 * @example
 * 	&lt;!-- markup: --&gt;
 * 	&lt;div dojoType="dojox.widget.ColorPicker"&gt;&lt;/div&gt;
*/
dojox.widget.ColorPicker=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The standard Calendar. It includes day, month and year views.<br>
 *	 FisheyeLite effects are included.<br>
 * </blockquote>
*/
dojox.widget.CalendarFisheye=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The Calendar includes day, month and year views.<br>
 *	 No visual effects are included.<br>
 * </blockquote>
*/
dojox.widget.Calendar3Pane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Calendar withtwo panes, the second one<br>
 *	 containing both month and year<br>
 * </blockquote>
*/
dojox.widget.Calendar2Pane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The standard Calendar. It includes day and month/year views.<br>
 *	 No visual effects are included.<br>
 * </blockquote>
*/
dojox.widget.Calendar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A rotator that automatically transitions between child nodes.<br>
 * </blockquote>
 * Adds automatic rotating to the dojox.widget.Rotator.  The<br>
 * AutoRotator has parameters that control how user input can<br>
 * affect the rotator including a suspend when hovering over the<br>
 * rotator and pausing when the user manually advances to another<br>
 * pane.
 * @example
 * 	&lt;div dojoType="dojox.widget.AutoRotator" duration="3000"&gt;
 * 		&lt;div&gt;
 * 			Pane 1!
 * 		&lt;/div&gt;
 * 		&lt;div duration="5000"&gt;
 * 			Pane 2 with an overrided duration!
 * 		&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.widget.AutoRotator=function(){};
/**
 * @namespace
*/
dojox.widget.rotator={};
/**
 * @namespace
*/
dojox.widget.gauge={};
/**
 * <b>Summary:</b><blockquote>
 *	 A rotator that automatically transitions between child nodes.<br>
 * </blockquote>
 * Adds automatic rotating to the dojox.widget.Rotator.  The<br>
 * AutoRotator has parameters that control how user input can<br>
 * affect the rotator including a suspend when hovering over the<br>
 * rotator and pausing when the user manually advances to another<br>
 * pane.
 * @class
 * @extends dojox.widget.Rotator
 * @returns {dojox.widget.AutoRotator} new instance
 * @example
 * 	&lt;div dojoType="dojox.widget.AutoRotator" duration="3000"&gt;
 * 		&lt;div&gt;
 * 			Pane 1!
 * 		&lt;/div&gt;
 * 		&lt;div duration="5000"&gt;
 * 			Pane 2 with an overrided duration!
 * 		&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.widget.AutoRotator=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the state to &amp;quot;playing&amp;quot; and schedules the next cycle to run.<br>
 * </blockquote>
 * @param {boolean} [skipCycleDecrement] 
 * @param {boolean} [skipDuration] 
 * @memberOf dojox.widget.AutoRotator
*/
dojox.widget.AutoRotator.prototype.play=function(skipCycleDecrement, skipDuration){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the state to &amp;quot;not playing&amp;quot; and clears the cycle timer.<br>
 * </blockquote>
 * @memberOf dojox.widget.AutoRotator
*/
dojox.widget.AutoRotator.prototype.pause=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Override the Rotator's onManualChange so we can pause.<br>
 * </blockquote>
 * @param {string} action 
 * @memberOf dojox.widget.AutoRotator
*/
dojox.widget.AutoRotator.prototype.onManualChange=function(action){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect the AutoRotator's events.<br>
 * </blockquote>
 * @memberOf dojox.widget.AutoRotator
*/
dojox.widget.AutoRotator.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Resets the timer used to schedule the next transition.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.AutoRotator
*/
dojox.widget.AutoRotator.prototype._resetTimer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function to return the current system time in milliseconds.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.AutoRotator
*/
dojox.widget.AutoRotator.prototype._now=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cycles the rotator to the next/previous pane.<br>
 * </blockquote>
 * @param {boolean|int} [manual] 
 * @private
 * @memberOf dojox.widget.AutoRotator
*/
dojox.widget.AutoRotator.prototype._cycle=function(manual){};
/**
 * @class
 * @returns {dojox.widget._FisheyeFX} new instance
*/
dojox.widget._FisheyeFX=function(){};
/**
 * @param {mixed} query 
 * @param {mixed} fromNode 
 * @memberOf dojox.widget._FisheyeFX
*/
dojox.widget._FisheyeFX.prototype.addFx=function(query, fromNode){};
/**
 * <b>Summary:</b><blockquote>
 *	 The standard Calendar. It includes day, month and year views.<br>
 *	 FisheyeLite effects are included.<br>
 * </blockquote>
 * @class
 * @extends dojox.widget.Calendar
 * @extends dojox.widget._FisheyeFX
 * @returns {dojox.widget.CalendarFisheye} new instance
*/
dojox.widget.CalendarFisheye=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The Root class for all _Calendar extensions<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @extends dijit._Container
 * @returns {dojox.widget._CalendarBase} new instance
*/
dojox.widget._CalendarBase=function(){};
/**
 * @namespace
*/
dojox.widget._CalendarBase.constraints={};
/**
 * @namespace
 * @private
*/
dojox.widget._CalendarBase._children={};
/**
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Instantiates the mixin views<br>
 * </blockquote>
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype.postCreate=function(){};
/**
 * @param {mixed} value 
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype.parseInitialValue=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 A date cell was selected. It may be the same as the previous value.<br>
 * </blockquote>
 * @param {Date} date 
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype.onValueSelected=function(date){};
/**
 * <b>Summary:</b><blockquote>
 *	 Transitions to the next view.<br>
 * </blockquote>
 * @param {mixed} e 
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype.onHeaderClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called only when the selected date has changed<br>
 * </blockquote>
 * @param {Date} date 
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype.onChange=function(date){};
/**
 * <b>Summary:</b><blockquote>
 *	 May be overridden to disable certain dates in the calendar e.g. `isDisabledDate=dojo.date.locale.isWeekend`<br>
 * </blockquote>
 * @param {Date} date 
 * @param {String} [locale] 
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype.isDisabledDate=function(date, locale){};
/**
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype.goToToday=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 May be overridden to return CSS classes to associate with the date entry for the given dateObject,<br>
 *	 for example to indicate a holiday in specified locale.<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @param {String} [locale] 
 * @returns {String} -
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype.getClassForDate=function(dateObject, locale){};
/**
 * @param {mixed} query 
 * @param {mixed} fromNode 
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype.addFx=function(query, fromNode){};
/**
 * @private
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype._updateTitleStyle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Animates the views to show one and hide another, in a<br>
 *	 vertical direction.<br>
 *	 If 'direction' is 1, then the views slide upwards.<br>
 *	 If 'direction' is -1, the views slide downwards.<br>
 * </blockquote>
 * @param {Number} direction 
 * @private
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype._transitionVert=function(direction){};
/**
 * <b>Summary:</b><blockquote>
 *	 Animates the horizontal sliding of a table.<br>
 * </blockquote>
 * @param {String} widget 
 * @param {Number} direction 
 * @param {Function} callback 
 * @private
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype._slideTable=function(widget, direction, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the current date and update the UI.	If the date is disabled, the selection will<br>
 *	 not change, but the display will change to the corresponding month.<br>
 * </blockquote>
 * @param {Date} value 
 * @private
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype._setValueAttr=function(value){};
/**
 * @param {mixed} date 
 * @param {mixed} formattedValue 
 * @param {mixed} force 
 * @private
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype._onDateSelected=function(date, formattedValue, force){};
/**
 * @param {mixed} value 
 * @private
 * @returns {new Date(value);} -
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype._makeDate=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Runs various tests on the value, checking for invalid conditions<br>
 * </blockquote>
 * @param {Date} value 
 * @private
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype._isInvalidDate=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function overrides the base function defined in dijit.Calendar.<br>
 *	 It changes the displayed years, months and days depending on the inputs.<br>
 * </blockquote>
 * @param {String} part 
 * @param {int} amount 
 * @param {mixed} noSlide 
 * @private
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype._adjustDisplay=function(part, amount, noSlide){};
/**
 * @param {mixed} view 
 * @private
 * @memberOf dojox.widget._CalendarBase
*/
dojox.widget._CalendarBase.prototype._addView=function(view){};
/**
 * <b>Summary:</b><blockquote>
 *	 Base implementation for all view mixins.<br>
 *	 All calendar views should extend this widget.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @returns {dojox.widget._CalendarView} new instance
*/
dojox.widget._CalendarView=function(){};
/**
 * @param {mixed} date 
 * @memberOf dojox.widget._CalendarView
*/
dojox.widget._CalendarView.prototype.onValueSelected=function(date){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function that can be used to tell a view when it is shown.<br>
 * </blockquote>
 * @memberOf dojox.widget._CalendarView
*/
dojox.widget._CalendarView.prototype.onDisplay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function that can be used to tell<br>
 *	 a view when it is no longer shown.<br>
 * </blockquote>
 * @memberOf dojox.widget._CalendarView
*/
dojox.widget._CalendarView.prototype.onBeforeUnDisplay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function that can be used to tell a view it is about to be shown.<br>
 * </blockquote>
 * @memberOf dojox.widget._CalendarView
*/
dojox.widget._CalendarView.prototype.onBeforeDisplay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the header node of a view. If none exists,<br>
 *	 an empty DIV is created and returned.<br>
 * </blockquote>
 * @memberOf dojox.widget._CalendarView
*/
dojox.widget._CalendarView.prototype.getHeader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Clones all nodes with the class 'clazz' in a widget<br>
 * </blockquote>
 * @param {mixed} clazz 
 * @param {mixed} n 
 * @param {mixed} before 
 * @memberOf dojox.widget._CalendarView
*/
dojox.widget._CalendarView.prototype.cloneClass=function(clazz, n, before){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds or subtracts values from a date.<br>
 *	 The unit, e.g. &amp;quot;day&amp;quot;, &amp;quot;month&amp;quot; or &amp;quot;year&amp;quot;, is<br>
 *	 specified in the &amp;quot;datePart&amp;quot; property of the<br>
 *	 calendar view mixin.<br>
 * </blockquote>
 * @param {mixed} date 
 * @param {mixed} amount 
 * @memberOf dojox.widget._CalendarView
*/
dojox.widget._CalendarView.prototype.adjustDate=function(date, amount){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the text inside a node<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} text 
 * @private
 * @memberOf dojox.widget._CalendarView
*/
dojox.widget._CalendarView.prototype._setText=function(node, text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin for the dojox.widget.Calendar which provides<br>
 *	 the standard day-view. A single month is shown at a time.<br>
 * </blockquote>
 * @class
 * @returns {dojox.widget._CalendarDay} new instance
*/
dojox.widget._CalendarDay=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 View class for the dojox.widget.Calendar.<br>
 *	 Adds a view showing every day of a single month to the calendar.<br>
 *	 This should not be mixed in directly with dojox.widget._CalendarBase.<br>
 *	 Instead, use dojox.widget._CalendarDay<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._CalendarView
 * @extends dijit._Templated
 * @returns {dojox.widget._CalendarDayView} new instance
*/
dojox.widget._CalendarDayView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Constructs the calendar view.<br>
 * </blockquote>
 * @memberOf dojox.widget._CalendarDayView
*/
dojox.widget._CalendarDayView.prototype.postCreate=function(){};
/**
 * @memberOf dojox.widget._CalendarDayView
*/
dojox.widget._CalendarDayView.prototype.onDisplay=function(){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.widget._CalendarDayView
*/
dojox.widget._CalendarDayView.prototype._setValueAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fills the days of the current month.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget._CalendarDayView
*/
dojox.widget._CalendarDayView.prototype._populateDays=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Executed when a day value is clicked.<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.widget._CalendarDayView
*/
dojox.widget._CalendarDayView.prototype._onDayClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin class for adding a view listing all 12<br>
 *	 months of the year to the dojox.widget._CalendarBase<br>
 * </blockquote>
 * @class
 * @returns {dojox.widget._CalendarMonthYear} new instance
*/
dojox.widget._CalendarMonthYear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Calendar view listing the 12 months of the year<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._CalendarView
 * @extends dijit._Templated
 * @returns {dojox.widget._CalendarMonthYearView} new instance
*/
dojox.widget._CalendarMonthYearView=function(){};
/**
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype.postCreate=function(){};
/**
 * @param {mixed} evt 
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype.onOk=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles clicks on month names<br>
 * </blockquote>
 * @param {mixed} evt 
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype.onClick=function(evt){};
/**
 * @param {mixed} evt 
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype.onCancel=function(evt){};
/**
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype.getHeader=function(){};
/**
 * @private
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype._updateSelectedYear=function(){};
/**
 * @param {mixed} query 
 * @param {mixed} filter 
 * @private
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype._updateSelectedNode=function(query, filter){};
/**
 * @private
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype._updateSelectedMonth=function(){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype._setValueAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fills the list of years with a range of 12 numbers, with the current year<br>
 *	 being the 6th number.<br>
 * </blockquote>
 * @param {mixed} year 
 * @private
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype._populateYears=function(year){};
/**
 * <b>Summary:</b><blockquote>
 *	 Populate the month names using the localized values.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype._populateMonths=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns localized month names<br>
 * </blockquote>
 * @param {mixed} format 
 * @private
 * @memberOf dojox.widget._CalendarMonthYearView
*/
dojox.widget._CalendarMonthYearView.prototype._getMonthNames=function(format){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Calendar withtwo panes, the second one<br>
 *	 containing both month and year<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._CalendarBase
 * @extends dojox.widget._CalendarDay
 * @extends dojox.widget._CalendarMonthYear
 * @returns {dojox.widget.Calendar2Pane} new instance
*/
dojox.widget.Calendar2Pane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The standard Calendar. It includes day and month/year views.<br>
 *	 No visual effects are included.<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._CalendarBase
 * @extends dojox.widget._CalendarDay
 * @extends dojox.widget._CalendarMonthYear
 * @returns {dojox.widget.Calendar} new instance
*/
dojox.widget.Calendar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A calendar withonly a daily view.<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._CalendarBase
 * @extends dojox.widget._CalendarDay
 * @returns {dojox.widget.DailyCalendar} new instance
*/
dojox.widget.DailyCalendar=function(){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.widget.DailyCalendar
*/
dojox.widget.DailyCalendar.prototype._makeDate=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 A calendar withonly a daily view.<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._CalendarBase
 * @extends dojox.widget._CalendarMonthYear
 * @returns {dojox.widget.MonthAndYearlyCalendar} new instance
*/
dojox.widget.MonthAndYearlyCalendar=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin class for adding a view listing all 12 months of the year to the<br>
 *	 dojox.widget._CalendarBase<br>
 * </blockquote>
 * @class
 * @returns {dojox.widget._CalendarMonth} new instance
*/
dojox.widget._CalendarMonth=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Calendar view listing the 12 months of the year<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._CalendarView
 * @extends dijit._Templated
 * @returns {dojox.widget._CalendarMonthView} new instance
*/
dojox.widget._CalendarMonthView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Constructs the view<br>
 * </blockquote>
 * @memberOf dojox.widget._CalendarMonthView
*/
dojox.widget._CalendarMonthView.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles clicks on month names<br>
 * </blockquote>
 * @param {mixed} evt 
 * @memberOf dojox.widget._CalendarMonthView
*/
dojox.widget._CalendarMonthView.prototype.onClick=function(evt){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.widget._CalendarMonthView
*/
dojox.widget._CalendarMonthView.prototype._setValueAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mixin class for adding a view listing 12 years to the<br>
 *	 dojox.widget._CalendarBase<br>
 * </blockquote>
 * @class
 * @returns {dojox.widget._CalendarYear} new instance
*/
dojox.widget._CalendarYear=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Calendar view listing 12 years<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._CalendarView
 * @extends dijit._Templated
 * @returns {dojox.widget._CalendarYearView} new instance
*/
dojox.widget._CalendarYearView=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Constructs the view<br>
 * </blockquote>
 * @memberOf dojox.widget._CalendarYearView
*/
dojox.widget._CalendarYearView.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handles clicks on year values.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @memberOf dojox.widget._CalendarYearView
*/
dojox.widget._CalendarYearView.prototype.onClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adjusts the value of a date. It moves it by 12 years each time.<br>
 * </blockquote>
 * @param {mixed} date 
 * @param {mixed} amount 
 * @memberOf dojox.widget._CalendarYearView
*/
dojox.widget._CalendarYearView.prototype.adjustDate=function(date, amount){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.widget._CalendarYearView
*/
dojox.widget._CalendarYearView.prototype._setValueAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 The Calendar includes day, month and year views.<br>
 *	 No visual effects are included.<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._CalendarBase
 * @extends dojox.widget._CalendarDay
 * @extends dojox.widget._CalendarMonth
 * @extends dojox.widget._CalendarYear
 * @returns {dojox.widget.Calendar3Pane} new instance
*/
dojox.widget.Calendar3Pane=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A calendar with only a month view.<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._CalendarBase
 * @extends dojox.widget._CalendarMonth
 * @returns {dojox.widget.MonthlyCalendar} new instance
*/
dojox.widget.MonthlyCalendar=function(){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.widget.MonthlyCalendar
*/
dojox.widget.MonthlyCalendar.prototype._makeDate=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 A calendar with only a year view.<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._CalendarBase
 * @extends dojox.widget._CalendarYear
 * @returns {dojox.widget.YearlyCalendar} new instance
*/
dojox.widget.YearlyCalendar=function(){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.widget.YearlyCalendar
*/
dojox.widget.YearlyCalendar.prototype._makeDate=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 a HSV color picker - similar to Photoshop picker<br>
 * </blockquote>
 * Provides an interactive HSV ColorPicker similar to<br>
 * PhotoShop's color selction tool. This is an enhanced<br>
 * version of the default dijit.ColorPalette, though provides<br>
 * no accessibility.
 * @class
 * @extends dijit.form._FormWidget
 * @returns {dojox.widget.ColorPicker} new instance
 * @example
 * 	var picker = new dojox.widget.ColorPicker({
 * 		// a couple of example toggles:
 * 		animatePoint:false,
 * 		showHsv: false,
 * 		webSafe: false,
 * 		showRgb: false
 * 	});
 * @example
 * 	&lt;!-- markup: --&gt;
 * 	&lt;div dojoType="dojox.widget.ColorPicker"&gt;&lt;/div&gt;
*/
dojox.widget.ColorPicker=function(){};
/**
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set a color on a picker. Usually used to set<br>
 *	 initial color as an alternative to passing defaultColor option<br>
 *	 to the constructor.<br>
 * </blockquote>
 * @param {String} col 
 * @param {mixed} force 
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype.setColor=function(col, force){};
/**
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 As quickly as we can, set up ie6 alpha-filter support for our<br>
 *	 underlay.  we don't do image handles (done in css), just the 'core'<br>
 *	 of this widget: the underlay.<br>
 * </blockquote>
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Put focus on this widget, only if focus isn't set on it already.<br>
 * </blockquote>
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype.focus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to clean up subscriptions, etc.<br>
 * </blockquote>
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the value of the widget<br>
 *	 can cancel reverse onChange by specifying second param<br>
 * </blockquote>
 * @param {dojox.color.Color} col 
 * @param {Boolean} fireChange 
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._updateValue=function(col, fireChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 update handles on the pickers acording to color values<br>
 * </blockquote>
 * @param {dojox.color.Color} col 
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._updatePickerLocations=function(col){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function used by the typematic code to handle cursor position and update<br>
 *	 via keyboard.<br>
 * </blockquote>
 * @param {-1} count means stop, anything else is just how many times it was called.
 * @param {The} node node generating the event.
 * @param {The} e event.
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._updateHueCursorNode=function(count, node, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function used by the typematic code to handle cursor position and update<br>
 *	 via keyboard.<br>
 * </blockquote>
 * @param {-1} count means stop, anything else is just how many times it was called.
 * @param {The} node node generating the event.
 * @param {The} e event.
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._updateCursorNode=function(count, node, e){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates color inputs that were changed through other inputs<br>
 *	 or by clicking on the picker<br>
 * </blockquote>
 * @param {dojox.color.Color} col 
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._updateColorInputs=function(col){};
/**
 * <b>Summary:</b><blockquote>
 *	 update the previewNode color, and input values [optional]<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._updateColor=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to hald the mouse down default<br>
 *	 to disable draggong of images out of the color<br>
 *	 picker.<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._stopDrag=function(e){};
/**
 * @param {mixed} value 
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._setValueAttr=function(value){};
/**
 * @param {d.dnd.Mover} mover 
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._setTimer=function(mover){};
/**
 * <b>Summary:</b><blockquote>
 *	 set our picker point based on relative x/y coordinates<br>
 *	 evt.preventDefault();<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._setPoint=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 set the hue picker handle on relative y coordinates<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._setHuePoint=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets a natural color background for the<br>
 *	 underlay image against closest hue value (full saturation)<br>
 * </blockquote>
 * @param {Decimal} h 0..360
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._setHue=function(h){};
/**
 * @param {Event} e 
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._handleKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates picker position and inputs<br>
 *	 according to rgb, hex or hsv input changes<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._colorInputChange=function(e){};
/**
 * @param {d.dnd.Mover} mover 
 * @private
 * @memberOf dojox.widget.ColorPicker
*/
dojox.widget.ColorPicker.prototype._clearTimer=function(mover){};
/**
 * @namespace
*/
dojox.widget.ColorPicker.colorUnderlay={};

/**
 * <b>Summary:</b><blockquote>
 *	 DataPresentation<br>
 *	 <br>
 *	 A widget that connects to a data store in a simple manner,<br>
 *	 and also provides some additional convenience mechanisms<br>
 *	 for connecting to common data sources without needing to<br>
 *	 explicitly construct a Dojo data store. The widget can then<br>
 *	 present the data in several forms: as a graphical chart,<br>
 *	 as a tabular grid, or as display panels presenting meta-data<br>
 *	 (title, creation information, etc) from the data. The<br>
 *	 widget can also create and manage several of these forms<br>
 *	 in one simple construction.<br>
 *	 <br>
 *	 Note: this is a first experimental draft and any/all details<br>
 *	 are subject to substantial change in later drafts.<br>
 * </blockquote>
 * @class
 * @param {DomNode} node The node to attach the data presentation to.
 * kwArgs:	Object (see above)
 * @param {mixed} args 
 * @returns {dojox.widget.DataPresentation} new instance
 * @example
 * var pres = new dojox.data.DataPresentation("myChartNode", {
*/
dojox.widget.DataPresentation=function(node, args){};
/**
 * @namespace
*/
dojox.widget.DataPresentation.titleNode={};
/**
 * @namespace
*/
dojox.widget.DataPresentation.legendNode={};
/**
 * @namespace
*/
dojox.widget.DataPresentation.gridNode={};
/**
 * @namespace
*/
dojox.widget.DataPresentation.footerNode={};
/**
 * @namespace
*/
dojox.widget.DataPresentation.chartNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the URL to fetch data from, with optional content<br>
 *	 supplied with the request, and an optional<br>
 *	 refresh interval in milliseconds (0=no refresh)<br>
 * </blockquote>
 * @param {String} [url] 
 * @param {Object} [urlContent] 
 * @param {Number} [refreshInterval] 
 * @memberOf dojox.widget.DataPresentation
*/
dojox.widget.DataPresentation.prototype.setURL=function(url, urlContent, refreshInterval){};
/**
 * @param {Object} [store] 
 * @param {String} [query] 
 * @param {Object} [queryOptions] 
 * @memberOf dojox.widget.DataPresentation
*/
dojox.widget.DataPresentation.prototype.setStore=function(store, query, queryOptions){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the store and query.<br>
 * </blockquote>
 * @param {Object} [store] 
 * @param {String} [query] 
 * @param {Object} [queryOptions] 
 * @memberOf dojox.widget.DataPresentation
*/
dojox.widget.DataPresentation.prototype.setPreparedStore=function(store, query, queryOptions){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the data to be presented, and an optional<br>
 *	 refresh interval in milliseconds (0=no refresh)<br>
 * </blockquote>
 * @param {Object} [data] 
 * @param {Number} [refreshInterval] 
 * @memberOf dojox.widget.DataPresentation
*/
dojox.widget.DataPresentation.prototype.setData=function(data, refreshInterval){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders the grid widget (if any). This method is<br>
 *	 called whenever a grid widget is created or<br>
 *	 configured, and may be connected to.<br>
 * </blockquote>
 * @memberOf dojox.widget.DataPresentation
*/
dojox.widget.DataPresentation.prototype.renderGridWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Renders the chart widget (if any). This method is<br>
 *	 called whenever a chart widget is created or<br>
 *	 configured, and may be connected to.<br>
 * </blockquote>
 * @memberOf dojox.widget.DataPresentation
*/
dojox.widget.DataPresentation.prototype.renderChartWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 If a URL or data has been supplied, refreshes the<br>
 *	 presented data from the URL or data. If a refresh<br>
 *	 interval is also set, the periodic refresh is<br>
 *	 restarted. If a URL or data was not supplied, this<br>
 *	 method has no effect.<br>
 * </blockquote>
 * @memberOf dojox.widget.DataPresentation
*/
dojox.widget.DataPresentation.prototype.refresh=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the grid widget (if any) created if the type<br>
 *	 is &amp;quot;grid&amp;quot; or the &amp;quot;gridNode&amp;quot; property was supplied.<br>
 * </blockquote>
 * @memberOf dojox.widget.DataPresentation
*/
dojox.widget.DataPresentation.prototype.getGridWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the chart widget (if any) created if the type<br>
 *	 is &amp;quot;chart&amp;quot; or the &amp;quot;chartNode&amp;quot; property was supplied.<br>
 * </blockquote>
 * @memberOf dojox.widget.DataPresentation
*/
dojox.widget.DataPresentation.prototype.getChartWidget=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroys the widget and all components and resources.<br>
 * </blockquote>
 * @memberOf dojox.widget.DataPresentation
*/
dojox.widget.DataPresentation.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Cancels any and all outstanding data refreshes<br>
 * </blockquote>
 * @memberOf dojox.widget.DataPresentation
*/
dojox.widget.DataPresentation.prototype.cancelRefresh=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Lightbox-like Modal-dialog for HTML Content<br>
 * </blockquote>
 * An HTML-capable Dialog widget with advanced sizing<br>
 * options, animated show/hide and other useful options.<br>
 * <br>
 * This Dialog is also very easy to apply custom styles to.<br>
 * <br>
 * It works identically to a `dijit.Dialog` with several<br>
 * additional parameters.
 * @class
 * @extends dojox.widget.DialogSimple
 * @param {mixed} props 
 * @param {mixed} node 
 * @returns {dojox.widget.Dialog} new instance
*/
dojox.widget.Dialog=function(props, node){};
/**
 * @namespace
 * @private
*/
dojox.widget.Dialog._displaysize={};
/**
 * @memberOf dojox.widget.Dialog
*/
dojox.widget.Dialog.prototype.show=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.widget.Dialog
*/
dojox.widget.Dialog.prototype.layout=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show the inner container after sizing animation<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.widget.Dialog
*/
dojox.widget.Dialog.prototype._showContent=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Piggyback on dijit.Dialog's _setup for load-time options, deferred to<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Dialog
*/
dojox.widget.Dialog.prototype._setup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 cache and set our desired end position<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Dialog
*/
dojox.widget.Dialog.prototype._setSize=function(){};
/**
 * @private
 * @returns {prevent content: from firing this anim #8914} -
 * @memberOf dojox.widget.Dialog
*/
dojox.widget.Dialog.prototype._position=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle's showing or hiding the close icon<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.widget.Dialog
*/
dojox.widget.Dialog.prototype._handleNav=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Simple Dialog Mixing the `dojox.layout.ContentPane` functionality over<br>
 *	 top of a vanilla `dijit.Dialog`. See `dojox.widget.Dialog` for a more flexible<br>
 *	 dialog option allowing animations and different styles/theme support.<br>
 * </blockquote>
 * @class
 * @extends dojox.layout.ContentPane
 * @extends dijit._DialogBase
 * @returns {dojox.widget.DialogSimple} new instance
*/
dojox.widget.DialogSimple=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to run DocTests inside an HTML page.<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @returns {dojox.widget.DocTester} new instance
*/
dojox.widget.DocTester=function(){};
/**
 * @memberOf dojox.widget.DocTester
*/
dojox.widget.DocTester.prototype.runTests=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Reset the DocTester visuals and enable the &amp;quot;Run tests&amp;quot; button again.<br>
 * </blockquote>
 * @memberOf dojox.widget.DocTester
*/
dojox.widget.DocTester.prototype.reset=function(){};
/**
 * @memberOf dojox.widget.DocTester
*/
dojox.widget.DocTester.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds escape sequences for special characters in XML: &amp;amp;&amp;lt;&amp;gt;&amp;quot;'<br>
 * </blockquote>
 * @param {string} str 
 * @private
 * @returns {string} -
 * @memberOf dojox.widget.DocTester
*/
dojox.widget.DocTester.prototype._unescapeHtml=function(str){};
/**
 * <b>Summary:</b><blockquote>
 *	 Overridden from _Templates.js, which actually just takes care of filling the containerNode.<br>
 * </blockquote>
 * @param {DomNode} source 
 * @private
 * @memberOf dojox.widget.DocTester
*/
dojox.widget.DocTester.prototype._fillContent=function(source){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extention of dijit.Tooltip providing content set via XHR<br>
 *	 request via href param<br>
 * </blockquote>
 * @class
 * @extends dijit.Tooltip
 * @returns {dojox.widget.DynamicTooltip} new instance
*/
dojox.widget.DynamicTooltip=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Allows re-download of contents of href and display<br>
 *	 Useful with preventCache = true<br>
 * </blockquote>
 * @memberOf dojox.widget.DynamicTooltip
*/
dojox.widget.DynamicTooltip.prototype.refresh=function(){};
/**
 * @memberOf dojox.widget.DynamicTooltip
*/
dojox.widget.DynamicTooltip.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Display the tooltip; usually not called directly.<br>
 * </blockquote>
 * @param {DomNode} target 
 * @memberOf dojox.widget.DynamicTooltip
*/
dojox.widget.DynamicTooltip.prototype.open=function(target){};
/**
 * <b>Summary:</b><blockquote>
 *	 Download contents of href via XHR and display<br>
 * </blockquote>
 * 1. checks if content already loaded<br>
 * 2. if not, sends XHR to download new data
 * @param {mixed} node 
 * @memberOf dojox.widget.DynamicTooltip
*/
dojox.widget.DynamicTooltip.prototype.loadContent=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Changes the tooltip label / contents to loading message, only if<br>
 *	 there's an href param, otherwise acts as normal tooltip<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.DynamicTooltip
*/
dojox.widget.DynamicTooltip.prototype._setLoadingLabel=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hook so attr(&amp;quot;href&amp;quot;, ...) works.<br>
 * </blockquote>
 * resets so next show loads new href
 * @param {String|Uri} href url to the content you want to show, must be within the same domain as your mainpage
 * @private
 * @memberOf dojox.widget.DynamicTooltip
*/
dojox.widget.DynamicTooltip.prototype._setHrefAttr=function(href){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Portlet that loads a XML feed.<br>
 * </blockquote>
 * The feed is displayed as<br>
 * an unordered list of links.	When a link is hovered over<br>
 * by the mouse, it displays a summary in a tooltip.
 * @class
 * @extends dojox.widget.Portlet
 * @returns {dojox.widget.FeedPortlet} new instance
*/
dojox.widget.FeedPortlet=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads the widget.<br>
 * </blockquote>
 * @memberOf dojox.widget.FeedPortlet
*/
dojox.widget.FeedPortlet.prototype.startup=function(){};
/**
 * @memberOf dojox.widget.FeedPortlet
*/
dojox.widget.FeedPortlet.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when a feed fails to load successfully.<br>
 * </blockquote>
 * @memberOf dojox.widget.FeedPortlet
*/
dojox.widget.FeedPortlet.prototype.onFeedError=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Loads the feed.<br>
 * </blockquote>
 * @memberOf dojox.widget.FeedPortlet
*/
dojox.widget.FeedPortlet.prototype.load=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generates a list of hyperlinks and displays a tooltip<br>
 *	 containing a summary when the mouse hovers over them.<br>
 * </blockquote>
 * @param {mixed} items 
 * @memberOf dojox.widget.FeedPortlet
*/
dojox.widget.FeedPortlet.prototype.generateResults=function(items){};
/**
 * @param {mixed} child 
 * @memberOf dojox.widget.FeedPortlet
*/
dojox.widget.FeedPortlet.prototype.addChild=function(child){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the URL to load.<br>
 * </blockquote>
 * @param {mixed} url 
 * @private
 * @memberOf dojox.widget.FeedPortlet
*/
dojox.widget.FeedPortlet.prototype._setUrlAttr=function(url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the title of a feed item.<br>
 * </blockquote>
 * @param {mixed} item 
 * @private
 * @memberOf dojox.widget.FeedPortlet
*/
dojox.widget.FeedPortlet.prototype._getTitle=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the href link of a feed item.<br>
 * </blockquote>
 * @param {mixed} item 
 * @private
 * @memberOf dojox.widget.FeedPortlet
*/
dojox.widget.FeedPortlet.prototype._getLink=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Gets the summary of a feed item.<br>
 * </blockquote>
 * @param {mixed} item 
 * @private
 * @memberOf dojox.widget.FeedPortlet
*/
dojox.widget.FeedPortlet.prototype._getContent=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 A FeedPortlet that uses an list of expandable links to display<br>
 *	 a feed.	An icon is placed to the left of each item<br>
 *	 which, when clicked, toggles the visible state<br>
 *	 of the item summary.<br>
 * </blockquote>
 * @class
 * @extends dojox.widget.FeedPortlet
 * @returns {dojox.widget.ExpandableFeedPortlet} new instance
*/
dojox.widget.ExpandableFeedPortlet=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generates a list of items, and places an icon beside them that<br>
 *	 can be used to show or hide a summary of that item.<br>
 * </blockquote>
 * @param {mixed} items 
 * @memberOf dojox.widget.ExpandableFeedPortlet
*/
dojox.widget.ExpandableFeedPortlet.prototype.generateResults=function(items){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Settings widget designed to be used with a dojox.widget.FeedPortlet<br>
 * </blockquote>
 * It provides form items that the user can use to change the URL<br>
 * for a feed to load into the FeedPortlet.<br>
 * There are two forms that it can take.	&lt;br&gt;<br>
 * The first is to display a text field, with Load and Cancel buttons,<br>
 * which is prepopulated with the enclosing FeedPortlet's URL.<br>
 * If a &lt;select&gt; DOM node is used as the source node for this widget,<br>
 * it displays a list of predefined URLs that the user can select from<br>
 * to load into the enclosing FeedPortlet.
 * @class
 * @extends dojox.widget.PortletSettings
 * @returns {dojox.widget.PortletFeedSettings} new instance
 * @example
 * &lt;div dojoType="dojox.widget.PortletFeedSettings"&gt;&lt;/div&gt;
 * @example
 * &lt;select dojoType="dojox.widget.PortletFeedSettings"&gt;
 * &lt;option&gt;http://www.dojotoolkit.org/aggregator/rss&lt;/option&gt;
 * &lt;option&gt;http://dojocampus.org/content/category/podcast/feed/&lt;/option&gt;
 * &lt;/select&gt;
*/
dojox.widget.PortletFeedSettings=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the portlet associated with this PortletSettings object.<br>
 * </blockquote>
 * @memberOf dojox.widget.PortletFeedSettings
*/
dojox.widget.PortletFeedSettings.prototype.startup=function(){};
/**
 * @memberOf dojox.widget.PortletFeedSettings
*/
dojox.widget.PortletFeedSettings.prototype.postCreate=function(){};
/**
 * @memberOf dojox.widget.PortletFeedSettings
*/
dojox.widget.PortletFeedSettings.prototype.buildRendering=function(){};
/**
 * @private
 * @memberOf dojox.widget.PortletFeedSettings
*/
dojox.widget.PortletFeedSettings.prototype._setContentAttr=function(){};
/**
 * @private
 * @memberOf dojox.widget.PortletFeedSettings
*/
dojox.widget.PortletFeedSettings.prototype._getFeedPortletUrlAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a pane to display the information for the currently-selected<br>
 *	 file<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._RollingListPane
 * @returns {dojox.widget._FileInfoPane} new instance
*/
dojox.widget._FileInfoPane=function(){};
/**
 * @memberOf dojox.widget._FileInfoPane
*/
dojox.widget._FileInfoPane.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called after a fetch or load - at this point, this.items should be<br>
 *	 set and loaded.<br>
 * </blockquote>
 * @memberOf dojox.widget._FileInfoPane
*/
dojox.widget._FileInfoPane.prototype.onItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a specialized version of RollingList that handles file information<br>
 *	 in a store<br>
 * </blockquote>
 * @class
 * @extends dojox.widget.RollingList
 * @returns {dojox.widget.FilePicker} new instance
*/
dojox.widget.FilePicker=function(){};
/**
 * @memberOf dojox.widget.FilePicker
*/
dojox.widget.FilePicker.prototype.startup=function(){};
/**
 * @param {item} item 
 * @param {dijit._Contained} parentPane 
 * @param {item[]} [children] 
 * @memberOf dojox.widget.FilePicker
*/
dojox.widget.FilePicker.prototype.getPaneForItem=function(item, parentPane, children){};
/**
 * @param {item} item 
 * @param {dijit._Contained} parentPane 
 * @param {item[]} [children] 
 * @memberOf dojox.widget.FilePicker
*/
dojox.widget.FilePicker.prototype.getMenuItemForItem=function(item, parentPane, children){};
/**
 * @param {mixed} item 
 * @memberOf dojox.widget.FilePicker
*/
dojox.widget.FilePicker.prototype.getChildItems=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 internally sets the value and fires onchange<br>
 * </blockquote>
 * @param {item} value 
 * @private
 * @memberOf dojox.widget.FilePicker
*/
dojox.widget.FilePicker.prototype._setValue=function(value){};
/**
 * @param {string} path 
 * @param {boolean} [resetLastExec] 
 * @param {function} [onSet] 
 * @private
 * @memberOf dojox.widget.FilePicker
*/
dojox.widget.FilePicker.prototype._setPathValueAttr=function(path, resetLastExec, onSet){};
/**
 * @param {item} item1 
 * @param {item} item2 
 * @private
 * @memberOf dojox.widget.FilePicker
*/
dojox.widget.FilePicker.prototype._itemsMatch=function(item1, item2){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the path value of the given value (or current value<br>
 *	 if not passed a value)<br>
 * </blockquote>
 * @param {item} [val] 
 * @private
 * @memberOf dojox.widget.FilePicker
*/
dojox.widget.FilePicker.prototype._getPathValueAttr=function(val){};
/**
 * <b>Summary:</b><blockquote>
 *	 Menu similar to the fish eye menu on the Mac OS<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @extends dijit._Container
 * @returns {dojox.widget.FisheyeList} new instance
 * @example
 * 	&lt;div dojoType="FisheyeList"
 * 		itemWidth="40" itemHeight="40"
 * 		itemMaxWidth="150" itemMaxHeight="150"
 * 		orientation="horizontal"
 * 		effectUnits="2"
 * 		itemPadding="10"
 * 		attachEdge="center"
 * 		labelEdge="bottom"&gt;
 * 
 * 		&lt;div dojoType="FisheyeListItem"
 * 			id="item1"
 * 			onclick="alert('click on' + this.label + '(from widget id ' + this.widgetId + ')!');"
 * 			label="Item 1"
 * 			iconSrc="images/fisheye_1.png"&gt;
 * 		&lt;/div&gt;
 * 		...
 * 	&lt;/div&gt;
*/
dojox.widget.FisheyeList=function(){};
/**
 * @namespace
*/
dojox.widget.FisheyeList.pos={};
/**
 * @namespace
*/
dojox.widget.FisheyeList.EDGE={};
/**
 * <b>Summary:</b><blockquote>
 *	 create our connections and setup our FisheyeList<br>
 * </blockquote>
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype.startup=function(){};
/**
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype.postCreate=function(){};
/**
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype.onResized=function(){};
/**
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype.destroyRecursive=function(){};
/**
 * @param {Integer} cen 
 * @param {Integer} i 
 * @private
 * @returns {Integer} -
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._weighAt=function(cen, i){};
/**
 * @param {mixed} inp 
 * @param {mixed} def 
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._toEdge=function(inp, def){};
/**
 * @param {mixed} p 
 * @param {mixed} scale 
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._setItemSize=function(p, scale){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when mouse moves out of menu's range<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @returns {already dormant?} -
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._setDormant=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when mouse is moved into menu's range<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @returns {already activated?} -
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._setActive=function(e){};
/**
 * @param {mixed} itm 
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._positionLabel=function(itm){};
/**
 * @param {mixed} p 
 * @param {mixed} offset 
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._positionElementsFrom=function(p, offset){};
/**
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._paint=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns whether the mouse is over the passed element.<br>
 *	 Node: Must must be display:block (ie, not a &amp;lt;span&amp;gt;)<br>
 * </blockquote>
 * @param {DomNode|String} node 
 * @param {Event} e 
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._overElement=function(node, e){};
/**
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._onScroll=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when mouse is moved<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._onMouseMove=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when mouse is moved in the vicinity of the menu<br>
 * </blockquote>
 * @param {mixed} x 
 * @param {mixed} y 
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._onGridMouseMove=function(x, y){};
/**
 * @param {Event} e 
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._onBodyOut=function(e){};
/**
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._initializePositioning=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 slowly expand the image to user specified max size<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._expandSlowly=function(){};
/**
 * @private
 * @memberOf dojox.widget.FisheyeList
*/
dojox.widget.FisheyeList.prototype._calcHitGrid=function(){};
/**
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @extends dijit._Contained
 * @returns {dojox.widget.FisheyeListItem} new instance
*/
dojox.widget.FisheyeListItem=function(){};
/**
 * @memberOf dojox.widget.FisheyeListItem
*/
dojox.widget.FisheyeListItem.prototype.startup=function(){};
/**
 * @memberOf dojox.widget.FisheyeListItem
*/
dojox.widget.FisheyeListItem.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback when user moves mouse over this menu item<br>
 *	 in conservative mode, don't activate the menu until user mouses over an icon<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.widget.FisheyeListItem
*/
dojox.widget.FisheyeListItem.prototype.onMouseOver=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback when user moves mouse off of this menu item<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.widget.FisheyeListItem
*/
dojox.widget.FisheyeListItem.prototype.onMouseOut=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 user overridable callback when user clicks this menu item<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.widget.FisheyeListItem
*/
dojox.widget.FisheyeListItem.prototype.onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 checks to see if wh is actually a node.<br>
 * </blockquote>
 * @param {object} wh 
 * @private
 * @returns {boolean} -
 * @memberOf dojox.widget.FisheyeListItem
*/
dojox.widget.FisheyeListItem.prototype._isNode=function(wh){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns whether or not node is a child of another node.<br>
 * </blockquote>
 * @param {Node} node 
 * @private
 * @returns {boolean} -
 * @memberOf dojox.widget.FisheyeListItem
*/
dojox.widget.FisheyeListItem.prototype._hasParent=function(node){};
/**
 * @namespace
*/
dojox.widget.FisheyeListItem.imgNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 A Light-weight Fisheye Component, or an exhanced version<br>
 *	 of dojo.fx.Toggler ...<br>
 * </blockquote>
 * A Simple FisheyeList-like widget which (in the interest of<br>
 * performance) relies on well-styled content for positioning,<br>
 * and natural page layout for rendering.<br>
 * <br>
 * use position:absolute/relative nodes to prevent layout<br>
 * changes, and use caution when seleting properties to<br>
 * scale. Negative scaling works, but some properties<br>
 * react poorly to being set to negative values, IE being<br>
 * particularly annoying in that regard.<br>
 * <br>
 * quirk: uses the domNode as the target of the animation<br>
 * unless it finds a node class="fisheyeTarget" in the container<br>
 * being turned into a FisheyeLite instance
 * @class
 * @extends dijit._Widget
 * @param {mixed} props 
 * @param {mixed} node 
 * @returns {dojox.widget.FisheyeLite} new instance
 * @example
 * 	// make all the LI's in a node Fisheye's:
 *	dojo.query("#node li").forEach(function(n){
 * 		new dojox.widget.FisheyeLite({},n);
 * 	});
 * @example
 * 	new dojox.widget.FisheyeLite({
 * 		properties:{
 * 			// height is literal, width is multiplied
 * 			height:{ end: 200 }, width:2.3
 * 		}
 * 	}, "someNode");
 * 
 * duationIn: Integer
 * The time (in ms) the run the show animation
*/
dojox.widget.FisheyeLite=function(props, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Show this Fisheye item.<br>
 * </blockquote>
 * @memberOf dojox.widget.FisheyeLite
*/
dojox.widget.FisheyeLite.prototype.show=function(){};
/**
 * @memberOf dojox.widget.FisheyeLite
*/
dojox.widget.FisheyeLite.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub function fired when Fisheye Item is fully visible and<br>
 *	 hovered. connect or override use.<br>
 * </blockquote>
 * @param {Object} e 
 * @memberOf dojox.widget.FisheyeLite
*/
dojox.widget.FisheyeLite.prototype.onSelected=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub function fired when target is clicked<br>
 *	 connect or override to use.<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.widget.FisheyeLite
*/
dojox.widget.FisheyeLite.prototype.onClick=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hide this fisheye item on mouse leave<br>
 * </blockquote>
 * @memberOf dojox.widget.FisheyeLite
*/
dojox.widget.FisheyeLite.prototype.hide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function to use for the hide animation<br>
 * </blockquote>
*/
dojox.widget.FisheyeLite.easeOut=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An easing function to use for the show animation<br>
 * </blockquote>
*/
dojox.widget.FisheyeLite.easeIn=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Pre-generate the animations<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.FisheyeLite
*/
dojox.widget.FisheyeLite.prototype._makeAnims=function(){};
/**
 * @class
 * @extends dijit.Declaration
 * @returns {dojox.widget.Iterator} new instance
*/
dojox.widget.Iterator=function(){};
/**
 * @namespace
*/
dojox.widget.Iterator.query={};
/**
 * @memberOf dojox.widget.Iterator
*/
dojox.widget.Iterator.prototype.update=function(){};
/**
 * @param {mixed} p 
 * @param {mixed} s 
 * @memberOf dojox.widget.Iterator
*/
dojox.widget.Iterator.prototype.postscript=function(p, s){};
/**
 * @param {mixed} data 
 * @memberOf dojox.widget.Iterator
*/
dojox.widget.Iterator.prototype.onDataAvailable=function(data){};
/**
 * @param {mixed} item 
 * @memberOf dojox.widget.Iterator
*/
dojox.widget.Iterator.prototype.getAttrValuesObj=function(item){};
/**
 * @param {mixed} query 
 * @param {mixed} start 
 * @param {mixed} end 
 * @memberOf dojox.widget.Iterator
*/
dojox.widget.Iterator.prototype.fetch=function(query, start, end){};
/**
 * @memberOf dojox.widget.Iterator
*/
dojox.widget.Iterator.prototype.clear=function(){};
/**
 * @param {mixed} s 
 * @private
 * @memberOf dojox.widget.Iterator
*/
dojox.widget.Iterator.prototype._setSrcIndex=function(s){};
/**
 * @param {Object} config 
 * @param {mixed} idx 
 * @private
 * @memberOf dojox.widget.Iterator
*/
dojox.widget.Iterator.prototype._addItem=function(config, idx){};
/**
 * <b>Summary:</b><blockquote>
 *	 a configurable global xhr-listener to display<br>
 *	 a loading message during running xhr's or to simply provide<br>
 *	 base-level topic to subscribe to for custom loading messages<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @returns {dojox.widget.Loader} new instance
*/
dojox.widget.Loader=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 setup the loader<br>
 * </blockquote>
 * @memberOf dojox.widget.Loader
*/
dojox.widget.Loader.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 publish and show progress indicator<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Loader
*/
dojox.widget.Loader.prototype._show=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 set's the message in the loader<br>
 * </blockquote>
 * @param {String} message 
 * @private
 * @memberOf dojox.widget.Loader
*/
dojox.widget.Loader.prototype._setMessage=function(message){};
/**
 * <b>Summary:</b><blockquote>
 *	 place the floating loading element based on mousemove connection position<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.widget.Loader
*/
dojox.widget.Loader.prototype._putLoader=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 publish &amp;quot;xhr ended&amp;quot; and hide progress indicator<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Loader
*/
dojox.widget.Loader.prototype._hide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple GUI for choosing several dates in the context of a monthly calendar.<br>
 * </blockquote>
 * A simple GUI for choosing several dates in the context of a monthly calendar.<br>
 * This widget serialises its selected dates to ISO dates or ISO ranges of dates,<br>
 * depending on developer selection<br>
 * Note that it accepts an Array of ISO dates as its input
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @extends dijit._CssStateMixin
 * @param {Object} args 
 * @returns {dojox.widget.MultiSelectCalendar} new instance
 * @example
 * 	var calendar = new dojox.widget.MultiSelectCalendar({value: ['2011-05-07,'2011-05-08',2011-05-09','2011-05-23']}, dojo.byId("calendarNode"));
 * @example
 * 	&lt;div dojoType="dojox.widget.MultiSelectCalendar"&gt;&lt;/div&gt;
*/
dojox.widget.MultiSelectCalendar=function(args){};
/**
 * @namespace
*/
dojox.widget.MultiSelectCalendar.cssStateNodes={};
/**
 * @param {date} dateToUnselect 
 * @param {array} unselectedDates of dates
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.unselectDate=function(dateToUnselect, unselectedDates){};
/**
 * @param {date} dateToToggle 
 * @param {array} selectedDates of dates
 * @param {array} unselectedDates of dates
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.toggleDate=function(dateToToggle, selectedDates, unselectedDates){};
/**
 * @param {date} dateToSelect 
 * @param {array} selectedDates of dates
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.selectDate=function(dateToSelect, selectedDates){};
/**
 * <b>Summary:</b><blockquote>
 *	 Notification that a date cell or more were unselected.<br>
 * </blockquote>
 * Passes on the list of ISO dates that are unselected
 * @param {array} dates of ISO dates
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.onValueUnselected=function(dates){};
/**
 * <b>Summary:</b><blockquote>
 *	 Notification that a date cell or more were selected.<br>
 * </blockquote>
 * Passes on the list of ISO dates that are selected
 * @param {array} dates of ISO dates
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.onValueSelected=function(dates){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called only when the selected date has changed<br>
 * </blockquote>
 * @param {Date} date 
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.onChange=function(date){};
/**
 * <b>Summary:</b><blockquote>
 *	 May be overridden to disable certain dates in the calendar e.g. `isDisabledDate=dojo.date.locale.isWeekend`<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @param {String} [locale] 
 * @returns {Boolean} -
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.isDisabledDate=function(dateObject, locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 Provides keyboard navigation of calendar.<br>
 * </blockquote>
 * Called from _onKeyPress() to handle keypress on a stand alone Calendar,<br>
 * and also from `dijit.form._DateTimeTextBox` to pass a keypress event<br>
 * from the `dijit.form.DateTextBox` to be handled in this widget
 * @param {Event} evt 
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.handleKey=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 We go to today but we do no select it<br>
 * </blockquote>
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.goToToday=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 May be overridden to return CSS classes to associate with the date entry for the given dateObject,<br>
 *	 for example to indicate a holiday in specified locale.<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @param {String} [locale] 
 * @returns {String} -
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.getClassForDate=function(dateObject, locale){};
/**
 * @param {mixed} lastElement 
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.focusOnLastDate=function(lastElement){};
/**
 * <b>Summary:</b><blockquote>
 *	 Focus the calendar by focusing one of the calendar cells<br>
 * </blockquote>
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.focus=function(){};
/**
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype.buildRendering=function(){};
/**
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._sort=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Support set(&amp;quot;value&amp;quot;, ...)<br>
 * </blockquote>
 * Set the passed dates to the selected date and updates the value of this widget<br>
 * to reflect that
 * @param {Date|Number|array} value Can be a Date, the number of milliseconds since 1970 or an array of ISO dates (['2011-07-01', '2001-06-01']).
 * @param {Boolean} priorityChange 
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._setValueAttr=function(value, priorityChange){};
/**
 * <b>Summary:</b><blockquote>
 *	 This just sets the content of node to the specified text.<br>
 *	 Can't do &amp;quot;node.innerHTML=text&amp;quot; because of an IE bug w/tables, see #3434.<br>
 * </blockquote>
 * @param {mixed} node 
 * @param {mixed} text 
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._setText=function(node, text){};
/**
 * records the end of a date range
 * @param {Date} value 
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._setEndRangeAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 If the calendar currently has focus, then focuses specified date,<br>
 *	 changing the currently displayed month/year if necessary.<br>
 *	 If the calendar doesn't have focus, updates currently<br>
 *	 displayed month/year, and sets the cell that will get focus.<br>
 * </blockquote>
 * @param {Date} date 
 * @param {Boolean} forceFocus If true, will focus() the cell even if calendar itself doesn't have focus
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._setCurrentFocusAttr=function(date, forceFocus){};
/**
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._selectRange=function(){};
/**
 * @param {Array} selectedDates of sorted ISO dates
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._returnDatesWithIsoRanges=function(selectedDates){};
/**
 * @param {date} beginning 
 * @param {date} end 
 * @param {array} selectedDates 
 * @param {array} unselectedDates 
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._removeFromRangeRTL=function(beginning, end, selectedDates, unselectedDates){};
/**
 * @param {date} beginning 
 * @param {date} end 
 * @param {array} selectedDates 
 * @param {array} unselectedDates 
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._removeFromRangeLTR=function(beginning, end, selectedDates, unselectedDates){};
/**
 * <b>Summary:</b><blockquote>
 *	 Fills in the calendar grid with each day (1-31)<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._populateGrid=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for when user selects a month from the drop down list<br>
 * </blockquote>
 * @param {Number} newMonth 
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._onMonthSelect=function(newMonth){};
/**
 * <b>Summary:</b><blockquote>
 *	 For handling keypress events on a stand alone calendar<br>
 * </blockquote>
 * @param {Event} evt 
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._onKeyPress=function(evt){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._onDayMouseUp=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for mouse over events on days, sets hovered style<br>
 * </blockquote>
 * @param {Event} evt 
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._onDayMouseOver=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for mouse out events on days, clears hovered style<br>
 * </blockquote>
 * @param {Event} evt 
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._onDayMouseOut=function(evt){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._onDayMouseDown=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handler for day clicks, selects the date if appropriate<br>
 * </blockquote>
 * @param {Event} evt 
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._onDayClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 Runs various tests on the value, checking that it's a valid date, rather<br>
 *	 than blank or NaN.<br>
 * </blockquote>
 * @param {Date} value 
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._isValidDate=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns true if the passed date is part of the selected dates of the calendar<br>
 * </blockquote>
 * @param {Date} dateObject 
 * @param {String} [locale] 
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._isSelectedDate=function(dateObject, locale){};
/**
 * <b>Summary:</b><blockquote>
 *	 this method returns the list of selected dates in an array structure<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._getValueAttr=function(){};
/**
 * @param {ISO} dateNode date
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._getNodeByDate=function(dateNode){};
/**
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._getEndRangeAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Runs various tests on each selected date, checking that they're a valid date, rather<br>
 *	 than blank or NaN.<br>
 * </blockquote>
 * @param {Date} value 
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._areValidDates=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Moves calendar forwards or backwards by months or years<br>
 * </blockquote>
 * @param {String} part &quot;month&quot; or &quot;year&quot;
 * @param {int} amount Number of months or years
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._adjustDisplay=function(part, amount){};
/**
 * @param {date} beginning 
 * @param {date} end 
 * @param {array} selectedDates 
 * @param {array} unselectedDates 
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._addToRangeRTL=function(beginning, end, selectedDates, unselectedDates){};
/**
 * @param {date} beginning 
 * @param {date} end 
 * @param {array} selectedDates 
 * @param {array} unselectedDates 
 * @private
 * @memberOf dojox.widget.MultiSelectCalendar
*/
dojox.widget.MultiSelectCalendar.prototype._addToRangeLTR=function(beginning, end, selectedDates, unselectedDates){};
/**
 * @namespace
*/
dojox.widget.MultiSelectCalendar.monthDropDownButton={};
/**
 * <b>Summary:</b><blockquote>
 *	 The month drop down<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._TemplatedMixin
 * @extends dijit._WidgetsInTemplateMixin
 * @returns {dojox.widget._MonthDropDown} new instance
*/
dojox.widget._MonthDropDown=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Callback when month is selected from drop down<br>
 * </blockquote>
 * @param {Number} month 
 * @memberOf dojox.widget._MonthDropDown
*/
dojox.widget._MonthDropDown.prototype.onChange=function(month){};
/**
 * @param {String[]} months 
 * @private
 * @memberOf dojox.widget._MonthDropDown
*/
dojox.widget._MonthDropDown.prototype._setMonthsAttr=function(months){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.widget._MonthDropDown
*/
dojox.widget._MonthDropDown.prototype._onMenuHover=function(evt){};
/**
 * @param {Event} evt 
 * @private
 * @memberOf dojox.widget._MonthDropDown
*/
dojox.widget._MonthDropDown.prototype._onClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Pager, displaying a list of sized nodes<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @returns {dojox.widget.Pager} new instance
*/
dojox.widget.Pager=function(){};
/**
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype.postMixInProperties=function(){};
/**
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub Function. Fired after the slide is complete. Override or connect.<br>
 * </blockquote>
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype.onScrollEnd=function(){};
/**
 * @private
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype._renderStatus=function(){};
/**
 * @private
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype._renderPages=function(){};
/**
 * @private
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype._renderPager=function(){};
/**
 * @param {mixed} page 
 * @private
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype._pagerSkip=function(page){};
/**
 * @private
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype._pagerPrevious=function(){};
/**
 * @private
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype._pagerNext=function(){};
/**
 * @param {mixed} items 
 * @private
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype._init=function(items){};
/**
 * <b>Summary:</b><blockquote>
 *	 Handle keyboard navigation internally<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype._handleKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 top level onfocus/onblur listen to set a class &amp;quot;pagerFocus&amp;quot; on some node<br>
 *	 and remove it onblur<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.widget.Pager
*/
dojox.widget.Pager.prototype._a11yStyle=function(e){};
/**
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @returns {dojox.widget._PagerItem} new instance
*/
dojox.widget._PagerItem=function(){};
/**
 * @memberOf dojox.widget._PagerItem
*/
dojox.widget._PagerItem.prototype.resizeChildren=function(){};
/**
 * @memberOf dojox.widget._PagerItem
*/
dojox.widget._PagerItem.prototype.parseChildren=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A menu item that can be used as a placeholder.  Set the label<br>
 *	 of this item to a unique key and you can then use it to add new<br>
 *	 items at that location.  This item is not displayed.<br>
 * </blockquote>
 * @class
 * @extends dijit.MenuItem
 * @returns {dojox.widget.PlaceholderMenuItem} new instance
*/
dojox.widget.PlaceholderMenuItem=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes menu items added by calling replace().  It returns the<br>
 *	 array of items that were actually removed (in case you want to<br>
 *	 clean them up later)<br>
 * </blockquote>
 * @param {Boolean} [destroy] Also call destroy on any removed items.
 * 
 * @returns {dijit.MenuItem[]} -
 * @memberOf dojox.widget.PlaceholderMenuItem
*/
dojox.widget.PlaceholderMenuItem.prototype.unReplace=function(destroy){};
/**
 * <b>Summary:</b><blockquote>
 *	 replaces this menu item with the given menuItems.  The original<br>
 *	 menu item is not actually removed from the menu - so if you want<br>
 *	 it removed, you must do that explicitly.<br>
 * </blockquote>
 * @param {dijit.MenuItem[]} menuItems 
 * @memberOf dojox.widget.PlaceholderMenuItem
*/
dojox.widget.PlaceholderMenuItem.prototype.replace=function(menuItems){};
/**
 * @memberOf dojox.widget.PlaceholderMenuItem
*/
dojox.widget.PlaceholderMenuItem.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container widget that is designed to be contained<br>
 *	 in a dojox.layout.GridContainer. Child widgets can insert<br>
 *	 an icon into the title bar of the Portlet, which when<br>
 *	 clicked, executes the &amp;quot;toggle&amp;quot; method of the child widget.<br>
 *	 A child widget must specify the attribute<br>
 *	 &amp;quot;portletIconClass&amp;quot;, and the optional class<br>
 *	 &amp;quot;portletIconHoverClass&amp;quot;, as well as the<br>
 *	 &amp;quot;toggle&amp;quot; function.<br>
 * </blockquote>
 * @class
 * @extends dijit.TitlePane
 * @extends dijit._Container
 * @returns {dojox.widget.Portlet} new instance
*/
dojox.widget.Portlet=function(){};
/**
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype.startup=function(){};
/**
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function called when the size is changed.<br>
 * </blockquote>
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype.onUpdateSize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the Portlet size if any other Portlet<br>
 *	 changes its size.<br>
 * </blockquote>
 * @param {mixed} widget 
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype.onSizeChange=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hides the portlet. Note that it does not<br>
 *	 persist this, so it is up to the client to<br>
 *	 listen to this method and persist the closed state<br>
 *	 in their own way.<br>
 * </blockquote>
 * @param {mixed} evt 
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype.onClose=function(evt){};
/**
 * @param {Boolean} preserveDom 
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype.destroyDescendants=function(preserveDom){};
/**
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype.destroy=function(){};
/**
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype.buildRendering=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Adds a child widget to the portlet.<br>
 * </blockquote>
 * @param {mixed} child 
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype.addChild=function(child){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates the size of all child widgets.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype._updateSize=function(){};
/**
 * @private
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype._setCss=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Publishes an event that all other portlets listen to.<br>
 *	 This causes them to update their child widgets if their<br>
 *	 size has changed.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype._publish=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Checks all the children to see if they are instances<br>
 *	 of dojox.widget.PortletSettings. If they are,<br>
 *	 create an icon for them in the title bar which when clicked,<br>
 *	 calls their toggle() method.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype._placeSettingsWidgets=function(){};
/**
 * @param {mixed} evt 
 * @private
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype._onTitleClick=function(evt){};
/**
 * <b>Summary:</b><blockquote>
 *	 creates an icon in the title bar.<br>
 * </blockquote>
 * @param {mixed} clazz 
 * @param {mixed} hoverClazz 
 * @param {mixed} fn 
 * @private
 * @memberOf dojox.widget.Portlet
*/
dojox.widget.Portlet.prototype._createIcon=function(clazz, hoverClazz, fn){};
/**
 * <b>Summary:</b><blockquote>
 *	 A settings widget to be used with a dojox.widget.Portlet.<br>
 * </blockquote>
 * This widget should be placed inside a dojox.widget.Portlet widget.<br>
 * It is used to set some preferences for that Portlet.	It is essentially<br>
 * a ContentPane, and should contain other widgets and DOM nodes that<br>
 * do the real work of setting preferences for the portlet.
 * @class
 * @extends dijit._Container
 * @extends dijit.layout.ContentPane
 * @returns {dojox.widget.PortletSettings} new instance
*/
dojox.widget.PortletSettings=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Toggles the visibility of this widget.<br>
 * </blockquote>
 * @memberOf dojox.widget.PortletSettings
*/
dojox.widget.PortletSettings.prototype.toggle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the require CSS classes on the widget.<br>
 * </blockquote>
 * @memberOf dojox.widget.PortletSettings
*/
dojox.widget.PortletSettings.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the portlet that encloses this widget.<br>
 * </blockquote>
 * @param {mixed} portlet 
 * @private
 * @memberOf dojox.widget.PortletSettings
*/
dojox.widget.PortletSettings.prototype._setPortletAttr=function(portlet){};
/**
 * <b>Summary:</b><blockquote>
 *	 A settings widget to be used with a dojox.widget.Portlet, which displays<br>
 *	 the contents of this widget in a dijit.Dialog box.<br>
 * </blockquote>
 * @class
 * @extends dojox.widget.PortletSettings
 * @param {mixed} props 
 * @param {mixed} node 
 * @returns {dojox.widget.PortletDialogSettings} new instance
*/
dojox.widget.PortletDialogSettings=function(props, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Shows and hides the Dialog box.<br>
 * </blockquote>
 * @memberOf dojox.widget.PortletDialogSettings
*/
dojox.widget.PortletDialogSettings.prototype.toggle=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A simple widget to take an unordered-list of Text and roll through them<br>
 * </blockquote>
 * The Roller widget takes an unordered-list of items, and converts<br>
 * them to a single-area (the size of one list-item, however you so choose<br>
 * to style it) and loops continually, fading between items.<br>
 * <br>
 * In it's current state, it requires it be created from an unordered (or ordered)<br>
 * list, though can contain complex markup.<br>
 * <br>
 * You can manipulate the `items` array at any point during the cycle with<br>
 * standard array manipulation techniques.<br>
 * <br>
 * The class "dojoxRoller" is added to the UL element for styling purposes.
 * @class
 * @extends dijit._Widget
 * @returns {dojox.widget.Roller} new instance
 * @example
 * 	// create a scroller from a unordered list with id="lister"
 * 	var thinger = new dojox.widget.Roller.Roller({},"lister");
 * @example
 * 	// create a scroller from a fixed array, and place in the DOM:
 * 	new dojox.widget.Roller({ items:["one","two","three"] }).placeAt(dojo.body());
 * @example
 * 	// add an item:
 * 	dijit.byId("roller").items.push("I am a new Label");
 * @example
 * 	// stop a roller from rolling:
 * 	dijit.byId("roller").stop();
*/
dojox.widget.Roller=function(){};
/**
 * @namespace
 * @private
*/
dojox.widget.Roller._roller={};
/**
 * <b>Summary:</b><blockquote>
 *	 Stops the Roller from looping anymore.<br>
 * </blockquote>
 * @memberOf dojox.widget.Roller
*/
dojox.widget.Roller.prototype.stop=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Starts to Roller looping<br>
 * </blockquote>
 * @memberOf dojox.widget.Roller
*/
dojox.widget.Roller.prototype.start=function(){};
/**
 * @memberOf dojox.widget.Roller
*/
dojox.widget.Roller.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Animation creator function. Need to create an 'in' and 'out'<br>
 *	 Animation stored in _anim Object, which the rest of the widget<br>
 *	 will reuse.<br>
 * </blockquote>
 * @memberOf dojox.widget.Roller
*/
dojox.widget.Roller.prototype.makeAnims=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 setup the loop connection logic<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Roller
*/
dojox.widget.Roller.prototype._setupConnects=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set the Roller to some passed index. If beyond range, go to first.<br>
 * </blockquote>
 * @param {mixed} i 
 * @private
 * @memberOf dojox.widget.Roller
*/
dojox.widget.Roller.prototype._setIndex=function(i){};
/**
 * @private
 * @memberOf dojox.widget.Roller
*/
dojox.widget.Roller.prototype._run=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An add-on to the Roller to modify animations. This produces<br>
 *	 a slide-from-bottom like effect. See `dojox.widget.Roller` for<br>
 *	 full API information.<br>
 * </blockquote>
 * @class
 * @extends dojox.widget.Roller
 * @returns {dojox.widget.RollerSlide} new instance
*/
dojox.widget.RollerSlide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Animation creator function. Need to create an 'in' and 'out'<br>
 *	 Animation stored in _anim Object, which the rest of the widget<br>
 *	 will reuse.<br>
 * </blockquote>
 * @memberOf dojox.widget.RollerSlide
*/
dojox.widget.RollerSlide.prototype.makeAnims=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A mixin class to provide a way to automate the &amp;quot;stop on hover&amp;quot; functionality.<br>
 * </blockquote>
 * A mixin class used to provide a way to automate a "stop on hover" behavior,<br>
 * while still allowing for ambigious subclassing for custom animations.<br>
 * Simply mix this class into a `dojox.widget.Roller` variant, and instantiate<br>
 * as you would. The hover connection is done automatically.<br>
 * <br>
 * The "hover" functionality is as such: Stop rotation while the mouse is over the<br>
 * instance, and resume again once leaving. Even if autoStart is disabled, the widget<br>
 * will start if a mouse enters and leaves the node in this case.
 * @class
 * @returns {dojox.widget._RollerHover} new instance
 * @example
 *  dojo.declare("my.Roller", [dojox.widget.RollerSlide, dojox.widget._RollerHover], {});
 *  new my.Roller({}, "myList");
*/
dojox.widget._RollerHover=function(){};
/**
 * @memberOf dojox.widget._RollerHover
*/
dojox.widget._RollerHover.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 a pane that will handle groups (treats them as menu items)<br>
 * </blockquote>
 * @class
 * @extends dojox.widget._RollingListPane
 * @returns {dojox.widget._RollingListGroupPane} new instance
*/
dojox.widget._RollingListGroupPane=function(){};
/**
 * @memberOf dojox.widget._RollingListGroupPane
*/
dojox.widget._RollingListGroupPane.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called after a fetch or load<br>
 * </blockquote>
 * @memberOf dojox.widget._RollingListGroupPane
*/
dojox.widget._RollingListGroupPane.prototype.onItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the focus to this current widget<br>
 * </blockquote>
 * @param {mixed} dijita 
 * @memberOf dojox.widget._RollingListGroupPane
*/
dojox.widget._RollingListGroupPane.prototype.focus=function(dijita){};
/**
 * <b>Summary:</b><blockquote>
 *	 selectes the given item in the given menu (defaults to pane's menu)<br>
 * </blockquote>
 * @param {mixed} _43 
 * @param {mixed} _44 
 * @private
 * @memberOf dojox.widget._RollingListGroupPane
*/
dojox.widget._RollingListGroupPane.prototype._setSelected=function(_43, _44){};
/**
 * @param {mixed} dojof 
 * @private
 * @memberOf dojox.widget._RollingListGroupPane
*/
dojox.widget._RollingListGroupPane.prototype._setContent=function(dojof){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when the pane has been scrolled - it sets a timeout<br>
 *	 so that we don't try and load our visible items too often during<br>
 *	 a scroll<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget._RollingListGroupPane
*/
dojox.widget._RollingListGroupPane.prototype._onScrollPane=function(){};
/**
 * @param {mixed} v 
 * @private
 * @memberOf dojox.widget._RollingListGroupPane
*/
dojox.widget._RollingListGroupPane.prototype._onMinWidthChange=function(v){};
/**
 * <b>Summary:</b><blockquote>
 *	 loads the items that are currently visible in the pane<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget._RollingListGroupPane
*/
dojox.widget._RollingListGroupPane.prototype._loadVisibleItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns the selected menu item - or null if none are selected<br>
 * </blockquote>
 * @param {mixed} _40 
 * @private
 * @memberOf dojox.widget._RollingListGroupPane
*/
dojox.widget._RollingListGroupPane.prototype._getSelected=function(_40){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a widget to be used for the container widget.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget._RollingListGroupPane
*/
dojox.widget._RollingListGroupPane.prototype._getMenu=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 checks whether or not we need to connect to our onscroll<br>
 *	 function<br>
 * </blockquote>
 * @param {mixed} dijit8 
 * @private
 * @memberOf dojox.widget._RollingListGroupPane
*/
dojox.widget._RollingListGroupPane.prototype._checkScrollConnection=function(dijit8){};
/**
 * <b>Summary:</b><blockquote>
 *	 a core pane that can be attached to a RollingList.  All panes<br>
 *	 should extend this one<br>
 * </blockquote>
 * @class
 * @extends dijit.layout.ContentPane
 * @extends dijit._Templated
 * @extends dijit._Contained
 * @returns {dojox.widget._RollingListPane} new instance
*/
dojox.widget._RollingListPane=function(){};
/**
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.parentWidget=null;
/**
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called before a load starts<br>
 * </blockquote>
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype.onLoadStart=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when a load error occurs.<br>
 * </blockquote>
 * @param {Error} error 
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype.onLoadError=function(error){};
/**
 * <b>Summary:</b><blockquote>
 *	 called after a fetch or load - at this point, this.items should be<br>
 *	 set and loaded.  Override this function to &amp;quot;do your stuff&amp;quot;<br>
 * </blockquote>
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype.onItems=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called before a fetch starts<br>
 * </blockquote>
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype.onFetchStart=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when a fetch error occurs.<br>
 * </blockquote>
 * @param {Error} error 
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype.onFetchError=function(error){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the focus to this current widget<br>
 * </blockquote>
 * @param {boolean} force 
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype.focus=function(force){};
/**
 * <b>Summary:</b><blockquote>
 *	 updates the min width of the pane to be minPaneWidth<br>
 * </blockquote>
 * @param {mixed} n 
 * @param {mixed} min 
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._updateNodeWidth=function(n, min){};
/**
 * @param {mixed} v 
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._setMinWidthAttr=function(v){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the value of the content and scrolls it into view<br>
 * </blockquote>
 * @param {String|DomNode|Nodelist} cont 
 * @param {Boolean} [isFakeContent] 
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._setContentAndScroll=function(cont, isFakeContent){};
/**
 * <b>Summary:</b><blockquote>
 *	 checks that the store is loaded<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._onShow=function(){};
/**
 * @param {item} item 
 * @param {attribute-name-string} attribute 
 * @param {object} oldValue | array
 * @param {object} newValue | array
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._onSetItem=function(item, attribute, oldValue, newValue){};
/**
 * @param {item} newItem 
 * @param {object} [parentInfo] 
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._onNewItem=function(newItem, parentInfo){};
/**
 * @param {mixed} v 
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._onMinWidthChange=function(v){};
/**
 * @param {item} deletedItem 
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._onDeleteItem=function(deletedItem){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the &amp;quot;loading&amp;quot; message and then kicks off a query asyncronously<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._load=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns whether or not the given item is handled by this<br>
 *	 pane<br>
 * </blockquote>
 * @param {item} item 
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._hasItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when a keypress happens on the widget<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._focusKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 either runs the query or loads potentially not-yet-loaded items.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._doQuery=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 loads the given items, and then calls the callback when they<br>
 *	 are finished.<br>
 * </blockquote>
 * @param {item[]} items 
 * @param {function} callback 
 * @private
 * @memberOf dojox.widget._RollingListPane
*/
dojox.widget._RollingListPane.prototype._doLoadItems=function(items, callback){};
/**
 * <b>Summary:</b><blockquote>
 *	 a rolling list that can be tied to a data store with children<br>
 * </blockquote>
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @extends dijit._Container
 * @returns {dojox.widget.RollingList} new instance
*/
dojox.widget.RollingList=function(){};
/**
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 scrolls the given widget into view<br>
 * </blockquote>
 * @param {dijit._Widget} childWidget 
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.scrollIntoView=function(childWidget){};
/**
 * @param {mixed} args 
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.resize=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Mix in our labels, if they are not set<br>
 * </blockquote>
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when an item is clicked - it receives the store item<br>
 * </blockquote>
 * @param {item} item 
 * @param {dijit._Contained} pane 
 * @param {item[]} [children] 
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.onItemClick=function(item, pane, children){};
/**
 * <b>Summary:</b><blockquote>
 *	 exists so that popups don't disappear too soon<br>
 * </blockquote>
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.onExecute=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when the value of this widget has changed<br>
 * </blockquote>
 * @param {item} value 
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.onChange=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 exists so that we can close ourselves if we wish<br>
 * </blockquote>
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.onCancel=function(){};
/**
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.layout=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 handle the key for the given event - called by dropdown<br>
 *	 widgets<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.handleKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 user-overridable function to return a pane that corresponds<br>
 *	 to the given item in the store.  It can return null to not add a new pane<br>
 *	 (ie, you are planning on doing something else with it in onItemClick)<br>
 *	 <br>
 *	 Item is undefined for the root pane, children is undefined for non-group panes<br>
 * </blockquote>
 * @param {item} [item] 
 * @param {dijit._Contained} [parentPane] 
 * @param {item[]} [children] 
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.getPaneForItem=function(item, parentPane, children){};
/**
 * <b>Summary:</b><blockquote>
 *	 user overridable function to return a widget for the given item<br>
 *	 and its children.<br>
 * </blockquote>
 * @param {item} item 
 * @param {dijit._Contained} parentPane 
 * @param {item[]} [children] 
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.getMenuItemForItem=function(item, parentPane, children){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns the child items for the given store item<br>
 * </blockquote>
 * @param {item} item 
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.getChildItems=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the focus state of this widget<br>
 * </blockquote>
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.focus=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 adds a child to this rolling list - if passed an insertIndex,<br>
 *	 then all children from that index on will be removed and destroyed<br>
 *	 before adding the child.<br>
 * </blockquote>
 * @param {dijit._Widget} widget 
 * @param {int} [insertIndex] 
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype.addChild=function(widget, insertIndex){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the state of the given node with the given type and options<br>
 * </blockquote>
 * @param {Node} node 
 * @param {String} type 
 * @param {Object} [options] an object with key-value-pairs.  The values are boolean, if true,
 * the key is added as a class, if false, it is removed.
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._updateClass=function(node, type, options){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when a child is added or removed - so that we can<br>
 *	 update the classes for styling the &amp;quot;current&amp;quot; one differently than<br>
 *	 the others<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._updateChildClasses=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the value of this widget to the given store item<br>
 * </blockquote>
 * @param {item} value 
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._setValueAttr=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 internally sets the value and fires onchange<br>
 * </blockquote>
 * @param {item} value 
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._setValue=function(value){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets the store for this widget<br>
 * </blockquote>
 * @param {dojo.data.api.Read} store 
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._setStore=function(store){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the visibility of the buttons for the widget<br>
 * </blockquote>
 * @param {mixed} doShow 
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._setShowButtonsAttr=function(doShow){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the min pane width of all children<br>
 * </blockquote>
 * @param {mixed} value 
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._setMinPaneWidthAttr=function(value){};
/**
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._resetValue=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes all widgets after the given widget (or index)<br>
 * </blockquote>
 * @param {Widget} idx or int
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._removeAfter=function(idx){};
/**
 * <b>Summary:</b><blockquote>
 *	 called when a keypress event happens on this widget<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._onKey=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 internally called when a widget should pop up its child<br>
 * </blockquote>
 * @param {Event} evt 
 * @param {dijit._Contained} pane 
 * @param {item} item 
 * @param {item[]} [children] 
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._onItemClick=function(evt, pane, item, children){};
/**
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._onExecute=function(){};
/**
 * @param {item} value 
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._onChange=function(value){};
/**
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._onCancel=function(){};
/**
 * @param {item} item1 
 * @param {item} item2 
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._itemsMatch=function(item1, item2){};
/**
 * <b>Summary:</b><blockquote>
 *	 gets the pane for the given item, and mixes in our needed parts<br>
 *	 Returns the pane for the given item (null if the root pane) - after mixing in<br>
 *	 its stuff.<br>
 * </blockquote>
 * @param {item} [item] 
 * @param {dijit._Contained} [parentPane] 
 * @param {item[]} [children] 
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._getPaneForItem=function(item, parentPane, children){};
/**
 * <b>Summary:</b><blockquote>
 *	 returns a widget for the given store item.  The returned<br>
 *	 item will be added to this widget's container widget.  null will<br>
 *	 be passed in for an &amp;quot;empty&amp;quot; item.<br>
 * </blockquote>
 * @param {item} item 
 * @param {dijit._Contained} parentPane 
 * @private
 * @memberOf dojox.widget.RollingList
*/
dojox.widget.RollingList.prototype._getMenuItemForItem=function(item, parentPane){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that wipes in the next rotator pane from the bottom.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.wipeUp=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that wipes in the next rotator pane from the right.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.wipeRight=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that wipes in the next rotator pane from the left.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.wipeLeft=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that wipes in the next rotator pane from the top.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.wipeDown=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that slides in the next rotator pane from the bottom.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.slideUp=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that slides in the next rotator pane from the right.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.slideRight=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that slides in the next rotator pane from the left.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.slideLeft=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that slides in the next rotator pane from the top.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.slideDown=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that pans in the next rotator pane from the bottom.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.panUp=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that pans in the next rotator pane from the right.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.panRight=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that pans in the next rotator pane from the left.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.panLeft=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that pans in the next rotator pane from the bottom.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.panFadeUp=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that pans in the next rotator pane from the right.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.panFadeRight=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that pans in the next rotator pane from the left.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.panFadeLeft=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that pans in the next rotator pane from the top.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.panFadeDown=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that either pans left or right to the next pane.<br>
 *	 The actual direction depends on the order of the panes.<br>
 *	 <br>
 *	 If panning forward from index 1 to 3, it will perform a pan left. If panning<br>
 *	 backwards from 5 to 1, then it will perform a pan right.<br>
 *	 <br>
 *	 If the parameter &amp;quot;continuous&amp;quot; is set to true, it will return an animation<br>
 *	 chain of several pan animations of each intermediate pane panning. For<br>
 *	 example, if you pan forward from 1 to 3, it will return an animation panning<br>
 *	 left from 1 to 2 and then 2 to 3.<br>
 *	 <br>
 *	 If an easing is specified, it will be applied to each pan transition.  For<br>
 *	 example, if you are panning from pane 1 to pane 5 and you set the easing to<br>
 *	 &amp;quot;dojo.fx.easing.elasticInOut&amp;quot;, then it will &amp;quot;wobble&amp;quot; 5 times, once for each<br>
 *	 pan transition.<br>
 *	 <br>
 *	 If the parameter &amp;quot;wrap&amp;quot; is set to true, it will pan to the next pane using<br>
 *	 the shortest distance in the array of panes. For example, if there are 6<br>
 *	 panes, then panning from 5 to 1 will pan forward (left) from pane 5 to 6 and<br>
 *	 6 to 1.  If the distance is the same either going forward or backwards, then<br>
 *	 it will always pan forward (left).<br>
 *	 <br>
 *	 A continuous pan will use the target pane's duration to pan all intermediate<br>
 *	 panes.  To use the target's pane duration for each intermediate pane, then<br>
 *	 set the &amp;quot;quick&amp;quot; parameter to &amp;quot;false&amp;quot;.<br>
 * </blockquote>
 * @param {Object} args 
 * @returns {continuous gets a linear easing by default} -
*/
dojox.widget.rotator.panFade=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that pans in the next rotator pane from the top.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.panDown=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that either pans left or right to the next pane.<br>
 *	 The actual direction depends on the order of the panes.<br>
 *	 <br>
 *	 If panning forward from index 1 to 3, it will perform a pan left. If panning<br>
 *	 backwards from 5 to 1, then it will perform a pan right.<br>
 *	 <br>
 *	 If the parameter &amp;quot;continuous&amp;quot; is set to true, it will return an animation<br>
 *	 chain of several pan animations of each intermediate pane panning. For<br>
 *	 example, if you pan forward from 1 to 3, it will return an animation panning<br>
 *	 left from 1 to 2 and then 2 to 3.<br>
 *	 <br>
 *	 If an easing is specified, it will be applied to each pan transition.  For<br>
 *	 example, if you are panning from pane 1 to pane 5 and you set the easing to<br>
 *	 &amp;quot;dojo.fx.easing.elasticInOut&amp;quot;, then it will &amp;quot;wobble&amp;quot; 5 times, once for each<br>
 *	 pan transition.<br>
 *	 <br>
 *	 If the parameter &amp;quot;wrap&amp;quot; is set to true, it will pan to the next pane using<br>
 *	 the shortest distance in the array of panes. For example, if there are 6<br>
 *	 panes, then panning from 5 to 1 will pan forward (left) from pane 5 to 6 and<br>
 *	 6 to 1.  If the distance is the same either going forward or backwards, then<br>
 *	 it will always pan forward (left).<br>
 *	 <br>
 *	 A continuous pan will use the target pane's duration to pan all intermediate<br>
 *	 panes.  To use the target's pane duration for each intermediate pane, then<br>
 *	 set the &amp;quot;quick&amp;quot; parameter to &amp;quot;false&amp;quot;.<br>
 * </blockquote>
 * @param {Object} args 
 * @returns {continuous gets a linear easing by default} -
*/
dojox.widget.rotator.pan=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that fades out the current pane, then fades in<br>
 *	 the next pane.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.fade=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a dojo.Animation that cross fades two rotator panes.<br>
 * </blockquote>
 * @param {Object} args 
*/
dojox.widget.rotator.crossFade=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A rotator controller that displays thumbnails of each rotator pane.<br>
 * </blockquote>
 * The ThumbnailController will look at each of the rotator's panes and<br>
 * only if the node is an &lt;img&gt; tag, then it will create an thumbnail of<br>
 * the pane's image using the &lt;img&gt; tag's "thumbsrc" or "src" attribute.<br>
 * <br>
 * The size of the thumbnails and the style of the selected thumbnail is<br>
 * controlled using CSS.
 * @param {Object} params 
 * @param {DomNode|string} node 
 * @example
 * 	&lt;div dojoType="dojox.widget.Rotator" jsId="myRotator"&gt;
 * 		&lt;img src="/path/to/image1.jpg" thumbsrc="/path/to/thumb1.jpg" alt="Image 1"/&gt;
 * 		&lt;img src="/path/to/image2.jpg" thumbsrc="/path/to/thumb2.jpg" alt="Image 2"/&gt;
 * 	&lt;/div&gt;
 * 	&lt;div dojoType="dojox.widget.rotator.ThumbnailController" rotator="myRotator"&gt;&lt;/div&gt;
*/
dojox.widget.rotator.ThumbnailController=function(params, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 A controller that manipulates a Rotator or AutoRotator.<br>
 * </blockquote>
 * Displays a series of controls that send actions to a Rotator or<br>
 * AutoRotator.  The Controller supports the following controls:<br>
 * <br>
 * * Next pane<br>
 * * Previous pane<br>
 * * Play/Pause toggler<br>
 * * Numbered tabs<br>
 * * Titled tabs<br>
 * * Information<br>
 * <br>
 * You may specify any of these controls in any order.  You may also<br>
 * have multiple Controllers tied to a single Rotator instance.<br>
 * <br>
 * The Controller's DOM node may also be styled for positioning or<br>
 * other styled preferences.
 * @param {Object} params 
 * @param {DomNode|string} node 
 * @example
 * 	&lt;div dojoType="dojox.widget.rotator.Controller"
 * 		rotator="myRotator"
 * 	&gt;&lt;/div&gt;
 * @example
 * 	&lt;div dojoType="dojox.widget.rotator.Controller"
 * 		rotator="myRotator"
 * 		controls="prev,#,next"
 * 		class="myCtrl"
 * 	&gt;&lt;/div&gt;
 * @example
 * 	&lt;div dojoType="dojox.widget.rotator.Controller"
 * 		rotator="myRotator"
 * 		controls="titles"
 * 		class="myCtrl"
 * 	&gt;&lt;/div&gt;s
*/
dojox.widget.rotator.Controller=function(params, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 A controller that manipulates a Rotator or AutoRotator.<br>
 * </blockquote>
 * Displays a series of controls that send actions to a Rotator or<br>
 * AutoRotator.  The Controller supports the following controls:<br>
 * <br>
 * * Next pane<br>
 * * Previous pane<br>
 * * Play/Pause toggler<br>
 * * Numbered tabs<br>
 * * Titled tabs<br>
 * * Information<br>
 * <br>
 * You may specify any of these controls in any order.  You may also<br>
 * have multiple Controllers tied to a single Rotator instance.<br>
 * <br>
 * The Controller's DOM node may also be styled for positioning or<br>
 * other styled preferences.
 * @class
 * @param {Object} params 
 * @param {DomNode|string} node 
 * @returns {dojox.widget.rotator.Controller} new instance
 * @example
 * 	&lt;div dojoType="dojox.widget.rotator.Controller"
 * 		rotator="myRotator"
 * 	&gt;&lt;/div&gt;
 * @example
 * 	&lt;div dojoType="dojox.widget.rotator.Controller"
 * 		rotator="myRotator"
 * 		controls="prev,#,next"
 * 		class="myCtrl"
 * 	&gt;&lt;/div&gt;
 * @example
 * 	&lt;div dojoType="dojox.widget.rotator.Controller"
 * 		rotator="myRotator"
 * 		controls="titles"
 * 		class="myCtrl"
 * 	&gt;&lt;/div&gt;s
*/
dojox.widget.rotator.Controller=function(params, node){};
/**
 * @memberOf dojox.widget.rotator.Controller
*/
dojox.widget.rotator.Controller.rotator=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect from the rotator.<br>
 * </blockquote>
 * @memberOf dojox.widget.rotator.Controller
*/
dojox.widget.rotator.Controller.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Toggles the play/pause button, if it exists.<br>
 * </blockquote>
 * @param {boolean} playing 
 * @private
 * @memberOf dojox.widget.rotator.Controller
*/
dojox.widget.rotator.Controller.prototype._togglePlay=function(playing){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates various pager controls when the rotator updates.<br>
 * </blockquote>
 * @param {string} type 
 * @private
 * @memberOf dojox.widget.rotator.Controller
*/
dojox.widget.rotator.Controller.prototype._onUpdate=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a string containing the current pane number and the total number of panes.<br>
 * </blockquote>
 * @param {dojox.widget.Rotator} r 
 * @private
 * @memberOf dojox.widget.rotator.Controller
*/
dojox.widget.rotator.Controller.prototype._buildInfo=function(r){};
/**
 * <b>Summary:</b><blockquote>
 *	 A rotator controller that displays thumbnails of each rotator pane.<br>
 * </blockquote>
 * The ThumbnailController will look at each of the rotator's panes and<br>
 * only if the node is an &lt;img&gt; tag, then it will create an thumbnail of<br>
 * the pane's image using the &lt;img&gt; tag's "thumbsrc" or "src" attribute.<br>
 * <br>
 * The size of the thumbnails and the style of the selected thumbnail is<br>
 * controlled using CSS.
 * @class
 * @param {Object} params 
 * @param {DomNode|string} node 
 * @returns {dojox.widget.rotator.ThumbnailController} new instance
 * @example
 * 	&lt;div dojoType="dojox.widget.Rotator" jsId="myRotator"&gt;
 * 		&lt;img src="/path/to/image1.jpg" thumbsrc="/path/to/thumb1.jpg" alt="Image 1"/&gt;
 * 		&lt;img src="/path/to/image2.jpg" thumbsrc="/path/to/thumb2.jpg" alt="Image 2"/&gt;
 * 	&lt;/div&gt;
 * 	&lt;div dojoType="dojox.widget.rotator.ThumbnailController" rotator="myRotator"&gt;&lt;/div&gt;
*/
dojox.widget.rotator.ThumbnailController=function(params, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect from the rotator.<br>
 * </blockquote>
 * @memberOf dojox.widget.rotator.ThumbnailController
*/
dojox.widget.rotator.ThumbnailController.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Updates various pager controls when the rotator updates.<br>
 * </blockquote>
 * @param {string} type 
 * @private
 * @memberOf dojox.widget.rotator.ThumbnailController
*/
dojox.widget.rotator.ThumbnailController.prototype._onUpdate=function(type){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget for rotating through child nodes using transitions.<br>
 * </blockquote>
 * A small, fast, extensible, awesome rotator that cycles, with transitions,<br>
 * through panes (child nodes) displaying only one at a time and ties into<br>
 * controllers used to change state.<br>
 * <br>
 * The Rotator does not rely on dijit.  It is designed to be as lightweight<br>
 * as possible.  Controllers and transitions have been externalized<br>
 * so builds can be as optimized with only the components you want to use.<br>
 * <br>
 * For best results, each rotator pane should be the same height and width as<br>
 * the Rotator container node and consider setting overflow to hidden.<br>
 * While the Rotator will accept any DOM node for a rotator pane, a block<br>
 * element or element with display:block is recommended.<br>
 * <br>
 * Note: When the Rotator begins, it does not transition the first pane.<br>
 * <br>
 * subscribed topics:<br>
 * [id]/rotator/control - Controls the Rotator<br>
 * Parameters:<br>
 * ///string/// action		- The name of a method of the Rotator to run<br>
 * ///anything?/// args	   - One or more arguments to pass to the action<br>
 * <br>
 * published topics:<br>
 * [id]/rotator/update - Notifies controllers that a pane or state has changed.<br>
 * Parameters:<br>
 * ///string/// type		  - the type of notification<br>
 * ///dojox.widget.Rotator/// rotator<br>
 * - the rotator instance<br>
 * ///object?/// params		 - params<br>
 * <br>
 * declarative dojo/method events (per pane):<br>
 * onBeforeIn  - Fired before the transition in starts.<br>
 * onAfterIn   - Fired after the transition in ends.<br>
 * onBeforeOut - Fired before the transition out starts.<br>
 * onAfterOut  - Fired after the transition out ends.
 * @class
 * @param {Object} params 
 * @param {DomNode|string} node 
 * @returns {dojox.widget.Rotator} new instance
 * @example
 * 	&lt;div dojoType="dojox.widget.Rotator"&gt;
 * 		&lt;div&gt;Pane 1!&lt;/div&gt;
 * 		&lt;div&gt;Pane 2!&lt;/div&gt;
 * 	&lt;/div&gt;
 * @example
 * 	&lt;script type="text/javascript"&gt;
 * 		dojo.require("dojox.widget.rotator.Fade");
 * 	&lt;/script&gt;
 * 	&lt;div dojoType="dojox.widget.Rotator" transition="dojox.widget.rotator.crossFade"&gt;
 * 		&lt;div&gt;Pane 1!&lt;/div&gt;
 * 		&lt;div&gt;Pane 2!&lt;/div&gt;
 * 	&lt;/div&gt;
*/
dojox.widget.Rotator=function(params, node){};
/**
 * @param {int} width 
 * @param {int} height 
 * @memberOf dojox.widget.Rotator
*/
dojox.widget.Rotator.prototype.resize=function(width, height){};
/**
 * <b>Summary:</b><blockquote>
 *	 Transitions the Rotator to the previous pane.<br>
 * </blockquote>
 * @memberOf dojox.widget.Rotator
*/
dojox.widget.Rotator.prototype.prev=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Send a notification to all controllers with the state of the rotator.<br>
 * </blockquote>
 * @param {string} type 
 * @param {object} [params] 
 * @memberOf dojox.widget.Rotator
*/
dojox.widget.Rotator.prototype.onUpdate=function(type, params){};
/**
 * <b>Summary:</b><blockquote>
 *	 Stub function that can be overriden or connected to.<br>
 * </blockquote>
 * @memberOf dojox.widget.Rotator
*/
dojox.widget.Rotator.prototype.onManualChange=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Transitions the Rotator to the next pane.<br>
 * </blockquote>
 * @memberOf dojox.widget.Rotator
*/
dojox.widget.Rotator.prototype.next=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Transitions the Rotator to the specified pane index.<br>
 * </blockquote>
 * @param {int|string} [p] 
 * @memberOf dojox.widget.Rotator
*/
dojox.widget.Rotator.prototype.go=function(p){};
/**
 * <b>Summary:</b><blockquote>
 *	 Destroys the Rotator and its DOM node.<br>
 * </blockquote>
 * @memberOf dojox.widget.Rotator
*/
dojox.widget.Rotator.prototype.destroy=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Dispatches an action, first to this engine, then to the Rotator.<br>
 * </blockquote>
 * @param {string} action 
 * @memberOf dojox.widget.Rotator
*/
dojox.widget.Rotator.prototype.control=function(action){};
/**
 * <b>Summary:</b><blockquote>
 *	 If there is a waitForEvent pending, kill it.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Rotator
*/
dojox.widget.Rotator.prototype._resetWaitForEvent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A sortable unordered-list with a fixed header for use in dijit.demos.chat<br>
 *	 for demonstration purposes only for now. feel free to make API suggestions<br>
 *	 or fixes.<br>
 * </blockquote>
 * @class
 * @extends dijit.layout._LayoutWidget
 * @extends dijit._Templated
 * @returns {dojox.widget.SortList} new instance
*/
dojox.widget.SortList=function(){};
/**
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Sets the widget title to a String<br>
 * </blockquote>
 * @param {String} title 
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype.setTitle=function(title){};
/**
 * <b>Summary:</b><blockquote>
 *	 do our additional calculations when resize() is called by or in a parent<br>
 * </blockquote>
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype.resize=function(){};
/**
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sort the data, and style the nodes.<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype.onSort=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 stub function, passes the last changed item, and is fired after current state<br>
 * </blockquote>
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype.onChanged=function(){};
/**
 * @private
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype._updateValues=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 remove hover state (FIXME: combine with _set?)<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype._unset=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 a basic sort function, use query sort, or keep this?<br>
 * </blockquote>
 * @param {mixed} a 
 * @param {mixed} b 
 * @private
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype._sorter=function(a, b){};
/**
 * <b>Summary:</b><blockquote>
 *	 set hover state<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype._set=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 click listener for data portion of widget. toggle selected state<br>
 *	 of node, and update this.selected array accordingly<br>
 * </blockquote>
 * @param {Event} e 
 * @private
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype._handleClick=function(e){};
/**
 * @param {mixed} item 
 * @private
 * @memberOf dojox.widget.SortList
*/
dojox.widget.SortList.prototype._addItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget designed to act as a Standby/Busy/Disable/Blocking widget to indicate a<br>
 *	 particular DOM node is processing and cannot be clicked on at this time.<br>
 *	 This widget uses absolute positioning to apply the overlay and image.<br>
 * </blockquote>
 * @class
 * @returns {dojox.widget.Standby} new instance
*/
dojox.widget.Standby=function(){};
/**
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.target=null;
/**
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby._textNode=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride to hide the widget, which clears intervals, before cleanup.<br>
 * </blockquote>
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype.uninitialize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride of the basic widget startup function.<br>
 *	 Configures the target node and sets the image to use.<br>
 * </blockquote>
 * @param {mixed} args 
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype.startup=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to display the blocking overlay and busy/status icon or text.<br>
 * </blockquote>
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype.show=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event that fires when the display of the Standby completes.<br>
 * </blockquote>
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype.onShow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Event that fires when the display of the Standby completes.<br>
 * </blockquote>
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype.onHide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Helper function so you can test if the widget is already visible or not.<br>
 * </blockquote>
 * 
 * @returns {boolean} -
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype.isVisible=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to hide the blocking overlay and status icon or text.<br>
 * </blockquote>
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype.hide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function that handles resizing the overlay and<br>
 *	 centering of the image on window resizing.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._size=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to allow widget.attr to set the text displayed in center<br>
 *	 if using text display.<br>
 * </blockquote>
 * @param {String} text The text to set.
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._setTextAttr=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to allow widget.attr to set the ALT text text displayed for<br>
 *	 the image (if using image center display).<br>
 * </blockquote>
 * @param {String} text The text to set.
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._setImageTextAttr=function(text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to allow widget.attr to set the url source for the center image<br>
 *	 text: String<br>
 *	 The url to set for the image.<br>
 * </blockquote>
 * @param {mixed} url 
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._setImageAttr=function(url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to allow widget.attr to set the color used for the translucent<br>
 *	 div overlay.<br>
 * </blockquote>
 * @param {String} c The color to set the background underlay to in #XXXXXX format..
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._setColorAttr=function(c){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to allow widget.attr to set the node used for the center indicator,<br>
 *	 either the image or the text.<br>
 * </blockquote>
 * @param {String} indicator The indicator to use, either 'image' or 'text'.
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._setCenterIndicatorAttr=function(indicator){};
/**
 * <b>Summary:</b><blockquote>
 *	 This function will calculate the size of the vertical and<br>
 *	 horizontaol scrollbars.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._scrollerWidths=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to ignore events that occur on the overlay.<br>
 *	 event: Event<br>
 *	 The event to halt<br>
 * </blockquote>
 * @param {mixed} e 
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._ignore=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function that does the opacity style fade out animation.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._fadeOut=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function that does the opacity style fade in animation.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._fadeIn=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to restore scrollbars on the body.  Only used if the overlay<br>
 *	 targets the body or the document.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._enableOverflow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to disable scrollbars on the body.  Only used if the overlay<br>
 *	 targets the body or the document.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._disableOverflow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal function to clone a set of styles from the target to<br>
 *	 the underlay.<br>
 * </blockquote>
 * @param {Array} list An array of style names to clone.
 * @private
 * @memberOf dojox.widget.Standby
*/
dojox.widget.Standby.prototype._cloneStyles=function(list){};
/**
 * <b>Summary:</b><blockquote>
 *	 A container which controls a series of `dijit.TitlePane`s,<br>
 *	 allowing one to be visible and hiding siblings<br>
 * </blockquote>
 * A container which controls a series of `dijit.TitlePane`s,<br>
 * allowing one to be visible and hiding siblings. Behaves similarly<br>
 * to a `dijit.layout.AccordionContainer` in that the children<br>
 * are all stacked, though merges the TitlePane behavior of<br>
 * variable height
 * @class
 * @extends dijit._Widget
 * @returns {dojox.widget.TitleGroup} new instance
 * @example
 * 	var group = new dojox.widget.TitleGroup().placeAt(dojo.body());
 * 	new dijit.TitlePane({ title:"One" }, "fromsource").placeAt(group);
 * 	new dijit.TitlePane({ title:"Remote", href:"foo.html" }).placeAt(group);
*/
dojox.widget.TitleGroup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 close all found titlePanes within this group, excluding<br>
 *	 the one the we pass to select<br>
 * </blockquote>
 * @param {mixed} widget 
 * @returns {dijit.TitlePane} -
 * @memberOf dojox.widget.TitleGroup
*/
dojox.widget.TitleGroup.prototype.selectChild=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove the passed widget from this container. Does not destroy<br>
 *	 child.<br>
 * </blockquote>
 * @param {mixed} widget 
 * @memberOf dojox.widget.TitleGroup
*/
dojox.widget.TitleGroup.prototype.removeChild=function(widget){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a passed widget reference to this container at an optional<br>
 *	 position index.<br>
 * </blockquote>
 * @param {dijit.TitlePane} widget A widget reference to add
 * @param {String|Int} [position] An optional index or position to pass. defaults to &quot;last&quot;
 * @returns {dijit.TitlePane} -
 * @memberOf dojox.widget.TitleGroup
*/
dojox.widget.TitleGroup.prototype.addChild=function(widget, position){};
/**
 * @namespace
*/
dojox.titlepane={};
/**
 * <b>Summary:</b><blockquote>
 *	 TitlePane's MUST be first-children of a TitleGroup. only used by<br>
 *	 `dojox.widget.TitleGroup`. Finds a possible parent TitleGroup of a TitlePane<br>
 * </blockquote>
 * @private
*/
dojox.titlepane._dxfindParent=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Message that slides in from the corner of the screen, used for notifications<br>
 *	 like &amp;quot;new email&amp;quot;.<br>
 * </blockquote>
 * @class
 * @returns {dojox.widget.Toaster} new instance
*/
dojox.widget.Toaster=function(){};
/**
 * @memberOf dojox.widget.Toaster
*/
dojox.widget.Toaster.messageTypes=null;
/**
 * @namespace
*/
dojox.widget.Toaster.bgIframe={};
/**
 * <b>Summary:</b><blockquote>
 *	 show the Toaster<br>
 * </blockquote>
 * @memberOf dojox.widget.Toaster
*/
dojox.widget.Toaster.prototype.show=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets and displays the given message and show duration<br>
 * </blockquote>
 * @param {String|Function} message the message. If this is a function, it will be called with this toaster widget as the only argument.
 * @param {String} messageType type of message; possible values in messageTypes enumeration (&quot;message&quot;, &quot;warning&quot;, &quot;error&quot;, &quot;fatal&quot;)
 * @param {int} [duration] duration in milliseconds to display message before removing it. Widget has default value.
 * @memberOf dojox.widget.Toaster
*/
dojox.widget.Toaster.prototype.setContent=function(message, messageType, duration){};
/**
 * @memberOf dojox.widget.Toaster
*/
dojox.widget.Toaster.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback for when user clicks the message<br>
 * </blockquote>
 * @param {Event} e 
 * @memberOf dojox.widget.Toaster
*/
dojox.widget.Toaster.prototype.onSelect=function(e){};
/**
 * <b>Summary:</b><blockquote>
 *	 hide the Toaster<br>
 * </blockquote>
 * @memberOf dojox.widget.Toaster
*/
dojox.widget.Toaster.prototype.hide=function(){};
/**
 * @param {mixed} duration 
 * @private
 * @memberOf dojox.widget.Toaster
*/
dojox.widget.Toaster.prototype._setHideTimer=function(duration){};
/**
 * @param {mixed} message 
 * @private
 * @memberOf dojox.widget.Toaster
*/
dojox.widget.Toaster.prototype._setContent=function(message){};
/**
 * @private
 * @memberOf dojox.widget.Toaster
*/
dojox.widget.Toaster.prototype._placeClip=function(){};
/**
 * @param {String|Object} message 
 * @private
 * @memberOf dojox.widget.Toaster
*/
dojox.widget.Toaster.prototype._handleMessage=function(message){};
/**
 * @private
 * @memberOf dojox.widget.Toaster
*/
dojox.widget.Toaster.prototype._cancelHideTimer=function(){};
/**
 * @namespace
*/
dojox.widget.Toaster.containerNode={};
/**
 * @namespace
*/
dojox.widget.Toaster.clipNode={};
/**
 * <b>Summary:</b><blockquote>
 *	 Shows a bar at the top of the screen when the user is to<br>
 *	 be notified that they should upgrade their browser or a<br>
 *	 plugin.<br>
 * </blockquote>
 * You can insert custom validations to trigger the UpgradeBar<br>
 * to display. An evaluation of 'true' shows the bar (as this<br>
 * version *is* less than it should be). Multiple validations<br>
 * may be checked, although only the first in the list will be<br>
 * displayed.<br>
 * Markup and programmatic are supported. Markup is a little<br>
 * cleaner, since a majority of the parameters are the HTML<br>
 * snippets to be displayed. In markup, the validate code should<br>
 * be an expression that will evaluate to true or false. This<br>
 * expression is wrapped in a try/catch, so if it blows up, it<br>
 * is assumed to be true and trigger the bar.<br>
 * In programmtic, a function should be used that returns true<br>
 * or false. You would need to use your own try/catch in that.
 * @class
 * @extends dijit._Widget
 * @extends dijit._Templated
 * @param {mixed} props 
 * @param {mixed} node 
 * @returns {dojox.widget.UpgradeBar} new instance
 * @example
 * See tests for examples.
*/
dojox.widget.UpgradeBar=function(props, node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Shows the bar. Do not call directly.<br>
 *	 Use notify();<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.UpgradeBar
*/
dojox.widget.UpgradeBar.prototype.show=function(){};
/**
 * @memberOf dojox.widget.UpgradeBar
*/
dojox.widget.UpgradeBar.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Triggers the bar to display. An internal function,<br>
 *	 but could ne called externally for fun.<br>
 * </blockquote>
 * @param {mixed} msg 
 * @memberOf dojox.widget.UpgradeBar
*/
dojox.widget.UpgradeBar.prototype.notify=function(msg){};
/**
 * <b>Summary:</b><blockquote>
 *	 Hides the bar. May be called externally.<br>
 * </blockquote>
 * @memberOf dojox.widget.UpgradeBar
*/
dojox.widget.UpgradeBar.prototype.hide=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Internal. Go through the notifications Array<br>
 *	 and check for any that evaluate to true.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.UpgradeBar
*/
dojox.widget.UpgradeBar.prototype.checkNotifications=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when user clicks the &amp;quot;do not remind&amp;quot; link.<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.UpgradeBar
*/
dojox.widget.UpgradeBar.prototype._onDontRemindClick=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when user stops hovering over close icon<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.UpgradeBar
*/
dojox.widget.UpgradeBar.prototype._onCloseLeave=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when user hovers over close icon<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.UpgradeBar
*/
dojox.widget.UpgradeBar.prototype._onCloseEnter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A set of panels that display sequentially, typically notating a step-by-step<br>
 *	 procedure like an install<br>
 * </blockquote>
 * @class
 * @returns {dojox.widget.Wizard} new instance
*/
dojox.widget.Wizard=function(){};
/**
 * @memberOf dojox.widget.Wizard
*/
dojox.widget.Wizard.prototype.startup=function(){};
/**
 * @memberOf dojox.widget.Wizard
*/
dojox.widget.Wizard.prototype.resize=function(){};
/**
 * @memberOf dojox.widget.Wizard
*/
dojox.widget.Wizard.prototype.postMixInProperties=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Finish the wizard's operation<br>
 * </blockquote>
 * @memberOf dojox.widget.Wizard
*/
dojox.widget.Wizard.prototype.done=function(){};
/**
 * @memberOf dojox.widget.Wizard
*/
dojox.widget.Wizard.prototype.destroy=function(){};
/**
 * @param {mixed} button 
 * @private
 * @memberOf dojox.widget.Wizard
*/
dojox.widget.Wizard.prototype._setButtonClass=function(button){};
/**
 * <b>Summary:</b><blockquote>
 *	 callback when next button is clicked<br>
 * </blockquote>
 * @private
 * @memberOf dojox.widget.Wizard
*/
dojox.widget.Wizard.prototype._forward=function(){};
/**
 * @private
 * @memberOf dojox.widget.Wizard
*/
dojox.widget.Wizard.prototype._checkButtons=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A panel in a `dojox.widget.Wizard`<br>
 * </blockquote>
 * An extended ContentPane with additional hooks for passing named<br>
 * functions to prevent the pane from going either forward or<br>
 * backwards.
 * @class
 * @returns {dojox.widget.WizardPane} new instance
*/
dojox.widget.WizardPane=function(){};
/**
 * @memberOf dojox.widget.WizardPane
*/
dojox.widget.WizardPane.prototype.startup=function(){};
/**
 * @memberOf dojox.widget.WizardPane
*/
dojox.widget.WizardPane.prototype.done=function(){};
/**
 * @private
 * @memberOf dojox.widget.WizardPane
*/
dojox.widget.WizardPane.prototype._onShow=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Called when the user presses the &amp;quot;next&amp;quot; button.<br>
 *	 Calls passFunction to see if it's OK to advance to next panel, and<br>
 *	 if it isn't, then display error.<br>
 *	 Returns true to advance, false to not advance. If passFunction<br>
 *	 returns a string, it is assumed to be a custom error message, and<br>
 *	 is alert()'ed<br>
 * </blockquote>
 * @private
 * @returns {Boolean} -
 * @memberOf dojox.widget.WizardPane
*/
dojox.widget.WizardPane.prototype._checkPass=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Transfer a source value to a target value<br>
 * </blockquote>
 * If 'source' and/or 'target' are not Wires, Wires are created with<br>
 * them as arguments.<br>
 * A value is got through the source Wire and set through the target<br>
 * Wire.<br>
 * 'defaultObject' is passed to Wires as a default root object.<br>
 * If 'defaultTargetObject' is specified, it is passed to the target<br>
 * Wire as a default root object, instead of 'defaultObject'.
 * @param {Wire||Object} source A Wire or arguments to create a Wire for a source value
 * @param {Wire||Object} target A Wire or arguments to create a Wire for a target value
 * @param {Object} [defaultObject] defaultTargetObject; Optional default root objects passed to Wires
 * @param {Object} [defaultTargetObject] 
 * @returns {undefined} -
*/
dojox.wire.transfer=function(source, target, defaultObject, defaultTargetObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Register a Wire class<br>
 *	 desription:<br>
 *	 The specified Wire class or a class name is registered with<br>
 *	 a key property of arguments to create a Wire<br>
 * </blockquote>
 * @param {Function||String} wireClass A class or full qualified class name
 * @param {String} key A key property of arguments to create a Wire
 * @returns {undefined} -
*/
dojox.wire.register=function(wireClass, key){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if an object is a Wire<br>
 * </blockquote>
 * If the specified object is a Wire, true is returned.<br>
 * Otherwise, false is returned.
 * @param {Object} wire An object to check
 * 
 * @returns {Boolean} -
*/
dojox.wire.isWire=function(wire){};
/**
 * <b>Summary:</b><blockquote>
 *	 Remove a connection or subscription for transfer<br>
 * </blockquote>
 * If 'handle' has 'topic', the topic is unsubscribed.<br>
 * Otherwise, the listener to an event is removed.
 * @param {Object} connection A connection handle returned by connect()
 * @returns {undefined} -
*/
dojox.wire.disconnect=function(connection){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a Wire from arguments<br>
 * </blockquote>
 * If 'args' specifies 'wireClass', it is used as a class or full<br>
 * qualified class name to create a Wire with 'args' as arguments.<br>
 * Otherwise, a Wire class is determined by other proeprties of 'args'<br>
 * checking if 'args' specifies a key property for a Wire class.<br>
 * If no key property found, the default Wire class is used.
 * @param {Object} args Arguments to create a Wire
 * 
 * @returns {Object} -
*/
dojox.wire.create=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Transfer a source value to a target value on a trigger event or<br>
 *	 topic<br>
 * </blockquote>
 * If 'trigger' specifies 'topic', the topic is subscribed to transer<br>
 * a value on the topic.<br>
 * Otherwise, the event specified to 'event' of 'trigger' is listened<br>
 * to transfer a value.<br>
 * On the specified event or topic, transfer() is called with<br>
 * 'source', 'target' and the arguments of the event or topic (as<br>
 * default root objects).
 * @param {Object} trigger An event or topic to trigger a transfer
 * @param {Wire||Object} source A Wire or arguments to create a Wire for a source value
 * @param {Wire||Object} target A Wire or arguments to create a Wire for a target value
 * 
 * @returns {undefined|Object} -
*/
dojox.wire.connect=function(trigger, source, target){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a class<br>
 * </blockquote>
 * The class is loaded by dojo.require() and returned<br>
 * by dojo.getObject().
 * @param {String} name A class name
 * @private
 * 
 * @returns {Function} -
*/
dojox.wire._getClass=function(name){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Wire for XML nodes or values (element, attribute and text)<br>
 * </blockquote>
 * This class accesses XML nodes or value with a simplified XPath<br>
 * specified to 'path' property.<br>
 * The root object for this class must be an DOM document or element<br>
 * node.<br>
 * "@name" accesses to an attribute value of an element and "text()"<br>
 * accesses to a text value of an element.<br>
 * The hierarchy of the elements from the root node can be specified<br>
 * with slash-separated list, such as "a/b/@c", which specifies<br>
 * the value of an attribute named "c" of an element named "b" as<br>
 * a child of another element named "a" of a child of the root node.
 * @param {Object} args Arguments to initialize properties
 * path:<br>
 * A simplified XPath to an attribute, a text or elements<br>
*/
dojox.wire.XmlWire=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A default and base Wire to access an object property<br>
 * </blockquote>
 * This class accesses a property of an object with a dotted notation<br>
 * specified to 'property' property, such as "a.b.c", which identifies<br>
 * a descendant property, "object.a.b.c".<br>
 * Property names in the dotted notation may have an array index, such<br>
 * as "a[0]", to identify an array element, literally, "object.a[0]".<br>
 * When a notation start with an array index, such as "[0].a", it<br>
 * specifies an array element of the root object (array),<br>
 * "object[0].a".<br>
 * This class also serves as a base class for other Wire classes,<br>
 * preparing a root object and converting a return value, so that<br>
 * sub-classes just can implement _getValue() and _setValue() called<br>
 * from getValue() and setValue() implemented by this calss.
 * @param {Object} args Arguments to initialize properties
 * object:<br>
 * A root object (or another Wire to access a root object)<br>
 * property:<br>
 * A dotted notation to a descendant property<br>
 * type:<br>
 * A type of the return value (for the source Wire)<br>
*/
dojox.wire.Wire=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A composite Wire for tree nodes<br>
 * </blockquote>
 * This class has multiple child Wires for tree nodes, their title and<br>
 * child nodes.<br>
 * The root object for this class must be an array.<br>
 * 'node' Wires in 'nodes' property is used to identify an object<br>
 * representing a node.<br>
 * 'title' Wires in 'nodes' property is used to get the title string<br>
 * of a node.<br>
 * 'children' Wires in 'nodes' property is used to iterate over child<br>
 * node objects.<br>
 * The node values are returned in an array as follows:<br>
 * [<br>
 * {title: title1,<br>
 * children: [<br>
 * {title: title2,<br>
 * child: ...},<br>
 * {title: title3,<br>
 * child: ...},<br>
 * ...<br>
 * ]},<br>
 * ...<br>
 * ]<br>
 * This class only supports getValue(), but not setValue().
 * @param {Object} args Arguments to initialize properties
 * nodes:<br>
 * An array containing objects for child Wires for node values<br>
*/
dojox.wire.TreeAdapter=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A composite Wire for a concatenated text<br>
 * </blockquote>
 * This class has multiple child Wires for text segment values.<br>
 * Wires in 'segments' property are used to get text segments and<br>
 * values are concatenated with an optional delimiter string specified<br>
 * to 'delimiter' property.
 * @param {Object} args Arguments to initialize properties
 * segments:<br>
 * An array containing child Wires for text segment values<br>
*/
dojox.wire.TextAdapter=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A composite Wire for table rows<br>
 * </blockquote>
 * This class has multiple child Wires for object properties or array<br>
 * elements of a table row.<br>
 * The root object for this class must be an array.<br>
 * When an object with Wires is specified to 'columns' property, they<br>
 * are used to get a row object with property values.<br>
 * When an array of Wires is specified to 'columns' property, they<br>
 * are used to get a row array with element values.<br>
 * The row values are returned in an array.<br>
 * This class only supports getValue(), but not setValue().
 * @param {Object} args Arguments to initialize properties
 * columns:<br>
 * An object or array containing child Wires for column values<br>
*/
dojox.wire.TableAdapter=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Wire for item attributes of data stores<br>
 * </blockquote>
 * This class accesses item attributes of data stores with a dotted<br>
 * notation of attribute names specified to 'attribute' property,<br>
 * using data APIs of a data store specified to 'dataStore' property.<br>
 * The root object for this class must be an item of the data store.<br>
 * Intermediate attribute names in the dotted notation specify<br>
 * attributes for child items, which are used for repeated calls to<br>
 * data APIs until reached to a descendant attribute.<br>
 * Attribute names may have an array index, such as "a[0]", to<br>
 * identify an array element of the attribute value.
 * @param {Object} args Arguments to initialize properties
*/
dojox.wire.DataWire=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Wire for composite values in object or array<br>
 * </blockquote>
 * This class has multiple child Wires for object properties or array<br>
 * elements.<br>
 * When an object with Wires is specified to 'children' property, they<br>
 * are used to get or set an object with property values.<br>
 * When an array of Wiares is specified to 'children' property, they<br>
 * are used to get or set an array with element values.
 * @param {Object} args Arguments to initialize properties
 * children:<br>
 * An object or array containing child Wires<br>
*/
dojox.wire.CompositeWire=function(args){};
/**
 * @namespace
*/
dojox.wire.ml={};
/**
 * @namespace
 * @private
*/
dojox.wire._wireClasses={};
/**
 * <b>Summary:</b><blockquote>
 *	 A Wire for composite values in object or array<br>
 * </blockquote>
 * This class has multiple child Wires for object properties or array<br>
 * elements.<br>
 * When an object with Wires is specified to 'children' property, they<br>
 * are used to get or set an object with property values.<br>
 * When an array of Wiares is specified to 'children' property, they<br>
 * are used to get or set an array with element values.
 * @class
 * @extends dojox.wire.Wire
 * @param {Object} args Arguments to initialize properties
 * children:<br>
 * An object or array containing child Wires
 * @returns {dojox.wire.CompositeWire} new instance
*/
dojox.wire.CompositeWire=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set an object properties or an array elements to an object<br>
 *	 desription:<br>
 *	 This method calls setValues() method of the child Wires with<br>
 *	 a corresponding property or element in 'value' argument and<br>
 *	 'object' argument.<br>
 * </blockquote>
 * @param {Object||Array} object A root object
 * @param {Object||Array} value An object or array with values to set
 * @private
 * 
 * @returns {Object||Array} -
 * @memberOf dojox.wire.CompositeWire
*/
dojox.wire.CompositeWire.prototype._setValue=function(object, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize child Wires<br>
 * </blockquote>
 * If object properties or array elements specified in 'children'<br>
 * argument are not Wires, Wires are created from them as<br>
 * arguments, with 'parent' property set to this Wire instance.
 * @param {Object||Array} children An object or array containing child Wires
 * @private
 * @returns {undefined} -
 * @memberOf dojox.wire.CompositeWire
*/
dojox.wire.CompositeWire.prototype._initializeChildren=function(children){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an object with property values or an array with element<br>
 *	 values<br>
 * </blockquote>
 * This method calls getValue() method of the child Wires with<br>
 * 'object' argument and returns an object with the values as<br>
 * properties or an arary of the values as elements.
 * @param {Object||Array} object A root object
 * @private
 * 
 * @returns {Object||Array} -
 * @memberOf dojox.wire.CompositeWire
*/
dojox.wire.CompositeWire.prototype._getValue=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Wire for item attributes of data stores<br>
 * </blockquote>
 * This class accesses item attributes of data stores with a dotted<br>
 * notation of attribute names specified to 'attribute' property,<br>
 * using data APIs of a data store specified to 'dataStore' property.<br>
 * The root object for this class must be an item of the data store.<br>
 * Intermediate attribute names in the dotted notation specify<br>
 * attributes for child items, which are used for repeated calls to<br>
 * data APIs until reached to a descendant attribute.<br>
 * Attribute names may have an array index, such as "a[0]", to<br>
 * identify an array element of the attribute value.
 * @class
 * @extends dojox.wire.Wire
 * @param {Object} args Arguments to initialize properties
 * @returns {dojox.wire.DataWire} new instance
*/
dojox.wire.DataWire=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set an attribute value to an item<br>
 * </blockquote>
 * This method uses a root item passed in 'object' argument and<br>
 * 'attribute' property to identify an item.<br>
 * Then, setValue() method of 'dataStore' is called with a leaf<br>
 * attribute name and 'value' argument.<br>
 * If an attribute name have an array suffix ("[]"), setValues()<br>
 * method is called, instead.<br>
 * If an index is specified in the array suffix, an array element<br>
 * for the index is set to 'value', instead of the array itself.
 * @param {Object} object A root item
 * @param {anything} value A value to set
 * @private
 * 
 * @returns {Object|undefined} -
 * @memberOf dojox.wire.DataWire
*/
dojox.wire.DataWire.prototype._setValue=function(object, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set an attribute value to an item<br>
 * </blockquote>
 * This method uses an item passed in 'item' argument and<br>
 * 'attribute' argument to call setValue() method of 'dataStore'<br>
 * with 'value' argument.<br>
 * If an attribute name have an array suffix ("[]"), setValues()<br>
 * method is called, instead.<br>
 * If an index is specified in the array suffix, an array element<br>
 * for the index is set to 'value', instead of the array itself.
 * @param {Object} item An item
 * @param {String} attribute An attribute name
 * @param {anything} value A value to set
 * @private
 * @memberOf dojox.wire.DataWire
*/
dojox.wire.DataWire.prototype._setAttributeValue=function(item, attribute, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an attribute value of an item<br>
 * </blockquote>
 * This method uses a root item passed in 'object' argument and<br>
 * 'attribute' property to call getValue() method of<br>
 * 'dataStore'.<br>
 * If an attribute name have an array suffix ("[]"), getValues()<br>
 * method is called, instead.<br>
 * If an index is specified in the array suffix, an array element<br>
 * for the index is returned, instead of the array itself.
 * @param {Object} object A root item
 * @private
 * 
 * @returns {Object|undefined|anything} -
 * @memberOf dojox.wire.DataWire
*/
dojox.wire.DataWire.prototype._getValue=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an attribute value of an item<br>
 * </blockquote>
 * This method uses an item passed in 'item' argument and<br>
 * 'attribute' argument to call getValue() method of 'dataStore'.<br>
 * If an attribute name have an array suffix ("[]"), getValues()<br>
 * method is called, instead.<br>
 * If an index is specified in the array suffix, an array element<br>
 * for the index is returned, instead of the array itself.
 * @param {Object} item An item
 * attribute<br>
 * An attribute name
 * @param {String} attribute 
 * @private
 * 
 * @returns {anything} -
 * @memberOf dojox.wire.DataWire
*/
dojox.wire.DataWire.prototype._getAttributeValue=function(item, attribute){};
/**
 * <b>Summary:</b><blockquote>
 *	 Store a value<br>
 * </blockquote>
 * This method stores a value by an ID of a widget or an DOM<br>
 * element with a dotted notation to its property, using a Wire.
 * @param {String} target A string to specify an object and its property
 * @param {anything} value A value
 * @private
 * @returns {undefined} -
*/
dojox.wire.ml._setValue=function(target, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a value<br>
 * </blockquote>
 * This method obtains an object by an ID of a widget or an DOM<br>
 * element.<br>
 * If 'source' specifies a dotted notation to its property, a Wire is<br>
 * used to get the object property.<br>
 * If 'source' starts with "arguments", 'args' is used as a root<br>
 * object for the Wire.
 * @param {String} source A string to specify an object and its property
 * @param {Array} args An optional arguments array
 * @private
 * 
 * @returns {undefined|Object|anything} -
*/
dojox.wire.ml._getValue=function(source, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A REST service handler for XML<br>
 * </blockquote>
 * This class provides XML handling for a REST service.<br>
*/
dojox.wire.ml.XmlHandler=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 An object wrapping an XML element<br>
 * </blockquote>
 * This class represents an XML element.
 * @param {Element||String} element An XML element or a tag name
*/
dojox.wire.ml.XmlElement=function(element){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to transfer values through source and target Wires<br>
 * </blockquote>
 * This widget represents a controller task to transfer a value from<br>
 * a source to a target, through a source and a target Wires, when<br>
 * an event (a function) or a topic is issued.<br>
 * If this widget has child ChildWire widgets, their _addWire()<br>
 * methods are called to add Wire arguments to a source or a target<br>
 * Wire.<br>
*/
dojox.wire.ml.Transfer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget for a service<br>
 * </blockquote>
 * This widget represents a service defined by a service description<br>
 * specified with 'url' attribute.<br>
 * If 'serviceType' and 'serviceUrl' attributes are specified, 'url'<br>
 * attribute can be omitted.<br>
*/
dojox.wire.ml.Service=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to add a segment wire<br>
 * </blockquote>
 * Attributes of this widget are used to add a segment Wire to<br>
 * a TextAdapter of the parent Transfer widget.<br>
*/
dojox.wire.ml.SegmentWire=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A REST service handler<br>
 * </blockquote>
 * This class serves as a base REST service.<br>
 * Sub-classes may override _getContent() and _getResult() to handle<br>
 * specific content types.<br>
*/
dojox.wire.ml.RestHandler=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to add node wires<br>
 * </blockquote>
 * Attributes of this widget are used to add node Wires to<br>
 * a TreeAdapter of the parent Transfer widget.<br>
*/
dojox.wire.ml.NodeWire=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A REST service handler for JSON<br>
 * </blockquote>
 * This class provides JSON handling for a REST service.<br>
*/
dojox.wire.ml.JsonHandler=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to invoke a method or publish a topic<br>
 * </blockquote>
 * This widget represents a controller task to invoke a method or<br>
 * publish a topic when an event (a function) or a topic is issued.<br>
*/
dojox.wire.ml.Invocation=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget for a data store<br>
 * </blockquote>
 * This widget represents a data store of 'storeClass' attribute.<br>
*/
dojox.wire.ml.DataStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to define a data property<br>
 * </blockquote>
 * Attributes of this widget are used to add a property to the parent<br>
 * Data widget.<br>
 * 'type' attribute specifies one of "string", "number", "boolean",<br>
 * "array", "object" and "element" (DOM Element)<br>
 * (default to "string").<br>
 * If 'type' is "array" or "object", child DataProperty widgets are<br>
 * used to initialize the array elements or the object properties.<br>
*/
dojox.wire.ml.DataProperty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget for a data object<br>
 * </blockquote>
 * This widget represents an object with '_properties' property.<br>
 * If child 'DataProperty' widgets exist, they are used to initialize<br>
 * propertiy values of '_properties' object.<br>
*/
dojox.wire.ml.Data=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to add a column wire<br>
 * </blockquote>
 * Attributes of this widget are used to add a column Wire to<br>
 * a TableAdapter of the parent Transfer widget.<br>
*/
dojox.wire.ml.ColumnWire=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to add a child wire<br>
 * </blockquote>
 * Attributes of this widget are used to add a child Wire to<br>
 * a composite Wire of the parent Transfer widget.<br>
*/
dojox.wire.ml.ChildWire=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to define a filter for the parent Action to run<br>
 * </blockquote>
 * This base class checks a required property specified with<br>
 * 'required' attribute.<br>
 * If 'message' is specified, the message is set to a property<br>
 * specified with 'error'.<br>
 * Subclasses may implement their own filter() method.<br>
*/
dojox.wire.ml.ActionFilter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A base widget to &amp;quot;run&amp;quot; a task on an event or a topic<br>
 * </blockquote>
 * This widget represents a controller task to be run when an event<br>
 * (a function) or a topic is issued.<br>
 * Sub-classes must implement _run() method to implement their tasks.<br>
 * 'trigger' specifies an event scope, an ID of a widget or an DOM<br>
 * element, or its property with the optional dotted notation.<br>
 * If this widget has child ActionFilter widgets, their filter()<br>
 * methods are called with the arguments to the event or the topic.<br>
 * If one of filter() methods returns false, run() won't be invoked.<br>
 * This widget also can serve as a composite task to run child<br>
 * Actions on an event or a topic specified to this widget.<br>
*/
dojox.wire.ml.Action=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A base widget to &amp;quot;run&amp;quot; a task on an event or a topic<br>
 * </blockquote>
 * This widget represents a controller task to be run when an event<br>
 * (a function) or a topic is issued.<br>
 * Sub-classes must implement _run() method to implement their tasks.<br>
 * 'trigger' specifies an event scope, an ID of a widget or an DOM<br>
 * element, or its property with the optional dotted notation.<br>
 * If this widget has child ActionFilter widgets, their filter()<br>
 * methods are called with the arguments to the event or the topic.<br>
 * If one of filter() methods returns false, run() won't be invoked.<br>
 * This widget also can serve as a composite task to run child<br>
 * Actions on an event or a topic specified to this widget.
 * @class
 * @extends dijit._Widget
 * @extends dijit._Container
 * @returns {dojox.wire.ml.Action} new instance
*/
dojox.wire.ml.Action=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Over-ride of base widget unitialize function to do some connection cleanup.<br>
 * </blockquote>
 * @memberOf dojox.wire.ml.Action
*/
dojox.wire.ml.Action.prototype.uninitialize=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Run a task<br>
 * </blockquote>
 * This method calls filter() method of child ActionFilter<br>
 * widgets.<br>
 * If one of them returns false, this method returns.<br>
 * Otherwise, _run() method is called.
 * @memberOf dojox.wire.ml.Action
*/
dojox.wire.ml.Action.prototype.run=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call _connect()<br>
 * </blockquote>
 * See _connect().
 * @memberOf dojox.wire.ml.Action
*/
dojox.wire.ml.Action.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call run() methods of child Action widgets<br>
 * </blockquote>
 * If this widget has child Action widgets, their run() methods<br>
 * are called.
 * @private
 * @memberOf dojox.wire.ml.Action
*/
dojox.wire.ml.Action.prototype._run=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Disconnect run() method from an event or a topic<br>
 * </blockquote>
 * If 'triggerEvent' and 'trigger' are specified, disconnect() is<br>
 * used to set up run() not to be called on the event.<br>
 * If 'triggerTopic' is specified, unsubscribe() is used to set up<br>
 * run() not to be called on the topic.
 * @private
 * @memberOf dojox.wire.ml.Action
*/
dojox.wire.ml.Action.prototype._disconnect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Connect run() method to an event or a topic<br>
 * </blockquote>
 * If 'triggerEvent' and 'trigger' are specified, connect() is<br>
 * used to set up run() to be called on the event.<br>
 * If 'triggerTopic' is specified, subscribe() is used to set up<br>
 * run() to be called on the topic.
 * @private
 * @memberOf dojox.wire.ml.Action
*/
dojox.wire.ml.Action.prototype._connect=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to define a filter for the parent Action to run<br>
 * </blockquote>
 * This base class checks a required property specified with<br>
 * 'required' attribute.<br>
 * If 'message' is specified, the message is set to a property<br>
 * specified with 'error'.<br>
 * Subclasses may implement their own filter() method.
 * @class
 * @extends dijit._Widget
 * @returns {dojox.wire.ml.ActionFilter} new instance
*/
dojox.wire.ml.ActionFilter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Check if a required property is specified.  Also, if provided, check to see<br>
 *	 if the required property contains a specific value.<br>
 * </blockquote>
 * If a value is undefined for a property, specified with<br>
 * 'required', this method returns false.<br>
 * If the value for a property is defined, but there isn't a requiredValue for it<br>
 * then any non-false value will cause the method to return true.<br>
 * if requiredValue is set, then filter compares that value with the value from<br>
 * the required property and returns true if and only if they match.<br>
 * The type option just allows for a way to convert the required property values<br>
 * into a proper form for comparison (boolean, number, etc).<br>
 * If 'message' is specified, it is set to a proeprty specified<br>
 * with 'error' or shown with alert().<br>
 * If 'required' starts with "arguments", a property of<br>
 * the method arguments are checked.<br>
 * 
 * @returns {Boolean|boolean} -that they match), otherwise false
 * @memberOf dojox.wire.ml.ActionFilter
*/
dojox.wire.ml.ActionFilter.prototype.filter=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget for a data object<br>
 * </blockquote>
 * This widget represents an object with '_properties' property.<br>
 * If child 'DataProperty' widgets exist, they are used to initialize<br>
 * propertiy values of '_properties' object.
 * @class
 * @extends dijit._Widget
 * @extends dijit._Container
 * @returns {dojox.wire.ml.Data} new instance
*/
dojox.wire.ml.Data=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call _initializeProperties()<br>
 * </blockquote>
 * See _initializeProperties().
 * @memberOf dojox.wire.ml.Data
*/
dojox.wire.ml.Data.prototype.startup=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Store a property value<br>
 * </blockquote>
 * This method stores 'value' as a property, specified with<br>
 * 'property' argument, in '_properties' object.
 * @param {String} property A property name
 * @param {anything} value A property value
 * @memberOf dojox.wire.ml.Data
*/
dojox.wire.ml.Data.prototype.setPropertyValue=function(property, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a property value<br>
 * </blockquote>
 * This method returns the value of a property, specified with<br>
 * 'property' argument, in '_properties' object.
 * @param {String} property A property name
 * 
 * @returns {anything} -
 * @memberOf dojox.wire.ml.Data
*/
dojox.wire.ml.Data.prototype.getPropertyValue=function(property){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize a data object<br>
 * </blockquote>
 * If this widget has child DataProperty widgets, their getValue()<br>
 * methods are called and set the return value to a property<br>
 * specified by 'name' attribute of the child widgets.
 * @param {Boolean} reset A boolean to reset current properties
 * @private
 * @memberOf dojox.wire.ml.Data
*/
dojox.wire.ml.Data.prototype._initializeProperties=function(reset){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to define a data property<br>
 * </blockquote>
 * Attributes of this widget are used to add a property to the parent<br>
 * Data widget.<br>
 * 'type' attribute specifies one of "string", "number", "boolean",<br>
 * "array", "object" and "element" (DOM Element)<br>
 * (default to "string").<br>
 * If 'type' is "array" or "object", child DataProperty widgets are<br>
 * used to initialize the array elements or the object properties.
 * @class
 * @extends dijit._Widget
 * @extends dijit._Container
 * @returns {dojox.wire.ml.DataProperty} new instance
*/
dojox.wire.ml.DataProperty=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns a property value<br>
 * </blockquote>
 * If 'type' is specified, 'value' attribute is converted to<br>
 * the specified type and returned.<br>
 * Otherwise, 'value' attribute is returned as is.<br>
 * 
 * @returns {anything} -
 * @memberOf dojox.wire.ml.DataProperty
*/
dojox.wire.ml.DataProperty.prototype.getValue=function(){};
/**
 * @private
 * @memberOf dojox.wire.ml.DataProperty
*/
dojox.wire.ml.DataProperty.prototype._getValueAttr=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget for a data store<br>
 * </blockquote>
 * This widget represents a data store of 'storeClass' attribute.
 * @class
 * @extends dijit._Widget
 * @returns {dojox.wire.ml.DataStore} new instance
*/
dojox.wire.ml.DataStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call save() method of a data store<br>
 * </blockquote>
 * See dojo.data.api.Write.save().
 * @param {Object} args A save arguments object
 * @memberOf dojox.wire.ml.DataStore
*/
dojox.wire.ml.DataStore.prototype.save=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call revert() method of a data store<br>
 * </blockquote>
 * See dojo.data.api.Write.revert().<br>
 * 
 * @returns {Boolean} -
 * @memberOf dojox.wire.ml.DataStore
*/
dojox.wire.ml.DataStore.prototype.revert=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call _createStore()<br>
 * </blockquote>
 * See _createStore().
 * @memberOf dojox.wire.ml.DataStore
*/
dojox.wire.ml.DataStore.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call newItem() method of a data store<br>
 * </blockquote>
 * See dojo.data.api.Write.newItem().
 * @param {Object} args A new item arguments object
 * 
 * @returns {Object} -
 * @memberOf dojox.wire.ml.DataStore
*/
dojox.wire.ml.DataStore.prototype.newItem=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call getFeatures() method of a data store<br>
 * </blockquote>
 * See dojo.data.api.Read.getFeatures().<br>
 * 
 * @returns {Object} -
 * @memberOf dojox.wire.ml.DataStore
*/
dojox.wire.ml.DataStore.prototype.getFeatures=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call fetch() method of a data store<br>
 * </blockquote>
 * See dojo.data.api.Read.fetch().
 * @param {Object} request A request object
 * 
 * @returns {Object} -
 * @memberOf dojox.wire.ml.DataStore
*/
dojox.wire.ml.DataStore.prototype.fetch=function(request){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call deleteItem() method of a data store<br>
 * </blockquote>
 * See dojo.data.api.Write.deleteItem().
 * @param {Object} item 
 * 
 * @returns {Boolean} -
 * @memberOf dojox.wire.ml.DataStore
*/
dojox.wire.ml.DataStore.prototype.deleteItem=function(item){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a data store<br>
 *	 desription:<br>
 *	 A data store of 'storeClass' is created with arguments<br>
 *	 specified with attributes.<br>
 * </blockquote>
 * @private
 * 
 * @returns {null|Object} -
 * @memberOf dojox.wire.ml.DataStore
*/
dojox.wire.ml.DataStore.prototype._createStore=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to invoke a method or publish a topic<br>
 * </blockquote>
 * This widget represents a controller task to invoke a method or<br>
 * publish a topic when an event (a function) or a topic is issued.
 * @class
 * @extends dojox.wire.ml.Action
 * @returns {dojox.wire.ml.Invocation} new instance
*/
dojox.wire.ml.Invocation=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function called on an error occurs<br>
 * </blockquote>
 * If 'error' attribute is specified, the error object also set to<br>
 * the specified property.
 * @param {anything} error The exception or error occurred
 * @memberOf dojox.wire.ml.Invocation
*/
dojox.wire.ml.Invocation.prototype.onError=function(error){};
/**
 * <b>Summary:</b><blockquote>
 *	 A function called when the method or the topic publish<br>
 *	 completed<br>
 * </blockquote>
 * If 'result' attribute is specified, the result object also set<br>
 * to the specified property.
 * @param {anything} result The return value of a method or undefined for a topic
 * @memberOf dojox.wire.ml.Invocation
*/
dojox.wire.ml.Invocation.prototype.onComplete=function(result){};
/**
 * <b>Summary:</b><blockquote>
 *	 Invoke a method or publish a topic<br>
 * </blockquote>
 * If 'topic' is specified, the topic is published with arguments<br>
 * specified to 'parameters'.<br>
 * If 'method' and 'object' are specified, the method is invoked<br>
 * with arguments specified to 'parameters' and set the return<br>
 * value to a property specified to 'result'.<br>
 * 'object', 'parameters' and 'result' can specify properties of<br>
 * a widget or an DOM element with the dotted notation.<br>
 * If 'parameters' are omitted, the arguments to this method are<br>
 * passed as is.
 * @private
 * @returns {undefined} -
 * @memberOf dojox.wire.ml.Invocation
*/
dojox.wire.ml.Invocation.prototype._run=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Returns arguments to a method or topic to invoke<br>
 * </blockquote>
 * This method retunrs an array of arguments specified by<br>
 * 'parameters' attribute, a comma-separated list of IDs and<br>
 * their properties in a dotted notation.<br>
 * If 'parameters' are omitted, the original arguments are<br>
 * used.
 * @param {Array} args Arguments to a trigger event or topic
 * @private
 * @returns {Array} -
 * @memberOf dojox.wire.ml.Invocation
*/
dojox.wire.ml.Invocation.prototype._getParameters=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A REST service handler for JSON<br>
 * </blockquote>
 * This class provides JSON handling for a REST service.
 * @class
 * @extends dojox.wire.ml.RestHandler
 * @returns {dojox.wire.ml.JsonHandler} new instance
*/
dojox.wire.ml.JsonHandler=function(){};
/**
 * @namespace
*/
dojox.wire.ml.JsonHandler.headers={};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a request content<br>
 * </blockquote>
 * If 'method' is "POST" or "PUT", the first parameter in<br>
 * 'parameter' is used to generate a JSON content.
 * @param {String} method A method name
 * @param {Array} parameters An array of parameters
 * @private
 * 
 * @returns {String} -
 * @memberOf dojox.wire.ml.JsonHandler
*/
dojox.wire.ml.JsonHandler.prototype._getContent=function(method, parameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 A REST service handler<br>
 * </blockquote>
 * This class serves as a base REST service.<br>
 * Sub-classes may override _getContent() and _getResult() to handle<br>
 * specific content types.
 * @class
 * @returns {dojox.wire.ml.RestHandler} new instance
*/
dojox.wire.ml.RestHandler=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call a service method with parameters.<br>
 * </blockquote>
 * A service is called with a URL generated by _getUrl() and<br>
 * an HTTP method specified with 'method'.<br>
 * For "POST" and "PUT", a content is generated by _getContent().<br>
 * When data is loaded, _getResult() is used to pass the result to<br>
 * Deferred.callback().
 * @param {A} method method name
 * @param {An} parameters array of parameters
 * @param {'Deferred'} deferred 
 * @param {A} url URL for the method
 * @memberOf dojox.wire.ml.RestHandler
*/
dojox.wire.ml.RestHandler.prototype.bind=function(method, parameters, deferred, url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a URL<br>
 * </blockquote>
 * If 'method' is "GET" or "DELETE", a query string is generated<br>
 * from a query object specified to the first parameter in<br>
 * 'parameters' and appended to 'url'.<br>
 * If 'url' contains variable seguments ("{parameter_name}"),<br>
 * they are replaced with corresponding parameter values, instead.
 * @param {String} method A method name
 * @param {Array} parameters An array of parameters
 * @param {String} url A base URL
 * @private
 * 
 * @returns {String} -
 * @memberOf dojox.wire.ml.RestHandler
*/
dojox.wire.ml.RestHandler.prototype._getUrl=function(method, parameters, url){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extract a result<br>
 * </blockquote>
 * A response data is returned as is.
 * @param {anything} data A response data returned by a service
 * @private
 * 
 * @returns {anything} -
 * @memberOf dojox.wire.ml.RestHandler
*/
dojox.wire.ml.RestHandler.prototype._getResult=function(data){};
/**
 * <b>Summary:</b><blockquote>
 *	 Generate a request content<br>
 * </blockquote>
 * If 'method' is "POST" or "PUT", the first parameter in<br>
 * 'parameters' is returned.
 * @param {String} method A method name
 * @param {Array} parameters An array of parameters
 * @private
 * 
 * @returns {anything|null} -
 * @memberOf dojox.wire.ml.RestHandler
*/
dojox.wire.ml.RestHandler.prototype._getContent=function(method, parameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget for a service<br>
 * </blockquote>
 * This widget represents a service defined by a service description<br>
 * specified with 'url' attribute.<br>
 * If 'serviceType' and 'serviceUrl' attributes are specified, 'url'<br>
 * attribute can be omitted.
 * @class
 * @extends dijit._Widget
 * @returns {dojox.wire.ml.Service} new instance
*/
dojox.wire.ml.Service=function(){};
/**
 * @namespace
 * @private
*/
dojox.wire.ml.Service._handlerClasses={};
/**
 * <b>Summary:</b><blockquote>
 *	 Call _createHandler()<br>
 * </blockquote>
 * See _createHandler().
 * @memberOf dojox.wire.ml.Service
*/
dojox.wire.ml.Service.prototype.postCreate=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Call a service method with parameters<br>
 * </blockquote>
 * @param {A} method method name
 * @param {An} parameters array parameters
 * @memberOf dojox.wire.ml.Service
*/
dojox.wire.ml.Service.prototype.callMethod=function(method, parameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 Create a service handler<br>
 *	 desription:<br>
 *	 A service handler class is determined by:<br>
 *	 1. 'handlerClass' attribute<br>
 *	 2. 'serviceType' attribute<br>
 *	 3. 'serviceType' property in a service description<br>
 * </blockquote>
 * @private
 * 
 * @returns {null|Object} -
 * @memberOf dojox.wire.ml.Service
*/
dojox.wire.ml.Service.prototype._createHandler=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to transfer values through source and target Wires<br>
 * </blockquote>
 * This widget represents a controller task to transfer a value from<br>
 * a source to a target, through a source and a target Wires, when<br>
 * an event (a function) or a topic is issued.<br>
 * If this widget has child ChildWire widgets, their _addWire()<br>
 * methods are called to add Wire arguments to a source or a target<br>
 * Wire.
 * @class
 * @extends dojox.wire.ml.Action
 * @returns {dojox.wire.ml.Transfer} new instance
*/
dojox.wire.ml.Transfer=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Transfer a value from a source to a target<br>
 * </blockquote>
 * First, Wires for a source and a target are created from attributes.<br>
 * Then, a value is obtained by getValue() of the source Wire is set<br>
 * by setValue() of the target Wire.<br>
 * The arguments to this method is passed to getValue() and setValue()<br>
 * of Wires, so that they can be used to identify the root objects off<br>
 * the arguments.
 * @private
 * @memberOf dojox.wire.ml.Transfer
*/
dojox.wire.ml.Transfer.prototype._run=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Build Wire arguments from attributes<br>
 * </blockquote>
 * Arguments object for a source or a target Wire, specified by<br>
 * 'which' argument, are build from corresponding attributes,<br>
 * including '*Store' (for 'dataStore'), '*Attribute'<br>
 * (for 'attribute), '*Path' (for 'path'), 'type' and 'converter'.<br>
 * 'source' or 'target' attribute is parsed as:<br>
 * "object_id.property_name[.sub_property_name...]"<br>
 * If 'source' or 'target' starts with "arguments", 'object'<br>
 * argument for a Wire is set to null, so that the root object is<br>
 * given as an event or topic arguments.<br>
 * If this widget has child ChildWire widgets with a corresponding<br>
 * 'which' attribute, their _addWire() methods are called to add<br>
 * additional Wire arguments and nested Wire is created,<br>
 * specifying the Wire defined by this widget to 'object' argument.
 * @param {String} which Which Wire arguments to build, &quot;source&quot; or &quot;target&quot;
 * @private
 * 
 * @returns {Object} -
 * @memberOf dojox.wire.ml.Transfer
*/
dojox.wire.ml.Transfer.prototype._getWire=function(which){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to add a child wire<br>
 * </blockquote>
 * Attributes of this widget are used to add a child Wire to<br>
 * a composite Wire of the parent Transfer widget.
 * @class
 * @extends dijit._Widget
 * @returns {dojox.wire.ml.ChildWire} new instance
*/
dojox.wire.ml.ChildWire=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Build child Wire arguments from attributes<br>
 * </blockquote>
 * Arguments object for a child Wire are build from attributes,<br>
 * including 'object', 'property', 'type', 'converter',<br>
 * 'attribute' and 'path'.
 * @param {Transfer} parent A parent Transfer widget
 * @private
 * @memberOf dojox.wire.ml.ChildWire
*/
dojox.wire.ml.ChildWire.prototype._getWire=function(parent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a child Wire to Wire arguments<br>
 * </blockquote>
 * If 'name' attribute is specified, a child Wire is added as<br>
 * the named property of 'children' object of 'args'.<br>
 * Otherwise, a child Wire is added to 'children' array of 'args'.
 * @param {Transfer} parent A parent Transfer widget
 * @param {Object} args Wire arguments
 * @private
 * @memberOf dojox.wire.ml.ChildWire
*/
dojox.wire.ml.ChildWire.prototype._addWire=function(parent, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to add a column wire<br>
 * </blockquote>
 * Attributes of this widget are used to add a column Wire to<br>
 * a TableAdapter of the parent Transfer widget.
 * @class
 * @extends dojox.wire.ml.ChildWire
 * @returns {dojox.wire.ml.ColumnWire} new instance
*/
dojox.wire.ml.ColumnWire=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a column Wire to Wire arguments<br>
 * </blockquote>
 * If 'column' attribute is specified, a column Wire is added as<br>
 * the named property of 'columns' object of 'args'.<br>
 * Otherwise, a column Wire is added to 'columns' array of 'args'.
 * @param {Transfer} parent A parent Transfer widget
 * @param {Object} args Wire arguments
 * @private
 * @memberOf dojox.wire.ml.ColumnWire
*/
dojox.wire.ml.ColumnWire.prototype._addWire=function(parent, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to add node wires<br>
 * </blockquote>
 * Attributes of this widget are used to add node Wires to<br>
 * a TreeAdapter of the parent Transfer widget.
 * @class
 * @extends dojox.wire.ml.ChildWire
 * @extends dijit._Container
 * @returns {dojox.wire.ml.NodeWire} new instance
*/
dojox.wire.ml.NodeWire=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Build node Wires arguments from attributes<br>
 * </blockquote>
 * Arguments object for 'node' Wire are build from attributes,<br>
 * including 'object', 'property', 'type', 'converter',<br>
 * 'attribute' and 'path'.<br>
 * Arguments object for 'title' Wire are build from another set of<br>
 * attributes, 'titleProperty', 'titleAttribute' and 'titlePath'.<br>
 * If this widget has child NodeWire widgets, their _getWires()<br>
 * methods are called recursively to build 'children' array of<br>
 * 'args'.
 * @param {Transfer} parent A parent Transfer widget
 * @private
 * 
 * @returns {Object} -
 * @memberOf dojox.wire.ml.NodeWire
*/
dojox.wire.ml.NodeWire.prototype._getWires=function(parent){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add node Wires to Wire arguments<br>
 * </blockquote>
 * Node Wires are added to 'nodes' array of 'args'.
 * @param {Transfer} parent A parent Transfer widget
 * @param {Object} args Wire arguments
 * @private
 * @memberOf dojox.wire.ml.NodeWire
*/
dojox.wire.ml.NodeWire.prototype._addWire=function(parent, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 A widget to add a segment wire<br>
 * </blockquote>
 * Attributes of this widget are used to add a segment Wire to<br>
 * a TextAdapter of the parent Transfer widget.
 * @class
 * @extends dojox.wire.ml.ChildWire
 * @returns {dojox.wire.ml.SegmentWire} new instance
*/
dojox.wire.ml.SegmentWire=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Add a segument Wire to Wire arguments<br>
 * </blockquote>
 * A segment Wire is added to 'segments' array of 'args'.<br>
 * If 'parent' has 'delimiter' attribute, it is used for<br>
 * 'delimiter' property of 'args'.
 * @param {Transfer} parent A parent Transfer widget
 * @param {Object} args Wire arguments
 * @private
 * @memberOf dojox.wire.ml.SegmentWire
*/
dojox.wire.ml.SegmentWire.prototype._addWire=function(parent, args){};
/**
 * <b>Summary:</b><blockquote>
 *	 An object wrapping an XML element<br>
 * </blockquote>
 * This class represents an XML element.
 * @class
 * @param {Element||String} element An XML element or a tag name
 * @returns {dojox.wire.ml.XmlElement} new instance
*/
dojox.wire.ml.XmlElement=function(element){};
/**
 * @memberOf dojox.wire.ml.XmlElement
*/
dojox.wire.ml.XmlElement.element=null;
/**
 * <b>Summary:</b><blockquote>
 *	 Return a value of the first text child of the element<br>
 * </blockquote>
 * A value of the first text child of the element is returned.<br>
 * 
 * @returns {String} -
 * @memberOf dojox.wire.ml.XmlElement
*/
dojox.wire.ml.XmlElement.prototype.toString=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an object representation of the element<br>
 * </blockquote>
 * An object with properties for child elements, attributes and<br>
 * text is returned.<br>
 * 
 * @returns {null|String|Object} -
 * @memberOf dojox.wire.ml.XmlElement
*/
dojox.wire.ml.XmlElement.prototype.toObject=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Store a property value<br>
 * </blockquote>
 * If 'property' starts with '@', 'value' is set to the attribute.<br>
 * If 'property' specifies "text()", 'value' is set as the first<br>
 * child text.<br>
 * If 'value' is a string, a child element of the tag name<br>
 * specified with 'property' is created and 'value' is set as<br>
 * the first child text of the child element.<br>
 * Otherwise, 'value' is set to as child elements.
 * @param {String} property A property name
 * @param {String||Array||XmlElement} value A property value
 * @returns {undefined} -
 * @memberOf dojox.wire.ml.XmlElement
*/
dojox.wire.ml.XmlElement.prototype.setPropertyValue=function(property, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a property value<br>
 * </blockquote>
 * If 'property' starts with '@', the attribute value is returned.<br>
 * If 'property' specifies "text()", the value of the first child<br>
 * text is returned.<br>
 * Otherwise, child elements of the tag name specified with<br>
 * 'property' are returned.
 * @param {String} property A property name
 * 
 * @returns {undefined|String||Array|XmlElement} -
 * @memberOf dojox.wire.ml.XmlElement
*/
dojox.wire.ml.XmlElement.prototype.getPropertyValue=function(property){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a DOM document<br>
 * </blockquote>
 * If 'element' is specified, a DOM document of the element is<br>
 * returned.<br>
 * Otherwise, a DOM document is created.
 * @private
 * 
 * @returns {Document} -
 * @memberOf dojox.wire.ml.XmlElement
*/
dojox.wire.ml.XmlElement.prototype._getDocument=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 A REST service handler for XML<br>
 * </blockquote>
 * This class provides XML handling for a REST service.
 * @class
 * @extends dojox.wire.ml.RestHandler
 * @returns {dojox.wire.ml.XmlHandler} new instance
*/
dojox.wire.ml.XmlHandler=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 Extract a result<br>
 * </blockquote>
 * A response data (XML Document) is returned wrapped with<br>
 * XmlElement.
 * @param {Document} data A response data returned by a service
 * @private
 * @memberOf dojox.wire.ml.XmlHandler
*/
dojox.wire.ml.XmlHandler.prototype._getResult=function(data){};
/**
 * If 'method' is "POST" or "PUT", the first parameter in<br>
 * 'parameters' is used to generate an XML content.
 * @param {String} method A method name
 * @param {Array} parameters An array of parameters
 * @private
 * @memberOf dojox.wire.ml.XmlHandler
*/
dojox.wire.ml.XmlHandler.prototype._getContent=function(method, parameters){};
/**
 * <b>Summary:</b><blockquote>
 *	 A composite Wire for table rows<br>
 * </blockquote>
 * This class has multiple child Wires for object properties or array<br>
 * elements of a table row.<br>
 * The root object for this class must be an array.<br>
 * When an object with Wires is specified to 'columns' property, they<br>
 * are used to get a row object with property values.<br>
 * When an array of Wires is specified to 'columns' property, they<br>
 * are used to get a row array with element values.<br>
 * The row values are returned in an array.<br>
 * This class only supports getValue(), but not setValue().
 * @class
 * @extends dojox.wire.CompositeWire
 * @param {Object} args Arguments to initialize properties
 * columns:<br>
 * An object or array containing child Wires for column values
 * @returns {dojox.wire.TableAdapter} new instance
*/
dojox.wire.TableAdapter=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Not supported<br>
 * </blockquote>
 * @param {Array} object 
 * @param {Array} value 
 * @private
 * @memberOf dojox.wire.TableAdapter
*/
dojox.wire.TableAdapter.prototype._setValue=function(object, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an array of table row value (object or array)<br>
 * </blockquote>
 * This method iterates over an array specified to 'object'<br>
 * argument and calls getValue() method of the child Wires with<br>
 * each element of the array to get a row object or array.<br>
 * Finally, an array with the row objects or arrays are retuned.
 * @param {Array} object A root array
 * @private
 * 
 * @returns {Array} -
 * @memberOf dojox.wire.TableAdapter
*/
dojox.wire.TableAdapter.prototype._getValue=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an array or object for a table row<br>
 * </blockquote>
 * This method calls getValue() method of the child Wires to<br>
 * create a row object or array.
 * @param {Object||Array} object 
 * @private
 * 
 * @returns {Array||Object} -
 * @memberOf dojox.wire.TableAdapter
*/
dojox.wire.TableAdapter.prototype._getRow=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 A composite Wire for a concatenated text<br>
 * </blockquote>
 * This class has multiple child Wires for text segment values.<br>
 * Wires in 'segments' property are used to get text segments and<br>
 * values are concatenated with an optional delimiter string specified<br>
 * to 'delimiter' property.
 * @class
 * @extends dojox.wire.CompositeWire
 * @param {Object} args Arguments to initialize properties
 * segments:<br>
 * An array containing child Wires for text segment values
 * @returns {dojox.wire.TextAdapter} new instance
*/
dojox.wire.TextAdapter=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Not supported<br>
 * </blockquote>
 * @param {Object||Array} object 
 * @param {String} value 
 * @private
 * @memberOf dojox.wire.TextAdapter
*/
dojox.wire.TextAdapter.prototype._setValue=function(object, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a concatenated text<br>
 * </blockquote>
 * This method calls getValue() method of the child Wires wuth<br>
 * 'object' argument and concatenate the values with 'delimiter'<br>
 * property to return.<br>
 * arg:<br>
 * A root object
 * @param {Object||Array} object 
 * @private
 * 
 * @returns {Object||Array|String} -
 * @memberOf dojox.wire.TextAdapter
*/
dojox.wire.TextAdapter.prototype._getValue=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a concatenated text<br>
 * </blockquote>
 * This method add a text segment specified to 'segment' argument<br>
 * to a base text specified to 'text', with 'delimiter' property.
 * @param {String} text A base text
 * @param {String} segment A text segment to add
 * @private
 * 
 * @returns {String} -
 * @memberOf dojox.wire.TextAdapter
*/
dojox.wire.TextAdapter.prototype._addSegment=function(text, segment){};
/**
 * <b>Summary:</b><blockquote>
 *	 A composite Wire for tree nodes<br>
 * </blockquote>
 * This class has multiple child Wires for tree nodes, their title and<br>
 * child nodes.<br>
 * The root object for this class must be an array.<br>
 * 'node' Wires in 'nodes' property is used to identify an object<br>
 * representing a node.<br>
 * 'title' Wires in 'nodes' property is used to get the title string<br>
 * of a node.<br>
 * 'children' Wires in 'nodes' property is used to iterate over child<br>
 * node objects.<br>
 * The node values are returned in an array as follows:<br>
 * [<br>
 * {title: title1,<br>
 * children: [<br>
 * {title: title2,<br>
 * child: ...},<br>
 * {title: title3,<br>
 * child: ...},<br>
 * ...<br>
 * ]},<br>
 * ...<br>
 * ]<br>
 * This class only supports getValue(), but not setValue().
 * @class
 * @extends dojox.wire.CompositeWire
 * @param {Object} args Arguments to initialize properties
 * nodes:<br>
 * An array containing objects for child Wires for node values
 * @returns {dojox.wire.TreeAdapter} new instance
*/
dojox.wire.TreeAdapter=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Not supported<br>
 * </blockquote>
 * @param {Array} object 
 * @param {Array} value 
 * @private
 * @memberOf dojox.wire.TreeAdapter
*/
dojox.wire.TreeAdapter.prototype._setValue=function(object, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Initialize child Wires<br>
 * </blockquote>
 * If 'node' or 'title' properties of array elements specified in<br>
 * 'children' argument are not Wires, Wires are created from them<br>
 * as arguments, with 'parent' property set to this Wire instance.<br>
 * If an array element has 'children' property, this method is<br>
 * called recursively with it.
 * @param {Array} children An array of objects containing child Wires
 * @private
 * @returns {undefined} -
 * @memberOf dojox.wire.TreeAdapter
*/
dojox.wire.TreeAdapter.prototype._initializeChildren=function(children){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an array of tree node values<br>
 * </blockquote>
 * This method iterates over an array specified to 'object'<br>
 * argument and calls getValue() method of 'node' Wires with each<br>
 * element of the array to get object(s) that represetns nodes.<br>
 * (If 'node' Wires are omitted, the array element is used for<br>
 * further processing.)<br>
 * Then, getValue() method of 'title' Wires are called to get<br>
 * title strings for nodes.<br>
 * (If 'title' Wires are omitted, the objects representing nodes<br>
 * are used as title strings.)<br>
 * And if an array of objects with 'node' and 'title' Wires is<br>
 * specified to 'children', it is used to gather child nodes and<br>
 * their title strings in the same way recursively.<br>
 * Finally, an array of the top-level node objects are retuned.
 * @param {Array} object A root array
 * @private
 * 
 * @returns {Array} -
 * @memberOf dojox.wire.TreeAdapter
*/
dojox.wire.TreeAdapter.prototype._getValue=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an array of tree node values<br>
 * </blockquote>
 * This method calls getValue() method of 'node' Wires with<br>
 * 'object' argument to get object(s) that represents nodes.<br>
 * (If 'node' Wires are omitted, 'object' is used for further<br>
 * processing.)<br>
 * Then, getValue() method of 'title' Wires are called to get<br>
 * title strings for nodes.<br>
 * (If 'title' Wires are omitted, the objects representing nodes<br>
 * are used as title strings.)<br>
 * And if an array of objects with 'node' and 'title' Wires is<br>
 * specified to 'children', it is used to gather child nodes and<br>
 * their title strings in the same way recursively.<br>
 * Finally, an array of node objects are returned.
 * @param {Object} object An object
 * @param {Object} child An object with child Wires
 * @private
 * @returns {Array} -
 * @memberOf dojox.wire.TreeAdapter
*/
dojox.wire.TreeAdapter.prototype._getNodes=function(object, child){};
/**
 * <b>Summary:</b><blockquote>
 *	 A default and base Wire to access an object property<br>
 * </blockquote>
 * This class accesses a property of an object with a dotted notation<br>
 * specified to 'property' property, such as "a.b.c", which identifies<br>
 * a descendant property, "object.a.b.c".<br>
 * Property names in the dotted notation may have an array index, such<br>
 * as "a[0]", to identify an array element, literally, "object.a[0]".<br>
 * When a notation start with an array index, such as "[0].a", it<br>
 * specifies an array element of the root object (array),<br>
 * "object[0].a".<br>
 * This class also serves as a base class for other Wire classes,<br>
 * preparing a root object and converting a return value, so that<br>
 * sub-classes just can implement _getValue() and _setValue() called<br>
 * from getValue() and setValue() implemented by this calss.
 * @class
 * @param {Object} args Arguments to initialize properties
 * object:<br>
 * A root object (or another Wire to access a root object)<br>
 * property:<br>
 * A dotted notation to a descendant property<br>
 * type:<br>
 * A type of the return value (for the source Wire)
 * @returns {dojox.wire.Wire} new instance
*/
dojox.wire.Wire=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set a value to an object<br>
 * </blockquote>
 * This method first determins a root object as follows:<br>
 * 1. If 'object' property specified,<br>
 * 1.1 If 'object' is a Wire, its getValue() method is called to<br>
 * obtain a root object.<br>
 * 1.2 Otherwise, use 'object' as a root object.<br>
 * 2. Otherwise, use 'defaultObject' argument.<br>
 * 3. If 'property' is specified, it is used to get a property<br>
 * value.<br>
 * Then, if a sub-class implements _setValue() method, it is<br>
 * called with the root object and 'value' argument to set<br>
 * the value.<br>
 * Otherwise, 'value' is set to a property specified with<br>
 * 'property' property.<br>
 * If the root object is undefined and 'object' property is a Wire<br>
 * and a new object is created and returned by _setValue() it is<br>
 * set through 'object' (setValue() method).
 * @param {anything} value A value to set
 * @param {Object||Array} defaultObject A default root object
 * @memberOf dojox.wire.Wire
*/
dojox.wire.Wire.prototype.setValue=function(value, defaultObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a value of an object<br>
 * </blockquote>
 * This method first determins a root object as follows:<br>
 * 1. If 'object' property specified,<br>
 * 1.1 If 'object' is a Wire, its getValue() method is called to<br>
 * obtain a root object.<br>
 * 1.2 Otherwise, use 'object' as a root object.<br>
 * 2. Otherwise, use 'defaultObject' argument.<br>
 * 3. If 'property' is specified, it is used to get a property<br>
 * value.<br>
 * Then, if a sub-class implements _getValue() method, it is<br>
 * called with the root object to get the return value.<br>
 * Otherwise, the root object (typically, a property valye) is<br>
 * used for the return value.<br>
 * Finally, if 'type' property is specified, the return value is<br>
 * converted to the specified primitive type ("string", "number",<br>
 * "boolean" and "array").<br>
 * If 'converter' property is specified, its convert() method is<br>
 * called to convert the value.
 * @param {Object||Array} defaultObject A default root object
 * 
 * @returns {anything (null, undefined, etc)|anything} -
 * @memberOf dojox.wire.Wire
*/
dojox.wire.Wire.prototype.getValue=function(defaultObject){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to detect if dijit.set support exists on the target<br>
 * </blockquote>
 * @param {The} object target object to set the property of.
 * @private
 * @memberOf dojox.wire.Wire
*/
dojox.wire.Wire.prototype._useSet=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to detect if dijit.get support exists on the target<br>
 * </blockquote>
 * @param {The} object target object to set the property of.
 * @private
 * @memberOf dojox.wire.Wire
*/
dojox.wire.Wire.prototype._useGet=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Function to detect if dijit.attr support exists on the target<br>
 * </blockquote>
 * @param {The} object target object to set the property of.
 * @private
 * @memberOf dojox.wire.Wire
*/
dojox.wire.Wire.prototype._useAttr=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set a property value to an object<br>
 * </blockquote>
 * 'value' is set to 'property' of 'object'.<br>
 * If 'property' ends with an array index, it is used to indentify<br>
 * an element of an array property to set the value.<br>
 * If 'object' implements setPropertyValue(), it is called with<br>
 * 'property' and 'value' to set the property value.<br>
 * If 'object' implements a setter for the property, it is called<br>
 * with 'value' to set the property value.
 * @param {Object||Array} object An object
 * @param {String} property A property name
 * @param {anything} value A value to set
 * @private
 * @memberOf dojox.wire.Wire
*/
dojox.wire.Wire.prototype._setPropertyValue=function(object, property, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a property value of an object<br>
 * </blockquote>
 * A value for 'property' of 'object' is returned.<br>
 * If 'property' ends with an array index, it is used to indentify<br>
 * an element of an array property.<br>
 * If 'object' implements getPropertyValue(), it is called with<br>
 * 'property' to obtain the property value.<br>
 * If 'object' implements a getter for the property, it is called<br>
 * to obtain the property value.
 * @param {Object||Array} object A default root object
 * @param {String} property A property name
 * @private
 * 
 * @returns {anything} -
 * @memberOf dojox.wire.Wire
*/
dojox.wire.Wire.prototype._getPropertyValue=function(object, property){};
/**
 * <b>Summary:</b><blockquote>
 *	 A Wire for XML nodes or values (element, attribute and text)<br>
 * </blockquote>
 * This class accesses XML nodes or value with a simplified XPath<br>
 * specified to 'path' property.<br>
 * The root object for this class must be an DOM document or element<br>
 * node.<br>
 * "@name" accesses to an attribute value of an element and "text()"<br>
 * accesses to a text value of an element.<br>
 * The hierarchy of the elements from the root node can be specified<br>
 * with slash-separated list, such as "a/b/@c", which specifies<br>
 * the value of an attribute named "c" of an element named "b" as<br>
 * a child of another element named "a" of a child of the root node.
 * @class
 * @extends dojox.wire.Wire
 * @param {Object} args Arguments to initialize properties
 * path:<br>
 * A simplified XPath to an attribute, a text or elements
 * @returns {dojox.wire.XmlWire} new instance
*/
dojox.wire.XmlWire=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set an attribute value or a child text value to an element<br>
 * </blockquote>
 * This method first uses a root node passed in 'object' argument<br>
 * and 'path' property to identify an attribute, a text or<br>
 * elements.<br>
 * If an intermediate element does not exist, it creates<br>
 * an element of the tag name in the 'path' segment as a child<br>
 * node of the current node.<br>
 * Finally, 'value' argument is set to an attribute or a text<br>
 * (a child node) of the leaf element.
 * @param {Node} object A root node
 * @param {String} value A value to set
 * @private
 * @returns {Node|undefined} -
 * @memberOf dojox.wire.XmlWire
*/
dojox.wire.XmlWire.prototype._setValue=function(object, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Set an attribute value or a child text value to an element<br>
 * </blockquote>
 * If 'exp' starts with '@', 'value' is set to the specified<br>
 * attribute.<br>
 * If 'exp' is "text()", 'value' is set to a child text.
 * @param {Node} node A node
 * @param {String} exp An expression for attribute or text
 * @param {String} value A value to set
 * @private
 * @memberOf dojox.wire.XmlWire
*/
dojox.wire.XmlWire.prototype._setNodeValue=function(node, exp, value){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an attribute value, a text value or an array of elements<br>
 * </blockquote>
 * This method first uses a root node passed in 'object' argument<br>
 * and 'path' property to identify an attribute, a text or<br>
 * elements.<br>
 * If 'path' starts with a slash (absolute), the first path<br>
 * segment is ignored assuming it point to the root node.<br>
 * (That is, "/a/b/@c" and "b/@c" against a root node access<br>
 * the same attribute value, assuming the root node is an element<br>
 * with a tag name, "a".)
 * @param {Node} object A root node
 * @private
 * 
 * @returns {Node|undefined|String||Array} -
 * @memberOf dojox.wire.XmlWire
*/
dojox.wire.XmlWire.prototype._getValue=function(object){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return an attribute value, a text value or an array of elements<br>
 * </blockquote>
 * If 'exp' starts with '@', an attribute value of the specified<br>
 * attribute is returned.<br>
 * If 'exp' is "text()", a child text value is returned.<br>
 * Otherwise, an array of child elements, the tag name of which<br>
 * match 'exp', is returned.
 * @param {Node} node A node
 * @param {String} exp An expression for attribute, text or elements
 * @private
 * 
 * @returns {String||Array} -
 * @memberOf dojox.wire.XmlWire
*/
dojox.wire.XmlWire.prototype._getNodeValue=function(node, exp){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a DOM document<br>
 * </blockquote>
 * If 'node' is specified, a DOM document of the node is returned.<br>
 * Otherwise, a DOM document is created.
 * @param {Node} node 
 * @private
 * 
 * @returns {Document} -
 * @memberOf dojox.wire.XmlWire
*/
dojox.wire.XmlWire.prototype._getDocument=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 Return a child node<br>
 * </blockquote>
 * A child element of the tag name specified with 'name' is<br>
 * returned.<br>
 * If 'name' ends with an array index, it is used to pick up<br>
 * the corresponding element from multiple child elements.
 * @param {Node} node A parent node
 * @param {String} name A tag name
 * @private
 * 
 * @returns {Node|null} -
 * @memberOf dojox.wire.XmlWire
*/
dojox.wire.XmlWire.prototype._getChildNode=function(node, name){};
/**
 * @param {mixed} props 
 * @param {mixed} node 
*/
dojox.xml.Script=function(props, node){};
/**
 * @namespace
*/
dojox.xml.parser={};
/**
 * <b>Summary:</b><blockquote>
 *	 Implementation of the DOM Level 3 attribute; scan node for text<br>
 * </blockquote>
 * Implementation of the DOM Level 3 attribute; scan node for text<br>
 * This function can also update the text of a node by replacing all child<br>
 * content of the node.
 * @param {Node} node The node to get the text off of or set the text on.
 * @param {String} [text] Optional argument of the text to apply to the node.
 * @returns {String} -
*/
dojox.xml.parser.textContent=function(node, text){};
/**
 * <b>Summary:</b><blockquote>
 *	 Removes all children of node and appends newChild. All the existing<br>
 *	 children will be destroyed.<br>
 * </blockquote>
 * Removes all children of node and appends newChild. All the existing<br>
 * children will be destroyed.
 * @param {Element} node The node to modify the children on
 * @param {Node} newChildren The children to add to the node.  It can either be a single Node or an
 * array of Nodes.<br>
*/
dojox.xml.parser.replaceChildren=function(node, newChildren){};
/**
 * <b>Summary:</b><blockquote>
 *	 removes all children from node and returns the count of children removed.<br>
 *	 The children nodes are not destroyed. Be sure to call dojo.destroy on them<br>
 *	 after they are not used anymore.<br>
 * </blockquote>
 * @param {Element} node The node to remove all the children from.
 * @returns {int} -
*/
dojox.xml.parser.removeChildren=function(node){};
/**
 * <b>Summary:</b><blockquote>
 *	 cross-browser implementation of creating an XML document object from null, empty string, and XML text..<br>
 * </blockquote>
 * @param {String} [str] Optional text to create the document from.  If not provided, an empty XML document will be created.
 * If str is empty string &quot;&quot;, then a new empty document will be created.
 * @param {String} [mimetype] Optional mimetype of the text.  Typically, this is text/xml.  Will be defaulted to text/xml if not provided.
 * @returns {DOMDocument|null} -
*/
dojox.xml.parser.parse=function(str, mimetype){};
/**
 * <b>Summary:</b><blockquote>
 *	 Implementation of MS's innerXML function.<br>
 * </blockquote>
 * @param {Node} node The node from which to generate the XML text representation.
 * @returns {String} -
*/
dojox.xml.parser.innerXML=function(node){};
/**
 * @class
 * @param {mixed} props 
 * @param {mixed} node 
 * @returns {dojox.xml.Script} new instance
*/
dojox.xml.Script=function(props, node){};
/**
 * @namespace
*/
dojox.xmpp.bosh={};
/**
 * <b>Summary:</b><blockquote>
 *	 removes the script element with the given id, from the given frameDocument.<br>
 *	 If no frameDocument is passed, the current document is used.<br>
 * </blockquote>
 * @param {String} id 
 * @param {Document} [frameDocument] 
*/
dojox.xmpp.bosh.remove=function(id, frameDocument){};
/**
 * @param {dojox.xmpp.bosh.__initArgs} args 
*/
dojox.xmpp.bosh.initialize=function(args){};
/**
 * @param {mixed} msg 
 * @param {mixed} rid 
*/
dojox.xmpp.bosh.handle=function(msg, rid){};
/**
 * <b>Summary:</b><blockquote>
 *	 sends a get request using a dynamically created script tag.<br>
 * </blockquote>
 * @param {dojox.xmpp.bosh.__ioArgs} args 
*/
dojox.xmpp.bosh.get=function(args){};
/**
*/
dojox.xmpp.bosh.findOpenIframe=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 inflight check function to see if dfd is still valid.<br>
 * </blockquote>
 * @param {Deferred} dfd 
 * @private
*/
dojox.xmpp.bosh._validCheck=function(dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 inflight function to handle a completed response.<br>
 * </blockquote>
 * @param {Deferred} dfd 
 * @private
*/
dojox.xmpp.bosh._resHandle=function(dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets up a Deferred object for an IO request.<br>
 * </blockquote>
 * @param {Object} args 
 * @private
 * @returns {dojo.Deferred} -
*/
dojox.xmpp.bosh._makeScriptDeferred=function(args){};
/**
 * <b>Summary:</b><blockquote>
 *	 inflight check function to see if IO finished.<br>
 * </blockquote>
 * @param {Deferred} dfd 
 * @private
*/
dojox.xmpp.bosh._ioCheck=function(dfd){};
/**
 * @param {mixed} index 
 * @private
*/
dojox.xmpp.bosh._iframeOnload=function(index){};
/**
 * <b>Summary:</b><blockquote>
 *	 okHandler function for dojo._ioSetArgs call.<br>
 * </blockquote>
 * @param {Deferred} dfd 
 * @private
*/
dojox.xmpp.bosh._deferredOk=function(dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 errHandler function for dojo._ioSetArgs call.<br>
 * </blockquote>
 * @param {Error} error 
 * @param {Deferred} dfd 
 * @private
*/
dojox.xmpp.bosh._deferredError=function(error, dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 canceller function for dojo._ioSetArgs call.<br>
 * </blockquote>
 * @param {Deferred} dfd 
 * @private
*/
dojox.xmpp.bosh._deferredCancel=function(dfd){};
/**
 * <b>Summary:</b><blockquote>
 *	 sets up an entry in the deadScripts array.<br>
 * </blockquote>
 * @param {Object} ioArgs 
 * @private
*/
dojox.xmpp.bosh._addDeadScript=function(ioArgs){};
/**
 * <b>Summary:</b><blockquote>
 *	 All the properties described in the dojo.__ioArgs type, apply to this<br>
 *	 type as well, EXCEPT &amp;quot;handleAs&amp;quot;. It is not applicable to<br>
 *	 dojox.xmpp.bosh.get() calls, since it is implied that the<br>
 *	 return will be a string of XML.<br>
 * </blockquote>
 * @private
*/
dojox.xmpp.bosh.__ioArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The arguments passed to dojox.xmpp.bosh.initialize<br>
 * </blockquote>
 * @private
*/
dojox.xmpp.bosh.__initArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 The arguments passed to dojox.xmpp.bosh.initialize<br>
 * </blockquote>
 * @class
 * @private
 * @returns {dojox.xmpp.bosh.__initArgs} new instance
*/
dojox.xmpp.bosh.__initArgs=function(){};
/**
 * <b>Summary:</b><blockquote>
 *	 All the properties described in the dojo.__ioArgs type, apply to this<br>
 *	 type as well, EXCEPT &amp;quot;handleAs&amp;quot;. It is not applicable to<br>
 *	 dojox.xmpp.bosh.get() calls, since it is implied that the<br>
 *	 return will be a string of XML.<br>
 * </blockquote>
 * @class
 * @extends dojo.__IoArgs
 * @private
 * @returns {dojox.xmpp.bosh.__ioArgs} new instance
*/
dojox.xmpp.bosh.__ioArgs=function(){};
/**
 * @param {mixed} props 
*/
dojox.xmpp.xmppSession=function(props){};
/**
 * @param {mixed} xmppService 
*/
dojox.xmpp.UserService=function(xmppService){};
/**
 * @param {mixed} props 
*/
dojox.xmpp.TransportSession=function(props){};
/**
 * @param {mixed} xmppSession 
*/
dojox.xmpp.RosterService=function(xmppSession){};
/**
 * @param {mixed} xmppService 
*/
dojox.xmpp.PresenceService=function(xmppService){};
/**
*/
dojox.xmpp.ChatService=function(){};
/**
 * @namespace
*/
dojox.xmpp.xmpp={};
/**
 * @namespace
*/
dojox.xmpp.widget={};
/**
 * @namespace
*/
dojox.xmpp.util={};
/**
 * @namespace
*/
dojox.xmpp.sasl={};
/**
 * @namespace
*/
dojox.xmpp.roster={};
/**
 * @namespace
*/
dojox.xmpp.presence={};
/**
 * @namespace
*/
dojox.xmpp.chat={};
/**
 * @class
 * @returns {dojox.xmpp.bosh.initialize} new instance
*/
dojox.xmpp.bosh.initialize=function(){};
/**
 * @class
 * @returns {dojox.xmpp.ChatService} new instance
*/
dojox.xmpp.ChatService=function(){};
/**
 * @param {mixed} state 
 * @memberOf dojox.xmpp.ChatService
*/
dojox.xmpp.ChatService.prototype.setState=function(state){};
/**
 * @param {mixed} session 
 * @memberOf dojox.xmpp.ChatService
*/
dojox.xmpp.ChatService.prototype.setSession=function(session){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.ChatService
*/
dojox.xmpp.ChatService.prototype.sendMessage=function(msg){};
/**
 * @param {mixed} state 
 * @memberOf dojox.xmpp.ChatService
*/
dojox.xmpp.ChatService.prototype.sendChatState=function(state){};
/**
 * @param {mixed} msg 
 * @param {mixed} initial 
 * @memberOf dojox.xmpp.ChatService
*/
dojox.xmpp.ChatService.prototype.recieveMessage=function(msg, initial){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.ChatService
*/
dojox.xmpp.ChatService.prototype.onNewMessage=function(msg){};
/**
 * @param {mixed} contact 
 * @memberOf dojox.xmpp.ChatService
*/
dojox.xmpp.ChatService.prototype.onInvite=function(contact){};
/**
 * @param {mixed} contact 
 * @memberOf dojox.xmpp.ChatService
*/
dojox.xmpp.ChatService.prototype.invite=function(contact){};
/**
 * @class
 * @param {mixed} xmppService 
 * @returns {dojox.xmpp.PresenceService} new instance
*/
dojox.xmpp.PresenceService=function(xmppService){};
/**
 * @namespace
*/
dojox.xmpp.PresenceService.presence={};
/**
 * @param {mixed} contact 
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype.unsubscribe=function(contact){};
/**
 * @param {mixed} jid 
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype.toggleContactInvisiblity=function(jid){};
/**
 * @param {mixed} jid 
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype.toggleBlockContact=function(jid){};
/**
 * @param {mixed} contact 
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype.subscribe=function(contact){};
/**
 * @param {mixed} avatarHash 
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype.sendAvatarHash=function(avatarHash){};
/**
 * @param {mixed} presence 
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype.publish=function(presence){};
/**
 * @param {mixed} contact 
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype.declineSubscription=function(contact){};
/**
 * @param {mixed} contact 
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype.cancelSubscription=function(contact){};
/**
 * @param {mixed} contact 
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype.approveSubscription=function(contact){};
/**
 * @private
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype._updateRestricted=function(){};
/**
 * @private
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype._setVisible=function(){};
/**
 * @private
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype._setPresence=function(){};
/**
 * @private
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype._setInvisible=function(){};
/**
 * @param {mixed} contact 
 * @param {mixed} type 
 * @private
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype._manageSubscriptions=function(contact, type){};
/**
 * @private
 * @memberOf dojox.xmpp.PresenceService
*/
dojox.xmpp.PresenceService.prototype._createRestrictedJid=function(){};
/**
 * @class
 * @param {mixed} xmppSession 
 * @returns {dojox.xmpp.RosterService} new instance
*/
dojox.xmpp.RosterService=function(xmppSession){};
/**
 * @param {mixed} res 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.verifyRoster=function(res){};
/**
 * @param {mixed} jid 
 * @param {mixed} name 
 * @param {mixed} groups 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.updateRosterItem=function(jid, name, groups){};
/**
 * @param {mixed} jid 
 * @param {mixed} oldGroup 
 * @param {mixed} newGroup 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.rosterItemRenameGroup=function(jid, oldGroup, newGroup){};
/**
 * @param {mixed} jid 
 * @param {mixed} newName 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.renameRosterItem=function(jid, newName){};
/**
 * @param {mixed} group 
 * @param {mixed} newGroup 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.renameRosterGroup=function(group, newGroup){};
/**
 * @param {mixed} jid 
 * @param {mixed} group 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.removeRosterItemFromGroup=function(jid, group){};
/**
 * @param {mixed} jid 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.removeRosterItem=function(jid){};
/**
 * @param {mixed} group 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.removeRosterGroup=function(group){};
/**
 * @param {mixed} type 
 * @param {mixed} binval 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.publishAvatar=function(type, binval){};
/**
 * @param {mixed} err 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.onVerifyRosterFailed=function(err){};
/**
 * @param {mixed} id 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.onVerifyRoster=function(id){};
/**
 * @param {mixed} jid 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.getAvatar=function(jid){};
/**
 * @param {mixed} jid 
 * @param {mixed} group 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.addRosterItemToGroup=function(jid, group){};
/**
 * @param {mixed} jid 
 * @param {mixed} name 
 * @param {mixed} groups 
 * @memberOf dojox.xmpp.RosterService
*/
dojox.xmpp.RosterService.prototype.addRosterItem=function(jid, name, groups){};
/**
 * @param {mixed} session 
*/
dojox.xmpp.sasl._Base=function(session){};
/**
*/
dojox.xmpp.sasl.SunWebClientAuth=function(){};
/**
*/
dojox.xmpp.sasl.Plain=function(){};
/**
*/
dojox.xmpp.sasl.DigestMD5=function(){};
/**
 * @class
 * @param {mixed} session 
 * @returns {dojox.xmpp.sasl._Base} new instance
*/
dojox.xmpp.sasl._Base=function(session){};
/**
 * @memberOf dojox.xmpp.sasl._Base
*/
dojox.xmpp.sasl._Base.prototype.startAuth=function(){};
/**
 * @memberOf dojox.xmpp.sasl._Base
*/
dojox.xmpp.sasl._Base.prototype.onSuccess=function(){};
/**
 * @memberOf dojox.xmpp.sasl._Base
*/
dojox.xmpp.sasl._Base.prototype.onSecondChallenge=function(){};
/**
 * @memberOf dojox.xmpp.sasl._Base
*/
dojox.xmpp.sasl._Base.prototype.onFirstChallenge=function(){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.sasl._Base
*/
dojox.xmpp.sasl._Base.prototype.onChallenge=function(msg){};
/**
 * @param {mixed} auth 
 * @memberOf dojox.xmpp.sasl._Base
*/
dojox.xmpp.sasl._Base.prototype.appendToAuth=function(auth){};
/**
 * @class
 * @extends dojox.xmpp.sasl._Base
 * @returns {dojox.xmpp.sasl.SunWebClientAuth} new instance
*/
dojox.xmpp.sasl.SunWebClientAuth=function(){};
/**
 * @class
 * @extends dojox.xmpp.sasl._Base
 * @returns {dojox.xmpp.sasl.Plain} new instance
*/
dojox.xmpp.sasl.Plain=function(){};
/**
 * @param {mixed} auth 
 * @memberOf dojox.xmpp.sasl.Plain
*/
dojox.xmpp.sasl.Plain.prototype.appendToAuth=function(auth){};
/**
 * @class
 * @extends dojox.xmpp.sasl._Base
 * @returns {dojox.xmpp.sasl.DigestMD5} new instance
*/
dojox.xmpp.sasl.DigestMD5=function(){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.sasl.DigestMD5
*/
dojox.xmpp.sasl.DigestMD5.prototype.onSecondChallenge=function(msg){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.sasl.DigestMD5
*/
dojox.xmpp.sasl.DigestMD5.prototype.onFirstChallenge=function(msg){};
/**
 * @class
 * @returns {dojox.xmpp.TransportSession} new instance
*/
dojox.xmpp.TransportSession=function(){};
/**
 * @param {mixed} state 
 * @param {mixed} message 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.setState=function(state, message){};
/**
 * @param {mixed} message 
 * @param {mixed} rid 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.sendXml=function(message, rid){};
/**
 * @param {mixed} rid 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.removeFromOutboundQueue=function(rid){};
/**
 * @param {mixed} rid 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.redispatchPacket=function(rid){};
/**
 * @param {mixed} msg 
 * @param {mixed} rid 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.processScriptSrc=function(msg, rid){};
/**
 * @param {mixed} body 
 * @param {mixed} rid 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.processResponse=function(body, rid){};
/**
 * @param {mixed} msg 
 * @param {mixed} rid 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.processProtocolResponse=function(msg, rid){};
/**
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.processProtocolPacketQueue=function(){};
/**
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.processInboundQueue=function(){};
/**
 * @param {mixed} err 
 * @param {mixed} httpStatusCode 
 * @param {mixed} rid 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.processError=function(err, httpStatusCode, rid){};
/**
 * @param {mixed} doc 
 * @param {mixed} rid 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.processDocument=function(doc, rid){};
/**
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.open=function(){};
/**
 * @param {mixed} newState 
 * @param {mixed} oldState 
 * @param {mixed} message 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.onTerminate=function(newState, oldState, message){};
/**
 * @param {mixed} newState 
 * @param {mixed} oldState 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.onReady=function(newState, oldState){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.onProcessProtocolResponse=function(msg){};
/**
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.isTerminated=function(){};
/**
 * @param {mixed} msg 
 * @param {mixed} protocolMatchType 
 * @param {mixed} matchId 
 * @param {mixed} matchProperty 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.dispatchPacket=function(msg, protocolMatchType, matchId, matchProperty){};
/**
 * @param {mixed} protocolMsg 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.close=function(protocolMsg){};
/**
 * @param {mixed} msg 
 * @param {mixed} rid 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.addToOutboundQueue=function(msg, rid){};
/**
 * @param {mixed} doc 
 * @param {mixed} rid 
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype.addToInboundQueue=function(doc, rid){};
/**
 * @private
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype._sendRestart=function(){};
/**
 * @private
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype._sendLogin=function(){};
/**
 * @private
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype._keepAlive=function(){};
/**
 * @private
 * @memberOf dojox.xmpp.TransportSession
*/
dojox.xmpp.TransportSession.prototype._dispatchPacket=function(){};
/**
 * @class
 * @returns {dojox.xmpp.TransportSession.open} new instance
*/
dojox.xmpp.TransportSession.open=function(){};
/**
 * @class
 * @private
 * @returns {dojox.xmpp.TransportSession._keepAlive} new instance
*/
dojox.xmpp.TransportSession._keepAlive=function(){};
/**
 * @class
 * @returns {dojox.xmpp.TransportSession.dispatchPacket} new instance
*/
dojox.xmpp.TransportSession.dispatchPacket=function(){};
/**
 * @class
 * @private
 * @returns {dojox.xmpp.TransportSession._dispatchPacket} new instance
*/
dojox.xmpp.TransportSession._dispatchPacket=function(){};
/**
 * @class
 * @returns {dojox.xmpp.TransportSession.processProtocolPacketQueue} new instance
*/
dojox.xmpp.TransportSession.processProtocolPacketQueue=function(){};
/**
 * @class
 * @returns {dojox.xmpp.TransportSession.sendXml} new instance
*/
dojox.xmpp.TransportSession.sendXml=function(){};
/**
 * @class
 * @returns {dojox.xmpp.TransportSession.processDocument} new instance
*/
dojox.xmpp.TransportSession.processDocument=function(){};
/**
 * @class
 * @returns {dojox.xmpp.TransportSession.processResponse} new instance
*/
dojox.xmpp.TransportSession.processResponse=function(){};
/**
 * @class
 * @returns {dojox.xmpp.TransportSession.setState} new instance
*/
dojox.xmpp.TransportSession.setState=function(){};
/**
 * @class
 * @returns {dojox.xmpp.TransportSession.processError} new instance
*/
dojox.xmpp.TransportSession.processError=function(){};
/**
 * @class
 * @param {mixed} xmppService 
 * @returns {dojox.xmpp.UserService} new instance
*/
dojox.xmpp.UserService=function(xmppService){};
/**
 * @param {mixed} props 
 * @memberOf dojox.xmpp.UserService
*/
dojox.xmpp.UserService.prototype.setPersonalProfile=function(props){};
/**
 * @param {mixed} err 
 * @memberOf dojox.xmpp.UserService
*/
dojox.xmpp.UserService.prototype.onSetPersonalProfileFailure=function(err){};
/**
 * @param {mixed} id 
 * @memberOf dojox.xmpp.UserService
*/
dojox.xmpp.UserService.prototype.onSetPersonalProfile=function(id){};
/**
 * @param {mixed} err 
 * @memberOf dojox.xmpp.UserService
*/
dojox.xmpp.UserService.prototype.onGetPersonalProfileFailure=function(err){};
/**
 * @param {mixed} profile 
 * @memberOf dojox.xmpp.UserService
*/
dojox.xmpp.UserService.prototype.onGetPersonalProfile=function(profile){};
/**
 * @memberOf dojox.xmpp.UserService
*/
dojox.xmpp.UserService.prototype.getPersonalProfile=function(){};
/**
 * @param {mixed} response 
 * @private
 * @memberOf dojox.xmpp.UserService
*/
dojox.xmpp.UserService.prototype._onSetPersonalProfile=function(response){};
/**
 * @param {mixed} profile 
 * @private
 * @memberOf dojox.xmpp.UserService
*/
dojox.xmpp.UserService.prototype._onGetPersonalProfile=function(profile){};
/**
 * @param {mixed} str 
*/
dojox.xmpp.util.xmlEncode=function(str){};
/**
 * @param {mixed} str 
*/
dojox.xmpp.util.stripHtml=function(str){};
/**
 * @param {mixed} str 
*/
dojox.xmpp.util.htmlToPlain=function(str){};
/**
 * @param {mixed} jid 
*/
dojox.xmpp.util.encodeJid=function(jid){};
/**
 * @param {mixed} jid 
*/
dojox.xmpp.util.decodeJid=function(jid){};
/**
 * @param {mixed} str 
*/
dojox.xmpp.util.decodeHtmlEntities=function(str){};
/**
 * @param {mixed} tag 
 * @param {mixed} attributes 
 * @param {mixed} terminal 
*/
dojox.xmpp.util.createElement=function(tag, attributes, terminal){};
/**
 * @namespace
*/
dojox.xmpp.util.Base64={};
/**
 * @param {mixed} input 
*/
dojox.xmpp.util.Base64.encode=function(input){};
/**
 * @param {mixed} input 
*/
dojox.xmpp.util.Base64.decode=function(input){};
/**
*/
dojox.xmpp.widget.ChatSession=function(){};
/**
 * @class
 * @extends dijit.layout.LayoutContainer
 * @extends dijit._Templated
 * @returns {dojox.xmpp.widget.ChatSession} new instance
*/
dojox.xmpp.widget.ChatSession=function(){};
/**
 * @memberOf dojox.xmpp.widget.ChatSession
*/
dojox.xmpp.widget.ChatSession.prototype.postCreate=function(){};
/**
 * @param {mixed} e 
 * @memberOf dojox.xmpp.widget.ChatSession
*/
dojox.xmpp.widget.ChatSession.prototype.onKeyPress=function(e){};
/**
 * @memberOf dojox.xmpp.widget.ChatSession
*/
dojox.xmpp.widget.ChatSession.prototype.goToLastMessage=function(){};
/**
 * @param {mixed} message 
 * @param {mixed} type 
 * @memberOf dojox.xmpp.widget.ChatSession
*/
dojox.xmpp.widget.ChatSession.prototype.displayMessage=function(message, type){};
/**
 * @class
 * @returns {dojox.xmpp.xmppSession} new instance
*/
dojox.xmpp.xmppSession=function(){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.simpleMessageHandler=function(msg){};
/**
 * @param {mixed} state 
 * @param {mixed} message 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.setState=function(state, message){};
/**
 * @param {mixed} stanzaType 
 * @param {mixed} to 
 * @param {mixed} id 
 * @param {mixed} errorType 
 * @param {mixed} condition 
 * @param {mixed} text 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.sendStanzaError=function(stanzaType, to, id, errorType, condition, text){};
/**
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.sendRestart=function(){};
/**
 * @param {mixed} iqId 
 * @param {mixed} to 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.sendIqResult=function(iqId, to){};
/**
 * @param {mixed} searchString 
 * @param {mixed} service 
 * @param {mixed} searchAttribute 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.search=function(searchString, service, searchAttribute){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.saslHandler=function(msg){};
/**
 * @param {mixed} elem 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.rosterSetHandler=function(elem){};
/**
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.retrieveRoster=function(){};
/**
 * @param {mixed} chatInstance 
 * @param {mixed} message 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.registerChatInstance=function(chatInstance, message){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.processXmppError=function(msg){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.processProtocolResponse=function(msg){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.presenceUpdate=function(msg){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.presenceSubscriptionRequest=function(msg){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.presenceHandler=function(msg){};
/**
 * @param {mixed} user 
 * @param {mixed} password 
 * @param {mixed} resource 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.open=function(user, password, resource){};
/**
 * @param {mixed} newState 
 * @param {mixed} oldState 
 * @param {mixed} message 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onTransportTerminate=function(newState, oldState, message){};
/**
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onTransportReady=function(){};
/**
 * @param {mixed} newState 
 * @param {mixed} oldState 
 * @param {mixed} message 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onTerminate=function(newState, oldState, message){};
/**
 * @param {mixed} req 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onSubscriptionRequest=function(req){};
/**
 * @param {mixed} results 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onSearchResults=function(results){};
/**
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onRosterUpdated=function(){};
/**
 * @param {mixed} ri 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onRosterRemoved=function(ri){};
/**
 * @param {mixed} ri 
 * @param {mixed} previousCopy 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onRosterChanged=function(ri, previousCopy){};
/**
 * @param {mixed} ri 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onRosterAdded=function(ri){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onRetrieveRoster=function(msg){};
/**
 * @param {mixed} chatInstance 
 * @param {mixed} message 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onRegisterChatInstance=function(chatInstance, message){};
/**
 * @param {mixed} p 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onPresenceUpdate=function(p){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onLoginFailure=function(msg){};
/**
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onLogin=function(){};
/**
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onConnected=function(){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onBindSession=function(msg){};
/**
 * @param {mixed} msg 
 * @param {mixed} hasSession 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onBindResource=function(msg, hasSession){};
/**
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.onActive=function(){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.messageHandler=function(msg){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.iqSetHandler=function(msg){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.iqHandler=function(msg){};
/**
 * @param {mixed} jid 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.getRosterIndex=function(jid){};
/**
 * @param {mixed} jid 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.getResourceFromJid=function(jid){};
/**
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.getNextIqId=function(){};
/**
 * @param {mixed} jid 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.getBareJid=function(jid){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.featuresHandler=function(msg){};
/**
 * @param {mixed} msg 
 * @param {mixed} type 
 * @param {mixed} matchId 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.dispatchPacket=function(msg, type, matchId){};
/**
 * @param {mixed} elem 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.createRosterEntry=function(elem){};
/**
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.close=function(){};
/**
 * @param {mixed} msg 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.chatHandler=function(msg){};
/**
 * @param {mixed} hasSession 
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype.bindResource=function(hasSession){};
/**
 * @param {mixed} msg 
 * @private
 * @memberOf dojox.xmpp.xmppSession
*/
dojox.xmpp.xmppSession.prototype._onSearchResults=function(msg){};
/**
 * @class
 * @returns {dojox.xmpp.xmppSession.open} new instance
*/
dojox.xmpp.xmppSession.open=function(){};
/**
 * @class
 * @returns {dojox.xmpp.xmppSession.close} new instance
*/
dojox.xmpp.xmppSession.close=function(){};
/**
 * @class
 * @returns {dojox.xmpp.xmppSession.featuresHandler} new instance
*/
dojox.xmpp.xmppSession.featuresHandler=function(){};
/**
 * @class
 * @returns {dojox.xmpp.xmppSession.chatHandler} new instance
*/
dojox.xmpp.xmppSession.chatHandler=function(){};
/**
 * @class
 * @returns {dojox.xmpp.xmppSession.setState} new instance
*/
dojox.xmpp.xmppSession.setState=function(){};
/**
 * @class
 * @returns {dojox.xmpp.xmppSession.onBindResource} new instance
*/
dojox.xmpp.xmppSession.onBindResource=function(){};
/**
 * @class
 * @returns {dojox.xmpp.xmppSession.onTransportReady} new instance
*/
dojox.xmpp.xmppSession.onTransportReady=function(){};
/**
 * @namespace
*/
dojox.xmpp.xmpp.error={};

